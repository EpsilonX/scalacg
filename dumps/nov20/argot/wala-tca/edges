grizzled.math.util$$anonfun$max$1: <init>() ===> scala.runtime.AbstractFunction2$mcIII$sp: <init>()
grizzled.math.util$$anonfun$max$1: apply$mcIII$sp(II) ===> scala.math.package$: max(II)
grizzled.math.util$$anonfun$max$1: apply(II) ===> grizzled.math.util$$anonfun$max$1: apply$mcIII$sp(II)
grizzled.math.util$$anonfun$max$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> grizzled.math.util$$anonfun$max$1: apply(II)
grizzled.math.util$$anonfun$max$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
grizzled.math.util$$anonfun$max$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
grizzled.math.util$: <clinit>() ===> grizzled.math.util$: <init>()
grizzled.math.util$: <init>() ===> java.lang.Object: <init>()
grizzled.math.util$: max(Lscala/collection/Seq;) ===> grizzled.math.util$$anonfun$max$1: <init>()
grizzled.math.util$: max(Lscala/collection/Seq;) ===> scala.collection.Seq: $div$colon(Ljava/lang/Object;Lscala/Function2;)
grizzled.math.util$: max(Lscala/collection/Seq;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
grizzled.math.util$: max(Lscala/collection/Seq;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
grizzled.string.GrizzledString$: <clinit>() ===> grizzled.string.GrizzledString$: <init>()
grizzled.string.GrizzledString$: <init>() ===> java.lang.Object: <init>()
grizzled.string.GrizzledString$: JavaString_GrizzledString(Ljava/lang/String;) ===> grizzled.string.GrizzledString: <init>(Ljava/lang/String;)
grizzled.string.GrizzledString: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
grizzled.string.GrizzledString: rtrim() ===> grizzled.string.GrizzledString: RTrimRegex()
grizzled.string.GrizzledString: rtrim() ===> grizzled.string.GrizzledString: string()
grizzled.string.GrizzledString: rtrim() ===> scala.util.matching.Regex: replaceFirstIn(Ljava/lang/CharSequence;Ljava/lang/String;)
grizzled.string.GrizzledString: RTrimRegex$lzycompute() ===> scala.collection.immutable.StringLike: r()
grizzled.string.GrizzledString: RTrimRegex$lzycompute() ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
grizzled.string.GrizzledString: RTrimRegex$lzycompute() ===> scala.Predef$: augmentString(Ljava/lang/String;)
grizzled.string.GrizzledString: RTrimRegex() ===> grizzled.string.GrizzledString: RTrimRegex$lzycompute()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: <init>(Lgrizzled/string/WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1;) ===> scala.runtime.AbstractFunction2$mcIII$sp: <init>()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: apply(II) ===> grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: apply$mcIII$sp(II)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: apply(II)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$2: <init>(Lgrizzled/string/WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1;) ===> scala.runtime.AbstractFunction1: <init>()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$2: apply(Ljava/lang/Object;) ===> grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$2: apply(Ljava/lang/String;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$2: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$2: apply(Ljava/lang/String;) ===> java.lang.String: length()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: <init>(Lgrizzled/string/WordWrapper;Ljava/lang/String;Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Lscala/collection/mutable/ArrayBuffer;Lscala/runtime/ObjectRef;) ===> java.lang.NullPointerException: <init>()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: <init>(Lgrizzled/string/WordWrapper;Ljava/lang/String;Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Lscala/collection/mutable/ArrayBuffer;Lscala/runtime/ObjectRef;) ===> scala.runtime.AbstractFunction1: <init>()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/Object;) ===> grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$1: <init>(Lgrizzled/string/WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1$$anonfun$2: <init>(Lgrizzled/string/WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> grizzled.string.WordWrapper: grizzled$string$WordWrapper$$assembleLine$1(Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Ljava/lang/String;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> grizzled.string.WordWrapper: indentation()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> grizzled.string.WordWrapper: wrapWidth()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> java.lang.String: length()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer$: canBuildFrom()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer: clear()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.collection.mutable.ResizableArray: length()
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.collection.TraversableLike: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.collection.TraversableOnce: $div$colon(Ljava/lang/Object;Lscala/Function2;)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: apply(Ljava/lang/String;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
grizzled.string.WordWrapper$$anonfun$wrap$1: <init>(Lgrizzled/string/WordWrapper;Ljava/lang/String;Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;) ===> java.lang.NullPointerException: <init>()
grizzled.string.WordWrapper$$anonfun$wrap$1: <init>(Lgrizzled/string/WordWrapper;Ljava/lang/String;Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;) ===> scala.runtime.AbstractFunction1: <init>()
grizzled.string.WordWrapper$$anonfun$wrap$1: apply(Ljava/lang/Object;) ===> grizzled.string.WordWrapper$$anonfun$wrap$1: apply(Ljava/lang/String;)
grizzled.string.WordWrapper$$anonfun$wrap$1: apply(Ljava/lang/String;) ===> grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
grizzled.string.WordWrapper$$anonfun$wrap$1: apply(Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;)
grizzled.string.WordWrapper$: <clinit>() ===> grizzled.string.WordWrapper$: <init>()
grizzled.string.WordWrapper$: <init>() ===> java.lang.Object: <init>()
grizzled.string.WordWrapper: <init>(IILjava/lang/String;C) ===> java.lang.Object: <init>()
grizzled.string.WordWrapper: <init>(IILjava/lang/String;C) ===> java.lang.String: length()
grizzled.string.WordWrapper: <init>(IILjava/lang/String;C) ===> scala.Predef$: require(Z)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$assembleLine$1(Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: <init>()
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$assembleLine$1(Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$assembleLine$1(Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: toString()
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$assembleLine$1(Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Ljava/lang/String;) ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> grizzled.string.GrizzledString$: JavaString_GrizzledString(Ljava/lang/String;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> grizzled.string.GrizzledString: rtrim()
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> grizzled.string.WordWrapper$$anonfun$grizzled$string$WordWrapper$$wrapOneLine$1$1: <init>(Lgrizzled/string/WordWrapper;Ljava/lang/String;Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Lscala/collection/mutable/ArrayBuffer;Lscala/runtime/ObjectRef;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> grizzled.string.WordWrapper: grizzled$string$WordWrapper$$assembleLine$1(Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;Ljava/lang/String;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.String: split(Ljava/lang/String;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer: <init>()
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.ArrayOps: foreach(Lscala/Function1;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.ResizableArray: length()
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.Predef$: refArrayOps([Ljava/lang/Object;)
grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> grizzled.string.WordWrapper$$anonfun$wrap$1: <init>(Lgrizzled/string/WordWrapper;Ljava/lang/String;Ljava/lang/String;Lscala/collection/mutable/ArrayBuffer;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> grizzled.string.WordWrapper: grizzled$string$WordWrapper$$wrapOneLine$1(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> grizzled.string.WordWrapper: indentation()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> grizzled.string.WordWrapper: indentChar()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> grizzled.string.WordWrapper: prefix()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> grizzled.string.WordWrapper: prefixLength()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> java.lang.Object: toString()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> java.lang.String: split(Ljava/lang/String;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> org.clapper.argot.CommandLineOption: toString()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> org.clapper.argot.Parameter: toString()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.collection.immutable.StringLike: $times(I)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.collection.mutable.ArrayBuffer: <init>()
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.collection.mutable.ArrayOps: drop(I)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.collection.mutable.ArrayOps: foreach(Lscala/Function1;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.Predef$: augmentString(Ljava/lang/String;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.Predef$: refArrayOps([Ljava/lang/Object;)
grizzled.string.WordWrapper: wrap(Ljava/lang/String;) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
java.io.BufferedReader: <init>(Ljava/io/Reader;) ===> java.io.BufferedReader: <init>(Ljava/io/Reader;I)
java.io.BufferedReader: <init>(Ljava/io/Reader;I) ===> java.io.Reader: <init>(Ljava/lang/Object;)
java.io.BufferedReader: <init>(Ljava/io/Reader;I) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.io.BufferedReader: ensureOpen() ===> java.io.IOException: <init>(Ljava/lang/String;)
java.io.BufferedReader: fill() ===> java.io.Reader: read([CII)
java.io.BufferedReader: fill() ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.io.BufferedReader: read([CII) ===> java.io.BufferedReader: ensureOpen()
java.io.BufferedReader: read([CII) ===> java.io.BufferedReader: read1([CII)
java.io.BufferedReader: read([CII) ===> java.io.Reader: ready()
java.io.BufferedReader: read([CII) ===> java.lang.IndexOutOfBoundsException: <init>()
java.io.BufferedReader: read1([CII) ===> java.io.BufferedReader: fill()
java.io.BufferedReader: read1([CII) ===> java.io.Reader: read([CII)
java.io.BufferedReader: read1([CII) ===> java.lang.Math: min(II)
java.io.BufferedReader: read1([CII) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.io.BufferedReader: ready() ===> java.io.BufferedReader: ensureOpen()
java.io.BufferedReader: ready() ===> java.io.BufferedReader: fill()
java.io.BufferedReader: ready() ===> java.io.Reader: ready()
java.io.File$1: <init>() ===> java.lang.Object: <init>()
java.io.File$2: <init>() ===> java.lang.Object: <init>()
java.io.File: <clinit>() ===> java.io.File$1: <init>()
java.io.File: <clinit>() ===> java.io.File$2: <init>()
java.io.File: <clinit>() ===> java.io.FileSystem: getFileSystem()
java.io.File: <clinit>() ===> java.lang.StringBuilder: <init>()
java.io.File: <clinit>() ===> java.lang.StringBuilder: append(C)
java.io.File: <clinit>() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.io.File: <clinit>() ===> java.lang.StringBuilder: toString()
java.io.File: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.io.File: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
java.io.File: compareTo(Ljava/lang/Object;) ===> java.io.File: compareTo(Ljava/io/File;)
java.io.File: equals(Ljava/lang/Object;) ===> java.io.File: compareTo(Ljava/io/File;)
java.io.File: exists() ===> java.lang.System: getSecurityManager()
java.io.File: toString() ===> java.io.File: getPath()
java.io.FileSystem: <clinit>() ===> java.io.FileSystem: getBooleanProperty(Ljava/lang/String;Z)
java.io.FileSystem: getBooleanProperty(Ljava/lang/String;Z) ===> java.lang.String: equalsIgnoreCase(Ljava/lang/String;)
java.io.FileSystem: getBooleanProperty(Ljava/lang/String;Z) ===> java.lang.System: getProperty(Ljava/lang/String;)
java.io.InputStreamReader: <init>(Ljava/io/InputStream;) ===> java.io.Reader: <init>(Ljava/lang/Object;)
java.io.InputStreamReader: <init>(Ljava/io/InputStream;) ===> java.lang.Error: <init>(Ljava/lang/Throwable;)
java.io.IOException: <init>(Ljava/lang/String;) ===> java.lang.Exception: <init>(Ljava/lang/String;)
java.io.ObjectStreamClass: <clinit>() ===> java.io.ObjectStreamClass: initNative()
java.io.ObjectStreamClass: <clinit>() ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedAction;)
java.io.ObjectStreamClass: getClassSignature(Ljava/lang/Class;) ===> java.lang.InternalError: <init>()
java.io.ObjectStreamClass: getClassSignature(Ljava/lang/Class;) ===> java.lang.String: replace(CC)
java.io.ObjectStreamClass: getClassSignature(Ljava/lang/Class;) ===> java.lang.StringBuilder: <init>()
java.io.ObjectStreamClass: getClassSignature(Ljava/lang/Class;) ===> java.lang.StringBuilder: append(C)
java.io.ObjectStreamClass: getClassSignature(Ljava/lang/Class;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.io.ObjectStreamClass: getClassSignature(Ljava/lang/Class;) ===> java.lang.StringBuilder: toString()
java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;) ===> java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;Z)
java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;Z) ===> java.io.ObjectStreamClass: getClassSignature(Ljava/lang/Class;)
java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;Z) ===> java.lang.NullPointerException: <init>()
java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;Z) ===> java.lang.Object: <init>()
java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;Z) ===> java.lang.String: intern()
java.io.ObjectStreamField: compareTo(Ljava/lang/Object;) ===> java.io.ObjectStreamField: isPrimitive()
java.io.ObjectStreamField: compareTo(Ljava/lang/Object;) ===> java.lang.String: compareTo(Ljava/lang/String;)
java.io.ObjectStreamField: isPrimitive() ===> java.lang.String: charAt(I)
java.io.ObjectStreamField: toString() ===> java.lang.StringBuilder: <init>()
java.io.ObjectStreamField: toString() ===> java.lang.StringBuilder: append(C)
java.io.ObjectStreamField: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.io.ObjectStreamField: toString() ===> java.lang.StringBuilder: toString()
java.io.Reader: <init>(Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
java.io.Reader: <init>(Ljava/lang/Object;) ===> java.lang.Object: <init>()
java.io.Reader: read([C) ===> java.io.Reader: read([CII)
java.lang.AbstractStringBuilder: <init>(I) ===> java.lang.Object: <init>()
java.lang.AbstractStringBuilder: append([C) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append([C) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.AbstractStringBuilder: append([CII) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append([CII) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.AbstractStringBuilder: append(C) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append(I) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/String;)
java.lang.AbstractStringBuilder: append(I) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append(I) ===> java.lang.Integer: getChars(II[C)
java.lang.AbstractStringBuilder: append(I) ===> java.lang.Integer: stringSize(I)
java.lang.AbstractStringBuilder: append(J) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/String;)
java.lang.AbstractStringBuilder: append(J) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append(J) ===> java.lang.Long: getChars(JI[C)
java.lang.AbstractStringBuilder: append(J) ===> java.lang.Long: stringSize(J)
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.CharSequence: charAt(I)
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.CharSequence: length()
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.StringBuilder: <init>()
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.StringBuilder: append(I)
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.StringBuilder: toString()
java.lang.AbstractStringBuilder: append(Ljava/lang/String;) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append(Ljava/lang/String;) ===> java.lang.String: getChars(II[CI)
java.lang.AbstractStringBuilder: append(Ljava/lang/String;) ===> java.lang.String: length()
java.lang.AbstractStringBuilder: append(Ljava/lang/StringBuffer;) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/String;)
java.lang.AbstractStringBuilder: append(Ljava/lang/StringBuffer;) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: append(Ljava/lang/StringBuffer;) ===> java.lang.StringBuffer: getChars(II[CI)
java.lang.AbstractStringBuilder: append(Ljava/lang/StringBuffer;) ===> java.lang.StringBuffer: length()
java.lang.AbstractStringBuilder: append(Z) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: appendCodePoint(I) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: appendCodePoint(I) ===> java.lang.Character: isValidCodePoint(I)
java.lang.AbstractStringBuilder: appendCodePoint(I) ===> java.lang.Character: toSurrogates(I[CI)
java.lang.AbstractStringBuilder: appendCodePoint(I) ===> java.lang.IllegalArgumentException: <init>()
java.lang.AbstractStringBuilder: charAt(I) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.AbstractStringBuilder: delete(II) ===> java.lang.StringIndexOutOfBoundsException: <init>()
java.lang.AbstractStringBuilder: delete(II) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.AbstractStringBuilder: delete(II) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.AbstractStringBuilder: expandCapacity(I) ===> java.util.Arrays: copyOf([CI)
java.lang.AbstractStringBuilder: getChars(II[CI) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.AbstractStringBuilder: getChars(II[CI) ===> java.lang.StringIndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.lang.AbstractStringBuilder: getChars(II[CI) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.AbstractStringBuilder: insert(IC) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: insert(IC) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.AbstractStringBuilder: reverse() ===> java.lang.Character: isHighSurrogate(C)
java.lang.AbstractStringBuilder: reverse() ===> java.lang.Character: isLowSurrogate(C)
java.lang.AbstractStringBuilder: setLength(I) ===> java.lang.AbstractStringBuilder: expandCapacity(I)
java.lang.AbstractStringBuilder: setLength(I) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.AbstractStringBuilder: subSequence(II) ===> java.lang.AbstractStringBuilder: substring(II)
java.lang.AbstractStringBuilder: substring(II) ===> java.lang.String: <init>([CII)
java.lang.AbstractStringBuilder: substring(II) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.ArithmeticException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.ArithmeticException: <init>(Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.lang.ArrayIndexOutOfBoundsException: <init>(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.lang.ArrayIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: <init>()
java.lang.ArrayIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: append(I)
java.lang.ArrayIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.ArrayIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: toString()
java.lang.ArrayIndexOutOfBoundsException: <init>(Ljava/lang/String;) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.lang.ArrayStoreException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.AssertionError: <init>() ===> java.lang.Error: <init>()
java.lang.AssertionError: <init>(I) ===> java.lang.AssertionError: <init>(Ljava/lang/String;)
java.lang.AssertionError: <init>(I) ===> java.lang.StringBuilder: <init>()
java.lang.AssertionError: <init>(I) ===> java.lang.StringBuilder: append(I)
java.lang.AssertionError: <init>(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.AssertionError: <init>(I) ===> java.lang.StringBuilder: toString()
java.lang.AssertionError: <init>(J) ===> java.lang.AssertionError: <init>(Ljava/lang/String;)
java.lang.AssertionError: <init>(J) ===> java.lang.StringBuilder: <init>()
java.lang.AssertionError: <init>(J) ===> java.lang.StringBuilder: append(J)
java.lang.AssertionError: <init>(J) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.AssertionError: <init>(J) ===> java.lang.StringBuilder: toString()
java.lang.AssertionError: <init>(Ljava/lang/Object;) ===> java.lang.AssertionError: <init>(Ljava/lang/String;)
java.lang.AssertionError: <init>(Ljava/lang/Object;) ===> java.lang.AssertionError: initCause(Ljava/lang/Throwable;)
java.lang.AssertionError: <init>(Ljava/lang/Object;) ===> java.lang.StringBuilder: <init>()
java.lang.AssertionError: <init>(Ljava/lang/Object;) ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.lang.AssertionError: <init>(Ljava/lang/Object;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.AssertionError: <init>(Ljava/lang/Object;) ===> java.lang.StringBuilder: toString()
java.lang.AssertionError: <init>(Ljava/lang/String;) ===> java.lang.Error: <init>(Ljava/lang/String;)
java.lang.Boolean: <clinit>() ===> java.lang.Boolean: <init>(Z)
java.lang.Boolean: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Boolean: <init>(Z) ===> java.lang.Object: <init>()
java.lang.Boolean: compareTo(Ljava/lang/Object;) ===> java.lang.Boolean: compareTo(Ljava/lang/Boolean;)
java.lang.Boolean: equals(Ljava/lang/Object;) ===> java.lang.Boolean: booleanValue()
java.lang.Byte$ByteCache: <clinit>() ===> java.lang.Byte: <init>(B)
java.lang.Byte: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Byte: <init>(B) ===> java.lang.Number: <init>()
java.lang.Byte: compareTo(Ljava/lang/Object;) ===> java.lang.Byte: compareTo(Ljava/lang/Byte;)
java.lang.Byte: equals(Ljava/lang/Object;) ===> java.lang.Byte: byteValue()
java.lang.Byte: toString() ===> java.lang.String: valueOf(I)
java.lang.Byte: toString(B) ===> java.lang.Integer: toString(II)
java.lang.Character$CharacterCache: <clinit>() ===> java.lang.Character: <init>(C)
java.lang.Character$Subset: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>(Ljava/lang/String;)
java.lang.Character$Subset: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
java.lang.Character$Subset: hashCode() ===> java.lang.Object: hashCode()
java.lang.Character$UnicodeBlock: <clinit>() ===> java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;)
java.lang.Character$UnicodeBlock: <clinit>() ===> java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;[Ljava/lang/String;)
java.lang.Character$UnicodeBlock: <clinit>() ===> java.util.HashMap: <init>()
java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;) ===> java.lang.Character$Subset: <init>(Ljava/lang/String;)
java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;) ===> java.lang.String: toUpperCase(Ljava/util/Locale;)
java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;) ===> java.util.Map: put(Ljava/lang/Object;Ljava/lang/Object;)
java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;[Ljava/lang/String;) ===> java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;)
java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;[Ljava/lang/String;) ===> java.lang.String: toUpperCase(Ljava/util/Locale;)
java.lang.Character$UnicodeBlock: <init>(Ljava/lang/String;[Ljava/lang/String;) ===> java.util.Map: put(Ljava/lang/Object;Ljava/lang/Object;)
java.lang.Character$UnicodeBlock: forName(Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>()
java.lang.Character$UnicodeBlock: forName(Ljava/lang/String;) ===> java.lang.String: toUpperCase(Ljava/util/Locale;)
java.lang.Character$UnicodeBlock: forName(Ljava/lang/String;) ===> java.util.Map: get(Ljava/lang/Object;)
java.lang.Character$UnicodeBlock: of(I) ===> java.lang.Character: isValidCodePoint(I)
java.lang.Character$UnicodeBlock: of(I) ===> java.lang.IllegalArgumentException: <init>()
java.lang.Character: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Character: <init>(C) ===> java.lang.Object: <init>()
java.lang.Character: codePointAt(Ljava/lang/CharSequence;I) ===> java.lang.Character: isHighSurrogate(C)
java.lang.Character: codePointAt(Ljava/lang/CharSequence;I) ===> java.lang.Character: isLowSurrogate(C)
java.lang.Character: codePointAt(Ljava/lang/CharSequence;I) ===> java.lang.Character: toCodePoint(CC)
java.lang.Character: codePointAt(Ljava/lang/CharSequence;I) ===> java.lang.CharSequence: charAt(I)
java.lang.Character: codePointAt(Ljava/lang/CharSequence;I) ===> java.lang.CharSequence: length()
java.lang.Character: codePointAtImpl([CII) ===> java.lang.Character: isHighSurrogate(C)
java.lang.Character: codePointAtImpl([CII) ===> java.lang.Character: isLowSurrogate(C)
java.lang.Character: codePointAtImpl([CII) ===> java.lang.Character: toCodePoint(CC)
java.lang.Character: codePointBefore(Ljava/lang/CharSequence;I) ===> java.lang.Character: isHighSurrogate(C)
java.lang.Character: codePointBefore(Ljava/lang/CharSequence;I) ===> java.lang.Character: isLowSurrogate(C)
java.lang.Character: codePointBefore(Ljava/lang/CharSequence;I) ===> java.lang.Character: toCodePoint(CC)
java.lang.Character: codePointBefore(Ljava/lang/CharSequence;I) ===> java.lang.CharSequence: charAt(I)
java.lang.Character: codePointBeforeImpl([CII) ===> java.lang.Character: isHighSurrogate(C)
java.lang.Character: codePointBeforeImpl([CII) ===> java.lang.Character: isLowSurrogate(C)
java.lang.Character: codePointBeforeImpl([CII) ===> java.lang.Character: toCodePoint(CC)
java.lang.Character: compareTo(Ljava/lang/Object;) ===> java.lang.Character: compareTo(Ljava/lang/Character;)
java.lang.Character: digit(CI) ===> java.lang.Character: digit(II)
java.lang.Character: digit(II) ===> java.lang.CharacterData: digit(II)
java.lang.Character: digit(II) ===> java.lang.CharacterData: of(I)
java.lang.Character: equals(Ljava/lang/Object;) ===> java.lang.Character: charValue()
java.lang.Character: getType(I) ===> java.lang.CharacterData: getType(I)
java.lang.Character: getType(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: isDefined(I) ===> java.lang.Character: getType(I)
java.lang.Character: isDigit(I) ===> java.lang.Character: getType(I)
java.lang.Character: isIdentifierIgnorable(I) ===> java.lang.CharacterData: isIdentifierIgnorable(I)
java.lang.Character: isIdentifierIgnorable(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: isJavaIdentifierPart(I) ===> java.lang.CharacterData: isJavaIdentifierPart(I)
java.lang.Character: isJavaIdentifierPart(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: isJavaIdentifierStart(I) ===> java.lang.CharacterData: isJavaIdentifierStart(I)
java.lang.Character: isJavaIdentifierStart(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: isLetter(I) ===> java.lang.Character: getType(I)
java.lang.Character: isLetterOrDigit(I) ===> java.lang.Character: getType(I)
java.lang.Character: isLowerCase(I) ===> java.lang.Character: getType(I)
java.lang.Character: isMirrored(I) ===> java.lang.CharacterData: isMirrored(I)
java.lang.Character: isMirrored(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: isSpaceChar(I) ===> java.lang.Character: getType(I)
java.lang.Character: isTitleCase(I) ===> java.lang.Character: getType(I)
java.lang.Character: isUnicodeIdentifierPart(I) ===> java.lang.CharacterData: isUnicodeIdentifierPart(I)
java.lang.Character: isUnicodeIdentifierPart(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: isUnicodeIdentifierStart(I) ===> java.lang.CharacterData: isUnicodeIdentifierStart(I)
java.lang.Character: isUnicodeIdentifierStart(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: isUpperCase(C) ===> java.lang.Character: isUpperCase(I)
java.lang.Character: isUpperCase(I) ===> java.lang.Character: getType(I)
java.lang.Character: isWhitespace(I) ===> java.lang.CharacterData: isWhitespace(I)
java.lang.Character: isWhitespace(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: toChars(I) ===> java.lang.Character: toSurrogates(I[CI)
java.lang.Character: toChars(I) ===> java.lang.IllegalArgumentException: <init>()
java.lang.Character: toChars(I[CI) ===> java.lang.Character: toSurrogates(I[CI)
java.lang.Character: toChars(I[CI) ===> java.lang.IllegalArgumentException: <init>()
java.lang.Character: toLowerCase(C) ===> java.lang.Character: toLowerCase(I)
java.lang.Character: toLowerCase(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: toLowerCase(I) ===> java.lang.CharacterData: toLowerCase(I)
java.lang.Character: toString() ===> java.lang.String: valueOf([C)
java.lang.Character: toUpperCase(C) ===> java.lang.Character: toUpperCase(I)
java.lang.Character: toUpperCase(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: toUpperCase(I) ===> java.lang.CharacterData: toUpperCase(I)
java.lang.Character: toUpperCaseCharArray(I) ===> java.lang.AssertionError: <init>()
java.lang.Character: toUpperCaseCharArray(I) ===> java.lang.Character: isSupplementaryCodePoint(I)
java.lang.Character: toUpperCaseCharArray(I) ===> java.lang.Character: isValidCodePoint(I)
java.lang.Character: toUpperCaseCharArray(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: toUpperCaseCharArray(I) ===> java.lang.CharacterData: toUpperCaseCharArray(I)
java.lang.Character: toUpperCaseEx(I) ===> java.lang.AssertionError: <init>()
java.lang.Character: toUpperCaseEx(I) ===> java.lang.Character: isValidCodePoint(I)
java.lang.Character: toUpperCaseEx(I) ===> java.lang.CharacterData: of(I)
java.lang.Character: toUpperCaseEx(I) ===> java.lang.CharacterData: toUpperCaseEx(I)
java.lang.Character: valueOf(C) ===> java.lang.Character: <init>(C)
java.lang.CharacterData00: <clinit>() ===> java.lang.AssertionError: <init>()
java.lang.CharacterData00: <clinit>() ===> java.lang.CharacterData00: <init>()
java.lang.CharacterData00: <clinit>() ===> java.lang.String: toCharArray()
java.lang.CharacterData00: <init>() ===> java.lang.CharacterData: <init>()
java.lang.CharacterData00: digit(II) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: getType(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: isIdentifierIgnorable(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: isJavaIdentifierPart(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: isJavaIdentifierStart(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: isMirrored(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: isUnicodeIdentifierPart(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: isUnicodeIdentifierStart(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: isWhitespace(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: toLowerCase(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: toUpperCase(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData00: toUpperCaseCharArray(I) ===> java.lang.CharacterData00: findInCharMap(I)
java.lang.CharacterData00: toUpperCaseEx(I) ===> java.lang.CharacterData00: getProperties(I)
java.lang.CharacterData01: <clinit>() ===> java.lang.AssertionError: <init>()
java.lang.CharacterData01: <clinit>() ===> java.lang.CharacterData01: <init>()
java.lang.CharacterData01: <clinit>() ===> java.lang.String: toCharArray()
java.lang.CharacterData01: <init>() ===> java.lang.CharacterData: <init>()
java.lang.CharacterData01: digit(II) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: getType(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: isIdentifierIgnorable(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: isJavaIdentifierPart(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: isJavaIdentifierStart(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: isMirrored(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: isUnicodeIdentifierPart(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: isUnicodeIdentifierStart(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: isWhitespace(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: toLowerCase(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData01: toUpperCase(I) ===> java.lang.CharacterData01: getProperties(I)
java.lang.CharacterData02: <clinit>() ===> java.lang.AssertionError: <init>()
java.lang.CharacterData02: <clinit>() ===> java.lang.CharacterData02: <init>()
java.lang.CharacterData02: <clinit>() ===> java.lang.String: toCharArray()
java.lang.CharacterData02: <init>() ===> java.lang.CharacterData: <init>()
java.lang.CharacterData02: digit(II) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: getType(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: isIdentifierIgnorable(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: isJavaIdentifierPart(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: isJavaIdentifierStart(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: isMirrored(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: isUnicodeIdentifierPart(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: isUnicodeIdentifierStart(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: isWhitespace(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: toLowerCase(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData02: toUpperCase(I) ===> java.lang.CharacterData02: getProperties(I)
java.lang.CharacterData0E: <clinit>() ===> java.lang.AssertionError: <init>()
java.lang.CharacterData0E: <clinit>() ===> java.lang.CharacterData0E: <init>()
java.lang.CharacterData0E: <clinit>() ===> java.lang.String: toCharArray()
java.lang.CharacterData0E: <init>() ===> java.lang.CharacterData: <init>()
java.lang.CharacterData0E: digit(II) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: getType(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: isIdentifierIgnorable(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: isJavaIdentifierPart(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: isJavaIdentifierStart(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: isMirrored(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: isUnicodeIdentifierPart(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: isUnicodeIdentifierStart(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: isWhitespace(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: toLowerCase(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData0E: toUpperCase(I) ===> java.lang.CharacterData0E: getProperties(I)
java.lang.CharacterData: <init>() ===> java.lang.Object: <init>()
java.lang.CharacterData: toUpperCaseEx(I) ===> java.lang.CharacterData: toUpperCase(I)
java.lang.CharacterDataLatin1: <clinit>() ===> java.lang.AssertionError: <init>()
java.lang.CharacterDataLatin1: <clinit>() ===> java.lang.CharacterDataLatin1: <init>()
java.lang.CharacterDataLatin1: <clinit>() ===> java.lang.String: toCharArray()
java.lang.CharacterDataLatin1: <init>() ===> java.lang.CharacterData: <init>()
java.lang.CharacterDataLatin1: digit(II) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: getType(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: isIdentifierIgnorable(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: isJavaIdentifierPart(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: isJavaIdentifierStart(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: isMirrored(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: isUnicodeIdentifierPart(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: isUnicodeIdentifierStart(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: isWhitespace(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: toLowerCase(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: toUpperCase(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataLatin1: toUpperCaseEx(I) ===> java.lang.CharacterDataLatin1: getProperties(I)
java.lang.CharacterDataPrivateUse: <clinit>() ===> java.lang.CharacterDataPrivateUse: <init>()
java.lang.CharacterDataPrivateUse: <init>() ===> java.lang.CharacterData: <init>()
java.lang.CharacterDataUndefined: <clinit>() ===> java.lang.CharacterDataUndefined: <init>()
java.lang.CharacterDataUndefined: <init>() ===> java.lang.CharacterData: <init>()
java.lang.Class: <clinit>() ===> java.lang.Class: registerNatives()
java.lang.ClassCastException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.ClassLoader: <clinit>() ===> java.lang.ClassLoader: registerNatives()
java.lang.ClassLoader: <clinit>() ===> java.util.Stack: <init>()
java.lang.ClassLoader: <clinit>() ===> java.util.Vector: <init>()
java.lang.ClassNotFoundException: <init>() ===> java.lang.Exception: <init>(Ljava/lang/Throwable;)
java.lang.ConditionalSpecialCasing$Entry: <init>(I[C[CLjava/lang/String;I) ===> java.lang.Object: <init>()
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.lang.ConditionalSpecialCasing$Entry: <init>(I[C[CLjava/lang/String;I)
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.lang.ConditionalSpecialCasing$Entry: getCodePoint()
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.lang.Integer: <init>(I)
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.util.HashSet: <init>()
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.util.HashSet: add(Ljava/lang/Object;)
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.util.Hashtable: <init>()
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.util.Hashtable: get(Ljava/lang/Object;)
java.lang.ConditionalSpecialCasing: <clinit>() ===> java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)
java.lang.ConditionalSpecialCasing: isAfterI(Ljava/lang/String;I) ===> java.lang.Character: charCount(I)
java.lang.ConditionalSpecialCasing: isAfterI(Ljava/lang/String;I) ===> java.lang.String: codePointBefore(I)
java.lang.ConditionalSpecialCasing: isAfterSoftDotted(Ljava/lang/String;I) ===> java.lang.Character: charCount(I)
java.lang.ConditionalSpecialCasing: isAfterSoftDotted(Ljava/lang/String;I) ===> java.lang.ConditionalSpecialCasing: isSoftDotted(I)
java.lang.ConditionalSpecialCasing: isAfterSoftDotted(Ljava/lang/String;I) ===> java.lang.String: codePointBefore(I)
java.lang.ConditionalSpecialCasing: isBeforeDot(Ljava/lang/String;I) ===> java.lang.Character: charCount(I)
java.lang.ConditionalSpecialCasing: isBeforeDot(Ljava/lang/String;I) ===> java.lang.String: codePointAt(I)
java.lang.ConditionalSpecialCasing: isBeforeDot(Ljava/lang/String;I) ===> java.lang.String: length()
java.lang.ConditionalSpecialCasing: isCased(I) ===> java.lang.Character: getType(I)
java.lang.ConditionalSpecialCasing: isConditionMet(Ljava/lang/String;ILjava/util/Locale;I) ===> java.lang.ConditionalSpecialCasing: isAfterI(Ljava/lang/String;I)
java.lang.ConditionalSpecialCasing: isConditionMet(Ljava/lang/String;ILjava/util/Locale;I) ===> java.lang.ConditionalSpecialCasing: isAfterSoftDotted(Ljava/lang/String;I)
java.lang.ConditionalSpecialCasing: isConditionMet(Ljava/lang/String;ILjava/util/Locale;I) ===> java.lang.ConditionalSpecialCasing: isBeforeDot(Ljava/lang/String;I)
java.lang.ConditionalSpecialCasing: isConditionMet(Ljava/lang/String;ILjava/util/Locale;I) ===> java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;)
java.lang.ConditionalSpecialCasing: isConditionMet(Ljava/lang/String;ILjava/util/Locale;I) ===> java.lang.ConditionalSpecialCasing: isMoreAbove(Ljava/lang/String;I)
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.Character: charCount(I)
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: isCased(I)
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.String: codePointAt(I)
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.String: codePointBefore(I)
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.String: length()
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.text.BreakIterator: getWordInstance(Ljava/util/Locale;)
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.text.BreakIterator: isBoundary(I)
java.lang.ConditionalSpecialCasing: isFinalCased(Ljava/lang/String;ILjava/util/Locale;) ===> java.text.BreakIterator: setText(Ljava/lang/String;)
java.lang.ConditionalSpecialCasing: isMoreAbove(Ljava/lang/String;I) ===> java.lang.Character: charCount(I)
java.lang.ConditionalSpecialCasing: isMoreAbove(Ljava/lang/String;I) ===> java.lang.String: codePointAt(I)
java.lang.ConditionalSpecialCasing: isMoreAbove(Ljava/lang/String;I) ===> java.lang.String: length()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.ConditionalSpecialCasing$Entry: getCondition()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.ConditionalSpecialCasing$Entry: getLanguage()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.ConditionalSpecialCasing$Entry: getLowerCase()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.ConditionalSpecialCasing$Entry: getUpperCase()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.ConditionalSpecialCasing: isConditionMet(Ljava/lang/String;ILjava/util/Locale;I)
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.Integer: <init>(I)
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.String: codePointAt(I)
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.lang.String: equals(Ljava/lang/Object;)
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.util.HashSet: iterator()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.util.Hashtable: get(Ljava/lang/Object;)
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.util.Iterator: hasNext()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.util.Iterator: next()
java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z) ===> java.util.Locale: getLanguage()
java.lang.ConditionalSpecialCasing: toLowerCaseCharArray(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)
java.lang.ConditionalSpecialCasing: toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.Character: toLowerCase(I)
java.lang.ConditionalSpecialCasing: toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)
java.lang.ConditionalSpecialCasing: toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.String: codePointAt(I)
java.lang.ConditionalSpecialCasing: toUpperCaseCharArray(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.Character: toUpperCaseCharArray(I)
java.lang.ConditionalSpecialCasing: toUpperCaseCharArray(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)
java.lang.ConditionalSpecialCasing: toUpperCaseCharArray(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.String: codePointAt(I)
java.lang.ConditionalSpecialCasing: toUpperCaseEx(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.Character: toUpperCaseEx(I)
java.lang.ConditionalSpecialCasing: toUpperCaseEx(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: lookUpTable(Ljava/lang/String;ILjava/util/Locale;Z)
java.lang.ConditionalSpecialCasing: toUpperCaseEx(Ljava/lang/String;ILjava/util/Locale;) ===> java.lang.String: codePointAt(I)
java.lang.Double: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Double: <init>(D) ===> java.lang.Number: <init>()
java.lang.Double: compare(DD) ===> java.lang.Double: doubleToLongBits(D)
java.lang.Double: compareTo(Ljava/lang/Double;) ===> java.lang.Double: compare(DD)
java.lang.Double: compareTo(Ljava/lang/Object;) ===> java.lang.Double: compareTo(Ljava/lang/Double;)
java.lang.Double: doubleToLongBits(D) ===> java.lang.Double: doubleToRawLongBits(D)
java.lang.Double: equals(Ljava/lang/Object;) ===> java.lang.Double: doubleToLongBits(D)
java.lang.Double: hashCode() ===> java.lang.Double: doubleToLongBits(D)
java.lang.Double: toHexString(D) ===> java.lang.Double: doubleToLongBits(D)
java.lang.Double: toHexString(D) ===> java.lang.Double: toString(D)
java.lang.Double: toHexString(D) ===> java.lang.Long: toHexString(J)
java.lang.Double: toHexString(D) ===> java.lang.Math: abs(D)
java.lang.Double: toHexString(D) ===> java.lang.String: equals(Ljava/lang/Object;)
java.lang.Double: toHexString(D) ===> java.lang.String: replaceFirst(Ljava/lang/String;Ljava/lang/String;)
java.lang.Double: toHexString(D) ===> java.lang.String: substring(II)
java.lang.Double: toHexString(D) ===> java.lang.StringBuffer: <init>(I)
java.lang.Double: toHexString(D) ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.lang.Double: toHexString(D) ===> java.lang.StringBuffer: toString()
java.lang.Double: toHexString(D) ===> java.lang.StringBuilder: <init>()
java.lang.Double: toHexString(D) ===> java.lang.StringBuilder: append(I)
java.lang.Double: toHexString(D) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.Double: toHexString(D) ===> java.lang.StringBuilder: toString()
java.lang.Double: toString() ===> java.lang.String: valueOf(D)
java.lang.Double: valueOf(D) ===> java.lang.Double: <init>(D)
java.lang.Enum: <init>(Ljava/lang/String;I) ===> java.lang.Object: <init>()
java.lang.Enum: compareTo(Ljava/lang/Enum;) ===> java.lang.ClassCastException: <init>()
java.lang.Enum: compareTo(Ljava/lang/Enum;) ===> java.lang.Enum: getDeclaringClass()
java.lang.Enum: compareTo(Ljava/lang/Enum;) ===> java.lang.Object: getClass()
java.lang.Enum: compareTo(Ljava/lang/Object;) ===> java.lang.Enum: compareTo(Ljava/lang/Enum;)
java.lang.Enum: getDeclaringClass() ===> java.lang.Object: getClass()
java.lang.Enum: hashCode() ===> java.lang.Object: hashCode()
java.lang.Error: <init>() ===> java.lang.Throwable: <init>()
java.lang.Error: <init>(Ljava/lang/String;) ===> java.lang.Throwable: <init>(Ljava/lang/String;)
java.lang.Error: <init>(Ljava/lang/Throwable;) ===> java.lang.Throwable: <init>(Ljava/lang/Throwable;)
java.lang.Exception: <init>() ===> java.lang.Throwable: <init>()
java.lang.Exception: <init>(Ljava/lang/String;) ===> java.lang.Throwable: <init>(Ljava/lang/String;)
java.lang.Exception: <init>(Ljava/lang/Throwable;) ===> java.lang.Throwable: <init>(Ljava/lang/Throwable;)
java.lang.ExceptionInInitializerError: <init>() ===> java.lang.ExceptionInInitializerError: initCause(Ljava/lang/Throwable;)
java.lang.ExceptionInInitializerError: <init>() ===> java.lang.LinkageError: <init>()
java.lang.Float: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Float: <init>(F) ===> java.lang.Number: <init>()
java.lang.Float: compare(FF) ===> java.lang.Float: floatToIntBits(F)
java.lang.Float: compareTo(Ljava/lang/Float;) ===> java.lang.Float: compare(FF)
java.lang.Float: compareTo(Ljava/lang/Object;) ===> java.lang.Float: compareTo(Ljava/lang/Float;)
java.lang.Float: equals(Ljava/lang/Object;) ===> java.lang.Float: floatToIntBits(F)
java.lang.Float: floatToIntBits(F) ===> java.lang.Float: floatToRawIntBits(F)
java.lang.Float: hashCode() ===> java.lang.Float: floatToIntBits(F)
java.lang.Float: toString() ===> java.lang.String: valueOf(F)
java.lang.Float: valueOf(F) ===> java.lang.Float: <init>(F)
java.lang.IllegalArgumentException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.IllegalArgumentException: <init>(Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.lang.IllegalMonitorStateException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.IllegalStateException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.IllegalStateException: <init>(Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.lang.IllegalThreadStateException: <init>() ===> java.lang.IllegalArgumentException: <init>()
java.lang.IndexOutOfBoundsException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.lang.InheritableThreadLocal: <init>() ===> java.lang.ThreadLocal: <init>()
java.lang.InheritableThreadLocal: createMap(Ljava/lang/Thread;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.Integer$IntegerCache: <clinit>() ===> java.lang.Integer: <init>(I)
java.lang.Integer: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Integer: <init>(I) ===> java.lang.Number: <init>()
java.lang.Integer: compareTo(Ljava/lang/Object;) ===> java.lang.Integer: compareTo(Ljava/lang/Integer;)
java.lang.Integer: equals(Ljava/lang/Object;) ===> java.lang.Integer: intValue()
java.lang.Integer: parseInt(Ljava/lang/String;) ===> java.lang.Integer: parseInt(Ljava/lang/String;I)
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.Character: digit(CI)
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.NumberFormatException: <init>(Ljava/lang/String;)
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.NumberFormatException: forInputString(Ljava/lang/String;)
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.String: charAt(I)
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.String: length()
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.StringBuilder: <init>()
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.StringBuilder: append(I)
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.Integer: parseInt(Ljava/lang/String;I) ===> java.lang.StringBuilder: toString()
java.lang.Integer: toHexString(I) ===> java.lang.Integer: toUnsignedString(II)
java.lang.Integer: toString() ===> java.lang.String: valueOf(I)
java.lang.Integer: toString(I) ===> java.lang.Integer: getChars(II[C)
java.lang.Integer: toString(I) ===> java.lang.Integer: stringSize(I)
java.lang.Integer: toString(I) ===> java.lang.String: <init>(II[C)
java.lang.Integer: toString(II) ===> java.lang.Integer: toString(I)
java.lang.Integer: toString(II) ===> java.lang.String: <init>([CII)
java.lang.Integer: toUnsignedString(II) ===> java.lang.String: <init>([CII)
java.lang.Integer: valueOf(I) ===> java.lang.Integer: <init>(I)
java.lang.InternalError: <init>() ===> java.lang.VirtualMachineError: <init>()
java.lang.InternalError: <init>(Ljava/lang/String;) ===> java.lang.VirtualMachineError: <init>(Ljava/lang/String;)
java.lang.LinkageError: <init>() ===> java.lang.Error: <init>()
java.lang.Long$LongCache: <clinit>() ===> java.lang.Long: <init>(J)
java.lang.Long: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Long: <init>(J) ===> java.lang.Number: <init>()
java.lang.Long: compareTo(Ljava/lang/Object;) ===> java.lang.Long: compareTo(Ljava/lang/Long;)
java.lang.Long: equals(Ljava/lang/Object;) ===> java.lang.Long: longValue()
java.lang.Long: toHexString(J) ===> java.lang.Long: toUnsignedString(JI)
java.lang.Long: toOctalString(J) ===> java.lang.Long: toUnsignedString(JI)
java.lang.Long: toString() ===> java.lang.String: valueOf(J)
java.lang.Long: toString(J) ===> java.lang.Long: getChars(JI[C)
java.lang.Long: toString(J) ===> java.lang.Long: stringSize(J)
java.lang.Long: toString(J) ===> java.lang.String: <init>(II[C)
java.lang.Long: toString(JI) ===> java.lang.Long: toString(J)
java.lang.Long: toString(JI) ===> java.lang.String: <init>([CII)
java.lang.Long: toUnsignedString(JI) ===> java.lang.String: <init>([CII)
java.lang.Long: valueOf(J) ===> java.lang.Long: <init>(J)
java.lang.Math: <clinit>() ===> java.lang.Double: doubleToLongBits(D)
java.lang.Math: <clinit>() ===> java.lang.Float: floatToIntBits(F)
java.lang.Math: ceil(D) ===> java.lang.StrictMath: ceil(D)
java.lang.NegativeArraySizeException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.NullPointerException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.NullPointerException: <init>(Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.lang.Number: <init>() ===> java.lang.Object: <init>()
java.lang.NumberFormatException: <init>(Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.lang.NumberFormatException: forInputString(Ljava/lang/String;) ===> java.lang.NumberFormatException: <init>(Ljava/lang/String;)
java.lang.NumberFormatException: forInputString(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.lang.NumberFormatException: forInputString(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.NumberFormatException: forInputString(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.lang.Object: <clinit>() ===> java.lang.Object: registerNatives()
java.lang.Object: toString() ===> java.lang.Integer: toHexString(I)
java.lang.Object: toString() ===> java.lang.Object: getClass()
java.lang.Object: toString() ===> java.lang.Object: hashCode()
java.lang.Object: toString() ===> java.lang.StringBuilder: <init>()
java.lang.Object: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.Object: toString() ===> java.lang.StringBuilder: toString()
java.lang.Object: toString() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.lang.OutOfMemoryError: <init>(Ljava/lang/String;) ===> java.lang.VirtualMachineError: <init>(Ljava/lang/String;)
java.lang.ref.Reference$Lock: <init>() ===> java.lang.Object: <init>()
java.lang.ref.Reference$Lock: <init>(Ljava/lang/ref/Reference$1;) ===> java.lang.ref.Reference$Lock: <init>()
java.lang.ref.Reference$ReferenceHandler: <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;) ===> java.lang.Thread: <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)
java.lang.ref.Reference: <clinit>() ===> java.lang.ref.Reference$Lock: <init>(Ljava/lang/ref/Reference$1;)
java.lang.ref.Reference: <clinit>() ===> java.lang.ref.Reference$ReferenceHandler: <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;)
java.lang.ref.Reference: <clinit>() ===> java.lang.Thread: currentThread()
java.lang.ref.Reference: <clinit>() ===> java.lang.Thread: getThreadGroup()
java.lang.ref.Reference: <clinit>() ===> java.lang.Thread: setDaemon(Z)
java.lang.ref.Reference: <clinit>() ===> java.lang.Thread: setPriority(I)
java.lang.ref.Reference: <clinit>() ===> java.lang.Thread: start()
java.lang.ref.Reference: <init>(Ljava/lang/Object;) ===> java.lang.ref.Reference: <init>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)
java.lang.ref.Reference: <init>(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;) ===> java.lang.Object: <init>()
java.lang.ref.ReferenceQueue$Lock: <init>() ===> java.lang.Object: <init>()
java.lang.ref.ReferenceQueue$Lock: <init>(Ljava/lang/ref/ReferenceQueue$1;) ===> java.lang.ref.ReferenceQueue$Lock: <init>()
java.lang.ref.ReferenceQueue$Null: <init>() ===> java.lang.ref.ReferenceQueue: <init>()
java.lang.ref.ReferenceQueue$Null: <init>(Ljava/lang/ref/ReferenceQueue$1;) ===> java.lang.ref.ReferenceQueue$Null: <init>()
java.lang.ref.ReferenceQueue: <clinit>() ===> java.lang.ref.ReferenceQueue$Null: <init>(Ljava/lang/ref/ReferenceQueue$1;)
java.lang.ref.ReferenceQueue: <init>() ===> java.lang.Object: <init>()
java.lang.ref.ReferenceQueue: <init>() ===> java.lang.ref.ReferenceQueue$Lock: <init>(Ljava/lang/ref/ReferenceQueue$1;)
java.lang.ref.SoftReference: <init>(Ljava/lang/Object;) ===> java.lang.ref.Reference: <init>(Ljava/lang/Object;)
java.lang.ref.SoftReference: get() ===> java.lang.ref.Reference: get()
java.lang.ref.WeakReference: <init>(Ljava/lang/Object;) ===> java.lang.ref.Reference: <init>(Ljava/lang/Object;)
java.lang.reflect.Array: newInstance(Ljava/lang/Class;I) ===> java.lang.reflect.Array: newArray(Ljava/lang/Class;I)
java.lang.Runtime: <clinit>() ===> java.lang.Runtime: <init>()
java.lang.Runtime: <init>() ===> java.lang.Object: <init>()
java.lang.RuntimeException: <init>() ===> java.lang.Exception: <init>()
java.lang.RuntimeException: <init>(Ljava/lang/String;) ===> java.lang.Exception: <init>(Ljava/lang/String;)
java.lang.RuntimePermission: <init>(Ljava/lang/String;) ===> java.security.BasicPermission: <init>(Ljava/lang/String;)
java.lang.Short$ShortCache: <clinit>() ===> java.lang.Short: <init>(S)
java.lang.Short: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.lang.Short: <init>(S) ===> java.lang.Number: <init>()
java.lang.Short: compareTo(Ljava/lang/Object;) ===> java.lang.Short: compareTo(Ljava/lang/Short;)
java.lang.Short: equals(Ljava/lang/Object;) ===> java.lang.Short: shortValue()
java.lang.Short: toString() ===> java.lang.String: valueOf(I)
java.lang.Short: valueOf(S) ===> java.lang.Short: <init>(S)
java.lang.StrictMath: <clinit>() ===> java.lang.Double: doubleToLongBits(D)
java.lang.StrictMath: <clinit>() ===> java.lang.Float: floatToIntBits(F)
java.lang.String$CaseInsensitiveComparator: <init>() ===> java.lang.Object: <init>()
java.lang.String$CaseInsensitiveComparator: <init>(Ljava/lang/String$1;) ===> java.lang.String$CaseInsensitiveComparator: <init>()
java.lang.String$CaseInsensitiveComparator: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.String$CaseInsensitiveComparator: compare(Ljava/lang/String;Ljava/lang/String;)
java.lang.String$CaseInsensitiveComparator: compare(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.Character: toLowerCase(C)
java.lang.String$CaseInsensitiveComparator: compare(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.Character: toUpperCase(C)
java.lang.String$CaseInsensitiveComparator: compare(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.Math: min(II)
java.lang.String$CaseInsensitiveComparator: compare(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.lang.String$CaseInsensitiveComparator: compare(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.String: length()
java.lang.String: <clinit>() ===> java.lang.String$CaseInsensitiveComparator: <init>(Ljava/lang/String$1;)
java.lang.String: <init>() ===> java.lang.Object: <init>()
java.lang.String: <init>([C) ===> java.lang.Object: <init>()
java.lang.String: <init>([C) ===> java.util.Arrays: copyOf([CI)
java.lang.String: <init>([CII) ===> java.lang.Object: <init>()
java.lang.String: <init>([CII) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.String: <init>([CII) ===> java.util.Arrays: copyOfRange([CII)
java.lang.String: <init>([III) ===> java.lang.Character: isSupplementaryCodePoint(I)
java.lang.String: <init>([III) ===> java.lang.Character: toSurrogates(I[CI)
java.lang.String: <init>([III) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.lang.String: <init>([III) ===> java.lang.Integer: toString(I)
java.lang.String: <init>([III) ===> java.lang.Object: <init>()
java.lang.String: <init>([III) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.String: <init>(II[C) ===> java.lang.Object: <init>()
java.lang.String: charAt(I) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.String: codePointAt(I) ===> java.lang.Character: codePointAtImpl([CII)
java.lang.String: codePointAt(I) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.String: codePointBefore(I) ===> java.lang.Character: codePointBeforeImpl([CII)
java.lang.String: codePointBefore(I) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.String: compareTo(Ljava/lang/Object;) ===> java.lang.String: compareTo(Ljava/lang/String;)
java.lang.String: compareTo(Ljava/lang/String;) ===> java.lang.Math: min(II)
java.lang.String: endsWith(Ljava/lang/String;) ===> java.lang.String: startsWith(Ljava/lang/String;I)
java.lang.String: equalsIgnoreCase(Ljava/lang/String;) ===> java.lang.String: regionMatches(ZILjava/lang/String;II)
java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter: <init>()
java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter: format(Ljava/lang/String;[Ljava/lang/Object;)
java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter: toString()
java.lang.String: getChars(II[CI) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.String: getChars(II[CI) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.String: indexOf(I) ===> java.lang.String: indexOf(II)
java.lang.String: indexOf(II) ===> java.lang.Character: toChars(I)
java.lang.String: indexOf(Ljava/lang/String;) ===> java.lang.String: indexOf(Ljava/lang/String;I)
java.lang.String: indexOf(Ljava/lang/String;I) ===> java.lang.String: indexOf([CII[CIII)
java.lang.String: lastIndexOf(I) ===> java.lang.String: lastIndexOf(II)
java.lang.String: lastIndexOf(II) ===> java.lang.Character: toChars(I)
java.lang.String: regionMatches(ZILjava/lang/String;II) ===> java.lang.Character: toLowerCase(C)
java.lang.String: regionMatches(ZILjava/lang/String;II) ===> java.lang.Character: toUpperCase(C)
java.lang.String: replace(CC) ===> java.lang.String: <init>(II[C)
java.lang.String: replaceFirst(Ljava/lang/String;Ljava/lang/String;) ===> java.util.regex.Matcher: replaceFirst(Ljava/lang/String;)
java.lang.String: replaceFirst(Ljava/lang/String;Ljava/lang/String;) ===> java.util.regex.Pattern: compile(Ljava/lang/String;)
java.lang.String: replaceFirst(Ljava/lang/String;Ljava/lang/String;) ===> java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;)
java.lang.String: split(Ljava/lang/String;) ===> java.lang.String: split(Ljava/lang/String;I)
java.lang.String: split(Ljava/lang/String;I) ===> java.util.regex.Pattern: compile(Ljava/lang/String;)
java.lang.String: split(Ljava/lang/String;I) ===> java.util.regex.Pattern: split(Ljava/lang/CharSequence;I)
java.lang.String: startsWith(Ljava/lang/String;) ===> java.lang.String: startsWith(Ljava/lang/String;I)
java.lang.String: subSequence(II) ===> java.lang.String: substring(II)
java.lang.String: substring(I) ===> java.lang.String: substring(II)
java.lang.String: substring(II) ===> java.lang.String: <init>(II[C)
java.lang.String: substring(II) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.String: toCharArray() ===> java.lang.String: getChars(II[CI)
java.lang.String: toLowerCase() ===> java.lang.String: toLowerCase(Ljava/util/Locale;)
java.lang.String: toLowerCase() ===> java.util.Locale: getDefault()
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.Character: charCount(I)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.Character: toChars(I)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.Character: toChars(I[CI)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.Character: toLowerCase(C)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.Character: toLowerCase(I)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: toLowerCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: toLowerCaseEx(Ljava/lang/String;ILjava/util/Locale;)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.NullPointerException: <init>()
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.String: <init>(II[C)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.String: codePointAt(I)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.String: toLowerCase(Ljava/util/Locale;) ===> java.util.Locale: getLanguage()
java.lang.String: toUpperCase() ===> java.lang.String: toUpperCase(Ljava/util/Locale;)
java.lang.String: toUpperCase() ===> java.util.Locale: getDefault()
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.Character: charCount(I)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.Character: toChars(I)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.Character: toChars(I[CI)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.Character: toUpperCaseCharArray(I)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.Character: toUpperCaseEx(I)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: toUpperCaseCharArray(Ljava/lang/String;ILjava/util/Locale;)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.ConditionalSpecialCasing: toUpperCaseEx(Ljava/lang/String;ILjava/util/Locale;)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.NullPointerException: <init>()
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.String: <init>(II[C)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.String: codePointAt(I)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.lang.String: toUpperCase(Ljava/util/Locale;) ===> java.util.Locale: getLanguage()
java.lang.String: valueOf([C) ===> java.lang.String: <init>([C)
java.lang.String: valueOf(C) ===> java.lang.String: <init>(II[C)
java.lang.String: valueOf(D) ===> java.lang.Double: toString(D)
java.lang.String: valueOf(F) ===> java.lang.Float: toString(F)
java.lang.String: valueOf(I) ===> java.lang.Integer: toString(II)
java.lang.String: valueOf(J) ===> java.lang.Long: toString(JI)
java.lang.String: valueOf(Ljava/lang/Object;) ===> java.lang.Object: toString()
java.lang.String: valueOf(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineOption: toString()
java.lang.String: valueOf(Ljava/lang/Object;) ===> org.clapper.argot.Parameter: toString()
java.lang.StringBuffer: <clinit>() ===> java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;)
java.lang.StringBuffer: <init>() ===> java.lang.AbstractStringBuilder: <init>(I)
java.lang.StringBuffer: <init>(I) ===> java.lang.AbstractStringBuilder: <init>(I)
java.lang.StringBuffer: <init>(Ljava/lang/String;) ===> java.lang.AbstractStringBuilder: <init>(I)
java.lang.StringBuffer: <init>(Ljava/lang/String;) ===> java.lang.String: length()
java.lang.StringBuffer: <init>(Ljava/lang/String;) ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.lang.StringBuffer: append([CII) ===> java.lang.AbstractStringBuilder: append([CII)
java.lang.StringBuffer: append(C) ===> java.lang.AbstractStringBuilder: append(C)
java.lang.StringBuffer: append(C) ===> java.lang.StringBuffer: append(C)
java.lang.StringBuffer: append(I) ===> java.lang.AbstractStringBuilder: append(I)
java.lang.StringBuffer: append(Ljava/lang/CharSequence;) ===> java.lang.CharSequence: length()
java.lang.StringBuffer: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuffer: append(Ljava/lang/CharSequence;)
java.lang.StringBuffer: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuffer: append(Ljava/lang/CharSequence;II)
java.lang.StringBuffer: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.lang.StringBuffer: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuffer: append(Ljava/lang/StringBuffer;)
java.lang.StringBuffer: append(Ljava/lang/CharSequence;II) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II)
java.lang.StringBuffer: append(Ljava/lang/String;) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/String;)
java.lang.StringBuffer: append(Ljava/lang/String;) ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.lang.StringBuffer: append(Ljava/lang/StringBuffer;) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/StringBuffer;)
java.lang.StringBuffer: charAt(I) ===> java.lang.StringIndexOutOfBoundsException: <init>(I)
java.lang.StringBuffer: getChars(II[CI) ===> java.lang.AbstractStringBuilder: getChars(II[CI)
java.lang.StringBuffer: setLength(I) ===> java.lang.AbstractStringBuilder: setLength(I)
java.lang.StringBuffer: subSequence(II) ===> java.lang.AbstractStringBuilder: substring(II)
java.lang.StringBuffer: substring(II) ===> java.lang.AbstractStringBuilder: substring(II)
java.lang.StringBuffer: toString() ===> java.lang.String: <init>([CII)
java.lang.StringBuilder: <init>() ===> java.lang.AbstractStringBuilder: <init>(I)
java.lang.StringBuilder: <init>(I) ===> java.lang.AbstractStringBuilder: <init>(I)
java.lang.StringBuilder: <init>(Ljava/lang/CharSequence;) ===> java.lang.CharSequence: length()
java.lang.StringBuilder: <init>(Ljava/lang/CharSequence;) ===> java.lang.StringBuilder: <init>(I)
java.lang.StringBuilder: <init>(Ljava/lang/CharSequence;) ===> java.lang.StringBuilder: append(Ljava/lang/CharSequence;)
java.lang.StringBuilder: <init>(Ljava/lang/String;) ===> java.lang.AbstractStringBuilder: <init>(I)
java.lang.StringBuilder: <init>(Ljava/lang/String;) ===> java.lang.String: length()
java.lang.StringBuilder: <init>(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.StringBuilder: append([C) ===> java.lang.AbstractStringBuilder: append([C)
java.lang.StringBuilder: append([CII) ===> java.lang.AbstractStringBuilder: append([CII)
java.lang.StringBuilder: append(C) ===> java.lang.AbstractStringBuilder: append(C)
java.lang.StringBuilder: append(C) ===> java.lang.StringBuilder: append(C)
java.lang.StringBuilder: append(F) ===> java.lang.AbstractStringBuilder: append(F)
java.lang.StringBuilder: append(I) ===> java.lang.AbstractStringBuilder: append(I)
java.lang.StringBuilder: append(J) ===> java.lang.AbstractStringBuilder: append(J)
java.lang.StringBuilder: append(Ljava/lang/CharSequence;) ===> java.lang.CharSequence: length()
java.lang.StringBuilder: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuilder: append(Ljava/lang/CharSequence;)
java.lang.StringBuilder: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuilder: append(Ljava/lang/CharSequence;II)
java.lang.StringBuilder: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.StringBuilder: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuilder: append(Ljava/lang/StringBuffer;)
java.lang.StringBuilder: append(Ljava/lang/CharSequence;) ===> java.lang.StringBuilder: append(Ljava/lang/StringBuilder;)
java.lang.StringBuilder: append(Ljava/lang/CharSequence;II) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/CharSequence;II)
java.lang.StringBuilder: append(Ljava/lang/Object;) ===> java.lang.String: valueOf(Ljava/lang/Object;)
java.lang.StringBuilder: append(Ljava/lang/Object;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.StringBuilder: append(Ljava/lang/String;) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/String;)
java.lang.StringBuilder: append(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.StringBuilder: append(Ljava/lang/StringBuffer;) ===> java.lang.AbstractStringBuilder: append(Ljava/lang/StringBuffer;)
java.lang.StringBuilder: append(Ljava/lang/StringBuilder;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.StringBuilder: append(Ljava/lang/StringBuilder;) ===> java.lang.StringBuilder: expandCapacity(I)
java.lang.StringBuilder: append(Ljava/lang/StringBuilder;) ===> java.lang.StringBuilder: getChars(II[CI)
java.lang.StringBuilder: append(Ljava/lang/StringBuilder;) ===> java.lang.StringBuilder: length()
java.lang.StringBuilder: append(Z) ===> java.lang.AbstractStringBuilder: append(Z)
java.lang.StringBuilder: appendCodePoint(I) ===> java.lang.AbstractStringBuilder: appendCodePoint(I)
java.lang.StringBuilder: charAt(I) ===> java.lang.AbstractStringBuilder: charAt(I)
java.lang.StringBuilder: delete(II) ===> java.lang.AbstractStringBuilder: delete(II)
java.lang.StringBuilder: getChars(II[CI) ===> java.lang.AbstractStringBuilder: getChars(II[CI)
java.lang.StringBuilder: insert(IC) ===> java.lang.AbstractStringBuilder: insert(IC)
java.lang.StringBuilder: length() ===> java.lang.AbstractStringBuilder: length()
java.lang.StringBuilder: reverse() ===> java.lang.AbstractStringBuilder: reverse()
java.lang.StringBuilder: setLength(I) ===> java.lang.AbstractStringBuilder: setLength(I)
java.lang.StringBuilder: subSequence(II) ===> java.lang.AbstractStringBuilder: subSequence(II)
java.lang.StringBuilder: substring(II) ===> java.lang.AbstractStringBuilder: substring(II)
java.lang.StringBuilder: toString() ===> java.lang.String: <init>([CII)
java.lang.StringIndexOutOfBoundsException: <init>() ===> java.lang.IndexOutOfBoundsException: <init>()
java.lang.StringIndexOutOfBoundsException: <init>(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.lang.StringIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: <init>()
java.lang.StringIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: append(I)
java.lang.StringIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.StringIndexOutOfBoundsException: <init>(I) ===> java.lang.StringBuilder: toString()
java.lang.StringIndexOutOfBoundsException: <init>(Ljava/lang/String;) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.lang.System: <clinit>() ===> java.lang.System: registerNatives()
java.lang.System: checkKey(Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.lang.System: checkKey(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>(Ljava/lang/String;)
java.lang.System: checkKey(Ljava/lang/String;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.lang.System: getProperties() ===> java.lang.System: getSecurityManager()
java.lang.System: getProperty(Ljava/lang/String;) ===> java.lang.System: checkKey(Ljava/lang/String;)
java.lang.System: getProperty(Ljava/lang/String;) ===> java.lang.System: getSecurityManager()
java.lang.System: getProperty(Ljava/lang/String;) ===> java.util.Properties: getProperty(Ljava/lang/String;)
java.lang.System: getProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.System: checkKey(Ljava/lang/String;)
java.lang.System: getProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.System: getSecurityManager()
java.lang.System: getProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.util.Properties: getProperty(Ljava/lang/String;Ljava/lang/String;)
java.lang.System: setProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.System: checkKey(Ljava/lang/String;)
java.lang.System: setProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.System: getSecurityManager()
java.lang.System: setProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.util.Properties: setProperty(Ljava/lang/String;Ljava/lang/String;)
java.lang.System: setProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.util.PropertyPermission: <init>(Ljava/lang/String;Ljava/lang/String;)
java.lang.Thread$1: <init>(Ljava/lang/Class;) ===> java.lang.Object: <init>()
java.lang.Thread: <clinit>() ===> java.lang.RuntimePermission: <init>(Ljava/lang/String;)
java.lang.Thread: <clinit>() ===> java.lang.Thread: registerNatives()
java.lang.Thread: <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;) ===> java.lang.Object: <init>()
java.lang.Thread: <init>(Ljava/lang/ThreadGroup;Ljava/lang/String;) ===> java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J)
java.lang.Thread: auditSubclass(Ljava/lang/Class;) ===> java.lang.Boolean: booleanValue()
java.lang.Thread: auditSubclass(Ljava/lang/Class;) ===> java.lang.Thread$1: <init>(Ljava/lang/Class;)
java.lang.Thread: auditSubclass(Ljava/lang/Class;) ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedAction;)
java.lang.Thread: checkAccess() ===> java.lang.System: getSecurityManager()
java.lang.Thread: getContextClassLoader() ===> java.lang.ClassLoader: getCallerClassLoader()
java.lang.Thread: getContextClassLoader() ===> java.lang.System: getSecurityManager()
java.lang.Thread: getName() ===> java.lang.String: valueOf([C)
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Object: getClass()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.String: toCharArray()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.System: getSecurityManager()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: currentThread()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: getContextClassLoader()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: getPriority()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: getThreadGroup()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: isCCLOverridden(Ljava/lang/Class;)
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: isDaemon()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: nextThreadID()
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.Thread: setPriority(I)
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.lang.ThreadLocal: createInheritedMap(Ljava/lang/ThreadLocal$ThreadLocalMap;)
java.lang.Thread: init(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;Ljava/lang/String;J) ===> java.security.AccessController: getContext()
java.lang.Thread: interrupt() ===> java.lang.Thread: checkAccess()
java.lang.Thread: interrupt() ===> java.lang.Thread: currentThread()
java.lang.Thread: interrupt() ===> java.lang.Thread: interrupt0()
java.lang.Thread: interrupted() ===> java.lang.Thread: currentThread()
java.lang.Thread: interrupted() ===> java.lang.Thread: isInterrupted(Z)
java.lang.Thread: isCCLOverridden(Ljava/lang/Class;) ===> java.lang.Boolean: <init>(Z)
java.lang.Thread: isCCLOverridden(Ljava/lang/Class;) ===> java.lang.Boolean: booleanValue()
java.lang.Thread: isCCLOverridden(Ljava/lang/Class;) ===> java.lang.Thread: auditSubclass(Ljava/lang/Class;)
java.lang.Thread: setDaemon(Z) ===> java.lang.IllegalThreadStateException: <init>()
java.lang.Thread: setDaemon(Z) ===> java.lang.Thread: checkAccess()
java.lang.Thread: setDaemon(Z) ===> java.lang.Thread: isAlive()
java.lang.Thread: setPriority(I) ===> java.lang.IllegalArgumentException: <init>()
java.lang.Thread: setPriority(I) ===> java.lang.Thread: checkAccess()
java.lang.Thread: setPriority(I) ===> java.lang.Thread: getThreadGroup()
java.lang.Thread: setPriority(I) ===> java.lang.Thread: setPriority0(I)
java.lang.Thread: start() ===> java.lang.IllegalThreadStateException: <init>()
java.lang.Thread: start() ===> java.lang.Thread: start0()
java.lang.Thread: start() ===> java.lang.Thread: stop0(Ljava/lang/Object;)
java.lang.Thread: toString() ===> java.lang.StringBuilder: <init>()
java.lang.Thread: toString() ===> java.lang.StringBuilder: append(I)
java.lang.Thread: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.Thread: toString() ===> java.lang.StringBuilder: toString()
java.lang.Thread: toString() ===> java.lang.Thread: getName()
java.lang.Thread: toString() ===> java.lang.Thread: getPriority()
java.lang.Thread: toString() ===> java.lang.Thread: getThreadGroup()
java.lang.ThreadLocal$ThreadLocalMap$Entry: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ref.WeakReference: <init>(Ljava/lang/Object;)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.Object: <init>()
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.ThreadLocal$ThreadLocalMap: nextIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.ThreadLocal$ThreadLocalMap: setThreshold(I)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.ThreadLocal: access$400(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.ThreadLocal: childValue(Ljava/lang/Object;)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal$1;) ===> java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.Object: <init>()
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: setThreshold(I)
java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal: access$400(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal$ThreadLocalMap: access$000(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal;) ===> java.lang.ThreadLocal$ThreadLocalMap: getEntry(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal$ThreadLocalMap: access$100(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.ThreadLocal$ThreadLocalMap: cleanSomeSlots(II) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: cleanSomeSlots(II) ===> java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntry(I)
java.lang.ThreadLocal$ThreadLocalMap: cleanSomeSlots(II) ===> java.lang.ThreadLocal$ThreadLocalMap: nextIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntries() ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntries() ===> java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntry(I)
java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntry(I) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntry(I) ===> java.lang.ThreadLocal$ThreadLocalMap: nextIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntry(I) ===> java.lang.ThreadLocal: access$400(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal$ThreadLocalMap: getEntry(Ljava/lang/ThreadLocal;) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: getEntry(Ljava/lang/ThreadLocal;) ===> java.lang.ThreadLocal$ThreadLocalMap: getEntryAfterMiss(Ljava/lang/ThreadLocal;ILjava/lang/ThreadLocal$ThreadLocalMap$Entry;)
java.lang.ThreadLocal$ThreadLocalMap: getEntry(Ljava/lang/ThreadLocal;) ===> java.lang.ThreadLocal: access$400(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal$ThreadLocalMap: getEntryAfterMiss(Ljava/lang/ThreadLocal;ILjava/lang/ThreadLocal$ThreadLocalMap$Entry;) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: getEntryAfterMiss(Ljava/lang/ThreadLocal;ILjava/lang/ThreadLocal$ThreadLocalMap$Entry;) ===> java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntry(I)
java.lang.ThreadLocal$ThreadLocalMap: getEntryAfterMiss(Ljava/lang/ThreadLocal;ILjava/lang/ThreadLocal$ThreadLocalMap$Entry;) ===> java.lang.ThreadLocal$ThreadLocalMap: nextIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: rehash() ===> java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntries()
java.lang.ThreadLocal$ThreadLocalMap: rehash() ===> java.lang.ThreadLocal$ThreadLocalMap: resize()
java.lang.ThreadLocal$ThreadLocalMap: replaceStaleEntry(Ljava/lang/ThreadLocal;Ljava/lang/Object;I) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.ThreadLocal$ThreadLocalMap: replaceStaleEntry(Ljava/lang/ThreadLocal;Ljava/lang/Object;I) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: replaceStaleEntry(Ljava/lang/ThreadLocal;Ljava/lang/Object;I) ===> java.lang.ThreadLocal$ThreadLocalMap: cleanSomeSlots(II)
java.lang.ThreadLocal$ThreadLocalMap: replaceStaleEntry(Ljava/lang/ThreadLocal;Ljava/lang/Object;I) ===> java.lang.ThreadLocal$ThreadLocalMap: expungeStaleEntry(I)
java.lang.ThreadLocal$ThreadLocalMap: replaceStaleEntry(Ljava/lang/ThreadLocal;Ljava/lang/Object;I) ===> java.lang.ThreadLocal$ThreadLocalMap: nextIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: replaceStaleEntry(Ljava/lang/ThreadLocal;Ljava/lang/Object;I) ===> java.lang.ThreadLocal$ThreadLocalMap: prevIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: resize() ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: resize() ===> java.lang.ThreadLocal$ThreadLocalMap: nextIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: resize() ===> java.lang.ThreadLocal$ThreadLocalMap: setThreshold(I)
java.lang.ThreadLocal$ThreadLocalMap: resize() ===> java.lang.ThreadLocal: access$400(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap$Entry: get()
java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: cleanSomeSlots(II)
java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: nextIndex(II)
java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: rehash()
java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: replaceStaleEntry(Ljava/lang/ThreadLocal;Ljava/lang/Object;I)
java.lang.ThreadLocal$ThreadLocalMap: set(Ljava/lang/ThreadLocal;Ljava/lang/Object;) ===> java.lang.ThreadLocal: access$400(Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal: <clinit>() ===> java.util.concurrent.atomic.AtomicInteger: <init>()
java.lang.ThreadLocal: <init>() ===> java.lang.Object: <init>()
java.lang.ThreadLocal: <init>() ===> java.lang.ThreadLocal: nextHashCode()
java.lang.ThreadLocal: childValue(Ljava/lang/Object;) ===> java.lang.UnsupportedOperationException: <init>()
java.lang.ThreadLocal: createInheritedMap(Ljava/lang/ThreadLocal$ThreadLocalMap;) ===> java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal$1;)
java.lang.ThreadLocal: createMap(Ljava/lang/Thread;Ljava/lang/Object;) ===> java.lang.ThreadLocal$ThreadLocalMap: <init>(Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.ThreadLocal: get() ===> java.lang.Thread: currentThread()
java.lang.ThreadLocal: get() ===> java.lang.ThreadLocal$ThreadLocalMap: access$000(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal;)
java.lang.ThreadLocal: get() ===> java.lang.ThreadLocal: getMap(Ljava/lang/Thread;)
java.lang.ThreadLocal: get() ===> java.lang.ThreadLocal: setInitialValue()
java.lang.ThreadLocal: nextHashCode() ===> java.util.concurrent.atomic.AtomicInteger: getAndAdd(I)
java.lang.ThreadLocal: setInitialValue() ===> java.lang.Thread: currentThread()
java.lang.ThreadLocal: setInitialValue() ===> java.lang.ThreadLocal$ThreadLocalMap: access$100(Ljava/lang/ThreadLocal$ThreadLocalMap;Ljava/lang/ThreadLocal;Ljava/lang/Object;)
java.lang.ThreadLocal: setInitialValue() ===> java.lang.ThreadLocal: createMap(Ljava/lang/Thread;Ljava/lang/Object;)
java.lang.ThreadLocal: setInitialValue() ===> java.lang.ThreadLocal: getMap(Ljava/lang/Thread;)
java.lang.ThreadLocal: setInitialValue() ===> java.lang.ThreadLocal: initialValue()
java.lang.Throwable: <init>() ===> java.lang.Object: <init>()
java.lang.Throwable: <init>() ===> java.lang.Throwable: fillInStackTrace()
java.lang.Throwable: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
java.lang.Throwable: <init>(Ljava/lang/String;) ===> java.lang.Throwable: fillInStackTrace()
java.lang.Throwable: <init>(Ljava/lang/Throwable;) ===> java.lang.Object: <init>()
java.lang.Throwable: <init>(Ljava/lang/Throwable;) ===> java.lang.Throwable: fillInStackTrace()
java.lang.Throwable: <init>(Ljava/lang/Throwable;) ===> java.lang.Throwable: toString()
java.lang.Throwable: getLocalizedMessage() ===> java.lang.Throwable: getMessage()
java.lang.Throwable: initCause(Ljava/lang/Throwable;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.lang.Throwable: initCause(Ljava/lang/Throwable;) ===> java.lang.IllegalStateException: <init>(Ljava/lang/String;)
java.lang.Throwable: toString() ===> java.lang.Object: getClass()
java.lang.Throwable: toString() ===> java.lang.StringBuilder: <init>()
java.lang.Throwable: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.lang.Throwable: toString() ===> java.lang.StringBuilder: toString()
java.lang.Throwable: toString() ===> java.lang.Throwable: getLocalizedMessage()
java.lang.UnsupportedOperationException: <init>() ===> java.lang.RuntimeException: <init>()
java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.lang.VirtualMachineError: <init>() ===> java.lang.Error: <init>()
java.lang.VirtualMachineError: <init>(Ljava/lang/String;) ===> java.lang.Error: <init>(Ljava/lang/String;)
java.lang.Void: <clinit>() ===> java.lang.Class: getPrimitiveClass(Ljava/lang/String;)
java.math.BigDecimal$1: <init>() ===> java.lang.ThreadLocal: <init>()
java.math.BigDecimal$1: initialValue() ===> java.math.BigDecimal$1: initialValue()
java.math.BigDecimal$1: initialValue() ===> java.math.BigDecimal$StringBuilderHelper: <init>()
java.math.BigDecimal$LongOverflow: <clinit>() ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal$LongOverflow: check(Ljava/math/BigDecimal;) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal$LongOverflow: check(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: access$000(Ljava/math/BigDecimal;)
java.math.BigDecimal$LongOverflow: check(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: access$100(Ljava/math/BigDecimal;)
java.math.BigDecimal$LongOverflow: check(Ljava/math/BigDecimal;) ===> java.math.BigInteger: compareTo(Ljava/math/BigInteger;)
java.math.BigDecimal$StringBuilderHelper: <init>() ===> java.lang.Object: <init>()
java.math.BigDecimal$StringBuilderHelper: <init>() ===> java.lang.StringBuilder: <init>()
java.math.BigDecimal$StringBuilderHelper: getStringBuilder() ===> java.lang.StringBuilder: setLength(I)
java.math.BigDecimal$StringBuilderHelper: putIntCompact(J) ===> java.lang.AssertionError: <init>()
java.math.BigDecimal: <clinit>() ===> java.math.BigDecimal$1: <init>()
java.math.BigDecimal: <clinit>() ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: <clinit>() ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal: <init>(D) ===> java.lang.Double: doubleToLongBits(D)
java.math.BigDecimal: <init>(D) ===> java.lang.Double: isInfinite(D)
java.math.BigDecimal: <init>(D) ===> java.lang.Double: isNaN(D)
java.math.BigDecimal: <init>(D) ===> java.lang.Number: <init>()
java.math.BigDecimal: <init>(D) ===> java.lang.NumberFormatException: <init>(Ljava/lang/String;)
java.math.BigDecimal: <init>(D) ===> java.math.BigDecimal: compactValFor(Ljava/math/BigInteger;)
java.math.BigDecimal: <init>(D) ===> java.math.BigInteger: multiply(J)
java.math.BigDecimal: <init>(D) ===> java.math.BigInteger: pow(I)
java.math.BigDecimal: <init>(D) ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal: <init>(Ljava/math/BigInteger;) ===> java.lang.Number: <init>()
java.math.BigDecimal: <init>(Ljava/math/BigInteger;) ===> java.math.BigDecimal: compactValFor(Ljava/math/BigInteger;)
java.math.BigDecimal: <init>(Ljava/math/BigInteger;I) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;)
java.math.BigDecimal: <init>(Ljava/math/BigInteger;ILjava/math/MathContext;) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;)
java.math.BigDecimal: <init>(Ljava/math/BigInteger;ILjava/math/MathContext;) ===> java.math.BigDecimal: roundThis(Ljava/math/MathContext;)
java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII) ===> java.lang.Number: <init>()
java.math.BigDecimal: abs() ===> java.math.BigDecimal: negate()
java.math.BigDecimal: abs() ===> java.math.BigDecimal: signum()
java.math.BigDecimal: access$000(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;I)
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: bigMultiplyPowerTen(I)
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: checkScale(J)
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: longMultiplyPowerTen(JI)
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: valueOf(JI)
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigInteger: add(Ljava/math/BigInteger;)
java.math.BigDecimal: add(Ljava/math/BigDecimal;) ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal: bigDigitLength(Ljava/math/BigInteger;) ===> java.math.BigDecimal: bigTenToThe(I)
java.math.BigDecimal: bigDigitLength(Ljava/math/BigInteger;) ===> java.math.BigInteger: bitLength()
java.math.BigDecimal: bigDigitLength(Ljava/math/BigInteger;) ===> java.math.BigInteger: compareMagnitude(Ljava/math/BigInteger;)
java.math.BigDecimal: bigMultiplyPowerTen(I) ===> java.math.BigDecimal: bigTenToThe(I)
java.math.BigDecimal: bigMultiplyPowerTen(I) ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: bigMultiplyPowerTen(I) ===> java.math.BigInteger: multiply(J)
java.math.BigDecimal: bigMultiplyPowerTen(I) ===> java.math.BigInteger: multiply(Ljava/math/BigInteger;)
java.math.BigDecimal: bigTenToThe(I) ===> java.math.BigDecimal: expandBigIntegerTenPowers(I)
java.math.BigDecimal: bigTenToThe(I) ===> java.math.BigInteger: <init>([C)
java.math.BigDecimal: byteValueExact() ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: byteValueExact() ===> java.math.BigDecimal: longValueExact()
java.math.BigDecimal: checkScale(J) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: checkScale(J) ===> java.math.BigInteger: signum()
java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: bigMultiplyPowerTen(I)
java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: longCompareMagnitude(JJ)
java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: longMultiplyPowerTen(JI)
java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: precision()
java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;) ===> java.math.BigInteger: compareMagnitude(Ljava/math/BigInteger;)
java.math.BigDecimal: compareTo(Ljava/lang/Object;) ===> java.math.BigDecimal: compareTo(Ljava/math/BigDecimal;)
java.math.BigDecimal: compareTo(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;)
java.math.BigDecimal: compareTo(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: signum()
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.lang.Math: ceil(D)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.lang.Math: min(JJ)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: precision()
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: saturateLong(J)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: scale()
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: setScale(II)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: signum()
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: valueOf(JI)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;) ===> java.math.MathContext: <init>(ILjava/math/RoundingMode;)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: checkScale(J)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: divide(Ljava/math/BigDecimal;)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: doRound(Ljava/math/BigDecimal;Ljava/math/MathContext;)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: precision()
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: saturateLong(J)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: setScale(II)
java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: signum()
java.math.BigDecimal: divideAndRemainder(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;)
java.math.BigDecimal: divideAndRemainder(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: multiply(Ljava/math/BigDecimal;)
java.math.BigDecimal: divideAndRemainder(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: subtract(Ljava/math/BigDecimal;)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.BigDecimal: longCompareMagnitude(JJ)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.BigDecimal: stripZerosToMatchScale(J)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: <init>()
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: <init>([I)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: add(Ljava/math/MutableBigInteger;)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: compareHalf(Ljava/math/MutableBigInteger;)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: divide(JLjava/math/MutableBigInteger;)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: isOdd()
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: isZero()
java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III) ===> java.math.MutableBigInteger: toBigDecimal(II)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.lang.Math: abs(J)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.lang.Math: ceil(D)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.lang.Math: min(JJ)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: compareMagnitude(Ljava/math/BigDecimal;)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: divide(Ljava/math/BigDecimal;Ljava/math/MathContext;)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: precision()
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: saturateLong(J)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: scale()
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: setScale(II)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: setScale(ILjava/math/RoundingMode;)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: signum()
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: stripZerosToMatchScale(J)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: valueOf(JI)
java.math.BigDecimal: divideToIntegralValue(Ljava/math/BigDecimal;) ===> java.math.MathContext: <init>(ILjava/math/RoundingMode;)
java.math.BigDecimal: doRound(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: bigTenToThe(I)
java.math.BigDecimal: doRound(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: checkScale(J)
java.math.BigDecimal: doRound(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III)
java.math.BigDecimal: doRound(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> java.math.BigDecimal: precision()
java.math.BigDecimal: doubleValue() ===> java.lang.Double: parseDouble(Ljava/lang/String;)
java.math.BigDecimal: doubleValue() ===> java.math.BigDecimal: toString()
java.math.BigDecimal: equals(Ljava/lang/Object;) ===> java.math.BigDecimal: compactValFor(Ljava/math/BigInteger;)
java.math.BigDecimal: equals(Ljava/lang/Object;) ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: equals(Ljava/lang/Object;) ===> java.math.BigInteger: equals(Ljava/lang/Object;)
java.math.BigDecimal: expandBigIntegerTenPowers(I) ===> java.math.BigInteger: multiply(Ljava/math/BigInteger;)
java.math.BigDecimal: expandBigIntegerTenPowers(I) ===> java.util.Arrays: copyOf([Ljava/lang/Object;I)
java.math.BigDecimal: floatValue() ===> java.lang.Float: parseFloat(Ljava/lang/String;)
java.math.BigDecimal: floatValue() ===> java.math.BigDecimal: toString()
java.math.BigDecimal: hashCode() ===> java.math.BigInteger: hashCode()
java.math.BigDecimal: inflate() ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal: intValue() ===> java.math.BigDecimal: toBigInteger()
java.math.BigDecimal: intValue() ===> java.math.BigInteger: intValue()
java.math.BigDecimal: intValueExact() ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: intValueExact() ===> java.math.BigDecimal: longValueExact()
java.math.BigDecimal: layoutChars(Z) ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.Long: toString(J)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.Math: abs(J)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.String: toCharArray()
java.math.BigDecimal: layoutChars(Z) ===> java.lang.StringBuilder: <init>()
java.math.BigDecimal: layoutChars(Z) ===> java.lang.StringBuilder: append([CII)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.StringBuilder: append(C)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.StringBuilder: append(I)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.StringBuilder: append(J)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.math.BigDecimal: layoutChars(Z) ===> java.lang.StringBuilder: toString()
java.math.BigDecimal: layoutChars(Z) ===> java.lang.ThreadLocal: get()
java.math.BigDecimal: layoutChars(Z) ===> java.math.BigDecimal$StringBuilderHelper: getCompactCharArray()
java.math.BigDecimal: layoutChars(Z) ===> java.math.BigDecimal$StringBuilderHelper: getStringBuilder()
java.math.BigDecimal: layoutChars(Z) ===> java.math.BigDecimal$StringBuilderHelper: putIntCompact(J)
java.math.BigDecimal: layoutChars(Z) ===> java.math.BigDecimal: signum()
java.math.BigDecimal: layoutChars(Z) ===> java.math.BigInteger: abs()
java.math.BigDecimal: layoutChars(Z) ===> java.math.BigInteger: toString()
java.math.BigDecimal: longDigitLength(J) ===> java.lang.AssertionError: <init>()
java.math.BigDecimal: longMultiplyPowerTen(JI) ===> java.lang.Math: abs(J)
java.math.BigDecimal: longValue() ===> java.math.BigDecimal: toBigInteger()
java.math.BigDecimal: longValue() ===> java.math.BigInteger: longValue()
java.math.BigDecimal: longValueExact() ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: longValueExact() ===> java.math.BigDecimal$LongOverflow: check(Ljava/math/BigDecimal;)
java.math.BigDecimal: longValueExact() ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: longValueExact() ===> java.math.BigDecimal: precision()
java.math.BigDecimal: longValueExact() ===> java.math.BigDecimal: setScale(II)
java.math.BigDecimal: longValueExact() ===> java.math.BigDecimal: signum()
java.math.BigDecimal: longValueExact() ===> java.math.BigInteger: longValue()
java.math.BigDecimal: multiply(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: multiply(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: checkScale(J)
java.math.BigDecimal: multiply(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: precision()
java.math.BigDecimal: multiply(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: valueOf(JI)
java.math.BigDecimal: multiply(Ljava/math/BigDecimal;) ===> java.math.BigInteger: multiply(J)
java.math.BigDecimal: multiply(Ljava/math/BigDecimal;) ===> java.math.BigInteger: multiply(Ljava/math/BigInteger;)
java.math.BigDecimal: multiply(Ljava/math/BigDecimal;) ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal: negate() ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;I)
java.math.BigDecimal: negate() ===> java.math.BigDecimal: valueOf(JI)
java.math.BigDecimal: negate() ===> java.math.BigInteger: negate()
java.math.BigDecimal: precision() ===> java.math.BigDecimal: bigDigitLength(Ljava/math/BigInteger;)
java.math.BigDecimal: precision() ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: precision() ===> java.math.BigDecimal: longDigitLength(J)
java.math.BigDecimal: remainder(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: divideAndRemainder(Ljava/math/BigDecimal;)
java.math.BigDecimal: roundThis(Ljava/math/MathContext;) ===> java.math.BigDecimal: doRound(Ljava/math/BigDecimal;Ljava/math/MathContext;)
java.math.BigDecimal: setScale(II) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: bigMultiplyPowerTen(I)
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: bigTenToThe(I)
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: checkScale(J)
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: divideAndRound(JLjava/math/BigInteger;JLjava/math/BigInteger;III)
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: longMultiplyPowerTen(JI)
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: signum()
java.math.BigDecimal: setScale(II) ===> java.math.BigDecimal: valueOf(JI)
java.math.BigDecimal: setScale(ILjava/math/RoundingMode;) ===> java.math.BigDecimal: setScale(II)
java.math.BigDecimal: shortValueExact() ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigDecimal: shortValueExact() ===> java.math.BigDecimal: longValueExact()
java.math.BigDecimal: signum() ===> java.lang.Long: signum(J)
java.math.BigDecimal: signum() ===> java.math.BigInteger: signum()
java.math.BigDecimal: stripZerosToMatchScale(J) ===> java.math.BigDecimal: checkScale(J)
java.math.BigDecimal: stripZerosToMatchScale(J) ===> java.math.BigDecimal: compactValFor(Ljava/math/BigInteger;)
java.math.BigDecimal: stripZerosToMatchScale(J) ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: stripZerosToMatchScale(J) ===> java.math.BigInteger: compareMagnitude(Ljava/math/BigInteger;)
java.math.BigDecimal: stripZerosToMatchScale(J) ===> java.math.BigInteger: divideAndRemainder(Ljava/math/BigInteger;)
java.math.BigDecimal: stripZerosToMatchScale(J) ===> java.math.BigInteger: signum()
java.math.BigDecimal: stripZerosToMatchScale(J) ===> java.math.BigInteger: testBit(I)
java.math.BigDecimal: subtract(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: add(Ljava/math/BigDecimal;)
java.math.BigDecimal: subtract(Ljava/math/BigDecimal;) ===> java.math.BigDecimal: negate()
java.math.BigDecimal: toBigInteger() ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: toBigInteger() ===> java.math.BigDecimal: setScale(II)
java.math.BigDecimal: toBigIntegerExact() ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: toBigIntegerExact() ===> java.math.BigDecimal: setScale(II)
java.math.BigDecimal: toString() ===> java.math.BigDecimal: layoutChars(Z)
java.math.BigDecimal: unscaledValue() ===> java.math.BigDecimal: inflate()
java.math.BigDecimal: valueOf(J) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: valueOf(J) ===> java.math.BigInteger: valueOf(J)
java.math.BigDecimal: valueOf(JI) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.BigDecimal: valueOf(JI) ===> java.math.BigDecimal: valueOf(J)
java.math.BigDecimal: valueOf(JI) ===> java.math.BigInteger: valueOf(J)
java.math.BigInteger: <clinit>() ===> java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;)
java.math.BigInteger: <clinit>() ===> java.lang.Error: <init>(Ljava/lang/Throwable;)
java.math.BigInteger: <clinit>() ===> java.lang.String: substring(II)
java.math.BigInteger: <clinit>() ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: <clinit>() ===> java.math.BigInteger: valueOf(J)
java.math.BigInteger: <init>([C) ===> java.lang.Character: digit(CI)
java.math.BigInteger: <init>([C) ===> java.lang.Number: <init>()
java.math.BigInteger: <init>([C) ===> java.lang.NumberFormatException: <init>(Ljava/lang/String;)
java.math.BigInteger: <init>([C) ===> java.math.BigInteger: destructiveMulAdd([III)
java.math.BigInteger: <init>([C) ===> java.math.BigInteger: parseInt([CII)
java.math.BigInteger: <init>([C) ===> java.math.BigInteger: trustedStripLeadingZeroInts([I)
java.math.BigInteger: <init>([II) ===> java.lang.Number: <init>()
java.math.BigInteger: <init>(J) ===> java.lang.Number: <init>()
java.math.BigInteger: abs() ===> java.math.BigInteger: negate()
java.math.BigInteger: add([I[I) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.math.BigInteger: add(Ljava/math/BigInteger;) ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: add(Ljava/math/BigInteger;) ===> java.math.BigInteger: add([I[I)
java.math.BigInteger: add(Ljava/math/BigInteger;) ===> java.math.BigInteger: compareMagnitude(Ljava/math/BigInteger;)
java.math.BigInteger: add(Ljava/math/BigInteger;) ===> java.math.BigInteger: subtract([I[I)
java.math.BigInteger: add(Ljava/math/BigInteger;) ===> java.math.BigInteger: trustedStripLeadingZeroInts([I)
java.math.BigInteger: bitLength() ===> java.lang.Integer: bitCount(I)
java.math.BigInteger: bitLength() ===> java.math.BigInteger: bitLengthForInt(I)
java.math.BigInteger: bitLengthForInt(I) ===> java.lang.Integer: numberOfLeadingZeros(I)
java.math.BigInteger: compareTo(Ljava/lang/Object;) ===> java.math.BigInteger: compareTo(Ljava/math/BigInteger;)
java.math.BigInteger: compareTo(Ljava/math/BigInteger;) ===> java.math.BigInteger: compareMagnitude(Ljava/math/BigInteger;)
java.math.BigInteger: divideAndRemainder(Ljava/math/BigInteger;) ===> java.math.MutableBigInteger: <init>()
java.math.BigInteger: divideAndRemainder(Ljava/math/BigInteger;) ===> java.math.MutableBigInteger: <init>([I)
java.math.BigInteger: divideAndRemainder(Ljava/math/BigInteger;) ===> java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)
java.math.BigInteger: divideAndRemainder(Ljava/math/BigInteger;) ===> java.math.MutableBigInteger: toBigInteger(I)
java.math.BigInteger: doubleValue() ===> java.lang.Double: parseDouble(Ljava/lang/String;)
java.math.BigInteger: doubleValue() ===> java.math.BigInteger: toString()
java.math.BigInteger: floatValue() ===> java.lang.Float: parseFloat(Ljava/lang/String;)
java.math.BigInteger: floatValue() ===> java.math.BigInteger: toString()
java.math.BigInteger: getInt(I) ===> java.math.BigInteger: firstNonzeroIntNum()
java.math.BigInteger: getInt(I) ===> java.math.BigInteger: signInt()
java.math.BigInteger: getLowestSetBit() ===> java.lang.Integer: numberOfTrailingZeros(I)
java.math.BigInteger: getLowestSetBit() ===> java.math.BigInteger: getInt(I)
java.math.BigInteger: intValue() ===> java.math.BigInteger: getInt(I)
java.math.BigInteger: longValue() ===> java.math.BigInteger: getInt(I)
java.math.BigInteger: multiply(J) ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: multiply(J) ===> java.math.BigInteger: multiply(Ljava/math/BigInteger;)
java.math.BigInteger: multiply(J) ===> java.math.BigInteger: valueOf(J)
java.math.BigInteger: multiply(J) ===> java.util.Arrays: copyOfRange([III)
java.math.BigInteger: multiply(Ljava/math/BigInteger;) ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: multiply(Ljava/math/BigInteger;) ===> java.math.BigInteger: multiplyToLen([II[II[I)
java.math.BigInteger: multiply(Ljava/math/BigInteger;) ===> java.math.BigInteger: trustedStripLeadingZeroInts([I)
java.math.BigInteger: negate() ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: parseInt([CII) ===> java.lang.Character: digit(CI)
java.math.BigInteger: parseInt([CII) ===> java.lang.NumberFormatException: <init>(Ljava/lang/String;)
java.math.BigInteger: parseInt([CII) ===> java.lang.String: <init>([C)
java.math.BigInteger: pow(I) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigInteger: pow(I) ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: pow(I) ===> java.math.BigInteger: multiplyToLen([II[II[I)
java.math.BigInteger: pow(I) ===> java.math.BigInteger: squareToLen([II[I)
java.math.BigInteger: pow(I) ===> java.math.BigInteger: trustedStripLeadingZeroInts([I)
java.math.BigInteger: shiftLeft(I) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigInteger: shiftLeft(I) ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: shiftLeft(I) ===> java.math.BigInteger: shiftRight(I)
java.math.BigInteger: shiftRight(I) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigInteger: shiftRight(I) ===> java.math.BigInteger: <init>([II)
java.math.BigInteger: shiftRight(I) ===> java.math.BigInteger: javaIncrement([I)
java.math.BigInteger: shiftRight(I) ===> java.math.BigInteger: shiftLeft(I)
java.math.BigInteger: squareToLen([II[I) ===> java.math.BigInteger: addOne([IIII)
java.math.BigInteger: squareToLen([II[I) ===> java.math.BigInteger: mulAdd([I[IIII)
java.math.BigInteger: squareToLen([II[I) ===> java.math.BigInteger: primitiveLeftShift([III)
java.math.BigInteger: testBit(I) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.BigInteger: testBit(I) ===> java.math.BigInteger: getInt(I)
java.math.BigInteger: toString() ===> java.math.BigInteger: toString(I)
java.math.BigInteger: toString(I) ===> java.lang.Long: toString(JI)
java.math.BigInteger: toString(I) ===> java.lang.String: length()
java.math.BigInteger: toString(I) ===> java.lang.StringBuilder: <init>(I)
java.math.BigInteger: toString(I) ===> java.lang.StringBuilder: append(C)
java.math.BigInteger: toString(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.math.BigInteger: toString(I) ===> java.lang.StringBuilder: toString()
java.math.BigInteger: toString(I) ===> java.math.BigInteger: abs()
java.math.BigInteger: toString(I) ===> java.math.BigInteger: longValue()
java.math.BigInteger: toString(I) ===> java.math.MutableBigInteger: <init>()
java.math.BigInteger: toString(I) ===> java.math.MutableBigInteger: <init>([I)
java.math.BigInteger: toString(I) ===> java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;)
java.math.BigInteger: toString(I) ===> java.math.MutableBigInteger: toBigInteger(I)
java.math.BigInteger: trustedStripLeadingZeroInts([I) ===> java.util.Arrays: copyOfRange([III)
java.math.BigInteger: valueOf(J) ===> java.math.BigInteger: <init>(J)
java.math.MathContext: <clinit>() ===> java.math.MathContext: <init>(ILjava/math/RoundingMode;)
java.math.MathContext: <init>(I) ===> java.math.MathContext: <init>(ILjava/math/RoundingMode;)
java.math.MathContext: <init>(ILjava/math/RoundingMode;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.math.MathContext: <init>(ILjava/math/RoundingMode;) ===> java.lang.NullPointerException: <init>(Ljava/lang/String;)
java.math.MathContext: <init>(ILjava/math/RoundingMode;) ===> java.lang.Object: <init>()
java.math.MathContext: hashCode() ===> java.math.RoundingMode: hashCode()
java.math.MathContext: toString() ===> java.lang.StringBuilder: <init>()
java.math.MathContext: toString() ===> java.lang.StringBuilder: append(I)
java.math.MathContext: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.math.MathContext: toString() ===> java.lang.StringBuilder: toString()
java.math.MathContext: toString() ===> java.math.RoundingMode: toString()
java.math.MutableBigInteger: <clinit>() ===> java.math.MutableBigInteger: <init>(I)
java.math.MutableBigInteger: <init>() ===> java.lang.Object: <init>()
java.math.MutableBigInteger: <init>([I) ===> java.lang.Object: <init>()
java.math.MutableBigInteger: <init>(I) ===> java.lang.Object: <init>()
java.math.MutableBigInteger: <init>(Ljava/math/MutableBigInteger;) ===> java.lang.Object: <init>()
java.math.MutableBigInteger: <init>(Ljava/math/MutableBigInteger;) ===> java.util.Arrays: copyOfRange([III)
java.math.MutableBigInteger: add(Ljava/math/MutableBigInteger;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.math.MutableBigInteger: divide(JLjava/math/MutableBigInteger;) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.MutableBigInteger: divide(JLjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: clear()
java.math.MutableBigInteger: divide(JLjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;)
java.math.MutableBigInteger: divide(JLjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: divideOneWord(ILjava/math/MutableBigInteger;)
java.math.MutableBigInteger: divide(JLjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: toLong()
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.lang.ArithmeticException: <init>(Ljava/lang/String;)
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: <init>()
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: <init>(I)
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: <init>(Ljava/math/MutableBigInteger;)
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: clear()
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: compare(Ljava/math/MutableBigInteger;)
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;)
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: divideOneWord(ILjava/math/MutableBigInteger;)
java.math.MutableBigInteger: divide(Ljava/math/MutableBigInteger;Ljava/math/MutableBigInteger;) ===> java.util.Arrays: copyOfRange([III)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.lang.Integer: numberOfLeadingZeros(I)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.BigInteger: primitiveLeftShift([III)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: <init>([I)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: divadd([I[II)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: divWord([IJI)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: leftShift(I)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: mulsub([I[IIII)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: normalize()
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: rightShift(I)
java.math.MutableBigInteger: divideMagnitude([ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: unsignedLongCompare(JJ)
java.math.MutableBigInteger: divideOneWord(ILjava/math/MutableBigInteger;) ===> java.lang.Integer: numberOfLeadingZeros(I)
java.math.MutableBigInteger: divideOneWord(ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: divWord([IJI)
java.math.MutableBigInteger: divideOneWord(ILjava/math/MutableBigInteger;) ===> java.math.MutableBigInteger: normalize()
java.math.MutableBigInteger: getMagnitudeArray() ===> java.util.Arrays: copyOfRange([III)
java.math.MutableBigInteger: isOdd() ===> java.math.MutableBigInteger: isZero()
java.math.MutableBigInteger: leftShift(I) ===> java.math.BigInteger: bitLengthForInt(I)
java.math.MutableBigInteger: leftShift(I) ===> java.math.MutableBigInteger: primitiveLeftShift(I)
java.math.MutableBigInteger: leftShift(I) ===> java.math.MutableBigInteger: primitiveRightShift(I)
java.math.MutableBigInteger: leftShift(I) ===> java.math.MutableBigInteger: setValue([II)
java.math.MutableBigInteger: rightShift(I) ===> java.math.BigInteger: bitLengthForInt(I)
java.math.MutableBigInteger: rightShift(I) ===> java.math.MutableBigInteger: primitiveLeftShift(I)
java.math.MutableBigInteger: rightShift(I) ===> java.math.MutableBigInteger: primitiveRightShift(I)
java.math.MutableBigInteger: toBigDecimal(II) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;JII)
java.math.MutableBigInteger: toBigDecimal(II) ===> java.math.BigDecimal: valueOf(JI)
java.math.MutableBigInteger: toBigDecimal(II) ===> java.math.BigInteger: <init>([II)
java.math.MutableBigInteger: toBigDecimal(II) ===> java.math.MutableBigInteger: getMagnitudeArray()
java.math.MutableBigInteger: toBigInteger(I) ===> java.math.BigInteger: <init>([II)
java.math.MutableBigInteger: toBigInteger(I) ===> java.math.MutableBigInteger: getMagnitudeArray()
java.math.MutableBigInteger: toLong() ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
java.math.MutableBigInteger: toString() ===> java.math.BigInteger: toString()
java.math.MutableBigInteger: toString() ===> java.math.MutableBigInteger: toBigInteger(I)
java.math.RoundingMode: <clinit>() ===> java.math.RoundingMode: <init>(Ljava/lang/String;II)
java.math.RoundingMode: <init>(Ljava/lang/String;II) ===> java.lang.Enum: <init>(Ljava/lang/String;I)
java.security.AccessControlContext$1: <init>() ===> java.lang.Object: <init>()
java.security.AccessControlContext: <clinit>() ===> java.security.AccessControlContext$1: <init>()
java.security.AccessControlContext: <init>([Ljava/security/ProtectionDomain;Z) ===> java.lang.Object: <init>()
java.security.AccessControlContext: containsAllPDs(Ljava/security/AccessControlContext;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.security.AccessControlContext: containsAllPDs(Ljava/security/AccessControlContext;) ===> java.lang.Object: getClass()
java.security.AccessControlContext: containsAllPDs(Ljava/security/AccessControlContext;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.security.AccessControlContext: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.security.AccessControlContext: equals(Ljava/lang/Object;) ===> java.security.AccessControlContext: containsAllPDs(Ljava/security/AccessControlContext;)
java.security.AccessControlContext: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.security.AccessControlContext: getDebug() ===> java.security.Policy: isSet()
java.security.AccessControlContext: goCombiner([Ljava/security/ProtectionDomain;Ljava/security/AccessControlContext;) ===> java.security.AccessControlContext: getDebug()
java.security.AccessControlContext: hashCode() ===> java.lang.Object: hashCode()
java.security.AccessControlContext: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.security.AccessControlContext: optimize() ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.security.AccessControlContext: optimize() ===> java.security.AccessControlContext: goCombiner([Ljava/security/ProtectionDomain;Ljava/security/AccessControlContext;)
java.security.AccessControlContext: optimize() ===> java.security.AccessController: getInheritedAccessControlContext()
java.security.AccessController: getContext() ===> java.security.AccessControlContext: <init>([Ljava/security/ProtectionDomain;Z)
java.security.AccessController: getContext() ===> java.security.AccessControlContext: optimize()
java.security.AccessController: getContext() ===> java.security.AccessController: getStackAccessControlContext()
java.security.BasicPermission: <init>(Ljava/lang/String;) ===> java.security.BasicPermission: init(Ljava/lang/String;)
java.security.BasicPermission: <init>(Ljava/lang/String;) ===> java.security.Permission: <init>(Ljava/lang/String;)
java.security.BasicPermission: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.security.BasicPermission: init(Ljava/lang/String;)
java.security.BasicPermission: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.security.Permission: <init>(Ljava/lang/String;)
java.security.BasicPermission: equals(Ljava/lang/Object;) ===> java.lang.Object: getClass()
java.security.BasicPermission: equals(Ljava/lang/Object;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.security.BasicPermission: equals(Ljava/lang/Object;) ===> java.security.BasicPermission: getName()
java.security.BasicPermission: hashCode() ===> java.lang.String: hashCode()
java.security.BasicPermission: hashCode() ===> java.security.BasicPermission: getName()
java.security.BasicPermission: init(Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.security.BasicPermission: init(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>(Ljava/lang/String;)
java.security.BasicPermission: init(Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.security.BasicPermission: init(Ljava/lang/String;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.security.BasicPermission: init(Ljava/lang/String;) ===> java.lang.String: length()
java.security.BasicPermission: init(Ljava/lang/String;) ===> java.lang.String: substring(II)
java.security.Permission: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
java.security.Permission: toString() ===> java.lang.Object: getClass()
java.security.Permission: toString() ===> java.lang.String: length()
java.security.Permission: toString() ===> java.lang.StringBuilder: <init>()
java.security.Permission: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.security.Permission: toString() ===> java.lang.StringBuilder: toString()
java.security.Permission: toString() ===> java.security.Permission: getActions()
java.security.PermissionCollection: <init>() ===> java.lang.Object: <init>()
java.security.PermissionCollection: toString() ===> java.lang.Object: toString()
java.security.PermissionCollection: toString() ===> java.lang.StringBuilder: <init>()
java.security.PermissionCollection: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.security.PermissionCollection: toString() ===> java.lang.StringBuilder: toString()
java.security.PermissionCollection: toString() ===> java.security.Permission: toString()
java.security.PermissionCollection: toString() ===> java.security.PermissionCollection: elements()
java.security.PermissionCollection: toString() ===> java.util.Enumeration: hasMoreElements()
java.security.PermissionCollection: toString() ===> java.util.Enumeration: nextElement()
java.security.Permissions: <clinit>() ===> java.io.ObjectStreamField: <init>(Ljava/lang/String;Ljava/lang/Class;)
java.security.Permissions: <init>() ===> java.security.PermissionCollection: <init>()
java.security.Permissions: <init>() ===> java.util.HashMap: <init>(I)
java.security.Permissions: elements() ===> java.security.PermissionsEnumerator: <init>(Ljava/util/Iterator;)
java.security.Permissions: elements() ===> java.util.Collection: iterator()
java.security.Permissions: elements() ===> java.util.Map: values()
java.security.PermissionsEnumerator: <init>(Ljava/util/Iterator;) ===> java.lang.Object: <init>()
java.security.PermissionsEnumerator: <init>(Ljava/util/Iterator;) ===> java.security.PermissionsEnumerator: getNextEnumWithMore()
java.security.PermissionsEnumerator: getNextEnumWithMore() ===> java.security.PermissionCollection: elements()
java.security.PermissionsEnumerator: getNextEnumWithMore() ===> java.util.Enumeration: hasMoreElements()
java.security.PermissionsEnumerator: getNextEnumWithMore() ===> java.util.Iterator: hasNext()
java.security.PermissionsEnumerator: getNextEnumWithMore() ===> java.util.Iterator: next()
java.security.PermissionsEnumerator: hasMoreElements() ===> java.security.PermissionsEnumerator: getNextEnumWithMore()
java.security.PermissionsEnumerator: hasMoreElements() ===> java.util.Enumeration: hasMoreElements()
java.security.PermissionsEnumerator: nextElement() ===> java.security.PermissionsEnumerator: hasMoreElements()
java.security.PermissionsEnumerator: nextElement() ===> java.security.PermissionsEnumerator: nextElement()
java.security.PermissionsEnumerator: nextElement() ===> java.util.Enumeration: nextElement()
java.security.PermissionsEnumerator: nextElement() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
java.security.Policy$UnsupportedEmptyCollection: <init>() ===> java.security.PermissionCollection: <init>()
java.security.Policy$UnsupportedEmptyCollection: <init>() ===> java.security.Permissions: <init>()
java.security.Policy$UnsupportedEmptyCollection: <init>() ===> java.security.Permissions: setReadOnly()
java.security.Policy$UnsupportedEmptyCollection: elements() ===> java.security.Permissions: elements()
java.security.Policy: <clinit>() ===> java.security.Policy$UnsupportedEmptyCollection: <init>()
java.text.BreakDictionary$1: <init>(Ljava/text/BreakDictionary;Ljava/lang/String;) ===> java.lang.Object: <init>()
java.text.BreakDictionary: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
java.text.BreakDictionary: <init>(Ljava/lang/String;) ===> java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;)
java.text.BreakDictionary: getNextState(II) ===> java.text.BreakDictionary: cellIsPopulated(II)
java.text.BreakDictionary: getNextState(II) ===> java.text.BreakDictionary: internalAt(II)
java.text.BreakDictionary: getNextStateFromCharacter(II) ===> java.text.BreakDictionary: getNextState(II)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.lang.InternalError: <init>(Ljava/lang/String;)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.lang.StringBuilder: append(I)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedExceptionAction;)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.text.BreakDictionary$1: <init>(Ljava/text/BreakDictionary;Ljava/lang/String;)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.text.BreakIterator: getInt([BI)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.text.BreakIterator: getShort([BI)
java.text.BreakDictionary: readDictionaryFile(Ljava/lang/String;) ===> java.util.MissingResourceException: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
java.text.BreakIterator$1: <init>(Ljava/lang/String;Ljava/util/Locale;) ===> java.lang.Object: <init>()
java.text.BreakIterator$BreakIteratorCache: <init>(Ljava/util/Locale;Ljava/text/BreakIterator;) ===> java.lang.Object: <init>()
java.text.BreakIterator$BreakIteratorCache: <init>(Ljava/util/Locale;Ljava/text/BreakIterator;) ===> java.text.BreakIterator: clone()
java.text.BreakIterator$BreakIteratorCache: createBreakInstance() ===> java.text.BreakIterator: clone()
java.text.BreakIterator$BreakIteratorGetter: <clinit>() ===> java.text.BreakIterator$BreakIteratorGetter: <init>()
java.text.BreakIterator$BreakIteratorGetter: <init>() ===> java.lang.Object: <init>()
java.text.BreakIterator: <init>() ===> java.lang.Object: <init>()
java.text.BreakIterator: clone() ===> java.lang.InternalError: <init>()
java.text.BreakIterator: clone() ===> java.lang.Object: clone()
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.Exception: toString()
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.Integer: valueOf(I)
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.InternalError: <init>(Ljava/lang/String;)
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.BreakIterator$BreakIteratorGetter: access$000()
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.BreakIterator: getBundle(Ljava/lang/String;Ljava/util/Locale;)
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.DictionaryBasedBreakIterator: <init>(Ljava/lang/String;Ljava/lang/String;)
java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.RuleBasedBreakIterator: <init>(Ljava/lang/String;)
java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.ref.SoftReference: <init>(Ljava/lang/Object;)
java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.lang.ref.SoftReference: get()
java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.BreakIterator$BreakIteratorCache: <init>(Ljava/util/Locale;Ljava/text/BreakIterator;)
java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.BreakIterator$BreakIteratorCache: createBreakInstance()
java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.BreakIterator$BreakIteratorCache: getLocale()
java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.text.BreakIterator: createBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)
java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;) ===> java.util.Locale: equals(Ljava/lang/Object;)
java.text.BreakIterator: getBundle(Ljava/lang/String;Ljava/util/Locale;) ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedAction;)
java.text.BreakIterator: getBundle(Ljava/lang/String;Ljava/util/Locale;) ===> java.text.BreakIterator$1: <init>(Ljava/lang/String;Ljava/util/Locale;)
java.text.BreakIterator: getWordInstance(Ljava/util/Locale;) ===> java.text.BreakIterator: getBreakInstance(Ljava/util/Locale;ILjava/lang/String;Ljava/lang/String;)
java.text.BreakIterator: setText(Ljava/lang/String;) ===> java.text.BreakIterator: setText(Ljava/text/CharacterIterator;)
java.text.BreakIterator: setText(Ljava/lang/String;) ===> java.text.StringCharacterIterator: <init>(Ljava/lang/String;)
java.text.DateFormatSymbols$DateFormatSymbolsGetter: <clinit>() ===> java.text.DateFormatSymbols$DateFormatSymbolsGetter: <init>()
java.text.DateFormatSymbols$DateFormatSymbolsGetter: <init>() ===> java.lang.Object: <init>()
java.text.DateFormatSymbols: <clinit>() ===> java.util.Hashtable: <init>(I)
java.text.DateFormatSymbols: <init>(Ljava/util/Locale;) ===> java.lang.Object: <init>()
java.text.DateFormatSymbols: <init>(Ljava/util/Locale;) ===> java.text.DateFormatSymbols: initializeData(Ljava/util/Locale;)
java.text.DateFormatSymbols: cacheLookup(Ljava/util/Locale;) ===> java.lang.ref.SoftReference: <init>(Ljava/lang/Object;)
java.text.DateFormatSymbols: cacheLookup(Ljava/util/Locale;) ===> java.lang.ref.SoftReference: get()
java.text.DateFormatSymbols: cacheLookup(Ljava/util/Locale;) ===> java.util.Hashtable: get(Ljava/lang/Object;)
java.text.DateFormatSymbols: cacheLookup(Ljava/util/Locale;) ===> java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)
java.text.DateFormatSymbols: duplicate([Ljava/lang/String;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.text.DateFormatSymbols: equals(Ljava/lang/Object;) ===> java.lang.Object: getClass()
java.text.DateFormatSymbols: equals(Ljava/lang/Object;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.DateFormatSymbols: equals(Ljava/lang/Object;) ===> java.text.DateFormatSymbols: getZoneStringsWrapper()
java.text.DateFormatSymbols: equals(Ljava/lang/Object;) ===> java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;)
java.text.DateFormatSymbols: equals(Ljava/lang/Object;) ===> java.util.Arrays: equals([Ljava/lang/Object;[Ljava/lang/Object;)
java.text.DateFormatSymbols: getAmPmStrings() ===> java.text.DateFormatSymbols: duplicate([Ljava/lang/String;)
java.text.DateFormatSymbols: getInstance(Ljava/util/Locale;) ===> java.text.DateFormatSymbols$DateFormatSymbolsGetter: access$000()
java.text.DateFormatSymbols: getInstance(Ljava/util/Locale;) ===> java.text.DateFormatSymbols: <init>(Ljava/util/Locale;)
java.text.DateFormatSymbols: getMonths() ===> java.text.DateFormatSymbols: duplicate([Ljava/lang/String;)
java.text.DateFormatSymbols: getShortMonths() ===> java.text.DateFormatSymbols: duplicate([Ljava/lang/String;)
java.text.DateFormatSymbols: getShortWeekdays() ===> java.text.DateFormatSymbols: duplicate([Ljava/lang/String;)
java.text.DateFormatSymbols: getWeekdays() ===> java.text.DateFormatSymbols: duplicate([Ljava/lang/String;)
java.text.DateFormatSymbols: getZoneStrings() ===> java.text.DateFormatSymbols: getZoneStringsImpl(Z)
java.text.DateFormatSymbols: getZoneStringsImpl(Z) ===> java.text.DateFormatSymbols: duplicate([Ljava/lang/String;)
java.text.DateFormatSymbols: getZoneStringsWrapper() ===> java.text.DateFormatSymbols: getZoneStrings()
java.text.DateFormatSymbols: getZoneStringsWrapper() ===> java.text.DateFormatSymbols: getZoneStringsImpl(Z)
java.text.DateFormatSymbols: getZoneStringsWrapper() ===> java.text.DateFormatSymbols: isSubclassObject()
java.text.DateFormatSymbols: hashCode() ===> java.lang.String: hashCode()
java.text.DateFormatSymbols: hashCode() ===> java.text.DateFormatSymbols: getZoneStringsWrapper()
java.text.DateFormatSymbols: initializeData(Ljava/util/Locale;) ===> java.text.DateFormatSymbols: cacheLookup(Ljava/util/Locale;)
java.text.DateFormatSymbols: isSubclassObject() ===> java.lang.Object: getClass()
java.text.DateFormatSymbols: isSubclassObject() ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.DecimalFormat: <clinit>() ===> java.util.Hashtable: <init>(I)
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z)
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.DecimalFormatSymbols: clone()
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.DigitList: <init>()
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.NumberFormat: <init>()
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.NumberFormat: getMaximumFractionDigits()
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.NumberFormat: getMaximumIntegerDigits()
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.NumberFormat: getMinimumFractionDigits()
java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;) ===> java.text.NumberFormat: getMinimumIntegerDigits()
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.lang.Math: min(II)
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.text.DecimalFormat: getMaximumFractionDigits()
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.text.DecimalFormat: getMinimumFractionDigits()
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.text.DecimalFormat: setMaximumFractionDigits(I)
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.text.DecimalFormat: setMinimumFractionDigits(I)
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.text.DecimalFormatSymbols: getCurrency()
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.text.DecimalFormatSymbols: getInternationalCurrencySymbol()
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.util.Currency: getDefaultFractionDigits()
java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits() ===> java.util.Currency: getInstance(Ljava/lang/String;)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.String: charAt(I)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.String: length()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.String: regionMatches(ILjava/lang/String;II)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuffer: <init>()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuffer: append(C)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuffer: toString()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuilder: <init>()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuilder: append(C)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.lang.StringBuilder: toString()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: expandAffixes()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: getMinimumIntegerDigits()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: setDecimalSeparatorAlwaysShown(Z)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: setGroupingUsed(Z)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: setMaximumFractionDigits(I)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: setMaximumIntegerDigits(I)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: setMinimumFractionDigits(I)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormat: setMinimumIntegerDigits(I)
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getDecimalSeparator()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getDigit()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getExponentSeparator()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getGroupingSeparator()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getMinusSign()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getPatternSeparator()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getPercent()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getPerMill()
java.text.DecimalFormat: applyPattern(Ljava/lang/String;Z) ===> java.text.DecimalFormatSymbols: getZeroDigit()
java.text.DecimalFormat: equals(Ljava/lang/Object;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.DecimalFormat: equals(Ljava/lang/Object;) ===> java.text.DecimalFormatSymbols: equals(Ljava/lang/Object;)
java.text.DecimalFormat: equals(Ljava/lang/Object;) ===> java.text.NumberFormat: equals(Ljava/lang/Object;)
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.lang.String: charAt(I)
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.lang.String: length()
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.lang.StringBuffer: append(C)
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.lang.StringBuffer: setLength(I)
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.lang.StringBuffer: toString()
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.text.DecimalFormatSymbols: getCurrencySymbol()
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.text.DecimalFormatSymbols: getInternationalCurrencySymbol()
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.text.DecimalFormatSymbols: getMinusSign()
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.text.DecimalFormatSymbols: getPercent()
java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;) ===> java.text.DecimalFormatSymbols: getPerMill()
java.text.DecimalFormat: expandAffixes() ===> java.lang.StringBuffer: <init>()
java.text.DecimalFormat: expandAffixes() ===> java.text.DecimalFormat: expandAffix(Ljava/lang/String;Ljava/lang/StringBuffer;)
java.text.DecimalFormat: hashCode() ===> java.lang.String: hashCode()
java.text.DecimalFormat: hashCode() ===> java.text.NumberFormat: hashCode()
java.text.DecimalFormat: setMaximumFractionDigits(I) ===> java.lang.Math: max(II)
java.text.DecimalFormat: setMaximumFractionDigits(I) ===> java.lang.Math: min(II)
java.text.DecimalFormat: setMaximumFractionDigits(I) ===> java.text.NumberFormat: setMaximumFractionDigits(I)
java.text.DecimalFormat: setMaximumFractionDigits(I) ===> java.text.NumberFormat: setMinimumFractionDigits(I)
java.text.DecimalFormat: setMaximumIntegerDigits(I) ===> java.lang.Math: max(II)
java.text.DecimalFormat: setMaximumIntegerDigits(I) ===> java.lang.Math: min(II)
java.text.DecimalFormat: setMaximumIntegerDigits(I) ===> java.text.NumberFormat: setMaximumIntegerDigits(I)
java.text.DecimalFormat: setMaximumIntegerDigits(I) ===> java.text.NumberFormat: setMinimumIntegerDigits(I)
java.text.DecimalFormat: setMinimumFractionDigits(I) ===> java.lang.Math: max(II)
java.text.DecimalFormat: setMinimumFractionDigits(I) ===> java.lang.Math: min(II)
java.text.DecimalFormat: setMinimumFractionDigits(I) ===> java.text.NumberFormat: setMaximumFractionDigits(I)
java.text.DecimalFormat: setMinimumFractionDigits(I) ===> java.text.NumberFormat: setMinimumFractionDigits(I)
java.text.DecimalFormat: setMinimumIntegerDigits(I) ===> java.lang.Math: max(II)
java.text.DecimalFormat: setMinimumIntegerDigits(I) ===> java.lang.Math: min(II)
java.text.DecimalFormat: setMinimumIntegerDigits(I) ===> java.text.NumberFormat: setMaximumIntegerDigits(I)
java.text.DecimalFormat: setMinimumIntegerDigits(I) ===> java.text.NumberFormat: setMinimumIntegerDigits(I)
java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter: <clinit>() ===> java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter: <init>()
java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter: <init>() ===> java.lang.Object: <init>()
java.text.DecimalFormatSymbols: <clinit>() ===> java.util.Hashtable: <init>(I)
java.text.DecimalFormatSymbols: <init>(Ljava/util/Locale;) ===> java.lang.Object: <init>()
java.text.DecimalFormatSymbols: <init>(Ljava/util/Locale;) ===> java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;)
java.text.DecimalFormatSymbols: clone() ===> java.lang.InternalError: <init>()
java.text.DecimalFormatSymbols: clone() ===> java.lang.Object: clone()
java.text.DecimalFormatSymbols: equals(Ljava/lang/Object;) ===> java.lang.Object: getClass()
java.text.DecimalFormatSymbols: equals(Ljava/lang/Object;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.DecimalFormatSymbols: equals(Ljava/lang/Object;) ===> java.util.Locale: equals(Ljava/lang/Object;)
java.text.DecimalFormatSymbols: getInstance(Ljava/util/Locale;) ===> java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter: access$000()
java.text.DecimalFormatSymbols: getInstance(Ljava/util/Locale;) ===> java.text.DecimalFormatSymbols: <init>(Ljava/util/Locale;)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.lang.String: charAt(I)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.util.Currency: getCurrencyCode()
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.util.Currency: getInstance(Ljava/lang/String;)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.util.Currency: getInstance(Ljava/util/Locale;)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.util.Currency: getSymbol(Ljava/util/Locale;)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.util.Hashtable: get(Ljava/lang/Object;)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)
java.text.DecimalFormatSymbols: initialize(Ljava/util/Locale;) ===> java.util.Locale: getCountry()
java.text.DictionaryBasedBreakIterator: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.text.BreakDictionary: <init>(Ljava/lang/String;)
java.text.DictionaryBasedBreakIterator: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.text.DictionaryBasedBreakIterator: prepareCategoryFlags([B)
java.text.DictionaryBasedBreakIterator: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.text.RuleBasedBreakIterator: <init>(Ljava/lang/String;)
java.text.DictionaryBasedBreakIterator: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.text.RuleBasedBreakIterator: getAdditionalData()
java.text.DictionaryBasedBreakIterator: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.text.RuleBasedBreakIterator: setAdditionalData([B)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.lang.Integer: <init>(I)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.lang.Integer: intValue()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.BreakDictionary: getNextState(II)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.BreakDictionary: getNextStateFromCharacter(II)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.CharacterIterator: getIndex()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.CharacterIterator: setIndex(I)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.DictionaryBasedBreakIterator: getCurrent()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.DictionaryBasedBreakIterator: getNext()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.DictionaryBasedBreakIterator: getText()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.text.DictionaryBasedBreakIterator: lookupCategory(I)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: <init>()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: clone()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: elementAt(I)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: isEmpty()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: peek()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: pop()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: push(Ljava/lang/Object;)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Stack: size()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Vector: <init>()
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Vector: addElement(Ljava/lang/Object;)
java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II) ===> java.util.Vector: contains(Ljava/lang/Object;)
java.text.DictionaryBasedBreakIterator: following(I) ===> java.text.CharacterIterator: getIndex()
java.text.DictionaryBasedBreakIterator: following(I) ===> java.text.CharacterIterator: setIndex(I)
java.text.DictionaryBasedBreakIterator: following(I) ===> java.text.DictionaryBasedBreakIterator: checkOffset(ILjava/text/CharacterIterator;)
java.text.DictionaryBasedBreakIterator: following(I) ===> java.text.DictionaryBasedBreakIterator: getText()
java.text.DictionaryBasedBreakIterator: following(I) ===> java.text.RuleBasedBreakIterator: following(I)
java.text.DictionaryBasedBreakIterator: handleNext() ===> java.text.CharacterIterator: getIndex()
java.text.DictionaryBasedBreakIterator: handleNext() ===> java.text.CharacterIterator: setIndex(I)
java.text.DictionaryBasedBreakIterator: handleNext() ===> java.text.DictionaryBasedBreakIterator: divideUpDictionaryRange(II)
java.text.DictionaryBasedBreakIterator: handleNext() ===> java.text.DictionaryBasedBreakIterator: getText()
java.text.DictionaryBasedBreakIterator: handleNext() ===> java.text.RuleBasedBreakIterator: handleNext()
java.text.DictionaryBasedBreakIterator: lookupCategory(I) ===> java.text.RuleBasedBreakIterator: lookupCategory(I)
java.text.DictionaryBasedBreakIterator: setText(Ljava/text/CharacterIterator;) ===> java.text.RuleBasedBreakIterator: setText(Ljava/text/CharacterIterator;)
java.text.DigitList: <clinit>() ===> java.lang.String: toCharArray()
java.text.DigitList: <init>() ===> java.lang.Object: <init>()
java.text.DigitList: getStringBuffer() ===> java.lang.StringBuffer: <init>(I)
java.text.DigitList: getStringBuffer() ===> java.lang.StringBuffer: setLength(I)
java.text.DigitList: toString() ===> java.lang.StringBuffer: append([CII)
java.text.DigitList: toString() ===> java.lang.StringBuffer: append(I)
java.text.DigitList: toString() ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.text.DigitList: toString() ===> java.lang.StringBuffer: toString()
java.text.DigitList: toString() ===> java.text.DigitList: getStringBuffer()
java.text.DigitList: toString() ===> java.text.DigitList: isZero()
java.text.Format: <init>() ===> java.lang.Object: <init>()
java.text.Normalizer$Form: <clinit>() ===> java.text.Normalizer$Form: <init>(Ljava/lang/String;I)
java.text.Normalizer$Form: <init>(Ljava/lang/String;I) ===> java.lang.Enum: <init>(Ljava/lang/String;I)
java.text.Normalizer: normalize(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;) ===> java.lang.Object: toString()
java.text.Normalizer: normalize(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;) ===> org.clapper.argot.CommandLineOption: toString()
java.text.Normalizer: normalize(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;) ===> org.clapper.argot.Parameter: toString()
java.text.NumberFormat$NumberFormatGetter: <clinit>() ===> java.text.NumberFormat$NumberFormatGetter: <init>()
java.text.NumberFormat$NumberFormatGetter: <init>() ===> java.lang.Object: <init>()
java.text.NumberFormat: <clinit>() ===> java.util.Hashtable: <init>(I)
java.text.NumberFormat: <init>() ===> java.text.Format: <init>()
java.text.NumberFormat: equals(Ljava/lang/Object;) ===> java.lang.Object: getClass()
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.lang.Integer: valueOf(I)
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.text.DecimalFormat: <init>(Ljava/lang/String;Ljava/text/DecimalFormatSymbols;)
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.text.DecimalFormat: adjustForCurrencyDefaultFractionDigits()
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.text.DecimalFormat: setDecimalSeparatorAlwaysShown(Z)
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.text.DecimalFormat: setMaximumFractionDigits(I)
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.text.DecimalFormat: setParseIntegerOnly(Z)
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.text.DecimalFormatSymbols: getInstance(Ljava/util/Locale;)
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.text.NumberFormat$NumberFormatGetter: access$000()
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.util.Hashtable: get(Ljava/lang/Object;)
java.text.NumberFormat: getInstance(Ljava/util/Locale;I) ===> java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)
java.text.NumberFormat: getIntegerInstance(Ljava/util/Locale;) ===> java.text.NumberFormat: getInstance(Ljava/util/Locale;I)
java.text.NumberFormat: setMaximumFractionDigits(I) ===> java.lang.Math: max(II)
java.text.NumberFormat: setMaximumIntegerDigits(I) ===> java.lang.Math: max(II)
java.text.NumberFormat: setMinimumFractionDigits(I) ===> java.lang.Math: max(II)
java.text.NumberFormat: setMinimumIntegerDigits(I) ===> java.lang.Math: max(II)
java.text.RuleBasedBreakIterator$1: <init>(Ljava/text/RuleBasedBreakIterator;Ljava/lang/String;) ===> java.lang.Object: <init>()
java.text.RuleBasedBreakIterator$SafeCharIterator: <init>(Ljava/text/CharacterIterator;) ===> java.lang.Object: <init>()
java.text.RuleBasedBreakIterator$SafeCharIterator: <init>(Ljava/text/CharacterIterator;) ===> java.text.CharacterIterator: getBeginIndex()
java.text.RuleBasedBreakIterator$SafeCharIterator: <init>(Ljava/text/CharacterIterator;) ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator$SafeCharIterator: <init>(Ljava/text/CharacterIterator;) ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator$SafeCharIterator: clone() ===> java.lang.Error: <init>(Ljava/lang/String;)
java.text.RuleBasedBreakIterator$SafeCharIterator: clone() ===> java.lang.Object: clone()
java.text.RuleBasedBreakIterator$SafeCharIterator: clone() ===> java.lang.StringBuilder: <init>()
java.text.RuleBasedBreakIterator$SafeCharIterator: clone() ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.text.RuleBasedBreakIterator$SafeCharIterator: clone() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.text.RuleBasedBreakIterator$SafeCharIterator: clone() ===> java.lang.StringBuilder: toString()
java.text.RuleBasedBreakIterator$SafeCharIterator: clone() ===> java.text.CharacterIterator: clone()
java.text.RuleBasedBreakIterator$SafeCharIterator: current() ===> java.text.CharacterIterator: setIndex(I)
java.text.RuleBasedBreakIterator$SafeCharIterator: first() ===> java.text.RuleBasedBreakIterator$SafeCharIterator: setIndex(I)
java.text.RuleBasedBreakIterator$SafeCharIterator: next() ===> java.text.CharacterIterator: setIndex(I)
java.text.RuleBasedBreakIterator$SafeCharIterator: previous() ===> java.text.CharacterIterator: setIndex(I)
java.text.RuleBasedBreakIterator$SafeCharIterator: setIndex(I) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.text.RuleBasedBreakIterator$SafeCharIterator: setIndex(I) ===> java.text.RuleBasedBreakIterator$SafeCharIterator: current()
java.text.RuleBasedBreakIterator: <init>(Ljava/lang/String;) ===> java.text.BreakIterator: <init>()
java.text.RuleBasedBreakIterator: <init>(Ljava/lang/String;) ===> java.text.RuleBasedBreakIterator: readTables(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: checkOffset(ILjava/text/CharacterIterator;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: checkOffset(ILjava/text/CharacterIterator;) ===> java.text.CharacterIterator: getBeginIndex()
java.text.RuleBasedBreakIterator: checkOffset(ILjava/text/CharacterIterator;) ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator: clone() ===> java.text.BreakIterator: clone()
java.text.RuleBasedBreakIterator: clone() ===> java.text.CharacterIterator: clone()
java.text.RuleBasedBreakIterator: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.text.RuleBasedBreakIterator: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.text.RuleBasedBreakIterator: following(I) ===> java.text.CharacterIterator: getBeginIndex()
java.text.RuleBasedBreakIterator: following(I) ===> java.text.CharacterIterator: setIndex(I)
java.text.RuleBasedBreakIterator: following(I) ===> java.text.RuleBasedBreakIterator: checkOffset(ILjava/text/CharacterIterator;)
java.text.RuleBasedBreakIterator: following(I) ===> java.text.RuleBasedBreakIterator: getText()
java.text.RuleBasedBreakIterator: following(I) ===> java.text.RuleBasedBreakIterator: handleNext()
java.text.RuleBasedBreakIterator: following(I) ===> java.text.RuleBasedBreakIterator: handlePrevious()
java.text.RuleBasedBreakIterator: getCurrent() ===> java.lang.Character: isHighSurrogate(C)
java.text.RuleBasedBreakIterator: getCurrent() ===> java.lang.Character: isLowSurrogate(C)
java.text.RuleBasedBreakIterator: getCurrent() ===> java.lang.Character: toCodePoint(CC)
java.text.RuleBasedBreakIterator: getCurrent() ===> java.text.CharacterIterator: current()
java.text.RuleBasedBreakIterator: getCurrent() ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator: getCurrent() ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: getCurrent() ===> java.text.CharacterIterator: next()
java.text.RuleBasedBreakIterator: getCurrent() ===> java.text.CharacterIterator: previous()
java.text.RuleBasedBreakIterator: getCurrentCodePointCount() ===> java.lang.Character: isHighSurrogate(C)
java.text.RuleBasedBreakIterator: getCurrentCodePointCount() ===> java.lang.Character: isLowSurrogate(C)
java.text.RuleBasedBreakIterator: getCurrentCodePointCount() ===> java.text.CharacterIterator: current()
java.text.RuleBasedBreakIterator: getCurrentCodePointCount() ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator: getCurrentCodePointCount() ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: getCurrentCodePointCount() ===> java.text.CharacterIterator: next()
java.text.RuleBasedBreakIterator: getCurrentCodePointCount() ===> java.text.CharacterIterator: previous()
java.text.RuleBasedBreakIterator: getNext() ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator: getNext() ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: getNext() ===> java.text.CharacterIterator: setIndex(I)
java.text.RuleBasedBreakIterator: getNext() ===> java.text.RuleBasedBreakIterator: getCurrent()
java.text.RuleBasedBreakIterator: getNext() ===> java.text.RuleBasedBreakIterator: getCurrentCodePointCount()
java.text.RuleBasedBreakIterator: getNextIndex() ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator: getNextIndex() ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: getNextIndex() ===> java.text.RuleBasedBreakIterator: getCurrentCodePointCount()
java.text.RuleBasedBreakIterator: getPrevious() ===> java.lang.Character: isHighSurrogate(C)
java.text.RuleBasedBreakIterator: getPrevious() ===> java.lang.Character: isLowSurrogate(C)
java.text.RuleBasedBreakIterator: getPrevious() ===> java.lang.Character: toCodePoint(CC)
java.text.RuleBasedBreakIterator: getPrevious() ===> java.text.CharacterIterator: getBeginIndex()
java.text.RuleBasedBreakIterator: getPrevious() ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: getPrevious() ===> java.text.CharacterIterator: next()
java.text.RuleBasedBreakIterator: getPrevious() ===> java.text.CharacterIterator: previous()
java.text.RuleBasedBreakIterator: getText() ===> java.text.StringCharacterIterator: <init>(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.CharacterIterator: setIndex(I)
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.RuleBasedBreakIterator: getCurrent()
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.RuleBasedBreakIterator: getNext()
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.RuleBasedBreakIterator: getNextIndex()
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.RuleBasedBreakIterator: getText()
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.RuleBasedBreakIterator: lookupCategory(I)
java.text.RuleBasedBreakIterator: handleNext() ===> java.text.RuleBasedBreakIterator: lookupState(II)
java.text.RuleBasedBreakIterator: handlePrevious() ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: handlePrevious() ===> java.text.RuleBasedBreakIterator: getCurrent()
java.text.RuleBasedBreakIterator: handlePrevious() ===> java.text.RuleBasedBreakIterator: getNext()
java.text.RuleBasedBreakIterator: handlePrevious() ===> java.text.RuleBasedBreakIterator: getPrevious()
java.text.RuleBasedBreakIterator: handlePrevious() ===> java.text.RuleBasedBreakIterator: getText()
java.text.RuleBasedBreakIterator: handlePrevious() ===> java.text.RuleBasedBreakIterator: lookupBackwardState(II)
java.text.RuleBasedBreakIterator: handlePrevious() ===> java.text.RuleBasedBreakIterator: lookupCategory(I)
java.text.RuleBasedBreakIterator: isBoundary(I) ===> java.text.CharacterIterator: getBeginIndex()
java.text.RuleBasedBreakIterator: isBoundary(I) ===> java.text.RuleBasedBreakIterator: checkOffset(ILjava/text/CharacterIterator;)
java.text.RuleBasedBreakIterator: isBoundary(I) ===> java.text.RuleBasedBreakIterator: following(I)
java.text.RuleBasedBreakIterator: isBoundary(I) ===> java.text.RuleBasedBreakIterator: getText()
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.lang.InternalError: <init>(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.lang.StringBuilder: append(I)
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedExceptionAction;)
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.text.BreakIterator: getInt([BI)
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.text.RuleBasedBreakIterator$1: <init>(Ljava/text/RuleBasedBreakIterator;Ljava/lang/String;)
java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;) ===> java.util.MissingResourceException: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
java.text.RuleBasedBreakIterator: readTables(Ljava/lang/String;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.text.RuleBasedBreakIterator: readTables(Ljava/lang/String;) ===> java.text.BreakIterator: getInt([BI)
java.text.RuleBasedBreakIterator: readTables(Ljava/lang/String;) ===> java.text.BreakIterator: getLong([BI)
java.text.RuleBasedBreakIterator: readTables(Ljava/lang/String;) ===> java.text.BreakIterator: getShort([BI)
java.text.RuleBasedBreakIterator: readTables(Ljava/lang/String;) ===> java.text.RuleBasedBreakIterator: readFile(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: setText(Ljava/text/CharacterIterator;) ===> java.text.CharacterIterator: first()
java.text.RuleBasedBreakIterator: setText(Ljava/text/CharacterIterator;) ===> java.text.CharacterIterator: getEndIndex()
java.text.RuleBasedBreakIterator: setText(Ljava/text/CharacterIterator;) ===> java.text.CharacterIterator: getIndex()
java.text.RuleBasedBreakIterator: setText(Ljava/text/CharacterIterator;) ===> java.text.CharacterIterator: setIndex(I)
java.text.RuleBasedBreakIterator: setText(Ljava/text/CharacterIterator;) ===> java.text.RuleBasedBreakIterator$SafeCharIterator: <init>(Ljava/text/CharacterIterator;)
java.text.RuleBasedBreakIterator: toString() ===> java.lang.Long: toHexString(J)
java.text.RuleBasedBreakIterator: toString() ===> java.lang.StringBuffer: <init>()
java.text.RuleBasedBreakIterator: toString() ===> java.lang.StringBuffer: append(C)
java.text.RuleBasedBreakIterator: toString() ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: toString() ===> java.lang.StringBuffer: toString()
java.text.RuleBasedBreakIterator: toString() ===> java.lang.StringBuilder: <init>()
java.text.RuleBasedBreakIterator: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.text.RuleBasedBreakIterator: toString() ===> java.lang.StringBuilder: toString()
java.text.StringCharacterIterator: <init>(Ljava/lang/String;) ===> java.text.StringCharacterIterator: <init>(Ljava/lang/String;I)
java.text.StringCharacterIterator: <init>(Ljava/lang/String;I) ===> java.lang.String: length()
java.text.StringCharacterIterator: <init>(Ljava/lang/String;I) ===> java.text.StringCharacterIterator: <init>(Ljava/lang/String;III)
java.text.StringCharacterIterator: <init>(Ljava/lang/String;III) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.text.StringCharacterIterator: <init>(Ljava/lang/String;III) ===> java.lang.NullPointerException: <init>()
java.text.StringCharacterIterator: <init>(Ljava/lang/String;III) ===> java.lang.Object: <init>()
java.text.StringCharacterIterator: <init>(Ljava/lang/String;III) ===> java.lang.String: length()
java.text.StringCharacterIterator: clone() ===> java.lang.InternalError: <init>()
java.text.StringCharacterIterator: clone() ===> java.lang.Object: clone()
java.text.StringCharacterIterator: current() ===> java.lang.String: charAt(I)
java.text.StringCharacterIterator: equals(Ljava/lang/Object;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.text.StringCharacterIterator: equals(Ljava/lang/Object;) ===> java.text.StringCharacterIterator: hashCode()
java.text.StringCharacterIterator: first() ===> java.text.StringCharacterIterator: current()
java.text.StringCharacterIterator: hashCode() ===> java.lang.String: hashCode()
java.text.StringCharacterIterator: next() ===> java.lang.String: charAt(I)
java.text.StringCharacterIterator: previous() ===> java.lang.String: charAt(I)
java.text.StringCharacterIterator: setIndex(I) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.text.StringCharacterIterator: setIndex(I) ===> java.text.StringCharacterIterator: current()
java.util.AbstractCollection: <init>() ===> java.lang.Object: <init>()
java.util.AbstractCollection: contains(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.AbstractCollection: contains(Ljava/lang/Object;) ===> java.util.AbstractCollection: iterator()
java.util.AbstractCollection: contains(Ljava/lang/Object;) ===> java.util.Iterator: hasNext()
java.util.AbstractCollection: contains(Ljava/lang/Object;) ===> java.util.Iterator: next()
java.util.AbstractCollection: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.AbstractCollection: containsAll(Ljava/util/Collection;) ===> java.util.AbstractCollection: contains(Ljava/lang/Object;)
java.util.AbstractCollection: containsAll(Ljava/util/Collection;) ===> java.util.Collection: iterator()
java.util.AbstractCollection: containsAll(Ljava/util/Collection;) ===> java.util.Iterator: hasNext()
java.util.AbstractCollection: containsAll(Ljava/util/Collection;) ===> java.util.Iterator: next()
java.util.AbstractCollection: finishToArray([Ljava/lang/Object;Ljava/util/Iterator;) ===> java.lang.OutOfMemoryError: <init>(Ljava/lang/String;)
java.util.AbstractCollection: finishToArray([Ljava/lang/Object;Ljava/util/Iterator;) ===> java.util.Arrays: copyOf([Ljava/lang/Object;I)
java.util.AbstractCollection: finishToArray([Ljava/lang/Object;Ljava/util/Iterator;) ===> java.util.Iterator: hasNext()
java.util.AbstractCollection: finishToArray([Ljava/lang/Object;Ljava/util/Iterator;) ===> java.util.Iterator: next()
java.util.AbstractCollection: isEmpty() ===> java.util.AbstractCollection: size()
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.lang.Object: getClass()
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.lang.reflect.Array: newInstance(Ljava/lang/Class;I)
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.util.AbstractCollection: finishToArray([Ljava/lang/Object;Ljava/util/Iterator;)
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.util.AbstractCollection: iterator()
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.util.AbstractCollection: size()
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.util.Arrays: copyOf([Ljava/lang/Object;I)
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.util.Iterator: hasNext()
java.util.AbstractCollection: toArray([Ljava/lang/Object;) ===> java.util.Iterator: next()
java.util.AbstractCollection: toString() ===> java.lang.StringBuilder: <init>()
java.util.AbstractCollection: toString() ===> java.lang.StringBuilder: append(C)
java.util.AbstractCollection: toString() ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.util.AbstractCollection: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.AbstractCollection: toString() ===> java.lang.StringBuilder: toString()
java.util.AbstractCollection: toString() ===> java.util.AbstractCollection: iterator()
java.util.AbstractCollection: toString() ===> java.util.Iterator: hasNext()
java.util.AbstractCollection: toString() ===> java.util.Iterator: next()
java.util.AbstractList$Itr: <init>(Ljava/util/AbstractList;) ===> java.lang.Object: <init>()
java.util.AbstractList$Itr: <init>(Ljava/util/AbstractList;Ljava/util/AbstractList$1;) ===> java.util.AbstractList$Itr: <init>(Ljava/util/AbstractList;)
java.util.AbstractList$Itr: checkForComodification() ===> java.util.ConcurrentModificationException: <init>()
java.util.AbstractList$Itr: hasNext() ===> java.util.AbstractList: size()
java.util.AbstractList$Itr: next() ===> java.util.AbstractList$Itr: checkForComodification()
java.util.AbstractList$Itr: next() ===> java.util.AbstractList: get(I)
java.util.AbstractList$Itr: next() ===> java.util.NoSuchElementException: <init>()
java.util.AbstractList$ListItr: <init>(Ljava/util/AbstractList;I) ===> java.util.AbstractList$Itr: <init>(Ljava/util/AbstractList;Ljava/util/AbstractList$1;)
java.util.AbstractList: <init>() ===> java.util.AbstractCollection: <init>()
java.util.AbstractList: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.AbstractList: equals(Ljava/lang/Object;) ===> java.util.AbstractList: listIterator()
java.util.AbstractList: equals(Ljava/lang/Object;) ===> java.util.List: listIterator()
java.util.AbstractList: equals(Ljava/lang/Object;) ===> java.util.ListIterator: hasNext()
java.util.AbstractList: equals(Ljava/lang/Object;) ===> java.util.ListIterator: next()
java.util.AbstractList: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.AbstractList: hashCode() ===> java.lang.Object: hashCode()
java.util.AbstractList: hashCode() ===> java.util.AbstractList: iterator()
java.util.AbstractList: hashCode() ===> java.util.Iterator: hasNext()
java.util.AbstractList: hashCode() ===> java.util.Iterator: next()
java.util.AbstractList: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.AbstractList: listIterator() ===> java.util.AbstractList: listIterator(I)
java.util.AbstractList: listIterator(I) ===> java.util.AbstractList$ListItr: <init>(Ljava/util/AbstractList;I)
java.util.AbstractList: listIterator(I) ===> java.util.AbstractList: rangeCheckForAdd(I)
java.util.AbstractList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: <init>()
java.util.AbstractList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: append(I)
java.util.AbstractList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.AbstractList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: toString()
java.util.AbstractList: outOfBoundsMsg(I) ===> java.util.AbstractList: size()
java.util.AbstractList: rangeCheckForAdd(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.AbstractList: rangeCheckForAdd(I) ===> java.util.AbstractList: outOfBoundsMsg(I)
java.util.AbstractList: rangeCheckForAdd(I) ===> java.util.AbstractList: size()
java.util.AbstractMap$SimpleEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: <init>()
java.util.AbstractMap$SimpleEntry: equals(Ljava/lang/Object;) ===> java.util.AbstractMap: access$000(Ljava/lang/Object;Ljava/lang/Object;)
java.util.AbstractMap$SimpleEntry: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.AbstractMap$SimpleEntry: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getValue()
java.util.AbstractMap$SimpleEntry: hashCode() ===> java.lang.Object: hashCode()
java.util.AbstractMap$SimpleEntry: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.AbstractMap$SimpleEntry: toString() ===> java.lang.StringBuilder: <init>()
java.util.AbstractMap$SimpleEntry: toString() ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.util.AbstractMap$SimpleEntry: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.AbstractMap$SimpleEntry: toString() ===> java.lang.StringBuilder: toString()
java.util.AbstractMap: <init>() ===> java.lang.Object: <init>()
java.util.AbstractMap: access$000(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.AbstractMap: eq(Ljava/lang/Object;Ljava/lang/Object;)
java.util.AbstractMap: eq(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.AbstractMap: eq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.AbstractMap: entrySet()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.AbstractMap: size()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Iterator: hasNext()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Iterator: next()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getValue()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Map: containsKey(Ljava/lang/Object;)
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Map: get(Ljava/lang/Object;)
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Map: size()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> java.util.Set: iterator()
java.util.AbstractMap: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.AbstractMap: hashCode() ===> java.lang.Object: hashCode()
java.util.AbstractMap: hashCode() ===> java.util.AbstractMap: entrySet()
java.util.AbstractMap: hashCode() ===> java.util.Iterator: hasNext()
java.util.AbstractMap: hashCode() ===> java.util.Iterator: next()
java.util.AbstractMap: hashCode() ===> java.util.Set: iterator()
java.util.AbstractMap: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.AbstractMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.UnsupportedOperationException: <init>()
java.util.AbstractMap: toString() ===> java.lang.StringBuilder: <init>()
java.util.AbstractMap: toString() ===> java.lang.StringBuilder: append(C)
java.util.AbstractMap: toString() ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.util.AbstractMap: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.AbstractMap: toString() ===> java.lang.StringBuilder: toString()
java.util.AbstractMap: toString() ===> java.util.AbstractMap: entrySet()
java.util.AbstractMap: toString() ===> java.util.Iterator: hasNext()
java.util.AbstractMap: toString() ===> java.util.Iterator: next()
java.util.AbstractMap: toString() ===> java.util.Map$Entry: getKey()
java.util.AbstractMap: toString() ===> java.util.Map$Entry: getValue()
java.util.AbstractMap: toString() ===> java.util.Set: iterator()
java.util.AbstractSet: <init>() ===> java.util.AbstractCollection: <init>()
java.util.AbstractSet: equals(Ljava/lang/Object;) ===> java.util.AbstractSet: containsAll(Ljava/util/Collection;)
java.util.AbstractSet: equals(Ljava/lang/Object;) ===> java.util.AbstractSet: size()
java.util.AbstractSet: equals(Ljava/lang/Object;) ===> java.util.Collection: size()
java.util.AbstractSet: hashCode() ===> java.lang.Object: hashCode()
java.util.AbstractSet: hashCode() ===> java.util.AbstractSet: iterator()
java.util.AbstractSet: hashCode() ===> java.util.Iterator: hasNext()
java.util.AbstractSet: hashCode() ===> java.util.Iterator: next()
java.util.AbstractSet: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.ArrayList$Itr: <init>(Ljava/util/ArrayList;) ===> java.lang.Object: <init>()
java.util.ArrayList$Itr: <init>(Ljava/util/ArrayList;Ljava/util/ArrayList$1;) ===> java.util.ArrayList$Itr: <init>(Ljava/util/ArrayList;)
java.util.ArrayList$Itr: checkForComodification() ===> java.util.ConcurrentModificationException: <init>()
java.util.ArrayList$Itr: hasNext() ===> java.util.ArrayList: access$100(Ljava/util/ArrayList;)
java.util.ArrayList$Itr: next() ===> java.util.ArrayList$Itr: checkForComodification()
java.util.ArrayList$Itr: next() ===> java.util.ArrayList: access$100(Ljava/util/ArrayList;)
java.util.ArrayList$Itr: next() ===> java.util.ArrayList: access$200(Ljava/util/ArrayList;)
java.util.ArrayList$Itr: next() ===> java.util.ConcurrentModificationException: <init>()
java.util.ArrayList$Itr: next() ===> java.util.NoSuchElementException: <init>()
java.util.ArrayList$ListItr: <init>(Ljava/util/ArrayList;I) ===> java.util.ArrayList$Itr: <init>(Ljava/util/ArrayList;Ljava/util/ArrayList$1;)
java.util.ArrayList$SubList$1: <init>(Ljava/util/ArrayList$SubList;I) ===> java.lang.Object: <init>()
java.util.ArrayList$SubList$1: checkForComodification() ===> java.util.ConcurrentModificationException: <init>()
java.util.ArrayList$SubList$1: hasNext() ===> java.util.ArrayList$SubList: access$300(Ljava/util/ArrayList$SubList;)
java.util.ArrayList$SubList$1: next() ===> java.util.ArrayList$SubList$1: checkForComodification()
java.util.ArrayList$SubList$1: next() ===> java.util.ArrayList$SubList: access$300(Ljava/util/ArrayList$SubList;)
java.util.ArrayList$SubList$1: next() ===> java.util.ArrayList$SubList: access$400(Ljava/util/ArrayList$SubList;)
java.util.ArrayList$SubList$1: next() ===> java.util.ArrayList: access$200(Ljava/util/ArrayList;)
java.util.ArrayList$SubList$1: next() ===> java.util.ConcurrentModificationException: <init>()
java.util.ArrayList$SubList$1: next() ===> java.util.NoSuchElementException: <init>()
java.util.ArrayList$SubList: <init>(Ljava/util/ArrayList;Ljava/util/AbstractList;III) ===> java.util.AbstractList: <init>()
java.util.ArrayList$SubList: checkForComodification() ===> java.util.ConcurrentModificationException: <init>()
java.util.ArrayList$SubList: get(I) ===> java.util.ArrayList$SubList: checkForComodification()
java.util.ArrayList$SubList: get(I) ===> java.util.ArrayList$SubList: rangeCheck(I)
java.util.ArrayList$SubList: get(I) ===> java.util.ArrayList: elementData(I)
java.util.ArrayList$SubList: iterator() ===> java.util.ArrayList$SubList: listIterator()
java.util.ArrayList$SubList: listIterator(I) ===> java.util.ArrayList$SubList$1: <init>(Ljava/util/ArrayList$SubList;I)
java.util.ArrayList$SubList: listIterator(I) ===> java.util.ArrayList$SubList: checkForComodification()
java.util.ArrayList$SubList: listIterator(I) ===> java.util.ArrayList$SubList: rangeCheckForAdd(I)
java.util.ArrayList$SubList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: <init>()
java.util.ArrayList$SubList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: append(I)
java.util.ArrayList$SubList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.ArrayList$SubList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: toString()
java.util.ArrayList$SubList: rangeCheck(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.ArrayList$SubList: rangeCheck(I) ===> java.util.ArrayList$SubList: outOfBoundsMsg(I)
java.util.ArrayList$SubList: rangeCheckForAdd(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.ArrayList$SubList: rangeCheckForAdd(I) ===> java.util.ArrayList$SubList: outOfBoundsMsg(I)
java.util.ArrayList$SubList: size() ===> java.util.ArrayList$SubList: checkForComodification()
java.util.ArrayList: <init>() ===> java.util.ArrayList: <init>(I)
java.util.ArrayList: <init>(I) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.ArrayList: <init>(I) ===> java.lang.StringBuilder: <init>()
java.util.ArrayList: <init>(I) ===> java.lang.StringBuilder: append(I)
java.util.ArrayList: <init>(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.ArrayList: <init>(I) ===> java.lang.StringBuilder: toString()
java.util.ArrayList: <init>(I) ===> java.util.AbstractList: <init>()
java.util.ArrayList: add(Ljava/lang/Object;) ===> java.util.ArrayList: ensureCapacity(I)
java.util.ArrayList: contains(Ljava/lang/Object;) ===> java.util.ArrayList: indexOf(Ljava/lang/Object;)
java.util.ArrayList: ensureCapacity(I) ===> java.util.Arrays: copyOf([Ljava/lang/Object;I)
java.util.ArrayList: get(I) ===> java.util.ArrayList: elementData(I)
java.util.ArrayList: get(I) ===> java.util.ArrayList: rangeCheck(I)
java.util.ArrayList: indexOf(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.ArrayList: indexOf(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.ArrayList: iterator() ===> java.util.ArrayList$Itr: <init>(Ljava/util/ArrayList;Ljava/util/ArrayList$1;)
java.util.ArrayList: listIterator() ===> java.util.ArrayList$ListItr: <init>(Ljava/util/ArrayList;I)
java.util.ArrayList: listIterator(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.ArrayList: listIterator(I) ===> java.lang.StringBuilder: <init>()
java.util.ArrayList: listIterator(I) ===> java.lang.StringBuilder: append(I)
java.util.ArrayList: listIterator(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.ArrayList: listIterator(I) ===> java.lang.StringBuilder: toString()
java.util.ArrayList: listIterator(I) ===> java.util.ArrayList$ListItr: <init>(Ljava/util/ArrayList;I)
java.util.ArrayList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: <init>()
java.util.ArrayList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: append(I)
java.util.ArrayList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.ArrayList: outOfBoundsMsg(I) ===> java.lang.StringBuilder: toString()
java.util.ArrayList: rangeCheck(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.ArrayList: rangeCheck(I) ===> java.util.ArrayList: outOfBoundsMsg(I)
java.util.ArrayList: subList(II) ===> java.util.ArrayList$SubList: <init>(Ljava/util/ArrayList;Ljava/util/AbstractList;III)
java.util.ArrayList: subList(II) ===> java.util.ArrayList: subListRangeCheck(III)
java.util.ArrayList: subListRangeCheck(III) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.ArrayList: subListRangeCheck(III) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.ArrayList: subListRangeCheck(III) ===> java.lang.StringBuilder: <init>()
java.util.ArrayList: subListRangeCheck(III) ===> java.lang.StringBuilder: append(I)
java.util.ArrayList: subListRangeCheck(III) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.ArrayList: subListRangeCheck(III) ===> java.lang.StringBuilder: toString()
java.util.ArrayList: toArray([Ljava/lang/Object;) ===> java.lang.Object: getClass()
java.util.ArrayList: toArray([Ljava/lang/Object;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.ArrayList: toArray([Ljava/lang/Object;) ===> java.util.Arrays: copyOf([Ljava/lang/Object;ILjava/lang/Class;)
java.util.Arrays: copyOf([CI) ===> java.lang.Math: min(II)
java.util.Arrays: copyOf([CI) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Arrays: copyOf([II) ===> java.lang.Math: min(II)
java.util.Arrays: copyOf([II) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Arrays: copyOf([Ljava/lang/Object;I) ===> java.lang.Object: getClass()
java.util.Arrays: copyOf([Ljava/lang/Object;I) ===> java.util.Arrays: copyOf([Ljava/lang/Object;ILjava/lang/Class;)
java.util.Arrays: copyOf([Ljava/lang/Object;ILjava/lang/Class;) ===> java.lang.Math: min(II)
java.util.Arrays: copyOf([Ljava/lang/Object;ILjava/lang/Class;) ===> java.lang.reflect.Array: newInstance(Ljava/lang/Class;I)
java.util.Arrays: copyOf([Ljava/lang/Object;ILjava/lang/Class;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Arrays: copyOfRange([CII) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.Arrays: copyOfRange([CII) ===> java.lang.Math: min(II)
java.util.Arrays: copyOfRange([CII) ===> java.lang.StringBuilder: <init>()
java.util.Arrays: copyOfRange([CII) ===> java.lang.StringBuilder: append(I)
java.util.Arrays: copyOfRange([CII) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Arrays: copyOfRange([CII) ===> java.lang.StringBuilder: toString()
java.util.Arrays: copyOfRange([CII) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Arrays: copyOfRange([III) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.Arrays: copyOfRange([III) ===> java.lang.Math: min(II)
java.util.Arrays: copyOfRange([III) ===> java.lang.StringBuilder: <init>()
java.util.Arrays: copyOfRange([III) ===> java.lang.StringBuilder: append(I)
java.util.Arrays: copyOfRange([III) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Arrays: copyOfRange([III) ===> java.lang.StringBuilder: toString()
java.util.Arrays: copyOfRange([III) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([B[B)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([C[C)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([D[D)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([F[F)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([I[I)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([J[J)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([S[S)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.util.Arrays: equals([Z[Z)
java.util.Arrays: deepEquals([Ljava/lang/Object;[Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Arrays: equals([D[D) ===> java.lang.Double: doubleToLongBits(D)
java.util.Arrays: equals([F[F) ===> java.lang.Float: floatToIntBits(F)
java.util.Arrays: equals([Ljava/lang/Object;[Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Arrays: equals([Ljava/lang/Object;[Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;III) ===> java.lang.Comparable: compareTo(Ljava/lang/Object;)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;III) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;III) ===> java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;III)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;III) ===> java.util.Arrays: swap([Ljava/lang/Object;II)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;) ===> java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;) ===> java.util.Arrays: swap([Ljava/lang/Object;II)
java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;) ===> java.util.Comparator: compare(Ljava/lang/Object;Ljava/lang/Object;)
java.util.Arrays: sort([Ljava/lang/Object;Ljava/util/Comparator;) ===> java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;III)
java.util.Arrays: sort([Ljava/lang/Object;Ljava/util/Comparator;) ===> java.util.Arrays: mergeSort([Ljava/lang/Object;[Ljava/lang/Object;IIILjava/util/Comparator;)
java.util.Arrays: sort([Ljava/lang/Object;Ljava/util/Comparator;) ===> Ljava.lang.Object: clone()
java.util.Calendar: <clinit>() ===> java.util.Hashtable: <init>(I)
java.util.Calendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.lang.Object: <init>()
java.util.Calendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.Calendar: setWeekCountData(Ljava/util/Locale;)
java.util.Calendar: appendValue(Ljava/lang/StringBuilder;Ljava/lang/String;ZJ) ===> java.lang.StringBuilder: append(C)
java.util.Calendar: appendValue(Ljava/lang/StringBuilder;Ljava/lang/String;ZJ) ===> java.lang.StringBuilder: append(J)
java.util.Calendar: appendValue(Ljava/lang/StringBuilder;Ljava/lang/String;ZJ) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Calendar: clone() ===> java.lang.InternalError: <init>()
java.util.Calendar: clone() ===> java.lang.Object: clone()
java.util.Calendar: compareTo(J) ===> java.util.Calendar: getMillisOf(Ljava/util/Calendar;)
java.util.Calendar: compareTo(Ljava/lang/Object;) ===> java.util.Calendar: compareTo(Ljava/util/Calendar;)
java.util.Calendar: compareTo(Ljava/util/Calendar;) ===> java.util.Calendar: compareTo(J)
java.util.Calendar: compareTo(Ljava/util/Calendar;) ===> java.util.Calendar: getMillisOf(Ljava/util/Calendar;)
java.util.Calendar: complete() ===> java.util.Calendar: computeFields()
java.util.Calendar: complete() ===> java.util.Calendar: updateTime()
java.util.Calendar: createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.util.Calendar: createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.GregorianCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;)
java.util.Calendar: createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.JapaneseImperialCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;)
java.util.Calendar: createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.Locale: getCountry()
java.util.Calendar: createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.Locale: getLanguage()
java.util.Calendar: createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.Locale: getVariant()
java.util.Calendar: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Calendar: equals(Ljava/lang/Object;) ===> java.util.Calendar: compareTo(J)
java.util.Calendar: equals(Ljava/lang/Object;) ===> java.util.Calendar: getMillisOf(Ljava/util/Calendar;)
java.util.Calendar: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Calendar: get(I) ===> java.util.Calendar: complete()
java.util.Calendar: get(I) ===> java.util.Calendar: internalGet(I)
java.util.Calendar: getInstance(Ljava/util/Locale;) ===> java.util.Calendar: createCalendar(Ljava/util/TimeZone;Ljava/util/Locale;)
java.util.Calendar: getInstance(Ljava/util/Locale;) ===> java.util.TimeZone: getDefaultRef()
java.util.Calendar: getMillisOf(Ljava/util/Calendar;) ===> java.util.Calendar: clone()
java.util.Calendar: getMillisOf(Ljava/util/Calendar;) ===> java.util.Calendar: getTimeInMillis()
java.util.Calendar: getMillisOf(Ljava/util/Calendar;) ===> java.util.Calendar: setLenient(Z)
java.util.Calendar: getTimeInMillis() ===> java.util.Calendar: updateTime()
java.util.Calendar: hashCode() ===> java.lang.Object: hashCode()
java.util.Calendar: hashCode() ===> java.util.Calendar: getMillisOf(Ljava/util/Calendar;)
java.util.Calendar: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Calendar: selectFields() ===> java.lang.AssertionError: <init>()
java.util.Calendar: selectFields() ===> java.lang.Math: max(II)
java.util.Calendar: selectFields() ===> java.util.Calendar: aggregateStamp(II)
java.util.Calendar: set(II) ===> java.util.Calendar: adjustStamp()
java.util.Calendar: set(II) ===> java.util.Calendar: computeFields()
java.util.Calendar: set(II) ===> java.util.Calendar: internalSet(II)
java.util.Calendar: set(II) ===> java.util.Calendar: isLenient()
java.util.Calendar: setTime(Ljava/util/Date;) ===> java.util.Calendar: setTimeInMillis(J)
java.util.Calendar: setTimeInMillis(J) ===> java.util.Calendar: computeFields()
java.util.Calendar: setWeekCountData(Ljava/util/Locale;) ===> java.lang.Integer: parseInt(Ljava/lang/String;)
java.util.Calendar: setWeekCountData(Ljava/util/Locale;) ===> java.util.Hashtable: get(Ljava/lang/Object;)
java.util.Calendar: setWeekCountData(Ljava/util/Locale;) ===> java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.Calendar: toString() ===> java.lang.Object: getClass()
java.util.Calendar: toString() ===> java.lang.StringBuilder: <init>(I)
java.util.Calendar: toString() ===> java.lang.StringBuilder: append(C)
java.util.Calendar: toString() ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.util.Calendar: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Calendar: toString() ===> java.lang.StringBuilder: append(Z)
java.util.Calendar: toString() ===> java.lang.StringBuilder: toString()
java.util.Calendar: toString() ===> java.util.Calendar: appendValue(Ljava/lang/StringBuilder;Ljava/lang/String;ZJ)
java.util.Calendar: toString() ===> java.util.Calendar: isSet(I)
java.util.Calendar: updateTime() ===> java.util.Calendar: computeTime()
java.util.Collections$EmptyIterator: <clinit>() ===> java.util.Collections$EmptyIterator: <init>()
java.util.Collections$EmptyIterator: <init>() ===> java.lang.Object: <init>()
java.util.Collections$EmptyIterator: <init>(Ljava/util/Collections$1;) ===> java.util.Collections$EmptyIterator: <init>()
java.util.Collections$EmptyIterator: next() ===> java.util.NoSuchElementException: <init>()
java.util.Collections$EmptyList: <init>() ===> java.util.AbstractList: <init>()
java.util.Collections$EmptyList: <init>(Ljava/util/Collections$1;) ===> java.util.Collections$EmptyList: <init>()
java.util.Collections$EmptyList: equals(Ljava/lang/Object;) ===> java.util.List: isEmpty()
java.util.Collections$EmptyList: get(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.Collections$EmptyList: get(I) ===> java.lang.StringBuilder: <init>()
java.util.Collections$EmptyList: get(I) ===> java.lang.StringBuilder: append(I)
java.util.Collections$EmptyList: get(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Collections$EmptyList: get(I) ===> java.lang.StringBuilder: toString()
java.util.Collections$EmptyList: iterator() ===> java.util.Collections: emptyIterator()
java.util.Collections$EmptyList: listIterator() ===> java.util.Collections: emptyListIterator()
java.util.Collections$EmptyListIterator: <clinit>() ===> java.util.Collections$EmptyListIterator: <init>()
java.util.Collections$EmptyListIterator: <init>() ===> java.util.Collections$EmptyIterator: <init>(Ljava/util/Collections$1;)
java.util.Collections$EmptyMap: <init>() ===> java.util.AbstractMap: <init>()
java.util.Collections$EmptyMap: <init>(Ljava/util/Collections$1;) ===> java.util.Collections$EmptyMap: <init>()
java.util.Collections$EmptyMap: entrySet() ===> java.util.Collections: emptySet()
java.util.Collections$EmptyMap: equals(Ljava/lang/Object;) ===> java.util.Map: isEmpty()
java.util.Collections$EmptyMap: values() ===> java.util.Collections: emptySet()
java.util.Collections$EmptySet: <init>() ===> java.util.AbstractSet: <init>()
java.util.Collections$EmptySet: <init>(Ljava/util/Collections$1;) ===> java.util.Collections$EmptySet: <init>()
java.util.Collections$EmptySet: containsAll(Ljava/util/Collection;) ===> java.util.Collection: isEmpty()
java.util.Collections$EmptySet: iterator() ===> java.util.Collections: emptyIterator()
java.util.Collections$SynchronizedCollection: <init>(Ljava/util/Collection;Ljava/lang/Object;) ===> java.lang.Object: <init>()
java.util.Collections$SynchronizedCollection: isEmpty() ===> java.util.Collection: isEmpty()
java.util.Collections$SynchronizedCollection: iterator() ===> java.util.Collection: iterator()
java.util.Collections$SynchronizedCollection: size() ===> java.util.Collection: size()
java.util.Collections$SynchronizedCollection: toString() ===> java.lang.Object: toString()
java.util.Collections$SynchronizedCollection: toString() ===> org.clapper.argot.CommandLineOption: toString()
java.util.Collections$SynchronizedCollection: toString() ===> org.clapper.argot.Parameter: toString()
java.util.Collections$SynchronizedSet: <init>(Ljava/util/Set;Ljava/lang/Object;) ===> java.util.Collections$SynchronizedCollection: <init>(Ljava/util/Collection;Ljava/lang/Object;)
java.util.Collections$SynchronizedSet: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Collections$SynchronizedSet: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Collections$SynchronizedSet: hashCode() ===> java.lang.Object: hashCode()
java.util.Collections$SynchronizedSet: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Collections: <clinit>() ===> java.util.Collections$EmptyList: <init>(Ljava/util/Collections$1;)
java.util.Collections: <clinit>() ===> java.util.Collections$EmptyMap: <init>(Ljava/util/Collections$1;)
java.util.Collections: <clinit>() ===> java.util.Collections$EmptySet: <init>(Ljava/util/Collections$1;)
java.util.Collections: synchronizedCollection(Ljava/util/Collection;Ljava/lang/Object;) ===> java.util.Collections$SynchronizedCollection: <init>(Ljava/util/Collection;Ljava/lang/Object;)
java.util.Collections: synchronizedSet(Ljava/util/Set;Ljava/lang/Object;) ===> java.util.Collections$SynchronizedSet: <init>(Ljava/util/Set;Ljava/lang/Object;)
java.util.concurrent.atomic.AtomicInteger: <clinit>() ===> java.lang.Error: <init>(Ljava/lang/Throwable;)
java.util.concurrent.atomic.AtomicInteger: <init>() ===> java.lang.Number: <init>()
java.util.concurrent.atomic.AtomicInteger: doubleValue() ===> java.util.concurrent.atomic.AtomicInteger: get()
java.util.concurrent.atomic.AtomicInteger: floatValue() ===> java.util.concurrent.atomic.AtomicInteger: get()
java.util.concurrent.atomic.AtomicInteger: getAndAdd(I) ===> java.util.concurrent.atomic.AtomicInteger: compareAndSet(II)
java.util.concurrent.atomic.AtomicInteger: getAndAdd(I) ===> java.util.concurrent.atomic.AtomicInteger: get()
java.util.concurrent.atomic.AtomicInteger: intValue() ===> java.util.concurrent.atomic.AtomicInteger: get()
java.util.concurrent.atomic.AtomicInteger: longValue() ===> java.util.concurrent.atomic.AtomicInteger: get()
java.util.concurrent.atomic.AtomicInteger: toString() ===> java.lang.Integer: toString(I)
java.util.concurrent.atomic.AtomicInteger: toString() ===> java.util.concurrent.atomic.AtomicInteger: get()
java.util.concurrent.ConcurrentHashMap$EntryIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;) ===> java.util.concurrent.ConcurrentHashMap$HashIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;)
java.util.concurrent.ConcurrentHashMap$EntryIterator: next() ===> java.util.concurrent.ConcurrentHashMap$EntryIterator: next()
java.util.concurrent.ConcurrentHashMap$EntryIterator: next() ===> java.util.concurrent.ConcurrentHashMap$HashIterator: nextEntry()
java.util.concurrent.ConcurrentHashMap$EntryIterator: next() ===> java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: <init>(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/Object;Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap$EntrySet: <init>(Ljava/util/concurrent/ConcurrentHashMap;) ===> java.util.AbstractSet: <init>()
java.util.concurrent.ConcurrentHashMap$EntrySet: contains(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap$EntrySet: contains(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap$EntrySet: contains(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.concurrent.ConcurrentHashMap$EntrySet: contains(Ljava/lang/Object;) ===> java.util.Map$Entry: getValue()
java.util.concurrent.ConcurrentHashMap$EntrySet: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.concurrent.ConcurrentHashMap$EntrySet: isEmpty() ===> java.util.concurrent.ConcurrentHashMap: isEmpty()
java.util.concurrent.ConcurrentHashMap$EntrySet: iterator() ===> java.util.concurrent.ConcurrentHashMap$EntryIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;)
java.util.concurrent.ConcurrentHashMap$EntrySet: size() ===> java.util.concurrent.ConcurrentHashMap: size()
java.util.concurrent.ConcurrentHashMap$HashEntry: <clinit>() ===> java.lang.Error: <init>(Ljava/lang/Throwable;)
java.util.concurrent.ConcurrentHashMap$HashEntry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$HashEntry;) ===> java.lang.Object: <init>()
java.util.concurrent.ConcurrentHashMap$HashIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;) ===> java.lang.Object: <init>()
java.util.concurrent.ConcurrentHashMap$HashIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;) ===> java.util.concurrent.ConcurrentHashMap$HashIterator: advance()
java.util.concurrent.ConcurrentHashMap$HashIterator: advance() ===> java.util.concurrent.ConcurrentHashMap: entryAt([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;I)
java.util.concurrent.ConcurrentHashMap$HashIterator: advance() ===> java.util.concurrent.ConcurrentHashMap: segmentAt([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap$HashIterator: nextEntry() ===> java.util.concurrent.ConcurrentHashMap$HashIterator: advance()
java.util.concurrent.ConcurrentHashMap$HashIterator: nextEntry() ===> java.util.NoSuchElementException: <init>()
java.util.concurrent.ConcurrentHashMap$Segment: <clinit>() ===> java.lang.Runtime: availableProcessors()
java.util.concurrent.ConcurrentHashMap$Segment: <clinit>() ===> java.lang.Runtime: getRuntime()
java.util.concurrent.ConcurrentHashMap$Segment: <init>(FI[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;) ===> java.util.concurrent.locks.ReentrantLock: <init>()
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap$HashEntry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap$HashEntry: setNext(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap$Segment: rehash(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap$Segment: scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;)
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap$Segment: tryLock()
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap$Segment: unlock()
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap: entryAt([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;I)
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> java.util.concurrent.ConcurrentHashMap: setEntryAt([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;ILjava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.concurrent.ConcurrentHashMap$Segment: rehash(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;) ===> java.util.concurrent.ConcurrentHashMap$HashEntry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap$Segment: rehash(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;) ===> java.util.concurrent.ConcurrentHashMap$HashEntry: setNext(Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap$Segment: scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap$Segment: scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap$HashEntry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap$Segment: scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap$Segment: lock()
java.util.concurrent.ConcurrentHashMap$Segment: scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap$Segment: tryLock()
java.util.concurrent.ConcurrentHashMap$Segment: scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: entryForHash(Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap$Segment: scanAndLockForPut(Ljava/lang/Object;ILjava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.concurrent.ConcurrentHashMap$ValueIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;) ===> java.util.concurrent.ConcurrentHashMap$HashIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;)
java.util.concurrent.ConcurrentHashMap$ValueIterator: next() ===> java.util.concurrent.ConcurrentHashMap$HashIterator: nextEntry()
java.util.concurrent.ConcurrentHashMap$ValueIterator: nextElement() ===> java.util.concurrent.ConcurrentHashMap$HashIterator: nextEntry()
java.util.concurrent.ConcurrentHashMap$Values: <init>(Ljava/util/concurrent/ConcurrentHashMap;) ===> java.util.AbstractCollection: <init>()
java.util.concurrent.ConcurrentHashMap$Values: contains(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap$Values: isEmpty() ===> java.util.concurrent.ConcurrentHashMap: isEmpty()
java.util.concurrent.ConcurrentHashMap$Values: iterator() ===> java.util.concurrent.ConcurrentHashMap$ValueIterator: <init>(Ljava/util/concurrent/ConcurrentHashMap;)
java.util.concurrent.ConcurrentHashMap$Values: size() ===> java.util.concurrent.ConcurrentHashMap: size()
java.util.concurrent.ConcurrentHashMap$WriteThroughEntry: <init>(Ljava/util/concurrent/ConcurrentHashMap;Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.AbstractMap$SimpleEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap: <clinit>() ===> java.lang.Error: <init>(Ljava/lang/String;)
java.util.concurrent.ConcurrentHashMap: <clinit>() ===> java.lang.Error: <init>(Ljava/lang/Throwable;)
java.util.concurrent.ConcurrentHashMap: <clinit>() ===> java.lang.Integer: numberOfLeadingZeros(I)
java.util.concurrent.ConcurrentHashMap: <init>(I) ===> java.util.concurrent.ConcurrentHashMap: <init>(IFI)
java.util.concurrent.ConcurrentHashMap: <init>(IFI) ===> java.lang.IllegalArgumentException: <init>()
java.util.concurrent.ConcurrentHashMap: <init>(IFI) ===> java.util.AbstractMap: <init>()
java.util.concurrent.ConcurrentHashMap: <init>(IFI) ===> java.util.concurrent.ConcurrentHashMap$Segment: <init>(FI[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap: containsKey(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap: containsKey(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.concurrent.ConcurrentHashMap: containsKey(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: entryForHash(Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap: containsKey(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: hash(I)
java.util.concurrent.ConcurrentHashMap: containsKey(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: segmentForHash(I)
java.util.concurrent.ConcurrentHashMap: containsKey(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.concurrent.ConcurrentHashMap: containsKey(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap$Segment: lock()
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap$Segment: unlock()
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: ensureSegment(I)
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: entryAt([Ljava/util/concurrent/ConcurrentHashMap$HashEntry;I)
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: segmentAt([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap: containsValue(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.concurrent.ConcurrentHashMap: ensureSegment(I) ===> java.util.concurrent.ConcurrentHashMap$Segment: <init>(FI[Ljava/util/concurrent/ConcurrentHashMap$HashEntry;)
java.util.concurrent.ConcurrentHashMap: entrySet() ===> java.util.concurrent.ConcurrentHashMap$EntrySet: <init>(Ljava/util/concurrent/ConcurrentHashMap;)
java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: entryForHash(Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: hash(I)
java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: segmentForHash(I)
java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.concurrent.ConcurrentHashMap: isEmpty() ===> java.util.concurrent.ConcurrentHashMap: segmentAt([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z)
java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: ensureSegment(I)
java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: hash(I)
java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: segmentAt([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap$Segment: put(Ljava/lang/Object;ILjava/lang/Object;Z)
java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: ensureSegment(I)
java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: hash(I)
java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.concurrent.ConcurrentHashMap: segmentAt([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.concurrent.ConcurrentHashMap: size() ===> java.util.concurrent.ConcurrentHashMap$Segment: lock()
java.util.concurrent.ConcurrentHashMap: size() ===> java.util.concurrent.ConcurrentHashMap$Segment: unlock()
java.util.concurrent.ConcurrentHashMap: size() ===> java.util.concurrent.ConcurrentHashMap: ensureSegment(I)
java.util.concurrent.ConcurrentHashMap: size() ===> java.util.concurrent.ConcurrentHashMap: segmentAt([Ljava/util/concurrent/ConcurrentHashMap$Segment;I)
java.util.concurrent.ConcurrentHashMap: values() ===> java.util.concurrent.ConcurrentHashMap$Values: <init>(Ljava/util/concurrent/ConcurrentHashMap;)
java.util.concurrent.locks.AbstractOwnableSynchronizer: <init>() ===> java.lang.Object: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: <clinit>() ===> java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: <init>() ===> java.lang.Object: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: <init>(Ljava/lang/Thread;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.lang.Object: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: predecessor() ===> java.lang.NullPointerException: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer: <clinit>() ===> java.lang.Error: <init>(Ljava/lang/Throwable;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: <init>() ===> java.util.concurrent.locks.AbstractOwnableSynchronizer: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquire(I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I)
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquire(I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: addWaiter(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquire(I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: selfInterrupt()
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquire(I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: tryAcquire(I)
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: predecessor()
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: cancelAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: parkAndCheckInterrupt()
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: setHead(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: shouldParkAfterFailedAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: acquireQueued(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: tryAcquire(I)
java.util.concurrent.locks.AbstractQueuedSynchronizer: addWaiter(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.lang.Thread: currentThread()
java.util.concurrent.locks.AbstractQueuedSynchronizer: addWaiter(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: <init>(Ljava/lang/Thread;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: addWaiter(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetTail(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: addWaiter(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: enq(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: cancelAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetNext(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: cancelAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetTail(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: cancelAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetWaitStatus(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;II)
java.util.concurrent.locks.AbstractQueuedSynchronizer: cancelAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: unparkSuccessor(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: enq(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer: enq(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetHead(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: enq(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetTail(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: parkAndCheckInterrupt() ===> java.lang.Thread: interrupted()
java.util.concurrent.locks.AbstractQueuedSynchronizer: parkAndCheckInterrupt() ===> java.util.concurrent.locks.LockSupport: park(Ljava/lang/Object;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: release(I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: tryRelease(I)
java.util.concurrent.locks.AbstractQueuedSynchronizer: release(I) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: unparkSuccessor(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: selfInterrupt() ===> java.lang.Thread: currentThread()
java.util.concurrent.locks.AbstractQueuedSynchronizer: selfInterrupt() ===> java.lang.Thread: interrupt()
java.util.concurrent.locks.AbstractQueuedSynchronizer: shouldParkAfterFailedAcquire(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetWaitStatus(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;II)
java.util.concurrent.locks.AbstractQueuedSynchronizer: toString() ===> java.lang.Object: toString()
java.util.concurrent.locks.AbstractQueuedSynchronizer: toString() ===> java.lang.StringBuilder: <init>()
java.util.concurrent.locks.AbstractQueuedSynchronizer: toString() ===> java.lang.StringBuilder: append(I)
java.util.concurrent.locks.AbstractQueuedSynchronizer: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.concurrent.locks.AbstractQueuedSynchronizer: toString() ===> java.lang.StringBuilder: toString()
java.util.concurrent.locks.AbstractQueuedSynchronizer: toString() ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: getState()
java.util.concurrent.locks.AbstractQueuedSynchronizer: toString() ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: hasQueuedThreads()
java.util.concurrent.locks.AbstractQueuedSynchronizer: unparkSuccessor(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: compareAndSetWaitStatus(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;II)
java.util.concurrent.locks.AbstractQueuedSynchronizer: unparkSuccessor(Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;) ===> java.util.concurrent.locks.LockSupport: unpark(Ljava/lang/Thread;)
java.util.concurrent.locks.LockSupport: <clinit>() ===> java.lang.Error: <init>(Ljava/lang/Throwable;)
java.util.concurrent.locks.LockSupport: park(Ljava/lang/Object;) ===> java.lang.Thread: currentThread()
java.util.concurrent.locks.LockSupport: park(Ljava/lang/Object;) ===> java.util.concurrent.locks.LockSupport: setBlocker(Ljava/lang/Thread;Ljava/lang/Object;)
java.util.concurrent.locks.ReentrantLock$NonfairSync: <init>() ===> java.util.concurrent.locks.ReentrantLock$Sync: <init>()
java.util.concurrent.locks.ReentrantLock$NonfairSync: lock() ===> java.lang.Thread: currentThread()
java.util.concurrent.locks.ReentrantLock$NonfairSync: lock() ===> java.util.concurrent.locks.ReentrantLock$NonfairSync: acquire(I)
java.util.concurrent.locks.ReentrantLock$NonfairSync: lock() ===> java.util.concurrent.locks.ReentrantLock$NonfairSync: compareAndSetState(II)
java.util.concurrent.locks.ReentrantLock$NonfairSync: lock() ===> java.util.concurrent.locks.ReentrantLock$NonfairSync: setExclusiveOwnerThread(Ljava/lang/Thread;)
java.util.concurrent.locks.ReentrantLock$NonfairSync: tryAcquire(I) ===> java.util.concurrent.locks.ReentrantLock$NonfairSync: nonfairTryAcquire(I)
java.util.concurrent.locks.ReentrantLock$Sync: <init>() ===> java.util.concurrent.locks.AbstractQueuedSynchronizer: <init>()
java.util.concurrent.locks.ReentrantLock$Sync: getOwner() ===> java.util.concurrent.locks.ReentrantLock$Sync: getExclusiveOwnerThread()
java.util.concurrent.locks.ReentrantLock$Sync: getOwner() ===> java.util.concurrent.locks.ReentrantLock$Sync: getState()
java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I) ===> java.lang.Error: <init>(Ljava/lang/String;)
java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I) ===> java.lang.Thread: currentThread()
java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: compareAndSetState(II)
java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: getExclusiveOwnerThread()
java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: getState()
java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: setExclusiveOwnerThread(Ljava/lang/Thread;)
java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: setState(I)
java.util.concurrent.locks.ReentrantLock$Sync: tryRelease(I) ===> java.lang.IllegalMonitorStateException: <init>()
java.util.concurrent.locks.ReentrantLock$Sync: tryRelease(I) ===> java.lang.Thread: currentThread()
java.util.concurrent.locks.ReentrantLock$Sync: tryRelease(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: getExclusiveOwnerThread()
java.util.concurrent.locks.ReentrantLock$Sync: tryRelease(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: getState()
java.util.concurrent.locks.ReentrantLock$Sync: tryRelease(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: setExclusiveOwnerThread(Ljava/lang/Thread;)
java.util.concurrent.locks.ReentrantLock$Sync: tryRelease(I) ===> java.util.concurrent.locks.ReentrantLock$Sync: setState(I)
java.util.concurrent.locks.ReentrantLock: <init>() ===> java.lang.Object: <init>()
java.util.concurrent.locks.ReentrantLock: <init>() ===> java.util.concurrent.locks.ReentrantLock$NonfairSync: <init>()
java.util.concurrent.locks.ReentrantLock: lock() ===> java.util.concurrent.locks.ReentrantLock$Sync: lock()
java.util.concurrent.locks.ReentrantLock: toString() ===> java.lang.Object: toString()
java.util.concurrent.locks.ReentrantLock: toString() ===> java.lang.StringBuilder: <init>()
java.util.concurrent.locks.ReentrantLock: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.concurrent.locks.ReentrantLock: toString() ===> java.lang.StringBuilder: toString()
java.util.concurrent.locks.ReentrantLock: toString() ===> java.lang.Thread: getName()
java.util.concurrent.locks.ReentrantLock: toString() ===> java.util.concurrent.locks.ReentrantLock$Sync: getOwner()
java.util.concurrent.locks.ReentrantLock: tryLock() ===> java.util.concurrent.locks.ReentrantLock$Sync: nonfairTryAcquire(I)
java.util.concurrent.locks.ReentrantLock: unlock() ===> java.util.concurrent.locks.ReentrantLock$Sync: release(I)
java.util.ConcurrentModificationException: <init>() ===> java.lang.RuntimeException: <init>()
java.util.Currency$1: <init>() ===> java.lang.Object: <init>()
java.util.Currency$CurrencyNameGetter: <clinit>() ===> java.util.Currency$CurrencyNameGetter: <init>()
java.util.Currency$CurrencyNameGetter: <init>() ===> java.lang.Object: <init>()
java.util.Currency: <clinit>() ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedAction;)
java.util.Currency: <clinit>() ===> java.util.Currency$1: <init>()
java.util.Currency: <clinit>() ===> java.util.HashMap: <init>(I)
java.util.Currency: <init>(Ljava/lang/String;II) ===> java.lang.Object: <init>()
java.util.Currency: getInstance(Ljava/lang/String;) ===> java.util.Currency: getInstance(Ljava/lang/String;II)
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.lang.IllegalArgumentException: <init>()
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.lang.String: charAt(I)
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.lang.String: indexOf(Ljava/lang/String;)
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.lang.String: length()
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.util.Currency: <init>(Ljava/lang/String;II)
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.util.Currency: getMainTableEntry(CC)
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.util.HashMap: get(Ljava/lang/Object;)
java.util.Currency: getInstance(Ljava/lang/String;II) ===> java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.IllegalArgumentException: <init>()
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.NullPointerException: <init>()
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.String: charAt(I)
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.String: length()
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.StringBuffer: <init>(Ljava/lang/String;)
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.StringBuffer: append(C)
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.StringBuffer: toString()
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.lang.System: currentTimeMillis()
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.util.Currency: getInstance(Ljava/lang/String;II)
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.util.Currency: getMainTableEntry(CC)
java.util.Currency: getInstance(Ljava/util/Locale;) ===> java.util.Locale: getCountry()
java.util.Currency: getMainTableEntry(CC) ===> java.lang.IllegalArgumentException: <init>()
java.util.Currency: getSymbol(Ljava/util/Locale;) ===> java.lang.Integer: valueOf(I)
java.util.Currency: getSymbol(Ljava/util/Locale;) ===> java.util.Currency$CurrencyNameGetter: access$300()
java.util.Dictionary: <init>() ===> java.lang.Object: <init>()
java.util.DuplicateFormatFlagsException: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.util.DuplicateFormatFlagsException: <init>(Ljava/lang/String;) ===> java.util.IllegalFormatException: <init>()
java.util.DuplicateFormatFlagsException: getMessage() ===> java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;)
java.util.EmptyStackException: <init>() ===> java.lang.RuntimeException: <init>()
java.util.FormatFlagsConversionMismatchException: <init>(Ljava/lang/String;C) ===> java.lang.NullPointerException: <init>()
java.util.FormatFlagsConversionMismatchException: <init>(Ljava/lang/String;C) ===> java.util.IllegalFormatException: <init>()
java.util.FormatFlagsConversionMismatchException: getMessage() ===> java.lang.StringBuilder: <init>()
java.util.FormatFlagsConversionMismatchException: getMessage() ===> java.lang.StringBuilder: append(C)
java.util.FormatFlagsConversionMismatchException: getMessage() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.FormatFlagsConversionMismatchException: getMessage() ===> java.lang.StringBuilder: toString()
java.util.Formatter$BigDecimalLayoutForm: <clinit>() ===> java.util.Formatter$BigDecimalLayoutForm: <init>(Ljava/lang/String;I)
java.util.Formatter$BigDecimalLayoutForm: <init>(Ljava/lang/String;I) ===> java.lang.Enum: <init>(Ljava/lang/String;I)
java.util.Formatter$Conversion: isValid(C) ===> java.util.Formatter$Conversion: isCharacter(C)
java.util.Formatter$Conversion: isValid(C) ===> java.util.Formatter$Conversion: isFloat(C)
java.util.Formatter$Conversion: isValid(C) ===> java.util.Formatter$Conversion: isGeneral(C)
java.util.Formatter$Conversion: isValid(C) ===> java.util.Formatter$Conversion: isInteger(C)
java.util.Formatter$Conversion: isValid(C) ===> java.util.Formatter$Conversion: isText(C)
java.util.Formatter$FixedString: <init>(Ljava/util/Formatter;Ljava/lang/String;) ===> java.lang.Object: <init>()
java.util.Formatter$FixedString: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FixedString: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$Flags: <clinit>() ===> java.util.Formatter$Flags: <init>(I)
java.util.Formatter$Flags: <init>(I) ===> java.lang.Object: <init>()
java.util.Formatter$Flags: access$100(Ljava/util/Formatter$Flags;Ljava/util/Formatter$Flags;) ===> java.util.Formatter$Flags: add(Ljava/util/Formatter$Flags;)
java.util.Formatter$Flags: add(Ljava/util/Formatter$Flags;) ===> java.util.Formatter$Flags: valueOf()
java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;) ===> java.util.Formatter$Flags: valueOf()
java.util.Formatter$Flags: dup() ===> java.util.Formatter$Flags: <init>(I)
java.util.Formatter$Flags: parse(C) ===> java.lang.String: valueOf(C)
java.util.Formatter$Flags: parse(C) ===> java.util.UnknownFormatFlagsException: <init>(Ljava/lang/String;)
java.util.Formatter$Flags: parse(Ljava/lang/String;) ===> java.lang.String: toCharArray()
java.util.Formatter$Flags: parse(Ljava/lang/String;) ===> java.util.DuplicateFormatFlagsException: <init>(Ljava/lang/String;)
java.util.Formatter$Flags: parse(Ljava/lang/String;) ===> java.util.Formatter$Flags: <init>(I)
java.util.Formatter$Flags: parse(Ljava/lang/String;) ===> java.util.Formatter$Flags: add(Ljava/util/Formatter$Flags;)
java.util.Formatter$Flags: parse(Ljava/lang/String;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$Flags: parse(Ljava/lang/String;) ===> java.util.Formatter$Flags: parse(C)
java.util.Formatter$Flags: parse(Ljava/lang/String;) ===> java.util.Formatter$Flags: toString()
java.util.Formatter$Flags: remove(Ljava/util/Formatter$Flags;) ===> java.util.Formatter$Flags: valueOf()
java.util.Formatter$Flags: toString() ===> java.lang.StringBuilder: <init>()
java.util.Formatter$Flags: toString() ===> java.lang.StringBuilder: append(C)
java.util.Formatter$Flags: toString() ===> java.lang.StringBuilder: toString()
java.util.Formatter$Flags: toString() ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: <init>(Ljava/util/Formatter$FormatSpecifier;Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.Object: <init>()
java.util.Formatter$FormatSpecifier$BigDecimalLayout: <init>(Ljava/util/Formatter$FormatSpecifier;Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: exponent() ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: toCharArray(Ljava/lang/StringBuilder;)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.Math: abs(J)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.String: toCharArray()
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: <init>(I)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: append([C)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: append([CII)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: append(I)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: append(J)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: layout(Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;) ===> java.math.BigInteger: toString()
java.util.Formatter$FormatSpecifier$BigDecimalLayout: mantissa() ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: toCharArray(Ljava/lang/StringBuilder;)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: toCharArray(Ljava/lang/StringBuilder;) ===> java.lang.StringBuilder: getChars(II[CI)
java.util.Formatter$FormatSpecifier$BigDecimalLayout: toCharArray(Ljava/lang/StringBuilder;) ===> java.lang.StringBuilder: length()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.lang.Object: <init>()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.lang.String: valueOf(C)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$Conversion: isCharacter(C)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$Conversion: isFloat(C)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$Conversion: isGeneral(C)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$Conversion: isInteger(C)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$Conversion: isText(C)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$Flags: access$100(Ljava/util/Formatter$Flags;Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: checkCharacter()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: checkDateTime()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: checkFloat()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: checkGeneral()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: checkInteger()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: checkText()
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: flags(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: index(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: precision(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: width(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;) ===> java.util.UnknownFormatConversionException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: addDot([C) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Formatter$FormatSpecifier: addZeros([CI) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: addZeros([CI) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Formatter$FormatSpecifier: adjustWidth(ILjava/util/Formatter$Flags;Z) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;) ===> java.util.Formatter$FormatSpecifier: failMismatch(Ljava/util/Formatter$Flags;C)
java.util.Formatter$FormatSpecifier: checkCharacter() ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkCharacter() ===> java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkCharacter() ===> java.util.Formatter$FormatSpecifier: toString()
java.util.Formatter$FormatSpecifier: checkCharacter() ===> java.util.IllegalFormatPrecisionException: <init>(I)
java.util.Formatter$FormatSpecifier: checkCharacter() ===> java.util.MissingFormatWidthException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.util.Formatter$DateTime: isValid(C)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.util.Formatter$FormatSpecifier: toString()
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.util.IllegalFormatPrecisionException: <init>(I)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.util.MissingFormatWidthException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkDateTime() ===> java.util.UnknownFormatConversionException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkFloat() ===> java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkFloat() ===> java.util.Formatter$FormatSpecifier: checkNumeric()
java.util.Formatter$FormatSpecifier: checkGeneral() ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkGeneral() ===> java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkGeneral() ===> java.util.Formatter$FormatSpecifier: failMismatch(Ljava/util/Formatter$Flags;C)
java.util.Formatter$FormatSpecifier: checkGeneral() ===> java.util.Formatter$FormatSpecifier: toString()
java.util.Formatter$FormatSpecifier: checkGeneral() ===> java.util.MissingFormatWidthException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkInteger() ===> java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkInteger() ===> java.util.Formatter$FormatSpecifier: checkNumeric()
java.util.Formatter$FormatSpecifier: checkInteger() ===> java.util.IllegalFormatPrecisionException: <init>(I)
java.util.Formatter$FormatSpecifier: checkNumeric() ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkNumeric() ===> java.util.Formatter$Flags: toString()
java.util.Formatter$FormatSpecifier: checkNumeric() ===> java.util.Formatter$FormatSpecifier: toString()
java.util.Formatter$FormatSpecifier: checkNumeric() ===> java.util.IllegalFormatFlagsException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkNumeric() ===> java.util.IllegalFormatPrecisionException: <init>(I)
java.util.Formatter$FormatSpecifier: checkNumeric() ===> java.util.IllegalFormatWidthException: <init>(I)
java.util.Formatter$FormatSpecifier: checkNumeric() ===> java.util.MissingFormatWidthException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkText() ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.Formatter$Flags: toString()
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.Formatter$Flags: valueOf()
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.Formatter$FormatSpecifier: toString()
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.IllegalFormatFlagsException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.IllegalFormatPrecisionException: <init>(I)
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.IllegalFormatWidthException: <init>(I)
java.util.Formatter$FormatSpecifier: checkText() ===> java.util.MissingFormatWidthException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.lang.Character: isUpperCase(C)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.lang.Character: toLowerCase(C)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.lang.String: valueOf(C)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.util.Formatter$Conversion: isText(C)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.util.Formatter$Conversion: isValid(C)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.util.Formatter$Flags: access$100(Ljava/util/Formatter$Flags;Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: conversion(Ljava/lang/String;) ===> java.util.UnknownFormatConversionException: <init>(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: exponent([CI) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Formatter$FormatSpecifier: failConversion(CLjava/lang/Object;) ===> java.lang.Object: getClass()
java.util.Formatter$FormatSpecifier: failConversion(CLjava/lang/Object;) ===> java.util.IllegalFormatConversionException: <init>(CLjava/lang/Class;)
java.util.Formatter$FormatSpecifier: failMismatch(Ljava/util/Formatter$Flags;C) ===> java.util.FormatFlagsConversionMismatchException: <init>(Ljava/lang/String;C)
java.util.Formatter$FormatSpecifier: failMismatch(Ljava/util/Formatter$Flags;C) ===> java.util.Formatter$Flags: toString()
java.util.Formatter$FormatSpecifier: flags(Ljava/lang/String;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: flags(Ljava/lang/String;) ===> java.util.Formatter$Flags: parse(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: getZero(Ljava/util/Locale;) ===> java.text.DecimalFormatSymbols: getInstance(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: getZero(Ljava/util/Locale;) ===> java.text.DecimalFormatSymbols: getZeroDigit()
java.util.Formatter$FormatSpecifier: getZero(Ljava/util/Locale;) ===> java.util.Formatter: access$300(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: getZero(Ljava/util/Locale;) ===> java.util.Formatter: locale()
java.util.Formatter$FormatSpecifier: getZero(Ljava/util/Locale;) ===> java.util.Locale: equals(Ljava/lang/Object;)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.AssertionError: <init>(I)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.Double: doubleToLongBits(D)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.Double: isInfinite(D)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.Double: longBitsToDouble(J)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.Double: toHexString(D)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.Integer: parseInt(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.Integer: toString(I)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.String: indexOf(I)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.String: substring(I)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.String: substring(II)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.util.Formatter: access$200()
java.util.Formatter$FormatSpecifier: hexDouble(DI) ===> java.util.Formatter: access$202(D)
java.util.Formatter$FormatSpecifier: index(Ljava/lang/String;) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: index(Ljava/lang/String;) ===> java.lang.Integer: parseInt(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: index(Ljava/lang/String;) ===> java.lang.String: length()
java.util.Formatter$FormatSpecifier: index(Ljava/lang/String;) ===> java.lang.String: substring(II)
java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;) ===> java.lang.String: length()
java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: leadingSign(Ljava/lang/StringBuilder;Z) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: leadingSign(Ljava/lang/StringBuilder;Z) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.lang.StringBuilder: insert(IC)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.lang.StringBuilder: length()
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.text.DecimalFormat: getGroupingSize()
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.text.DecimalFormatSymbols: getDecimalSeparator()
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.text.DecimalFormatSymbols: getGroupingSeparator()
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.text.DecimalFormatSymbols: getInstance(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.text.NumberFormat: getIntegerInstance(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: getZero(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.util.Locale: equals(Ljava/lang/Object;)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;JLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.lang.Long: toString(JI)
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;JLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.lang.String: toCharArray()
java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;JLjava/util/Formatter$Flags;ILjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;)
java.util.Formatter$FormatSpecifier: mantissa([CI) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Formatter$FormatSpecifier: precision(Ljava/lang/String;) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: precision(Ljava/lang/String;) ===> java.lang.Integer: parseInt(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: precision(Ljava/lang/String;) ===> java.lang.String: substring(I)
java.util.Formatter$FormatSpecifier: precision(Ljava/lang/String;) ===> java.util.IllegalFormatPrecisionException: <init>(I)
java.util.Formatter$FormatSpecifier: print(BLjava/util/Locale;) ===> java.lang.AssertionError: <init>(J)
java.util.Formatter$FormatSpecifier: print(BLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.Double: compare(DD)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.Double: isInfinite(D)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.Double: isNaN(D)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.Math: abs(D)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: leadingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: trailingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: print(FLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(ILjava/util/Locale;) ===> java.lang.AssertionError: <init>(J)
java.util.Formatter$FormatSpecifier: print(ILjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.Long: toHexString(J)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.Long: toOctalString(J)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.Long: toString(JI)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.String: length()
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.String: substring(I)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.String: toCharArray()
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.String: toUpperCase()
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: adjustWidth(ILjava/util/Formatter$Flags;Z)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: checkBadFlags([Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: leadingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: trailingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Appendable: append(C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.System: getProperty(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: printBoolean(Ljava/lang/Object;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: printHashCode(Ljava/lang/Object;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;) ===> java.lang.String: length()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;) ===> java.lang.String: substring(II)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;) ===> java.lang.String: toUpperCase()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.Math: abs(I)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: <init>([C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: indexOf(I)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: length()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: substring(I)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: substring(II)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: toCharArray()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: toUpperCase(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.StringBuilder: append([C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.StringBuilder: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$Flags: dup()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$Flags: remove(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: addDot([C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: addZeros([CI)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: adjustWidth(ILjava/util/Formatter$Flags;Z)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: exponent([CI)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: hexDouble(DI)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;DLjava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: mantissa([CI)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.String: length()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.StringBuilder: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigDecimal: <init>(Ljava/math/BigInteger;ILjava/math/MathContext;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigDecimal: compareTo(Ljava/math/BigDecimal;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigDecimal: equals(Ljava/lang/Object;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigDecimal: precision()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigDecimal: scale()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigDecimal: unscaledValue()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigDecimal: valueOf(JI)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.BigInteger: toString()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.math.MathContext: <init>(I)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$Flags: dup()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$Flags: remove(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: <init>(Ljava/util/Formatter$FormatSpecifier;Ljava/math/BigInteger;ILjava/util/Formatter$BigDecimalLayoutForm;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: exponent()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: hasDot()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: mantissa()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier$BigDecimalLayout: scale()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: addDot([C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: adjustWidth(ILjava/util/Formatter$Flags;Z)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ) ===> java.util.Formatter$FormatSpecifier: trailingZeros([CI)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.Appendable: append(C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.String: toLowerCase(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.String: toUpperCase(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.StringBuilder: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.text.DateFormatSymbols: getAmPmStrings()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.text.DateFormatSymbols: getInstance(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.text.DateFormatSymbols: getMonths()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.text.DateFormatSymbols: getShortMonths()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.text.DateFormatSymbols: getShortWeekdays()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.text.DateFormatSymbols: getWeekdays()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Calendar: get(I)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Calendar: getTimeInMillis()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Calendar: getTimeZone()
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;JLjava/util/Formatter$Flags;ILjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.math.BigDecimal: abs()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.math.BigDecimal: signum()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: failConversion(CLjava/lang/Object;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: leadingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/math/BigDecimal;Ljava/util/Locale;Ljava/util/Formatter$Flags;CIZ)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: trailingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.String: length()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.String: toCharArray()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.String: toUpperCase()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.StringBuilder: length()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.math.BigInteger: abs()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.math.BigInteger: signum()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.math.BigInteger: toString()
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.math.BigInteger: toString(I)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: adjustWidth(ILjava/util/Formatter$Flags;Z)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: leadingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: localizedMagnitude(Ljava/lang/StringBuilder;[CLjava/util/Formatter$Flags;ILjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: trailingSign(Ljava/lang/StringBuilder;Z)
java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.Appendable: append(Ljava/lang/CharSequence;)
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.String: toUpperCase()
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: justify(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/StringBuilder;Ljava/util/Calendar;CLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;) ===> java.util.Formatter: access$000(Ljava/util/Formatter;)
java.util.Formatter$FormatSpecifier: print(SLjava/util/Locale;) ===> java.lang.AssertionError: <init>(J)
java.util.Formatter$FormatSpecifier: print(SLjava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printBoolean(Ljava/lang/Object;) ===> java.lang.Boolean: toString()
java.util.Formatter$FormatSpecifier: printBoolean(Ljava/lang/Object;) ===> java.lang.Boolean: toString(Z)
java.util.Formatter$FormatSpecifier: printBoolean(Ljava/lang/Object;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.lang.Byte: byteValue()
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.lang.Character: isValidCodePoint(I)
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.lang.Character: toChars(I)
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.lang.Character: toString()
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.lang.Integer: intValue()
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.lang.Short: shortValue()
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.lang.String: <init>([C)
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.util.Formatter$FormatSpecifier: failConversion(CLjava/lang/Object;)
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: printCharacter(Ljava/lang/Object;) ===> java.util.IllegalFormatCodePointException: <init>(I)
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Long: longValue()
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Calendar: clone()
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Calendar: getInstance(Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Calendar: setLenient(Z)
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Calendar: setTime(Ljava/util/Date;)
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Calendar: setTimeInMillis(J)
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: failConversion(CLjava/lang/Object;)
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: printDateTime(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/util/Calendar;CLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Double: doubleValue()
java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Float: floatValue()
java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: failConversion(CLjava/lang/Object;)
java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(DLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(FLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: printFloat(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/math/BigDecimal;Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: printHashCode(Ljava/lang/Object;) ===> java.lang.Integer: toHexString(I)
java.util.Formatter$FormatSpecifier: printHashCode(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.Formatter$FormatSpecifier: printHashCode(Ljava/lang/Object;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: printHashCode(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Byte: byteValue()
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Integer: intValue()
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Long: longValue()
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Short: shortValue()
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: failConversion(CLjava/lang/Object;)
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(BLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(ILjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(JLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/math/BigInteger;Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: printInteger(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(SLjava/util/Locale;)
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> java.lang.Object: toString()
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$Flags: valueOf()
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter$FormatSpecifier: print(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter: <init>(Ljava/lang/Appendable;Ljava/util/Locale;)
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter: locale()
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> java.util.Formatter: out()
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> org.clapper.argot.CommandLineOption: toString()
java.util.Formatter$FormatSpecifier: printString(Ljava/lang/Object;Ljava/util/Locale;) ===> org.clapper.argot.Parameter: toString()
java.util.Formatter$FormatSpecifier: toString() ===> java.lang.Character: toUpperCase(C)
java.util.Formatter$FormatSpecifier: toString() ===> java.lang.StringBuilder: <init>(I)
java.util.Formatter$FormatSpecifier: toString() ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: toString() ===> java.lang.StringBuilder: append(I)
java.util.Formatter$FormatSpecifier: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: toString() ===> java.lang.StringBuilder: toString()
java.util.Formatter$FormatSpecifier: toString() ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: toString() ===> java.util.Formatter$Flags: dup()
java.util.Formatter$FormatSpecifier: toString() ===> java.util.Formatter$Flags: remove(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: toString() ===> java.util.Formatter$Flags: toString()
java.util.Formatter$FormatSpecifier: trailingSign(Ljava/lang/StringBuilder;Z) ===> java.lang.StringBuilder: append(C)
java.util.Formatter$FormatSpecifier: trailingSign(Ljava/lang/StringBuilder;Z) ===> java.util.Formatter$Flags: contains(Ljava/util/Formatter$Flags;)
java.util.Formatter$FormatSpecifier: trailingZeros([CI) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Formatter$FormatSpecifier: width(Ljava/lang/String;) ===> java.lang.AssertionError: <init>()
java.util.Formatter$FormatSpecifier: width(Ljava/lang/String;) ===> java.lang.Integer: parseInt(Ljava/lang/String;)
java.util.Formatter$FormatSpecifier: width(Ljava/lang/String;) ===> java.util.IllegalFormatWidthException: <init>(I)
java.util.Formatter: <clinit>() ===> java.util.regex.Pattern: compile(Ljava/lang/String;)
java.util.Formatter: <init>() ===> java.lang.Object: <init>()
java.util.Formatter: <init>() ===> java.lang.StringBuilder: <init>()
java.util.Formatter: <init>() ===> java.util.Formatter: init(Ljava/lang/Appendable;Ljava/util/Locale;)
java.util.Formatter: <init>() ===> java.util.Locale: getDefault()
java.util.Formatter: <init>(Ljava/lang/Appendable;Ljava/util/Locale;) ===> java.lang.Object: <init>()
java.util.Formatter: <init>(Ljava/lang/Appendable;Ljava/util/Locale;) ===> java.lang.StringBuilder: <init>()
java.util.Formatter: <init>(Ljava/lang/Appendable;Ljava/util/Locale;) ===> java.util.Formatter: init(Ljava/lang/Appendable;Ljava/util/Locale;)
java.util.Formatter: checkText(Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.util.Formatter: checkText(Ljava/lang/String;) ===> java.lang.String: indexOf(I)
java.util.Formatter: checkText(Ljava/lang/String;) ===> java.lang.String: length()
java.util.Formatter: checkText(Ljava/lang/String;) ===> java.lang.String: valueOf(C)
java.util.Formatter: checkText(Ljava/lang/String;) ===> java.util.UnknownFormatConversionException: <init>(Ljava/lang/String;)
java.util.Formatter: ensureOpen() ===> java.util.FormatterClosedException: <init>()
java.util.Formatter: format(Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> java.lang.Object: toString()
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter$FormatString: index()
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter$FormatString: print(Ljava/lang/Object;Ljava/util/Locale;)
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter: ensureOpen()
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.Formatter: parse(Ljava/lang/String;)
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> java.util.MissingFormatArgumentException: <init>(Ljava/lang/String;)
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> org.clapper.argot.CommandLineOption: toString()
java.util.Formatter: format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;) ===> org.clapper.argot.Parameter: toString()
java.util.Formatter: init(Ljava/lang/Appendable;Ljava/util/Locale;) ===> java.util.Formatter: setZero()
java.util.Formatter: locale() ===> java.util.Formatter: ensureOpen()
java.util.Formatter: out() ===> java.util.Formatter: ensureOpen()
java.util.Formatter: parse(Ljava/lang/String;) ===> java.lang.String: length()
java.util.Formatter: parse(Ljava/lang/String;) ===> java.lang.String: substring(I)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.lang.String: substring(II)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.ArrayList: <init>()
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.ArrayList: add(Ljava/lang/Object;)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.ArrayList: toArray([Ljava/lang/Object;)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.Formatter$FixedString: <init>(Ljava/util/Formatter;Ljava/lang/String;)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.Formatter$FormatSpecifier: <init>(Ljava/util/Formatter;Ljava/util/Formatter;[Ljava/lang/String;)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.Formatter: checkText(Ljava/lang/String;)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.regex.Matcher: end()
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.regex.Matcher: find(I)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.regex.Matcher: group(I)
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.regex.Matcher: groupCount()
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.regex.Matcher: start()
java.util.Formatter: parse(Ljava/lang/String;) ===> java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;)
java.util.Formatter: setZero() ===> java.text.DecimalFormatSymbols: getInstance(Ljava/util/Locale;)
java.util.Formatter: setZero() ===> java.text.DecimalFormatSymbols: getZeroDigit()
java.util.Formatter: setZero() ===> java.util.Locale: equals(Ljava/lang/Object;)
java.util.Formatter: toString() ===> java.lang.Object: toString()
java.util.Formatter: toString() ===> java.util.Formatter: ensureOpen()
java.util.Formatter: toString() ===> org.clapper.argot.CommandLineOption: toString()
java.util.Formatter: toString() ===> org.clapper.argot.Parameter: toString()
java.util.FormatterClosedException: <init>() ===> java.lang.IllegalStateException: <init>()
java.util.GregorianCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.lang.System: currentTimeMillis()
java.util.GregorianCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.Calendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;)
java.util.GregorianCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.GregorianCalendar: setTimeInMillis(J)
java.util.GregorianCalendar: actualMonthLength() ===> java.util.GregorianCalendar: getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J)
java.util.GregorianCalendar: add(II) ===> java.lang.IllegalArgumentException: <init>()
java.util.GregorianCalendar: add(II) ===> java.util.GregorianCalendar: complete()
java.util.GregorianCalendar: add(II) ===> java.util.GregorianCalendar: getCurrentFixedDate()
java.util.GregorianCalendar: add(II) ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: add(II) ===> java.util.GregorianCalendar: internalGetEra()
java.util.GregorianCalendar: add(II) ===> java.util.GregorianCalendar: pinDayOfMonth()
java.util.GregorianCalendar: add(II) ===> java.util.GregorianCalendar: set(II)
java.util.GregorianCalendar: add(II) ===> java.util.GregorianCalendar: setTimeInMillis(J)
java.util.GregorianCalendar: clone() ===> java.util.Calendar: clone()
java.util.GregorianCalendar: computeFields() ===> java.lang.AssertionError: <init>()
java.util.GregorianCalendar: computeFields() ===> java.util.GregorianCalendar: computeFields(II)
java.util.GregorianCalendar: computeFields() ===> java.util.GregorianCalendar: getSetStateFields()
java.util.GregorianCalendar: computeFields() ===> java.util.GregorianCalendar: isPartiallyNormalized()
java.util.GregorianCalendar: computeFields() ===> java.util.GregorianCalendar: setFieldsComputed(I)
java.util.GregorianCalendar: computeFields(II) ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
java.util.GregorianCalendar: computeFields(II) ===> java.lang.StringBuilder: <init>()
java.util.GregorianCalendar: computeFields(II) ===> java.lang.StringBuilder: append(I)
java.util.GregorianCalendar: computeFields(II) ===> java.lang.StringBuilder: append(J)
java.util.GregorianCalendar: computeFields(II) ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.util.GregorianCalendar: computeFields(II) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.GregorianCalendar: computeFields(II) ===> java.lang.StringBuilder: toString()
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getCutoverCalendarSystem()
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getFirstDayOfWeek()
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getFixedDateJan1(Lsun/util/calendar/BaseCalendar$Date;J)
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J)
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getJulianCalendarSystem()
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getMinimalDaysInFirstWeek()
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getWeekNumber(JJ)
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: getZone()
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: internalSet(II)
java.util.GregorianCalendar: computeFields(II) ===> java.util.GregorianCalendar: isFieldSet(II)
java.util.GregorianCalendar: computeTime() ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.GregorianCalendar: computeTime() ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: computeFields(II)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: getFieldName(I)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: getFixedDate(Lsun/util/calendar/BaseCalendar;II)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: getJulianCalendarSystem()
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: getMaximum(I)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: getMinimum(I)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: getSetStateFields()
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: getZone()
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: internalGetEra()
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: isExternallySet(I)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: isFieldSet(II)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: isLenient()
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: isSet(I)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: selectFields()
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: setFieldsComputed(I)
java.util.GregorianCalendar: computeTime() ===> java.util.GregorianCalendar: setFieldsNormalized(I)
java.util.GregorianCalendar: equals(Ljava/lang/Object;) ===> java.util.Calendar: equals(Ljava/lang/Object;)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.lang.ArrayIndexOutOfBoundsException: <init>(I)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.lang.AssertionError: <init>()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: actualMonthLength()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: add(II)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: clone()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: get(I)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getActualMaximum(I)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getActualMinimum(I)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getCalendarDate(J)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getCurrentFixedDate()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getCutoverCalendarSystem()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getFirstDayOfWeek()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getJulianCalendarSystem()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getMaximum(I)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getMinimalDaysInFirstWeek()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getNormalizedCalendar()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getTimeInMillis()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getYearOffsetInMillis()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: getZone()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: internalGetEra()
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: isCutoverYear(I)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: set(II)
java.util.GregorianCalendar: getActualMaximum(I) ===> java.util.GregorianCalendar: setTimeInMillis(J)
java.util.GregorianCalendar: getActualMinimum(I) ===> java.util.GregorianCalendar: getCalendarDate(J)
java.util.GregorianCalendar: getActualMinimum(I) ===> java.util.GregorianCalendar: getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J)
java.util.GregorianCalendar: getActualMinimum(I) ===> java.util.GregorianCalendar: getMinimum(I)
java.util.GregorianCalendar: getActualMinimum(I) ===> java.util.GregorianCalendar: getNormalizedCalendar()
java.util.GregorianCalendar: getCalendarDate(J) ===> java.util.GregorianCalendar: getJulianCalendarSystem()
java.util.GregorianCalendar: getCutoverCalendarSystem() ===> java.util.GregorianCalendar: getGregorianCutoverDate()
java.util.GregorianCalendar: getCutoverCalendarSystem() ===> java.util.GregorianCalendar: getJulianCalendarSystem()
java.util.GregorianCalendar: getFixedDate(Lsun/util/calendar/BaseCalendar;II) ===> java.util.GregorianCalendar: getFirstDayOfWeek()
java.util.GregorianCalendar: getFixedDate(Lsun/util/calendar/BaseCalendar;II) ===> java.util.GregorianCalendar: getMinimalDaysInFirstWeek()
java.util.GregorianCalendar: getFixedDate(Lsun/util/calendar/BaseCalendar;II) ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: getFixedDate(Lsun/util/calendar/BaseCalendar;II) ===> java.util.GregorianCalendar: isFieldSet(II)
java.util.GregorianCalendar: getFixedDate(Lsun/util/calendar/BaseCalendar;II) ===> java.util.GregorianCalendar: isSet(I)
java.util.GregorianCalendar: getFixedDate(Lsun/util/calendar/BaseCalendar;II) ===> java.util.GregorianCalendar: monthLength(II)
java.util.GregorianCalendar: getFixedDateJan1(Lsun/util/calendar/BaseCalendar$Date;J) ===> java.lang.AssertionError: <init>()
java.util.GregorianCalendar: getFixedDateJan1(Lsun/util/calendar/BaseCalendar$Date;J) ===> java.util.GregorianCalendar: getJulianCalendarSystem()
java.util.GregorianCalendar: getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J) ===> java.lang.AssertionError: <init>()
java.util.GregorianCalendar: getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J) ===> java.util.GregorianCalendar: getGregorianCutoverDate()
java.util.GregorianCalendar: getFixedDateMonth1(Lsun/util/calendar/BaseCalendar$Date;J) ===> java.util.GregorianCalendar: getLastJulianDate()
java.util.GregorianCalendar: getGregorianCutoverDate() ===> java.util.GregorianCalendar: getCalendarDate(J)
java.util.GregorianCalendar: getLastJulianDate() ===> java.util.GregorianCalendar: getCalendarDate(J)
java.util.GregorianCalendar: getMaximum(I) ===> java.lang.Math: max(II)
java.util.GregorianCalendar: getMaximum(I) ===> java.util.GregorianCalendar: clone()
java.util.GregorianCalendar: getMaximum(I) ===> java.util.GregorianCalendar: getActualMaximum(I)
java.util.GregorianCalendar: getMaximum(I) ===> java.util.GregorianCalendar: setLenient(Z)
java.util.GregorianCalendar: getMaximum(I) ===> java.util.GregorianCalendar: setTimeInMillis(J)
java.util.GregorianCalendar: getNormalizedCalendar() ===> java.util.GregorianCalendar: clone()
java.util.GregorianCalendar: getNormalizedCalendar() ===> java.util.GregorianCalendar: complete()
java.util.GregorianCalendar: getNormalizedCalendar() ===> java.util.GregorianCalendar: isFullyNormalized()
java.util.GregorianCalendar: getNormalizedCalendar() ===> java.util.GregorianCalendar: setLenient(Z)
java.util.GregorianCalendar: getTimeZone() ===> java.util.Calendar: getTimeZone()
java.util.GregorianCalendar: getWeekNumber(JJ) ===> java.lang.AssertionError: <init>()
java.util.GregorianCalendar: getWeekNumber(JJ) ===> java.util.GregorianCalendar: getFirstDayOfWeek()
java.util.GregorianCalendar: getWeekNumber(JJ) ===> java.util.GregorianCalendar: getMinimalDaysInFirstWeek()
java.util.GregorianCalendar: getYearOffsetInMillis() ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: hashCode() ===> java.util.Calendar: hashCode()
java.util.GregorianCalendar: internalGetEra() ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: internalGetEra() ===> java.util.GregorianCalendar: isSet(I)
java.util.GregorianCalendar: isLeapYear(I) ===> java.util.GregorianCalendar: getCalendarDate(J)
java.util.GregorianCalendar: monthLength(I) ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: monthLength(I) ===> java.util.GregorianCalendar: internalGetEra()
java.util.GregorianCalendar: monthLength(I) ===> java.util.GregorianCalendar: monthLength(II)
java.util.GregorianCalendar: monthLength(II) ===> java.util.GregorianCalendar: isLeapYear(I)
java.util.GregorianCalendar: pinDayOfMonth() ===> java.util.GregorianCalendar: getActualMaximum(I)
java.util.GregorianCalendar: pinDayOfMonth() ===> java.util.GregorianCalendar: getNormalizedCalendar()
java.util.GregorianCalendar: pinDayOfMonth() ===> java.util.GregorianCalendar: internalGet(I)
java.util.GregorianCalendar: pinDayOfMonth() ===> java.util.GregorianCalendar: monthLength(I)
java.util.GregorianCalendar: pinDayOfMonth() ===> java.util.GregorianCalendar: set(II)
java.util.HashMap$Entry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;) ===> java.lang.Object: <init>()
java.util.HashMap$Entry: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.HashMap$Entry: equals(Ljava/lang/Object;) ===> java.util.HashMap$Entry: getKey()
java.util.HashMap$Entry: equals(Ljava/lang/Object;) ===> java.util.HashMap$Entry: getValue()
java.util.HashMap$Entry: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.HashMap$Entry: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getValue()
java.util.HashMap$Entry: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.HashMap$Entry: hashCode() ===> java.lang.Object: hashCode()
java.util.HashMap$Entry: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.HashMap$Entry: toString() ===> java.lang.StringBuilder: <init>()
java.util.HashMap$Entry: toString() ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.util.HashMap$Entry: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.HashMap$Entry: toString() ===> java.lang.StringBuilder: toString()
java.util.HashMap$Entry: toString() ===> java.util.HashMap$Entry: getKey()
java.util.HashMap$Entry: toString() ===> java.util.HashMap$Entry: getValue()
java.util.HashMap$EntryIterator: <init>(Ljava/util/HashMap;) ===> java.util.HashMap$HashIterator: <init>(Ljava/util/HashMap;)
java.util.HashMap$EntryIterator: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;) ===> java.util.HashMap$EntryIterator: <init>(Ljava/util/HashMap;)
java.util.HashMap$EntryIterator: next() ===> java.util.HashMap$EntryIterator: next()
java.util.HashMap$EntryIterator: next() ===> java.util.HashMap$EntryIterator: nextEntry()
java.util.HashMap$EntrySet: <init>(Ljava/util/HashMap;) ===> java.util.AbstractSet: <init>()
java.util.HashMap$EntrySet: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;) ===> java.util.HashMap$EntrySet: <init>(Ljava/util/HashMap;)
java.util.HashMap$EntrySet: contains(Ljava/lang/Object;) ===> java.util.HashMap$Entry: equals(Ljava/lang/Object;)
java.util.HashMap$EntrySet: contains(Ljava/lang/Object;) ===> java.util.HashMap: getEntry(Ljava/lang/Object;)
java.util.HashMap$EntrySet: contains(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.HashMap$EntrySet: iterator() ===> java.util.HashMap: newEntryIterator()
java.util.HashMap$HashIterator: <init>(Ljava/util/HashMap;) ===> java.lang.Object: <init>()
java.util.HashMap$HashIterator: nextEntry() ===> java.util.ConcurrentModificationException: <init>()
java.util.HashMap$HashIterator: nextEntry() ===> java.util.NoSuchElementException: <init>()
java.util.HashMap$KeyIterator: <init>(Ljava/util/HashMap;) ===> java.util.HashMap$HashIterator: <init>(Ljava/util/HashMap;)
java.util.HashMap$KeyIterator: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;) ===> java.util.HashMap$KeyIterator: <init>(Ljava/util/HashMap;)
java.util.HashMap$KeyIterator: next() ===> java.util.HashMap$Entry: getKey()
java.util.HashMap$KeyIterator: next() ===> java.util.HashMap$KeyIterator: nextEntry()
java.util.HashMap$KeySet: <init>(Ljava/util/HashMap;) ===> java.util.AbstractSet: <init>()
java.util.HashMap$KeySet: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;) ===> java.util.HashMap$KeySet: <init>(Ljava/util/HashMap;)
java.util.HashMap$KeySet: contains(Ljava/lang/Object;) ===> java.util.HashMap: containsKey(Ljava/lang/Object;)
java.util.HashMap$KeySet: iterator() ===> java.util.HashMap: newKeyIterator()
java.util.HashMap$ValueIterator: <init>(Ljava/util/HashMap;) ===> java.util.HashMap$HashIterator: <init>(Ljava/util/HashMap;)
java.util.HashMap$ValueIterator: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;) ===> java.util.HashMap$ValueIterator: <init>(Ljava/util/HashMap;)
java.util.HashMap$ValueIterator: next() ===> java.util.HashMap$ValueIterator: nextEntry()
java.util.HashMap$Values: <init>(Ljava/util/HashMap;) ===> java.util.AbstractCollection: <init>()
java.util.HashMap$Values: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;) ===> java.util.HashMap$Values: <init>(Ljava/util/HashMap;)
java.util.HashMap$Values: contains(Ljava/lang/Object;) ===> java.util.HashMap: containsValue(Ljava/lang/Object;)
java.util.HashMap$Values: iterator() ===> java.util.HashMap: newValueIterator()
java.util.HashMap: <init>() ===> java.util.AbstractMap: <init>()
java.util.HashMap: <init>() ===> java.util.HashMap: init()
java.util.HashMap: <init>(I) ===> java.util.HashMap: <init>(IF)
java.util.HashMap: <init>(IF) ===> java.lang.Float: isNaN(F)
java.util.HashMap: <init>(IF) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.HashMap: <init>(IF) ===> java.lang.StringBuilder: <init>()
java.util.HashMap: <init>(IF) ===> java.lang.StringBuilder: append(F)
java.util.HashMap: <init>(IF) ===> java.lang.StringBuilder: append(I)
java.util.HashMap: <init>(IF) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.HashMap: <init>(IF) ===> java.lang.StringBuilder: toString()
java.util.HashMap: <init>(IF) ===> java.util.AbstractMap: <init>()
java.util.HashMap: <init>(IF) ===> java.util.HashMap: init()
java.util.HashMap: addEntry(ILjava/lang/Object;Ljava/lang/Object;I) ===> java.util.HashMap$Entry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Entry;)
java.util.HashMap: addEntry(ILjava/lang/Object;Ljava/lang/Object;I) ===> java.util.HashMap: resize(I)
java.util.HashMap: containsKey(Ljava/lang/Object;) ===> java.util.HashMap: getEntry(Ljava/lang/Object;)
java.util.HashMap: containsValue(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.HashMap: containsValue(Ljava/lang/Object;) ===> java.util.HashMap: containsNullValue()
java.util.HashMap: containsValue(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.HashMap: entrySet() ===> java.util.HashMap: entrySet0()
java.util.HashMap: entrySet0() ===> java.util.HashMap$EntrySet: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)
java.util.HashMap: get(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.HashMap: get(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.HashMap: get(Ljava/lang/Object;) ===> java.util.HashMap: getForNullKey()
java.util.HashMap: get(Ljava/lang/Object;) ===> java.util.HashMap: hash(I)
java.util.HashMap: get(Ljava/lang/Object;) ===> java.util.HashMap: indexFor(II)
java.util.HashMap: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.HashMap: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.HashMap: getEntry(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.HashMap: getEntry(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.HashMap: getEntry(Ljava/lang/Object;) ===> java.util.HashMap: hash(I)
java.util.HashMap: getEntry(Ljava/lang/Object;) ===> java.util.HashMap: indexFor(II)
java.util.HashMap: getEntry(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.HashMap: getEntry(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.HashMap: keySet() ===> java.util.HashMap$KeySet: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)
java.util.HashMap: newEntryIterator() ===> java.util.HashMap$EntryIterator: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)
java.util.HashMap: newKeyIterator() ===> java.util.HashMap$KeyIterator: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)
java.util.HashMap: newValueIterator() ===> java.util.HashMap$ValueIterator: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.HashMap$Entry: recordAccess(Ljava/util/HashMap;)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.HashMap: addEntry(ILjava/lang/Object;Ljava/lang/Object;I)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.HashMap: hash(I)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.HashMap: indexFor(II)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.HashMap: putForNullKey(Ljava/lang/Object;)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.HashMap: putForNullKey(Ljava/lang/Object;) ===> java.util.HashMap$Entry: recordAccess(Ljava/util/HashMap;)
java.util.HashMap: putForNullKey(Ljava/lang/Object;) ===> java.util.HashMap: addEntry(ILjava/lang/Object;Ljava/lang/Object;I)
java.util.HashMap: resize(I) ===> java.util.HashMap: transfer([Ljava/util/HashMap$Entry;)
java.util.HashMap: transfer([Ljava/util/HashMap$Entry;) ===> java.util.HashMap: indexFor(II)
java.util.HashMap: values() ===> java.util.HashMap$Values: <init>(Ljava/util/HashMap;Ljava/util/HashMap$1;)
java.util.HashSet: <clinit>() ===> java.lang.Object: <init>()
java.util.HashSet: <init>() ===> java.util.AbstractSet: <init>()
java.util.HashSet: <init>() ===> java.util.HashMap: <init>()
java.util.HashSet: add(Ljava/lang/Object;) ===> java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.HashSet: contains(Ljava/lang/Object;) ===> java.util.HashMap: containsKey(Ljava/lang/Object;)
java.util.HashSet: isEmpty() ===> java.util.HashMap: isEmpty()
java.util.HashSet: iterator() ===> java.util.HashMap: keySet()
java.util.HashSet: iterator() ===> java.util.Set: iterator()
java.util.HashSet: size() ===> java.util.HashMap: size()
java.util.Hashtable$Entry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/Hashtable$Entry;) ===> java.lang.Object: <init>()
java.util.Hashtable$Entry: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Hashtable$Entry: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.Hashtable$Entry: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getValue()
java.util.Hashtable$Entry: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Hashtable$Entry: hashCode() ===> java.lang.Object: hashCode()
java.util.Hashtable$Entry: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Hashtable$Entry: toString() ===> java.lang.Object: toString()
java.util.Hashtable$Entry: toString() ===> java.lang.StringBuilder: <init>()
java.util.Hashtable$Entry: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Hashtable$Entry: toString() ===> java.lang.StringBuilder: toString()
java.util.Hashtable$Entry: toString() ===> org.clapper.argot.CommandLineOption: toString()
java.util.Hashtable$Entry: toString() ===> org.clapper.argot.Parameter: toString()
java.util.Hashtable$EntrySet: <init>(Ljava/util/Hashtable;) ===> java.util.AbstractSet: <init>()
java.util.Hashtable$EntrySet: <init>(Ljava/util/Hashtable;Ljava/util/Hashtable$1;) ===> java.util.Hashtable$EntrySet: <init>(Ljava/util/Hashtable;)
java.util.Hashtable$EntrySet: contains(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.Hashtable$EntrySet: contains(Ljava/lang/Object;) ===> java.util.Hashtable$Entry: equals(Ljava/lang/Object;)
java.util.Hashtable$EntrySet: contains(Ljava/lang/Object;) ===> java.util.Hashtable: access$400(Ljava/util/Hashtable;)
java.util.Hashtable$EntrySet: contains(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.Hashtable$EntrySet: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Hashtable$EntrySet: iterator() ===> java.util.Hashtable: access$100(Ljava/util/Hashtable;I)
java.util.Hashtable$EntrySet: size() ===> java.util.Hashtable: access$200(Ljava/util/Hashtable;)
java.util.Hashtable$Enumerator: <init>(Ljava/util/Hashtable;IZ) ===> java.lang.Object: <init>()
java.util.Hashtable$Enumerator: <init>(Ljava/util/Hashtable;IZ) ===> java.util.Hashtable: access$400(Ljava/util/Hashtable;)
java.util.Hashtable$Enumerator: <init>(Ljava/util/Hashtable;IZ) ===> java.util.Hashtable: access$500(Ljava/util/Hashtable;)
java.util.Hashtable$Enumerator: hasNext() ===> java.util.Hashtable$Enumerator: hasMoreElements()
java.util.Hashtable$Enumerator: next() ===> java.util.ConcurrentModificationException: <init>()
java.util.Hashtable$Enumerator: next() ===> java.util.Hashtable$Enumerator: nextElement()
java.util.Hashtable$Enumerator: next() ===> java.util.Hashtable: access$500(Ljava/util/Hashtable;)
java.util.Hashtable$Enumerator: nextElement() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
java.util.Hashtable$ValueCollection: <init>(Ljava/util/Hashtable;) ===> java.util.AbstractCollection: <init>()
java.util.Hashtable$ValueCollection: <init>(Ljava/util/Hashtable;Ljava/util/Hashtable$1;) ===> java.util.Hashtable$ValueCollection: <init>(Ljava/util/Hashtable;)
java.util.Hashtable$ValueCollection: contains(Ljava/lang/Object;) ===> java.util.Hashtable: containsValue(Ljava/lang/Object;)
java.util.Hashtable$ValueCollection: iterator() ===> java.util.Hashtable: access$100(Ljava/util/Hashtable;I)
java.util.Hashtable$ValueCollection: size() ===> java.util.Hashtable: access$200(Ljava/util/Hashtable;)
java.util.Hashtable: <init>() ===> java.util.Hashtable: <init>(IF)
java.util.Hashtable: <init>(I) ===> java.util.Hashtable: <init>(IF)
java.util.Hashtable: <init>(IF) ===> java.lang.Float: isNaN(F)
java.util.Hashtable: <init>(IF) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.Hashtable: <init>(IF) ===> java.lang.StringBuilder: <init>()
java.util.Hashtable: <init>(IF) ===> java.lang.StringBuilder: append(F)
java.util.Hashtable: <init>(IF) ===> java.lang.StringBuilder: append(I)
java.util.Hashtable: <init>(IF) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Hashtable: <init>(IF) ===> java.lang.StringBuilder: toString()
java.util.Hashtable: <init>(IF) ===> java.util.Dictionary: <init>()
java.util.Hashtable: access$100(Ljava/util/Hashtable;I) ===> java.util.Hashtable: getIterator(I)
java.util.Hashtable: contains(Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
java.util.Hashtable: contains(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Hashtable: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Hashtable: containsKey(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Hashtable: containsKey(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.Hashtable: containsKey(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Hashtable: containsKey(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Hashtable: containsValue(Ljava/lang/Object;) ===> java.util.Hashtable: contains(Ljava/lang/Object;)
java.util.Hashtable: entrySet() ===> java.util.Collections: synchronizedSet(Ljava/util/Set;Ljava/lang/Object;)
java.util.Hashtable: entrySet() ===> java.util.Hashtable$EntrySet: <init>(Ljava/util/Hashtable;Ljava/util/Hashtable$1;)
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Hashtable: entrySet()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Hashtable: size()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Iterator: hasNext()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Iterator: next()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getKey()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Map$Entry: getValue()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Map: containsKey(Ljava/lang/Object;)
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Map: get(Ljava/lang/Object;)
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Map: size()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> java.util.Set: iterator()
java.util.Hashtable: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Hashtable: get(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Hashtable: get(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.Hashtable: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Hashtable: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Hashtable: getIterator(I) ===> java.util.Collections: emptyIterator()
java.util.Hashtable: getIterator(I) ===> java.util.Hashtable$Enumerator: <init>(Ljava/util/Hashtable;IZ)
java.util.Hashtable: hashCode() ===> java.lang.Object: hashCode()
java.util.Hashtable: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: hashCode()
java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.Hashtable$Entry: <init>(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/Hashtable$Entry;)
java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;) ===> java.util.Hashtable: rehash()
java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
java.util.Hashtable: toString() ===> java.lang.Object: toString()
java.util.Hashtable: toString() ===> java.lang.StringBuilder: <init>()
java.util.Hashtable: toString() ===> java.lang.StringBuilder: append(C)
java.util.Hashtable: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Hashtable: toString() ===> java.lang.StringBuilder: toString()
java.util.Hashtable: toString() ===> java.util.Hashtable: entrySet()
java.util.Hashtable: toString() ===> java.util.Hashtable: size()
java.util.Hashtable: toString() ===> java.util.Iterator: next()
java.util.Hashtable: toString() ===> java.util.Map$Entry: getKey()
java.util.Hashtable: toString() ===> java.util.Map$Entry: getValue()
java.util.Hashtable: toString() ===> java.util.Set: iterator()
java.util.Hashtable: toString() ===> org.clapper.argot.CommandLineOption: toString()
java.util.Hashtable: toString() ===> org.clapper.argot.Parameter: toString()
java.util.Hashtable: values() ===> java.util.Collections: synchronizedCollection(Ljava/util/Collection;Ljava/lang/Object;)
java.util.Hashtable: values() ===> java.util.Hashtable$ValueCollection: <init>(Ljava/util/Hashtable;Ljava/util/Hashtable$1;)
java.util.IllegalFormatCodePointException: <init>(I) ===> java.util.IllegalFormatException: <init>()
java.util.IllegalFormatCodePointException: getMessage() ===> java.lang.Integer: valueOf(I)
java.util.IllegalFormatCodePointException: getMessage() ===> java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;)
java.util.IllegalFormatConversionException: <init>(CLjava/lang/Class;) ===> java.lang.NullPointerException: <init>()
java.util.IllegalFormatConversionException: <init>(CLjava/lang/Class;) ===> java.util.IllegalFormatException: <init>()
java.util.IllegalFormatConversionException: getMessage() ===> java.lang.Character: valueOf(C)
java.util.IllegalFormatConversionException: getMessage() ===> java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;)
java.util.IllegalFormatException: <init>() ===> java.lang.IllegalArgumentException: <init>()
java.util.IllegalFormatFlagsException: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.util.IllegalFormatFlagsException: <init>(Ljava/lang/String;) ===> java.util.IllegalFormatException: <init>()
java.util.IllegalFormatFlagsException: getMessage() ===> java.lang.StringBuilder: <init>()
java.util.IllegalFormatFlagsException: getMessage() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.IllegalFormatFlagsException: getMessage() ===> java.lang.StringBuilder: toString()
java.util.IllegalFormatPrecisionException: <init>(I) ===> java.util.IllegalFormatException: <init>()
java.util.IllegalFormatPrecisionException: getMessage() ===> java.lang.Integer: toString(I)
java.util.IllegalFormatWidthException: <init>(I) ===> java.util.IllegalFormatException: <init>()
java.util.IllegalFormatWidthException: getMessage() ===> java.lang.Integer: toString(I)
java.util.JapaneseImperialCalendar: <clinit>() ===> java.lang.Math: min(II)
java.util.JapaneseImperialCalendar: <clinit>() ===> java.util.JapaneseImperialCalendar: getCalendarDate(J)
java.util.JapaneseImperialCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.lang.System: currentTimeMillis()
java.util.JapaneseImperialCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.Calendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;)
java.util.JapaneseImperialCalendar: <init>(Ljava/util/TimeZone;Ljava/util/Locale;) ===> java.util.JapaneseImperialCalendar: setTimeInMillis(J)
java.util.JapaneseImperialCalendar: clone() ===> java.util.Calendar: clone()
java.util.JapaneseImperialCalendar: computeFields() ===> java.lang.AssertionError: <init>()
java.util.JapaneseImperialCalendar: computeFields() ===> java.util.JapaneseImperialCalendar: computeFields(II)
java.util.JapaneseImperialCalendar: computeFields() ===> java.util.JapaneseImperialCalendar: getSetStateFields()
java.util.JapaneseImperialCalendar: computeFields() ===> java.util.JapaneseImperialCalendar: isPartiallyNormalized()
java.util.JapaneseImperialCalendar: computeFields() ===> java.util.JapaneseImperialCalendar: setFieldsComputed(I)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getCalendarDate(J)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getEraIndex(Lsun/util/calendar/LocalGregorianCalendar$Date;)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getFirstDayOfWeek()
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getFixedDateJan1(Lsun/util/calendar/LocalGregorianCalendar$Date;J)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getFixedDateMonth1(Lsun/util/calendar/LocalGregorianCalendar$Date;J)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getMinimalDaysInFirstWeek()
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getWeekNumber(JJ)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: getZone()
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: internalGet(I)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: internalSet(II)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: isFieldSet(II)
java.util.JapaneseImperialCalendar: computeFields(II) ===> java.util.JapaneseImperialCalendar: isTransitionYear(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.JapaneseImperialCalendar: computeTime() ===> java.lang.StringBuilder: <init>()
java.util.JapaneseImperialCalendar: computeTime() ===> java.lang.StringBuilder: append(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.JapaneseImperialCalendar: computeTime() ===> java.lang.StringBuilder: toString()
java.util.JapaneseImperialCalendar: computeTime() ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: computeFields(II)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: getFieldName(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: getFixedDate(III)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: getMaximum(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: getMinimum(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: getSetStateFields()
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: getZone()
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: internalGet(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: isExternallySet(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: isFieldSet(II)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: isLenient()
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: isSet(I)
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: selectFields()
java.util.JapaneseImperialCalendar: computeTime() ===> java.util.JapaneseImperialCalendar: setFieldsNormalized(I)
java.util.JapaneseImperialCalendar: equals(Ljava/lang/Object;) ===> java.util.Calendar: equals(Ljava/lang/Object;)
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: getFirstDayOfWeek()
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: getFixedDateJan1(Lsun/util/calendar/LocalGregorianCalendar$Date;J)
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: getMinimalDaysInFirstWeek()
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: getZone()
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: internalGet(I)
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: isFieldSet(II)
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: isSet(I)
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: isTransitionYear(I)
java.util.JapaneseImperialCalendar: getFixedDate(III) ===> java.util.JapaneseImperialCalendar: monthLength(II)
java.util.JapaneseImperialCalendar: getFixedDateJan1(Lsun/util/calendar/LocalGregorianCalendar$Date;J) ===> java.util.JapaneseImperialCalendar: getEraIndex(Lsun/util/calendar/LocalGregorianCalendar$Date;)
java.util.JapaneseImperialCalendar: getFixedDateMonth1(Lsun/util/calendar/LocalGregorianCalendar$Date;J) ===> java.util.JapaneseImperialCalendar: getTransitionEraIndex(Lsun/util/calendar/LocalGregorianCalendar$Date;)
java.util.JapaneseImperialCalendar: getMaximum(I) ===> java.lang.Math: max(II)
java.util.JapaneseImperialCalendar: getMaximum(I) ===> java.util.JapaneseImperialCalendar: getZone()
java.util.JapaneseImperialCalendar: getTimeZone() ===> java.util.Calendar: getTimeZone()
java.util.JapaneseImperialCalendar: getTransitionEraIndex(Lsun/util/calendar/LocalGregorianCalendar$Date;) ===> java.util.JapaneseImperialCalendar: getEraIndex(Lsun/util/calendar/LocalGregorianCalendar$Date;)
java.util.JapaneseImperialCalendar: getWeekNumber(JJ) ===> java.lang.AssertionError: <init>()
java.util.JapaneseImperialCalendar: getWeekNumber(JJ) ===> java.util.JapaneseImperialCalendar: getFirstDayOfWeek()
java.util.JapaneseImperialCalendar: getWeekNumber(JJ) ===> java.util.JapaneseImperialCalendar: getMinimalDaysInFirstWeek()
java.util.JapaneseImperialCalendar: hashCode() ===> java.util.Calendar: hashCode()
java.util.jar.Attributes$Name: <clinit>() ===> java.util.jar.Attributes$Name: <init>(Ljava/lang/String;)
java.util.jar.Attributes$Name: <init>(Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.jar.Attributes$Name: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>(Ljava/lang/String;)
java.util.jar.Attributes$Name: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
java.util.jar.Attributes$Name: <init>(Ljava/lang/String;) ===> java.lang.String: intern()
java.util.jar.Attributes$Name: <init>(Ljava/lang/String;) ===> java.util.jar.Attributes$Name: isValid(Ljava/lang/String;)
java.util.jar.Attributes$Name: equals(Ljava/lang/Object;) ===> java.util.Comparator: compare(Ljava/lang/Object;Ljava/lang/Object;)
java.util.jar.Attributes$Name: isValid(C) ===> java.util.jar.Attributes$Name: isAlpha(C)
java.util.jar.Attributes$Name: isValid(C) ===> java.util.jar.Attributes$Name: isDigit(C)
java.util.jar.Attributes$Name: isValid(Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.util.jar.Attributes$Name: isValid(Ljava/lang/String;) ===> java.lang.String: length()
java.util.jar.Attributes$Name: isValid(Ljava/lang/String;) ===> java.util.jar.Attributes$Name: isValid(C)
java.util.Locale: <clinit>() ===> java.util.concurrent.ConcurrentHashMap: <init>(I)
java.util.Locale: <clinit>() ===> java.util.Locale: createSingleton(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
java.util.Locale: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.Object: <init>()
java.util.Locale: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.String: intern()
java.util.Locale: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.util.Locale: convertOldISOCodes(Ljava/lang/String;)
java.util.Locale: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.util.Locale: toUpperCase(Ljava/lang/String;)
java.util.Locale: <init>(Ljava/lang/String;Ljava/lang/String;Z) ===> java.lang.Object: <init>()
java.util.Locale: convertOldISOCodes(Ljava/lang/String;) ===> java.lang.String: intern()
java.util.Locale: convertOldISOCodes(Ljava/lang/String;) ===> java.util.Locale: toLowerCase(Ljava/lang/String;)
java.util.Locale: createSingleton(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.util.concurrent.ConcurrentHashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.Locale: createSingleton(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.util.Locale: <init>(Ljava/lang/String;Ljava/lang/String;Z)
java.util.Locale: getDefault() ===> java.lang.String: indexOf(I)
java.util.Locale: getDefault() ===> java.lang.String: substring(I)
java.util.Locale: getDefault() ===> java.lang.String: substring(II)
java.util.Locale: getDefault() ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedAction;)
java.util.Locale: getDefault() ===> java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.StringBuilder: append(C)
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.util.concurrent.ConcurrentHashMap: get(Ljava/lang/Object;)
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.util.concurrent.ConcurrentHashMap: putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)
java.util.Locale: getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.util.Locale: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
java.util.Locale: hashCode() ===> java.lang.String: hashCode()
java.util.Locale: toLowerCase(Ljava/lang/String;) ===> java.lang.Character: toLowerCase(C)
java.util.Locale: toLowerCase(Ljava/lang/String;) ===> java.lang.String: <init>([C)
java.util.Locale: toLowerCase(Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.util.Locale: toLowerCase(Ljava/lang/String;) ===> java.lang.String: length()
java.util.Locale: toString() ===> java.lang.String: length()
java.util.Locale: toString() ===> java.lang.StringBuilder: <init>(Ljava/lang/String;)
java.util.Locale: toString() ===> java.lang.StringBuilder: append(C)
java.util.Locale: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Locale: toString() ===> java.lang.StringBuilder: toString()
java.util.Locale: toUpperCase(Ljava/lang/String;) ===> java.lang.Character: toUpperCase(C)
java.util.Locale: toUpperCase(Ljava/lang/String;) ===> java.lang.String: <init>([C)
java.util.Locale: toUpperCase(Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.util.Locale: toUpperCase(Ljava/lang/String;) ===> java.lang.String: length()
java.util.MissingFormatArgumentException: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.util.MissingFormatArgumentException: <init>(Ljava/lang/String;) ===> java.util.IllegalFormatException: <init>()
java.util.MissingFormatArgumentException: getMessage() ===> java.lang.StringBuilder: <init>()
java.util.MissingFormatArgumentException: getMessage() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.MissingFormatArgumentException: getMessage() ===> java.lang.StringBuilder: toString()
java.util.MissingFormatWidthException: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.util.MissingFormatWidthException: <init>(Ljava/lang/String;) ===> java.util.IllegalFormatException: <init>()
java.util.MissingResourceException: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.util.NoSuchElementException: <init>() ===> java.lang.RuntimeException: <init>()
java.util.NoSuchElementException: <init>(Ljava/lang/String;) ===> java.lang.RuntimeException: <init>(Ljava/lang/String;)
java.util.Properties$LineReader: <init>(Ljava/util/Properties;Ljava/io/InputStream;) ===> java.lang.Object: <init>()
java.util.Properties$LineReader: readLine() ===> java.io.Reader: read([C)
java.util.Properties$LineReader: readLine() ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Properties: <init>() ===> java.util.Properties: <init>(Ljava/util/Properties;)
java.util.Properties: <init>(Ljava/util/Properties;) ===> java.util.Hashtable: <init>()
java.util.Properties: getProperty(Ljava/lang/String;) ===> java.util.Hashtable: get(Ljava/lang/Object;)
java.util.Properties: getProperty(Ljava/lang/String;) ===> java.util.Properties: getProperty(Ljava/lang/String;)
java.util.Properties: getProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.util.Properties: getProperty(Ljava/lang/String;)
java.util.Properties: load(Ljava/io/InputStream;) ===> java.util.Properties$LineReader: <init>(Ljava/util/Properties;Ljava/io/InputStream;)
java.util.Properties: load(Ljava/io/InputStream;) ===> java.util.Properties: load0(Ljava/util/Properties$LineReader;)
java.util.Properties: load0(Ljava/util/Properties$LineReader;) ===> java.util.Properties$LineReader: readLine()
java.util.Properties: load0(Ljava/util/Properties$LineReader;) ===> java.util.Properties: loadConvert([CII[C)
java.util.Properties: load0(Ljava/util/Properties$LineReader;) ===> java.util.Properties: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.Properties: loadConvert([CII[C) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.Properties: loadConvert([CII[C) ===> java.lang.String: <init>([CII)
java.util.Properties: setProperty(Ljava/lang/String;Ljava/lang/String;) ===> java.util.Properties: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.PropertyPermission: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.security.BasicPermission: <init>(Ljava/lang/String;Ljava/lang/String;)
java.util.PropertyPermission: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.util.PropertyPermission: getMask(Ljava/lang/String;)
java.util.PropertyPermission: <init>(Ljava/lang/String;Ljava/lang/String;) ===> java.util.PropertyPermission: init(I)
java.util.PropertyPermission: equals(Ljava/lang/Object;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.util.PropertyPermission: equals(Ljava/lang/Object;) ===> java.util.PropertyPermission: getName()
java.util.PropertyPermission: getActions() ===> java.util.PropertyPermission: getActions(I)
java.util.PropertyPermission: getActions(I) ===> java.lang.StringBuilder: <init>()
java.util.PropertyPermission: getActions(I) ===> java.lang.StringBuilder: append(C)
java.util.PropertyPermission: getActions(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.PropertyPermission: getActions(I) ===> java.lang.StringBuilder: toString()
java.util.PropertyPermission: getMask(Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.PropertyPermission: getMask(Ljava/lang/String;) ===> java.lang.String: toCharArray()
java.util.PropertyPermission: getMask(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.PropertyPermission: getMask(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.PropertyPermission: getMask(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.PropertyPermission: hashCode() ===> java.lang.String: hashCode()
java.util.PropertyPermission: hashCode() ===> java.util.PropertyPermission: getName()
java.util.PropertyPermission: init(I) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.PropertyPermission: init(I) ===> java.lang.NullPointerException: <init>(Ljava/lang/String;)
java.util.PropertyPermission: init(I) ===> java.util.PropertyPermission: getName()
java.util.regex.ASCII: isAlnum(I) ===> java.util.regex.ASCII: isType(II)
java.util.regex.ASCII: isHexDigit(I) ===> java.util.regex.ASCII: isType(II)
java.util.regex.ASCII: isSpace(I) ===> java.util.regex.ASCII: isType(II)
java.util.regex.ASCII: isType(II) ===> java.util.regex.ASCII: getType(I)
java.util.regex.ASCII: toLower(I) ===> java.util.regex.ASCII: isUpper(I)
java.util.regex.ASCII: toUpper(I) ===> java.util.regex.ASCII: isLower(I)
java.util.regex.Matcher: <init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;) ===> java.lang.Math: max(II)
java.util.regex.Matcher: <init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;) ===> java.lang.Object: <init>()
java.util.regex.Matcher: <init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;) ===> java.util.regex.Matcher: reset()
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.IllegalStateException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.String: length()
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.StringBuffer: append(Ljava/lang/CharSequence;)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.StringBuffer: append(Ljava/lang/CharSequence;II)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.StringBuilder: append(C)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/CharSequence;II)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.util.regex.Matcher: end(I)
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.util.regex.Matcher: groupCount()
java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;) ===> java.util.regex.Matcher: start(I)
java.util.regex.Matcher: appendTail(Ljava/lang/StringBuffer;) ===> java.lang.StringBuffer: append(Ljava/lang/CharSequence;II)
java.util.regex.Matcher: appendTail(Ljava/lang/StringBuffer;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Matcher: end() ===> java.lang.IllegalStateException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: end(I) ===> java.lang.IllegalStateException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: end(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: end(I) ===> java.lang.StringBuilder: <init>()
java.util.regex.Matcher: end(I) ===> java.lang.StringBuilder: append(I)
java.util.regex.Matcher: end(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Matcher: end(I) ===> java.lang.StringBuilder: toString()
java.util.regex.Matcher: end(I) ===> java.util.regex.Matcher: groupCount()
java.util.regex.Matcher: find() ===> java.util.regex.Matcher: search(I)
java.util.regex.Matcher: find(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: find(I) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Matcher: find(I) ===> java.util.regex.Matcher: reset()
java.util.regex.Matcher: find(I) ===> java.util.regex.Matcher: search(I)
java.util.regex.Matcher: getSubSequence(II) ===> java.lang.CharSequence: subSequence(II)
java.util.regex.Matcher: getTextLength() ===> java.lang.CharSequence: length()
java.util.regex.Matcher: group() ===> java.util.regex.Matcher: group(I)
java.util.regex.Matcher: group(I) ===> java.lang.IllegalStateException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: group(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: group(I) ===> java.lang.Object: toString()
java.util.regex.Matcher: group(I) ===> java.lang.StringBuilder: <init>()
java.util.regex.Matcher: group(I) ===> java.lang.StringBuilder: append(I)
java.util.regex.Matcher: group(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Matcher: group(I) ===> java.lang.StringBuilder: toString()
java.util.regex.Matcher: group(I) ===> java.util.regex.Matcher: getSubSequence(II)
java.util.regex.Matcher: group(I) ===> java.util.regex.Matcher: groupCount()
java.util.regex.Matcher: group(I) ===> org.clapper.argot.CommandLineOption: toString()
java.util.regex.Matcher: group(I) ===> org.clapper.argot.Parameter: toString()
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.lang.Object: toString()
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.lang.StringBuffer: <init>()
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.lang.StringBuffer: toString()
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.util.regex.Matcher: appendReplacement(Ljava/lang/StringBuffer;Ljava/lang/String;)
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.util.regex.Matcher: appendTail(Ljava/lang/StringBuffer;)
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.util.regex.Matcher: find()
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> java.util.regex.Matcher: reset()
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> org.clapper.argot.CommandLineOption: toString()
java.util.regex.Matcher: replaceFirst(Ljava/lang/String;) ===> org.clapper.argot.Parameter: toString()
java.util.regex.Matcher: reset() ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Matcher: search(I) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Matcher: start() ===> java.lang.IllegalStateException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: start(I) ===> java.lang.IllegalStateException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: start(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.regex.Matcher: start(I) ===> java.lang.StringBuilder: <init>()
java.util.regex.Matcher: start(I) ===> java.lang.StringBuilder: append(I)
java.util.regex.Matcher: start(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Matcher: start(I) ===> java.lang.StringBuilder: toString()
java.util.regex.Matcher: start(I) ===> java.util.regex.Matcher: groupCount()
java.util.regex.Matcher: toString() ===> java.lang.StringBuilder: <init>()
java.util.regex.Matcher: toString() ===> java.lang.StringBuilder: append(I)
java.util.regex.Matcher: toString() ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
java.util.regex.Matcher: toString() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Matcher: toString() ===> java.lang.StringBuilder: toString()
java.util.regex.Matcher: toString() ===> java.util.regex.Matcher: group()
java.util.regex.Matcher: toString() ===> java.util.regex.Matcher: pattern()
java.util.regex.Matcher: toString() ===> java.util.regex.Matcher: regionEnd()
java.util.regex.Matcher: toString() ===> java.util.regex.Matcher: regionStart()
java.util.regex.Pattern$1: <init>(Ljava/util/regex/Pattern;Ljava/lang/Character$UnicodeBlock;) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$1: isSatisfiedBy(I) ===> java.lang.Character$UnicodeBlock: of(I)
java.util.regex.Pattern$2: <init>(II) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$2: isSatisfiedBy(I) ===> java.util.regex.Pattern: access$200(III)
java.util.regex.Pattern$3: <init>(Ljava/util/regex/Pattern;II) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$3: isSatisfiedBy(I) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern$3: isSatisfiedBy(I) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern$3: isSatisfiedBy(I) ===> java.util.regex.Pattern: access$200(III)
java.util.regex.Pattern$4: <init>(Ljava/util/regex/Pattern;II) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$4: isSatisfiedBy(I) ===> java.util.regex.ASCII: isAscii(I)
java.util.regex.Pattern$4: isSatisfiedBy(I) ===> java.util.regex.ASCII: toLower(I)
java.util.regex.Pattern$4: isSatisfiedBy(I) ===> java.util.regex.ASCII: toUpper(I)
java.util.regex.Pattern$4: isSatisfiedBy(I) ===> java.util.regex.Pattern: access$200(III)
java.util.regex.Pattern$5: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$6: <init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$6: isSatisfiedBy(I) ===> java.util.regex.Pattern$CharProperty: isSatisfiedBy(I)
java.util.regex.Pattern$7: <init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$7: isSatisfiedBy(I) ===> java.util.regex.Pattern$CharProperty: isSatisfiedBy(I)
java.util.regex.Pattern$8: <init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$8: isSatisfiedBy(I) ===> java.util.regex.Pattern$CharProperty: isSatisfiedBy(I)
java.util.regex.Pattern$All: <init>() ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$BackRef: <init>(I) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$BackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$BackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$BackRef: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Begin: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Begin: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Behind: <init>(Ljava/util/regex/Pattern$Node;II) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Behind: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Math: max(II)
java.util.regex.Pattern$Behind: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$BehindS: <init>(Ljava/util/regex/Pattern$Node;II) ===> java.util.regex.Pattern$Behind: <init>(Ljava/util/regex/Pattern$Node;II)
java.util.regex.Pattern$BehindS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Math: max(II)
java.util.regex.Pattern$BehindS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$BehindS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern: access$300(Ljava/lang/CharSequence;II)
java.util.regex.Pattern$BitClass: <init>() ===> java.util.regex.Pattern$BmpCharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$BitClass: add(II) ===> java.lang.AssertionError: <init>()
java.util.regex.Pattern$BitClass: add(II) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern$BitClass: add(II) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern$BitClass: add(II) ===> java.util.regex.ASCII: isAscii(I)
java.util.regex.Pattern$BitClass: add(II) ===> java.util.regex.ASCII: toLower(I)
java.util.regex.Pattern$BitClass: add(II) ===> java.util.regex.ASCII: toUpper(I)
java.util.regex.Pattern$BmpCharProperty: <init>() ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$BmpCharProperty: <init>(Ljava/util/regex/Pattern$1;) ===> java.util.regex.Pattern$BmpCharProperty: <init>()
java.util.regex.Pattern$BmpCharProperty: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$BmpCharProperty: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$BmpCharProperty: isSatisfiedBy(I)
java.util.regex.Pattern$BmpCharProperty: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$BnM: <init>([I[I[ILjava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$BnM: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$BnM: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Math: max(II)
java.util.regex.Pattern$BnM: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$BnM: optimize(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$BnM: <init>([I[I[ILjava/util/regex/Pattern$Node;)
java.util.regex.Pattern$BnM: optimize(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$BnMS: <init>([I[I[ILjava/util/regex/Pattern$Node;)
java.util.regex.Pattern$BnM: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$BnMS: <init>([I[I[ILjava/util/regex/Pattern$Node;) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern$BnMS: <init>([I[I[ILjava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$BnM: <init>([I[I[ILjava/util/regex/Pattern$Node;)
java.util.regex.Pattern$BnMS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern$BnMS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointBefore(Ljava/lang/CharSequence;I)
java.util.regex.Pattern$BnMS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Math: max(II)
java.util.regex.Pattern$BnMS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$BnMS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern: access$300(Ljava/lang/CharSequence;II)
java.util.regex.Pattern$Bound: <init>(I) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Bound: check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointAt(Ljava/lang/CharSequence;I)
java.util.regex.Pattern$Bound: check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointBefore(Ljava/lang/CharSequence;I)
java.util.regex.Pattern$Bound: check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: getType(I)
java.util.regex.Pattern$Bound: check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: isLetterOrDigit(I)
java.util.regex.Pattern$Bound: check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$Bound: check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern: access$400(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Bound: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Bound: check(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Bound: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Branch: <init>(Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Branch: add(Ljava/util/regex/Pattern$Node;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.regex.Pattern$Branch: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Branch: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.lang.Math: max(II)
java.util.regex.Pattern$Branch: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.lang.Math: min(II)
java.util.regex.Pattern$Branch: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Branch: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$TreeInfo: reset()
java.util.regex.Pattern$BranchConn: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$BranchConn: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Caret: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Caret: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$Caret: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$Caret: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Category: <init>(I) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$Category: isSatisfiedBy(I) ===> java.lang.Character: getType(I)
java.util.regex.Pattern$CharProperty$1: <init>(Ljava/util/regex/Pattern$CharProperty;) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharProperty$1: isSatisfiedBy(I) ===> java.util.regex.Pattern$CharProperty: isSatisfiedBy(I)
java.util.regex.Pattern$CharProperty: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;) ===> java.util.regex.Pattern$CharProperty: <init>()
java.util.regex.Pattern$CharProperty: complement() ===> java.util.regex.Pattern$CharProperty$1: <init>(Ljava/util/regex/Pattern$CharProperty;)
java.util.regex.Pattern$CharProperty: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern$CharProperty: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointAt(Ljava/lang/CharSequence;I)
java.util.regex.Pattern$CharProperty: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$CharProperty: isSatisfiedBy(I)
java.util.regex.Pattern$CharProperty: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$CharProperty: maybeComplement(Z) ===> java.util.regex.Pattern$CharProperty: complement()
java.util.regex.Pattern$CharProperty: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$CharPropertyNames$10: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$10: isSatisfiedBy(I) ===> java.lang.Character: isDefined(I)
java.util.regex.Pattern$CharPropertyNames$11: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$11: isSatisfiedBy(I) ===> java.lang.Character: isLetter(I)
java.util.regex.Pattern$CharPropertyNames$12: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$12: isSatisfiedBy(I) ===> java.lang.Character: isLetterOrDigit(I)
java.util.regex.Pattern$CharPropertyNames$13: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$13: isSatisfiedBy(I) ===> java.lang.Character: isJavaIdentifierStart(I)
java.util.regex.Pattern$CharPropertyNames$14: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$14: isSatisfiedBy(I) ===> java.lang.Character: isJavaIdentifierPart(I)
java.util.regex.Pattern$CharPropertyNames$15: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$15: isSatisfiedBy(I) ===> java.lang.Character: isUnicodeIdentifierStart(I)
java.util.regex.Pattern$CharPropertyNames$16: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$16: isSatisfiedBy(I) ===> java.lang.Character: isUnicodeIdentifierPart(I)
java.util.regex.Pattern$CharPropertyNames$17: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$17: isSatisfiedBy(I) ===> java.lang.Character: isIdentifierIgnorable(I)
java.util.regex.Pattern$CharPropertyNames$18: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$18: isSatisfiedBy(I) ===> java.lang.Character: isSpaceChar(I)
java.util.regex.Pattern$CharPropertyNames$19: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$19: isSatisfiedBy(I) ===> java.lang.Character: isWhitespace(I)
java.util.regex.Pattern$CharPropertyNames$1: <init>(I) ===> java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$1: make() ===> java.util.regex.Pattern$Category: <init>(I)
java.util.regex.Pattern$CharPropertyNames$20: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$20: isSatisfiedBy(I) ===> java.lang.Character: isISOControl(I)
java.util.regex.Pattern$CharPropertyNames$21: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$21: isSatisfiedBy(I) ===> java.lang.Character: isMirrored(I)
java.util.regex.Pattern$CharPropertyNames$2: <init>(II) ===> java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$2: make() ===> java.util.regex.Pattern: access$600(II)
java.util.regex.Pattern$CharPropertyNames$3: <init>(I) ===> java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$3: make() ===> java.util.regex.Pattern$Ctype: <init>(I)
java.util.regex.Pattern$CharPropertyNames$4: <init>(Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;) ===> java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$4: make() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: clone()
java.util.regex.Pattern$CharPropertyNames$5: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$5: make() ===> java.util.regex.Pattern$All: <init>()
java.util.regex.Pattern$CharPropertyNames$6: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$6: isSatisfiedBy(I) ===> java.lang.Character: isLowerCase(I)
java.util.regex.Pattern$CharPropertyNames$7: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$7: isSatisfiedBy(I) ===> java.lang.Character: isUpperCase(I)
java.util.regex.Pattern$CharPropertyNames$8: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$8: isSatisfiedBy(I) ===> java.lang.Character: isTitleCase(I)
java.util.regex.Pattern$CharPropertyNames$9: <init>() ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$9: isSatisfiedBy(I) ===> java.lang.Character: isDigit(I)
java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>() ===> java.lang.Object: <init>()
java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>(Ljava/util/regex/Pattern$1;) ===> java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: <init>()
java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>() ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>(Ljava/util/regex/Pattern$1;) ===> java.util.regex.Pattern$CharPropertyNames$CloneableProperty: <init>()
java.util.regex.Pattern$CharPropertyNames$CloneableProperty: clone() ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
java.util.regex.Pattern$CharPropertyNames$CloneableProperty: clone() ===> java.lang.Object: clone()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.HashMap: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$10: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$11: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$12: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$13: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$14: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$15: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$16: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$17: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$18: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$19: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$20: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$21: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$5: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$6: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$7: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$8: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames$9: <init>()
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames: defCategory(Ljava/lang/String;I)
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames: defClone(Ljava/lang/String;Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;)
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames: defCtype(Ljava/lang/String;I)
java.util.regex.Pattern$CharPropertyNames: <clinit>() ===> java.util.regex.Pattern$CharPropertyNames: defRange(Ljava/lang/String;II)
java.util.regex.Pattern$CharPropertyNames: charPropertyFor(Ljava/lang/String;) ===> java.util.HashMap: get(Ljava/lang/Object;)
java.util.regex.Pattern$CharPropertyNames: charPropertyFor(Ljava/lang/String;) ===> java.util.regex.Pattern$CharPropertyNames$CharPropertyFactory: make()
java.util.regex.Pattern$CharPropertyNames: defCategory(Ljava/lang/String;I) ===> java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.regex.Pattern$CharPropertyNames: defCategory(Ljava/lang/String;I) ===> java.util.regex.Pattern$CharPropertyNames$1: <init>(I)
java.util.regex.Pattern$CharPropertyNames: defClone(Ljava/lang/String;Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;) ===> java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.regex.Pattern$CharPropertyNames: defClone(Ljava/lang/String;Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;) ===> java.util.regex.Pattern$CharPropertyNames$4: <init>(Ljava/util/regex/Pattern$CharPropertyNames$CloneableProperty;)
java.util.regex.Pattern$CharPropertyNames: defCtype(Ljava/lang/String;I) ===> java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.regex.Pattern$CharPropertyNames: defCtype(Ljava/lang/String;I) ===> java.util.regex.Pattern$CharPropertyNames$3: <init>(I)
java.util.regex.Pattern$CharPropertyNames: defRange(Ljava/lang/String;II) ===> java.util.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
java.util.regex.Pattern$CharPropertyNames: defRange(Ljava/lang/String;II) ===> java.util.regex.Pattern$CharPropertyNames$2: <init>(II)
java.util.regex.Pattern$CIBackRef: <init>(IZ) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$CIBackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern$CIBackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointAt(Ljava/lang/CharSequence;I)
java.util.regex.Pattern$CIBackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern$CIBackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern$CIBackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.ASCII: toLower(I)
java.util.regex.Pattern$CIBackRef: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$CIBackRef: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Ctype: <init>(I) ===> java.util.regex.Pattern$BmpCharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$Ctype: isSatisfiedBy(I) ===> java.util.regex.ASCII: isType(II)
java.util.regex.Pattern$Curly: <init>(Ljava/util/regex/Pattern$Node;III) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Curly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Curly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Curly: match1(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Curly: match2(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Curly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: match1(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: match2(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Curly: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Curly: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$TreeInfo: reset()
java.util.regex.Pattern$Dollar: <init>(Z) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Dollar: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$Dollar: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$Dollar: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Dollar: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Dot: <init>() ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$End: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$End: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$End: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: <init>(Ljava/util/regex/Pattern$Node;IIIIIZ) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$GroupCurly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$GroupCurly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$GroupCurly: match1(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$GroupCurly: match2(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$GroupCurly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: match0(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: match1(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: match2(Ljava/util/regex/Matcher;IILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupCurly: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$GroupCurly: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$TreeInfo: reset()
java.util.regex.Pattern$GroupHead: <init>(I) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$GroupHead: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$GroupTail: <init>(II) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$GroupTail: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$LastMatch: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$LastMatch: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$LastNode: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$LazyLoop: <init>(II) ===> java.util.regex.Pattern$Loop: <init>(II)
java.util.regex.Pattern$LazyLoop: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$LazyLoop: matchInit(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Loop: <init>(II) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Loop: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Loop: matchInit(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Neg: <init>(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Neg: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$Neg: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Node: <init>() ===> java.lang.Object: <init>()
java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$NotBehind: <init>(Ljava/util/regex/Pattern$Node;II) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$NotBehind: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Math: max(II)
java.util.regex.Pattern$NotBehind: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$NotBehindS: <init>(Ljava/util/regex/Pattern$Node;II) ===> java.util.regex.Pattern$NotBehind: <init>(Ljava/util/regex/Pattern$Node;II)
java.util.regex.Pattern$NotBehindS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Math: max(II)
java.util.regex.Pattern$NotBehindS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$NotBehindS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern: access$300(Ljava/lang/CharSequence;II)
java.util.regex.Pattern$Pos: <init>(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Pos: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$Pos: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Prolog: <init>(Ljava/util/regex/Pattern$Loop;) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Prolog: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Loop: matchInit(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Prolog: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Loop: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Ques: <init>(Ljava/util/regex/Pattern$Node;I) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Ques: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Ques: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Single: <init>(I) ===> java.util.regex.Pattern$BmpCharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$SingleI: <init>(II) ===> java.util.regex.Pattern$BmpCharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$SingleS: <init>(I) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$SingleU: <init>(I) ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern$SingleU: isSatisfiedBy(I) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern$SingleU: isSatisfiedBy(I) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern$Slice: <init>([I) ===> java.util.regex.Pattern$SliceNode: <init>([I)
java.util.regex.Pattern$Slice: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$Slice: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$SliceI: <init>([I) ===> java.util.regex.Pattern$SliceNode: <init>([I)
java.util.regex.Pattern$SliceI: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$SliceI: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.ASCII: toLower(I)
java.util.regex.Pattern$SliceI: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$SliceIS: <init>([I) ===> java.util.regex.Pattern$SliceNode: <init>([I)
java.util.regex.Pattern$SliceIS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern$SliceIS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointAt(Ljava/lang/CharSequence;I)
java.util.regex.Pattern$SliceIS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$SliceIS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$SliceIS: toLower(I)
java.util.regex.Pattern$SliceIS: toLower(I) ===> java.util.regex.ASCII: toLower(I)
java.util.regex.Pattern$SliceNode: <init>([I) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$SliceNode: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$SliceS: <init>([I) ===> java.util.regex.Pattern$SliceNode: <init>([I)
java.util.regex.Pattern$SliceS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern$SliceS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointAt(Ljava/lang/CharSequence;I)
java.util.regex.Pattern$SliceS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$SliceU: <init>([I) ===> java.util.regex.Pattern$SliceNode: <init>([I)
java.util.regex.Pattern$SliceU: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern$SliceU: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern$SliceU: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$SliceU: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$SliceUS: <init>([I) ===> java.util.regex.Pattern$SliceIS: <init>([I)
java.util.regex.Pattern$SliceUS: toLower(I) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern$SliceUS: toLower(I) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern$Start: <init>(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$Start: <init>(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$Start: <init>(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$TreeInfo: <init>()
java.util.regex.Pattern$Start: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$Start: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$StartS: <init>(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Start: <init>(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern$StartS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: isHighSurrogate(C)
java.util.regex.Pattern$StartS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: isLowSurrogate(C)
java.util.regex.Pattern$StartS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$StartS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: length()
java.util.regex.Pattern$StartS: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$TreeInfo: <init>() ===> java.lang.Object: <init>()
java.util.regex.Pattern$TreeInfo: <init>() ===> java.util.regex.Pattern$TreeInfo: reset()
java.util.regex.Pattern$UnixCaret: <init>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$UnixCaret: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$UnixCaret: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$UnixCaret: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$UnixDollar: <init>(Z) ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern$UnixDollar: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern$UnixDollar: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Matcher: getTextLength()
java.util.regex.Pattern$UnixDollar: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern$Node: match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern$UnixDollar: study(Ljava/util/regex/Pattern$TreeInfo;) ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern$UnixDot: <init>() ===> java.util.regex.Pattern$CharProperty: <init>(Ljava/util/regex/Pattern$1;)
java.util.regex.Pattern: <clinit>() ===> java.util.regex.Pattern$5: <init>()
java.util.regex.Pattern: <clinit>() ===> java.util.regex.Pattern$LastNode: <init>()
java.util.regex.Pattern: <clinit>() ===> java.util.regex.Pattern$Node: <init>()
java.util.regex.Pattern: <init>(Ljava/lang/String;I) ===> java.lang.Object: <init>()
java.util.regex.Pattern: <init>(Ljava/lang/String;I) ===> java.lang.String: length()
java.util.regex.Pattern: <init>(Ljava/lang/String;I) ===> java.util.regex.Pattern$Start: <init>(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: <init>(Ljava/lang/String;I) ===> java.util.regex.Pattern: compile()
java.util.regex.Pattern: accept(ILjava/lang/String;) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: accept(ILjava/lang/String;) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: accept(ILjava/lang/String;) ===> java.util.regex.Pattern: parsePastWhitespace(I)
java.util.regex.Pattern: access$200(III) ===> java.util.regex.Pattern: inRange(III)
java.util.regex.Pattern: access$300(Ljava/lang/CharSequence;II) ===> java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II)
java.util.regex.Pattern: access$400(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.util.regex.Pattern: hasBaseCharacter(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)
java.util.regex.Pattern: access$600(II) ===> java.util.regex.Pattern: rangeFor(II)
java.util.regex.Pattern: addFlag() ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: addFlag() ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: addFlag() ===> java.util.regex.Pattern: subFlag()
java.util.regex.Pattern: append(II) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern$CharProperty: maybeComplement(Z)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: append(II)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: escape(ZZ)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: family(Z)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: isSupplementary(I)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: newSingle(I)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: newSlice([IIZ)
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: nextEscaped()
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: atom() ===> java.util.regex.Pattern: unread()
java.util.regex.Pattern: bitsOrSingle(Ljava/util/regex/Pattern$BitClass;I) ===> java.util.regex.Pattern$BitClass: add(II)
java.util.regex.Pattern: bitsOrSingle(Ljava/util/regex/Pattern$BitClass;I) ===> java.util.regex.Pattern: flags()
java.util.regex.Pattern: bitsOrSingle(Ljava/util/regex/Pattern$BitClass;I) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: bitsOrSingle(Ljava/util/regex/Pattern$BitClass;I) ===> java.util.regex.Pattern: newSingle(I)
java.util.regex.Pattern: c() ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: c() ===> java.util.regex.Pattern: read()
java.util.regex.Pattern: caseInsensitiveRangeFor(II) ===> java.util.regex.Pattern$3: <init>(Ljava/util/regex/Pattern;II)
java.util.regex.Pattern: caseInsensitiveRangeFor(II) ===> java.util.regex.Pattern$4: <init>(Ljava/util/regex/Pattern;II)
java.util.regex.Pattern: caseInsensitiveRangeFor(II) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: charPropertyNodeFor(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: charPropertyNodeFor(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: charPropertyNodeFor(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: charPropertyNodeFor(Ljava/lang/String;) ===> java.util.regex.Pattern$CharPropertyNames: charPropertyFor(Ljava/lang/String;)
java.util.regex.Pattern: charPropertyNodeFor(Ljava/lang/String;) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern$BitClass: <init>()
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern$CharProperty: complement()
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: clazz(Z)
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: intersection(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;)
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: setDifference(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: union(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)
java.util.regex.Pattern: clazz(Z) ===> java.util.regex.Pattern: unread()
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.ASCII: isDigit(I)
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Curly: <init>(Ljava/util/regex/Pattern$Node;III)
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Ques: <init>(Ljava/util/regex/Pattern$Node;I)
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: read()
java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: skip()
java.util.regex.Pattern: compile() ===> java.lang.Character: charCount(I)
java.util.regex.Pattern: compile() ===> java.lang.String: codePointAt(I)
java.util.regex.Pattern: compile() ===> java.lang.String: length()
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern$BnM: optimize(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern$Start: <init>(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern$StartS: <init>(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: isSupplementary(I)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: newSlice([IIZ)
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: normalize()
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: compile() ===> java.util.regex.Pattern: RemoveQEQuoting()
java.util.regex.Pattern: compile(Ljava/lang/String;) ===> java.util.regex.Pattern: <init>(Ljava/lang/String;I)
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.lang.String: equals(Ljava/lang/Object;)
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.lang.String: substring(I)
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.lang.String: substring(II)
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.text.Normalizer: normalize(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;)
java.util.regex.Pattern: composeOneStep(Ljava/lang/String;) ===> java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II)
java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II) ===> java.lang.AssertionError: <init>()
java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II) ===> java.lang.Character: isHighSurrogate(C)
java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II) ===> java.lang.Character: isLowSurrogate(C)
java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II) ===> java.lang.CharSequence: length()
java.util.regex.Pattern: countCodePoints(Ljava/lang/CharSequence;) ===> java.lang.Character: isHighSurrogate(C)
java.util.regex.Pattern: countCodePoints(Ljava/lang/CharSequence;) ===> java.lang.Character: isLowSurrogate(C)
java.util.regex.Pattern: countCodePoints(Ljava/lang/CharSequence;) ===> java.lang.CharSequence: charAt(I)
java.util.regex.Pattern: countCodePoints(Ljava/lang/CharSequence;) ===> java.lang.CharSequence: length()
java.util.regex.Pattern: createGroup(Z) ===> java.util.regex.Pattern$GroupHead: <init>(I)
java.util.regex.Pattern: createGroup(Z) ===> java.util.regex.Pattern$GroupTail: <init>(II)
java.util.regex.Pattern: error(Ljava/lang/String;) ===> java.util.regex.PatternSyntaxException: <init>(Ljava/lang/String;Ljava/lang/String;I)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$Begin: <init>()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$Bound: <init>(I)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$Ctype: <init>(I)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$Ctype: complement()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$Dollar: <init>(Z)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$End: <init>()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$LastMatch: <init>()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern$UnixDollar: <init>(Z)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: c()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: o()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: ref(I)
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: skip()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: u()
java.util.regex.Pattern: escape(ZZ) ===> java.util.regex.Pattern: x()
java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Branch: <init>(Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Branch: add(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$BranchConn: <init>()
java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: family(Z) ===> java.lang.Character: isSupplementaryCodePoint(I)
java.util.regex.Pattern: family(Z) ===> java.lang.String: <init>([III)
java.util.regex.Pattern: family(Z) ===> java.lang.String: startsWith(Ljava/lang/String;)
java.util.regex.Pattern: family(Z) ===> java.lang.String: substring(I)
java.util.regex.Pattern: family(Z) ===> java.lang.String: valueOf(C)
java.util.regex.Pattern: family(Z) ===> java.util.regex.Pattern: charPropertyNodeFor(Ljava/lang/String;)
java.util.regex.Pattern: family(Z) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: family(Z) ===> java.util.regex.Pattern: mark(I)
java.util.regex.Pattern: family(Z) ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: family(Z) ===> java.util.regex.Pattern: read()
java.util.regex.Pattern: family(Z) ===> java.util.regex.Pattern: unicodeBlockPropertyFor(Ljava/lang/String;)
java.util.regex.Pattern: findSupplementary(II) ===> java.util.regex.Pattern: isSupplementary(I)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Behind: <init>(Ljava/util/regex/Pattern$Node;II)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$BehindS: <init>(Ljava/util/regex/Pattern$Node;II)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Branch: <init>(Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$BranchConn: <init>()
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$GroupCurly: <init>(Ljava/util/regex/Pattern$Node;IIIIIZ)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$LazyLoop: <init>(II)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Loop: <init>(II)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Neg: <init>(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Node: study(Ljava/util/regex/Pattern$TreeInfo;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$NotBehind: <init>(Ljava/util/regex/Pattern$Node;II)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$NotBehindS: <init>(Ljava/util/regex/Pattern$Node;II)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Pos: <init>(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Prolog: <init>(Ljava/util/regex/Pattern$Loop;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$Ques: <init>(Ljava/util/regex/Pattern$Node;I)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern$TreeInfo: <init>()
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: accept(ILjava/lang/String;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: addFlag()
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: createGroup(Z)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: expr(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: findSupplementary(II)
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: read()
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: skip()
java.util.regex.Pattern: group0() ===> java.util.regex.Pattern: unread()
java.util.regex.Pattern: hasBaseCharacter(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: codePointAt(Ljava/lang/CharSequence;I)
java.util.regex.Pattern: hasBaseCharacter(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: getType(I)
java.util.regex.Pattern: hasBaseCharacter(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;) ===> java.lang.Character: isLetterOrDigit(I)
java.util.regex.Pattern: intersection(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;) ===> java.util.regex.Pattern$7: <init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)
java.util.regex.Pattern: isLineSeparator(I) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: isSupplementary(I) ===> java.util.regex.Pattern: isSurrogate(I)
java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;) ===> java.util.regex.Matcher: <init>(Ljava/util/regex/Pattern;Ljava/lang/CharSequence;)
java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;) ===> java.util.regex.Pattern: compile()
java.util.regex.Pattern: newSingle(I) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern: newSingle(I) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.ASCII: isAscii(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.ASCII: toLower(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.ASCII: toUpper(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.Pattern$Single: <init>(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.Pattern$SingleI: <init>(II)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.Pattern$SingleS: <init>(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.Pattern$SingleU: <init>(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: newSingle(I) ===> java.util.regex.Pattern: isSupplementary(I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.lang.Character: toLowerCase(I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.lang.Character: toUpperCase(I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.ASCII: toLower(I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.Pattern$Slice: <init>([I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.Pattern$SliceI: <init>([I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.Pattern$SliceIS: <init>([I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.Pattern$SliceS: <init>([I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.Pattern$SliceU: <init>([I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.Pattern$SliceUS: <init>([I)
java.util.regex.Pattern: newSlice([IIZ) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: next() ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: next() ===> java.util.regex.Pattern: peekPastWhitespace(I)
java.util.regex.Pattern: normalize() ===> java.lang.Character: charCount(I)
java.util.regex.Pattern: normalize() ===> java.lang.Character: getType(I)
java.util.regex.Pattern: normalize() ===> java.lang.String: codePointAt(I)
java.util.regex.Pattern: normalize() ===> java.lang.String: length()
java.util.regex.Pattern: normalize() ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: normalize() ===> java.lang.StringBuilder: <init>(I)
java.util.regex.Pattern: normalize() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: normalize() ===> java.lang.StringBuilder: appendCodePoint(I)
java.util.regex.Pattern: normalize() ===> java.lang.StringBuilder: length()
java.util.regex.Pattern: normalize() ===> java.lang.StringBuilder: setLength(I)
java.util.regex.Pattern: normalize() ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: normalize() ===> java.text.Normalizer: normalize(Ljava/lang/CharSequence;Ljava/text/Normalizer$Form;)
java.util.regex.Pattern: normalize() ===> java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I)
java.util.regex.Pattern: normalize() ===> java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.Character: getType(I)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.String: codePointAt(I)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.String: length()
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.StringBuilder: append(C)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.StringBuilder: appendCodePoint(I)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.StringBuilder: length()
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.StringBuilder: setLength(I)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: normalizeCharClass(Ljava/lang/StringBuilder;I) ===> java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;)
java.util.regex.Pattern: o() ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: o() ===> java.util.regex.Pattern: read()
java.util.regex.Pattern: o() ===> java.util.regex.Pattern: unread()
java.util.regex.Pattern: parsePastLine() ===> java.util.regex.Pattern: isLineSeparator(I)
java.util.regex.Pattern: parsePastWhitespace(I) ===> java.util.regex.ASCII: isSpace(I)
java.util.regex.Pattern: parsePastWhitespace(I) ===> java.util.regex.Pattern: parsePastLine()
java.util.regex.Pattern: peek() ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: peek() ===> java.util.regex.Pattern: peekPastWhitespace(I)
java.util.regex.Pattern: peekPastLine() ===> java.util.regex.Pattern: isLineSeparator(I)
java.util.regex.Pattern: peekPastWhitespace(I) ===> java.util.regex.ASCII: isSpace(I)
java.util.regex.Pattern: peekPastWhitespace(I) ===> java.util.regex.Pattern: peekPastLine()
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.lang.String: length()
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.lang.String: substring(I)
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.lang.String: substring(II)
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>(Ljava/lang/String;)
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.util.regex.Pattern: composeOneStep(Ljava/lang/String;)
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II)
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;)
java.util.regex.Pattern: produceEquivalentAlternation(Ljava/lang/String;) ===> java.util.regex.Pattern: producePermutations(Ljava/lang/String;)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.Character: charCount(I)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.Character: codePointAt(Ljava/lang/CharSequence;I)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.String: length()
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.String: substring(II)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>(I)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>(Ljava/lang/String;)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.StringBuilder: appendCodePoint(I)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.StringBuilder: delete(II)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.util.regex.Pattern: countChars(Ljava/lang/CharSequence;II)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.util.regex.Pattern: countCodePoints(Ljava/lang/CharSequence;)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.util.regex.Pattern: getClass(I)
java.util.regex.Pattern: producePermutations(Ljava/lang/String;) ===> java.util.regex.Pattern: producePermutations(Ljava/lang/String;)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.lang.StringBuilder: append(C)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern$CharProperty: maybeComplement(Z)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: bitsOrSingle(Ljava/util/regex/Pattern$BitClass;I)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: caseInsensitiveRangeFor(II)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: escape(ZZ)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: family(Z)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: nextEscaped()
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: rangeFor(II)
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: single()
java.util.regex.Pattern: range(Ljava/util/regex/Pattern$BitClass;) ===> java.util.regex.Pattern: unread()
java.util.regex.Pattern: rangeFor(II) ===> java.util.regex.Pattern$2: <init>(II)
java.util.regex.Pattern: read() ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: read() ===> java.util.regex.Pattern: parsePastWhitespace(I)
java.util.regex.Pattern: ref(I) ===> java.util.regex.Pattern$BackRef: <init>(I)
java.util.regex.Pattern: ref(I) ===> java.util.regex.Pattern$CIBackRef: <init>(IZ)
java.util.regex.Pattern: ref(I) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: ref(I) ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: ref(I) ===> java.util.regex.Pattern: read()
java.util.regex.Pattern: RemoveQEQuoting() ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.regex.Pattern: RemoveQEQuoting() ===> java.util.Arrays: copyOf([II)
java.util.regex.Pattern: RemoveQEQuoting() ===> java.util.regex.ASCII: isAlnum(I)
java.util.regex.Pattern: RemoveQEQuoting() ===> java.util.regex.ASCII: isAscii(I)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.lang.StringBuilder: append(C)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$All: <init>()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Begin: <init>()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Caret: <init>()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$CharProperty: maybeComplement(Z)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Dollar: <init>(Z)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$Dot: <init>()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$UnixCaret: <init>()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$UnixDollar: <init>(Z)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern$UnixDot: <init>()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: atom()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: clazz(Z)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: closure(Ljava/util/regex/Pattern$Node;)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: family(Z)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: group0()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: has(I)
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: nextEscaped()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: sequence(Ljava/util/regex/Pattern$Node;) ===> java.util.regex.Pattern: unread()
java.util.regex.Pattern: setDifference(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;) ===> java.util.regex.Pattern$8: <init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)
java.util.regex.Pattern: single() ===> java.util.regex.Pattern: escape(ZZ)
java.util.regex.Pattern: single() ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: single() ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.lang.CharSequence: length()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.lang.CharSequence: subSequence(II)
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.lang.Object: toString()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.lang.String: equals(Ljava/lang/Object;)
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.ArrayList: <init>()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.ArrayList: add(Ljava/lang/Object;)
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.ArrayList: get(I)
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.ArrayList: size()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.ArrayList: subList(II)
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.List: toArray([Ljava/lang/Object;)
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.regex.Matcher: end()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.regex.Matcher: find()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.regex.Matcher: start()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;)
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> org.clapper.argot.CommandLineOption: toString()
java.util.regex.Pattern: split(Ljava/lang/CharSequence;I) ===> org.clapper.argot.Parameter: toString()
java.util.regex.Pattern: subFlag() ===> java.util.regex.Pattern: next()
java.util.regex.Pattern: subFlag() ===> java.util.regex.Pattern: peek()
java.util.regex.Pattern: u() ===> java.util.regex.ASCII: isHexDigit(I)
java.util.regex.Pattern: u() ===> java.util.regex.ASCII: toDigit(I)
java.util.regex.Pattern: u() ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: u() ===> java.util.regex.Pattern: read()
java.util.regex.Pattern: unicodeBlockPropertyFor(Ljava/lang/String;) ===> java.lang.Character$UnicodeBlock: forName(Ljava/lang/String;)
java.util.regex.Pattern: unicodeBlockPropertyFor(Ljava/lang/String;) ===> java.lang.StringBuilder: <init>()
java.util.regex.Pattern: unicodeBlockPropertyFor(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.regex.Pattern: unicodeBlockPropertyFor(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
java.util.regex.Pattern: unicodeBlockPropertyFor(Ljava/lang/String;) ===> java.util.regex.Pattern$1: <init>(Ljava/util/regex/Pattern;Ljava/lang/Character$UnicodeBlock;)
java.util.regex.Pattern: unicodeBlockPropertyFor(Ljava/lang/String;) ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: union(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;) ===> java.util.regex.Pattern$6: <init>(Ljava/util/regex/Pattern$CharProperty;Ljava/util/regex/Pattern$CharProperty;)
java.util.regex.Pattern: x() ===> java.util.regex.ASCII: isHexDigit(I)
java.util.regex.Pattern: x() ===> java.util.regex.ASCII: toDigit(I)
java.util.regex.Pattern: x() ===> java.util.regex.Pattern: error(Ljava/lang/String;)
java.util.regex.Pattern: x() ===> java.util.regex.Pattern: read()
java.util.regex.PatternSyntaxException: <clinit>() ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedAction;)
java.util.regex.PatternSyntaxException: <init>(Ljava/lang/String;Ljava/lang/String;I) ===> java.lang.IllegalArgumentException: <init>()
java.util.regex.PatternSyntaxException: getMessage() ===> java.lang.StringBuffer: <init>()
java.util.regex.PatternSyntaxException: getMessage() ===> java.lang.StringBuffer: append(C)
java.util.regex.PatternSyntaxException: getMessage() ===> java.lang.StringBuffer: append(I)
java.util.regex.PatternSyntaxException: getMessage() ===> java.lang.StringBuffer: append(Ljava/lang/String;)
java.util.regex.PatternSyntaxException: getMessage() ===> java.lang.StringBuffer: toString()
java.util.Stack: <init>() ===> java.util.Vector: <init>()
java.util.Stack: peek() ===> java.util.EmptyStackException: <init>()
java.util.Stack: peek() ===> java.util.Stack: elementAt(I)
java.util.Stack: peek() ===> java.util.Stack: size()
java.util.Stack: pop() ===> java.util.Stack: peek()
java.util.Stack: pop() ===> java.util.Stack: removeElementAt(I)
java.util.Stack: pop() ===> java.util.Stack: size()
java.util.Stack: push(Ljava/lang/Object;) ===> java.util.Stack: addElement(Ljava/lang/Object;)
java.util.TimeZone$1: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
java.util.TimeZone: <clinit>() ===> java.util.Hashtable: <init>(I)
java.util.TimeZone: getDefaultRef() ===> java.lang.AssertionError: <init>()
java.util.TimeZone: getDefaultRef() ===> java.util.TimeZone: getDefaultInAppContext()
java.util.TimeZone: getDefaultRef() ===> java.util.TimeZone: setDefaultZone()
java.util.TimeZone: getTimeZone(Ljava/lang/String;Z) ===> java.util.TimeZone: parseCustomTimeZone(Ljava/lang/String;)
java.util.TimeZone: parseCustomTimeZone(Ljava/lang/String;) ===> java.lang.String: charAt(I)
java.util.TimeZone: parseCustomTimeZone(Ljava/lang/String;) ===> java.lang.String: indexOf(Ljava/lang/String;)
java.util.TimeZone: parseCustomTimeZone(Ljava/lang/String;) ===> java.lang.String: length()
java.util.TimeZone: setDefaultZone() ===> java.lang.AssertionError: <init>()
java.util.TimeZone: setDefaultZone() ===> java.lang.String: equals(Ljava/lang/Object;)
java.util.TimeZone: setDefaultZone() ===> java.security.AccessController: doPrivileged(Ljava/security/PrivilegedAction;)
java.util.TimeZone: setDefaultZone() ===> java.util.TimeZone$1: <init>(Ljava/lang/String;)
java.util.TimeZone: setDefaultZone() ===> java.util.TimeZone: getSystemGMTOffsetID()
java.util.TimeZone: setDefaultZone() ===> java.util.TimeZone: getSystemTimeZoneID(Ljava/lang/String;Ljava/lang/String;)
java.util.TimeZone: setDefaultZone() ===> java.util.TimeZone: getTimeZone(Ljava/lang/String;Z)
java.util.UnknownFormatConversionException: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.util.UnknownFormatConversionException: <init>(Ljava/lang/String;) ===> java.util.IllegalFormatException: <init>()
java.util.UnknownFormatConversionException: getMessage() ===> java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;)
java.util.UnknownFormatFlagsException: <init>(Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
java.util.UnknownFormatFlagsException: <init>(Ljava/lang/String;) ===> java.util.IllegalFormatException: <init>()
java.util.UnknownFormatFlagsException: getMessage() ===> java.lang.StringBuilder: <init>()
java.util.UnknownFormatFlagsException: getMessage() ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.UnknownFormatFlagsException: getMessage() ===> java.lang.StringBuilder: toString()
java.util.Vector$Itr: <init>(Ljava/util/Vector;) ===> java.lang.Object: <init>()
java.util.Vector$Itr: <init>(Ljava/util/Vector;Ljava/util/Vector$1;) ===> java.util.Vector$Itr: <init>(Ljava/util/Vector;)
java.util.Vector$Itr: checkForComodification() ===> java.util.ConcurrentModificationException: <init>()
java.util.Vector$Itr: next() ===> java.util.NoSuchElementException: <init>()
java.util.Vector$Itr: next() ===> java.util.Vector$Itr: checkForComodification()
java.util.Vector$Itr: next() ===> java.util.Vector: elementData(I)
java.util.Vector$ListItr: <init>(Ljava/util/Vector;I) ===> java.util.Vector$Itr: <init>(Ljava/util/Vector;Ljava/util/Vector$1;)
java.util.Vector: <init>() ===> java.util.Vector: <init>(I)
java.util.Vector: <init>(I) ===> java.util.Vector: <init>(II)
java.util.Vector: <init>(II) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
java.util.Vector: <init>(II) ===> java.lang.StringBuilder: <init>()
java.util.Vector: <init>(II) ===> java.lang.StringBuilder: append(I)
java.util.Vector: <init>(II) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Vector: <init>(II) ===> java.lang.StringBuilder: toString()
java.util.Vector: <init>(II) ===> java.util.AbstractList: <init>()
java.util.Vector: addElement(Ljava/lang/Object;) ===> java.util.Vector: ensureCapacityHelper(I)
java.util.Vector: clone() ===> java.lang.InternalError: <init>()
java.util.Vector: clone() ===> java.lang.Object: clone()
java.util.Vector: clone() ===> java.util.Arrays: copyOf([Ljava/lang/Object;I)
java.util.Vector: contains(Ljava/lang/Object;) ===> java.util.Vector: indexOf(Ljava/lang/Object;I)
java.util.Vector: elementAt(I) ===> java.lang.ArrayIndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.Vector: elementAt(I) ===> java.lang.StringBuilder: <init>()
java.util.Vector: elementAt(I) ===> java.lang.StringBuilder: append(I)
java.util.Vector: elementAt(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Vector: elementAt(I) ===> java.lang.StringBuilder: toString()
java.util.Vector: elementAt(I) ===> java.util.Vector: elementData(I)
java.util.Vector: ensureCapacityHelper(I) ===> java.util.Arrays: copyOf([Ljava/lang/Object;I)
java.util.Vector: equals(Ljava/lang/Object;) ===> java.util.AbstractList: equals(Ljava/lang/Object;)
java.util.Vector: get(I) ===> java.lang.ArrayIndexOutOfBoundsException: <init>(I)
java.util.Vector: get(I) ===> java.util.Vector: elementData(I)
java.util.Vector: hashCode() ===> java.util.AbstractList: hashCode()
java.util.Vector: indexOf(Ljava/lang/Object;I) ===> java.lang.Object: equals(Ljava/lang/Object;)
java.util.Vector: indexOf(Ljava/lang/Object;I) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
java.util.Vector: iterator() ===> java.util.Vector$Itr: <init>(Ljava/util/Vector;Ljava/util/Vector$1;)
java.util.Vector: listIterator() ===> java.util.Vector$ListItr: <init>(Ljava/util/Vector;I)
java.util.Vector: listIterator(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.Vector: listIterator(I) ===> java.lang.StringBuilder: <init>()
java.util.Vector: listIterator(I) ===> java.lang.StringBuilder: append(I)
java.util.Vector: listIterator(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Vector: listIterator(I) ===> java.lang.StringBuilder: toString()
java.util.Vector: listIterator(I) ===> java.util.Vector$ListItr: <init>(Ljava/util/Vector;I)
java.util.Vector: removeElementAt(I) ===> java.lang.ArrayIndexOutOfBoundsException: <init>(I)
java.util.Vector: removeElementAt(I) ===> java.lang.ArrayIndexOutOfBoundsException: <init>(Ljava/lang/String;)
java.util.Vector: removeElementAt(I) ===> java.lang.StringBuilder: <init>()
java.util.Vector: removeElementAt(I) ===> java.lang.StringBuilder: append(I)
java.util.Vector: removeElementAt(I) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
java.util.Vector: removeElementAt(I) ===> java.lang.StringBuilder: toString()
java.util.Vector: removeElementAt(I) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Vector: toArray([Ljava/lang/Object;) ===> java.lang.Object: getClass()
java.util.Vector: toArray([Ljava/lang/Object;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
java.util.Vector: toArray([Ljava/lang/Object;) ===> java.util.Arrays: copyOf([Ljava/lang/Object;ILjava/lang/Class;)
java.util.Vector: toString() ===> java.util.AbstractList: toString()


org.clapper.argot.ArgotConverters$: <clinit>() ===> org.clapper.argot.ArgotConverters: <init>()
org.clapper.argot.ArgotConverters: convertInt(s: String,opt: org.clapper.argot.CommandLineArgument[Int]) ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.ArgotConverters: convertInt(s: String,opt: org.clapper.argot.CommandLineArgument[Int]) ===> org.clapper.argot.FlagOption: name()
org.clapper.argot.ArgotConverters: convertInt(s: String,opt: org.clapper.argot.CommandLineArgument[Int]) ===> org.clapper.argot.Parameter: name()
org.clapper.argot.ArgotException: <init>(message: String,cause: Option[Throwable]) ===> java.lang.Exception: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotException: <init>(message: String,cause: Option[Throwable]) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.ArgotException: <init>(message: String,cause: Option[Throwable]) ===> org.clapper.argot.ArgotException: initCause(Ljava/lang/Throwable;)
org.clapper.argot.ArgotException: <init>(message: String,cause: Option[Throwable]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$14: String,x$15: String)
org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$16: String)
org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$17: String,x$18: String)
org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$20: String,x$21: String)
org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$22: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
org.clapper.argot.ArgotParser$$anonfun$15: apply() ===> org.clapper.argot.ArgotParser.$anonfun: apply()
org.clapper.argot.ArgotParser$$anonfun$16: apply() ===> org.clapper.argot.ArgotParser.$anonfun: apply()
org.clapper.argot.ArgotParser$$anonfun$17: apply() ===> org.clapper.argot.ArgotParser.$anonfun: apply()
org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(args: Seq[Int])
org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(opt: org.clapper.argot.CommandLineOption[_])
org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$13: String)
org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$26: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$27: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$28: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$24: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$25: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(key: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$23: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$: <clinit>() ===> org.clapper.argot.ArgotParser: <init>()
org.clapper.argot.ArgotParser.$anonfun.$anonfun: <init>() ===> java.lang.NullPointerException: <init>()
org.clapper.argot.ArgotParser.$anonfun.$anonfun: apply(name: String) ===> org.clapper.argot.ArgotParser$$anonfun$8: org$clapper$argot$ArgotParser$$anonfun$$$outer()
org.clapper.argot.ArgotParser.$anonfun: <init>() ===> java.lang.NullPointerException: <init>()
org.clapper.argot.ArgotParser.$anonfun: apply() ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser.$anonfun: apply() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply() ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser.$anonfun: apply(args: Seq[Int]) ===> grizzled.math.util$: max(Lscala/collection/Seq;)
org.clapper.argot.ArgotParser.$anonfun: apply(name: String) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser.$anonfun: apply(name: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(name: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(name: String) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser.$anonfun: apply(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.immutable.List$: canBuildFrom()
org.clapper.argot.ArgotParser.$anonfun: apply(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.immutable.List: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_]) ===> scala.MatchError: <init>(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> grizzled.string.WordWrapper: wrap(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.collection.mutable.Map: $plus$eq(Lscala/Tuple2;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.Predef$: any2ArrowAssoc(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.Predef$ArrowAssoc$: $minus$greater$extension(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(s: String) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
org.clapper.argot.ArgotParser.$anonfun: apply(x$14: String,x$15: String) ===> scala.collection.immutable.StringOps: $less(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$14: String,x$15: String) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$14: String,x$15: String) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$17: String,x$18: String) ===> scala.collection.immutable.StringOps: $less(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$17: String,x$18: String) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$17: String,x$18: String) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$20: String,x$21: String) ===> scala.collection.immutable.StringOps: $less(Ljava/lang/Object;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$20: String,x$21: String) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser.$anonfun: apply(x$20: String,x$21: String) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: <init>(programName: String,compactUsage: Boolean,outputWidth: Int,preUsage: Option[String],postUsage: Option[String],sortUsage: Boolean) ===> scala.collection.mutable.Map$: empty()
org.clapper.argot.ArgotParser: <init>(programName: String,compactUsage: Boolean,outputWidth: Int,preUsage: Option[String],postUsage: Option[String],sortUsage: Boolean) ===> scala.Predef$: require(Z)
org.clapper.argot.ArgotParser: checkForMultiParam(param: org.clapper.argot.Parameter[_]) ===> org.clapper.argot.Parameter: name()
org.clapper.argot.ArgotParser: checkForMultiParam(param: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.LinkedHashSet: last()
org.clapper.argot.ArgotParser: checkForMultiParam(param: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: checkForMultiParam(param: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: checkForMultiParam(param: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List$: canBuildFrom()
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List: count(Lscala/Function1;)
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List: filter(Lscala/Function1;)
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.TraversableLike: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: checkOptionalStatus(param: org.clapper.argot.Parameter[_],optionalSpec: Boolean) ===> scala.collection.mutable.LinkedHashSet: last()
org.clapper.argot.ArgotParser: checkOptionalStatus(param: org.clapper.argot.Parameter[_],optionalSpec: Boolean) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: checkOptionalStatus(param: org.clapper.argot.Parameter[_],optionalSpec: Boolean) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: checkOptionalStatus(param: org.clapper.argot.Parameter[_],optionalSpec: Boolean) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> scala.collection.immutable.StringOps: toList()
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> scala.runtime.BoxesRunTime: unboxToChar(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: flag([T]namesOn: List[String],namesOff: List[String],description: String,implicit convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: flag([T]namesOn: List[String],namesOff: List[String],description: String,implicit convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.mutable.LinkedHashSet: $plus$eq(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> grizzled.string.WordWrapper$: $lessinit$greater$default$2()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> grizzled.string.WordWrapper$: $lessinit$greater$default$4()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> grizzled.string.WordWrapper: <init>(IILjava/lang/String;C)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> grizzled.string.WordWrapper: wrap(Ljava/lang/String;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> org.clapper.argot.MultiValueArg: supportsMultipleValues()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> org.clapper.argot.SingleValueArg: supportsMultipleValues()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.List: apply(I)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.List: filter(Lscala/Function1;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.List: length()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.List: take(I)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.List: takeRight(I)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.StringOps: $times(I)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.mutable.LinkedHashMap: apply(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.SeqLike: sortWith(Lscala/Function2;)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> grizzled.string.WordWrapper$: $lessinit$greater$default$2()
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> grizzled.string.WordWrapper$: $lessinit$greater$default$4()
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> grizzled.string.WordWrapper: <init>(IILjava/lang/String;C)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> grizzled.string.WordWrapper: wrap(Ljava/lang/String;)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.immutable.StringOps: $times(I)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.mutable.StringBuilder: append(C)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: multiOption([T]names: List[String],valueName: String,description: String,implicit convert: String, org.clapper.argot.MultiValueOption[T]) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: multiOption([T]names: List[String],valueName: String,description: String,implicit convert: String, org.clapper.argot.MultiValueOption[T]) ===> scala.collection.mutable.LinkedHashSet: $plus$eq(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: option([T]names: List[String],valueName: String,description: String,implicit convert: String, org.clapper.argot.SingleValueOption[T]) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: option([T]names: List[String],valueName: String,description: String,implicit convert: String, org.clapper.argot.SingleValueOption[T]) ===> scala.collection.mutable.LinkedHashSet: $plus$eq(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.MultiValueOption: valueName()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.MultiValueParameter: valueName()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.SingleValueOption: valueName()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.SingleValueParameter: valueName()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: paramString(p: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: paramString(p: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: paramString(p: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: parse(args: Array[String]) ===> scala.collection.mutable.ArrayOps: toList()
org.clapper.argot.ArgotParser: parse(args: Array[String]) ===> scala.Predef$: refArrayOps([Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseArgList(a: List[String]) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseArgList(a: List[String]) ===> java.lang.String: startsWith(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseArgList(a: List[String]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser: parseArgList(a: List[String]) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
org.clapper.argot.ArgotParser: parseArgList(a: List[String]) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.FlagOption: setByName(name: String)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.List: drop(I)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.StringOps: drop(I)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.StringOps: take(I)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.Map: getOrElse(Ljava/lang/Object;Lscala/Function0;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.MatchError: <init>(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.Predef$: assert(Z)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.Predef$: wrapRefArray([Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> java.lang.String: startsWith(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> org.clapper.argot.FlagOption: setByName(name: String)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.immutable.List: apply(I)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.immutable.List: drop(I)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.immutable.List: length()
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.immutable.List: take(I)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.immutable.StringOps: drop(I)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.mutable.Map: getOrElse(Ljava/lang/Object;Lscala/Function0;)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.Predef$: assert(Z)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List: apply(I)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List: drop(I)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List: length()
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.immutable.List: take(I)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.MatchError: <init>(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseParams(a: List[String]) ===> scala.collection.mutable.LinkedHashSet: toList()
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.FlagOption: setByName(name: String)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.List: apply(I)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.List: drop(I)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.List: length()
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.Map: getOrElse(Ljava/lang/Object;Lscala/Function0;)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.Predef$: assert(Z)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> java.lang.String: startsWith(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.immutable.List: apply(I)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.immutable.List: take(I)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.immutable.StringOps: drop(I)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.Predef$: assert(Z)
org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotParser: replaceOption(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.immutable.List: filter(Lscala/Function1;)
org.clapper.argot.ArgotParser: replaceOption(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: replaceOption(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.collection.mutable.LinkedHashMap: $plus$eq(Lscala/Tuple2;)
org.clapper.argot.ArgotParser: replaceOption(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.Predef$: any2ArrowAssoc(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: replaceOption(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.Predef$ArrowAssoc$: $minus$greater$extension(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.ArgotParser: replaceParameter(param: org.clapper.argot.Parameter[_]) ===> scala.collection.mutable.LinkedHashSet: $plus$eq(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: usage(message: String) ===> scala.Some: <init>(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> grizzled.string.WordWrapper$: $lessinit$greater$default$2()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> grizzled.string.WordWrapper$: $lessinit$greater$default$3()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> grizzled.string.WordWrapper$: $lessinit$greater$default$4()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> grizzled.string.WordWrapper: <init>(IILjava/lang/String;C)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.immutable.List: sortWith(Lscala/Function2;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.Iterable$: canBuildFrom()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.Iterable: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.Iterable: max(Lscala/math/Ordering;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.LinkedHashMap: values()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.LinkedHashSet$: canBuildFrom()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.LinkedHashSet: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.LinkedHashSet: toList()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.StringBuilder: append(C)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.Set: toList()
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.TraversableOnce: max(Lscala/math/Ordering;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.Option: foreach(Lscala/Function1;)
org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
org.clapper.argot.ArgotSpecificationError: <init>(message: String) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotSpecificationError: <init>(message: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotSpecificationError: <init>(message: String) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[Int])
org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply() ===> org.clapper.argot.ArgotTest.$anonfun.$anonfun: apply()
org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply() ===> scala.runtime.BoxesRunTime: boxToInteger(I)
org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int])
org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean])
org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[String])
org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String])
org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[String])
org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.Parameter[java.io.File])
org.clapper.argot.ArgotTest$: <clinit>() ===> org.clapper.argot.ArgotTest: <init>()
org.clapper.argot.ArgotTest.$anonfun.$anonfun: <init>() ===> scala.runtime.AbstractFunction0$mcI$sp: <init>()
org.clapper.argot.ArgotTest.$anonfun.$anonfun: apply() ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply$mcI$sp()
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean]) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean]) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int]) ===> org.clapper.argot.FlagOption: value()
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int]) ===> scala.math.package$: max(II)
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int]) ===> scala.Option: getOrElse(Lscala/Function0;)
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int]) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.collection.immutable.StringOps: r()
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.MatchError: <init>(Ljava/lang/Object;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> scala.util.matching.Regex: findFirstIn(Ljava/lang/CharSequence;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.Parameter[java.io.File]) ===> java.io.File: <init>(Ljava/lang/String;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.Parameter[java.io.File]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.Parameter[java.io.File]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.Parameter[java.io.File]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotTest: <init>() ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
org.clapper.argot.ArgotTest: <init>() ===> scala.Predef$: wrapRefArray([Ljava/lang/Object;)
org.clapper.argot.ArgotTest: <init>() ===> scala.Some: <init>(Ljava/lang/Object;)
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.ArgotTest: main(args: Array[String])
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.FlagOption: value()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.MultiValueArg: value()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.SingleValueArg: value()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> scala.Predef$: println(Ljava/lang/Object;)
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> java.lang.Object: getClass()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.FlagOption: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.MultiValueOption: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.MultiValueParameter: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.SingleValueOption: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.SingleValueParameter: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> scala.runtime.BoxesRunTime: equals(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.CommandLineArgument: hashCode() ===> java.lang.Object: hashCode()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.CommandLineArgument: hashCode()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.FlagOption: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.MultiValueOption: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.MultiValueParameter: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.SingleValueOption: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.SingleValueParameter: key()
org.clapper.argot.CommandLineOption: key() ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.CommandLineOption: key() ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.CommandLineOption: key() ===> org.clapper.argot.FlagOption: name()
org.clapper.argot.CommandLineOption: name() ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.CommandLineOption: name() ===> org.clapper.argot.FlagOption: names()
org.clapper.argot.CommandLineOption: name() ===> scala.collection.immutable.List: apply(I)
org.clapper.argot.CommandLineOption: name() ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.CommandLineOption: name() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.CommandLineOption: name() ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.CommandLineOption: name() ===> scala.MatchError: <init>(Ljava/lang/Object;)
org.clapper.argot.CommandLineOption: toString() ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.CommandLineOption: toString() ===> org.clapper.argot.CommandLineOption: toString()
org.clapper.argot.CommandLineOption: toString() ===> org.clapper.argot.FlagOption: name()
org.clapper.argot.CommandLineOption: toString() ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.CommandLineOption: toString() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.CommandLineOption: toString() ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply$mcI$sp() ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply$mcI$sp() ===> scala.collection.immutable.StringOps: toInt()
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply$mcI$sp() ===> scala.Predef$: augmentString(Ljava/lang/String;)
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply() ===> org.clapper.argot.Conversions.$anonfun: apply()
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply() ===> scala.runtime.BoxesRunTime: boxToInteger(I)
org.clapper.argot.Conversions$: <clinit>() ===> org.clapper.argot.Conversions: <init>()
org.clapper.argot.Conversions.$anonfun: <init>() ===> scala.runtime.AbstractFunction0$mcI$sp: <init>()
org.clapper.argot.Conversions.$anonfun: apply() ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply$mcI$sp()
org.clapper.argot.Conversions: parseInt(s: String,opt: String) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$4: String)
org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$5: String)
org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$6: String)
org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$7: String)
org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$10: String)
org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(s: String)
org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption.$anonfun: <init>() ===> java.lang.NullPointerException: <init>()
org.clapper.argot.FlagOption: <init>(parent: org.clapper.argot.ArgotParser,namesOn: List[String],namesOff: List[String],description: String,convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;)
org.clapper.argot.FlagOption: <init>(parent: org.clapper.argot.ArgotParser,namesOn: List[String],namesOff: List[String],description: String,convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.immutable.List: filter(Lscala/Function1;)
org.clapper.argot.FlagOption: <init>(parent: org.clapper.argot.ArgotParser,namesOn: List[String],namesOff: List[String],description: String,convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.TraversableOnce: toSet()
org.clapper.argot.FlagOption: <init>(parent: org.clapper.argot.ArgotParser,namesOn: List[String],namesOff: List[String],description: String,convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.Predef$: require(Z)
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.ArgotException: <init>(msg: String)
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: longNamesOffSet()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: longNamesOnSet()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: name()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: shortNamesOffSet()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: shortNamesOnSet()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> scala.collection.immutable.Set: contains(Ljava/lang/Object;)
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.FlagOption: convert()
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.FlagOption: flagValue_=(x$1: Option[T])
org.clapper.argot.FlagOption: clear() ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption: clear() ===> scala.Some: <init>(Ljava/lang/Object;)
org.clapper.argot.FlagOption: inBoth(s: String) ===> scala.collection.immutable.Set: $bar(Lscala/collection/GenSet;)
org.clapper.argot.FlagOption: inBoth(s: String) ===> scala.collection.SetLike: contains(Ljava/lang/Object;)
org.clapper.argot.FlagOption: key() ===> org.clapper.argot.FlagOption: key()
org.clapper.argot.FlagOption: key() ===> scala.collection.immutable.List: mkString(Ljava/lang/String;)
org.clapper.argot.FlagOption: key() ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.FlagOption: key() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.FlagOption: key() ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.FlagOption: name() ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.FlagOption: name() ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.FlagOption: name() ===> scala.collection.immutable.List: apply(I)
org.clapper.argot.FlagOption: name() ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.FlagOption: name() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.FlagOption: name() ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.FlagOption: name() ===> scala.MatchError: <init>(Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.FlagOption: convert()
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.FlagOption: flagValue_=(x$1: Option[T])
org.clapper.argot.FlagOption: set() ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.FlagOption: set() ===> scala.Some: <init>(Ljava/lang/Object;)
org.clapper.argot.FlagOption: setByName(name: String) ===> java.lang.String: length()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: checkValidity(optName: String)
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: clear()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: longNamesOnSet()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: set()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: shortNamesOnSet()
org.clapper.argot.FlagOption: setByName(name: String) ===> scala.collection.immutable.Set: contains(Ljava/lang/Object;)
org.clapper.argot.FlagOption: setByName(name: String) ===> scala.Predef$: assert(Z)
org.clapper.argot.FlagOption: value() ===> org.clapper.argot.FlagOption: flagValue()
org.clapper.argot.FlagOption: wellDefined() ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.FlagOption: wellDefined() ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.FlagOption: wellDefined() ===> scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;)
org.clapper.argot.FlagOption: wellDefined() ===> scala.collection.immutable.List: exists(Lscala/Function1;)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.MultiValueOption: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.MultiValueParameter: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.SingleValueOption: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.SingleValueParameter: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: setFromString(s: String) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueArg: optValue_=(x$1: Seq[T])
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueOption: org$clapper$argot$MultiValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueParameter: org$clapper$argot$MultiValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.MultiValueArg: $init$() ===> scala.collection.Seq$: empty()
org.clapper.argot.MultiValueArg: storeValue(v: T) ===> org.clapper.argot.MultiValueArg: storeValue(v: T)
org.clapper.argot.MultiValueArg: storeValue(v: T) ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
org.clapper.argot.MultiValueArg: storeValue(v: T) ===> scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;)
org.clapper.argot.MultiValueArg: storeValue(v: T) ===> scala.collection.Seq: toList()
org.clapper.argot.MultiValueArg: storeValue(v: T) ===> scala.Predef$: genericWrapArray(Ljava/lang/Object;)
org.clapper.argot.MultiValueArg: value() ===> org.clapper.argot.MultiValueArg: optValue()
org.clapper.argot.MultiValueArg: value() ===> org.clapper.argot.MultiValueArg: value()
org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.MultiValueOption.$anonfun: apply(x$3: String)
org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.MultiValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.MultiValueOption[T]) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.MultiValueOption[T]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.MultiValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.MultiValueOption[T]) ===> scala.collection.immutable.List: exists(Lscala/Function1;)
org.clapper.argot.MultiValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.MultiValueOption[T]) ===> scala.Predef$: require(Z)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: key() ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.MultiValueParameter: key() ===> org.clapper.argot.Parameter: key()
org.clapper.argot.Parameter: $init$() ===> scala.Predef$: require(Z)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.Parameter: convertString(s: String)
org.clapper.argot.Parameter: convertString(s: String) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: key() ===> org.clapper.argot.MultiValueParameter: valueName()
org.clapper.argot.Parameter: key() ===> org.clapper.argot.Parameter: key()
org.clapper.argot.Parameter: key() ===> org.clapper.argot.SingleValueParameter: valueName()
org.clapper.argot.Parameter: name() ===> org.clapper.argot.Parameter: name()
org.clapper.argot.Parameter: toString() ===> org.clapper.argot.MultiValueParameter: valueName()
org.clapper.argot.Parameter: toString() ===> org.clapper.argot.Parameter: toString()
org.clapper.argot.Parameter: toString() ===> org.clapper.argot.SingleValueParameter: valueName()
org.clapper.argot.Parameter: toString() ===> scala.collection.mutable.StringBuilder: <init>()
org.clapper.argot.Parameter: toString() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
org.clapper.argot.Parameter: toString() ===> scala.collection.mutable.StringBuilder: toString()
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueArg: optValue_=(x$1: Option[T])
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueOption: org$clapper$argot$SingleValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueParameter: org$clapper$argot$SingleValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.SingleValueArg: storeValue(v: T) ===> org.clapper.argot.SingleValueArg: storeValue(v: T)
org.clapper.argot.SingleValueArg: storeValue(v: T) ===> scala.Some: <init>(Ljava/lang/Object;)
org.clapper.argot.SingleValueArg: value() ===> org.clapper.argot.SingleValueArg: optValue()
org.clapper.argot.SingleValueArg: value() ===> org.clapper.argot.SingleValueArg: value()
org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.SingleValueOption.$anonfun: apply(x$2: String)
org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
org.clapper.argot.SingleValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.SingleValueOption[T]) ===> java.lang.Object: equals(Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.SingleValueOption[T]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.SingleValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.SingleValueOption[T]) ===> scala.collection.immutable.List: exists(Lscala/Function1;)
org.clapper.argot.SingleValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.SingleValueOption[T]) ===> scala.Predef$: require(Z)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: key() ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.SingleValueParameter: key() ===> org.clapper.argot.Parameter: key()


scala.Array$: <clinit>() ===> scala.Array$: <init>()
scala.Array$: <init>() ===> scala.FallbackArrayBuilding: <init>()
scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II) ===> java.lang.Object: getClass()
scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II) ===> scala.Array$: slowcopy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.Array$: slowcopy(Ljava/lang/Object;ILjava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I)
scala.Array$: slowcopy(Ljava/lang/Object;ILjava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;)
scala.collection.$colon$plus$: <clinit>() ===> scala.collection.$colon$plus$: <init>()
scala.collection.$colon$plus$: <init>() ===> java.lang.Object: <init>()
scala.collection.$plus$colon$: <clinit>() ===> scala.collection.$plus$colon$: <init>()
scala.collection.$plus$colon$: <init>() ===> java.lang.Object: <init>()
scala.collection.AbstractIterable: <init>() ===> scala.collection.AbstractTraversable: <init>()
scala.collection.AbstractIterable: <init>() ===> scala.collection.GenIterable$class: $init$(Lscala/collection/GenIterable;)
scala.collection.AbstractIterable: <init>() ===> scala.collection.Iterable$class: $init$(Lscala/collection/Iterable;)
scala.collection.AbstractIterable: <init>() ===> scala.collection.IterableLike$class: $init$(Lscala/collection/IterableLike;)
scala.collection.AbstractIterable: canEqual(Ljava/lang/Object;) ===> scala.collection.IterableLike$class: canEqual(Lscala/collection/IterableLike;Ljava/lang/Object;)
scala.collection.AbstractIterable: companion() ===> scala.collection.Iterable$class: companion(Lscala/collection/Iterable;)
scala.collection.AbstractIterable: copyToArray(Ljava/lang/Object;II) ===> scala.collection.IterableLike$class: copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;II)
scala.collection.AbstractIterable: drop(I) ===> scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I)
scala.collection.AbstractIterable: forall(Lscala/Function1;) ===> scala.collection.IterableLike$class: forall(Lscala/collection/IterableLike;Lscala/Function1;)
scala.collection.AbstractIterable: foreach(Lscala/Function1;) ===> scala.collection.IterableLike$class: foreach(Lscala/collection/IterableLike;Lscala/Function1;)
scala.collection.AbstractIterable: head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.AbstractIterable: isEmpty() ===> scala.collection.IterableLike$class: isEmpty(Lscala/collection/IterableLike;)
scala.collection.AbstractIterable: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.AbstractIterable: seq() ===> scala.collection.Iterable$class: seq(Lscala/collection/Iterable;)
scala.collection.AbstractIterable: seq() ===> scala.collection.Iterable: seq()
scala.collection.AbstractIterable: take(I) ===> scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I)
scala.collection.AbstractIterable: thisCollection() ===> scala.collection.IterableLike$class: thisCollection(Lscala/collection/IterableLike;)
scala.collection.AbstractIterable: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.AbstractIterable: toStream() ===> scala.collection.IterableLike$class: toStream(Lscala/collection/IterableLike;)
scala.collection.AbstractIterator: $div$colon(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce$class: $div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)
scala.collection.AbstractIterator: <init>() ===> java.lang.Object: <init>()
scala.collection.AbstractIterator: <init>() ===> scala.collection.GenTraversableOnce$class: $init$(Lscala/collection/GenTraversableOnce;)
scala.collection.AbstractIterator: <init>() ===> scala.collection.Iterator$class: $init$(Lscala/collection/Iterator;)
scala.collection.AbstractIterator: <init>() ===> scala.collection.TraversableOnce$class: $init$(Lscala/collection/TraversableOnce;)
scala.collection.AbstractIterator: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.AbstractIterator: copyToArray(Ljava/lang/Object;I) ===> scala.collection.TraversableOnce$class: copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)
scala.collection.AbstractIterator: copyToArray(Ljava/lang/Object;II) ===> scala.collection.Iterator$class: copyToArray(Lscala/collection/Iterator;Ljava/lang/Object;II)
scala.collection.AbstractIterator: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce$class: foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)
scala.collection.AbstractIterator: forall(Lscala/Function1;) ===> scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;)
scala.collection.AbstractIterator: foreach(Lscala/Function1;) ===> scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;)
scala.collection.AbstractIterator: isEmpty() ===> scala.collection.Iterator$class: isEmpty(Lscala/collection/Iterator;)
scala.collection.AbstractIterator: isTraversableAgain() ===> scala.collection.Iterator$class: isTraversableAgain(Lscala/collection/Iterator;)
scala.collection.AbstractIterator: map(Lscala/Function1;) ===> scala.collection.Iterator$class: map(Lscala/collection/Iterator;Lscala/Function1;)
scala.collection.AbstractIterator: max(Lscala/math/Ordering;) ===> scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)
scala.collection.AbstractIterator: mkString(Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)
scala.collection.AbstractIterator: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.AbstractIterator: nonEmpty() ===> scala.collection.TraversableOnce$class: nonEmpty(Lscala/collection/TraversableOnce;)
scala.collection.AbstractIterator: reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.AbstractIterator: seq() ===> scala.collection.Iterator$class: seq(Lscala/collection/Iterator;)
scala.collection.AbstractIterator: seq() ===> scala.collection.Iterator: seq()
scala.collection.AbstractIterator: size() ===> scala.collection.TraversableOnce$class: size(Lscala/collection/TraversableOnce;)
scala.collection.AbstractIterator: to(Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableOnce$class: to(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.AbstractIterator: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)
scala.collection.AbstractIterator: toBuffer() ===> scala.collection.TraversableOnce$class: toBuffer(Lscala/collection/TraversableOnce;)
scala.collection.AbstractIterator: toList() ===> scala.collection.TraversableOnce$class: toList(Lscala/collection/TraversableOnce;)
scala.collection.AbstractIterator: toSet() ===> scala.collection.TraversableOnce$class: toSet(Lscala/collection/TraversableOnce;)
scala.collection.AbstractIterator: toStream() ===> scala.collection.Iterator$class: toStream(Lscala/collection/Iterator;)
scala.collection.AbstractIterator: toString() ===> scala.collection.Iterator$class: toString(Lscala/collection/Iterator;)
scala.collection.AbstractMap: <init>() ===> scala.collection.AbstractIterable: <init>()
scala.collection.AbstractMap: <init>() ===> scala.collection.generic.Subtractable$class: $init$(Lscala/collection/generic/Subtractable;)
scala.collection.AbstractMap: <init>() ===> scala.collection.GenMapLike$class: $init$(Lscala/collection/GenMapLike;)
scala.collection.AbstractMap: <init>() ===> scala.collection.Map$class: $init$(Lscala/collection/Map;)
scala.collection.AbstractMap: <init>() ===> scala.collection.MapLike$class: $init$(Lscala/collection/MapLike;)
scala.collection.AbstractMap: <init>() ===> scala.Function1$class: $init$(Lscala/Function1;)
scala.collection.AbstractMap: <init>() ===> scala.PartialFunction$class: $init$(Lscala/PartialFunction;)
scala.collection.AbstractMap: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.MapLike$class: addString(Lscala/collection/MapLike;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.AbstractMap: apply(Ljava/lang/Object;) ===> scala.collection.MapLike$class: apply(Lscala/collection/MapLike;Ljava/lang/Object;)
scala.collection.AbstractMap: contains(Ljava/lang/Object;) ===> scala.collection.MapLike$class: contains(Lscala/collection/MapLike;Ljava/lang/Object;)
scala.collection.AbstractMap: default(Ljava/lang/Object;) ===> scala.collection.MapLike$class: default(Lscala/collection/MapLike;Ljava/lang/Object;)
scala.collection.AbstractMap: equals(Ljava/lang/Object;) ===> scala.collection.GenMapLike$class: equals(Lscala/collection/GenMapLike;Ljava/lang/Object;)
scala.collection.AbstractMap: getOrElse(Ljava/lang/Object;Lscala/Function0;) ===> scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;)
scala.collection.AbstractMap: hashCode() ===> scala.collection.GenMapLike$class: hashCode(Lscala/collection/GenMapLike;)
scala.collection.AbstractMap: isEmpty() ===> scala.collection.MapLike$class: isEmpty(Lscala/collection/MapLike;)
scala.collection.AbstractMap: keysIterator() ===> scala.collection.MapLike$class: keysIterator(Lscala/collection/MapLike;)
scala.collection.AbstractMap: newBuilder() ===> scala.collection.MapLike$class: newBuilder(Lscala/collection/MapLike;)
scala.collection.AbstractMap: stringPrefix() ===> scala.collection.MapLike$class: stringPrefix(Lscala/collection/MapLike;)
scala.collection.AbstractMap: toBuffer() ===> scala.collection.MapLike$class: toBuffer(Lscala/collection/MapLike;)
scala.collection.AbstractMap: toString() ===> scala.collection.MapLike$class: toString(Lscala/collection/MapLike;)
scala.collection.AbstractMap: values() ===> scala.collection.MapLike$class: values(Lscala/collection/MapLike;)
scala.collection.AbstractMap: valuesIterator() ===> scala.collection.MapLike$class: valuesIterator(Lscala/collection/MapLike;)
scala.collection.AbstractSeq: <init>() ===> scala.collection.AbstractIterable: <init>()
scala.collection.AbstractSeq: <init>() ===> scala.collection.GenSeq$class: $init$(Lscala/collection/GenSeq;)
scala.collection.AbstractSeq: <init>() ===> scala.collection.GenSeqLike$class: $init$(Lscala/collection/GenSeqLike;)
scala.collection.AbstractSeq: <init>() ===> scala.collection.Seq$class: $init$(Lscala/collection/Seq;)
scala.collection.AbstractSeq: <init>() ===> scala.collection.SeqLike$class: $init$(Lscala/collection/SeqLike;)
scala.collection.AbstractSeq: <init>() ===> scala.Function1$class: $init$(Lscala/Function1;)
scala.collection.AbstractSeq: <init>() ===> scala.PartialFunction$class: $init$(Lscala/PartialFunction;)
scala.collection.AbstractSeq: equals(Ljava/lang/Object;) ===> scala.collection.GenSeqLike$class: equals(Lscala/collection/GenSeqLike;Ljava/lang/Object;)
scala.collection.AbstractSeq: hashCode() ===> scala.collection.GenSeqLike$class: hashCode(Lscala/collection/GenSeqLike;)
scala.collection.AbstractSeq: isEmpty() ===> scala.collection.SeqLike$class: isEmpty(Lscala/collection/SeqLike;)
scala.collection.AbstractSeq: lengthCompare(I) ===> scala.collection.SeqLike$class: lengthCompare(Lscala/collection/SeqLike;I)
scala.collection.AbstractSeq: reverse() ===> scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;)
scala.collection.AbstractSeq: reverseIterator() ===> scala.collection.SeqLike$class: reverseIterator(Lscala/collection/SeqLike;)
scala.collection.AbstractSeq: size() ===> scala.collection.SeqLike$class: size(Lscala/collection/SeqLike;)
scala.collection.AbstractSeq: sorted(Lscala/math/Ordering;) ===> scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;)
scala.collection.AbstractSeq: sortWith(Lscala/Function2;) ===> scala.collection.SeqLike$class: sortWith(Lscala/collection/SeqLike;Lscala/Function2;)
scala.collection.AbstractSeq: thisCollection() ===> scala.collection.SeqLike$class: thisCollection(Lscala/collection/SeqLike;)
scala.collection.AbstractSeq: toCollection(Ljava/lang/Object;) ===> scala.collection.SeqLike$class: toCollection(Lscala/collection/SeqLike;Ljava/lang/Object;)
scala.collection.AbstractSeq: toString() ===> scala.collection.SeqLike$class: toString(Lscala/collection/SeqLike;)
scala.collection.AbstractSet: $bar(Lscala/collection/GenSet;) ===> scala.collection.GenSetLike$class: $bar(Lscala/collection/GenSetLike;Lscala/collection/GenSet;)
scala.collection.AbstractSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.SetLike$class: $plus$plus(Lscala/collection/SetLike;Lscala/collection/GenTraversableOnce;)
scala.collection.AbstractSet: <init>() ===> scala.collection.AbstractIterable: <init>()
scala.collection.AbstractSet: <init>() ===> scala.collection.generic.GenericSetTemplate$class: $init$(Lscala/collection/generic/GenericSetTemplate;)
scala.collection.AbstractSet: <init>() ===> scala.collection.generic.Subtractable$class: $init$(Lscala/collection/generic/Subtractable;)
scala.collection.AbstractSet: <init>() ===> scala.collection.GenSet$class: $init$(Lscala/collection/GenSet;)
scala.collection.AbstractSet: <init>() ===> scala.collection.GenSetLike$class: $init$(Lscala/collection/GenSetLike;)
scala.collection.AbstractSet: <init>() ===> scala.collection.Set$class: $init$(Lscala/collection/Set;)
scala.collection.AbstractSet: <init>() ===> scala.collection.SetLike$class: $init$(Lscala/collection/SetLike;)
scala.collection.AbstractSet: <init>() ===> scala.Function1$class: $init$(Lscala/Function1;)
scala.collection.AbstractSet: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike$class: apply(Lscala/collection/GenSetLike;Ljava/lang/Object;)
scala.collection.AbstractSet: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.AbstractSet: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.AbstractSet: companion() ===> scala.collection.Set$class: companion(Lscala/collection/Set;)
scala.collection.AbstractSet: empty() ===> scala.collection.generic.GenericSetTemplate$class: empty(Lscala/collection/generic/GenericSetTemplate;)
scala.collection.AbstractSet: equals(Ljava/lang/Object;) ===> scala.collection.GenSetLike$class: equals(Lscala/collection/GenSetLike;Ljava/lang/Object;)
scala.collection.AbstractSet: hashCode() ===> scala.collection.GenSetLike$class: hashCode(Lscala/collection/GenSetLike;)
scala.collection.AbstractSet: isEmpty() ===> scala.collection.SetLike$class: isEmpty(Lscala/collection/SetLike;)
scala.collection.AbstractSet: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.SetLike$class: map(Lscala/collection/SetLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.AbstractSet: newBuilder() ===> scala.collection.SetLike$class: newBuilder(Lscala/collection/SetLike;)
scala.collection.AbstractSet: scala$collection$SetLike$$super$map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.AbstractSet: seq() ===> scala.collection.Set$class: seq(Lscala/collection/Set;)
scala.collection.AbstractSet: seq() ===> scala.collection.Set: seq()
scala.collection.AbstractSet: stringPrefix() ===> scala.collection.SetLike$class: stringPrefix(Lscala/collection/SetLike;)
scala.collection.AbstractSet: subsetOf(Lscala/collection/GenSet;) ===> scala.collection.GenSetLike$class: subsetOf(Lscala/collection/GenSetLike;Lscala/collection/GenSet;)
scala.collection.AbstractSet: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.AbstractSet: toBuffer() ===> scala.collection.SetLike$class: toBuffer(Lscala/collection/SetLike;)
scala.collection.AbstractSet: toString() ===> scala.collection.SetLike$class: toString(Lscala/collection/SetLike;)
scala.collection.AbstractSet: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike$class: union(Lscala/collection/SetLike;Lscala/collection/GenSet;)
scala.collection.AbstractSet: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.AbstractTraversable: $div$colon(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce$class: $div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)
scala.collection.AbstractTraversable: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.AbstractTraversable: <init>() ===> java.lang.Object: <init>()
scala.collection.AbstractTraversable: <init>() ===> scala.collection.generic.GenericTraversableTemplate$class: $init$(Lscala/collection/generic/GenericTraversableTemplate;)
scala.collection.AbstractTraversable: <init>() ===> scala.collection.GenTraversable$class: $init$(Lscala/collection/GenTraversable;)
scala.collection.AbstractTraversable: <init>() ===> scala.collection.GenTraversableOnce$class: $init$(Lscala/collection/GenTraversableOnce;)
scala.collection.AbstractTraversable: <init>() ===> scala.collection.Parallelizable$class: $init$(Lscala/collection/Parallelizable;)
scala.collection.AbstractTraversable: <init>() ===> scala.collection.Traversable$class: $init$(Lscala/collection/Traversable;)
scala.collection.AbstractTraversable: <init>() ===> scala.collection.TraversableLike$class: $init$(Lscala/collection/TraversableLike;)
scala.collection.AbstractTraversable: <init>() ===> scala.collection.TraversableOnce$class: $init$(Lscala/collection/TraversableOnce;)
scala.collection.AbstractTraversable: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.AbstractTraversable: copyToArray(Ljava/lang/Object;I) ===> scala.collection.TraversableOnce$class: copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)
scala.collection.AbstractTraversable: copyToBuffer(Lscala/collection/mutable/Buffer;) ===> scala.collection.TraversableOnce$class: copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)
scala.collection.AbstractTraversable: count(Lscala/Function1;) ===> scala.collection.TraversableOnce$class: count(Lscala/collection/TraversableOnce;Lscala/Function1;)
scala.collection.AbstractTraversable: filter(Lscala/Function1;) ===> scala.collection.TraversableLike$class: filter(Lscala/collection/TraversableLike;Lscala/Function1;)
scala.collection.AbstractTraversable: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.AbstractTraversable: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce$class: foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)
scala.collection.AbstractTraversable: genericBuilder() ===> scala.collection.generic.GenericTraversableTemplate$class: genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;)
scala.collection.AbstractTraversable: isTraversableAgain() ===> scala.collection.TraversableLike$class: isTraversableAgain(Lscala/collection/TraversableLike;)
scala.collection.AbstractTraversable: last() ===> scala.collection.TraversableLike$class: last(Lscala/collection/TraversableLike;)
scala.collection.AbstractTraversable: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.AbstractTraversable: max(Lscala/math/Ordering;) ===> scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)
scala.collection.AbstractTraversable: mkString(Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)
scala.collection.AbstractTraversable: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.AbstractTraversable: newBuilder() ===> scala.collection.generic.GenericTraversableTemplate$class: newBuilder(Lscala/collection/generic/GenericTraversableTemplate;)
scala.collection.AbstractTraversable: nonEmpty() ===> scala.collection.TraversableOnce$class: nonEmpty(Lscala/collection/TraversableOnce;)
scala.collection.AbstractTraversable: reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.AbstractTraversable: repr() ===> scala.collection.TraversableLike$class: repr(Lscala/collection/TraversableLike;)
scala.collection.AbstractTraversable: size() ===> scala.collection.TraversableOnce$class: size(Lscala/collection/TraversableOnce;)
scala.collection.AbstractTraversable: stringPrefix() ===> scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;)
scala.collection.AbstractTraversable: tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.AbstractTraversable: to(Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;)
scala.collection.AbstractTraversable: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)
scala.collection.AbstractTraversable: toBuffer() ===> scala.collection.TraversableOnce$class: toBuffer(Lscala/collection/TraversableOnce;)
scala.collection.AbstractTraversable: toList() ===> scala.collection.TraversableOnce$class: toList(Lscala/collection/TraversableOnce;)
scala.collection.AbstractTraversable: toSet() ===> scala.collection.TraversableOnce$class: toSet(Lscala/collection/TraversableOnce;)
scala.collection.AbstractTraversable: toString() ===> scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;)
scala.collection.convert.DecorateAsScala$$anonfun$propertiesAsScalaMapConverter$1: <init>(Lscala/collection/convert/DecorateAsScala;Ljava/util/Properties;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.convert.DecorateAsScala$$anonfun$propertiesAsScalaMapConverter$1: apply() ===> scala.collection.convert.DecorateAsScala$$anonfun$propertiesAsScalaMapConverter$1: apply()
scala.collection.convert.DecorateAsScala$$anonfun$propertiesAsScalaMapConverter$1: apply() ===> scala.collection.convert.WrapAsScala: propertiesAsScalaMap(Ljava/util/Properties;)
scala.collection.convert.DecorateAsScala$class: propertiesAsScalaMapConverter(Lscala/collection/convert/DecorateAsScala;Ljava/util/Properties;) ===> scala.collection.convert.DecorateAsScala$$anonfun$propertiesAsScalaMapConverter$1: <init>(Lscala/collection/convert/DecorateAsScala;Ljava/util/Properties;)
scala.collection.convert.DecorateAsScala$class: propertiesAsScalaMapConverter(Lscala/collection/convert/DecorateAsScala;Ljava/util/Properties;) ===> scala.collection.convert.Decorators$AsScala: <init>(Lscala/collection/convert/Decorators;Lscala/Function0;)
scala.collection.convert.Decorators$: <clinit>() ===> scala.collection.convert.Decorators$: <init>()
scala.collection.convert.Decorators$: <init>() ===> java.lang.Object: <init>()
scala.collection.convert.Decorators$: <init>() ===> scala.collection.convert.Decorators$class: $init$(Lscala/collection/convert/Decorators;)
scala.collection.convert.Decorators$AsScala: <init>(Lscala/collection/convert/Decorators;Lscala/Function0;) ===> java.lang.NullPointerException: <init>()
scala.collection.convert.Decorators$AsScala: <init>(Lscala/collection/convert/Decorators;Lscala/Function0;) ===> java.lang.Object: <init>()
scala.collection.convert.Decorators$AsScala: asScala() ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.collection.convert.Decorators$AsScala: asScala() ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.collection.convert.Decorators$AsScala: asScala() ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.collection.convert.Decorators$AsScala: asScala() ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.collection.convert.Decorators$AsScala: asScala() ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.collection.convert.Decorators$AsScala: asScala() ===> scala.Function0: apply()
scala.collection.convert.WrapAsScala$: <clinit>() ===> scala.collection.convert.WrapAsScala$: <init>()
scala.collection.convert.WrapAsScala$: <init>() ===> java.lang.Object: <init>()
scala.collection.convert.WrapAsScala$: <init>() ===> scala.collection.convert.LowPriorityWrapAsScala$class: $init$(Lscala/collection/convert/WrapAsScala;)
scala.collection.convert.WrapAsScala$: <init>() ===> scala.collection.convert.WrapAsScala$class: $init$(Lscala/collection/convert/WrapAsScala;)
scala.collection.convert.WrapAsScala$: propertiesAsScalaMap(Ljava/util/Properties;) ===> scala.collection.convert.WrapAsScala$class: propertiesAsScalaMap(Lscala/collection/convert/WrapAsScala;Ljava/util/Properties;)
scala.collection.convert.WrapAsScala$class: propertiesAsScalaMap(Lscala/collection/convert/WrapAsScala;Ljava/util/Properties;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: <init>(Lscala/collection/convert/Wrappers;Ljava/util/Properties;)
scala.collection.convert.Wrappers$: <clinit>() ===> scala.collection.convert.Wrappers$: <init>()
scala.collection.convert.Wrappers$: <init>() ===> java.lang.Object: <init>()
scala.collection.convert.Wrappers$: <init>() ===> scala.collection.convert.Wrappers$class: $init$(Lscala/collection/convert/Wrappers;)
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: <init>(Lscala/collection/convert/Wrappers$JPropertiesWrapper;) ===> java.util.Hashtable: entrySet()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: <init>(Lscala/collection/convert/Wrappers$JPropertiesWrapper;) ===> java.util.Set: iterator()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: <init>(Lscala/collection/convert/Wrappers$JPropertiesWrapper;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: <init>(Lscala/collection/convert/Wrappers$JPropertiesWrapper;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: underlying()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: hasNext() ===> java.util.Iterator: hasNext()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: hasNext() ===> scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: ui()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: next() ===> java.util.Iterator: next()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: next() ===> java.util.Map$Entry: getKey()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: next() ===> java.util.Map$Entry: getValue()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: next() ===> scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: next()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: next() ===> scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: ui()
scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: next() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Ljava/lang/Object;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Lscala/Tuple2;)
scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Lscala/Tuple2;) ===> java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Lscala/Tuple2;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Lscala/Tuple2;)
scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Lscala/Tuple2;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: underlying()
scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.convert.Wrappers$JPropertiesWrapper: $plus$eq(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.convert.Wrappers$JPropertiesWrapper: $plus(Lscala/Tuple2;) ===> scala.collection.mutable.MapLike: $plus(Lscala/Tuple2;)
scala.collection.convert.Wrappers$JPropertiesWrapper: <init>(Lscala/collection/convert/Wrappers;Ljava/util/Properties;) ===> java.lang.NullPointerException: <init>()
scala.collection.convert.Wrappers$JPropertiesWrapper: <init>(Lscala/collection/convert/Wrappers;Ljava/util/Properties;) ===> scala.collection.mutable.AbstractMap: <init>()
scala.collection.convert.Wrappers$JPropertiesWrapper: <init>(Lscala/collection/convert/Wrappers;Ljava/util/Properties;) ===> scala.Product$class: $init$(Lscala/Product;)
scala.collection.convert.Wrappers$JPropertiesWrapper: empty() ===> java.util.Properties: <init>()
scala.collection.convert.Wrappers$JPropertiesWrapper: empty() ===> scala.collection.convert.Wrappers$JPropertiesWrapper: <init>(Lscala/collection/convert/Wrappers;Ljava/util/Properties;)
scala.collection.convert.Wrappers$JPropertiesWrapper: empty() ===> scala.collection.convert.Wrappers$JPropertiesWrapper: empty()
scala.collection.convert.Wrappers$JPropertiesWrapper: empty() ===> scala.collection.convert.Wrappers$JPropertiesWrapper: scala$collection$convert$Wrappers$JPropertiesWrapper$$$outer()
scala.collection.convert.Wrappers$JPropertiesWrapper: get(Ljava/lang/Object;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: get(Ljava/lang/String;)
scala.collection.convert.Wrappers$JPropertiesWrapper: get(Ljava/lang/String;) ===> java.util.Hashtable: get(Ljava/lang/Object;)
scala.collection.convert.Wrappers$JPropertiesWrapper: get(Ljava/lang/String;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: underlying()
scala.collection.convert.Wrappers$JPropertiesWrapper: get(Ljava/lang/String;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.convert.Wrappers$JPropertiesWrapper: iterator() ===> scala.collection.convert.Wrappers$JPropertiesWrapper$$anon$3: <init>(Lscala/collection/convert/Wrappers$JPropertiesWrapper;)
scala.collection.convert.Wrappers$JPropertiesWrapper: productElement(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.convert.Wrappers$JPropertiesWrapper: productElement(I) ===> java.lang.Object: toString()
scala.collection.convert.Wrappers$JPropertiesWrapper: productElement(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.convert.Wrappers$JPropertiesWrapper: productElement(I) ===> org.clapper.argot.Parameter: toString()
scala.collection.convert.Wrappers$JPropertiesWrapper: productElement(I) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: underlying()
scala.collection.convert.Wrappers$JPropertiesWrapper: productElement(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.convert.Wrappers$JPropertiesWrapper: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.collection.convert.Wrappers$JPropertiesWrapper: result() ===> scala.collection.mutable.MapLike: result()
scala.collection.convert.Wrappers$JPropertiesWrapper: seq() ===> scala.collection.mutable.Map: seq()
scala.collection.convert.Wrappers$JPropertiesWrapper: size() ===> java.util.Hashtable: size()
scala.collection.convert.Wrappers$JPropertiesWrapper: size() ===> scala.collection.convert.Wrappers$JPropertiesWrapper: underlying()
scala.collection.convert.Wrappers$JPropertiesWrapper: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.convert.Wrappers$JPropertiesWrapper: update(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: update(Ljava/lang/String;Ljava/lang/String;)
scala.collection.convert.Wrappers$JPropertiesWrapper: update(Ljava/lang/String;Ljava/lang/String;) ===> java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.convert.Wrappers$JPropertiesWrapper: update(Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.convert.Wrappers$JPropertiesWrapper: underlying()
scala.collection.generic.GenericCompanion: <init>() ===> java.lang.Object: <init>()
scala.collection.generic.GenericCompanion: apply(Lscala/collection/Seq;) ===> scala.collection.generic.GenericCompanion: empty()
scala.collection.generic.GenericCompanion: apply(Lscala/collection/Seq;) ===> scala.collection.generic.GenericCompanion: newBuilder()
scala.collection.generic.GenericCompanion: apply(Lscala/collection/Seq;) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.generic.GenericCompanion: apply(Lscala/collection/Seq;) ===> scala.collection.mutable.Builder: result()
scala.collection.generic.GenericCompanion: apply(Lscala/collection/Seq;) ===> scala.collection.Seq: isEmpty()
scala.collection.generic.GenericCompanion: empty() ===> scala.collection.generic.GenericCompanion: newBuilder()
scala.collection.generic.GenericCompanion: empty() ===> scala.collection.mutable.Builder: result()
scala.collection.generic.GenericSetTemplate$class: empty(Lscala/collection/generic/GenericSetTemplate;) ===> scala.collection.generic.GenericCompanion: empty()
scala.collection.generic.GenericSetTemplate$class: empty(Lscala/collection/generic/GenericSetTemplate;) ===> scala.collection.generic.GenericSetTemplate: companion()
scala.collection.generic.GenericTraversableTemplate$class: genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;) ===> scala.collection.generic.GenericCompanion: newBuilder()
scala.collection.generic.GenericTraversableTemplate$class: genericBuilder(Lscala/collection/generic/GenericTraversableTemplate;) ===> scala.collection.generic.GenericTraversableTemplate: companion()
scala.collection.generic.GenericTraversableTemplate$class: newBuilder(Lscala/collection/generic/GenericTraversableTemplate;) ===> scala.collection.generic.GenericCompanion: newBuilder()
scala.collection.generic.GenericTraversableTemplate$class: newBuilder(Lscala/collection/generic/GenericTraversableTemplate;) ===> scala.collection.generic.GenericTraversableTemplate: companion()
scala.collection.generic.GenMapFactory$MapCanBuildFrom: <init>(Lscala/collection/generic/GenMapFactory;) ===> java.lang.NullPointerException: <init>()
scala.collection.generic.GenMapFactory$MapCanBuildFrom: <init>(Lscala/collection/generic/GenMapFactory;) ===> java.lang.Object: <init>()
scala.collection.generic.GenMapFactory$MapCanBuildFrom: apply() ===> scala.collection.generic.GenMapFactory$MapCanBuildFrom: scala$collection$generic$GenMapFactory$MapCanBuildFrom$$$outer()
scala.collection.generic.GenMapFactory$MapCanBuildFrom: apply() ===> scala.collection.generic.GenMapFactory: newBuilder()
scala.collection.generic.GenMapFactory$MapCanBuildFrom: apply(Ljava/lang/Object;) ===> scala.collection.generic.GenMapFactory$MapCanBuildFrom: apply(Lscala/collection/GenMap;)
scala.collection.generic.GenMapFactory$MapCanBuildFrom: apply(Lscala/collection/GenMap;) ===> scala.collection.generic.GenMapFactory$MapCanBuildFrom: scala$collection$generic$GenMapFactory$MapCanBuildFrom$$$outer()
scala.collection.generic.GenMapFactory$MapCanBuildFrom: apply(Lscala/collection/GenMap;) ===> scala.collection.generic.GenMapFactory: newBuilder()
scala.collection.generic.GenMapFactory: <init>() ===> java.lang.Object: <init>()
scala.collection.generic.GenMapFactory: apply(Lscala/collection/Seq;) ===> scala.collection.generic.GenMapFactory: newBuilder()
scala.collection.generic.GenMapFactory: apply(Lscala/collection/Seq;) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.generic.GenMapFactory: apply(Lscala/collection/Seq;) ===> scala.collection.mutable.Builder: result()
scala.collection.generic.GenMapFactory: newBuilder() ===> scala.collection.generic.GenMapFactory: empty()
scala.collection.generic.GenMapFactory: newBuilder() ===> scala.collection.mutable.MapBuilder: <init>(Lscala/collection/GenMap;)
scala.collection.generic.GenSeqFactory: <init>() ===> scala.collection.generic.GenTraversableFactory: <init>()
scala.collection.generic.GenSetFactory$$anon$1: <init>(Lscala/collection/generic/GenSetFactory;) ===> java.lang.NullPointerException: <init>()
scala.collection.generic.GenSetFactory$$anon$1: <init>(Lscala/collection/generic/GenSetFactory;) ===> java.lang.Object: <init>()
scala.collection.generic.GenSetFactory$$anon$1: apply() ===> scala.collection.generic.GenSetFactory: newBuilder()
scala.collection.generic.GenSetFactory$$anon$1: apply(Ljava/lang/Object;) ===> scala.collection.generic.GenSetFactory$$anon$1: apply(Lscala/collection/GenSet;)
scala.collection.generic.GenSetFactory$$anon$1: apply(Lscala/collection/GenSet;) ===> scala.collection.generic.GenSetFactory: newBuilder()
scala.collection.generic.GenSetFactory: <init>() ===> scala.collection.generic.GenericCompanion: <init>()
scala.collection.generic.GenSetFactory: setCanBuildFrom() ===> scala.collection.generic.GenSetFactory$$anon$1: <init>(Lscala/collection/generic/GenSetFactory;)
scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: <init>(Lscala/collection/generic/GenTraversableFactory;) ===> java.lang.NullPointerException: <init>()
scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: <init>(Lscala/collection/generic/GenTraversableFactory;) ===> java.lang.Object: <init>()
scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: apply() ===> scala.collection.generic.GenericCompanion: newBuilder()
scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: apply() ===> scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: scala$collection$generic$GenTraversableFactory$GenericCanBuildFrom$$$outer()
scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: apply(Ljava/lang/Object;) ===> scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: apply(Lscala/collection/GenTraversable;)
scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: apply(Lscala/collection/GenTraversable;) ===> scala.collection.GenTraversable: genericBuilder()
scala.collection.generic.GenTraversableFactory$ReusableCBF: <init>(Lscala/collection/generic/GenTraversableFactory;) ===> scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: <init>(Lscala/collection/generic/GenTraversableFactory;)
scala.collection.generic.GenTraversableFactory$ReusableCBF: apply() ===> scala.collection.generic.GenericCompanion: newBuilder()
scala.collection.generic.GenTraversableFactory$ReusableCBF: apply() ===> scala.collection.generic.GenTraversableFactory$ReusableCBF: scala$collection$generic$GenTraversableFactory$ReusableCBF$$$outer()
scala.collection.generic.GenTraversableFactory: <init>() ===> scala.collection.generic.GenericCompanion: <init>()
scala.collection.generic.GenTraversableFactory: ReusableCBF$lzycompute() ===> scala.collection.generic.GenTraversableFactory$ReusableCBF: <init>(Lscala/collection/generic/GenTraversableFactory;)
scala.collection.generic.GenTraversableFactory: ReusableCBF() ===> scala.collection.generic.GenTraversableFactory: ReusableCBF$lzycompute()
scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1: <init>(Lscala/collection/generic/Growable;) ===> java.lang.NullPointerException: <init>()
scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1: <init>(Lscala/collection/generic/Growable;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1: apply(Ljava/lang/Object;) ===> scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1: apply(Ljava/lang/Object;)
scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1: apply(Ljava/lang/Object;) ===> scala.collection.generic.Growable: $plus$eq(Ljava/lang/Object;)
scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$$anonfun$$plus$plus$eq$1: <init>(Lscala/collection/generic/Growable;)
scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: seq()
scala.collection.generic.ImmutableMapFactory: <init>() ===> scala.collection.generic.MapFactory: <init>()
scala.collection.generic.ImmutableSetFactory: <init>() ===> scala.collection.generic.SetFactory: <init>()
scala.collection.generic.ImmutableSetFactory: newBuilder() ===> scala.collection.generic.GenericCompanion: empty()
scala.collection.generic.ImmutableSetFactory: newBuilder() ===> scala.collection.mutable.SetBuilder: <init>(Lscala/collection/Set;)
scala.collection.generic.IterableForwarder$class: sameElements(Lscala/collection/generic/IterableForwarder;Lscala/collection/GenIterable;) ===> scala.collection.generic.IterableForwarder: underlying()
scala.collection.generic.IterableForwarder$class: sameElements(Lscala/collection/generic/IterableForwarder;Lscala/collection/GenIterable;) ===> scala.collection.Iterable: sameElements(Lscala/collection/GenIterable;)
scala.collection.generic.MapFactory: <init>() ===> scala.collection.generic.GenMapFactory: <init>()
scala.collection.generic.MutableMapFactory: <init>() ===> scala.collection.generic.MapFactory: <init>()
scala.collection.generic.MutableMapFactory: newBuilder() ===> scala.collection.generic.MapFactory: empty()
scala.collection.generic.MutableSetFactory: <init>() ===> scala.collection.generic.SetFactory: <init>()
scala.collection.generic.MutableSetFactory: newBuilder() ===> scala.collection.generic.GenericCompanion: empty()
scala.collection.generic.MutableSetFactory: newBuilder() ===> scala.collection.mutable.GrowingBuilder: <init>(Lscala/collection/generic/Growable;)
scala.collection.generic.SeqFactory: <init>() ===> scala.collection.generic.GenSeqFactory: <init>()
scala.collection.generic.SeqForwarder$class: apply(Lscala/collection/generic/SeqForwarder;I) ===> scala.collection.generic.SeqForwarder: underlying()
scala.collection.generic.SeqForwarder$class: apply(Lscala/collection/generic/SeqForwarder;I) ===> scala.collection.Seq: apply(I)
scala.collection.generic.SeqForwarder$class: lengthCompare(Lscala/collection/generic/SeqForwarder;I) ===> scala.collection.generic.SeqForwarder: underlying()
scala.collection.generic.SeqForwarder$class: lengthCompare(Lscala/collection/generic/SeqForwarder;I) ===> scala.collection.Seq: lengthCompare(I)
scala.collection.generic.SeqForwarder$class: reverseIterator(Lscala/collection/generic/SeqForwarder;) ===> scala.collection.generic.SeqForwarder: underlying()
scala.collection.generic.SeqForwarder$class: reverseIterator(Lscala/collection/generic/SeqForwarder;) ===> scala.collection.Seq: reverseIterator()
scala.collection.generic.SetFactory: <init>() ===> scala.collection.generic.GenSetFactory: <init>()
scala.collection.generic.TraversableForwarder$class: $div$colon(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: $div$colon(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.Traversable: $div$colon(Ljava/lang/Object;Lscala/Function2;)
scala.collection.generic.TraversableForwarder$class: addString(Lscala/collection/generic/TraversableForwarder;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: addString(Lscala/collection/generic/TraversableForwarder;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.Traversable: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.generic.TraversableForwarder$class: copyToArray(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;I) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: copyToArray(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;I) ===> scala.collection.Traversable: copyToArray(Ljava/lang/Object;I)
scala.collection.generic.TraversableForwarder$class: copyToArray(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;II) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: copyToArray(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;II) ===> scala.collection.Traversable: copyToArray(Ljava/lang/Object;II)
scala.collection.generic.TraversableForwarder$class: foldLeft(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: foldLeft(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.Traversable: foldLeft(Ljava/lang/Object;Lscala/Function2;)
scala.collection.generic.TraversableForwarder$class: foreach(Lscala/collection/generic/TraversableForwarder;Lscala/Function1;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: foreach(Lscala/collection/generic/TraversableForwarder;Lscala/Function1;) ===> scala.collection.Traversable: foreach(Lscala/Function1;)
scala.collection.generic.TraversableForwarder$class: head(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: head(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.Traversable: head()
scala.collection.generic.TraversableForwarder$class: isEmpty(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: isEmpty(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.Traversable: isEmpty()
scala.collection.generic.TraversableForwarder$class: max(Lscala/collection/generic/TraversableForwarder;Lscala/math/Ordering;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: max(Lscala/collection/generic/TraversableForwarder;Lscala/math/Ordering;) ===> scala.collection.Traversable: max(Lscala/math/Ordering;)
scala.collection.generic.TraversableForwarder$class: mkString(Lscala/collection/generic/TraversableForwarder;Ljava/lang/String;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: mkString(Lscala/collection/generic/TraversableForwarder;Ljava/lang/String;) ===> scala.collection.Traversable: mkString(Ljava/lang/String;)
scala.collection.generic.TraversableForwarder$class: mkString(Lscala/collection/generic/TraversableForwarder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: mkString(Lscala/collection/generic/TraversableForwarder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.Traversable: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.generic.TraversableForwarder$class: nonEmpty(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: nonEmpty(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.Traversable: nonEmpty()
scala.collection.generic.TraversableForwarder$class: reduceLeft(Lscala/collection/generic/TraversableForwarder;Lscala/Function2;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: reduceLeft(Lscala/collection/generic/TraversableForwarder;Lscala/Function2;) ===> scala.collection.Traversable: reduceLeft(Lscala/Function2;)
scala.collection.generic.TraversableForwarder$class: toArray(Lscala/collection/generic/TraversableForwarder;Lscala/reflect/ClassTag;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: toArray(Lscala/collection/generic/TraversableForwarder;Lscala/reflect/ClassTag;) ===> scala.collection.Traversable: toArray(Lscala/reflect/ClassTag;)
scala.collection.generic.TraversableForwarder$class: toBuffer(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: toBuffer(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.Traversable: toBuffer()
scala.collection.generic.TraversableForwarder$class: toSet(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: toSet(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.Traversable: toSet()
scala.collection.generic.TraversableForwarder$class: toStream(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.generic.TraversableForwarder: underlying()
scala.collection.generic.TraversableForwarder$class: toStream(Lscala/collection/generic/TraversableForwarder;) ===> scala.collection.Traversable: toStream()
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: <init>(Lscala/collection/GenMapLike;Lscala/collection/GenMap;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Ljava/lang/Object;) ===> scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> scala.collection.GenMap: get(Ljava/lang/Object;)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> scala.Some: x()
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: apply(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.GenMapLike$class: equals(Lscala/collection/GenMapLike;Ljava/lang/Object;) ===> scala.collection.GenMap: canEqual(Ljava/lang/Object;)
scala.collection.GenMapLike$class: equals(Lscala/collection/GenMapLike;Ljava/lang/Object;) ===> scala.collection.GenMap: size()
scala.collection.GenMapLike$class: equals(Lscala/collection/GenMapLike;Ljava/lang/Object;) ===> scala.collection.GenMapLike$class: liftedTree1$1(Lscala/collection/GenMapLike;Lscala/collection/GenMap;)
scala.collection.GenMapLike$class: equals(Lscala/collection/GenMapLike;Ljava/lang/Object;) ===> scala.collection.GenMapLike: size()
scala.collection.GenMapLike$class: hashCode(Lscala/collection/GenMapLike;) ===> scala.collection.GenMapLike: seq()
scala.collection.GenMapLike$class: hashCode(Lscala/collection/GenMapLike;) ===> scala.util.hashing.MurmurHash3$: mapHash(Lscala/collection/Map;)
scala.collection.GenMapLike$class: liftedTree1$1(Lscala/collection/GenMapLike;Lscala/collection/GenMap;) ===> scala.collection.GenMapLike$$anonfun$liftedTree1$1$1: <init>(Lscala/collection/GenMapLike;Lscala/collection/GenMap;)
scala.collection.GenMapLike$class: liftedTree1$1(Lscala/collection/GenMapLike;Lscala/collection/GenMap;) ===> scala.collection.GenMapLike: forall(Lscala/Function1;)
scala.collection.GenMapLike$class: liftedTree1$1(Lscala/collection/GenMapLike;Lscala/collection/GenMap;) ===> scala.Predef$: println(Ljava/lang/Object;)
scala.collection.GenSeqLike$class: equals(Lscala/collection/GenSeqLike;Ljava/lang/Object;) ===> scala.collection.GenSeq: canEqual(Ljava/lang/Object;)
scala.collection.GenSeqLike$class: equals(Lscala/collection/GenSeqLike;Ljava/lang/Object;) ===> scala.collection.GenSeqLike: sameElements(Lscala/collection/GenIterable;)
scala.collection.GenSeqLike$class: hashCode(Lscala/collection/GenSeqLike;) ===> scala.collection.GenSeqLike: seq()
scala.collection.GenSeqLike$class: hashCode(Lscala/collection/GenSeqLike;) ===> scala.util.hashing.MurmurHash3$: seqHash(Lscala/collection/Seq;)
scala.collection.GenSetLike$class: $bar(Lscala/collection/GenSetLike;Lscala/collection/GenSet;) ===> scala.collection.GenSetLike: union(Lscala/collection/GenSet;)
scala.collection.GenSetLike$class: apply(Lscala/collection/GenSetLike;Ljava/lang/Object;) ===> scala.collection.GenSetLike: contains(Ljava/lang/Object;)
scala.collection.GenSetLike$class: equals(Lscala/collection/GenSetLike;Ljava/lang/Object;) ===> scala.collection.GenSet: canEqual(Ljava/lang/Object;)
scala.collection.GenSetLike$class: equals(Lscala/collection/GenSetLike;Ljava/lang/Object;) ===> scala.collection.GenSet: size()
scala.collection.GenSetLike$class: equals(Lscala/collection/GenSetLike;Ljava/lang/Object;) ===> scala.collection.GenSetLike$class: liftedTree1$1(Lscala/collection/GenSetLike;Lscala/collection/GenSet;)
scala.collection.GenSetLike$class: equals(Lscala/collection/GenSetLike;Ljava/lang/Object;) ===> scala.collection.GenSetLike: size()
scala.collection.GenSetLike$class: hashCode(Lscala/collection/GenSetLike;) ===> scala.collection.GenSetLike: seq()
scala.collection.GenSetLike$class: hashCode(Lscala/collection/GenSetLike;) ===> scala.util.hashing.MurmurHash3$: setHash(Lscala/collection/Set;)
scala.collection.GenSetLike$class: liftedTree1$1(Lscala/collection/GenSetLike;Lscala/collection/GenSet;) ===> scala.collection.GenSetLike: subsetOf(Lscala/collection/GenSet;)
scala.collection.GenSetLike$class: subsetOf(Lscala/collection/GenSetLike;Lscala/collection/GenSet;) ===> scala.collection.GenSetLike: forall(Lscala/Function1;)
scala.collection.immutable.$colon$colon$: <clinit>() ===> scala.collection.immutable.$colon$colon$: <init>()
scala.collection.immutable.$colon$colon$: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.$colon$colon: <init>(Ljava/lang/Object;Lscala/collection/immutable/List;) ===> scala.collection.immutable.List: <init>()
scala.collection.immutable.$colon$colon: head() ===> scala.collection.immutable.$colon$colon: scala$collection$immutable$$colon$colon$$hd()
scala.collection.immutable.$colon$colon: productElement(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.immutable.$colon$colon: productElement(I) ===> java.lang.Object: toString()
scala.collection.immutable.$colon$colon: productElement(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.immutable.$colon$colon: productElement(I) ===> org.clapper.argot.Parameter: toString()
scala.collection.immutable.$colon$colon: productElement(I) ===> scala.collection.immutable.$colon$colon: hd$1()
scala.collection.immutable.$colon$colon: productElement(I) ===> scala.collection.immutable.$colon$colon: tl$1()
scala.collection.immutable.$colon$colon: productElement(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.$colon$colon: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.collection.immutable.$colon$colon: tail() ===> scala.collection.immutable.$colon$colon: tail()
scala.collection.immutable.$colon$colon: tail() ===> scala.collection.immutable.$colon$colon: tl()
scala.collection.immutable.AbstractMap: <init>() ===> scala.collection.AbstractMap: <init>()
scala.collection.immutable.AbstractMap: <init>() ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.AbstractMap: <init>() ===> scala.collection.immutable.Map$class: $init$(Lscala/collection/immutable/Map;)
scala.collection.immutable.AbstractMap: <init>() ===> scala.collection.immutable.MapLike$class: $init$(Lscala/collection/immutable/MapLike;)
scala.collection.immutable.AbstractMap: <init>() ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.AbstractMap: companion() ===> scala.collection.immutable.Iterable$class: companion(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.AbstractMap: empty() ===> scala.collection.immutable.Map$class: empty(Lscala/collection/immutable/Map;)
scala.collection.immutable.AbstractMap: empty() ===> scala.collection.immutable.Map: empty()
scala.collection.immutable.AbstractMap: seq() ===> scala.collection.immutable.Map$class: seq(Lscala/collection/immutable/Map;)
scala.collection.immutable.AbstractMap: seq() ===> scala.collection.immutable.Map: seq()
scala.collection.immutable.AbstractMap: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.HashMap$$anon$2$$anon$3: <init>(Lscala/collection/immutable/HashMap$$anon$2;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.HashMap$$anon$2$$anon$3: <init>(Lscala/collection/immutable/HashMap$$anon$2;) ===> scala.collection.immutable.HashMap$Merger: <init>()
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2$$anon$3: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: <init>(Lscala/Function2;) ===> scala.collection.immutable.HashMap$$anon$2$$anon$3: <init>(Lscala/collection/immutable/HashMap$$anon$2;)
scala.collection.immutable.HashMap$$anon$2: <init>(Lscala/Function2;) ===> scala.collection.immutable.HashMap$Merger: <init>()
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anon$2: apply(Lscala/Tuple2;Lscala/Tuple2;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$$anonfun$1: <init>() ===> scala.runtime.AbstractFunction2: <init>()
scala.collection.immutable.HashMap$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.HashMap$$anonfun$1: apply(Lscala/Tuple2;Lscala/Tuple2;)
scala.collection.immutable.HashMap$: <clinit>() ===> scala.collection.immutable.HashMap$: <init>()
scala.collection.immutable.HashMap$: <init>() ===> scala.collection.generic.BitOperations$Int$class: $init$(Lscala/collection/generic/BitOperations$Int;)
scala.collection.immutable.HashMap$: <init>() ===> scala.collection.generic.ImmutableMapFactory: <init>()
scala.collection.immutable.HashMap$: <init>() ===> scala.collection.immutable.HashMap$$anon$2: <init>(Lscala/Function2;)
scala.collection.immutable.HashMap$: <init>() ===> scala.collection.immutable.HashMap$$anonfun$1: <init>()
scala.collection.immutable.HashMap$: canBuildFrom() ===> scala.collection.generic.GenMapFactory$MapCanBuildFrom: <init>(Lscala/collection/generic/GenMapFactory;)
scala.collection.immutable.HashMap$: empty() ===> scala.collection.immutable.HashMap$: empty()
scala.collection.immutable.HashMap$: scala$collection$immutable$HashMap$$makeHashTrieMap(ILscala/collection/immutable/HashMap;ILscala/collection/immutable/HashMap;II) ===> scala.collection.immutable.HashMap$: scala$collection$immutable$HashMap$$makeHashTrieMap(ILscala/collection/immutable/HashMap;ILscala/collection/immutable/HashMap;II)
scala.collection.immutable.HashMap$: scala$collection$immutable$HashMap$$makeHashTrieMap(ILscala/collection/immutable/HashMap;ILscala/collection/immutable/HashMap;II) ===> scala.collection.immutable.HashMap$HashTrieMap: <init>(I[Lscala/collection/immutable/HashMap;I)
scala.collection.immutable.HashMap$EmptyHashMap$: <clinit>() ===> scala.collection.immutable.HashMap$EmptyHashMap$: <init>()
scala.collection.immutable.HashMap$EmptyHashMap$: <init>() ===> scala.collection.immutable.HashMap: <init>()
scala.collection.immutable.HashMap$HashMap1: <init>(Ljava/lang/Object;ILjava/lang/Object;Lscala/Tuple2;) ===> scala.collection.immutable.HashMap: <init>()
scala.collection.immutable.HashMap$HashMap1: ensurePair() ===> scala.collection.immutable.HashMap$HashMap1: key()
scala.collection.immutable.HashMap$HashMap1: ensurePair() ===> scala.collection.immutable.HashMap$HashMap1: kv()
scala.collection.immutable.HashMap$HashMap1: ensurePair() ===> scala.collection.immutable.HashMap$HashMap1: kv_$eq(Lscala/Tuple2;)
scala.collection.immutable.HashMap$HashMap1: ensurePair() ===> scala.collection.immutable.HashMap$HashMap1: value()
scala.collection.immutable.HashMap$HashMap1: ensurePair() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashMap$HashMap1: ensurePair()
scala.collection.immutable.HashMap$HashMap1: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap$HashMap1: hash()
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap$HashMap1: key()
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap$HashMap1: value()
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: get0(Ljava/lang/Object;II) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: iterator() ===> scala.collection.immutable.HashMap$HashMap1: ensurePair()
scala.collection.immutable.HashMap$HashMap1: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.HashMap$HashMap1: iterator() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$: scala$collection$immutable$HashMap$$makeHashTrieMap(ILscala/collection/immutable/HashMap;ILscala/collection/immutable/HashMap;II)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: <init>(Ljava/lang/Object;ILjava/lang/Object;Lscala/Tuple2;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: hash()
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: key()
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: kv()
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: value()
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMapCollision1: <init>(ILscala/collection/immutable/ListMap;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$Merger: apply(Lscala/Tuple2;Lscala/Tuple2;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.ListMap$: empty()
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.ListMap: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.Tuple2: _1()
scala.collection.immutable.HashMap$HashMap1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.Tuple2: _2()
scala.collection.immutable.HashMap$HashMapCollision1: <init>(ILscala/collection/immutable/ListMap;) ===> scala.collection.immutable.HashMap: <init>()
scala.collection.immutable.HashMap$HashMapCollision1: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashMap$HashMapCollision1: kvs()
scala.collection.immutable.HashMap$HashMapCollision1: foreach(Lscala/Function1;) ===> scala.collection.IterableLike: foreach(Lscala/Function1;)
scala.collection.immutable.HashMap$HashMapCollision1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap$HashMapCollision1: hash()
scala.collection.immutable.HashMap$HashMapCollision1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap$HashMapCollision1: kvs()
scala.collection.immutable.HashMap$HashMapCollision1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.ListMap: get(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMapCollision1: iterator() ===> scala.collection.immutable.HashMap$HashMapCollision1: kvs()
scala.collection.immutable.HashMap$HashMapCollision1: iterator() ===> scala.collection.immutable.ListMap: iterator()
scala.collection.immutable.HashMap$HashMapCollision1: size() ===> scala.collection.immutable.HashMap$HashMapCollision1: kvs()
scala.collection.immutable.HashMap$HashMapCollision1: size() ===> scala.collection.immutable.ListMap: size()
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$: scala$collection$immutable$HashMap$$makeHashTrieMap(ILscala/collection/immutable/HashMap;ILscala/collection/immutable/HashMap;II)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: <init>(Ljava/lang/Object;ILjava/lang/Object;Lscala/Tuple2;)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMapCollision1: <init>(ILscala/collection/immutable/ListMap;)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMapCollision1: hash()
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMapCollision1: kvs()
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMapCollision1: size()
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$Merger: apply(Lscala/Tuple2;Lscala/Tuple2;)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.ListMap: $plus(Lscala/Tuple2;)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.ListMap: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.MapLike: apply(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.MapLike: contains(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashMapCollision1: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashTrieMap$$anon$1: <init>(Lscala/collection/immutable/HashMap$HashTrieMap;) ===> scala.collection.immutable.HashMap$HashTrieMap: elems()
scala.collection.immutable.HashMap$HashTrieMap$$anon$1: <init>(Lscala/collection/immutable/HashMap$HashTrieMap;) ===> scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;)
scala.collection.immutable.HashMap$HashTrieMap$$anon$1: getElem(Ljava/lang/Object;) ===> scala.collection.immutable.HashMap$HashMap1: ensurePair()
scala.collection.immutable.HashMap$HashTrieMap$$anon$1: getElem(Ljava/lang/Object;) ===> scala.collection.immutable.HashMap$HashTrieMap$$anon$1: getElem(Ljava/lang/Object;)
scala.collection.immutable.HashMap$HashTrieMap: <init>(I[Lscala/collection/immutable/HashMap;I) ===> scala.collection.immutable.HashMap: <init>()
scala.collection.immutable.HashMap$HashTrieMap: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashMap$HashTrieMap: elems()
scala.collection.immutable.HashMap$HashTrieMap: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashMap: foreach(Lscala/Function1;)
scala.collection.immutable.HashMap$HashTrieMap: get0(Ljava/lang/Object;II) ===> java.lang.Integer: bitCount(I)
scala.collection.immutable.HashMap$HashTrieMap: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap$HashTrieMap: bitmap()
scala.collection.immutable.HashMap$HashTrieMap: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap$HashTrieMap: elems()
scala.collection.immutable.HashMap$HashTrieMap: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashMap: get0(Ljava/lang/Object;II)
scala.collection.immutable.HashMap$HashTrieMap: iterator() ===> scala.collection.immutable.HashMap$HashTrieMap$$anon$1: <init>(Lscala/collection/immutable/HashMap$HashTrieMap;)
scala.collection.immutable.HashMap$HashTrieMap: size() ===> scala.collection.immutable.HashMap$HashTrieMap: size0()
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> java.lang.Integer: bitCount(I)
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: <init>(Ljava/lang/Object;ILjava/lang/Object;Lscala/Tuple2;)
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashTrieMap: <init>(I[Lscala/collection/immutable/HashMap;I)
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashTrieMap: bitmap()
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashTrieMap: elems()
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashTrieMap: size()
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap: size()
scala.collection.immutable.HashMap$HashTrieMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;)
scala.collection.immutable.HashMap$Merger: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;)
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.HashMap: computeHash(Ljava/lang/Object;)
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.HashMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;)
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;) ===> scala.collection.immutable.HashMap$: canBuildFrom()
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;) ===> scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;)
scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;) ===> scala.collection.TraversableLike: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.HashMap: <init>() ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.immutable.HashMap: <init>() ===> scala.collection.immutable.AbstractMap: <init>()
scala.collection.immutable.HashMap: computeHash(Ljava/lang/Object;) ===> scala.collection.immutable.HashMap: elemHashCode(Ljava/lang/Object;)
scala.collection.immutable.HashMap: computeHash(Ljava/lang/Object;) ===> scala.collection.immutable.HashMap: improve(I)
scala.collection.immutable.HashMap: elemHashCode(Ljava/lang/Object;) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.collection.immutable.HashMap: empty() ===> scala.collection.immutable.HashMap$: empty()
scala.collection.immutable.HashMap: empty() ===> scala.collection.immutable.HashMap: empty()
scala.collection.immutable.HashMap: get(Ljava/lang/Object;) ===> scala.collection.immutable.HashMap: computeHash(Ljava/lang/Object;)
scala.collection.immutable.HashMap: get(Ljava/lang/Object;) ===> scala.collection.immutable.HashMap: get0(Ljava/lang/Object;II)
scala.collection.immutable.HashMap: iterator() ===> scala.collection.Iterator$: empty()
scala.collection.immutable.HashMap: seq() ===> scala.collection.immutable.Map: seq()
scala.collection.immutable.HashMap: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.HashMap: updated0(Ljava/lang/Object;IILjava/lang/Object;Lscala/Tuple2;Lscala/collection/immutable/HashMap$Merger;) ===> scala.collection.immutable.HashMap$HashMap1: <init>(Ljava/lang/Object;ILjava/lang/Object;Lscala/Tuple2;)
scala.collection.immutable.HashSet$: <clinit>() ===> scala.collection.immutable.HashSet$: <init>()
scala.collection.immutable.HashSet$: <init>() ===> scala.collection.generic.ImmutableSetFactory: <init>()
scala.collection.immutable.HashSet$: empty() ===> scala.collection.immutable.HashSet$: empty()
scala.collection.immutable.HashSet$: scala$collection$immutable$HashSet$$makeHashTrieSet(ILscala/collection/immutable/HashSet;ILscala/collection/immutable/HashSet;I) ===> scala.collection.immutable.HashSet$: scala$collection$immutable$HashSet$$makeHashTrieSet(ILscala/collection/immutable/HashSet;ILscala/collection/immutable/HashSet;I)
scala.collection.immutable.HashSet$: scala$collection$immutable$HashSet$$makeHashTrieSet(ILscala/collection/immutable/HashSet;ILscala/collection/immutable/HashSet;I) ===> scala.collection.immutable.HashSet$HashTrieSet: <init>(I[Lscala/collection/immutable/HashSet;I)
scala.collection.immutable.HashSet$: scala$collection$immutable$HashSet$$makeHashTrieSet(ILscala/collection/immutable/HashSet;ILscala/collection/immutable/HashSet;I) ===> scala.collection.immutable.HashSet$HashTrieSet: size()
scala.collection.immutable.HashSet$: scala$collection$immutable$HashSet$$makeHashTrieSet(ILscala/collection/immutable/HashSet;ILscala/collection/immutable/HashSet;I) ===> scala.collection.immutable.HashSet: size()
scala.collection.immutable.HashSet$EmptyHashSet$: <clinit>() ===> scala.collection.immutable.HashSet$EmptyHashSet$: <init>()
scala.collection.immutable.HashSet$EmptyHashSet$: <init>() ===> scala.collection.immutable.HashSet: <init>()
scala.collection.immutable.HashSet$HashSet1: <init>(Ljava/lang/Object;I) ===> scala.collection.immutable.HashSet: <init>()
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashSet$HashSet1: key()
scala.collection.immutable.HashSet$HashSet1: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: get0(Ljava/lang/Object;II) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: get0(Ljava/lang/Object;II) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.HashSet$HashSet1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: hash()
scala.collection.immutable.HashSet$HashSet1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: key()
scala.collection.immutable.HashSet$HashSet1: get0(Ljava/lang/Object;II) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: get0(Ljava/lang/Object;II) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: iterator() ===> scala.collection.immutable.HashSet$HashSet1: key()
scala.collection.immutable.HashSet$HashSet1: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.HashSet$HashSet1: iterator() ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$: scala$collection$immutable$HashSet$$makeHashTrieSet(ILscala/collection/immutable/HashSet;ILscala/collection/immutable/HashSet;I)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: <init>(Ljava/lang/Object;I)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: hash()
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: key()
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSetCollision1: <init>(ILscala/collection/immutable/ListSet;)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.ListSet$: empty()
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.ListSet: $plus(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSet1: updated0(Ljava/lang/Object;II) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSetCollision1: <init>(ILscala/collection/immutable/ListSet;) ===> scala.collection.immutable.HashSet: <init>()
scala.collection.immutable.HashSet$HashSetCollision1: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashSet$HashSetCollision1: ks()
scala.collection.immutable.HashSet$HashSetCollision1: foreach(Lscala/Function1;) ===> scala.collection.IterableLike: foreach(Lscala/Function1;)
scala.collection.immutable.HashSet$HashSetCollision1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSetCollision1: hash()
scala.collection.immutable.HashSet$HashSetCollision1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSetCollision1: ks()
scala.collection.immutable.HashSet$HashSetCollision1: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.ListSet: contains(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashSetCollision1: iterator() ===> scala.collection.immutable.HashSet$HashSetCollision1: ks()
scala.collection.immutable.HashSet$HashSetCollision1: iterator() ===> scala.collection.immutable.ListSet: iterator()
scala.collection.immutable.HashSet$HashSetCollision1: size() ===> scala.collection.immutable.HashSet$HashSetCollision1: ks()
scala.collection.immutable.HashSet$HashSetCollision1: size() ===> scala.collection.immutable.ListSet: size()
scala.collection.immutable.HashSet$HashSetCollision1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$: scala$collection$immutable$HashSet$$makeHashTrieSet(ILscala/collection/immutable/HashSet;ILscala/collection/immutable/HashSet;I)
scala.collection.immutable.HashSet$HashSetCollision1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: <init>(Ljava/lang/Object;I)
scala.collection.immutable.HashSet$HashSetCollision1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSetCollision1: <init>(ILscala/collection/immutable/ListSet;)
scala.collection.immutable.HashSet$HashSetCollision1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSetCollision1: hash()
scala.collection.immutable.HashSet$HashSetCollision1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSetCollision1: ks()
scala.collection.immutable.HashSet$HashSetCollision1: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.ListSet: $plus(Ljava/lang/Object;)
scala.collection.immutable.HashSet$HashTrieSet$$anon$1: <init>(Lscala/collection/immutable/HashSet$HashTrieSet;) ===> scala.collection.immutable.HashSet$HashTrieSet: elems()
scala.collection.immutable.HashSet$HashTrieSet$$anon$1: <init>(Lscala/collection/immutable/HashSet$HashTrieSet;) ===> scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;)
scala.collection.immutable.HashSet$HashTrieSet$$anon$1: getElem(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet$HashSet1: key()
scala.collection.immutable.HashSet$HashTrieSet: <init>(I[Lscala/collection/immutable/HashSet;I) ===> java.lang.Integer: bitCount(I)
scala.collection.immutable.HashSet$HashTrieSet: <init>(I[Lscala/collection/immutable/HashSet;I) ===> scala.collection.immutable.HashSet: <init>()
scala.collection.immutable.HashSet$HashTrieSet: <init>(I[Lscala/collection/immutable/HashSet;I) ===> scala.Predef$: assert(Z)
scala.collection.immutable.HashSet$HashTrieSet: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashSet$HashTrieSet: elems()
scala.collection.immutable.HashSet$HashTrieSet: foreach(Lscala/Function1;) ===> scala.collection.immutable.HashSet: foreach(Lscala/Function1;)
scala.collection.immutable.HashSet$HashTrieSet: get0(Ljava/lang/Object;II) ===> java.lang.Integer: bitCount(I)
scala.collection.immutable.HashSet$HashTrieSet: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashTrieSet: bitmap()
scala.collection.immutable.HashSet$HashTrieSet: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashTrieSet: elems()
scala.collection.immutable.HashSet$HashTrieSet: get0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet: get0(Ljava/lang/Object;II)
scala.collection.immutable.HashSet$HashTrieSet: iterator() ===> scala.collection.immutable.HashSet$HashTrieSet$$anon$1: <init>(Lscala/collection/immutable/HashSet$HashTrieSet;)
scala.collection.immutable.HashSet$HashTrieSet: iterator() ===> scala.collection.immutable.HashSet$HashTrieSet: iterator()
scala.collection.immutable.HashSet$HashTrieSet: size() ===> scala.collection.immutable.HashSet$HashTrieSet: size0()
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> java.lang.Integer: bitCount(I)
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: <init>(Ljava/lang/Object;I)
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashTrieSet: <init>(I[Lscala/collection/immutable/HashSet;I)
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashTrieSet: bitmap()
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashTrieSet: elems()
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashTrieSet: size()
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet: size()
scala.collection.immutable.HashSet$HashTrieSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet: updated0(Ljava/lang/Object;II)
scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;)
scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: computeHash(Ljava/lang/Object;)
scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: updated0(Ljava/lang/Object;II)
scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;) ===> scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;)
scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;) ===> scala.collection.SetLike: $plus$plus(Lscala/collection/GenTraversableOnce;)
scala.collection.immutable.HashSet: <init>() ===> scala.collection.AbstractSet: <init>()
scala.collection.immutable.HashSet: <init>() ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.immutable.HashSet: <init>() ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.HashSet: <init>() ===> scala.collection.immutable.Set$class: $init$(Lscala/collection/immutable/Set;)
scala.collection.immutable.HashSet: <init>() ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.HashSet: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.HashSet: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.immutable.HashSet: computeHash(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: elemHashCode(Ljava/lang/Object;)
scala.collection.immutable.HashSet: computeHash(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: improve(I)
scala.collection.immutable.HashSet: contains(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: computeHash(Ljava/lang/Object;)
scala.collection.immutable.HashSet: contains(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: get0(Ljava/lang/Object;II)
scala.collection.immutable.HashSet: elemHashCode(Ljava/lang/Object;) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.collection.immutable.HashSet: empty() ===> scala.collection.immutable.HashSet$: empty()
scala.collection.immutable.HashSet: empty() ===> scala.collection.immutable.HashSet: empty()
scala.collection.immutable.HashSet: iterator() ===> scala.collection.Iterator$: empty()
scala.collection.immutable.HashSet: seq() ===> scala.collection.immutable.Set$class: seq(Lscala/collection/immutable/Set;)
scala.collection.immutable.HashSet: seq() ===> scala.collection.immutable.Set: seq()
scala.collection.immutable.HashSet: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.HashSet: toSet() ===> scala.collection.immutable.Set$class: toSet(Lscala/collection/immutable/Set;)
scala.collection.immutable.HashSet: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.immutable.HashSet: updated0(Ljava/lang/Object;II) ===> scala.collection.immutable.HashSet$HashSet1: <init>(Ljava/lang/Object;I)
scala.collection.immutable.IndexedSeq$: <clinit>() ===> scala.collection.immutable.IndexedSeq$: <init>()
scala.collection.immutable.IndexedSeq$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.immutable.IndexedSeq$: newBuilder() ===> scala.collection.immutable.Vector$: newBuilder()
scala.collection.immutable.Iterable$: <clinit>() ===> scala.collection.immutable.Iterable$: <init>()
scala.collection.immutable.Iterable$: <init>() ===> scala.collection.generic.GenTraversableFactory: <init>()
scala.collection.immutable.Iterable$: newBuilder() ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.immutable.List$$anonfun$toStream$1: <init>(Lscala/collection/immutable/List;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.List$$anonfun$toStream$1: <init>(Lscala/collection/immutable/List;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.List$$anonfun$toStream$1: apply() ===> scala.collection.immutable.List$$anonfun$toStream$1: apply()
scala.collection.immutable.List$$anonfun$toStream$1: apply() ===> scala.collection.immutable.List: toStream()
scala.collection.immutable.List$$anonfun$toStream$1: apply() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.List$: <clinit>() ===> scala.collection.immutable.List$: <init>()
scala.collection.immutable.List$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.immutable.List$: apply(Lscala/collection/Seq;) ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
scala.collection.immutable.List$: apply(Lscala/collection/Seq;) ===> scala.collection.Seq: toList()
scala.collection.immutable.List$: canBuildFrom() ===> scala.collection.generic.GenTraversableFactory: ReusableCBF()
scala.collection.immutable.List$: empty() ===> scala.collection.immutable.List$: empty()
scala.collection.immutable.List$: newBuilder() ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;)
scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.List: $colon$colon(Ljava/lang/Object;) ===> scala.collection.immutable.$colon$colon: <init>(Ljava/lang/Object;Lscala/collection/immutable/List;)
scala.collection.immutable.List: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.immutable.List: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.GenTraversableOnce: seq()
scala.collection.immutable.List: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;)
scala.collection.immutable.List: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.List: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableOnce: toList()
scala.collection.immutable.List: <init>() ===> scala.collection.AbstractSeq: <init>()
scala.collection.immutable.List: <init>() ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.List: <init>() ===> scala.collection.immutable.LinearSeq$class: $init$(Lscala/collection/immutable/LinearSeq;)
scala.collection.immutable.List: <init>() ===> scala.collection.immutable.Seq$class: $init$(Lscala/collection/immutable/Seq;)
scala.collection.immutable.List: <init>() ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.List: <init>() ===> scala.collection.LinearSeq$class: $init$(Lscala/collection/LinearSeq;)
scala.collection.immutable.List: <init>() ===> scala.collection.LinearSeqLike$class: $init$(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.List: <init>() ===> scala.collection.LinearSeqOptimized$class: $init$(Lscala/collection/LinearSeqOptimized;)
scala.collection.immutable.List: <init>() ===> scala.Product$class: $init$(Lscala/Product;)
scala.collection.immutable.List: apply(I) ===> scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I)
scala.collection.immutable.List: apply(Ljava/lang/Object;) ===> scala.collection.LinearSeqOptimized: apply(I)
scala.collection.immutable.List: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.List: drop(I) ===> scala.collection.immutable.List: drop(I)
scala.collection.immutable.List: drop(I) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.List: drop(I) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.List: exists(Lscala/Function1;) ===> scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;)
scala.collection.immutable.List: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.List: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.List: hashCode() ===> scala.collection.LinearSeqLike$class: hashCode(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.List: iterator() ===> scala.collection.LinearSeqLike$class: iterator(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.List: last() ===> scala.collection.LinearSeqOptimized$class: last(Lscala/collection/LinearSeqOptimized;)
scala.collection.immutable.List: length() ===> scala.collection.LinearSeqOptimized$class: length(Lscala/collection/LinearSeqOptimized;)
scala.collection.immutable.List: lengthCompare(I) ===> scala.collection.LinearSeqOptimized$class: lengthCompare(Lscala/collection/LinearSeqOptimized;I)
scala.collection.immutable.List: loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.List: loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.List: loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;) ===> scala.collection.immutable.$colon$colon: hd$1()
scala.collection.immutable.List: loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;) ===> scala.collection.immutable.$colon$colon: tl$1()
scala.collection.immutable.List: loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.List: loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.immutable.List: reduceLeft(Lscala/Function2;) ===> scala.collection.LinearSeqOptimized$class: reduceLeft(Lscala/collection/LinearSeqOptimized;Lscala/Function2;)
scala.collection.immutable.List: reverse() ===> scala.collection.immutable.List: $colon$colon(Ljava/lang/Object;)
scala.collection.immutable.List: reverse() ===> scala.collection.immutable.List: reverse()
scala.collection.immutable.List: reverse() ===> scala.collection.IterableLike: head()
scala.collection.immutable.List: reverse() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.List: reverse() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.List: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.immutable.List: scala$collection$LinearSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.immutable.List: seq() ===> scala.collection.immutable.LinearSeq$class: seq(Lscala/collection/immutable/LinearSeq;)
scala.collection.immutable.List: seq() ===> scala.collection.immutable.LinearSeq: seq()
scala.collection.immutable.List: take(I) ===> scala.collection.immutable.List: take(I)
scala.collection.immutable.List: take(I) ===> scala.collection.IterableLike: head()
scala.collection.immutable.List: take(I) ===> scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;)
scala.collection.immutable.List: take(I) ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.immutable.List: take(I) ===> scala.collection.mutable.ListBuffer: toList()
scala.collection.immutable.List: take(I) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.List: take(I) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.List: takeRight(I) ===> scala.collection.immutable.List: drop(I)
scala.collection.immutable.List: takeRight(I) ===> scala.collection.immutable.List: loop$2(Lscala/collection/immutable/List;Lscala/collection/immutable/List;)
scala.collection.immutable.List: thisCollection() ===> scala.collection.LinearSeqLike$class: thisCollection(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.List: thisCollection() ===> scala.collection.LinearSeqLike: thisCollection()
scala.collection.immutable.List: toCollection(Ljava/lang/Object;) ===> scala.collection.LinearSeqLike: toCollection(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.List: toCollection(Lscala/collection/LinearSeqLike;) ===> scala.collection.LinearSeqLike$class: toCollection(Lscala/collection/LinearSeqLike;Lscala/collection/LinearSeqLike;)
scala.collection.immutable.List: toStream() ===> scala.collection.immutable.List$$anonfun$toStream$1: <init>(Lscala/collection/immutable/List;)
scala.collection.immutable.List: toStream() ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.immutable.List: toStream() ===> scala.collection.IterableLike: head()
scala.collection.immutable.List: toStream() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.ListMap$$anon$1: <init>(Lscala/collection/immutable/ListMap;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.immutable.ListMap$$anon$1: hasNext() ===> scala.collection.immutable.ListMap$$anon$1: self()
scala.collection.immutable.ListMap$$anon$1: hasNext() ===> scala.collection.MapLike: isEmpty()
scala.collection.immutable.ListMap$$anon$1: next() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.collection.immutable.ListMap$$anon$1: hasNext()
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.collection.immutable.ListMap$$anon$1: next()
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.collection.immutable.ListMap$$anon$1: self()
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.collection.immutable.ListMap$$anon$1: self_$eq(Lscala/collection/immutable/ListMap;)
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.collection.immutable.ListMap: key()
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.collection.immutable.ListMap: tail()
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.collection.immutable.ListMap: value()
scala.collection.immutable.ListMap$$anon$1: next() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.ListMap$: <clinit>() ===> scala.collection.immutable.ListMap$: <init>()
scala.collection.immutable.ListMap$: <init>() ===> scala.collection.generic.ImmutableMapFactory: <init>()
scala.collection.immutable.ListMap$: empty() ===> scala.collection.immutable.ListMap$: empty()
scala.collection.immutable.ListMap$EmptyListMap$: <clinit>() ===> scala.collection.immutable.ListMap$EmptyListMap$: <init>()
scala.collection.immutable.ListMap$EmptyListMap$: <init>() ===> scala.collection.immutable.ListMap: <init>()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.generic.GenMapFactory: apply(Lscala/collection/Seq;)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.immutable.List: $colon$colon(Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.immutable.ListMap$Node: <init>(Lscala/collection/immutable/ListMap;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: key()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: tail()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: value()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.collection.TraversableOnce: nonEmpty()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.Tuple2: _1()
scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;) ===> scala.Tuple2: _2()
scala.collection.immutable.ListMap$Node: <init>(Lscala/collection/immutable/ListMap;Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.ListMap$Node: <init>(Lscala/collection/immutable/ListMap;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: <init>()
scala.collection.immutable.ListMap$Node: apply(Ljava/lang/Object;) ===> scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: key()
scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: tail()
scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: value()
scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: apply0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: get(Ljava/lang/Object;) ===> scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: key()
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: tail()
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap: value()
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.collection.TraversableOnce: nonEmpty()
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: get0(Lscala/collection/immutable/ListMap;Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: size() ===> scala.collection.immutable.ListMap$Node: size0(Lscala/collection/immutable/ListMap;I)
scala.collection.immutable.ListMap$Node: size0(Lscala/collection/immutable/ListMap;I) ===> scala.collection.immutable.ListMap: tail()
scala.collection.immutable.ListMap$Node: size0(Lscala/collection/immutable/ListMap;I) ===> scala.collection.MapLike: isEmpty()
scala.collection.immutable.ListMap$Node: tail() ===> scala.collection.immutable.ListMap$Node: scala$collection$immutable$ListMap$Node$$$outer()
scala.collection.immutable.ListMap$Node: tail() ===> scala.collection.immutable.ListMap$Node: tail()
scala.collection.immutable.ListMap$Node: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap$Node: $minus(Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap$Node: <init>(Lscala/collection/immutable/ListMap;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.ListMap$Node: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.MapLike: contains(Ljava/lang/Object;)
scala.collection.immutable.ListMap: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.ListMap: $plus(Lscala/Tuple2;)
scala.collection.immutable.ListMap: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.ListMap: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.ListMap: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.immutable.ListMap: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.immutable.ListMap: <init>() ===> scala.collection.immutable.AbstractMap: <init>()
scala.collection.immutable.ListMap: empty() ===> scala.collection.immutable.ListMap$: empty()
scala.collection.immutable.ListMap: empty() ===> scala.collection.immutable.ListMap: empty()
scala.collection.immutable.ListMap: iterator() ===> scala.collection.immutable.ListMap$$anon$1: <init>(Lscala/collection/immutable/ListMap;)
scala.collection.immutable.ListMap: iterator() ===> scala.collection.SeqLike: reverseIterator()
scala.collection.immutable.ListMap: iterator() ===> scala.collection.TraversableOnce: toList()
scala.collection.immutable.ListMap: key() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.ListMap: seq() ===> scala.collection.immutable.Map: seq()
scala.collection.immutable.ListMap: tail() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.ListMap: tail() ===> scala.collection.immutable.ListMap: tail()
scala.collection.immutable.ListMap: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.ListMap: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.ListMap$Node: <init>(Lscala/collection/immutable/ListMap;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.ListMap: value() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.ListSet$$anon$1: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.immutable.ListSet$$anon$1: hasNext() ===> scala.collection.immutable.ListSet$$anon$1: that()
scala.collection.immutable.ListSet$$anon$1: hasNext() ===> scala.collection.TraversableOnce: nonEmpty()
scala.collection.immutable.ListSet$$anon$1: next() ===> scala.collection.immutable.ListSet$$anon$1: hasNext()
scala.collection.immutable.ListSet$$anon$1: next() ===> scala.collection.immutable.ListSet$$anon$1: that()
scala.collection.immutable.ListSet$$anon$1: next() ===> scala.collection.immutable.ListSet$$anon$1: that_$eq(Lscala/collection/immutable/ListSet;)
scala.collection.immutable.ListSet$$anon$1: next() ===> scala.collection.immutable.ListSet: head()
scala.collection.immutable.ListSet$$anon$1: next() ===> scala.collection.immutable.ListSet: tail()
scala.collection.immutable.ListSet$$anon$1: next() ===> scala.collection.Iterator$: empty()
scala.collection.immutable.ListSet$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.immutable.ListSet$: <clinit>() ===> scala.collection.immutable.ListSet$: <init>()
scala.collection.immutable.ListSet$: <init>() ===> scala.collection.generic.ImmutableSetFactory: <init>()
scala.collection.immutable.ListSet$: empty() ===> scala.collection.immutable.ListSet$: empty()
scala.collection.immutable.ListSet$: newBuilder() ===> scala.collection.immutable.ListSet$ListSetBuilder: <init>()
scala.collection.immutable.ListSet$EmptyListSet$: <clinit>() ===> scala.collection.immutable.ListSet$EmptyListSet$: <init>()
scala.collection.immutable.ListSet$EmptyListSet$: <init>() ===> scala.collection.immutable.ListSet: <init>()
scala.collection.immutable.ListSet$ListSetBuilder$$anonfun$result$1: <init>(Lscala/collection/immutable/ListSet$ListSetBuilder;) ===> scala.runtime.AbstractFunction2: <init>()
scala.collection.immutable.ListSet$ListSetBuilder$$anonfun$result$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$ListSetBuilder$$anonfun$result$1: apply(Lscala/collection/immutable/ListSet;Ljava/lang/Object;)
scala.collection.immutable.ListSet$ListSetBuilder$$anonfun$result$1: apply(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> scala.collection.immutable.ListSet: scala$collection$immutable$ListSet$$unchecked_$plus(Ljava/lang/Object;)
scala.collection.immutable.ListSet$ListSetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.ListSet$ListSetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$ListSetBuilder: $plus$eq(Ljava/lang/Object;)
scala.collection.immutable.ListSet$ListSetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$ListSetBuilder: elems()
scala.collection.immutable.ListSet$ListSetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$ListSetBuilder: seen()
scala.collection.immutable.ListSet$ListSetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.HashSet: $plus$eq(Ljava/lang/Object;)
scala.collection.immutable.ListSet$ListSetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;)
scala.collection.immutable.ListSet$ListSetBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.immutable.ListSet$ListSetBuilder: <init>() ===> scala.collection.immutable.ListSet$: empty()
scala.collection.immutable.ListSet$ListSetBuilder: <init>() ===> scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;)
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> java.lang.Object: <init>()
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.generic.Growable: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.mutable.HashSet: <init>()
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.mutable.ListBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;) ===> scala.collection.SeqLike: reverse()
scala.collection.immutable.ListSet$ListSetBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.immutable.ListSet$ListSetBuilder: result() ===> scala.collection.generic.TraversableForwarder$class: foldLeft(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;Lscala/Function2;)
scala.collection.immutable.ListSet$ListSetBuilder: result() ===> scala.collection.immutable.ListSet$ListSetBuilder$$anonfun$result$1: <init>(Lscala/collection/immutable/ListSet$ListSetBuilder;)
scala.collection.immutable.ListSet$ListSetBuilder: result() ===> scala.collection.immutable.ListSet$ListSetBuilder: elems()
scala.collection.immutable.ListSet$ListSetBuilder: result() ===> scala.collection.immutable.ListSet$ListSetBuilder: result()
scala.collection.immutable.ListSet$ListSetBuilder: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.immutable.ListSet$ListSetBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.immutable.ListSet$ListSetBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.immutable.ListSet$ListSetBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.immutable.ListSet$Node: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$Node: $plus(Ljava/lang/Object;)
scala.collection.immutable.ListSet$Node: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$Node: <init>(Lscala/collection/immutable/ListSet;Ljava/lang/Object;)
scala.collection.immutable.ListSet$Node: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$Node: contains(Ljava/lang/Object;)
scala.collection.immutable.ListSet$Node: <init>(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.ListSet$Node: <init>(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> scala.collection.immutable.ListSet: <init>()
scala.collection.immutable.ListSet$Node: contains(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;)
scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> scala.collection.immutable.ListSet: head()
scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> scala.collection.immutable.ListSet: isEmpty()
scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> scala.collection.immutable.ListSet: scala$collection$immutable$ListSet$$unchecked_outer()
scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.ListSet$Node: containsInternal(Lscala/collection/immutable/ListSet;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.ListSet$Node: scala$collection$immutable$ListSet$$unchecked_outer() ===> scala.collection.immutable.ListSet$Node: scala$collection$immutable$ListSet$Node$$$outer()
scala.collection.immutable.ListSet$Node: size() ===> scala.collection.immutable.ListSet$Node: sizeInternal(Lscala/collection/immutable/ListSet;I)
scala.collection.immutable.ListSet$Node: sizeInternal(Lscala/collection/immutable/ListSet;I) ===> scala.collection.immutable.ListSet: isEmpty()
scala.collection.immutable.ListSet$Node: sizeInternal(Lscala/collection/immutable/ListSet;I) ===> scala.collection.immutable.ListSet: scala$collection$immutable$ListSet$$unchecked_outer()
scala.collection.immutable.ListSet$Node: tail() ===> scala.collection.immutable.ListSet$Node: scala$collection$immutable$ListSet$Node$$$outer()
scala.collection.immutable.ListSet$Node: tail() ===> scala.collection.immutable.ListSet$Node: tail()
scala.collection.immutable.ListSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.generic.Growable: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.immutable.ListSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.GenTraversableOnce: isEmpty()
scala.collection.immutable.ListSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.GenTraversableOnce: seq()
scala.collection.immutable.ListSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.immutable.ListSet$ListSetBuilder: <init>(Lscala/collection/immutable/ListSet;)
scala.collection.immutable.ListSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.immutable.ListSet$ListSetBuilder: result()
scala.collection.immutable.ListSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.immutable.ListSet: $plus$plus(Lscala/collection/GenTraversableOnce;)
scala.collection.immutable.ListSet: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$Node: <init>(Lscala/collection/immutable/ListSet;Ljava/lang/Object;)
scala.collection.immutable.ListSet: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet: $plus(Ljava/lang/Object;)
scala.collection.immutable.ListSet: <init>() ===> scala.collection.AbstractSet: <init>()
scala.collection.immutable.ListSet: <init>() ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.ListSet: <init>() ===> scala.collection.immutable.Set$class: $init$(Lscala/collection/immutable/Set;)
scala.collection.immutable.ListSet: <init>() ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.ListSet: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.ListSet: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.immutable.ListSet: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.immutable.ListSet: head() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.ListSet: iterator() ===> scala.collection.immutable.ListSet$$anon$1: <init>(Lscala/collection/immutable/ListSet;)
scala.collection.immutable.ListSet: scala$collection$immutable$ListSet$$unchecked_$plus(Ljava/lang/Object;) ===> scala.collection.immutable.ListSet$Node: <init>(Lscala/collection/immutable/ListSet;Ljava/lang/Object;)
scala.collection.immutable.ListSet: scala$collection$immutable$ListSet$$unchecked_outer() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.ListSet: seq() ===> scala.collection.immutable.Set$class: seq(Lscala/collection/immutable/Set;)
scala.collection.immutable.ListSet: seq() ===> scala.collection.immutable.Set: seq()
scala.collection.immutable.ListSet: tail() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.ListSet: tail() ===> scala.collection.immutable.ListSet: tail()
scala.collection.immutable.ListSet: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.ListSet: toSet() ===> scala.collection.immutable.Set$class: toSet(Lscala/collection/immutable/Set;)
scala.collection.immutable.ListSet: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.immutable.Map$: <clinit>() ===> scala.collection.immutable.Map$: <init>()
scala.collection.immutable.Map$: <init>() ===> scala.collection.generic.ImmutableMapFactory: <init>()
scala.collection.immutable.Map$: empty() ===> scala.collection.immutable.Map$: empty()
scala.collection.immutable.Map$class: empty(Lscala/collection/immutable/Map;) ===> scala.collection.immutable.Map$: empty()
scala.collection.immutable.Map$EmptyMap$: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$EmptyMap$: $plus(Lscala/Tuple2;)
scala.collection.immutable.Map$EmptyMap$: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$EmptyMap$: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$EmptyMap$: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.immutable.Map$EmptyMap$: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.immutable.Map$EmptyMap$: <clinit>() ===> scala.collection.immutable.Map$EmptyMap$: <init>()
scala.collection.immutable.Map$EmptyMap$: <init>() ===> scala.collection.immutable.AbstractMap: <init>()
scala.collection.immutable.Map$EmptyMap$: iterator() ===> scala.collection.Iterator$: empty()
scala.collection.immutable.Map$EmptyMap$: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map1: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map1: $plus(Lscala/Tuple2;)
scala.collection.immutable.Map$Map1: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map1: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.immutable.Map$Map1: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.immutable.Map$Map1: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.AbstractMap: <init>()
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: foreach(Lscala/Function1;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: get(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map1: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: get(Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Map$Map1: iterator() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: iterator() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map1: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map1: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map2: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map1: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map2: $plus(Lscala/Tuple2;)
scala.collection.immutable.Map$Map2: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map2: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.immutable.Map$Map2: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.immutable.Map$Map2: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.AbstractMap: <init>()
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: foreach(Lscala/Function1;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: get(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map2: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: get(Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Map$Map2: iterator() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: iterator() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map2: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map2: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map2: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map3: $plus(Lscala/Tuple2;)
scala.collection.immutable.Map$Map3: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map3: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.immutable.Map$Map3: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.immutable.Map$Map3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.AbstractMap: <init>()
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: foreach(Lscala/Function1;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: get(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map3: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: get(Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Map$Map3: iterator() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: iterator() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map3: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map3: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map4: $plus(Lscala/Tuple2;)
scala.collection.immutable.Map$Map4: $plus(Lscala/Tuple2;) ===> scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.immutable.Map$Map4: $plus(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.immutable.Map$Map4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.AbstractMap: <init>()
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: foreach(Lscala/Function1;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: get(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: get(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map4: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: get(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: get(Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Map$Map4: iterator() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: iterator() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.HashMap: $plus(Lscala/Tuple2;Lscala/Tuple2;Lscala/collection/Seq;)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.HashMap: <init>()
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Map$Map4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Map$Map4: updated(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Nil$: <clinit>() ===> scala.collection.immutable.Nil$: <init>()
scala.collection.immutable.Nil$: <init>() ===> scala.collection.immutable.List: <init>()
scala.collection.immutable.Nil$: equals(Ljava/lang/Object;) ===> scala.collection.GenSeq: isEmpty()
scala.collection.immutable.Nil$: head() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.Nil$: head() ===> scala.collection.immutable.Nil$: head()
scala.collection.immutable.Nil$: productElement(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.immutable.Nil$: productElement(I) ===> java.lang.Object: toString()
scala.collection.immutable.Nil$: productElement(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.immutable.Nil$: productElement(I) ===> org.clapper.argot.Parameter: toString()
scala.collection.immutable.Nil$: productElement(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Nil$: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.collection.immutable.Nil$: tail() ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.immutable.Nil$: tail() ===> scala.collection.immutable.Nil$: tail()
scala.collection.immutable.Range$: <clinit>() ===> scala.collection.immutable.Range$: <init>()
scala.collection.immutable.Range$: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.Range$Inclusive: <init>(III) ===> scala.collection.immutable.Range: <init>(III)
scala.collection.immutable.Range$Inclusive: copy(III) ===> scala.collection.immutable.Range$Inclusive: <init>(III)
scala.collection.immutable.Range: <init>(III) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
scala.collection.immutable.Range: <init>(III) ===> scala.collection.AbstractSeq: <init>()
scala.collection.immutable.Range: <init>(III) ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.IndexedSeq$class: $init$(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.Range: isEmpty()
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.Range: isInclusive()
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.Range: longLength()
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.Seq$class: $init$(Lscala/collection/immutable/Seq;)
scala.collection.immutable.Range: <init>(III) ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Range: <init>(III) ===> scala.collection.IndexedSeq$class: $init$(Lscala/collection/IndexedSeq;)
scala.collection.immutable.Range: <init>(III) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Range: apply$mcII$sp(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.immutable.Range: apply$mcII$sp(I) ===> java.lang.Object: toString()
scala.collection.immutable.Range: apply$mcII$sp(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.immutable.Range: apply$mcII$sp(I) ===> org.clapper.argot.Parameter: toString()
scala.collection.immutable.Range: apply$mcII$sp(I) ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: apply$mcII$sp(I) ===> scala.collection.immutable.Range: scala$collection$immutable$Range$$validateMaxLength()
scala.collection.immutable.Range: apply$mcII$sp(I) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: apply$mcII$sp(I) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: apply$mcII$sp(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Range: apply(I) ===> scala.collection.immutable.Range: apply$mcII$sp(I)
scala.collection.immutable.Range: apply(I) ===> scala.collection.immutable.Range: apply(I)
scala.collection.immutable.Range: apply(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Range: apply(Ljava/lang/Object;) ===> scala.collection.immutable.Range: apply(I)
scala.collection.immutable.Range: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Range: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.Range: companion() ===> scala.collection.immutable.IndexedSeq$class: companion(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.Range: copy(III) ===> scala.collection.immutable.Range: <init>(III)
scala.collection.immutable.Range: description() ===> scala.collection.immutable.Range: end()
scala.collection.immutable.Range: description() ===> scala.collection.immutable.Range: isInclusive()
scala.collection.immutable.Range: description() ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: description() ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: description() ===> scala.collection.immutable.StringLike: format(Lscala/collection/Seq;)
scala.collection.immutable.Range: description() ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
scala.collection.immutable.Range: description() ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.immutable.Range: description() ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: copy(III)
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: drop(I)
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: end()
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: isEmpty()
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: locationAfterN(I)
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: newEmptyRange(I)
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: drop(I) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: equals(Ljava/lang/Object;) ===> scala.collection.GenSeqLike$class: equals(Lscala/collection/GenSeqLike;Ljava/lang/Object;)
scala.collection.immutable.Range: equals(Ljava/lang/Object;) ===> scala.collection.immutable.Range: isEmpty()
scala.collection.immutable.Range: equals(Ljava/lang/Object;) ===> scala.collection.immutable.Range: last()
scala.collection.immutable.Range: equals(Ljava/lang/Object;) ===> scala.collection.immutable.Range: length()
scala.collection.immutable.Range: equals(Ljava/lang/Object;) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: equals(Ljava/lang/Object;) ===> scala.collection.IterableLike: canEqual(Ljava/lang/Object;)
scala.collection.immutable.Range: fail() ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
scala.collection.immutable.Range: fail() ===> scala.collection.immutable.Range: description()
scala.collection.immutable.Range: fail() ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.immutable.Range: fail() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.immutable.Range: fail() ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> scala.collection.immutable.Range: terminalElement()
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: foreach(Lscala/Function1;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Range: gap() ===> scala.collection.immutable.Range: end()
scala.collection.immutable.Range: gap() ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: hashCode() ===> scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Range: hasStub() ===> scala.collection.immutable.Range: isExact()
scala.collection.immutable.Range: hasStub() ===> scala.collection.immutable.Range: isInclusive()
scala.collection.immutable.Range: isExact() ===> scala.collection.immutable.Range: gap()
scala.collection.immutable.Range: isExact() ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Range: last() ===> scala.collection.immutable.Range: isEmpty()
scala.collection.immutable.Range: last() ===> scala.collection.immutable.Range: lastElement()
scala.collection.immutable.Range: last() ===> scala.collection.LinearSeqOptimized: last()
scala.collection.immutable.Range: last() ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.Range: length() ===> scala.collection.immutable.Range: fail()
scala.collection.immutable.Range: length() ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: locationAfterN(I) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: locationAfterN(I) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: longLength() ===> scala.collection.immutable.Range: gap()
scala.collection.immutable.Range: longLength() ===> scala.collection.immutable.Range: hasStub()
scala.collection.immutable.Range: longLength() ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: max(Lscala/math/Ordering;) ===> scala.collection.immutable.Range: last()
scala.collection.immutable.Range: max(Lscala/math/Ordering;) ===> scala.collection.immutable.Range: max(Lscala/math/Ordering;)
scala.collection.immutable.Range: max(Lscala/math/Ordering;) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: max(Lscala/math/Ordering;) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: max(Lscala/math/Ordering;) ===> scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)
scala.collection.immutable.Range: max(Lscala/math/Ordering;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Range: max(Lscala/math/Ordering;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.Range: newEmptyRange(I) ===> scala.collection.immutable.Range: <init>(III)
scala.collection.immutable.Range: newEmptyRange(I) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: reverse() ===> scala.collection.immutable.Range$Inclusive: <init>(III)
scala.collection.immutable.Range: reverse() ===> scala.collection.immutable.Range: isEmpty()
scala.collection.immutable.Range: reverse() ===> scala.collection.immutable.Range: last()
scala.collection.immutable.Range: reverse() ===> scala.collection.immutable.Range: reverse()
scala.collection.immutable.Range: reverse() ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: reverse() ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: scala$collection$immutable$Range$$validateMaxLength() ===> scala.collection.immutable.Range: fail()
scala.collection.immutable.Range: scala$collection$immutable$Range$$validateMaxLength() ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: seq() ===> scala.collection.immutable.IndexedSeq$class: seq(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.Range: seq() ===> scala.collection.immutable.IndexedSeq: seq()
scala.collection.immutable.Range: size() ===> scala.collection.immutable.Range: length()
scala.collection.immutable.Range: tail() ===> scala.collection.immutable.Nil$: tail()
scala.collection.immutable.Range: tail() ===> scala.collection.immutable.Range: drop(I)
scala.collection.immutable.Range: tail() ===> scala.collection.immutable.Range: isEmpty()
scala.collection.immutable.Range: tail() ===> scala.collection.immutable.Range: tail()
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range$Inclusive: <init>(III)
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range: isEmpty()
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range: locationAfterN(I)
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range: newEmptyRange(I)
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: take(I) ===> scala.collection.immutable.Range: take(I)
scala.collection.immutable.Range: thisCollection() ===> scala.collection.IndexedSeqLike$class: thisCollection(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Range: thisCollection() ===> scala.collection.IndexedSeqLike: thisCollection()
scala.collection.immutable.Range: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Range: toCollection(Ljava/lang/Object;) ===> scala.collection.IndexedSeqLike$class: toCollection(Lscala/collection/IndexedSeqLike;Ljava/lang/Object;)
scala.collection.immutable.Range: toCollection(Ljava/lang/Object;) ===> scala.collection.IndexedSeqLike: toCollection(Ljava/lang/Object;)
scala.collection.immutable.Range: toString() ===> scala.collection.immutable.Range$: MAX_PRINT()
scala.collection.immutable.Range: toString() ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: toString() ===> scala.collection.immutable.Range: take(I)
scala.collection.immutable.Range: toString() ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> scala.collection.immutable.Range: end()
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> scala.collection.immutable.Range: numRangeElements()
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> scala.collection.immutable.Range: scala$collection$immutable$Range$$validateMaxLength()
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Seq$: <clinit>() ===> scala.collection.immutable.Seq$: <init>()
scala.collection.immutable.Seq$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.immutable.Seq$: newBuilder() ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.immutable.Set$: <clinit>() ===> scala.collection.immutable.Set$: <init>()
scala.collection.immutable.Set$: <init>() ===> scala.collection.generic.ImmutableSetFactory: <init>()
scala.collection.immutable.Set$: canBuildFrom() ===> scala.collection.generic.GenSetFactory: setCanBuildFrom()
scala.collection.immutable.Set$: empty() ===> scala.collection.immutable.Set$: empty()
scala.collection.immutable.Set$EmptySet$: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$EmptySet$: $plus(Ljava/lang/Object;)
scala.collection.immutable.Set$EmptySet$: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set1: <init>(Ljava/lang/Object;)
scala.collection.immutable.Set$EmptySet$: <clinit>() ===> scala.collection.immutable.Set$EmptySet$: <init>()
scala.collection.immutable.Set$EmptySet$: <init>() ===> scala.collection.AbstractSet: <init>()
scala.collection.immutable.Set$EmptySet$: <init>() ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Set$EmptySet$: <init>() ===> scala.collection.immutable.Set$class: $init$(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$EmptySet$: <init>() ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Set$EmptySet$: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$EmptySet$: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.immutable.Set$EmptySet$: companion() ===> scala.collection.immutable.Set$class: companion(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$EmptySet$: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.immutable.Set$EmptySet$: iterator() ===> scala.collection.Iterator$: empty()
scala.collection.immutable.Set$EmptySet$: seq() ===> scala.collection.immutable.Set$class: seq(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$EmptySet$: seq() ===> scala.collection.immutable.Set: seq()
scala.collection.immutable.Set$EmptySet$: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.Set$EmptySet$: toSet() ===> scala.collection.immutable.Set$class: toSet(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$EmptySet$: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.immutable.Set$Set1: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set1: $plus(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set1: contains(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: <init>(Ljava/lang/Object;) ===> scala.collection.AbstractSet: <init>()
scala.collection.immutable.Set$Set1: <init>(Ljava/lang/Object;) ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Set$Set1: <init>(Ljava/lang/Object;) ===> scala.collection.immutable.Set$class: $init$(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set1: <init>(Ljava/lang/Object;) ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Set$Set1: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.immutable.Set$Set1: companion() ===> scala.collection.immutable.Set$class: companion(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set1: contains(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Set$Set1: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Set$Set1: iterator() ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.immutable.Set$Set1: seq() ===> scala.collection.immutable.Set$class: seq(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set1: seq() ===> scala.collection.immutable.Set: seq()
scala.collection.immutable.Set$Set1: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.Set$Set1: toSet() ===> scala.collection.immutable.Set$class: toSet(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set1: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.immutable.Set$Set2: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set2: $plus(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set2: contains(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.AbstractSet: <init>()
scala.collection.immutable.Set$Set2: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Set$Set2: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Set$class: $init$(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set2: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Set$Set2: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.immutable.Set$Set2: companion() ===> scala.collection.immutable.Set$class: companion(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set2: contains(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Set$Set2: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Set$Set2: iterator() ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.immutable.Set$Set2: seq() ===> scala.collection.immutable.Set$class: seq(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set2: seq() ===> scala.collection.immutable.Set: seq()
scala.collection.immutable.Set$Set2: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.Set$Set2: toSet() ===> scala.collection.immutable.Set$class: toSet(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set2: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.immutable.Set$Set3: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set3: $plus(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set3: contains(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.AbstractSet: <init>()
scala.collection.immutable.Set$Set3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Set$Set3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Set$class: $init$(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set3: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Set$Set3: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.immutable.Set$Set3: companion() ===> scala.collection.immutable.Set$class: companion(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set3: contains(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Set$Set3: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Set$Set3: iterator() ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.immutable.Set$Set3: seq() ===> scala.collection.immutable.Set$class: seq(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set3: seq() ===> scala.collection.immutable.Set: seq()
scala.collection.immutable.Set$Set3: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.Set$Set3: toSet() ===> scala.collection.immutable.Set$class: toSet(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set3: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.immutable.Set$Set4: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: $plus(Ljava/lang/Object;Ljava/lang/Object;Lscala/collection/Seq;)
scala.collection.immutable.Set$Set4: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.HashSet: <init>()
scala.collection.immutable.Set$Set4: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set4: $plus(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: $plus(Ljava/lang/Object;) ===> scala.collection.immutable.Set$Set4: contains(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: $plus(Ljava/lang/Object;) ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.AbstractSet: <init>()
scala.collection.immutable.Set$Set4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Set$Set4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Set$class: $init$(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set4: <init>(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Set$Set4: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.immutable.Set$Set4: companion() ===> scala.collection.immutable.Set$class: companion(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set4: contains(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: contains(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.Set$Set4: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: contains(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: iterator() ===> scala.collection.Iterator$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Set$Set4: iterator() ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.immutable.Set$Set4: seq() ===> scala.collection.immutable.Set$class: seq(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set4: seq() ===> scala.collection.immutable.Set: seq()
scala.collection.immutable.Set$Set4: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.immutable.Set$Set4: toSet() ===> scala.collection.immutable.Set$class: toSet(Lscala/collection/immutable/Set;)
scala.collection.immutable.Set$Set4: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.immutable.Stream$$anonfun$$plus$plus$1: <init>(Lscala/collection/immutable/Stream;Lscala/collection/GenTraversableOnce;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.Stream$$anonfun$$plus$plus$1: <init>(Lscala/collection/immutable/Stream;Lscala/collection/GenTraversableOnce;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.Stream$$anonfun$$plus$plus$1: apply() ===> scala.collection.immutable.Stream$$anonfun$$plus$plus$1: apply()
scala.collection.immutable.Stream$$anonfun$$plus$plus$1: apply() ===> scala.collection.immutable.Stream$: canBuildFrom()
scala.collection.immutable.Stream$$anonfun$$plus$plus$1: apply() ===> scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Stream$$anonfun$$plus$plus$1: apply() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream$$anonfun$1: <init>(Lscala/collection/immutable/Stream;Lscala/runtime/ObjectRef;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.Stream$$anonfun$1: apply() ===> scala.collection.immutable.Stream$$anonfun$1: apply()
scala.collection.immutable.Stream$$anonfun$append$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function0;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.Stream$$anonfun$append$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function0;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.Stream$$anonfun$append$1: apply() ===> scala.collection.immutable.Stream$$anonfun$append$1: apply()
scala.collection.immutable.Stream$$anonfun$append$1: apply() ===> scala.collection.immutable.Stream: append(Lscala/Function0;)
scala.collection.immutable.Stream$$anonfun$append$1: apply() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream$$anonfun$flatMap$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;Lscala/runtime/ObjectRef;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.Stream$$anonfun$flatMap$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;Lscala/runtime/ObjectRef;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.GenTraversableOnce: toStream()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.immutable.Stream$$anonfun$flatMap$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;Lscala/runtime/ObjectRef;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.immutable.Stream$$anonfun$flatMap$1: apply()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.immutable.Stream$: canBuildFrom()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.immutable.Stream$: empty()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.immutable.Stream: append(Lscala/Function0;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.TraversableLike: repr()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$flatMap$1: apply() ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.Stream$$anonfun$map$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.immutable.Stream$$anonfun$map$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.immutable.Stream$$anonfun$map$1: apply()
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.immutable.Stream$: canBuildFrom()
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.TraversableLike: repr()
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream$$anonfun$map$1: apply() ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$$anonfun$take$1: <init>(Lscala/collection/immutable/Stream;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.Stream$$anonfun$take$1: apply() ===> scala.collection.immutable.Stream$$anonfun$take$1: apply()
scala.collection.immutable.Stream$$anonfun$take$1: apply() ===> scala.collection.immutable.Stream$: empty()
scala.collection.immutable.Stream$$anonfun$take$2: <init>(Lscala/collection/immutable/Stream;I) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.Stream$$anonfun$take$2: <init>(Lscala/collection/immutable/Stream;I) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.Stream$$anonfun$take$2: apply() ===> scala.collection.immutable.Stream$$anonfun$take$2: apply()
scala.collection.immutable.Stream$$anonfun$take$2: apply() ===> scala.collection.immutable.Stream: take(I)
scala.collection.immutable.Stream$$anonfun$take$2: apply() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream$$hash$colon$colon$: <clinit>() ===> scala.collection.immutable.Stream$$hash$colon$colon$: <init>()
scala.collection.immutable.Stream$$hash$colon$colon$: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.Stream$: <clinit>() ===> scala.collection.immutable.Stream$: <init>()
scala.collection.immutable.Stream$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.immutable.Stream$: apply(Lscala/collection/Seq;) ===> scala.collection.immutable.Stream$: apply(Lscala/collection/Seq;)
scala.collection.immutable.Stream$: apply(Lscala/collection/Seq;) ===> scala.collection.Seq: toStream()
scala.collection.immutable.Stream$: canBuildFrom() ===> scala.collection.immutable.Stream$StreamCanBuildFrom: <init>()
scala.collection.immutable.Stream$: empty() ===> scala.collection.immutable.Stream$: empty()
scala.collection.immutable.Stream$: newBuilder() ===> scala.collection.immutable.Stream$StreamBuilder: <init>()
scala.collection.immutable.Stream$cons$: <clinit>() ===> scala.collection.immutable.Stream$cons$: <init>()
scala.collection.immutable.Stream$cons$: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;) ===> scala.collection.immutable.Stream: <init>()
scala.collection.immutable.Stream$Cons: tail() ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.collection.immutable.Stream$Cons: tail() ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.collection.immutable.Stream$Cons: tail() ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.collection.immutable.Stream$Cons: tail() ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.collection.immutable.Stream$Cons: tail() ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.collection.immutable.Stream$Cons: tail() ===> scala.collection.immutable.Stream$Cons: tail()
scala.collection.immutable.Stream$Cons: tail() ===> scala.collection.immutable.Stream$Cons: tailDefined()
scala.collection.immutable.Stream$Cons: tail() ===> scala.Function0: apply()
scala.collection.immutable.Stream$ConsWrapper: $hash$colon$colon(Ljava/lang/Object;) ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.immutable.Stream$ConsWrapper: <init>(Lscala/Function0;) ===> java.lang.Object: <init>()
scala.collection.immutable.Stream$Empty$: <clinit>() ===> scala.collection.immutable.Stream$Empty$: <init>()
scala.collection.immutable.Stream$Empty$: <init>() ===> scala.collection.immutable.Stream: <init>()
scala.collection.immutable.Stream$Empty$: head() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.Stream$Empty$: head() ===> scala.collection.immutable.Stream$Empty$: head()
scala.collection.immutable.Stream$Empty$: tail() ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.immutable.Stream$Empty$: tail() ===> scala.collection.immutable.Stream$Empty$: tail()
scala.collection.immutable.Stream$StreamBuilder$$anonfun$result$1: <init>(Lscala/collection/immutable/Stream$StreamBuilder;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.immutable.Stream$StreamBuilder$$anonfun$result$1: apply(Ljava/lang/Object;) ===> scala.collection.immutable.Stream$StreamBuilder$$anonfun$result$1: apply(Lscala/collection/TraversableOnce;)
scala.collection.immutable.Stream$StreamBuilder$$anonfun$result$1: apply(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: toStream()
scala.collection.immutable.Stream$StreamBuilder: <init>() ===> scala.collection.mutable.LazyBuilder: <init>()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.generic.TraversableForwarder$class: toStream(Lscala/collection/generic/TraversableForwarder;)
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.GenTraversableOnce: toStream()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.immutable.Stream$$anonfun$flatMap$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;Lscala/runtime/ObjectRef;)
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.immutable.Stream$StreamBuilder$$anonfun$result$1: <init>(Lscala/collection/immutable/Stream$StreamBuilder;)
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.immutable.Stream$StreamBuilder: result()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.immutable.Stream$StreamCanBuildFrom: <init>()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.immutable.Stream: append(Lscala/Function0;)
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.mutable.LazyBuilder: parts()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.TraversableLike: repr()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.collection.TraversableOnce: toStream()
scala.collection.immutable.Stream$StreamBuilder: result() ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.immutable.Stream$StreamCanBuildFrom: <init>() ===> scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: <init>(Lscala/collection/generic/GenTraversableFactory;)
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.GenTraversableOnce: toStream()
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.Stream$$anonfun$$plus$plus$1: <init>(Lscala/collection/immutable/Stream;Lscala/collection/GenTraversableOnce;)
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Stream: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: repr()
scala.collection.immutable.Stream: <init>() ===> scala.collection.AbstractSeq: <init>()
scala.collection.immutable.Stream: <init>() ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Stream: <init>() ===> scala.collection.immutable.LinearSeq$class: $init$(Lscala/collection/immutable/LinearSeq;)
scala.collection.immutable.Stream: <init>() ===> scala.collection.immutable.Seq$class: $init$(Lscala/collection/immutable/Seq;)
scala.collection.immutable.Stream: <init>() ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Stream: <init>() ===> scala.collection.LinearSeq$class: $init$(Lscala/collection/LinearSeq;)
scala.collection.immutable.Stream: <init>() ===> scala.collection.LinearSeqLike$class: $init$(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.Stream: <init>() ===> scala.collection.LinearSeqOptimized$class: $init$(Lscala/collection/LinearSeqOptimized;)
scala.collection.immutable.Stream: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.immutable.Stream: loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.Stream: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> scala.collection.GenTraversableOnce: toStream()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> scala.collection.immutable.Stream$$anonfun$append$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function0;)
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: append(Lscala/Function0;) ===> scala.Function0: apply()
scala.collection.immutable.Stream: apply(I) ===> scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I)
scala.collection.immutable.Stream: apply(Ljava/lang/Object;) ===> scala.collection.LinearSeqOptimized: apply(I)
scala.collection.immutable.Stream: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.Stream: drop(I) ===> scala.collection.immutable.Stream: drop(I)
scala.collection.immutable.Stream: drop(I) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: drop(I) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.GenTraversableOnce: toStream()
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.Stream$$anonfun$flatMap$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;Lscala/runtime/ObjectRef;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.Stream$: empty()
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.Stream: append(Lscala/Function0;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: repr()
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: flatMap(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: force() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: force() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: hashCode() ===> scala.collection.LinearSeqLike$class: hashCode(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.Stream: iterator() ===> scala.collection.immutable.StreamIterator: <init>(Lscala/collection/immutable/Stream;)
scala.collection.immutable.Stream: last() ===> scala.collection.LinearSeqOptimized$class: last(Lscala/collection/LinearSeqOptimized;)
scala.collection.immutable.Stream: length() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: length() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: lengthCompare(I) ===> scala.collection.LinearSeqOptimized$class: lengthCompare(Lscala/collection/LinearSeqOptimized;I)
scala.collection.immutable.Stream: loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.immutable.Stream: tailDefined()
scala.collection.immutable.Stream: loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.immutable.Stream: loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
scala.collection.immutable.Stream: loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: loop$3(Ljava/lang/String;Lscala/collection/immutable/Stream;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.Stream$$anonfun$map$1: <init>(Lscala/collection/immutable/Stream;Lscala/Function1;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: repr()
scala.collection.immutable.Stream: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.immutable.Stream: mkString(Ljava/lang/String;) ===> scala.collection.immutable.Stream: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.Stream: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.immutable.Stream: force()
scala.collection.immutable.Stream: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: reduceLeft(Lscala/Function2;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.immutable.Stream: reverse() ===> scala.collection.immutable.Stream$$anonfun$1: <init>(Lscala/collection/immutable/Stream;Lscala/runtime/ObjectRef;)
scala.collection.immutable.Stream: reverse() ===> scala.collection.immutable.Stream$ConsWrapper: $hash$colon$colon(Ljava/lang/Object;)
scala.collection.immutable.Stream: reverse() ===> scala.collection.immutable.Stream$ConsWrapper: <init>(Lscala/Function0;)
scala.collection.immutable.Stream: reverse() ===> scala.collection.immutable.Stream: reverse()
scala.collection.immutable.Stream: reverse() ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: reverse() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: reverse() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.Stream: reverse() ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.immutable.Stream: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.immutable.Stream: scala$collection$LinearSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.immutable.Stream: seq() ===> scala.collection.immutable.LinearSeq$class: seq(Lscala/collection/immutable/LinearSeq;)
scala.collection.immutable.Stream: seq() ===> scala.collection.immutable.LinearSeq: seq()
scala.collection.immutable.Stream: take(I) ===> scala.collection.immutable.Stream$$anonfun$take$1: <init>(Lscala/collection/immutable/Stream;)
scala.collection.immutable.Stream: take(I) ===> scala.collection.immutable.Stream$$anonfun$take$2: <init>(Lscala/collection/immutable/Stream;I)
scala.collection.immutable.Stream: take(I) ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.immutable.Stream: take(I) ===> scala.collection.immutable.Stream: take(I)
scala.collection.immutable.Stream: take(I) ===> scala.collection.IterableLike: head()
scala.collection.immutable.Stream: take(I) ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Stream: thisCollection() ===> scala.collection.LinearSeqLike$class: thisCollection(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.Stream: thisCollection() ===> scala.collection.LinearSeqLike: thisCollection()
scala.collection.immutable.Stream: toCollection(Ljava/lang/Object;) ===> scala.collection.LinearSeqLike: toCollection(Lscala/collection/LinearSeqLike;)
scala.collection.immutable.Stream: toCollection(Lscala/collection/LinearSeqLike;) ===> scala.collection.LinearSeqLike$class: toCollection(Lscala/collection/LinearSeqLike;Lscala/collection/LinearSeqLike;)
scala.collection.immutable.Stream: toString() ===> scala.collection.immutable.Stream: stringPrefix()
scala.collection.immutable.Stream: toString() ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.immutable.Stream: toString() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.immutable.Stream: toString() ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.immutable.Stream: toString() ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.StreamIterator$$anonfun$$init$$1: <init>(Lscala/collection/immutable/StreamIterator;Lscala/collection/immutable/Stream;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.StreamIterator$$anonfun$$init$$1: apply() ===> scala.collection.immutable.StreamIterator$$anonfun$$init$$1: apply()
scala.collection.immutable.StreamIterator$$anonfun$next$1: <init>(Lscala/collection/immutable/StreamIterator;Lscala/collection/immutable/Stream;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.StreamIterator$$anonfun$next$1: apply() ===> scala.collection.immutable.StreamIterator$$anonfun$next$1: apply()
scala.collection.immutable.StreamIterator$$anonfun$next$1: apply() ===> scala.collection.TraversableLike: tail()
scala.collection.immutable.StreamIterator$$anonfun$toStream$1: <init>(Lscala/collection/immutable/StreamIterator;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.immutable.StreamIterator$$anonfun$toStream$1: apply() ===> scala.collection.immutable.Stream$: empty()
scala.collection.immutable.StreamIterator$$anonfun$toStream$1: apply() ===> scala.collection.immutable.StreamIterator$$anonfun$toStream$1: apply()
scala.collection.immutable.StreamIterator$LazyCell: <init>(Lscala/collection/immutable/StreamIterator;Lscala/Function0;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.StreamIterator$LazyCell: <init>(Lscala/collection/immutable/StreamIterator;Lscala/Function0;) ===> java.lang.Object: <init>()
scala.collection.immutable.StreamIterator$LazyCell: v$lzycompute() ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.collection.immutable.StreamIterator$LazyCell: v$lzycompute() ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.collection.immutable.StreamIterator$LazyCell: v$lzycompute() ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.collection.immutable.StreamIterator$LazyCell: v$lzycompute() ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.collection.immutable.StreamIterator$LazyCell: v$lzycompute() ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.collection.immutable.StreamIterator$LazyCell: v$lzycompute() ===> scala.Function0: apply()
scala.collection.immutable.StreamIterator$LazyCell: v() ===> scala.collection.immutable.StreamIterator$LazyCell: v$lzycompute()
scala.collection.immutable.StreamIterator: <init>() ===> scala.collection.AbstractIterator: <init>()
scala.collection.immutable.StreamIterator: <init>(Lscala/collection/immutable/Stream;) ===> scala.collection.immutable.StreamIterator$$anonfun$$init$$1: <init>(Lscala/collection/immutable/StreamIterator;Lscala/collection/immutable/Stream;)
scala.collection.immutable.StreamIterator: <init>(Lscala/collection/immutable/Stream;) ===> scala.collection.immutable.StreamIterator$LazyCell: <init>(Lscala/collection/immutable/StreamIterator;Lscala/Function0;)
scala.collection.immutable.StreamIterator: <init>(Lscala/collection/immutable/Stream;) ===> scala.collection.immutable.StreamIterator: <init>()
scala.collection.immutable.StreamIterator: <init>(Lscala/collection/immutable/Stream;) ===> scala.collection.immutable.StreamIterator: these_$eq(Lscala/collection/immutable/StreamIterator$LazyCell;)
scala.collection.immutable.StreamIterator: hasNext() ===> scala.collection.immutable.StreamIterator$LazyCell: v()
scala.collection.immutable.StreamIterator: hasNext() ===> scala.collection.immutable.StreamIterator: these()
scala.collection.immutable.StreamIterator: hasNext() ===> scala.collection.TraversableOnce: nonEmpty()
scala.collection.immutable.StreamIterator: next() ===> scala.collection.immutable.StreamIterator$$anonfun$next$1: <init>(Lscala/collection/immutable/StreamIterator;Lscala/collection/immutable/Stream;)
scala.collection.immutable.StreamIterator: next() ===> scala.collection.immutable.StreamIterator$LazyCell: <init>(Lscala/collection/immutable/StreamIterator;Lscala/Function0;)
scala.collection.immutable.StreamIterator: next() ===> scala.collection.immutable.StreamIterator$LazyCell: v()
scala.collection.immutable.StreamIterator: next() ===> scala.collection.immutable.StreamIterator: these()
scala.collection.immutable.StreamIterator: next() ===> scala.collection.immutable.StreamIterator: these_$eq(Lscala/collection/immutable/StreamIterator$LazyCell;)
scala.collection.immutable.StreamIterator: next() ===> scala.collection.IterableLike: head()
scala.collection.immutable.StreamIterator: next() ===> scala.collection.Iterator$: empty()
scala.collection.immutable.StreamIterator: next() ===> scala.collection.Iterator: isEmpty()
scala.collection.immutable.StreamIterator: next() ===> scala.collection.Iterator: next()
scala.collection.immutable.StreamIterator: toList() ===> scala.collection.immutable.StreamIterator: toStream()
scala.collection.immutable.StreamIterator: toList() ===> scala.collection.TraversableOnce: toList()
scala.collection.immutable.StreamIterator: toStream() ===> scala.collection.immutable.StreamIterator$$anonfun$toStream$1: <init>(Lscala/collection/immutable/StreamIterator;)
scala.collection.immutable.StreamIterator: toStream() ===> scala.collection.immutable.StreamIterator$LazyCell: <init>(Lscala/collection/immutable/StreamIterator;Lscala/Function0;)
scala.collection.immutable.StreamIterator: toStream() ===> scala.collection.immutable.StreamIterator$LazyCell: v()
scala.collection.immutable.StreamIterator: toStream() ===> scala.collection.immutable.StreamIterator: these()
scala.collection.immutable.StreamIterator: toStream() ===> scala.collection.immutable.StreamIterator: these_$eq(Lscala/collection/immutable/StreamIterator$LazyCell;)
scala.collection.immutable.StringLike$$anonfun$$times$1: <init>(Lscala/collection/immutable/StringLike;Lscala/collection/mutable/StringBuilder;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.StringLike$$anonfun$$times$1: <init>(Lscala/collection/immutable/StringLike;Lscala/collection/mutable/StringBuilder;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.immutable.StringLike$$anonfun$$times$1: apply(I) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$$anonfun$$times$1: apply(I) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
scala.collection.immutable.StringLike$$anonfun$$times$1: apply(Ljava/lang/Object;) ===> scala.collection.immutable.StringLike$$anonfun$$times$1: apply(I)
scala.collection.immutable.StringLike$$anonfun$$times$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.StringLike$$anonfun$format$1: <init>(Lscala/collection/immutable/StringLike;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.StringLike$$anonfun$format$1: <init>(Lscala/collection/immutable/StringLike;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.immutable.StringLike$$anonfun$format$1: apply(Ljava/lang/Object;) ===> scala.collection.immutable.StringLike$class: scala$collection$immutable$StringLike$$unwrapArg(Lscala/collection/immutable/StringLike;Ljava/lang/Object;)
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.Range: <init>(III)
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.Range: start()
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.Range: step()
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.Range: terminalElement()
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;)
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.StringLike$$anonfun$$times$1: <init>(Lscala/collection/immutable/StringLike;Lscala/collection/mutable/StringBuilder;)
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.immutable.StringLike$class: apply(Lscala/collection/immutable/StringLike;I) ===> java.lang.String: charAt(I)
scala.collection.immutable.StringLike$class: apply(Lscala/collection/immutable/StringLike;I) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$class: compare(Lscala/collection/immutable/StringLike;Ljava/lang/String;) ===> java.lang.String: compareTo(Ljava/lang/String;)
scala.collection.immutable.StringLike$class: compare(Lscala/collection/immutable/StringLike;Ljava/lang/String;) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> java.lang.String: format(Ljava/lang/String;[Ljava/lang/Object;)
scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike$$anonfun$format$1: <init>(Lscala/collection/immutable/StringLike;)
scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.collection.Seq$: canBuildFrom()
scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.collection.Seq: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.collection.TraversableOnce: toArray(Lscala/reflect/ClassTag;)
scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.reflect.ClassTag$: AnyRef()
scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;) ===> scala.collection.immutable.StringLike: r(Lscala/collection/Seq;)
scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;) ===> scala.util.matching.Regex: <init>(Ljava/lang/String;Lscala/collection/Seq;)
scala.collection.immutable.StringLike$class: scala$collection$immutable$StringLike$$unwrapArg(Lscala/collection/immutable/StringLike;Ljava/lang/Object;) ===> scala.math.ScalaNumber: underlying()
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> java.lang.String: substring(II)
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.collection.immutable.StringLike: length()
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.collection.immutable.StringLike: newBuilder()
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.collection.mutable.Builder: result()
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.runtime.RichInt$: max$extension(II)
scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II) ===> scala.runtime.RichInt$: min$extension(II)
scala.collection.immutable.StringLike$class: toArray(Lscala/collection/immutable/StringLike;Lscala/reflect/ClassTag;) ===> java.lang.String: toCharArray()
scala.collection.immutable.StringLike$class: toArray(Lscala/collection/immutable/StringLike;Lscala/reflect/ClassTag;) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringLike$class: toInt(Lscala/collection/immutable/StringLike;) ===> java.lang.Integer: parseInt(Ljava/lang/String;)
scala.collection.immutable.StringLike$class: toInt(Lscala/collection/immutable/StringLike;) ===> scala.collection.immutable.StringLike: toString()
scala.collection.immutable.StringOps$: <clinit>() ===> scala.collection.immutable.StringOps$: <init>()
scala.collection.immutable.StringOps$: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I) ===> java.lang.String: charAt(I)
scala.collection.immutable.StringOps$: equals$extension(Ljava/lang/String;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.immutable.StringOps$: equals$extension(Ljava/lang/String;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.immutable.StringOps$: equals$extension(Ljava/lang/String;Ljava/lang/Object;) ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps$: hashCode$extension(Ljava/lang/String;) ===> java.lang.String: hashCode()
scala.collection.immutable.StringOps$: length$extension(Ljava/lang/String;) ===> java.lang.String: length()
scala.collection.immutable.StringOps$: newBuilder$extension(Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder$: newBuilder()
scala.collection.immutable.StringOps$: seq$extension(Ljava/lang/String;) ===> scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;)
scala.collection.immutable.StringOps$: slice$extension(Ljava/lang/String;II) ===> java.lang.String: length()
scala.collection.immutable.StringOps$: slice$extension(Ljava/lang/String;II) ===> java.lang.String: substring(II)
scala.collection.immutable.StringOps$: slice$extension(Ljava/lang/String;II) ===> scala.collection.immutable.StringOps$: length$extension(Ljava/lang/String;)
scala.collection.immutable.StringOps$: thisCollection$extension(Ljava/lang/String;) ===> scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;)
scala.collection.immutable.StringOps$: toCollection$extension(Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;)
scala.collection.immutable.StringOps: $div$colon(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce$class: $div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)
scala.collection.immutable.StringOps: $less(Ljava/lang/Object;) ===> scala.math.Ordered$class: $less(Lscala/math/Ordered;Ljava/lang/Object;)
scala.collection.immutable.StringOps: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.StringOps: $times(I) ===> scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.GenSeqLike$class: $init$(Lscala/collection/GenSeqLike;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.GenTraversableOnce$class: $init$(Lscala/collection/GenTraversableOnce;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.immutable.StringLike$class: $init$(Lscala/collection/immutable/StringLike;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.IndexedSeqOptimized$class: $init$(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.IterableLike$class: $init$(Lscala/collection/IterableLike;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.Parallelizable$class: $init$(Lscala/collection/Parallelizable;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.SeqLike$class: $init$(Lscala/collection/SeqLike;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.TraversableLike$class: $init$(Lscala/collection/TraversableLike;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: $init$(Lscala/collection/TraversableOnce;)
scala.collection.immutable.StringOps: <init>(Ljava/lang/String;) ===> scala.math.Ordered$class: $init$(Lscala/math/Ordered;)
scala.collection.immutable.StringOps: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.StringOps: apply(I) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
scala.collection.immutable.StringOps: apply(I) ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: apply(I) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.collection.immutable.StringOps: canEqual(Ljava/lang/Object;) ===> scala.collection.IterableLike$class: canEqual(Lscala/collection/IterableLike;Ljava/lang/Object;)
scala.collection.immutable.StringOps: compare(Ljava/lang/Object;) ===> scala.collection.immutable.StringLike: compare(Ljava/lang/String;)
scala.collection.immutable.StringOps: compare(Ljava/lang/String;) ===> scala.collection.immutable.StringLike$class: compare(Lscala/collection/immutable/StringLike;Ljava/lang/String;)
scala.collection.immutable.StringOps: compareTo(Ljava/lang/Object;) ===> scala.math.Ordered$class: compareTo(Lscala/math/Ordered;Ljava/lang/Object;)
scala.collection.immutable.StringOps: copyToArray(Ljava/lang/Object;I) ===> scala.collection.TraversableOnce$class: copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)
scala.collection.immutable.StringOps: copyToArray(Ljava/lang/Object;II) ===> scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II)
scala.collection.immutable.StringOps: copyToBuffer(Lscala/collection/mutable/Buffer;) ===> scala.collection.TraversableOnce$class: copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)
scala.collection.immutable.StringOps: drop(I) ===> scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.immutable.StringOps: equals(Ljava/lang/Object;) ===> scala.collection.immutable.StringOps$: equals$extension(Ljava/lang/String;Ljava/lang/Object;)
scala.collection.immutable.StringOps: equals(Ljava/lang/Object;) ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.immutable.StringOps: foreach(Lscala/Function1;) ===> scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;)
scala.collection.immutable.StringOps: format(Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;)
scala.collection.immutable.StringOps: hashCode() ===> scala.collection.immutable.StringOps$: hashCode$extension(Ljava/lang/String;)
scala.collection.immutable.StringOps: hashCode() ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: head() ===> scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.StringOps: isEmpty() ===> scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.StringOps: isTraversableAgain() ===> scala.collection.TraversableLike$class: isTraversableAgain(Lscala/collection/TraversableLike;)
scala.collection.immutable.StringOps: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.StringOps: length() ===> scala.collection.immutable.StringOps$: length$extension(Ljava/lang/String;)
scala.collection.immutable.StringOps: length() ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: lengthCompare(I) ===> scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.immutable.StringOps: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.StringOps: max(Lscala/math/Ordering;) ===> scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)
scala.collection.immutable.StringOps: mkString(Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)
scala.collection.immutable.StringOps: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.StringOps: newBuilder() ===> scala.collection.immutable.StringOps$: newBuilder$extension(Ljava/lang/String;)
scala.collection.immutable.StringOps: newBuilder() ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: nonEmpty() ===> scala.collection.TraversableOnce$class: nonEmpty(Lscala/collection/TraversableOnce;)
scala.collection.immutable.StringOps: r() ===> scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;)
scala.collection.immutable.StringOps: r(Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;)
scala.collection.immutable.StringOps: reduceLeft(Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;)
scala.collection.immutable.StringOps: repr() ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: reverse() ===> scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.StringOps: reverseIterator() ===> scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.StringOps: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.immutable.StringOps: scala$collection$IndexedSeqOptimized$$super$head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.immutable.StringOps: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.immutable.StringOps: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.immutable.StringOps: scala$collection$IndexedSeqOptimized$$super$tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.immutable.StringOps: seq() ===> scala.collection.immutable.StringOps$: seq$extension(Ljava/lang/String;)
scala.collection.immutable.StringOps: seq() ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: size() ===> scala.collection.SeqLike$class: size(Lscala/collection/SeqLike;)
scala.collection.immutable.StringOps: slice(II) ===> scala.collection.immutable.StringOps$: slice$extension(Ljava/lang/String;II)
scala.collection.immutable.StringOps: slice(II) ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: sorted(Lscala/math/Ordering;) ===> scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;)
scala.collection.immutable.StringOps: sortWith(Lscala/Function2;) ===> scala.collection.SeqLike$class: sortWith(Lscala/collection/SeqLike;Lscala/Function2;)
scala.collection.immutable.StringOps: stringPrefix() ===> scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;)
scala.collection.immutable.StringOps: tail() ===> scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.StringOps: take(I) ===> scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.immutable.StringOps: thisCollection() ===> scala.collection.immutable.StringOps$: thisCollection$extension(Ljava/lang/String;)
scala.collection.immutable.StringOps: thisCollection() ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: to(Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.StringOps: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.immutable.StringLike$class: toArray(Lscala/collection/immutable/StringLike;Lscala/reflect/ClassTag;)
scala.collection.immutable.StringOps: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.StringOps: toCollection(Ljava/lang/Object;) ===> scala.collection.immutable.StringOps$: toCollection$extension(Ljava/lang/String;Ljava/lang/String;)
scala.collection.immutable.StringOps: toCollection(Ljava/lang/Object;) ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.StringOps: toInt() ===> scala.collection.immutable.StringLike$class: toInt(Lscala/collection/immutable/StringLike;)
scala.collection.immutable.StringOps: toList() ===> scala.collection.TraversableOnce$class: toList(Lscala/collection/TraversableOnce;)
scala.collection.immutable.StringOps: toSet() ===> scala.collection.TraversableOnce$class: toSet(Lscala/collection/TraversableOnce;)
scala.collection.immutable.StringOps: toStream() ===> scala.collection.IterableLike$class: toStream(Lscala/collection/IterableLike;)
scala.collection.immutable.StringOps: toString() ===> scala.collection.immutable.StringOps$: toString$extension(Ljava/lang/String;)
scala.collection.immutable.StringOps: toString() ===> scala.collection.immutable.StringOps: repr()
scala.collection.immutable.Traversable$: <clinit>() ===> scala.collection.immutable.Traversable$: <init>()
scala.collection.immutable.Traversable$: <init>() ===> scala.collection.generic.GenTraversableFactory: <init>()
scala.collection.immutable.Traversable$: newBuilder() ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.TrieIterator: initArrayD()
scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.TrieIterator: initArrayStack()
scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.TrieIterator: initDepth()
scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.TrieIterator: initPosD()
scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.TrieIterator: initPosStack()
scala.collection.immutable.TrieIterator: <init>([Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.TrieIterator: initSubIter()
scala.collection.immutable.TrieIterator: getElems(Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.HashMap$HashTrieMap: elems()
scala.collection.immutable.TrieIterator: getElems(Lscala/collection/immutable/Iterable;) ===> scala.collection.immutable.HashSet$HashTrieSet: elems()
scala.collection.immutable.TrieIterator: getElems(Lscala/collection/immutable/Iterable;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.immutable.TrieIterator: next() ===> scala.collection.immutable.TrieIterator: next0([Lscala/collection/immutable/Iterable;I)
scala.collection.immutable.TrieIterator: next() ===> scala.collection.Iterator: hasNext()
scala.collection.immutable.TrieIterator: next() ===> scala.collection.Iterator: next()
scala.collection.immutable.TrieIterator: next0([Lscala/collection/immutable/Iterable;I) ===> scala.collection.immutable.Iterable: iterator()
scala.collection.immutable.TrieIterator: next0([Lscala/collection/immutable/Iterable;I) ===> scala.collection.immutable.TrieIterator: getElem(Ljava/lang/Object;)
scala.collection.immutable.TrieIterator: next0([Lscala/collection/immutable/Iterable;I) ===> scala.collection.immutable.TrieIterator: getElems(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.TrieIterator: next0([Lscala/collection/immutable/Iterable;I) ===> scala.collection.immutable.TrieIterator: isContainer(Ljava/lang/Object;)
scala.collection.immutable.TrieIterator: next0([Lscala/collection/immutable/Iterable;I) ===> scala.collection.immutable.TrieIterator: isTrie(Ljava/lang/Object;)
scala.collection.immutable.TrieIterator: next0([Lscala/collection/immutable/Iterable;I) ===> scala.collection.immutable.TrieIterator: next()
scala.collection.immutable.Vector$$anon$1: <init>(Lscala/collection/immutable/Vector;) ===> java.lang.NullPointerException: <init>()
scala.collection.immutable.Vector$$anon$1: <init>(Lscala/collection/immutable/Vector;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.immutable.Vector$$anon$1: <init>(Lscala/collection/immutable/Vector;) ===> scala.collection.immutable.Vector: length()
scala.collection.immutable.Vector$$anon$1: hasNext() ===> scala.collection.immutable.Vector$$anon$1: i()
scala.collection.immutable.Vector$$anon$1: next() ===> scala.collection.immutable.Vector$$anon$1: i()
scala.collection.immutable.Vector$$anon$1: next() ===> scala.collection.immutable.Vector$$anon$1: i_$eq(I)
scala.collection.immutable.Vector$$anon$1: next() ===> scala.collection.immutable.Vector: apply(I)
scala.collection.immutable.Vector$$anon$1: next() ===> scala.collection.Iterator$: empty()
scala.collection.immutable.Vector$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.immutable.Vector$: <clinit>() ===> scala.collection.immutable.Vector$: <init>()
scala.collection.immutable.Vector$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.immutable.Vector$: <init>() ===> scala.collection.immutable.Vector$VectorReusableCBF: <init>()
scala.collection.immutable.Vector$: <init>() ===> scala.collection.immutable.Vector: <init>(III)
scala.collection.immutable.Vector$: empty() ===> scala.collection.immutable.Vector$: empty()
scala.collection.immutable.Vector$: empty() ===> scala.collection.immutable.Vector$: NIL()
scala.collection.immutable.Vector$: newBuilder() ===> scala.collection.immutable.VectorBuilder: <init>()
scala.collection.immutable.Vector$VectorReusableCBF: <init>() ===> scala.collection.generic.GenTraversableFactory$GenericCanBuildFrom: <init>(Lscala/collection/generic/GenTraversableFactory;)
scala.collection.immutable.Vector$VectorReusableCBF: apply() ===> scala.collection.immutable.Vector$: newBuilder()
scala.collection.immutable.Vector: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.GenTraversableOnce: seq()
scala.collection.immutable.Vector: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.AbstractSeq: <init>()
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.immutable.IndexedSeq$class: $init$(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.immutable.Seq$class: $init$(Lscala/collection/immutable/Seq;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.immutable.VectorPointer$class: $init$(Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.IndexedSeq$class: $init$(Lscala/collection/IndexedSeq;)
scala.collection.immutable.Vector: <init>(III) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Vector: apply(I) ===> scala.collection.immutable.Vector: checkRangeConvert(I)
scala.collection.immutable.Vector: apply(I) ===> scala.collection.immutable.Vector: getElem(II)
scala.collection.immutable.Vector: apply(Ljava/lang/Object;) ===> scala.collection.immutable.Vector: apply(I)
scala.collection.immutable.Vector: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.Vector: checkRangeConvert(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.immutable.Vector: checkRangeConvert(I) ===> java.lang.Object: toString()
scala.collection.immutable.Vector: checkRangeConvert(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.immutable.Vector: checkRangeConvert(I) ===> org.clapper.argot.Parameter: toString()
scala.collection.immutable.Vector: checkRangeConvert(I) ===> scala.collection.immutable.Vector: endIndex()
scala.collection.immutable.Vector: checkRangeConvert(I) ===> scala.collection.immutable.Vector: startIndex()
scala.collection.immutable.Vector: checkRangeConvert(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: copyRight([Ljava/lang/Object;I)
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display0()
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display1()
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display2()
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display3()
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display4()
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display5()
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanLeftEdge(I) ===> scala.collection.immutable.Vector: zeroLeft([Ljava/lang/Object;I)
scala.collection.immutable.Vector: cleanRightEdge(I) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: copyLeft([Ljava/lang/Object;I)
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display0()
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display1()
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display2()
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display3()
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display4()
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display5()
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: cleanRightEdge(I) ===> scala.collection.immutable.Vector: zeroRight([Ljava/lang/Object;I)
scala.collection.immutable.Vector: copyLeft([Ljava/lang/Object;I) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.immutable.Vector: copyOf([Ljava/lang/Object;) ===> scala.collection.immutable.VectorPointer$class: copyOf(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;)
scala.collection.immutable.Vector: copyRight([Ljava/lang/Object;I) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.immutable.Vector: drop(I) ===> scala.collection.immutable.Vector$: empty()
scala.collection.immutable.Vector: drop(I) ===> scala.collection.immutable.Vector: drop(I)
scala.collection.immutable.Vector: drop(I) ===> scala.collection.immutable.Vector: dropFront0(I)
scala.collection.immutable.Vector: drop(I) ===> scala.collection.immutable.Vector: endIndex()
scala.collection.immutable.Vector: drop(I) ===> scala.collection.immutable.Vector: startIndex()
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: <init>(III)
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: cleanRightEdge(I)
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: dirty()
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: dirty_$eq(Z)
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: gotoPosWritable(III)
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: initFrom(Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: preClean(I)
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: requiredDepth(I)
scala.collection.immutable.Vector: dropBack0(I) ===> scala.collection.immutable.Vector: startIndex()
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: <init>(III)
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: cleanLeftEdge(I)
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: dirty()
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: dirty_$eq(Z)
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: endIndex()
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: gotoPosWritable(III)
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: initFrom(Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: preClean(I)
scala.collection.immutable.Vector: dropFront0(I) ===> scala.collection.immutable.Vector: requiredDepth(I)
scala.collection.immutable.Vector: getElem(II) ===> scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II)
scala.collection.immutable.Vector: gotoPos(II) ===> scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II)
scala.collection.immutable.Vector: gotoPosWritable(III) ===> scala.collection.immutable.Vector: dirty()
scala.collection.immutable.Vector: gotoPosWritable(III) ===> scala.collection.immutable.Vector: dirty_$eq(Z)
scala.collection.immutable.Vector: gotoPosWritable(III) ===> scala.collection.immutable.Vector: gotoPosWritable0(II)
scala.collection.immutable.Vector: gotoPosWritable(III) ===> scala.collection.immutable.Vector: gotoPosWritable1(III)
scala.collection.immutable.Vector: gotoPosWritable0(II) ===> scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II)
scala.collection.immutable.Vector: gotoPosWritable1(III) ===> scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III)
scala.collection.immutable.Vector: hashCode() ===> scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Vector: head() ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.immutable.Vector: head() ===> scala.collection.immutable.Vector: apply(I)
scala.collection.immutable.Vector: head() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Vector: initFrom(Lscala/collection/immutable/VectorPointer;) ===> scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.Vector: initFrom(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I)
scala.collection.immutable.Vector: initIterator(Lscala/collection/immutable/VectorIterator;) ===> scala.collection.immutable.Vector: dirty()
scala.collection.immutable.Vector: initIterator(Lscala/collection/immutable/VectorIterator;) ===> scala.collection.immutable.Vector: startIndex()
scala.collection.immutable.Vector: initIterator(Lscala/collection/immutable/VectorIterator;) ===> scala.collection.immutable.VectorIterator: depth()
scala.collection.immutable.Vector: initIterator(Lscala/collection/immutable/VectorIterator;) ===> scala.collection.immutable.VectorIterator: gotoPos(II)
scala.collection.immutable.Vector: initIterator(Lscala/collection/immutable/VectorIterator;) ===> scala.collection.immutable.VectorIterator: initFrom(Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.Vector: initIterator(Lscala/collection/immutable/VectorIterator;) ===> scala.collection.immutable.VectorIterator: stabilize(I)
scala.collection.immutable.Vector: iterator() ===> scala.collection.immutable.Vector: endIndex()
scala.collection.immutable.Vector: iterator() ===> scala.collection.immutable.Vector: initIterator(Lscala/collection/immutable/VectorIterator;)
scala.collection.immutable.Vector: iterator() ===> scala.collection.immutable.Vector: iterator()
scala.collection.immutable.Vector: iterator() ===> scala.collection.immutable.Vector: startIndex()
scala.collection.immutable.Vector: iterator() ===> scala.collection.immutable.VectorIterator: <init>(II)
scala.collection.immutable.Vector: length() ===> scala.collection.immutable.Vector: endIndex()
scala.collection.immutable.Vector: length() ===> scala.collection.immutable.Vector: startIndex()
scala.collection.immutable.Vector: lengthCompare(I) ===> scala.collection.immutable.Vector: length()
scala.collection.immutable.Vector: nullSlotAndCopy([Ljava/lang/Object;I) ===> scala.collection.immutable.VectorPointer$class: nullSlotAndCopy(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;I)
scala.collection.immutable.Vector: preClean(I) ===> scala.collection.immutable.Vector: depth_$eq(I)
scala.collection.immutable.Vector: preClean(I) ===> scala.collection.immutable.Vector: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: preClean(I) ===> scala.collection.immutable.Vector: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: preClean(I) ===> scala.collection.immutable.Vector: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: preClean(I) ===> scala.collection.immutable.Vector: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: preClean(I) ===> scala.collection.immutable.Vector: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.Vector: preClean(I) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.immutable.Vector: preClean(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.Vector: requiredDepth(I) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.Vector: reverseIterator() ===> scala.collection.immutable.Vector$$anon$1: <init>(Lscala/collection/immutable/Vector;)
scala.collection.immutable.Vector: seq() ===> scala.collection.immutable.IndexedSeq$class: seq(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.Vector: seq() ===> scala.collection.immutable.IndexedSeq: seq()
scala.collection.immutable.Vector: tail() ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.immutable.Vector: tail() ===> scala.collection.immutable.Vector: drop(I)
scala.collection.immutable.Vector: tail() ===> scala.collection.immutable.Vector: tail()
scala.collection.immutable.Vector: tail() ===> scala.collection.SeqLike: isEmpty()
scala.collection.immutable.Vector: take(I) ===> scala.collection.immutable.Vector$: empty()
scala.collection.immutable.Vector: take(I) ===> scala.collection.immutable.Vector: dropBack0(I)
scala.collection.immutable.Vector: take(I) ===> scala.collection.immutable.Vector: endIndex()
scala.collection.immutable.Vector: take(I) ===> scala.collection.immutable.Vector: startIndex()
scala.collection.immutable.Vector: take(I) ===> scala.collection.immutable.Vector: take(I)
scala.collection.immutable.Vector: thisCollection() ===> scala.collection.IndexedSeqLike$class: thisCollection(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Vector: thisCollection() ===> scala.collection.IndexedSeqLike: thisCollection()
scala.collection.immutable.Vector: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.Vector: toCollection(Ljava/lang/Object;) ===> scala.collection.IndexedSeqLike$class: toCollection(Lscala/collection/IndexedSeqLike;Ljava/lang/Object;)
scala.collection.immutable.Vector: toCollection(Ljava/lang/Object;) ===> scala.collection.IndexedSeqLike: toCollection(Ljava/lang/Object;)
scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;)
scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.VectorBuilder: blockIndex()
scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.VectorBuilder: blockIndex_$eq(I)
scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.VectorBuilder: display0()
scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.VectorBuilder: gotoNextBlockStartWritable(II)
scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.VectorBuilder: lo()
scala.collection.immutable.VectorBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.VectorBuilder: lo_$eq(I)
scala.collection.immutable.VectorBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.immutable.VectorBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.immutable.VectorBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.immutable.VectorBuilder: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.VectorBuilder: <init>() ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.immutable.VectorBuilder: <init>() ===> scala.collection.immutable.VectorBuilder: depth_$eq(I)
scala.collection.immutable.VectorBuilder: <init>() ===> scala.collection.immutable.VectorBuilder: display0_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorBuilder: <init>() ===> scala.collection.immutable.VectorPointer$class: $init$(Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.VectorBuilder: <init>() ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.immutable.VectorBuilder: copyOf([Ljava/lang/Object;) ===> scala.collection.immutable.VectorPointer$class: copyOf(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;)
scala.collection.immutable.VectorBuilder: gotoNextBlockStartWritable(II) ===> scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II)
scala.collection.immutable.VectorBuilder: initFrom(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I)
scala.collection.immutable.VectorBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.immutable.VectorBuilder: nullSlotAndCopy([Ljava/lang/Object;I) ===> scala.collection.immutable.VectorPointer$class: nullSlotAndCopy(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;I)
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.Vector$: empty()
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.Vector: <init>(III)
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.Vector: gotoPos(II)
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.Vector: initFrom(Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.VectorBuilder: blockIndex()
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.VectorBuilder: depth()
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.VectorBuilder: lo()
scala.collection.immutable.VectorBuilder: result() ===> scala.collection.immutable.VectorBuilder: result()
scala.collection.immutable.VectorBuilder: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.immutable.VectorBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.immutable.VectorBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.immutable.VectorBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.immutable.VectorIterator: <init>(II) ===> scala.collection.AbstractIterator: <init>()
scala.collection.immutable.VectorIterator: <init>(II) ===> scala.collection.immutable.VectorIterator: blockIndex()
scala.collection.immutable.VectorIterator: <init>(II) ===> scala.collection.immutable.VectorIterator: endIndex()
scala.collection.immutable.VectorIterator: <init>(II) ===> scala.collection.immutable.VectorIterator: lo()
scala.collection.immutable.VectorIterator: <init>(II) ===> scala.collection.immutable.VectorPointer$class: $init$(Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.VectorIterator: <init>(II) ===> scala.math.package$: min(II)
scala.collection.immutable.VectorIterator: copyOf([Ljava/lang/Object;) ===> scala.collection.immutable.VectorPointer$class: copyOf(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;)
scala.collection.immutable.VectorIterator: gotoNextBlockStart(II) ===> scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II)
scala.collection.immutable.VectorIterator: gotoPos(II) ===> scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II)
scala.collection.immutable.VectorIterator: hasNext() ===> scala.collection.immutable.VectorIterator: _hasNext()
scala.collection.immutable.VectorIterator: initFrom(Lscala/collection/immutable/VectorPointer;) ===> scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;)
scala.collection.immutable.VectorIterator: initFrom(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I)
scala.collection.immutable.VectorIterator: next() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: _hasNext()
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: _hasNext_$eq(Z)
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: blockIndex()
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: blockIndex_$eq(I)
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: display0()
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: endIndex()
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: endLo()
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: endLo_$eq(I)
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: gotoNextBlockStart(II)
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: lo()
scala.collection.immutable.VectorIterator: next() ===> scala.collection.immutable.VectorIterator: lo_$eq(I)
scala.collection.immutable.VectorIterator: next() ===> scala.math.package$: min(II)
scala.collection.immutable.VectorIterator: nullSlotAndCopy([Ljava/lang/Object;I) ===> scala.collection.immutable.VectorPointer$class: nullSlotAndCopy(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;I)
scala.collection.immutable.VectorIterator: stabilize(I) ===> scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I)
scala.collection.immutable.VectorPointer$class: copyOf(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.immutable.VectorPointer$class: copyOf(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;) ===> scala.Predef$: println(Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display0()
scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: getElem(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display0_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStart(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: depth()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: depth_$eq(I)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display0()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display0_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: gotoNextBlockStartWritable(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display0_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPos(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: copyOf([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: depth()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display0()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display0_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.collection.immutable.VectorPointer: nullSlotAndCopy([Ljava/lang/Object;I)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable0(Lscala/collection/immutable/VectorPointer;II) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> java.lang.IllegalArgumentException: <init>()
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: copyOf([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display0()
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display0_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: gotoPosWritable1(Lscala/collection/immutable/VectorPointer;III) ===> scala.collection.immutable.VectorPointer: nullSlotAndCopy([Ljava/lang/Object;I)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;) ===> scala.collection.immutable.VectorPointer: depth()
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;) ===> scala.collection.immutable.VectorPointer: initFrom(Lscala/collection/immutable/VectorPointer;I)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: depth_$eq(I)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display0()
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display0_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: initFrom(Lscala/collection/immutable/VectorPointer;Lscala/collection/immutable/VectorPointer;I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.VectorPointer$class: nullSlotAndCopy(Lscala/collection/immutable/VectorPointer;[Ljava/lang/Object;I) ===> scala.collection.immutable.VectorPointer: copyOf([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: copyOf([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: depth()
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display0()
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display1()
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display1_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display2()
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display2_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display3()
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display3_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display4()
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display4_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display5()
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.collection.immutable.VectorPointer: display5_$eq([Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.immutable.VectorPointer$class: stabilize(Lscala/collection/immutable/VectorPointer;I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.immutable.WrappedString$$anonfun$newBuilder$1: <init>() ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.immutable.WrappedString$$anonfun$newBuilder$1: apply(Ljava/lang/Object;) ===> scala.collection.immutable.WrappedString$$anonfun$newBuilder$1: apply(Ljava/lang/String;)
scala.collection.immutable.WrappedString$$anonfun$newBuilder$1: apply(Ljava/lang/String;) ===> scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;)
scala.collection.immutable.WrappedString$: <clinit>() ===> scala.collection.immutable.WrappedString$: <init>()
scala.collection.immutable.WrappedString$: <init>() ===> java.lang.Object: <init>()
scala.collection.immutable.WrappedString$: newBuilder() ===> scala.collection.immutable.WrappedString$$anonfun$newBuilder$1: <init>()
scala.collection.immutable.WrappedString$: newBuilder() ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.immutable.WrappedString$: newBuilder() ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.immutable.WrappedString: $times(I) ===> scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.AbstractSeq: <init>()
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.immutable.IndexedSeq$class: $init$(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.immutable.Iterable$class: $init$(Lscala/collection/immutable/Iterable;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.immutable.Seq$class: $init$(Lscala/collection/immutable/Seq;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.immutable.StringLike$class: $init$(Lscala/collection/immutable/StringLike;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.immutable.Traversable$class: $init$(Lscala/collection/immutable/Traversable;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.IndexedSeq$class: $init$(Lscala/collection/IndexedSeq;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.collection.IndexedSeqOptimized$class: $init$(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;) ===> scala.math.Ordered$class: $init$(Lscala/math/Ordered;)
scala.collection.immutable.WrappedString: apply(I) ===> scala.collection.immutable.StringLike$class: apply(Lscala/collection/immutable/StringLike;I)
scala.collection.immutable.WrappedString: apply(I) ===> scala.collection.immutable.StringLike: apply(I)
scala.collection.immutable.WrappedString: apply(I) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.collection.immutable.WrappedString: apply(Ljava/lang/Object;) ===> scala.collection.immutable.StringLike: apply(I)
scala.collection.immutable.WrappedString: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.collection.immutable.WrappedString: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.immutable.WrappedString: companion() ===> scala.collection.immutable.IndexedSeq$class: companion(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.WrappedString: compare(Ljava/lang/Object;) ===> scala.collection.immutable.StringLike: compare(Ljava/lang/String;)
scala.collection.immutable.WrappedString: compare(Ljava/lang/String;) ===> scala.collection.immutable.StringLike$class: compare(Lscala/collection/immutable/StringLike;Ljava/lang/String;)
scala.collection.immutable.WrappedString: compareTo(Ljava/lang/Object;) ===> scala.math.Ordered$class: compareTo(Lscala/math/Ordered;Ljava/lang/Object;)
scala.collection.immutable.WrappedString: copyToArray(Ljava/lang/Object;II) ===> scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II)
scala.collection.immutable.WrappedString: drop(I) ===> scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.immutable.WrappedString: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.immutable.WrappedString: foreach(Lscala/Function1;) ===> scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;)
scala.collection.immutable.WrappedString: format(Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;)
scala.collection.immutable.WrappedString: hashCode() ===> scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.WrappedString: head() ===> scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.WrappedString: isEmpty() ===> scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.WrappedString: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.WrappedString: length() ===> java.lang.String: length()
scala.collection.immutable.WrappedString: length() ===> scala.collection.immutable.WrappedString: self()
scala.collection.immutable.WrappedString: lengthCompare(I) ===> scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.immutable.WrappedString: newBuilder() ===> scala.collection.immutable.WrappedString$: newBuilder()
scala.collection.immutable.WrappedString: r() ===> scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;)
scala.collection.immutable.WrappedString: r(Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;)
scala.collection.immutable.WrappedString: reduceLeft(Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;)
scala.collection.immutable.WrappedString: reverse() ===> scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.WrappedString: reverseIterator() ===> scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.WrappedString: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.immutable.WrappedString: scala$collection$IndexedSeqOptimized$$super$head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.immutable.WrappedString: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.immutable.WrappedString: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.immutable.WrappedString: scala$collection$IndexedSeqOptimized$$super$tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.immutable.WrappedString: seq() ===> scala.collection.immutable.IndexedSeq$class: seq(Lscala/collection/immutable/IndexedSeq;)
scala.collection.immutable.WrappedString: seq() ===> scala.collection.immutable.IndexedSeq: seq()
scala.collection.immutable.WrappedString: slice(II) ===> java.lang.String: substring(II)
scala.collection.immutable.WrappedString: slice(II) ===> scala.collection.immutable.WrappedString: <init>(Ljava/lang/String;)
scala.collection.immutable.WrappedString: slice(II) ===> scala.collection.immutable.WrappedString: length()
scala.collection.immutable.WrappedString: slice(II) ===> scala.collection.immutable.WrappedString: slice(II)
scala.collection.immutable.WrappedString: slice(II) ===> scala.collection.TraversableLike: repr()
scala.collection.immutable.WrappedString: slice(II) ===> scala.LowPriorityImplicits: unwrapString(Lscala/collection/immutable/WrappedString;)
scala.collection.immutable.WrappedString: tail() ===> scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;)
scala.collection.immutable.WrappedString: take(I) ===> scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.immutable.WrappedString: thisCollection() ===> scala.collection.immutable.WrappedString: thisCollection()
scala.collection.immutable.WrappedString: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.immutable.StringLike$class: toArray(Lscala/collection/immutable/StringLike;Lscala/reflect/ClassTag;)
scala.collection.immutable.WrappedString: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.immutable.WrappedString: toCollection(Ljava/lang/Object;) ===> scala.collection.immutable.WrappedString: toCollection(Lscala/collection/immutable/WrappedString;)
scala.collection.immutable.WrappedString: toString() ===> scala.collection.immutable.WrappedString: self()
scala.collection.IndexedSeq$: <clinit>() ===> scala.collection.IndexedSeq$: <init>()
scala.collection.IndexedSeq$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.IndexedSeq$: newBuilder() ===> scala.collection.immutable.IndexedSeq$: newBuilder()
scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;) ===> scala.collection.IndexedSeqLike: seq()
scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;) ===> scala.util.hashing.MurmurHash3$: seqHash(Lscala/collection/Seq;)
scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;) ===> scala.collection.IndexedSeqLike$Elements: <init>(Lscala/collection/IndexedSeqLike;II)
scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;) ===> scala.collection.IndexedSeqLike: length()
scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;) ===> scala.collection.IndexedSeqLike: copyToBuffer(Lscala/collection/mutable/Buffer;)
scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;) ===> scala.collection.IndexedSeqLike: size()
scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;) ===> scala.collection.mutable.ArrayBuffer: <init>(I)
scala.collection.IndexedSeqLike$Elements: <init>(Lscala/collection/IndexedSeqLike;II) ===> java.lang.NullPointerException: <init>()
scala.collection.IndexedSeqLike$Elements: <init>(Lscala/collection/IndexedSeqLike;II) ===> scala.collection.AbstractIterator: <init>()
scala.collection.IndexedSeqLike$Elements: <init>(Lscala/collection/IndexedSeqLike;II) ===> scala.collection.BufferedIterator$class: $init$(Lscala/collection/BufferedIterator;)
scala.collection.IndexedSeqLike$Elements: hasNext() ===> scala.collection.IndexedSeqLike$Elements: index()
scala.collection.IndexedSeqLike$Elements: next() ===> scala.collection.IndexedSeqLike$Elements: index()
scala.collection.IndexedSeqLike$Elements: next() ===> scala.collection.IndexedSeqLike$Elements: index_$eq(I)
scala.collection.IndexedSeqLike$Elements: next() ===> scala.collection.IndexedSeqLike$Elements: scala$collection$IndexedSeqLike$Elements$$$outer()
scala.collection.IndexedSeqLike$Elements: next() ===> scala.collection.IndexedSeqLike: apply(I)
scala.collection.IndexedSeqLike$Elements: next() ===> scala.collection.Iterator$: empty()
scala.collection.IndexedSeqLike$Elements: next() ===> scala.collection.Iterator: next()
scala.collection.IndexedSeqOptimized$$anon$1: <init>(Lscala/collection/IndexedSeqOptimized;) ===> java.lang.NullPointerException: <init>()
scala.collection.IndexedSeqOptimized$$anon$1: <init>(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.IndexedSeqOptimized$$anon$1: <init>(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$$anon$1: hasNext() ===> scala.collection.IndexedSeqOptimized$$anon$1: i()
scala.collection.IndexedSeqOptimized$$anon$1: next() ===> scala.collection.IndexedSeqOptimized$$anon$1: i()
scala.collection.IndexedSeqOptimized$$anon$1: next() ===> scala.collection.IndexedSeqOptimized$$anon$1: i_$eq(I)
scala.collection.IndexedSeqOptimized$$anon$1: next() ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$$anon$1: next() ===> scala.collection.Iterator$: empty()
scala.collection.IndexedSeqOptimized$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II) ===> scala.runtime.RichInt$: min$extension(II)
scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I) ===> scala.collection.IndexedSeqOptimized: slice(II)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;)
scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: isEmpty()
scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: scala$collection$IndexedSeqOptimized$$super$head()
scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldl(Lscala/collection/IndexedSeqOptimized;IILjava/lang/Object;Lscala/Function2;)
scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;)
scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: newBuilder()
scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.mutable.Builder: result()
scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.mutable.Builder: sizeHint(I)
scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized$$anon$1: <init>(Lscala/collection/IndexedSeqOptimized;)
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeq: apply(I)
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeq: length()
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;)
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.collection.IndexedSeqOptimized: apply(I)
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.collection.IndexedSeqOptimized: newBuilder()
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.collection.mutable.Builder: result()
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.collection.mutable.Builder: sizeHint(I)
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.math.package$: max(II)
scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II) ===> scala.math.package$: min(II)
scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: isEmpty()
scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: length()
scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: scala$collection$IndexedSeqOptimized$$super$tail()
scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;) ===> scala.collection.IndexedSeqOptimized: slice(II)
scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I) ===> scala.collection.IndexedSeqOptimized: slice(II)
scala.collection.Iterable$: <clinit>() ===> scala.collection.Iterable$: <init>()
scala.collection.Iterable$: <init>() ===> scala.collection.generic.GenTraversableFactory: <init>()
scala.collection.Iterable$: canBuildFrom() ===> scala.collection.generic.GenTraversableFactory: ReusableCBF()
scala.collection.Iterable$: newBuilder() ===> scala.collection.immutable.Iterable$: newBuilder()
scala.collection.IterableLike$class: copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;II) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;II) ===> scala.collection.Iterator: hasNext()
scala.collection.IterableLike$class: copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;II) ===> scala.collection.Iterator: next()
scala.collection.IterableLike$class: copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;II) ===> scala.runtime.RichInt$: min$extension(II)
scala.collection.IterableLike$class: copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;)
scala.collection.IterableLike$class: copyToArray(Lscala/collection/IterableLike;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;)
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.collection.IterableLike: newBuilder()
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.collection.Iterator: hasNext()
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.collection.Iterator: next()
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.collection.mutable.Builder: result()
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.collection.mutable.Builder: sizeHint(Lscala/collection/TraversableLike;I)
scala.collection.IterableLike$class: drop(Lscala/collection/IterableLike;I) ===> scala.math.package$: max(II)
scala.collection.IterableLike$class: forall(Lscala/collection/IterableLike;Lscala/Function1;) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: forall(Lscala/collection/IterableLike;Lscala/Function1;) ===> scala.collection.Iterator: forall(Lscala/Function1;)
scala.collection.IterableLike$class: foreach(Lscala/collection/IterableLike;Lscala/Function1;) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: foreach(Lscala/collection/IterableLike;Lscala/Function1;) ===> scala.collection.Iterator: foreach(Lscala/Function1;)
scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;) ===> scala.collection.Iterator: next()
scala.collection.IterableLike$class: isEmpty(Lscala/collection/IterableLike;) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: isEmpty(Lscala/collection/IterableLike;) ===> scala.collection.Iterator: hasNext()
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> scala.collection.GenIterable: iterator()
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> scala.collection.Iterator: hasNext()
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> scala.collection.Iterator: next()
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I) ===> scala.collection.IterableLike: newBuilder()
scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I) ===> scala.collection.Iterator: hasNext()
scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I) ===> scala.collection.Iterator: next()
scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I) ===> scala.collection.mutable.Builder: result()
scala.collection.IterableLike$class: take(Lscala/collection/IterableLike;I) ===> scala.collection.mutable.Builder: sizeHintBounded(ILscala/collection/TraversableLike;)
scala.collection.IterableLike$class: toStream(Lscala/collection/IterableLike;) ===> scala.collection.IterableLike: iterator()
scala.collection.IterableLike$class: toStream(Lscala/collection/IterableLike;) ===> scala.collection.Iterator: toStream()
scala.collection.Iterator$$anon$11: <init>(Lscala/collection/Iterator;Lscala/Function1;) ===> java.lang.NullPointerException: <init>()
scala.collection.Iterator$$anon$11: <init>(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.Iterator$$anon$11: hasNext() ===> scala.collection.Iterator: hasNext()
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$11: next() ===> scala.collection.Iterator: next()
scala.collection.Iterator$$anon$11: next() ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.Iterator$$anon$2: <init>() ===> scala.collection.AbstractIterator: <init>()
scala.collection.Iterator$$anon$2: next() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.Iterator$$anon$2: next() ===> scala.collection.Iterator$$anon$2: next()
scala.collection.Iterator$$anonfun$toStream$1: <init>(Lscala/collection/Iterator;) ===> java.lang.NullPointerException: <init>()
scala.collection.Iterator$$anonfun$toStream$1: <init>(Lscala/collection/Iterator;) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.Iterator$$anonfun$toStream$1: apply() ===> scala.collection.Iterator$$anonfun$toStream$1: apply()
scala.collection.Iterator$$anonfun$toStream$1: apply() ===> scala.collection.Iterator: toStream()
scala.collection.Iterator$: <clinit>() ===> scala.collection.Iterator$: <init>()
scala.collection.Iterator$: <init>() ===> java.lang.Object: <init>()
scala.collection.Iterator$: <init>() ===> scala.collection.Iterator$$anon$2: <init>()
scala.collection.Iterator$: apply(Lscala/collection/Seq;) ===> scala.collection.Seq: iterator()
scala.collection.Iterator$class: copyToArray(Lscala/collection/Iterator;Ljava/lang/Object;II) ===> scala.collection.Iterator: hasNext()
scala.collection.Iterator$class: copyToArray(Lscala/collection/Iterator;Ljava/lang/Object;II) ===> scala.collection.Iterator: next()
scala.collection.Iterator$class: copyToArray(Lscala/collection/Iterator;Ljava/lang/Object;II) ===> scala.math.package$: min(II)
scala.collection.Iterator$class: copyToArray(Lscala/collection/Iterator;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;)
scala.collection.Iterator$class: copyToArray(Lscala/collection/Iterator;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.collection.Iterator: hasNext()
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.collection.Iterator: next()
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: forall(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.collection.Iterator: hasNext()
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.collection.Iterator: next()
scala.collection.Iterator$class: foreach(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.Iterator$class: isEmpty(Lscala/collection/Iterator;) ===> scala.collection.Iterator: hasNext()
scala.collection.Iterator$class: map(Lscala/collection/Iterator;Lscala/Function1;) ===> scala.collection.Iterator$$anon$11: <init>(Lscala/collection/Iterator;Lscala/Function1;)
scala.collection.Iterator$class: toStream(Lscala/collection/Iterator;) ===> scala.collection.immutable.Stream$Cons: <init>(Ljava/lang/Object;Lscala/Function0;)
scala.collection.Iterator$class: toStream(Lscala/collection/Iterator;) ===> scala.collection.Iterator$$anonfun$toStream$1: <init>(Lscala/collection/Iterator;)
scala.collection.Iterator$class: toStream(Lscala/collection/Iterator;) ===> scala.collection.Iterator: hasNext()
scala.collection.Iterator$class: toStream(Lscala/collection/Iterator;) ===> scala.collection.Iterator: next()
scala.collection.Iterator$class: toString(Lscala/collection/Iterator;) ===> scala.collection.Iterator: hasNext()
scala.collection.Iterator$class: toString(Lscala/collection/Iterator;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.Iterator$class: toString(Lscala/collection/Iterator;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.Iterator$class: toString(Lscala/collection/Iterator;) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.JavaConverters$: <clinit>() ===> scala.collection.JavaConverters$: <init>()
scala.collection.JavaConverters$: <init>() ===> java.lang.Object: <init>()
scala.collection.JavaConverters$: <init>() ===> scala.collection.convert.DecorateAsJava$class: $init$(Lscala/collection/convert/DecorateAsJava;)
scala.collection.JavaConverters$: <init>() ===> scala.collection.convert.DecorateAsScala$class: $init$(Lscala/collection/convert/DecorateAsScala;)
scala.collection.JavaConverters$: propertiesAsScalaMapConverter(Ljava/util/Properties;) ===> scala.collection.convert.DecorateAsScala$class: propertiesAsScalaMapConverter(Lscala/collection/convert/DecorateAsScala;Ljava/util/Properties;)
scala.collection.LinearSeqLike$$anon$1: <init>(Lscala/collection/LinearSeqLike;) ===> java.lang.NullPointerException: <init>()
scala.collection.LinearSeqLike$$anon$1: <init>(Lscala/collection/LinearSeqLike;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.LinearSeqLike$$anon$1: hasNext() ===> scala.collection.LinearSeqLike$$anon$1: these()
scala.collection.LinearSeqLike$$anon$1: hasNext() ===> scala.collection.LinearSeqLike: isEmpty()
scala.collection.LinearSeqLike$$anon$1: next() ===> scala.collection.Iterator$: empty()
scala.collection.LinearSeqLike$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.LinearSeqLike$$anon$1: next() ===> scala.collection.LinearSeqLike$$anon$1: hasNext()
scala.collection.LinearSeqLike$$anon$1: next() ===> scala.collection.LinearSeqLike$$anon$1: these()
scala.collection.LinearSeqLike$$anon$1: next() ===> scala.collection.LinearSeqLike$$anon$1: these_$eq(Lscala/collection/LinearSeqLike;)
scala.collection.LinearSeqLike$$anon$1: next() ===> scala.collection.LinearSeqLike: head()
scala.collection.LinearSeqLike$$anon$1: next() ===> scala.collection.LinearSeqLike: tail()
scala.collection.LinearSeqLike$$anon$1: toList() ===> scala.collection.LinearSeqLike$$anon$1: these()
scala.collection.LinearSeqLike$$anon$1: toList() ===> scala.collection.LinearSeqLike$$anon$1: these_$eq(Lscala/collection/LinearSeqLike;)
scala.collection.LinearSeqLike$$anon$1: toList() ===> scala.collection.LinearSeqLike: newBuilder()
scala.collection.LinearSeqLike$$anon$1: toList() ===> scala.collection.LinearSeqLike: toList()
scala.collection.LinearSeqLike$$anon$1: toList() ===> scala.collection.mutable.Builder: result()
scala.collection.LinearSeqLike$class: hashCode(Lscala/collection/LinearSeqLike;) ===> scala.collection.LinearSeqLike: seq()
scala.collection.LinearSeqLike$class: hashCode(Lscala/collection/LinearSeqLike;) ===> scala.util.hashing.MurmurHash3$: seqHash(Lscala/collection/Seq;)
scala.collection.LinearSeqLike$class: iterator(Lscala/collection/LinearSeqLike;) ===> scala.collection.LinearSeqLike$$anon$1: <init>(Lscala/collection/LinearSeqLike;)
scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I) ===> java.lang.String: valueOf(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I) ===> scala.collection.LinearSeqOptimized: drop(I)
scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I) ===> scala.collection.LinearSeqOptimized: head()
scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: apply(Lscala/collection/LinearSeqOptimized;I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> scala.collection.LinearSeqOptimized: head()
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> scala.collection.LinearSeqOptimized: tail()
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: exists(Lscala/collection/LinearSeqOptimized;Lscala/Function1;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized: head()
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized: tail()
scala.collection.LinearSeqOptimized$class: foldLeft(Lscala/collection/LinearSeqOptimized;Ljava/lang/Object;Lscala/Function2;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: last(Lscala/collection/LinearSeqOptimized;) ===> java.util.NoSuchElementException: <init>()
scala.collection.LinearSeqOptimized$class: last(Lscala/collection/LinearSeqOptimized;) ===> scala.collection.LinearSeqOptimized: head()
scala.collection.LinearSeqOptimized$class: last(Lscala/collection/LinearSeqOptimized;) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: last(Lscala/collection/LinearSeqOptimized;) ===> scala.collection.LinearSeqOptimized: tail()
scala.collection.LinearSeqOptimized$class: length(Lscala/collection/LinearSeqOptimized;) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: length(Lscala/collection/LinearSeqOptimized;) ===> scala.collection.LinearSeqOptimized: tail()
scala.collection.LinearSeqOptimized$class: lengthCompare(Lscala/collection/LinearSeqOptimized;I) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: lengthCompare(Lscala/collection/LinearSeqOptimized;I) ===> scala.collection.LinearSeqOptimized: tail()
scala.collection.LinearSeqOptimized$class: reduceLeft(Lscala/collection/LinearSeqOptimized;Lscala/Function2;) ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.LinearSeqOptimized$class: reduceLeft(Lscala/collection/LinearSeqOptimized;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized: foldLeft(Ljava/lang/Object;Lscala/Function2;)
scala.collection.LinearSeqOptimized$class: reduceLeft(Lscala/collection/LinearSeqOptimized;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized: head()
scala.collection.LinearSeqOptimized$class: reduceLeft(Lscala/collection/LinearSeqOptimized;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: reduceLeft(Lscala/collection/LinearSeqOptimized;Lscala/Function2;) ===> scala.collection.LinearSeqOptimized: tail()
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.LinearSeq: head()
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.LinearSeq: isEmpty()
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.LinearSeq: tail()
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.LinearSeqOptimized: head()
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.LinearSeqOptimized: isEmpty()
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.LinearSeqOptimized: scala$collection$LinearSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;)
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.collection.LinearSeqOptimized: tail()
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.LinearSeqOptimized$class: sameElements(Lscala/collection/LinearSeqOptimized;Lscala/collection/GenIterable;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.MapLike$$anon$1: <init>(Lscala/collection/MapLike;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.MapLike$$anon$1: <init>(Lscala/collection/MapLike;) ===> scala.collection.MapLike: iterator()
scala.collection.MapLike$$anon$1: hasNext() ===> scala.collection.Iterator: hasNext()
scala.collection.MapLike$$anon$1: hasNext() ===> scala.collection.MapLike$$anon$1: iter()
scala.collection.MapLike$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.MapLike$$anon$1: next() ===> scala.collection.MapLike$$anon$1: iter()
scala.collection.MapLike$$anon$1: next() ===> scala.Tuple2: _1()
scala.collection.MapLike$$anon$2: <init>(Lscala/collection/MapLike;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.MapLike$$anon$2: <init>(Lscala/collection/MapLike;) ===> scala.collection.MapLike: iterator()
scala.collection.MapLike$$anon$2: hasNext() ===> scala.collection.Iterator: hasNext()
scala.collection.MapLike$$anon$2: hasNext() ===> scala.collection.MapLike$$anon$2: iter()
scala.collection.MapLike$$anon$2: next() ===> scala.collection.Iterator: next()
scala.collection.MapLike$$anon$2: next() ===> scala.collection.MapLike$$anon$2: iter()
scala.collection.MapLike$$anon$2: next() ===> scala.Tuple2: _2()
scala.collection.MapLike$$anonfun$addString$1: <init>(Lscala/collection/MapLike;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.MapLike$$anonfun$addString$1: apply(Ljava/lang/Object;) ===> scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;)
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.Predef$: any2stringadd(Ljava/lang/Object;)
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.runtime.StringAdd$: $plus$extension(Ljava/lang/Object;Ljava/lang/String;)
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.MapLike$$anonfun$addString$1: apply(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.MapLike$class: addString(Lscala/collection/MapLike;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.Iterator: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.MapLike$class: addString(Lscala/collection/MapLike;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.Iterator: map(Lscala/Function1;)
scala.collection.MapLike$class: addString(Lscala/collection/MapLike;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.MapLike$$anonfun$addString$1: <init>(Lscala/collection/MapLike;)
scala.collection.MapLike$class: addString(Lscala/collection/MapLike;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.MapLike: iterator()
scala.collection.MapLike$class: apply(Lscala/collection/MapLike;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.MapLike$class: apply(Lscala/collection/MapLike;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.MapLike$class: apply(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.collection.MapLike: default(Ljava/lang/Object;)
scala.collection.MapLike$class: apply(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.collection.MapLike: get(Ljava/lang/Object;)
scala.collection.MapLike$class: apply(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.MapLike$class: apply(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.Some: x()
scala.collection.MapLike$class: contains(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.collection.MapLike: get(Ljava/lang/Object;)
scala.collection.MapLike$class: contains(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.Option: isDefined()
scala.collection.MapLike$class: default(Lscala/collection/MapLike;Ljava/lang/Object;) ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.MapLike$class: default(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.MapLike$class: default(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.MapLike$class: default(Lscala/collection/MapLike;Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> scala.collection.MapLike: get(Ljava/lang/Object;)
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> scala.Function0: apply()
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.MapLike$class: getOrElse(Lscala/collection/MapLike;Ljava/lang/Object;Lscala/Function0;) ===> scala.Some: x()
scala.collection.MapLike$class: isEmpty(Lscala/collection/MapLike;) ===> scala.collection.MapLike: size()
scala.collection.MapLike$class: keysIterator(Lscala/collection/MapLike;) ===> scala.collection.MapLike$$anon$1: <init>(Lscala/collection/MapLike;)
scala.collection.MapLike$class: newBuilder(Lscala/collection/MapLike;) ===> scala.collection.MapLike: empty()
scala.collection.MapLike$class: newBuilder(Lscala/collection/MapLike;) ===> scala.collection.mutable.MapBuilder: <init>(Lscala/collection/GenMap;)
scala.collection.MapLike$class: toBuffer(Lscala/collection/MapLike;) ===> scala.collection.MapLike: copyToBuffer(Lscala/collection/mutable/Buffer;)
scala.collection.MapLike$class: toBuffer(Lscala/collection/MapLike;) ===> scala.collection.MapLike: size()
scala.collection.MapLike$class: toBuffer(Lscala/collection/MapLike;) ===> scala.collection.mutable.ArrayBuffer: <init>(I)
scala.collection.MapLike$class: toString(Lscala/collection/MapLike;) ===> scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;)
scala.collection.MapLike$class: values(Lscala/collection/MapLike;) ===> scala.collection.MapLike$DefaultValuesIterable: <init>(Lscala/collection/MapLike;)
scala.collection.MapLike$class: valuesIterator(Lscala/collection/MapLike;) ===> scala.collection.MapLike$$anon$2: <init>(Lscala/collection/MapLike;)
scala.collection.MapLike$DefaultKeySet: $plus(Ljava/lang/Object;) ===> scala.collection.generic.GenericCompanion: apply(Lscala/collection/Seq;)
scala.collection.MapLike$DefaultKeySet: $plus(Ljava/lang/Object;) ===> scala.collection.Set: $plus(Ljava/lang/Object;)
scala.collection.MapLike$DefaultKeySet: $plus(Ljava/lang/Object;) ===> scala.collection.SetLike: $plus$plus(Lscala/collection/GenTraversableOnce;)
scala.collection.MapLike$DefaultKeySet: <init>(Lscala/collection/MapLike;) ===> java.lang.NullPointerException: <init>()
scala.collection.MapLike$DefaultKeySet: <init>(Lscala/collection/MapLike;) ===> scala.collection.AbstractSet: <init>()
scala.collection.MapLike$DefaultKeySet: contains(Ljava/lang/Object;) ===> scala.collection.MapLike$DefaultKeySet: scala$collection$MapLike$DefaultKeySet$$$outer()
scala.collection.MapLike$DefaultKeySet: contains(Ljava/lang/Object;) ===> scala.collection.MapLike: contains(Ljava/lang/Object;)
scala.collection.MapLike$DefaultKeySet: foreach(Lscala/Function1;) ===> scala.collection.Iterator: foreach(Lscala/Function1;)
scala.collection.MapLike$DefaultKeySet: foreach(Lscala/Function1;) ===> scala.collection.MapLike$DefaultKeySet: scala$collection$MapLike$DefaultKeySet$$$outer()
scala.collection.MapLike$DefaultKeySet: foreach(Lscala/Function1;) ===> scala.collection.MapLike: keysIterator()
scala.collection.MapLike$DefaultKeySet: iterator() ===> scala.collection.MapLike$DefaultKeySet: scala$collection$MapLike$DefaultKeySet$$$outer()
scala.collection.MapLike$DefaultKeySet: iterator() ===> scala.collection.MapLike: keysIterator()
scala.collection.MapLike$DefaultKeySet: size() ===> scala.collection.MapLike$DefaultKeySet: scala$collection$MapLike$DefaultKeySet$$$outer()
scala.collection.MapLike$DefaultKeySet: size() ===> scala.collection.MapLike: size()
scala.collection.MapLike$DefaultValuesIterable: <init>(Lscala/collection/MapLike;) ===> java.lang.NullPointerException: <init>()
scala.collection.MapLike$DefaultValuesIterable: <init>(Lscala/collection/MapLike;) ===> scala.collection.AbstractIterable: <init>()
scala.collection.MapLike$DefaultValuesIterable: foreach(Lscala/Function1;) ===> scala.collection.Iterator: foreach(Lscala/Function1;)
scala.collection.MapLike$DefaultValuesIterable: foreach(Lscala/Function1;) ===> scala.collection.MapLike$DefaultValuesIterable: scala$collection$MapLike$DefaultValuesIterable$$$outer()
scala.collection.MapLike$DefaultValuesIterable: foreach(Lscala/Function1;) ===> scala.collection.MapLike: valuesIterator()
scala.collection.MapLike$DefaultValuesIterable: iterator() ===> scala.collection.MapLike$DefaultValuesIterable: scala$collection$MapLike$DefaultValuesIterable$$$outer()
scala.collection.MapLike$DefaultValuesIterable: iterator() ===> scala.collection.MapLike: valuesIterator()
scala.collection.MapLike$DefaultValuesIterable: size() ===> scala.collection.MapLike$DefaultValuesIterable: scala$collection$MapLike$DefaultValuesIterable$$$outer()
scala.collection.MapLike$DefaultValuesIterable: size() ===> scala.collection.MapLike: size()
scala.collection.mutable.AbstractBuffer: <init>() ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.AbstractBuffer: <init>() ===> scala.collection.generic.Shrinkable$class: $init$(Lscala/collection/generic/Shrinkable;)
scala.collection.mutable.AbstractBuffer: <init>() ===> scala.collection.generic.Subtractable$class: $init$(Lscala/collection/generic/Subtractable;)
scala.collection.mutable.AbstractBuffer: <init>() ===> scala.collection.mutable.AbstractSeq: <init>()
scala.collection.mutable.AbstractBuffer: <init>() ===> scala.collection.mutable.Buffer$class: $init$(Lscala/collection/mutable/Buffer;)
scala.collection.mutable.AbstractBuffer: <init>() ===> scala.collection.mutable.BufferLike$class: $init$(Lscala/collection/mutable/Buffer;)
scala.collection.mutable.AbstractIterable: <init>() ===> scala.collection.AbstractIterable: <init>()
scala.collection.mutable.AbstractIterable: <init>() ===> scala.collection.mutable.Iterable$class: $init$(Lscala/collection/mutable/Iterable;)
scala.collection.mutable.AbstractIterable: <init>() ===> scala.collection.mutable.Traversable$class: $init$(Lscala/collection/mutable/Traversable;)
scala.collection.mutable.AbstractMap: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.AbstractMap: $plus(Lscala/Tuple2;) ===> scala.collection.mutable.MapLike$class: $plus(Lscala/collection/mutable/MapLike;Lscala/Tuple2;)
scala.collection.mutable.AbstractMap: $plus(Lscala/Tuple2;) ===> scala.collection.mutable.MapLike: $plus(Lscala/Tuple2;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.AbstractMap: <init>()
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.generic.Shrinkable$class: $init$(Lscala/collection/generic/Shrinkable;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.mutable.Cloneable$class: $init$(Lscala/collection/mutable/Cloneable;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.mutable.Iterable$class: $init$(Lscala/collection/mutable/Iterable;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.mutable.Map$class: $init$(Lscala/collection/mutable/Map;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.mutable.MapLike$class: $init$(Lscala/collection/mutable/MapLike;)
scala.collection.mutable.AbstractMap: <init>() ===> scala.collection.mutable.Traversable$class: $init$(Lscala/collection/mutable/Traversable;)
scala.collection.mutable.AbstractMap: clone() ===> scala.collection.mutable.MapLike$class: clone(Lscala/collection/mutable/MapLike;)
scala.collection.mutable.AbstractMap: companion() ===> scala.collection.mutable.Iterable$class: companion(Lscala/collection/mutable/Iterable;)
scala.collection.mutable.AbstractMap: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.AbstractMap: newBuilder() ===> scala.collection.mutable.MapLike$class: newBuilder(Lscala/collection/mutable/MapLike;)
scala.collection.mutable.AbstractMap: result() ===> scala.collection.mutable.MapLike$class: result(Lscala/collection/mutable/MapLike;)
scala.collection.mutable.AbstractMap: result() ===> scala.collection.mutable.MapLike: result()
scala.collection.mutable.AbstractMap: seq() ===> scala.collection.mutable.Map$class: seq(Lscala/collection/mutable/Map;)
scala.collection.mutable.AbstractMap: seq() ===> scala.collection.mutable.Map: seq()
scala.collection.mutable.AbstractMap: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.AbstractMap: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.AbstractMap: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.AbstractMap: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.AbstractMap: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.mutable.AbstractMap: update(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.MapLike$class: update(Lscala/collection/mutable/MapLike;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.AbstractSeq: <init>() ===> scala.collection.AbstractSeq: <init>()
scala.collection.mutable.AbstractSeq: <init>() ===> scala.collection.mutable.Cloneable$class: $init$(Lscala/collection/mutable/Cloneable;)
scala.collection.mutable.AbstractSeq: <init>() ===> scala.collection.mutable.Iterable$class: $init$(Lscala/collection/mutable/Iterable;)
scala.collection.mutable.AbstractSeq: <init>() ===> scala.collection.mutable.Seq$class: $init$(Lscala/collection/mutable/Seq;)
scala.collection.mutable.AbstractSeq: <init>() ===> scala.collection.mutable.SeqLike$class: $init$(Lscala/collection/mutable/SeqLike;)
scala.collection.mutable.AbstractSeq: <init>() ===> scala.collection.mutable.Traversable$class: $init$(Lscala/collection/mutable/Traversable;)
scala.collection.mutable.AbstractSeq: seq() ===> scala.collection.mutable.Seq$class: seq(Lscala/collection/mutable/Seq;)
scala.collection.mutable.AbstractSeq: seq() ===> scala.collection.mutable.Seq: seq()
scala.collection.mutable.AbstractSet: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.AbstractSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.mutable.SetLike$class: $plus$plus(Lscala/collection/mutable/SetLike;Lscala/collection/GenTraversableOnce;)
scala.collection.mutable.AbstractSet: $plus(Ljava/lang/Object;) ===> scala.collection.mutable.SetLike$class: $plus(Lscala/collection/mutable/SetLike;Ljava/lang/Object;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.generic.GenericSetTemplate$class: $init$(Lscala/collection/generic/GenericSetTemplate;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.generic.Shrinkable$class: $init$(Lscala/collection/generic/Shrinkable;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.generic.Subtractable$class: $init$(Lscala/collection/generic/Subtractable;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.GenSet$class: $init$(Lscala/collection/GenSet;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.GenSetLike$class: $init$(Lscala/collection/GenSetLike;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.mutable.AbstractIterable: <init>()
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.mutable.Cloneable$class: $init$(Lscala/collection/mutable/Cloneable;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.mutable.Set$class: $init$(Lscala/collection/mutable/Set;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.mutable.SetLike$class: $init$(Lscala/collection/mutable/SetLike;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.Set$class: $init$(Lscala/collection/Set;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.collection.SetLike$class: $init$(Lscala/collection/SetLike;)
scala.collection.mutable.AbstractSet: <init>() ===> scala.Function1$class: $init$(Lscala/Function1;)
scala.collection.mutable.AbstractSet: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike$class: apply(Lscala/collection/GenSetLike;Ljava/lang/Object;)
scala.collection.mutable.AbstractSet: clone() ===> scala.collection.mutable.SetLike$class: clone(Lscala/collection/mutable/SetLike;)
scala.collection.mutable.AbstractSet: empty() ===> scala.collection.generic.GenericSetTemplate$class: empty(Lscala/collection/generic/GenericSetTemplate;)
scala.collection.mutable.AbstractSet: equals(Ljava/lang/Object;) ===> scala.collection.GenSetLike$class: equals(Lscala/collection/GenSetLike;Ljava/lang/Object;)
scala.collection.mutable.AbstractSet: hashCode() ===> scala.collection.GenSetLike$class: hashCode(Lscala/collection/GenSetLike;)
scala.collection.mutable.AbstractSet: isEmpty() ===> scala.collection.SetLike$class: isEmpty(Lscala/collection/SetLike;)
scala.collection.mutable.AbstractSet: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.SetLike$class: map(Lscala/collection/SetLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.mutable.AbstractSet: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.AbstractSet: newBuilder() ===> scala.collection.mutable.SetLike$class: newBuilder(Lscala/collection/mutable/SetLike;)
scala.collection.mutable.AbstractSet: result() ===> scala.collection.mutable.SetLike$class: result(Lscala/collection/mutable/SetLike;)
scala.collection.mutable.AbstractSet: scala$collection$SetLike$$super$map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.mutable.AbstractSet: seq() ===> scala.collection.mutable.Set$class: seq(Lscala/collection/mutable/Set;)
scala.collection.mutable.AbstractSet: seq() ===> scala.collection.mutable.Set: seq()
scala.collection.mutable.AbstractSet: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.AbstractSet: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.AbstractSet: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.AbstractSet: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.AbstractSet: stringPrefix() ===> scala.collection.SetLike$class: stringPrefix(Lscala/collection/SetLike;)
scala.collection.mutable.AbstractSet: subsetOf(Lscala/collection/GenSet;) ===> scala.collection.GenSetLike$class: subsetOf(Lscala/collection/GenSetLike;Lscala/collection/GenSet;)
scala.collection.mutable.AbstractSet: toBuffer() ===> scala.collection.SetLike$class: toBuffer(Lscala/collection/SetLike;)
scala.collection.mutable.AbstractSet: toString() ===> scala.collection.SetLike$class: toString(Lscala/collection/SetLike;)
scala.collection.mutable.AbstractSet: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike$class: union(Lscala/collection/SetLike;Lscala/collection/GenSet;)
scala.collection.mutable.ArrayBuffer$: <clinit>() ===> scala.collection.mutable.ArrayBuffer$: <init>()
scala.collection.mutable.ArrayBuffer$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.mutable.ArrayBuffer$: canBuildFrom() ===> scala.collection.generic.GenTraversableFactory: ReusableCBF()
scala.collection.mutable.ArrayBuffer$: newBuilder() ===> scala.collection.mutable.ArrayBuffer: <init>()
scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ResizableArray: ensureSize(I)
scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ResizableArray: size0()
scala.collection.mutable.ArrayBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ResizableArray: size0_$eq(I)
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.IndexedSeqLike: copyToArray(Ljava/lang/Object;II)
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.IndexedSeqLike: length()
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ResizableArray: ensureSize(I)
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ResizableArray: size0()
scala.collection.mutable.ArrayBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ResizableArray: size0_$eq(I)
scala.collection.mutable.ArrayBuffer: <init>() ===> scala.collection.mutable.ArrayBuffer: <init>(I)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.IndexedSeq$class: $init$(Lscala/collection/IndexedSeq;)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.IndexedSeqOptimized$class: $init$(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.mutable.AbstractBuffer: <init>()
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.mutable.IndexedSeq$class: $init$(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.mutable.IndexedSeqLike$class: $init$(Lscala/collection/mutable/IndexedSeqLike;)
scala.collection.mutable.ArrayBuffer: <init>(I) ===> scala.collection.mutable.ResizableArray$class: $init$(Lscala/collection/mutable/ResizableArray;)
scala.collection.mutable.ArrayBuffer: apply(I) ===> scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I)
scala.collection.mutable.ArrayBuffer: apply(Ljava/lang/Object;) ===> scala.collection.mutable.ResizableArray: apply(I)
scala.collection.mutable.ArrayBuffer: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.ArrayBuffer: clear() ===> scala.collection.mutable.ResizableArray: reduceToSize(I)
scala.collection.mutable.ArrayBuffer: copyToArray(Ljava/lang/Object;II) ===> scala.collection.mutable.ResizableArray$class: copyToArray(Lscala/collection/mutable/ResizableArray;Ljava/lang/Object;II)
scala.collection.mutable.ArrayBuffer: drop(I) ===> scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArrayBuffer: ensureSize(I) ===> scala.collection.mutable.ResizableArray$class: ensureSize(Lscala/collection/mutable/ResizableArray;I)
scala.collection.mutable.ArrayBuffer: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.ArrayBuffer: foreach(Lscala/Function1;) ===> scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;)
scala.collection.mutable.ArrayBuffer: hashCode() ===> scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArrayBuffer: head() ===> scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayBuffer: isEmpty() ===> scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayBuffer: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArrayBuffer: length() ===> scala.collection.mutable.ResizableArray$class: length(Lscala/collection/mutable/ResizableArray;)
scala.collection.mutable.ArrayBuffer: lengthCompare(I) ===> scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArrayBuffer: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.ArrayBuffer: reduceLeft(Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;)
scala.collection.mutable.ArrayBuffer: reduceToSize(I) ===> scala.collection.mutable.ResizableArray$class: reduceToSize(Lscala/collection/mutable/ResizableArray;I)
scala.collection.mutable.ArrayBuffer: result() ===> scala.collection.mutable.ArrayBuffer: result()
scala.collection.mutable.ArrayBuffer: reverse() ===> scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayBuffer: reverseIterator() ===> scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayBuffer: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.mutable.ArrayBuffer: scala$collection$IndexedSeqOptimized$$super$head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.mutable.ArrayBuffer: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.mutable.ArrayBuffer: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.mutable.ArrayBuffer: scala$collection$IndexedSeqOptimized$$super$tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.mutable.ArrayBuffer: seq() ===> scala.collection.mutable.IndexedSeq$class: seq(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.ArrayBuffer: seq() ===> scala.collection.mutable.IndexedSeq: seq()
scala.collection.mutable.ArrayBuffer: sizeHint(I) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.ArrayBuffer: sizeHint(I) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ArrayBuffer: sizeHint(I) ===> scala.collection.mutable.ResizableArray: array_$eq([Ljava/lang/Object;)
scala.collection.mutable.ArrayBuffer: sizeHint(I) ===> scala.collection.mutable.ResizableArray: size0()
scala.collection.mutable.ArrayBuffer: sizeHint(I) ===> scala.collection.SeqLike: size()
scala.collection.mutable.ArrayBuffer: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.ArrayBuffer: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.ArrayBuffer: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.ArrayBuffer: slice(II) ===> scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II)
scala.collection.mutable.ArrayBuffer: tail() ===> scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayBuffer: take(I) ===> scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArrayBuffer: thisCollection() ===> scala.collection.mutable.IndexedSeqLike$class: thisCollection(Lscala/collection/mutable/IndexedSeqLike;)
scala.collection.mutable.ArrayBuffer: thisCollection() ===> scala.collection.mutable.IndexedSeqLike: thisCollection()
scala.collection.mutable.ArrayBuffer: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArrayBuffer: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.IndexedSeqLike$class: toCollection(Lscala/collection/mutable/IndexedSeqLike;Ljava/lang/Object;)
scala.collection.mutable.ArrayBuffer: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.IndexedSeqLike: toCollection(Ljava/lang/Object;)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: elems()
scala.collection.mutable.ArrayBuilder$ofRef: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: ensureSize(I)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: size()
scala.collection.mutable.ArrayBuilder$ofRef: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: size_$eq(I)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ArrayBuilder$ofRef: elems()
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ArrayBuilder$ofRef: ensureSize(I)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ArrayBuilder$ofRef: size()
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ArrayBuilder$ofRef: size_$eq(I)
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.WrappedArray$ofRef: array()
scala.collection.mutable.ArrayBuilder$ofRef: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.WrappedArray$ofRef: length()
scala.collection.mutable.ArrayBuilder$ofRef: <init>(Lscala/reflect/ClassTag;) ===> scala.collection.mutable.ArrayBuilder: <init>()
scala.collection.mutable.ArrayBuilder$ofRef: ensureSize(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: capacity()
scala.collection.mutable.ArrayBuilder$ofRef: ensureSize(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: resize(I)
scala.collection.mutable.ArrayBuilder$ofRef: equals(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: elems()
scala.collection.mutable.ArrayBuilder$ofRef: equals(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: size()
scala.collection.mutable.ArrayBuilder$ofRef: mkArray(I) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.ArrayBuilder$ofRef: mkArray(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: elems()
scala.collection.mutable.ArrayBuilder$ofRef: mkArray(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: size()
scala.collection.mutable.ArrayBuilder$ofRef: mkArray(I) ===> scala.reflect.ClassTag: newArray(I)
scala.collection.mutable.ArrayBuilder$ofRef: resize(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: capacity_$eq(I)
scala.collection.mutable.ArrayBuilder$ofRef: resize(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: elems_$eq([Ljava/lang/Object;)
scala.collection.mutable.ArrayBuilder$ofRef: resize(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: mkArray(I)
scala.collection.mutable.ArrayBuilder$ofRef: result() ===> scala.collection.mutable.ArrayBuilder$ofRef: capacity()
scala.collection.mutable.ArrayBuilder$ofRef: result() ===> scala.collection.mutable.ArrayBuilder$ofRef: elems()
scala.collection.mutable.ArrayBuilder$ofRef: result() ===> scala.collection.mutable.ArrayBuilder$ofRef: mkArray(I)
scala.collection.mutable.ArrayBuilder$ofRef: result() ===> scala.collection.mutable.ArrayBuilder$ofRef: result()
scala.collection.mutable.ArrayBuilder$ofRef: result() ===> scala.collection.mutable.ArrayBuilder$ofRef: size()
scala.collection.mutable.ArrayBuilder$ofRef: sizeHint(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: capacity()
scala.collection.mutable.ArrayBuilder$ofRef: sizeHint(I) ===> scala.collection.mutable.ArrayBuilder$ofRef: resize(I)
scala.collection.mutable.ArrayBuilder: <init>() ===> java.lang.Object: <init>()
scala.collection.mutable.ArrayBuilder: <init>() ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.ArrayBuilder: <init>() ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.ArrayBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.ArrayBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.ArrayBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.ArrayBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.ArrayOps$class: copyToArray(Lscala/collection/mutable/ArrayOps;Ljava/lang/Object;II) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.ArrayOps$class: copyToArray(Lscala/collection/mutable/ArrayOps;Ljava/lang/Object;II) ===> scala.collection.mutable.ArrayOps: repr()
scala.collection.mutable.ArrayOps$class: copyToArray(Lscala/collection/mutable/ArrayOps;Ljava/lang/Object;II) ===> scala.math.package$: min(II)
scala.collection.mutable.ArrayOps$class: copyToArray(Lscala/collection/mutable/ArrayOps;Ljava/lang/Object;II) ===> scala.runtime.RichInt$: max$extension(II)
scala.collection.mutable.ArrayOps$class: copyToArray(Lscala/collection/mutable/ArrayOps;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$class: elementClass(Lscala/collection/mutable/ArrayOps;) ===> java.lang.Object: getClass()
scala.collection.mutable.ArrayOps$class: elementClass(Lscala/collection/mutable/ArrayOps;) ===> scala.collection.mutable.ArrayOps: repr()
scala.collection.mutable.ArrayOps$class: elementClass(Lscala/collection/mutable/ArrayOps;) ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$class: seq(Lscala/collection/mutable/ArrayOps;) ===> scala.collection.mutable.ArrayOps: thisCollection()
scala.collection.mutable.ArrayOps$class: toArray(Lscala/collection/mutable/ArrayOps;Lscala/reflect/ClassTag;) ===> scala.collection.mutable.ArrayOps$class: elementClass(Lscala/collection/mutable/ArrayOps;)
scala.collection.mutable.ArrayOps$class: toArray(Lscala/collection/mutable/ArrayOps;Lscala/reflect/ClassTag;) ===> scala.collection.mutable.ArrayOps: repr()
scala.collection.mutable.ArrayOps$class: toArray(Lscala/collection/mutable/ArrayOps;Lscala/reflect/ClassTag;) ===> scala.collection.mutable.ArrayOps: scala$collection$mutable$ArrayOps$$super$toArray(Lscala/reflect/ClassTag;)
scala.collection.mutable.ArrayOps$class: toArray(Lscala/collection/mutable/ArrayOps;Lscala/reflect/ClassTag;) ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef$: <clinit>() ===> scala.collection.mutable.ArrayOps$ofRef$: <init>()
scala.collection.mutable.ArrayOps$ofRef$: <init>() ===> java.lang.Object: <init>()
scala.collection.mutable.ArrayOps$ofRef$: equals$extension([Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef$: hashCode$extension([Ljava/lang/Object;) ===> java.lang.Object: hashCode()
scala.collection.mutable.ArrayOps$ofRef$: hashCode$extension([Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
scala.collection.mutable.ArrayOps$ofRef$: newBuilder$extension([Ljava/lang/Object;) ===> java.lang.Object: getClass()
scala.collection.mutable.ArrayOps$ofRef$: newBuilder$extension([Ljava/lang/Object;) ===> scala.collection.mutable.ArrayBuilder$ofRef: <init>(Lscala/reflect/ClassTag;)
scala.collection.mutable.ArrayOps$ofRef$: newBuilder$extension([Ljava/lang/Object;) ===> scala.reflect.ClassTag$: apply(Ljava/lang/Class;)
scala.collection.mutable.ArrayOps$ofRef$: newBuilder$extension([Ljava/lang/Object;) ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef$: thisCollection$extension([Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofRef: <init>([Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef$: toCollection$extension([Ljava/lang/Object;[Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofRef: <init>([Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: $div$colon(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce$class: $div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.ArrayOps$ofRef: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> java.lang.Object: <init>()
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.GenSeqLike$class: $init$(Lscala/collection/GenSeqLike;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.GenTraversableOnce$class: $init$(Lscala/collection/GenTraversableOnce;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.IndexedSeqOptimized$class: $init$(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.IterableLike$class: $init$(Lscala/collection/IterableLike;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.mutable.ArrayLike$class: $init$(Lscala/collection/mutable/ArrayLike;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.mutable.ArrayOps$class: $init$(Lscala/collection/mutable/ArrayOps;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.mutable.IndexedSeqLike$class: $init$(Lscala/collection/mutable/IndexedSeqLike;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.Parallelizable$class: $init$(Lscala/collection/Parallelizable;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.SeqLike$class: $init$(Lscala/collection/SeqLike;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.TraversableLike$class: $init$(Lscala/collection/TraversableLike;)
scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.TraversableOnce$class: $init$(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayOps$ofRef: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.mutable.ArrayOps$ofRef: apply(I) ===> scala.collection.mutable.ArrayOps$ofRef$: apply$extension([Ljava/lang/Object;I)
scala.collection.mutable.ArrayOps$ofRef: apply(I) ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: canEqual(Ljava/lang/Object;) ===> scala.collection.IterableLike$class: canEqual(Lscala/collection/IterableLike;Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: copyToArray(Ljava/lang/Object;I) ===> scala.collection.TraversableOnce$class: copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I)
scala.collection.mutable.ArrayOps$ofRef: copyToArray(Ljava/lang/Object;II) ===> scala.collection.mutable.ArrayOps$class: copyToArray(Lscala/collection/mutable/ArrayOps;Ljava/lang/Object;II)
scala.collection.mutable.ArrayOps$ofRef: copyToBuffer(Lscala/collection/mutable/Buffer;) ===> scala.collection.TraversableOnce$class: copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;)
scala.collection.mutable.ArrayOps$ofRef: drop(I) ===> scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArrayOps$ofRef: equals(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayOps$ofRef$: equals$extension([Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: equals(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.ArrayOps$ofRef: foreach(Lscala/Function1;) ===> scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;)
scala.collection.mutable.ArrayOps$ofRef: hashCode() ===> scala.collection.mutable.ArrayOps$ofRef$: hashCode$extension([Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: hashCode() ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: head() ===> scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayOps$ofRef: isEmpty() ===> scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayOps$ofRef: isTraversableAgain() ===> scala.collection.TraversableLike$class: isTraversableAgain(Lscala/collection/TraversableLike;)
scala.collection.mutable.ArrayOps$ofRef: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArrayOps$ofRef: length() ===> scala.collection.mutable.ArrayOps$ofRef$: length$extension([Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: length() ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: lengthCompare(I) ===> scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArrayOps$ofRef: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.mutable.ArrayOps$ofRef: max(Lscala/math/Ordering;) ===> scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)
scala.collection.mutable.ArrayOps$ofRef: mkString() ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayOps$ofRef: mkString(Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;)
scala.collection.mutable.ArrayOps$ofRef: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.mutable.ArrayOps$ofRef: newBuilder() ===> scala.collection.mutable.ArrayOps$ofRef$: newBuilder$extension([Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: newBuilder() ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: nonEmpty() ===> scala.collection.TraversableOnce$class: nonEmpty(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayOps$ofRef: reduceLeft(Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;)
scala.collection.mutable.ArrayOps$ofRef: repr() ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: reverse() ===> scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayOps$ofRef: reverseIterator() ===> scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayOps$ofRef: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.mutable.ArrayOps$ofRef: scala$collection$IndexedSeqOptimized$$super$head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.mutable.ArrayOps$ofRef: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.mutable.ArrayOps$ofRef: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.mutable.ArrayOps$ofRef: scala$collection$IndexedSeqOptimized$$super$tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.mutable.ArrayOps$ofRef: scala$collection$mutable$ArrayOps$$super$toArray(Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)
scala.collection.mutable.ArrayOps$ofRef: seq() ===> scala.collection.mutable.ArrayOps$class: seq(Lscala/collection/mutable/ArrayOps;)
scala.collection.mutable.ArrayOps$ofRef: seq() ===> scala.collection.mutable.ArrayOps: seq()
scala.collection.mutable.ArrayOps$ofRef: size() ===> scala.collection.SeqLike$class: size(Lscala/collection/SeqLike;)
scala.collection.mutable.ArrayOps$ofRef: slice(II) ===> scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II)
scala.collection.mutable.ArrayOps$ofRef: sorted(Lscala/math/Ordering;) ===> scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;)
scala.collection.mutable.ArrayOps$ofRef: sortWith(Lscala/Function2;) ===> scala.collection.SeqLike$class: sortWith(Lscala/collection/SeqLike;Lscala/Function2;)
scala.collection.mutable.ArrayOps$ofRef: stringPrefix() ===> scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;)
scala.collection.mutable.ArrayOps$ofRef: tail() ===> scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArrayOps$ofRef: take(I) ===> scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArrayOps$ofRef: thisCollection() ===> scala.collection.mutable.ArrayOps$ofRef$: thisCollection$extension([Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: thisCollection() ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: to(Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;)
scala.collection.mutable.ArrayOps$ofRef: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.mutable.ArrayOps$class: toArray(Lscala/collection/mutable/ArrayOps;Lscala/reflect/ClassTag;)
scala.collection.mutable.ArrayOps$ofRef: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArrayOps$ofRef: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayOps$ofRef$: toCollection$extension([Ljava/lang/Object;[Ljava/lang/Object;)
scala.collection.mutable.ArrayOps$ofRef: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.ArrayOps$ofRef: repr()
scala.collection.mutable.ArrayOps$ofRef: toList() ===> scala.collection.TraversableOnce$class: toList(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayOps$ofRef: toSet() ===> scala.collection.TraversableOnce$class: toSet(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ArrayOps$ofRef: toStream() ===> scala.collection.IterableLike$class: toStream(Lscala/collection/IterableLike;)
scala.collection.mutable.ArrayOps$ofRef: toString() ===> scala.collection.SeqLike$class: toString(Lscala/collection/SeqLike;)
scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: <init>() ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: apply(Lscala/collection/mutable/ArrayBuffer;)
scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: apply(Lscala/collection/mutable/ArrayBuffer;) ===> scala.collection.mutable.ArraySeq: <init>(I)
scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: apply(Lscala/collection/mutable/ArrayBuffer;) ===> scala.collection.mutable.ArraySeq: array()
scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: apply(Lscala/collection/mutable/ArrayBuffer;) ===> scala.collection.mutable.ResizableArray: length()
scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: apply(Lscala/collection/mutable/ArrayBuffer;) ===> scala.collection.TraversableOnce: copyToArray(Ljava/lang/Object;I)
scala.collection.mutable.ArraySeq$: <clinit>() ===> scala.collection.mutable.ArraySeq$: <init>()
scala.collection.mutable.ArraySeq$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.mutable.ArraySeq$: newBuilder() ===> scala.collection.mutable.ArrayBuffer: <init>()
scala.collection.mutable.ArraySeq$: newBuilder() ===> scala.collection.mutable.ArraySeq$$anonfun$newBuilder$1: <init>()
scala.collection.mutable.ArraySeq$: newBuilder() ===> scala.collection.mutable.Builder: mapResult(Lscala/Function1;)
scala.collection.mutable.ArraySeq: <init>(I) ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.mutable.ArraySeq: <init>(I) ===> scala.collection.IndexedSeq$class: $init$(Lscala/collection/IndexedSeq;)
scala.collection.mutable.ArraySeq: <init>(I) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArraySeq: <init>(I) ===> scala.collection.IndexedSeqOptimized$class: $init$(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArraySeq: <init>(I) ===> scala.collection.mutable.AbstractSeq: <init>()
scala.collection.mutable.ArraySeq: <init>(I) ===> scala.collection.mutable.IndexedSeq$class: $init$(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.ArraySeq: <init>(I) ===> scala.collection.mutable.IndexedSeqLike$class: $init$(Lscala/collection/mutable/IndexedSeqLike;)
scala.collection.mutable.ArraySeq: apply(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.mutable.ArraySeq: apply(I) ===> java.lang.Object: toString()
scala.collection.mutable.ArraySeq: apply(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.mutable.ArraySeq: apply(I) ===> org.clapper.argot.Parameter: toString()
scala.collection.mutable.ArraySeq: apply(I) ===> scala.collection.mutable.ArraySeq: array()
scala.collection.mutable.ArraySeq: apply(I) ===> scala.collection.mutable.ArraySeq: length()
scala.collection.mutable.ArraySeq: apply(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.mutable.ArraySeq: apply(Ljava/lang/Object;) ===> scala.collection.mutable.ArraySeq: apply(I)
scala.collection.mutable.ArraySeq: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: copyToArray(Ljava/lang/Object;II) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.ArraySeq: copyToArray(Ljava/lang/Object;II) ===> scala.collection.mutable.ArraySeq: array()
scala.collection.mutable.ArraySeq: copyToArray(Ljava/lang/Object;II) ===> scala.collection.mutable.ArraySeq: length()
scala.collection.mutable.ArraySeq: copyToArray(Ljava/lang/Object;II) ===> scala.runtime.RichInt$: min$extension(II)
scala.collection.mutable.ArraySeq: copyToArray(Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: drop(I) ===> scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArraySeq: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> scala.collection.mutable.ArraySeq: array()
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> scala.collection.mutable.ArraySeq: length()
scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: hashCode() ===> scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArraySeq: head() ===> scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArraySeq: isEmpty() ===> scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArraySeq: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArraySeq: lengthCompare(I) ===> scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArraySeq: reduceLeft(Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;)
scala.collection.mutable.ArraySeq: reverse() ===> scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArraySeq: reverseIterator() ===> scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArraySeq: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.mutable.ArraySeq: scala$collection$IndexedSeqOptimized$$super$head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.mutable.ArraySeq: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.mutable.ArraySeq: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.mutable.ArraySeq: scala$collection$IndexedSeqOptimized$$super$tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.mutable.ArraySeq: seq() ===> scala.collection.mutable.IndexedSeq$class: seq(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.ArraySeq: seq() ===> scala.collection.mutable.IndexedSeq: seq()
scala.collection.mutable.ArraySeq: slice(II) ===> scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II)
scala.collection.mutable.ArraySeq: tail() ===> scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.ArraySeq: take(I) ===> scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.ArraySeq: thisCollection() ===> scala.collection.mutable.IndexedSeqLike$class: thisCollection(Lscala/collection/mutable/IndexedSeqLike;)
scala.collection.mutable.ArraySeq: thisCollection() ===> scala.collection.mutable.IndexedSeqLike: thisCollection()
scala.collection.mutable.ArraySeq: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.ArraySeq: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.IndexedSeqLike$class: toCollection(Lscala/collection/mutable/IndexedSeqLike;Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.IndexedSeqLike: toCollection(Ljava/lang/Object;)
scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;) ===> java.lang.Object: toString()
scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;) ===> org.clapper.argot.Parameter: toString()
scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;) ===> scala.collection.mutable.ArraySeq: array()
scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;) ===> scala.collection.mutable.ArraySeq: length()
scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.mutable.Builder$$anon$1: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.Builder$$anon$1: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.Builder$$anon$1: self()
scala.collection.mutable.Builder$$anon$1: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.Builder$$anon$1: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.Builder$$anon$1: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.Builder$$anon$1: self()
scala.collection.mutable.Builder$$anon$1: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.Builder$$anon$1: <init>(Lscala/collection/mutable/Builder;Lscala/Function1;) ===> java.lang.Object: <init>()
scala.collection.mutable.Builder$$anon$1: <init>(Lscala/collection/mutable/Builder;Lscala/Function1;) ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.Builder$$anon$1: <init>(Lscala/collection/mutable/Builder;Lscala/Function1;) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.Builder$$anon$1: <init>(Lscala/collection/mutable/Builder;Lscala/Function1;) ===> scala.Proxy$class: $init$(Lscala/Proxy;)
scala.collection.mutable.Builder$$anon$1: equals(Ljava/lang/Object;) ===> scala.Proxy$class: equals(Lscala/Proxy;Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: hashCode() ===> scala.Proxy$class: hashCode(Lscala/Proxy;)
scala.collection.mutable.Builder$$anon$1: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: result() ===> scala.collection.mutable.Builder$$anon$1: self()
scala.collection.mutable.Builder$$anon$1: result() ===> scala.collection.mutable.Builder: result()
scala.collection.mutable.Builder$$anon$1: result() ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.Builder$$anon$1: self() ===> scala.collection.mutable.Builder$$anon$1: self()
scala.collection.mutable.Builder$$anon$1: sizeHint(I) ===> scala.collection.mutable.Builder$$anon$1: self()
scala.collection.mutable.Builder$$anon$1: sizeHint(I) ===> scala.collection.mutable.Builder: sizeHint(I)
scala.collection.mutable.Builder$$anon$1: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.Builder$$anon$1: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.Builder$$anon$1: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$$anon$1: self()
scala.collection.mutable.Builder$$anon$1: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder: sizeHintBounded(ILscala/collection/TraversableLike;)
scala.collection.mutable.Builder$$anon$1: toString() ===> scala.Proxy$class: toString(Lscala/Proxy;)
scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;) ===> scala.collection.mutable.Builder$$anon$1: <init>(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder: sizeHint(I)
scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: size()
scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder: sizeHint(I)
scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I) ===> scala.collection.TraversableLike: size()
scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder: sizeHint(I)
scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: size()
scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;) ===> scala.runtime.RichInt$: min$extension(II)
scala.collection.mutable.DefaultEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: <init>()
scala.collection.mutable.DefaultEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashEntry$class: $init$(Lscala/collection/mutable/HashEntry;)
scala.collection.mutable.DefaultEntry: chainString() ===> scala.collection.mutable.DefaultEntry: key()
scala.collection.mutable.DefaultEntry: chainString() ===> scala.collection.mutable.DefaultEntry: toString()
scala.collection.mutable.DefaultEntry: chainString() ===> scala.collection.mutable.DefaultEntry: value()
scala.collection.mutable.DefaultEntry: chainString() ===> scala.collection.mutable.HashEntry: next()
scala.collection.mutable.DefaultEntry: chainString() ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.mutable.DefaultEntry: chainString() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.mutable.DefaultEntry: chainString() ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.mutable.DefaultEntry: toString() ===> scala.collection.mutable.DefaultEntry: chainString()
scala.collection.mutable.FlatHashTable$$anon$1: <init>(Lscala/collection/mutable/FlatHashTable;) ===> java.lang.NullPointerException: <init>()
scala.collection.mutable.FlatHashTable$$anon$1: <init>(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.FlatHashTable$$anon$1: hasNext() ===> scala.collection.mutable.FlatHashTable$$anon$1: i()
scala.collection.mutable.FlatHashTable$$anon$1: hasNext() ===> scala.collection.mutable.FlatHashTable$$anon$1: i_$eq(I)
scala.collection.mutable.FlatHashTable$$anon$1: hasNext() ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$$anon$1: next() ===> scala.collection.Iterator$: empty()
scala.collection.mutable.FlatHashTable$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.mutable.FlatHashTable$$anon$1: next() ===> scala.collection.mutable.FlatHashTable$$anon$1: hasNext()
scala.collection.mutable.FlatHashTable$$anon$1: next() ===> scala.collection.mutable.FlatHashTable$$anon$1: i()
scala.collection.mutable.FlatHashTable$$anon$1: next() ===> scala.collection.mutable.FlatHashTable$$anon$1: i_$eq(I)
scala.collection.mutable.FlatHashTable$$anon$1: next() ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: <init>(Lscala/collection/mutable/FlatHashTable$$anonfun$checkConsistent$1;I) ===> java.lang.NullPointerException: <init>()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: <init>(Lscala/collection/mutable/FlatHashTable$$anonfun$checkConsistent$1;I) ===> scala.runtime.AbstractFunction0: <init>()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.collection.mutable.ArrayOps: mkString()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.collection.mutable.StringBuilder: append(I)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply() ===> scala.Predef$: refArrayOps([Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: <init>(Lscala/collection/mutable/FlatHashTable;) ===> java.lang.NullPointerException: <init>()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: <init>(Lscala/collection/mutable/FlatHashTable;) ===> scala.runtime.AbstractFunction1$mcVI$sp: <init>()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: <init>(Lscala/collection/mutable/FlatHashTable$$anonfun$checkConsistent$1;I)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: apply()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> scala.collection.mutable.FlatHashTable: containsEntry(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply(I) ===> scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply$mcVI$sp(I)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply(I)
scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$: <clinit>() ===> scala.collection.mutable.FlatHashTable$: <init>()
scala.collection.mutable.FlatHashTable$: <init>() ===> java.lang.Object: <init>()
scala.collection.mutable.FlatHashTable$: newThreshold(II) ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$: newThreshold(II) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.mutable.FlatHashTable$: newThreshold(II) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$: newThreshold(II) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$: defaultLoadFactor()
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$: newThreshold(II)
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$class: initialCapacity(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: _loadFactor()
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: _loadFactor_$eq(I)
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: seedvalue_$eq(I)
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: sizemap_$eq([I)
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: table_$eq([Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: tableSize_$eq(I)
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: tableSizeSeed()
scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: threshold_$eq(I)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: elemHashCode(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: index(I)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: nnSizeMapAdd(I)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: tableSize()
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: tableSize_$eq(I)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: threshold()
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: calcSizeMapSize(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: sizeMapBucketBitSize()
scala.collection.mutable.FlatHashTable$class: capacity(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.HashTable$: powerOfTwo(I)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.immutable.Range: <init>(III)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.immutable.Range: start()
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.immutable.Range: step()
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.immutable.Range: terminalElement()
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.immutable.Range: validateRangeBoundaries(Lscala/Function1;)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1$$anonfun$apply$mcVI$sp$1: <init>(Lscala/collection/mutable/FlatHashTable$$anonfun$checkConsistent$1;I)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1: <init>(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: containsEntry(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.StringBuilder: append(I)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;)
scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: elemHashCode(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: index(I)
scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$: newThreshold(II)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$class: checkConsistent(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$class: tableDebug(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: _loadFactor()
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: addEntry(Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: nnSizeMapReset(I)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: seedvalue_$eq(I)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: table_$eq([Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: tableSize_$eq(I)
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: tableSizeSeed()
scala.collection.mutable.FlatHashTable$class: growTable(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: threshold_$eq(I)
scala.collection.mutable.FlatHashTable$class: index(Lscala/collection/mutable/FlatHashTable;I) ===> java.lang.Integer: bitCount(I)
scala.collection.mutable.FlatHashTable$class: index(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: improve(II)
scala.collection.mutable.FlatHashTable$class: index(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: seedvalue()
scala.collection.mutable.FlatHashTable$class: index(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$class: initialCapacity(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: capacity(I)
scala.collection.mutable.FlatHashTable$class: initialCapacity(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: initialSize()
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: _loadFactor_$eq(I)
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: alwaysInitSizeMap()
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: seedvalue_$eq(I)
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: sizemap()
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: sizemap_$eq([I)
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: sizeMapInitAndRebuild()
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: table_$eq([Ljava/lang/Object;)
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: tableSize_$eq(I)
scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: threshold_$eq(I)
scala.collection.mutable.FlatHashTable$class: iterator(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable$$anon$1: <init>(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.FlatHashTable$class: nnSizeMapAdd(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: sizemap()
scala.collection.mutable.FlatHashTable$class: nnSizeMapAdd(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: sizeMapBucketBitSize()
scala.collection.mutable.FlatHashTable$class: nnSizeMapReset(Lscala/collection/mutable/FlatHashTable;I) ===> java.util.Arrays: fill([II)
scala.collection.mutable.FlatHashTable$class: nnSizeMapReset(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: calcSizeMapSize(I)
scala.collection.mutable.FlatHashTable$class: nnSizeMapReset(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: sizemap()
scala.collection.mutable.FlatHashTable$class: nnSizeMapReset(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: sizemap_$eq([I)
scala.collection.mutable.FlatHashTable$class: sizeMapInit(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: calcSizeMapSize(I)
scala.collection.mutable.FlatHashTable$class: sizeMapInit(Lscala/collection/mutable/FlatHashTable;I) ===> scala.collection.mutable.FlatHashTable: sizemap_$eq([I)
scala.collection.mutable.FlatHashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: sizemap()
scala.collection.mutable.FlatHashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: sizeMapBucketSize()
scala.collection.mutable.FlatHashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: sizeMapInit(I)
scala.collection.mutable.FlatHashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: totalSizeMapBuckets()
scala.collection.mutable.FlatHashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/FlatHashTable;) ===> scala.runtime.RichInt$: min$extension(II)
scala.collection.mutable.FlatHashTable$class: tableSizeSeed(Lscala/collection/mutable/FlatHashTable;) ===> java.lang.Integer: bitCount(I)
scala.collection.mutable.FlatHashTable$class: tableSizeSeed(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: sizeMapBucketSize()
scala.collection.mutable.FlatHashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/FlatHashTable;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.FlatHashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/FlatHashTable$HashUtils;Ljava/lang/Object;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
scala.collection.mutable.FlatHashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/FlatHashTable$HashUtils;Ljava/lang/Object;) ===> java.lang.Object: hashCode()
scala.collection.mutable.FlatHashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/FlatHashTable$HashUtils;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
scala.collection.mutable.FlatHashTable$HashUtils$class: improve(Lscala/collection/mutable/FlatHashTable$HashUtils;II) ===> scala.util.hashing.package$: byteswap32(I)
scala.collection.mutable.FlatHashTable$HashUtils$class: sizeMapBucketSize(Lscala/collection/mutable/FlatHashTable$HashUtils;) ===> scala.collection.mutable.FlatHashTable$HashUtils: sizeMapBucketBitSize()
scala.collection.mutable.GrowingBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.generic.Growable: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.GrowingBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.GrowingBuilder: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.GrowingBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.GrowingBuilder: elems()
scala.collection.mutable.GrowingBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.GrowingBuilder: <init>(Lscala/collection/generic/Growable;) ===> java.lang.Object: <init>()
scala.collection.mutable.GrowingBuilder: <init>(Lscala/collection/generic/Growable;) ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.GrowingBuilder: <init>(Lscala/collection/generic/Growable;) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.GrowingBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.GrowingBuilder: result() ===> scala.collection.mutable.GrowingBuilder: elems()
scala.collection.mutable.GrowingBuilder: result() ===> scala.collection.mutable.GrowingBuilder: result()
scala.collection.mutable.GrowingBuilder: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.GrowingBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.GrowingBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.GrowingBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.HashMap$$anon$3: <init>(Lscala/collection/mutable/HashMap;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.HashMap$$anon$3: <init>(Lscala/collection/mutable/HashMap;) ===> scala.collection.mutable.HashTable: entriesIterator()
scala.collection.mutable.HashMap$$anon$3: hasNext() ===> scala.collection.Iterator: hasNext()
scala.collection.mutable.HashMap$$anon$3: hasNext() ===> scala.collection.mutable.HashMap$$anon$3: iter()
scala.collection.mutable.HashMap$$anon$3: next() ===> scala.collection.Iterator: next()
scala.collection.mutable.HashMap$$anon$3: next() ===> scala.collection.mutable.DefaultEntry: key()
scala.collection.mutable.HashMap$$anon$3: next() ===> scala.collection.mutable.HashMap$$anon$3: iter()
scala.collection.mutable.HashMap$$anon$4: <init>(Lscala/collection/mutable/HashMap;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.HashMap$$anon$4: <init>(Lscala/collection/mutable/HashMap;) ===> scala.collection.mutable.HashTable: entriesIterator()
scala.collection.mutable.HashMap$$anon$4: hasNext() ===> scala.collection.Iterator: hasNext()
scala.collection.mutable.HashMap$$anon$4: hasNext() ===> scala.collection.mutable.HashMap$$anon$4: iter()
scala.collection.mutable.HashMap$$anon$4: next() ===> scala.collection.Iterator: next()
scala.collection.mutable.HashMap$$anon$4: next() ===> scala.collection.mutable.DefaultEntry: value()
scala.collection.mutable.HashMap$$anon$4: next() ===> scala.collection.mutable.HashMap$$anon$4: iter()
scala.collection.mutable.HashMap$$anonfun$foreach$1: <init>(Lscala/collection/mutable/HashMap;Lscala/Function1;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> scala.collection.mutable.DefaultEntry: key()
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> scala.collection.mutable.DefaultEntry: value()
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$foreach$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap$$anonfun$iterator$1: <init>(Lscala/collection/mutable/HashMap;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.mutable.HashMap$$anonfun$iterator$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.HashMap$$anonfun$iterator$1: apply(Lscala/collection/mutable/DefaultEntry;)
scala.collection.mutable.HashMap$$anonfun$iterator$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> scala.collection.mutable.DefaultEntry: key()
scala.collection.mutable.HashMap$$anonfun$iterator$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> scala.collection.mutable.DefaultEntry: value()
scala.collection.mutable.HashMap$$anonfun$iterator$1: apply(Lscala/collection/mutable/DefaultEntry;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap$: <clinit>() ===> scala.collection.mutable.HashMap$: <init>()
scala.collection.mutable.HashMap$: <init>() ===> scala.collection.generic.MutableMapFactory: <init>()
scala.collection.mutable.HashMap$: empty() ===> scala.collection.mutable.HashMap$: empty()
scala.collection.mutable.HashMap$: empty() ===> scala.collection.mutable.HashMap: <init>()
scala.collection.mutable.HashMap: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.HashMap: $plus$eq(Lscala/Tuple2;)
scala.collection.mutable.HashMap: $plus$eq(Lscala/Tuple2;) ===> scala.collection.mutable.DefaultEntry: value_$eq(Ljava/lang/Object;)
scala.collection.mutable.HashMap: $plus$eq(Lscala/Tuple2;) ===> scala.collection.mutable.HashMap: $plus$eq(Lscala/Tuple2;)
scala.collection.mutable.HashMap: $plus$eq(Lscala/Tuple2;) ===> scala.collection.mutable.HashTable: findOrAddEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap: $plus$eq(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.mutable.HashMap: $plus$eq(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.mutable.HashMap: $plus(Lscala/Tuple2;) ===> scala.collection.mutable.MapLike: $plus(Lscala/Tuple2;)
scala.collection.mutable.HashMap: <init>() ===> scala.collection.mutable.HashMap: <init>(Lscala/collection/mutable/HashTable$Contents;)
scala.collection.mutable.HashMap: <init>(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.mutable.HashMap: <init>(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.AbstractMap: <init>()
scala.collection.mutable.HashMap: <init>(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashMap: <init>(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable$HashUtils$class: $init$(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.HashMap: <init>(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: initWithContents(Lscala/collection/mutable/HashTable$Contents;)
scala.collection.mutable.HashMap: alwaysInitSizeMap() ===> scala.collection.mutable.HashTable$class: alwaysInitSizeMap(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashMap: apply(Ljava/lang/Object;) ===> scala.collection.MapLike: default(Ljava/lang/Object;)
scala.collection.mutable.HashMap: apply(Ljava/lang/Object;) ===> scala.collection.mutable.DefaultEntry: value()
scala.collection.mutable.HashMap: apply(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findEntry(Ljava/lang/Object;)
scala.collection.mutable.HashMap: calcSizeMapSize(I) ===> scala.collection.mutable.HashTable$class: calcSizeMapSize(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.HashMap: contains(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findEntry(Ljava/lang/Object;)
scala.collection.mutable.HashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.DefaultEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap: elemEquals(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: elemEquals(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap: elemHashCode(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/HashTable$HashUtils;Ljava/lang/Object;)
scala.collection.mutable.HashMap: empty() ===> scala.collection.mutable.HashMap$: empty()
scala.collection.mutable.HashMap: empty() ===> scala.collection.mutable.HashMap: empty()
scala.collection.mutable.HashMap: entriesIterator() ===> scala.collection.mutable.HashTable$class: entriesIterator(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashMap: findEntry(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: findEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;)
scala.collection.mutable.HashMap: findOrAddEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap: foreach(Lscala/Function1;) ===> scala.collection.mutable.HashMap$$anonfun$foreach$1: <init>(Lscala/collection/mutable/HashMap;Lscala/Function1;)
scala.collection.mutable.HashMap: foreach(Lscala/Function1;) ===> scala.collection.mutable.HashTable: foreachEntry(Lscala/Function1;)
scala.collection.mutable.HashMap: foreachEntry(Lscala/Function1;) ===> scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;)
scala.collection.mutable.HashMap: get(Ljava/lang/Object;) ===> scala.collection.mutable.DefaultEntry: value()
scala.collection.mutable.HashMap: get(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findEntry(Ljava/lang/Object;)
scala.collection.mutable.HashMap: get(Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.mutable.HashMap: improve(II) ===> scala.collection.mutable.HashTable$HashUtils$class: improve(Lscala/collection/mutable/HashTable$HashUtils;II)
scala.collection.mutable.HashMap: index(I) ===> scala.collection.mutable.HashTable$class: index(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.HashMap: initialSize() ===> scala.collection.mutable.HashTable$class: initialSize(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashMap: initWithContents(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;)
scala.collection.mutable.HashMap: iterator() ===> scala.collection.Iterator: map(Lscala/Function1;)
scala.collection.mutable.HashMap: iterator() ===> scala.collection.mutable.HashMap$$anonfun$iterator$1: <init>(Lscala/collection/mutable/HashMap;)
scala.collection.mutable.HashMap: iterator() ===> scala.collection.mutable.HashTable: entriesIterator()
scala.collection.mutable.HashMap: keysIterator() ===> scala.collection.mutable.HashMap$$anon$3: <init>(Lscala/collection/mutable/HashMap;)
scala.collection.mutable.HashMap: nnSizeMapAdd(I) ===> scala.collection.mutable.HashTable$class: nnSizeMapAdd(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.HashMap: nnSizeMapReset(I) ===> scala.collection.mutable.HashTable$class: nnSizeMapReset(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.DefaultEntry: value()
scala.collection.mutable.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.DefaultEntry: value_$eq(Ljava/lang/Object;)
scala.collection.mutable.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findOrAddEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.mutable.HashMap: result() ===> scala.collection.mutable.MapLike: result()
scala.collection.mutable.HashMap: seq() ===> scala.collection.mutable.Map: seq()
scala.collection.mutable.HashMap: size() ===> scala.collection.mutable.HashTable: tableSize()
scala.collection.mutable.HashMap: sizeMapBucketBitSize() ===> scala.collection.mutable.HashTable$HashUtils$class: sizeMapBucketBitSize(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.HashMap: sizeMapBucketSize() ===> scala.collection.mutable.HashTable$HashUtils$class: sizeMapBucketSize(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.HashMap: sizeMapInit(I) ===> scala.collection.mutable.HashTable$class: sizeMapInit(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.HashMap: sizeMapInitAndRebuild() ===> scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashMap: tableSizeSeed() ===> scala.collection.mutable.HashTable$class: tableSizeSeed(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashMap: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.mutable.HashMap: totalSizeMapBuckets() ===> scala.collection.mutable.HashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashMap: update(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashMap: valuesIterator() ===> scala.collection.mutable.HashMap$$anon$4: <init>(Lscala/collection/mutable/HashMap;)
scala.collection.mutable.HashSet$: <clinit>() ===> scala.collection.mutable.HashSet$: <init>()
scala.collection.mutable.HashSet$: <init>() ===> scala.collection.generic.MutableSetFactory: <init>()
scala.collection.mutable.HashSet$: empty() ===> scala.collection.mutable.HashSet$: empty()
scala.collection.mutable.HashSet$: empty() ===> scala.collection.mutable.HashSet: <init>()
scala.collection.mutable.HashSet: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: addEntry(Ljava/lang/Object;)
scala.collection.mutable.HashSet: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.HashSet: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.HashSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.mutable.SetLike: $plus$plus(Lscala/collection/GenTraversableOnce;)
scala.collection.mutable.HashSet: $plus(Ljava/lang/Object;) ===> scala.collection.mutable.SetLike: $plus(Ljava/lang/Object;)
scala.collection.mutable.HashSet: <init>() ===> scala.collection.mutable.HashSet: <init>(Lscala/collection/mutable/FlatHashTable$Contents;)
scala.collection.mutable.HashSet: <init>(Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.mutable.HashSet: <init>(Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.AbstractSet: <init>()
scala.collection.mutable.HashSet: <init>(Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable$class: $init$(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.HashSet: <init>(Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable$HashUtils$class: $init$(Lscala/collection/mutable/FlatHashTable$HashUtils;)
scala.collection.mutable.HashSet: <init>(Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable: initWithContents(Lscala/collection/mutable/FlatHashTable$Contents;)
scala.collection.mutable.HashSet: addEntry(Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable$class: addEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;)
scala.collection.mutable.HashSet: alwaysInitSizeMap() ===> scala.collection.mutable.FlatHashTable$class: alwaysInitSizeMap(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.HashSet: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.mutable.HashSet: calcSizeMapSize(I) ===> scala.collection.mutable.FlatHashTable$class: calcSizeMapSize(Lscala/collection/mutable/FlatHashTable;I)
scala.collection.mutable.HashSet: capacity(I) ===> scala.collection.mutable.FlatHashTable$class: capacity(Lscala/collection/mutable/FlatHashTable;I)
scala.collection.mutable.HashSet: clone() ===> scala.collection.generic.Growable: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.HashSet: clone() ===> scala.collection.mutable.HashSet: <init>()
scala.collection.mutable.HashSet: clone() ===> scala.collection.mutable.HashSet: clone()
scala.collection.mutable.HashSet: contains(Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable: containsEntry(Ljava/lang/Object;)
scala.collection.mutable.HashSet: containsEntry(Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable$class: containsEntry(Lscala/collection/mutable/FlatHashTable;Ljava/lang/Object;)
scala.collection.mutable.HashSet: elemHashCode(Ljava/lang/Object;) ===> scala.collection.mutable.FlatHashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/FlatHashTable$HashUtils;Ljava/lang/Object;)
scala.collection.mutable.HashSet: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> scala.collection.mutable.FlatHashTable: table()
scala.collection.mutable.HashSet: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashSet: improve(II) ===> scala.collection.mutable.FlatHashTable$HashUtils$class: improve(Lscala/collection/mutable/FlatHashTable$HashUtils;II)
scala.collection.mutable.HashSet: index(I) ===> scala.collection.mutable.FlatHashTable$class: index(Lscala/collection/mutable/FlatHashTable;I)
scala.collection.mutable.HashSet: initialSize() ===> scala.collection.mutable.FlatHashTable$class: initialSize(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.HashSet: initWithContents(Lscala/collection/mutable/FlatHashTable$Contents;) ===> scala.collection.mutable.FlatHashTable$class: initWithContents(Lscala/collection/mutable/FlatHashTable;Lscala/collection/mutable/FlatHashTable$Contents;)
scala.collection.mutable.HashSet: iterator() ===> scala.collection.mutable.FlatHashTable$class: iterator(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.HashSet: nnSizeMapAdd(I) ===> scala.collection.mutable.FlatHashTable$class: nnSizeMapAdd(Lscala/collection/mutable/FlatHashTable;I)
scala.collection.mutable.HashSet: nnSizeMapReset(I) ===> scala.collection.mutable.FlatHashTable$class: nnSizeMapReset(Lscala/collection/mutable/FlatHashTable;I)
scala.collection.mutable.HashSet: result() ===> scala.collection.mutable.SetLike: result()
scala.collection.mutable.HashSet: seq() ===> scala.collection.mutable.Set: seq()
scala.collection.mutable.HashSet: size() ===> scala.collection.mutable.FlatHashTable: tableSize()
scala.collection.mutable.HashSet: sizeMapBucketBitSize() ===> scala.collection.mutable.FlatHashTable$HashUtils$class: sizeMapBucketBitSize(Lscala/collection/mutable/FlatHashTable$HashUtils;)
scala.collection.mutable.HashSet: sizeMapBucketSize() ===> scala.collection.mutable.FlatHashTable$HashUtils$class: sizeMapBucketSize(Lscala/collection/mutable/FlatHashTable$HashUtils;)
scala.collection.mutable.HashSet: sizeMapInit(I) ===> scala.collection.mutable.FlatHashTable$class: sizeMapInit(Lscala/collection/mutable/FlatHashTable;I)
scala.collection.mutable.HashSet: sizeMapInitAndRebuild() ===> scala.collection.mutable.FlatHashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.HashSet: tableSizeSeed() ===> scala.collection.mutable.FlatHashTable$class: tableSizeSeed(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.HashSet: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.mutable.HashSet: totalSizeMapBuckets() ===> scala.collection.mutable.FlatHashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/FlatHashTable;)
scala.collection.mutable.HashSet: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.mutable.HashTable$$anon$1: <init>(Lscala/collection/mutable/HashTable;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.HashTable$$anon$1: <init>(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$$anon$1: idx()
scala.collection.mutable.HashTable$$anon$1: <init>(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$$anon$1: iterTable()
scala.collection.mutable.HashTable$$anon$1: <init>(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$lastPopulatedIndex(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashTable$$anon$1: <init>(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$$anon$1: hasNext() ===> scala.collection.mutable.HashTable$$anon$1: es()
scala.collection.mutable.HashTable$$anon$1: next() ===> scala.collection.mutable.HashEntry: next()
scala.collection.mutable.HashTable$$anon$1: next() ===> scala.collection.mutable.HashTable$$anon$1: es()
scala.collection.mutable.HashTable$$anon$1: next() ===> scala.collection.mutable.HashTable$$anon$1: es_$eq(Lscala/collection/mutable/HashEntry;)
scala.collection.mutable.HashTable$$anon$1: next() ===> scala.collection.mutable.HashTable$$anon$1: idx()
scala.collection.mutable.HashTable$$anon$1: next() ===> scala.collection.mutable.HashTable$$anon$1: idx_$eq(I)
scala.collection.mutable.HashTable$$anon$1: next() ===> scala.collection.mutable.HashTable$$anon$1: iterTable()
scala.collection.mutable.HashTable$$anon$1: next() ===> scala.collection.mutable.HashTable$$anon$1: next()
scala.collection.mutable.HashTable$: <clinit>() ===> scala.collection.mutable.HashTable$: <init>()
scala.collection.mutable.HashTable$: <init>() ===> java.lang.Object: <init>()
scala.collection.mutable.HashTable$: capacity(I) ===> scala.collection.mutable.HashTable$: powerOfTwo(I)
scala.collection.mutable.HashTable$: newThreshold(II) ===> scala.collection.mutable.HashTable$: loadFactorDenum()
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$: defaultLoadFactor()
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$class: initialCapacity(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$class: initialThreshold(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: _loadFactor()
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: _loadFactor_$eq(I)
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: seedvalue_$eq(I)
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: sizemap_$eq([I)
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: table_$eq([Lscala/collection/mutable/HashEntry;)
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: tableSize_$eq(I)
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: tableSizeSeed()
scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: threshold_$eq(I)
scala.collection.mutable.HashTable$class: calcSizeMapSize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: sizeMapBucketBitSize()
scala.collection.mutable.HashTable$class: elemEquals(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: elemEquals(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.mutable.HashTable$class: elemEquals(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: elemEquals(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: entriesIterator(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$$anon$1: <init>(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashTable$class: findEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$findEntry0(Lscala/collection/mutable/HashTable;Ljava/lang/Object;I)
scala.collection.mutable.HashTable$class: findEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: elemHashCode(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: findEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: index(I)
scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I)
scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$findEntry0(Lscala/collection/mutable/HashTable;Ljava/lang/Object;I)
scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: elemHashCode(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: index(I)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> scala.collection.mutable.HashEntry: next()
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$lastPopulatedIndex(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: foreachEntry(Lscala/collection/mutable/HashTable;Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: index(Lscala/collection/mutable/HashTable;I) ===> java.lang.Integer: bitCount(I)
scala.collection.mutable.HashTable$class: index(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: improve(II)
scala.collection.mutable.HashTable$class: index(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: seedvalue()
scala.collection.mutable.HashTable$class: index(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: initialCapacity(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable$: capacity(I)
scala.collection.mutable.HashTable$class: initialCapacity(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: initialSize()
scala.collection.mutable.HashTable$class: initialThreshold(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable$: newThreshold(II)
scala.collection.mutable.HashTable$class: initialThreshold(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable$class: initialCapacity(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: _loadFactor_$eq(I)
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: alwaysInitSizeMap()
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: seedvalue_$eq(I)
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: sizemap()
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: sizemap_$eq([I)
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: sizeMapInitAndRebuild()
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: table_$eq([Lscala/collection/mutable/HashEntry;)
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: tableSize_$eq(I)
scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable: threshold_$eq(I)
scala.collection.mutable.HashTable$class: nnSizeMapAdd(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: sizemap()
scala.collection.mutable.HashTable$class: nnSizeMapAdd(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: sizeMapBucketBitSize()
scala.collection.mutable.HashTable$class: nnSizeMapReset(Lscala/collection/mutable/HashTable;I) ===> java.util.Arrays: fill([II)
scala.collection.mutable.HashTable$class: nnSizeMapReset(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: calcSizeMapSize(I)
scala.collection.mutable.HashTable$class: nnSizeMapReset(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: sizemap()
scala.collection.mutable.HashTable$class: nnSizeMapReset(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: sizemap_$eq([I)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashEntry: key()
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashEntry: next()
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashEntry: next_$eq(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable$: newThreshold(II)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: _loadFactor()
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: elemHashCode(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: index(I)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: nnSizeMapAdd(I)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: nnSizeMapReset(I)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: table_$eq([Lscala/collection/mutable/HashEntry;)
scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: threshold_$eq(I)
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I) ===> scala.collection.mutable.HashEntry: next_$eq(Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I) ===> scala.collection.mutable.HashTable$class: resize(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I) ===> scala.collection.mutable.HashTable: nnSizeMapAdd(I)
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I) ===> scala.collection.mutable.HashTable: tableSize()
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I) ===> scala.collection.mutable.HashTable: tableSize_$eq(I)
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$addEntry0(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashEntry;I) ===> scala.collection.mutable.HashTable: threshold()
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$findEntry0(Lscala/collection/mutable/HashTable;Ljava/lang/Object;I) ===> scala.collection.mutable.HashEntry: key()
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$findEntry0(Lscala/collection/mutable/HashTable;Ljava/lang/Object;I) ===> scala.collection.mutable.HashEntry: next()
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$findEntry0(Lscala/collection/mutable/HashTable;Ljava/lang/Object;I) ===> scala.collection.mutable.HashTable: elemEquals(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$findEntry0(Lscala/collection/mutable/HashTable;Ljava/lang/Object;I) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: scala$collection$mutable$HashTable$$lastPopulatedIndex(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: sizeMapInit(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: calcSizeMapSize(I)
scala.collection.mutable.HashTable$class: sizeMapInit(Lscala/collection/mutable/HashTable;I) ===> scala.collection.mutable.HashTable: sizemap_$eq([I)
scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashEntry: next()
scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: sizemap()
scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: sizeMapBucketSize()
scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: sizeMapInit(I)
scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: totalSizeMapBuckets()
scala.collection.mutable.HashTable$class: tableSizeSeed(Lscala/collection/mutable/HashTable;) ===> java.lang.Integer: bitCount(I)
scala.collection.mutable.HashTable$class: tableSizeSeed(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: sizeMapBucketSize()
scala.collection.mutable.HashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/HashTable;) ===> scala.collection.mutable.HashTable: table()
scala.collection.mutable.HashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/HashTable$HashUtils;Ljava/lang/Object;) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.collection.mutable.HashTable$HashUtils$class: improve(Lscala/collection/mutable/HashTable$HashUtils;II) ===> scala.util.hashing.package$: byteswap32(I)
scala.collection.mutable.HashTable$HashUtils$class: sizeMapBucketSize(Lscala/collection/mutable/HashTable$HashUtils;) ===> scala.collection.mutable.HashTable$HashUtils: sizeMapBucketBitSize()
scala.collection.mutable.IndexedSeq$: <clinit>() ===> scala.collection.mutable.IndexedSeq$: <init>()
scala.collection.mutable.IndexedSeq$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.mutable.IndexedSeq$: newBuilder() ===> scala.collection.mutable.ArrayBuffer: <init>()
scala.collection.mutable.Iterable$: <clinit>() ===> scala.collection.mutable.Iterable$: <init>()
scala.collection.mutable.Iterable$: <init>() ===> scala.collection.generic.GenTraversableFactory: <init>()
scala.collection.mutable.Iterable$: newBuilder() ===> scala.collection.mutable.ArrayBuffer: <init>()
scala.collection.mutable.LazyBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
scala.collection.mutable.LazyBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.LazyBuilder: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.LazyBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.LazyBuilder: parts()
scala.collection.mutable.LazyBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.LazyBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.collection.mutable.LazyBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.LazyBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.LazyBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.LazyBuilder: parts()
scala.collection.mutable.LazyBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.LazyBuilder: <init>() ===> java.lang.Object: <init>()
scala.collection.mutable.LazyBuilder: <init>() ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.LazyBuilder: <init>() ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.LazyBuilder: <init>() ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.mutable.LazyBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.LazyBuilder: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.LazyBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.LazyBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.LazyBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.LinkedEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: <init>()
scala.collection.mutable.LinkedEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashEntry$class: $init$(Lscala/collection/mutable/HashEntry;)
scala.collection.mutable.LinkedHashMap$$anon$1: <init>(Lscala/collection/mutable/LinkedHashMap;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.LinkedHashMap$$anon$1: <init>(Lscala/collection/mutable/LinkedHashMap;) ===> scala.collection.mutable.LinkedHashMap: firstEntry()
scala.collection.mutable.LinkedHashMap$$anon$1: hasNext() ===> scala.collection.mutable.LinkedHashMap$$anon$1: cur()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.Iterator$: empty()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.mutable.LinkedEntry: key()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.mutable.LinkedEntry: later()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.mutable.LinkedEntry: value()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.mutable.LinkedHashMap$$anon$1: cur()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.mutable.LinkedHashMap$$anon$1: cur_$eq(Lscala/collection/mutable/LinkedEntry;)
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.mutable.LinkedHashMap$$anon$1: hasNext()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.collection.mutable.LinkedHashMap$$anon$1: next()
scala.collection.mutable.LinkedHashMap$$anon$1: next() ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap$$anon$2: <init>(Lscala/collection/mutable/LinkedHashMap;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.LinkedHashMap$$anon$2: <init>(Lscala/collection/mutable/LinkedHashMap;) ===> scala.collection.mutable.LinkedHashMap: firstEntry()
scala.collection.mutable.LinkedHashMap$$anon$2: hasNext() ===> scala.collection.mutable.LinkedHashMap$$anon$2: cur()
scala.collection.mutable.LinkedHashMap$$anon$2: next() ===> scala.collection.Iterator$: empty()
scala.collection.mutable.LinkedHashMap$$anon$2: next() ===> scala.collection.Iterator: next()
scala.collection.mutable.LinkedHashMap$$anon$2: next() ===> scala.collection.mutable.LinkedEntry: key()
scala.collection.mutable.LinkedHashMap$$anon$2: next() ===> scala.collection.mutable.LinkedEntry: later()
scala.collection.mutable.LinkedHashMap$$anon$2: next() ===> scala.collection.mutable.LinkedHashMap$$anon$2: cur()
scala.collection.mutable.LinkedHashMap$$anon$2: next() ===> scala.collection.mutable.LinkedHashMap$$anon$2: cur_$eq(Lscala/collection/mutable/LinkedEntry;)
scala.collection.mutable.LinkedHashMap$$anon$2: next() ===> scala.collection.mutable.LinkedHashMap$$anon$2: hasNext()
scala.collection.mutable.LinkedHashMap$$anon$3: <init>(Lscala/collection/mutable/LinkedHashMap;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.LinkedHashMap$$anon$3: <init>(Lscala/collection/mutable/LinkedHashMap;) ===> scala.collection.mutable.LinkedHashMap: firstEntry()
scala.collection.mutable.LinkedHashMap$$anon$3: hasNext() ===> scala.collection.mutable.LinkedHashMap$$anon$3: cur()
scala.collection.mutable.LinkedHashMap$$anon$3: next() ===> scala.collection.Iterator$: empty()
scala.collection.mutable.LinkedHashMap$$anon$3: next() ===> scala.collection.Iterator: next()
scala.collection.mutable.LinkedHashMap$$anon$3: next() ===> scala.collection.mutable.LinkedEntry: later()
scala.collection.mutable.LinkedHashMap$$anon$3: next() ===> scala.collection.mutable.LinkedEntry: value()
scala.collection.mutable.LinkedHashMap$$anon$3: next() ===> scala.collection.mutable.LinkedHashMap$$anon$3: cur()
scala.collection.mutable.LinkedHashMap$$anon$3: next() ===> scala.collection.mutable.LinkedHashMap$$anon$3: cur_$eq(Lscala/collection/mutable/LinkedEntry;)
scala.collection.mutable.LinkedHashMap$$anon$3: next() ===> scala.collection.mutable.LinkedHashMap$$anon$3: hasNext()
scala.collection.mutable.LinkedHashMap$: <clinit>() ===> scala.collection.mutable.LinkedHashMap$: <init>()
scala.collection.mutable.LinkedHashMap$: <init>() ===> scala.collection.generic.MutableMapFactory: <init>()
scala.collection.mutable.LinkedHashMap$: empty() ===> scala.collection.mutable.LinkedHashMap$: empty()
scala.collection.mutable.LinkedHashMap$: empty() ===> scala.collection.mutable.LinkedHashMap: <init>()
scala.collection.mutable.LinkedHashMap$DefaultKeySet: <init>(Lscala/collection/mutable/LinkedHashMap;) ===> scala.collection.MapLike$DefaultKeySet: <init>(Lscala/collection/MapLike;)
scala.collection.mutable.LinkedHashMap$DefaultKeySet: empty() ===> scala.collection.mutable.LinkedHashMap$DefaultKeySet: empty()
scala.collection.mutable.LinkedHashMap$DefaultKeySet: empty() ===> scala.collection.mutable.LinkedHashSet$: empty()
scala.collection.mutable.LinkedHashMap: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashMap: $plus$eq(Lscala/Tuple2;)
scala.collection.mutable.LinkedHashMap: $plus$eq(Lscala/Tuple2;) ===> scala.collection.mutable.LinkedHashMap: $plus$eq(Lscala/Tuple2;)
scala.collection.mutable.LinkedHashMap: $plus$eq(Lscala/Tuple2;) ===> scala.collection.mutable.LinkedHashMap: put(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: $plus$eq(Lscala/Tuple2;) ===> scala.Tuple2: _1()
scala.collection.mutable.LinkedHashMap: $plus$eq(Lscala/Tuple2;) ===> scala.Tuple2: _2()
scala.collection.mutable.LinkedHashMap: $plus(Lscala/Tuple2;) ===> scala.collection.mutable.MapLike: $plus(Lscala/Tuple2;)
scala.collection.mutable.LinkedHashMap: <init>() ===> scala.collection.mutable.AbstractMap: <init>()
scala.collection.mutable.LinkedHashMap: <init>() ===> scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashMap: <init>() ===> scala.collection.mutable.HashTable$HashUtils$class: $init$(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.LinkedHashMap: alwaysInitSizeMap() ===> scala.collection.mutable.HashTable$class: alwaysInitSizeMap(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashMap: calcSizeMapSize(I) ===> scala.collection.mutable.HashTable$class: calcSizeMapSize(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedEntry: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedEntry: earlier_$eq(Lscala/collection/mutable/LinkedEntry;)
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedEntry: later_$eq(Lscala/collection/mutable/LinkedEntry;)
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashMap: firstEntry()
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashMap: firstEntry_$eq(Lscala/collection/mutable/LinkedEntry;)
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashMap: lastEntry()
scala.collection.mutable.LinkedHashMap: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashMap: lastEntry_$eq(Lscala/collection/mutable/LinkedEntry;)
scala.collection.mutable.LinkedHashMap: elemEquals(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: elemEquals(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: elemHashCode(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/HashTable$HashUtils;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: empty() ===> scala.collection.mutable.LinkedHashMap$: empty()
scala.collection.mutable.LinkedHashMap: empty() ===> scala.collection.mutable.LinkedHashMap: empty()
scala.collection.mutable.LinkedHashMap: entriesIterator() ===> scala.collection.mutable.HashTable$class: entriesIterator(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashMap: findEntry(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: findEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: findOrAddEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> scala.collection.mutable.LinkedEntry: key()
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> scala.collection.mutable.LinkedEntry: later()
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> scala.collection.mutable.LinkedEntry: value()
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> scala.collection.mutable.LinkedHashMap: firstEntry()
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreach(Lscala/Function1;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> scala.collection.mutable.LinkedEntry: later()
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> scala.collection.mutable.LinkedHashMap: firstEntry()
scala.collection.mutable.LinkedHashMap: foreachEntry(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: get(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findEntry(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: get(Ljava/lang/Object;) ===> scala.collection.mutable.LinkedEntry: value()
scala.collection.mutable.LinkedHashMap: get(Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: improve(II) ===> scala.collection.mutable.HashTable$HashUtils$class: improve(Lscala/collection/mutable/HashTable$HashUtils;II)
scala.collection.mutable.LinkedHashMap: index(I) ===> scala.collection.mutable.HashTable$class: index(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashMap: initialSize() ===> scala.collection.mutable.HashTable$class: initialSize(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashMap: initWithContents(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;)
scala.collection.mutable.LinkedHashMap: iterator() ===> scala.collection.mutable.LinkedHashMap$$anon$1: <init>(Lscala/collection/mutable/LinkedHashMap;)
scala.collection.mutable.LinkedHashMap: keySet() ===> scala.collection.mutable.LinkedHashMap$DefaultKeySet: <init>(Lscala/collection/mutable/LinkedHashMap;)
scala.collection.mutable.LinkedHashMap: keysIterator() ===> scala.collection.mutable.LinkedHashMap$$anon$2: <init>(Lscala/collection/mutable/LinkedHashMap;)
scala.collection.mutable.LinkedHashMap: nnSizeMapAdd(I) ===> scala.collection.mutable.HashTable$class: nnSizeMapAdd(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashMap: nnSizeMapReset(I) ===> scala.collection.mutable.HashTable$class: nnSizeMapReset(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findOrAddEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedEntry: value()
scala.collection.mutable.LinkedHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedEntry: value_$eq(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: put(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashMap: result() ===> scala.collection.mutable.MapLike: result()
scala.collection.mutable.LinkedHashMap: seq() ===> scala.collection.mutable.Map: seq()
scala.collection.mutable.LinkedHashMap: size() ===> scala.collection.mutable.HashTable: tableSize()
scala.collection.mutable.LinkedHashMap: sizeMapBucketBitSize() ===> scala.collection.mutable.HashTable$HashUtils$class: sizeMapBucketBitSize(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.LinkedHashMap: sizeMapBucketSize() ===> scala.collection.mutable.HashTable$HashUtils$class: sizeMapBucketSize(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.LinkedHashMap: sizeMapInit(I) ===> scala.collection.mutable.HashTable$class: sizeMapInit(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashMap: sizeMapInitAndRebuild() ===> scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashMap: tableSizeSeed() ===> scala.collection.mutable.HashTable$class: tableSizeSeed(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashMap: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.mutable.LinkedHashMap: totalSizeMapBuckets() ===> scala.collection.mutable.HashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashMap: valuesIterator() ===> scala.collection.mutable.LinkedHashMap$$anon$3: <init>(Lscala/collection/mutable/LinkedHashMap;)
scala.collection.mutable.LinkedHashSet$$anon$1: <init>(Lscala/collection/mutable/LinkedHashSet;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.LinkedHashSet$$anon$1: <init>(Lscala/collection/mutable/LinkedHashSet;) ===> scala.collection.mutable.LinkedHashSet: firstEntry()
scala.collection.mutable.LinkedHashSet$$anon$1: hasNext() ===> scala.collection.mutable.LinkedHashSet$$anon$1: cur()
scala.collection.mutable.LinkedHashSet$$anon$1: next() ===> scala.collection.Iterator$: empty()
scala.collection.mutable.LinkedHashSet$$anon$1: next() ===> scala.collection.Iterator: next()
scala.collection.mutable.LinkedHashSet$$anon$1: next() ===> scala.collection.mutable.LinkedHashSet$$anon$1: cur()
scala.collection.mutable.LinkedHashSet$$anon$1: next() ===> scala.collection.mutable.LinkedHashSet$$anon$1: cur_$eq(Lscala/collection/mutable/LinkedHashSet$Entry;)
scala.collection.mutable.LinkedHashSet$$anon$1: next() ===> scala.collection.mutable.LinkedHashSet$$anon$1: hasNext()
scala.collection.mutable.LinkedHashSet$$anon$1: next() ===> scala.collection.mutable.LinkedHashSet$Entry: key()
scala.collection.mutable.LinkedHashSet$$anon$1: next() ===> scala.collection.mutable.LinkedHashSet$Entry: later()
scala.collection.mutable.LinkedHashSet$: <clinit>() ===> scala.collection.mutable.LinkedHashSet$: <init>()
scala.collection.mutable.LinkedHashSet$: <init>() ===> scala.collection.generic.MutableSetFactory: <init>()
scala.collection.mutable.LinkedHashSet$: canBuildFrom() ===> scala.collection.generic.GenSetFactory: setCanBuildFrom()
scala.collection.mutable.LinkedHashSet$: empty() ===> scala.collection.mutable.LinkedHashSet$: empty()
scala.collection.mutable.LinkedHashSet$: empty() ===> scala.collection.mutable.LinkedHashSet: <init>()
scala.collection.mutable.LinkedHashSet$Entry: <init>(Ljava/lang/Object;) ===> java.lang.Object: <init>()
scala.collection.mutable.LinkedHashSet$Entry: <init>(Ljava/lang/Object;) ===> scala.collection.mutable.HashEntry$class: $init$(Lscala/collection/mutable/HashEntry;)
scala.collection.mutable.LinkedHashSet: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet: add(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: $plus$plus(Lscala/collection/GenTraversableOnce;) ===> scala.collection.mutable.SetLike: $plus$plus(Lscala/collection/GenTraversableOnce;)
scala.collection.mutable.LinkedHashSet: $plus(Ljava/lang/Object;) ===> scala.collection.mutable.SetLike: $plus(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: <init>() ===> scala.collection.mutable.AbstractSet: <init>()
scala.collection.mutable.LinkedHashSet: <init>() ===> scala.collection.mutable.HashTable$class: $init$(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashSet: <init>() ===> scala.collection.mutable.HashTable$HashUtils$class: $init$(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.LinkedHashSet: add(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findOrAddEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: alwaysInitSizeMap() ===> scala.collection.mutable.HashTable$class: alwaysInitSizeMap(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashSet: apply(Ljava/lang/Object;) ===> scala.collection.GenSetLike: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.mutable.LinkedHashSet: calcSizeMapSize(I) ===> scala.collection.mutable.HashTable$class: calcSizeMapSize(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashSet: contains(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable: findEntry(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet$Entry: <init>(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet$Entry: earlier_$eq(Lscala/collection/mutable/LinkedHashSet$Entry;)
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet$Entry: later_$eq(Lscala/collection/mutable/LinkedHashSet$Entry;)
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet: firstEntry()
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet: firstEntry_$eq(Lscala/collection/mutable/LinkedHashSet$Entry;)
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet: lastEntry()
scala.collection.mutable.LinkedHashSet: createNewEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.LinkedHashSet: lastEntry_$eq(Lscala/collection/mutable/LinkedHashSet$Entry;)
scala.collection.mutable.LinkedHashSet: elemEquals(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: elemEquals(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: elemHashCode(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$HashUtils$class: elemHashCode(Lscala/collection/mutable/HashTable$HashUtils;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: empty() ===> scala.collection.generic.GenericSetTemplate: empty()
scala.collection.mutable.LinkedHashSet: entriesIterator() ===> scala.collection.mutable.HashTable$class: entriesIterator(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashSet: findEntry(Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: findEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: findOrAddEntry(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.HashTable$class: findOrAddEntry(Lscala/collection/mutable/HashTable;Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> scala.collection.mutable.LinkedHashSet$Entry: key()
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> scala.collection.mutable.LinkedHashSet$Entry: later()
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> scala.collection.mutable.LinkedHashSet: firstEntry()
scala.collection.mutable.LinkedHashSet: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> scala.collection.mutable.LinkedHashSet$Entry: later()
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> scala.collection.mutable.LinkedHashSet: firstEntry()
scala.collection.mutable.LinkedHashSet: foreachEntry(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.LinkedHashSet: improve(II) ===> scala.collection.mutable.HashTable$HashUtils$class: improve(Lscala/collection/mutable/HashTable$HashUtils;II)
scala.collection.mutable.LinkedHashSet: index(I) ===> scala.collection.mutable.HashTable$class: index(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashSet: initialSize() ===> scala.collection.mutable.HashTable$class: initialSize(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashSet: initWithContents(Lscala/collection/mutable/HashTable$Contents;) ===> scala.collection.mutable.HashTable$class: initWithContents(Lscala/collection/mutable/HashTable;Lscala/collection/mutable/HashTable$Contents;)
scala.collection.mutable.LinkedHashSet: iterator() ===> scala.collection.mutable.LinkedHashSet$$anon$1: <init>(Lscala/collection/mutable/LinkedHashSet;)
scala.collection.mutable.LinkedHashSet: nnSizeMapAdd(I) ===> scala.collection.mutable.HashTable$class: nnSizeMapAdd(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashSet: nnSizeMapReset(I) ===> scala.collection.mutable.HashTable$class: nnSizeMapReset(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashSet: result() ===> scala.collection.mutable.SetLike: result()
scala.collection.mutable.LinkedHashSet: seq() ===> scala.collection.mutable.Set: seq()
scala.collection.mutable.LinkedHashSet: size() ===> scala.collection.mutable.HashTable: tableSize()
scala.collection.mutable.LinkedHashSet: sizeMapBucketBitSize() ===> scala.collection.mutable.HashTable$HashUtils$class: sizeMapBucketBitSize(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.LinkedHashSet: sizeMapBucketSize() ===> scala.collection.mutable.HashTable$HashUtils$class: sizeMapBucketSize(Lscala/collection/mutable/HashTable$HashUtils;)
scala.collection.mutable.LinkedHashSet: sizeMapInit(I) ===> scala.collection.mutable.HashTable$class: sizeMapInit(Lscala/collection/mutable/HashTable;I)
scala.collection.mutable.LinkedHashSet: sizeMapInitAndRebuild() ===> scala.collection.mutable.HashTable$class: sizeMapInitAndRebuild(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashSet: tableSizeSeed() ===> scala.collection.mutable.HashTable$class: tableSizeSeed(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashSet: thisCollection() ===> scala.collection.IterableLike: thisCollection()
scala.collection.mutable.LinkedHashSet: totalSizeMapBuckets() ===> scala.collection.mutable.HashTable$class: totalSizeMapBuckets(Lscala/collection/mutable/HashTable;)
scala.collection.mutable.LinkedHashSet: union(Lscala/collection/GenSet;) ===> scala.collection.SetLike: union(Lscala/collection/GenSet;)
scala.collection.mutable.ListBuffer$$anon$1: <init>(Lscala/collection/mutable/ListBuffer;) ===> java.lang.NullPointerException: <init>()
scala.collection.mutable.ListBuffer$$anon$1: <init>(Lscala/collection/mutable/ListBuffer;) ===> scala.collection.AbstractIterator: <init>()
scala.collection.mutable.ListBuffer$$anon$1: hasNext() ===> scala.collection.mutable.ListBuffer$$anon$1: delivered()
scala.collection.mutable.ListBuffer$$anon$1: hasNext() ===> scala.collection.mutable.ListBuffer: length()
scala.collection.mutable.ListBuffer$$anon$1: next() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.IterableLike: head()
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.mutable.ListBuffer$$anon$1: cursor()
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.mutable.ListBuffer$$anon$1: cursor_$eq(Lscala/collection/immutable/List;)
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.mutable.ListBuffer$$anon$1: delivered()
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.mutable.ListBuffer$$anon$1: delivered_$eq(I)
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.mutable.ListBuffer$$anon$1: hasNext()
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start()
scala.collection.mutable.ListBuffer$$anon$1: next() ===> scala.collection.TraversableLike: tail()
scala.collection.mutable.ListBuffer$: <clinit>() ===> scala.collection.mutable.ListBuffer$: <init>()
scala.collection.mutable.ListBuffer$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.mutable.ListBuffer$: newBuilder() ===> scala.collection.mutable.GrowingBuilder: <init>(Lscala/collection/generic/Growable;)
scala.collection.mutable.ListBuffer$: newBuilder() ===> scala.collection.mutable.ListBuffer: <init>()
scala.collection.mutable.ListBuffer: $div$colon(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.generic.TraversableForwarder$class: $div$colon(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.$colon$colon: <init>(Ljava/lang/Object;Lscala/collection/immutable/List;)
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.immutable.$colon$colon: tl_$eq(Lscala/collection/immutable/List;)
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: copy()
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: exported()
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: last0()
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: last0_$eq(Lscala/collection/immutable/$colon$colon;)
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: len()
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: len_$eq(I)
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start()
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start_$eq(Lscala/collection/immutable/List;)
scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.mutable.ListBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.ListBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.IterableLike: take(I)
scala.collection.mutable.ListBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ListBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.ListBuffer: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ListBuffer: size()
scala.collection.mutable.ListBuffer: <init>() ===> scala.collection.generic.IterableForwarder$class: $init$(Lscala/collection/generic/IterableForwarder;)
scala.collection.mutable.ListBuffer: <init>() ===> scala.collection.generic.SeqForwarder$class: $init$(Lscala/collection/generic/SeqForwarder;)
scala.collection.mutable.ListBuffer: <init>() ===> scala.collection.generic.TraversableForwarder$class: $init$(Lscala/collection/generic/TraversableForwarder;)
scala.collection.mutable.ListBuffer: <init>() ===> scala.collection.mutable.AbstractBuffer: <init>()
scala.collection.mutable.ListBuffer: <init>() ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.ListBuffer: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.generic.TraversableForwarder$class: addString(Lscala/collection/generic/TraversableForwarder;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.mutable.ListBuffer: apply(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.mutable.ListBuffer: apply(I) ===> java.lang.Object: toString()
scala.collection.mutable.ListBuffer: apply(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.mutable.ListBuffer: apply(I) ===> org.clapper.argot.Parameter: toString()
scala.collection.mutable.ListBuffer: apply(I) ===> scala.collection.generic.SeqForwarder$class: apply(Lscala/collection/generic/SeqForwarder;I)
scala.collection.mutable.ListBuffer: apply(I) ===> scala.collection.mutable.ListBuffer: len()
scala.collection.mutable.ListBuffer: apply(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.mutable.ListBuffer: apply(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: apply(I)
scala.collection.mutable.ListBuffer: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.ListBuffer: clear() ===> scala.collection.mutable.ListBuffer: exported_$eq(Z)
scala.collection.mutable.ListBuffer: clear() ===> scala.collection.mutable.ListBuffer: len_$eq(I)
scala.collection.mutable.ListBuffer: clear() ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start_$eq(Lscala/collection/immutable/List;)
scala.collection.mutable.ListBuffer: copy() ===> scala.collection.immutable.$colon$colon: tail()
scala.collection.mutable.ListBuffer: copy() ===> scala.collection.IterableLike: head()
scala.collection.mutable.ListBuffer: copy() ===> scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.ListBuffer: copy() ===> scala.collection.mutable.ListBuffer: clear()
scala.collection.mutable.ListBuffer: copy() ===> scala.collection.mutable.ListBuffer: last0()
scala.collection.mutable.ListBuffer: copy() ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start()
scala.collection.mutable.ListBuffer: copy() ===> scala.collection.TraversableLike: tail()
scala.collection.mutable.ListBuffer: copyToArray(Ljava/lang/Object;I) ===> scala.collection.generic.TraversableForwarder$class: copyToArray(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;I)
scala.collection.mutable.ListBuffer: copyToArray(Ljava/lang/Object;II) ===> scala.collection.generic.TraversableForwarder$class: copyToArray(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;II)
scala.collection.mutable.ListBuffer: equals(Ljava/lang/Object;) ===> scala.collection.GenSeqLike$class: equals(Lscala/collection/GenSeqLike;Ljava/lang/Object;)
scala.collection.mutable.ListBuffer: equals(Ljava/lang/Object;) ===> scala.collection.GenSeqLike: equals(Ljava/lang/Object;)
scala.collection.mutable.ListBuffer: equals(Ljava/lang/Object;) ===> scala.collection.mutable.ListBuffer: readOnly()
scala.collection.mutable.ListBuffer: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.generic.TraversableForwarder$class: foldLeft(Lscala/collection/generic/TraversableForwarder;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.ListBuffer: foreach(Lscala/Function1;) ===> scala.collection.generic.TraversableForwarder$class: foreach(Lscala/collection/generic/TraversableForwarder;Lscala/Function1;)
scala.collection.mutable.ListBuffer: head() ===> scala.collection.generic.TraversableForwarder$class: head(Lscala/collection/generic/TraversableForwarder;)
scala.collection.mutable.ListBuffer: isEmpty() ===> scala.collection.generic.TraversableForwarder$class: isEmpty(Lscala/collection/generic/TraversableForwarder;)
scala.collection.mutable.ListBuffer: iterator() ===> scala.collection.mutable.ListBuffer$$anon$1: <init>(Lscala/collection/mutable/ListBuffer;)
scala.collection.mutable.ListBuffer: length() ===> scala.collection.mutable.ListBuffer: len()
scala.collection.mutable.ListBuffer: lengthCompare(I) ===> scala.collection.generic.SeqForwarder$class: lengthCompare(Lscala/collection/generic/SeqForwarder;I)
scala.collection.mutable.ListBuffer: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.ListBuffer: max(Lscala/math/Ordering;) ===> scala.collection.generic.TraversableForwarder$class: max(Lscala/collection/generic/TraversableForwarder;Lscala/math/Ordering;)
scala.collection.mutable.ListBuffer: mkString(Ljava/lang/String;) ===> scala.collection.generic.TraversableForwarder$class: mkString(Lscala/collection/generic/TraversableForwarder;Ljava/lang/String;)
scala.collection.mutable.ListBuffer: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.generic.TraversableForwarder$class: mkString(Lscala/collection/generic/TraversableForwarder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.mutable.ListBuffer: nonEmpty() ===> scala.collection.generic.TraversableForwarder$class: nonEmpty(Lscala/collection/generic/TraversableForwarder;)
scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;) ===> scala.collection.immutable.$colon$colon: tl_$eq(Lscala/collection/immutable/List;)
scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: copy()
scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: exported()
scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: last0()
scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start()
scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;) ===> scala.collection.mutable.ListBuffer: toList()
scala.collection.mutable.ListBuffer: prependToList(Lscala/collection/immutable/List;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.mutable.ListBuffer: readOnly() ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start()
scala.collection.mutable.ListBuffer: reduceLeft(Lscala/Function2;) ===> scala.collection.generic.TraversableForwarder$class: reduceLeft(Lscala/collection/generic/TraversableForwarder;Lscala/Function2;)
scala.collection.mutable.ListBuffer: result() ===> scala.collection.mutable.ListBuffer: result()
scala.collection.mutable.ListBuffer: result() ===> scala.collection.mutable.ListBuffer: toList()
scala.collection.mutable.ListBuffer: reverseIterator() ===> scala.collection.generic.SeqForwarder$class: reverseIterator(Lscala/collection/generic/SeqForwarder;)
scala.collection.mutable.ListBuffer: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.generic.IterableForwarder$class: sameElements(Lscala/collection/generic/IterableForwarder;Lscala/collection/GenIterable;)
scala.collection.mutable.ListBuffer: seq() ===> scala.collection.mutable.Seq: seq()
scala.collection.mutable.ListBuffer: size() ===> scala.collection.mutable.ListBuffer: length()
scala.collection.mutable.ListBuffer: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.ListBuffer: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.ListBuffer: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.ListBuffer: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.ListBuffer: thisCollection() ===> scala.collection.SeqLike: thisCollection()
scala.collection.mutable.ListBuffer: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.generic.TraversableForwarder$class: toArray(Lscala/collection/generic/TraversableForwarder;Lscala/reflect/ClassTag;)
scala.collection.mutable.ListBuffer: toBuffer() ===> scala.collection.generic.TraversableForwarder$class: toBuffer(Lscala/collection/generic/TraversableForwarder;)
scala.collection.mutable.ListBuffer: toList() ===> scala.collection.mutable.ListBuffer: exported_$eq(Z)
scala.collection.mutable.ListBuffer: toList() ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start()
scala.collection.mutable.ListBuffer: toList() ===> scala.collection.SeqLike: isEmpty()
scala.collection.mutable.ListBuffer: toSet() ===> scala.collection.generic.TraversableForwarder$class: toSet(Lscala/collection/generic/TraversableForwarder;)
scala.collection.mutable.ListBuffer: toStream() ===> scala.collection.generic.TraversableForwarder$class: toStream(Lscala/collection/generic/TraversableForwarder;)
scala.collection.mutable.ListBuffer: underlying() ===> scala.collection.mutable.ListBuffer: scala$collection$mutable$ListBuffer$$start()
scala.collection.mutable.ListBuffer: underlying() ===> scala.collection.mutable.ListBuffer: underlying()
scala.collection.mutable.Map$: <clinit>() ===> scala.collection.mutable.Map$: <init>()
scala.collection.mutable.Map$: <init>() ===> scala.collection.generic.MutableMapFactory: <init>()
scala.collection.mutable.Map$: empty() ===> scala.collection.mutable.HashMap: <init>()
scala.collection.mutable.Map$: empty() ===> scala.collection.mutable.Map$: empty()
scala.collection.mutable.MapBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.MapBuilder: $plus$eq(Lscala/Tuple2;)
scala.collection.mutable.MapBuilder: $plus$eq(Lscala/Tuple2;) ===> scala.collection.GenMap: $plus(Lscala/Tuple2;)
scala.collection.mutable.MapBuilder: $plus$eq(Lscala/Tuple2;) ===> scala.collection.mutable.MapBuilder: elems()
scala.collection.mutable.MapBuilder: $plus$eq(Lscala/Tuple2;) ===> scala.collection.mutable.MapBuilder: elems_$eq(Lscala/collection/GenMap;)
scala.collection.mutable.MapBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.MapBuilder: <init>(Lscala/collection/GenMap;) ===> java.lang.Object: <init>()
scala.collection.mutable.MapBuilder: <init>(Lscala/collection/GenMap;) ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.MapBuilder: <init>(Lscala/collection/GenMap;) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.MapBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.MapBuilder: result() ===> scala.collection.mutable.MapBuilder: elems()
scala.collection.mutable.MapBuilder: result() ===> scala.collection.mutable.MapBuilder: result()
scala.collection.mutable.MapBuilder: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.MapBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.MapBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.MapBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.MapLike$class: $plus(Lscala/collection/mutable/MapLike;Lscala/Tuple2;) ===> scala.collection.mutable.Map: $plus$eq(Lscala/Tuple2;)
scala.collection.mutable.MapLike$class: $plus(Lscala/collection/mutable/MapLike;Lscala/Tuple2;) ===> scala.collection.mutable.MapLike: clone()
scala.collection.mutable.MapLike$class: clone(Lscala/collection/mutable/MapLike;) ===> scala.collection.generic.Growable: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.MapLike$class: clone(Lscala/collection/mutable/MapLike;) ===> scala.collection.mutable.MapLike: empty()
scala.collection.mutable.MapLike$class: clone(Lscala/collection/mutable/MapLike;) ===> scala.collection.mutable.MapLike: repr()
scala.collection.mutable.MapLike$class: newBuilder(Lscala/collection/mutable/MapLike;) ===> scala.collection.mutable.MapLike: empty()
scala.collection.mutable.MapLike$class: result(Lscala/collection/mutable/MapLike;) ===> scala.collection.mutable.MapLike: repr()
scala.collection.mutable.MapLike$class: update(Lscala/collection/mutable/MapLike;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.mutable.MapLike: $plus$eq(Lscala/Tuple2;)
scala.collection.mutable.MapLike$class: update(Lscala/collection/mutable/MapLike;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: $init$(Lscala/collection/mutable/ResizableArray;) ===> scala.collection.mutable.ResizableArray: array_$eq([Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: $init$(Lscala/collection/mutable/ResizableArray;) ===> scala.collection.mutable.ResizableArray: initialSize()
scala.collection.mutable.ResizableArray$class: $init$(Lscala/collection/mutable/ResizableArray;) ===> scala.collection.mutable.ResizableArray: size0_$eq(I)
scala.collection.mutable.ResizableArray$class: $init$(Lscala/collection/mutable/ResizableArray;) ===> scala.math.package$: max(II)
scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I) ===> java.lang.Object: toString()
scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I) ===> org.clapper.argot.CommandLineOption: toString()
scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I) ===> org.clapper.argot.Parameter: toString()
scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: size0()
scala.collection.mutable.ResizableArray$class: apply(Lscala/collection/mutable/ResizableArray;I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.mutable.ResizableArray$class: copyToArray(Lscala/collection/mutable/ResizableArray;Ljava/lang/Object;II) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.ResizableArray$class: copyToArray(Lscala/collection/mutable/ResizableArray;Ljava/lang/Object;II) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ResizableArray$class: copyToArray(Lscala/collection/mutable/ResizableArray;Ljava/lang/Object;II) ===> scala.collection.mutable.ResizableArray: length()
scala.collection.mutable.ResizableArray$class: copyToArray(Lscala/collection/mutable/ResizableArray;Ljava/lang/Object;II) ===> scala.runtime.RichInt$: min$extension(II)
scala.collection.mutable.ResizableArray$class: copyToArray(Lscala/collection/mutable/ResizableArray;Ljava/lang/Object;II) ===> scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: ensureSize(Lscala/collection/mutable/ResizableArray;I) ===> java.lang.System: arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.ResizableArray$class: ensureSize(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ResizableArray$class: ensureSize(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: array_$eq([Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: ensureSize(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: size0()
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> scala.collection.mutable.ResizableArray: size()
scala.collection.mutable.ResizableArray$class: foreach(Lscala/collection/mutable/ResizableArray;Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.mutable.ResizableArray$class: length(Lscala/collection/mutable/ResizableArray;) ===> scala.collection.mutable.ResizableArray: size0()
scala.collection.mutable.ResizableArray$class: reduceToSize(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: array()
scala.collection.mutable.ResizableArray$class: reduceToSize(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: size0()
scala.collection.mutable.ResizableArray$class: reduceToSize(Lscala/collection/mutable/ResizableArray;I) ===> scala.collection.mutable.ResizableArray: size0_$eq(I)
scala.collection.mutable.ResizableArray$class: reduceToSize(Lscala/collection/mutable/ResizableArray;I) ===> scala.Predef$: require(Z)
scala.collection.mutable.SetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.SetBuilder: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.SetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.SetBuilder: elems()
scala.collection.mutable.SetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.SetBuilder: elems_$eq(Lscala/collection/Set;)
scala.collection.mutable.SetBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.Set: $plus(Ljava/lang/Object;)
scala.collection.mutable.SetBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.SetBuilder: <init>(Lscala/collection/Set;) ===> java.lang.Object: <init>()
scala.collection.mutable.SetBuilder: <init>(Lscala/collection/Set;) ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.SetBuilder: <init>(Lscala/collection/Set;) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.SetBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.SetBuilder: result() ===> scala.collection.mutable.SetBuilder: elems()
scala.collection.mutable.SetBuilder: result() ===> scala.collection.mutable.SetBuilder: result()
scala.collection.mutable.SetBuilder: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.SetBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.SetBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.SetBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.SetLike$class: $plus$plus(Lscala/collection/mutable/SetLike;Lscala/collection/GenTraversableOnce;) ===> scala.collection.GenTraversableOnce: seq()
scala.collection.mutable.SetLike$class: $plus$plus(Lscala/collection/mutable/SetLike;Lscala/collection/GenTraversableOnce;) ===> scala.collection.mutable.Set: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.SetLike$class: $plus$plus(Lscala/collection/mutable/SetLike;Lscala/collection/GenTraversableOnce;) ===> scala.collection.mutable.SetLike: clone()
scala.collection.mutable.SetLike$class: $plus(Lscala/collection/mutable/SetLike;Ljava/lang/Object;) ===> scala.collection.mutable.Set: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.SetLike$class: $plus(Lscala/collection/mutable/SetLike;Ljava/lang/Object;) ===> scala.collection.mutable.SetLike: clone()
scala.collection.mutable.SetLike$class: clone(Lscala/collection/mutable/SetLike;) ===> scala.collection.generic.Growable: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.mutable.SetLike$class: clone(Lscala/collection/mutable/SetLike;) ===> scala.collection.mutable.Set: seq()
scala.collection.mutable.SetLike$class: clone(Lscala/collection/mutable/SetLike;) ===> scala.collection.mutable.SetLike: empty()
scala.collection.mutable.SetLike$class: clone(Lscala/collection/mutable/SetLike;) ===> scala.collection.mutable.SetLike: repr()
scala.collection.mutable.SetLike$class: newBuilder(Lscala/collection/mutable/SetLike;) ===> scala.collection.mutable.SetLike: empty()
scala.collection.mutable.SetLike$class: result(Lscala/collection/mutable/SetLike;) ===> scala.collection.mutable.SetLike: repr()
scala.collection.mutable.StringBuilder$: <clinit>() ===> scala.collection.mutable.StringBuilder$: <init>()
scala.collection.mutable.StringBuilder$: <init>() ===> java.lang.Object: <init>()
scala.collection.mutable.StringBuilder$: newBuilder() ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.mutable.StringBuilder: $plus$eq(C) ===> scala.collection.mutable.StringBuilder: append(C)
scala.collection.mutable.StringBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: $plus$eq(C)
scala.collection.mutable.StringBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToChar(Ljava/lang/Object;)
scala.collection.mutable.StringBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.StringBuilder: $times(I) ===> scala.collection.immutable.StringLike$class: $times(Lscala/collection/immutable/StringLike;I)
scala.collection.mutable.StringBuilder: <init>() ===> scala.collection.mutable.StringBuilder: <init>(ILjava/lang/String;)
scala.collection.mutable.StringBuilder: <init>(ILjava/lang/String;) ===> java.lang.String: length()
scala.collection.mutable.StringBuilder: <init>(ILjava/lang/String;) ===> java.lang.StringBuilder: <init>(I)
scala.collection.mutable.StringBuilder: <init>(ILjava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
scala.collection.mutable.StringBuilder: <init>(ILjava/lang/String;) ===> scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.immutable.StringLike$class: $init$(Lscala/collection/immutable/StringLike;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.IndexedSeq$class: $init$(Lscala/collection/IndexedSeq;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.IndexedSeqOptimized$class: $init$(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.mutable.AbstractSeq: <init>()
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.mutable.IndexedSeq$class: $init$(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.collection.mutable.IndexedSeqLike$class: $init$(Lscala/collection/mutable/IndexedSeqLike;)
scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;) ===> scala.math.Ordered$class: $init$(Lscala/math/Ordered;)
scala.collection.mutable.StringBuilder: append(C) ===> java.lang.StringBuilder: append(C)
scala.collection.mutable.StringBuilder: append(C) ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: append(I) ===> java.lang.StringBuilder: append(I)
scala.collection.mutable.StringBuilder: append(I) ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;) ===> java.lang.String: valueOf(Ljava/lang/Object;)
scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: append(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
scala.collection.mutable.StringBuilder: append(Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: apply(I) ===> java.lang.StringBuilder: charAt(I)
scala.collection.mutable.StringBuilder: apply(I) ===> scala.collection.mutable.StringBuilder: apply(I)
scala.collection.mutable.StringBuilder: apply(I) ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: apply(I) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.collection.mutable.StringBuilder: apply(Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: apply(I)
scala.collection.mutable.StringBuilder: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.collection.mutable.StringBuilder: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.StringBuilder: charAt(I) ===> java.lang.StringBuilder: charAt(I)
scala.collection.mutable.StringBuilder: charAt(I) ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: companion() ===> scala.collection.mutable.IndexedSeq$class: companion(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.StringBuilder: compare(Ljava/lang/Object;) ===> scala.collection.immutable.StringLike: compare(Ljava/lang/String;)
scala.collection.mutable.StringBuilder: compare(Ljava/lang/String;) ===> scala.collection.immutable.StringLike$class: compare(Lscala/collection/immutable/StringLike;Ljava/lang/String;)
scala.collection.mutable.StringBuilder: compareTo(Ljava/lang/Object;) ===> scala.math.Ordered$class: compareTo(Lscala/math/Ordered;Ljava/lang/Object;)
scala.collection.mutable.StringBuilder: copyToArray(Ljava/lang/Object;II) ===> scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II)
scala.collection.mutable.StringBuilder: drop(I) ===> scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.StringBuilder: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.StringBuilder: foreach(Lscala/Function1;) ===> scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;)
scala.collection.mutable.StringBuilder: format(Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike$class: format(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;)
scala.collection.mutable.StringBuilder: hashCode() ===> scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.StringBuilder: head() ===> scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.StringBuilder: isEmpty() ===> scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.StringBuilder: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.StringBuilder: length() ===> java.lang.StringBuilder: length()
scala.collection.mutable.StringBuilder: length() ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: lengthCompare(I) ===> scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.StringBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.StringBuilder: newBuilder() ===> scala.collection.mutable.GrowingBuilder: <init>(Lscala/collection/generic/Growable;)
scala.collection.mutable.StringBuilder: newBuilder() ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.mutable.StringBuilder: newBuilder() ===> scala.collection.mutable.StringBuilder: newBuilder()
scala.collection.mutable.StringBuilder: r() ===> scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;)
scala.collection.mutable.StringBuilder: r(Lscala/collection/Seq;) ===> scala.collection.immutable.StringLike$class: r(Lscala/collection/immutable/StringLike;Lscala/collection/Seq;)
scala.collection.mutable.StringBuilder: reduceLeft(Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;)
scala.collection.mutable.StringBuilder: result() ===> scala.collection.mutable.StringBuilder: result()
scala.collection.mutable.StringBuilder: result() ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.mutable.StringBuilder: reverse() ===> java.lang.StringBuilder: <init>(Ljava/lang/CharSequence;)
scala.collection.mutable.StringBuilder: reverse() ===> java.lang.StringBuilder: reverse()
scala.collection.mutable.StringBuilder: reverse() ===> scala.collection.mutable.StringBuilder: <init>(Ljava/lang/StringBuilder;)
scala.collection.mutable.StringBuilder: reverse() ===> scala.collection.mutable.StringBuilder: reverse()
scala.collection.mutable.StringBuilder: reverse() ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: reverseIterator() ===> scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.StringBuilder: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.mutable.StringBuilder: scala$collection$IndexedSeqOptimized$$super$head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.mutable.StringBuilder: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.mutable.StringBuilder: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.mutable.StringBuilder: scala$collection$IndexedSeqOptimized$$super$tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.mutable.StringBuilder: seq() ===> scala.collection.mutable.IndexedSeq$class: seq(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.StringBuilder: seq() ===> scala.collection.mutable.IndexedSeq: seq()
scala.collection.mutable.StringBuilder: sizeHint(I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;I)
scala.collection.mutable.StringBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.StringBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.StringBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.mutable.StringBuilder: slice(II) ===> scala.collection.immutable.StringLike$class: slice(Lscala/collection/immutable/StringLike;II)
scala.collection.mutable.StringBuilder: subSequence(II) ===> scala.collection.mutable.StringBuilder: substring(II)
scala.collection.mutable.StringBuilder: substring(II) ===> java.lang.StringBuilder: substring(II)
scala.collection.mutable.StringBuilder: substring(II) ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.StringBuilder: tail() ===> scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.StringBuilder: take(I) ===> scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.StringBuilder: thisCollection() ===> scala.collection.mutable.StringBuilder: thisCollection()
scala.collection.mutable.StringBuilder: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.immutable.StringLike$class: toArray(Lscala/collection/immutable/StringLike;Lscala/reflect/ClassTag;)
scala.collection.mutable.StringBuilder: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.StringBuilder: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.IndexedSeqLike$class: toCollection(Lscala/collection/mutable/IndexedSeqLike;Ljava/lang/Object;)
scala.collection.mutable.StringBuilder: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: toCollection(Lscala/collection/mutable/StringBuilder;)
scala.collection.mutable.StringBuilder: toString() ===> java.lang.StringBuilder: toString()
scala.collection.mutable.StringBuilder: toString() ===> scala.collection.mutable.StringBuilder: underlying()
scala.collection.mutable.WrappedArray$: <clinit>() ===> scala.collection.mutable.WrappedArray$: <init>()
scala.collection.mutable.WrappedArray$: <init>() ===> java.lang.Object: <init>()
scala.collection.mutable.WrappedArray$: <init>() ===> scala.collection.mutable.WrappedArray$ofRef: <init>([Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$: empty() ===> scala.collection.mutable.WrappedArray$: EmptyWrappedArray()
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofBoolean: <init>([Z)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofByte: <init>([B)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofChar: <init>([C)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofDouble: <init>([D)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofFloat: <init>([F)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofInt: <init>([I)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofLong: <init>([J)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofRef: <init>([Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofShort: <init>([S)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofUnit: <init>([Lscala/runtime/BoxedUnit;)
scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofBoolean: <init>([Z) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofBoolean: apply$mcZI$sp(I) ===> scala.collection.mutable.WrappedArray$ofBoolean: array()
scala.collection.mutable.WrappedArray$ofBoolean: apply(I) ===> scala.collection.mutable.WrappedArray$ofBoolean: apply$mcZI$sp(I)
scala.collection.mutable.WrappedArray$ofBoolean: apply(I) ===> scala.collection.mutable.WrappedArray$ofBoolean: apply(I)
scala.collection.mutable.WrappedArray$ofBoolean: apply(I) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.mutable.WrappedArray$ofBoolean: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofBoolean: apply(I)
scala.collection.mutable.WrappedArray$ofBoolean: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.collection.mutable.WrappedArray$ofBoolean: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofBoolean: array() ===> scala.collection.mutable.WrappedArray$ofBoolean: array()
scala.collection.mutable.WrappedArray$ofBoolean: elemTag() ===> scala.reflect.ClassTag$: Boolean()
scala.collection.mutable.WrappedArray$ofBoolean: length() ===> scala.collection.mutable.WrappedArray$ofBoolean: array()
scala.collection.mutable.WrappedArray$ofBoolean: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofBoolean: update(IZ)
scala.collection.mutable.WrappedArray$ofBoolean: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofBoolean: update(IZ) ===> scala.collection.mutable.WrappedArray$ofBoolean: array()
scala.collection.mutable.WrappedArray$ofByte: <init>([B) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofByte: apply(I) ===> scala.collection.mutable.WrappedArray$ofByte: apply(I)
scala.collection.mutable.WrappedArray$ofByte: apply(I) ===> scala.collection.mutable.WrappedArray$ofByte: array()
scala.collection.mutable.WrappedArray$ofByte: apply(I) ===> scala.runtime.BoxesRunTime: boxToByte(B)
scala.collection.mutable.WrappedArray$ofByte: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofByte: apply(I)
scala.collection.mutable.WrappedArray$ofByte: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToByte(B)
scala.collection.mutable.WrappedArray$ofByte: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofByte: array() ===> scala.collection.mutable.WrappedArray$ofByte: array()
scala.collection.mutable.WrappedArray$ofByte: elemTag() ===> scala.reflect.ClassTag$: Byte()
scala.collection.mutable.WrappedArray$ofByte: length() ===> scala.collection.mutable.WrappedArray$ofByte: array()
scala.collection.mutable.WrappedArray$ofByte: update(IB) ===> scala.collection.mutable.WrappedArray$ofByte: array()
scala.collection.mutable.WrappedArray$ofByte: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofByte: update(IB)
scala.collection.mutable.WrappedArray$ofByte: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToByte(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofChar: <init>([C) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofChar: apply(I) ===> scala.collection.mutable.WrappedArray$ofChar: apply(I)
scala.collection.mutable.WrappedArray$ofChar: apply(I) ===> scala.collection.mutable.WrappedArray$ofChar: array()
scala.collection.mutable.WrappedArray$ofChar: apply(I) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.collection.mutable.WrappedArray$ofChar: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofChar: apply(I)
scala.collection.mutable.WrappedArray$ofChar: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.collection.mutable.WrappedArray$ofChar: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofChar: array() ===> scala.collection.mutable.WrappedArray$ofChar: array()
scala.collection.mutable.WrappedArray$ofChar: elemTag() ===> scala.reflect.ClassTag$: Char()
scala.collection.mutable.WrappedArray$ofChar: length() ===> scala.collection.mutable.WrappedArray$ofChar: array()
scala.collection.mutable.WrappedArray$ofChar: update(IC) ===> scala.collection.mutable.WrappedArray$ofChar: array()
scala.collection.mutable.WrappedArray$ofChar: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofChar: update(IC)
scala.collection.mutable.WrappedArray$ofChar: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToChar(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofDouble: <init>([D) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofDouble: apply$mcDI$sp(I) ===> scala.collection.mutable.WrappedArray$ofDouble: array()
scala.collection.mutable.WrappedArray$ofDouble: apply(I) ===> scala.collection.mutable.WrappedArray$ofDouble: apply$mcDI$sp(I)
scala.collection.mutable.WrappedArray$ofDouble: apply(I) ===> scala.collection.mutable.WrappedArray$ofDouble: apply(I)
scala.collection.mutable.WrappedArray$ofDouble: apply(I) ===> scala.runtime.BoxesRunTime: boxToDouble(D)
scala.collection.mutable.WrappedArray$ofDouble: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofDouble: apply(I)
scala.collection.mutable.WrappedArray$ofDouble: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToDouble(D)
scala.collection.mutable.WrappedArray$ofDouble: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofDouble: array() ===> scala.collection.mutable.WrappedArray$ofDouble: array()
scala.collection.mutable.WrappedArray$ofDouble: elemTag() ===> scala.reflect.ClassTag$: Double()
scala.collection.mutable.WrappedArray$ofDouble: length() ===> scala.collection.mutable.WrappedArray$ofDouble: array()
scala.collection.mutable.WrappedArray$ofDouble: update(ID) ===> scala.collection.mutable.WrappedArray$ofDouble: array()
scala.collection.mutable.WrappedArray$ofDouble: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofDouble: update(ID)
scala.collection.mutable.WrappedArray$ofDouble: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToDouble(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofFloat: <init>([F) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofFloat: apply$mcFI$sp(I) ===> scala.collection.mutable.WrappedArray$ofFloat: array()
scala.collection.mutable.WrappedArray$ofFloat: apply(I) ===> scala.collection.mutable.WrappedArray$ofFloat: apply$mcFI$sp(I)
scala.collection.mutable.WrappedArray$ofFloat: apply(I) ===> scala.collection.mutable.WrappedArray$ofFloat: apply(I)
scala.collection.mutable.WrappedArray$ofFloat: apply(I) ===> scala.runtime.BoxesRunTime: boxToFloat(F)
scala.collection.mutable.WrappedArray$ofFloat: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofFloat: apply(I)
scala.collection.mutable.WrappedArray$ofFloat: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToFloat(F)
scala.collection.mutable.WrappedArray$ofFloat: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofFloat: array() ===> scala.collection.mutable.WrappedArray$ofFloat: array()
scala.collection.mutable.WrappedArray$ofFloat: elemTag() ===> scala.reflect.ClassTag$: Float()
scala.collection.mutable.WrappedArray$ofFloat: length() ===> scala.collection.mutable.WrappedArray$ofFloat: array()
scala.collection.mutable.WrappedArray$ofFloat: update(IF) ===> scala.collection.mutable.WrappedArray$ofFloat: array()
scala.collection.mutable.WrappedArray$ofFloat: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofFloat: update(IF)
scala.collection.mutable.WrappedArray$ofFloat: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToFloat(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofInt: <init>([I) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofInt: apply$mcII$sp(I) ===> scala.collection.mutable.WrappedArray$ofInt: array()
scala.collection.mutable.WrappedArray$ofInt: apply(I) ===> scala.collection.mutable.WrappedArray$ofInt: apply$mcII$sp(I)
scala.collection.mutable.WrappedArray$ofInt: apply(I) ===> scala.collection.mutable.WrappedArray$ofInt: apply(I)
scala.collection.mutable.WrappedArray$ofInt: apply(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.mutable.WrappedArray$ofInt: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofInt: apply(I)
scala.collection.mutable.WrappedArray$ofInt: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.mutable.WrappedArray$ofInt: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofInt: array() ===> scala.collection.mutable.WrappedArray$ofInt: array()
scala.collection.mutable.WrappedArray$ofInt: elemTag() ===> scala.reflect.ClassTag$: Int()
scala.collection.mutable.WrappedArray$ofInt: length() ===> scala.collection.mutable.WrappedArray$ofInt: array()
scala.collection.mutable.WrappedArray$ofInt: update(II) ===> scala.collection.mutable.WrappedArray$ofInt: array()
scala.collection.mutable.WrappedArray$ofInt: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofInt: update(II)
scala.collection.mutable.WrappedArray$ofInt: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofLong: <init>([J) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofLong: apply$mcJI$sp(I) ===> scala.collection.mutable.WrappedArray$ofLong: array()
scala.collection.mutable.WrappedArray$ofLong: apply(I) ===> scala.collection.mutable.WrappedArray$ofLong: apply$mcJI$sp(I)
scala.collection.mutable.WrappedArray$ofLong: apply(I) ===> scala.collection.mutable.WrappedArray$ofLong: apply(I)
scala.collection.mutable.WrappedArray$ofLong: apply(I) ===> scala.runtime.BoxesRunTime: boxToLong(J)
scala.collection.mutable.WrappedArray$ofLong: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofLong: apply(I)
scala.collection.mutable.WrappedArray$ofLong: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToLong(J)
scala.collection.mutable.WrappedArray$ofLong: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofLong: array() ===> scala.collection.mutable.WrappedArray$ofLong: array()
scala.collection.mutable.WrappedArray$ofLong: elemTag() ===> scala.reflect.ClassTag$: Long()
scala.collection.mutable.WrappedArray$ofLong: length() ===> scala.collection.mutable.WrappedArray$ofLong: array()
scala.collection.mutable.WrappedArray$ofLong: update(IJ) ===> scala.collection.mutable.WrappedArray$ofLong: array()
scala.collection.mutable.WrappedArray$ofLong: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofLong: update(IJ)
scala.collection.mutable.WrappedArray$ofLong: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToLong(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofRef: <init>([Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofRef: apply(I) ===> scala.collection.mutable.WrappedArray$ofRef: array()
scala.collection.mutable.WrappedArray$ofRef: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofRef: apply(I)
scala.collection.mutable.WrappedArray$ofRef: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofRef: array() ===> scala.collection.mutable.WrappedArray$ofRef: array()
scala.collection.mutable.WrappedArray$ofRef: elemTag$lzycompute() ===> java.lang.Object: getClass()
scala.collection.mutable.WrappedArray$ofRef: elemTag$lzycompute() ===> scala.collection.mutable.WrappedArray$ofRef: array()
scala.collection.mutable.WrappedArray$ofRef: elemTag$lzycompute() ===> scala.reflect.ClassTag$: apply(Ljava/lang/Class;)
scala.collection.mutable.WrappedArray$ofRef: elemTag$lzycompute() ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofRef: elemTag() ===> scala.collection.mutable.WrappedArray$ofRef: elemTag$lzycompute()
scala.collection.mutable.WrappedArray$ofRef: length() ===> scala.collection.mutable.WrappedArray$ofRef: array()
scala.collection.mutable.WrappedArray$ofRef: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofRef: array()
scala.collection.mutable.WrappedArray$ofShort: <init>([S) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofShort: apply(I) ===> scala.collection.mutable.WrappedArray$ofShort: apply(I)
scala.collection.mutable.WrappedArray$ofShort: apply(I) ===> scala.collection.mutable.WrappedArray$ofShort: array()
scala.collection.mutable.WrappedArray$ofShort: apply(I) ===> scala.runtime.BoxesRunTime: boxToShort(S)
scala.collection.mutable.WrappedArray$ofShort: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofShort: apply(I)
scala.collection.mutable.WrappedArray$ofShort: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToShort(S)
scala.collection.mutable.WrappedArray$ofShort: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofShort: array() ===> scala.collection.mutable.WrappedArray$ofShort: array()
scala.collection.mutable.WrappedArray$ofShort: elemTag() ===> scala.reflect.ClassTag$: Short()
scala.collection.mutable.WrappedArray$ofShort: length() ===> scala.collection.mutable.WrappedArray$ofShort: array()
scala.collection.mutable.WrappedArray$ofShort: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofShort: update(IS)
scala.collection.mutable.WrappedArray$ofShort: update(ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToShort(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofShort: update(IS) ===> scala.collection.mutable.WrappedArray$ofShort: array()
scala.collection.mutable.WrappedArray$ofUnit: <init>([Lscala/runtime/BoxedUnit;) ===> scala.collection.mutable.WrappedArray: <init>()
scala.collection.mutable.WrappedArray$ofUnit: apply$mcVI$sp(I) ===> scala.collection.mutable.WrappedArray$ofUnit: array()
scala.collection.mutable.WrappedArray$ofUnit: apply(I) ===> scala.collection.mutable.WrappedArray$ofUnit: apply$mcVI$sp(I)
scala.collection.mutable.WrappedArray$ofUnit: apply(I) ===> scala.collection.mutable.WrappedArray$ofUnit: apply(I)
scala.collection.mutable.WrappedArray$ofUnit: apply(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofUnit: apply(I)
scala.collection.mutable.WrappedArray$ofUnit: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray$ofUnit: array() ===> scala.collection.mutable.WrappedArray$ofUnit: array()
scala.collection.mutable.WrappedArray$ofUnit: elemTag() ===> scala.reflect.ClassTag$: Unit()
scala.collection.mutable.WrappedArray$ofUnit: length() ===> scala.collection.mutable.WrappedArray$ofUnit: array()
scala.collection.mutable.WrappedArray$ofUnit: update(ILjava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofUnit: update(ILscala/runtime/BoxedUnit;)
scala.collection.mutable.WrappedArray$ofUnit: update(ILscala/runtime/BoxedUnit;) ===> scala.collection.mutable.WrappedArray$ofUnit: array()
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.CustomParallelizable$class: $init$(Lscala/collection/CustomParallelizable;)
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.IndexedSeq$class: $init$(Lscala/collection/IndexedSeq;)
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.IndexedSeqLike$class: $init$(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.IndexedSeqOptimized$class: $init$(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.mutable.AbstractSeq: <init>()
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.mutable.ArrayLike$class: $init$(Lscala/collection/mutable/ArrayLike;)
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.mutable.IndexedSeq$class: $init$(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.WrappedArray: <init>() ===> scala.collection.mutable.IndexedSeqLike$class: $init$(Lscala/collection/mutable/IndexedSeqLike;)
scala.collection.mutable.WrappedArray: companion() ===> scala.collection.mutable.IndexedSeq$class: companion(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.WrappedArray: copyToArray(Ljava/lang/Object;II) ===> scala.collection.IndexedSeqOptimized$class: copyToArray(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;II)
scala.collection.mutable.WrappedArray: drop(I) ===> scala.collection.IndexedSeqOptimized$class: drop(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.WrappedArray: elementClass() ===> java.lang.Object: getClass()
scala.collection.mutable.WrappedArray: elementClass() ===> scala.collection.TraversableLike: repr()
scala.collection.mutable.WrappedArray: elementClass() ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray: foldLeft(Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: foldLeft(Lscala/collection/IndexedSeqOptimized;Ljava/lang/Object;Lscala/Function2;)
scala.collection.mutable.WrappedArray: foreach(Lscala/Function1;) ===> scala.collection.IndexedSeqOptimized$class: foreach(Lscala/collection/IndexedSeqOptimized;Lscala/Function1;)
scala.collection.mutable.WrappedArray: hashCode() ===> scala.collection.IndexedSeqLike$class: hashCode(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.WrappedArray: head() ===> scala.collection.IndexedSeqOptimized$class: head(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.WrappedArray: isEmpty() ===> scala.collection.IndexedSeqOptimized$class: isEmpty(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.WrappedArray: iterator() ===> scala.collection.IndexedSeqLike$class: iterator(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.WrappedArray: lengthCompare(I) ===> scala.collection.IndexedSeqOptimized$class: lengthCompare(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.WrappedArray: newBuilder() ===> scala.collection.mutable.WrappedArray: elemTag()
scala.collection.mutable.WrappedArray: newBuilder() ===> scala.collection.mutable.WrappedArrayBuilder: <init>(Lscala/reflect/ClassTag;)
scala.collection.mutable.WrappedArray: reduceLeft(Lscala/Function2;) ===> scala.collection.IndexedSeqOptimized$class: reduceLeft(Lscala/collection/IndexedSeqOptimized;Lscala/Function2;)
scala.collection.mutable.WrappedArray: reverse() ===> scala.collection.IndexedSeqOptimized$class: reverse(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.WrappedArray: reverseIterator() ===> scala.collection.IndexedSeqOptimized$class: reverseIterator(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.WrappedArray: sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IndexedSeqOptimized$class: sameElements(Lscala/collection/IndexedSeqOptimized;Lscala/collection/GenIterable;)
scala.collection.mutable.WrappedArray: scala$collection$IndexedSeqOptimized$$super$head() ===> scala.collection.IterableLike$class: head(Lscala/collection/IterableLike;)
scala.collection.mutable.WrappedArray: scala$collection$IndexedSeqOptimized$$super$reduceLeft(Lscala/Function2;) ===> scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;)
scala.collection.mutable.WrappedArray: scala$collection$IndexedSeqOptimized$$super$sameElements(Lscala/collection/GenIterable;) ===> scala.collection.IterableLike$class: sameElements(Lscala/collection/IterableLike;Lscala/collection/GenIterable;)
scala.collection.mutable.WrappedArray: scala$collection$IndexedSeqOptimized$$super$tail() ===> scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;)
scala.collection.mutable.WrappedArray: seq() ===> scala.collection.mutable.IndexedSeq$class: seq(Lscala/collection/mutable/IndexedSeq;)
scala.collection.mutable.WrappedArray: seq() ===> scala.collection.mutable.IndexedSeq: seq()
scala.collection.mutable.WrappedArray: slice(II) ===> scala.collection.IndexedSeqOptimized$class: slice(Lscala/collection/IndexedSeqOptimized;II)
scala.collection.mutable.WrappedArray: tail() ===> scala.collection.IndexedSeqOptimized$class: tail(Lscala/collection/IndexedSeqOptimized;)
scala.collection.mutable.WrappedArray: take(I) ===> scala.collection.IndexedSeqOptimized$class: take(Lscala/collection/IndexedSeqOptimized;I)
scala.collection.mutable.WrappedArray: thisCollection() ===> scala.collection.mutable.WrappedArray: thisCollection()
scala.collection.mutable.WrappedArray: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.mutable.WrappedArray: array()
scala.collection.mutable.WrappedArray: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.mutable.WrappedArray: elementClass()
scala.collection.mutable.WrappedArray: toArray(Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;)
scala.collection.mutable.WrappedArray: toArray(Lscala/reflect/ClassTag;) ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.collection.mutable.WrappedArray: toBuffer() ===> scala.collection.IndexedSeqLike$class: toBuffer(Lscala/collection/IndexedSeqLike;)
scala.collection.mutable.WrappedArray: toCollection(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray: toCollection(Lscala/collection/mutable/WrappedArray;)
scala.collection.mutable.WrappedArrayBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray: update(ILjava/lang/Object;)
scala.collection.mutable.WrappedArrayBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArrayBuilder: $plus$eq(Ljava/lang/Object;)
scala.collection.mutable.WrappedArrayBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArrayBuilder: elems()
scala.collection.mutable.WrappedArrayBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArrayBuilder: ensureSize(I)
scala.collection.mutable.WrappedArrayBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArrayBuilder: size()
scala.collection.mutable.WrappedArrayBuilder: $plus$eq(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArrayBuilder: size_$eq(I)
scala.collection.mutable.WrappedArrayBuilder: $plus$plus$eq(Lscala/collection/TraversableOnce;) ===> scala.collection.generic.Growable$class: $plus$plus$eq(Lscala/collection/generic/Growable;Lscala/collection/TraversableOnce;)
scala.collection.mutable.WrappedArrayBuilder: <init>(Lscala/reflect/ClassTag;) ===> java.lang.Object: <init>()
scala.collection.mutable.WrappedArrayBuilder: <init>(Lscala/reflect/ClassTag;) ===> scala.collection.generic.Growable$class: $init$(Lscala/collection/generic/Growable;)
scala.collection.mutable.WrappedArrayBuilder: <init>(Lscala/reflect/ClassTag;) ===> scala.collection.mutable.Builder$class: $init$(Lscala/collection/mutable/Builder;)
scala.collection.mutable.WrappedArrayBuilder: ensureSize(I) ===> scala.collection.mutable.WrappedArrayBuilder: capacity()
scala.collection.mutable.WrappedArrayBuilder: ensureSize(I) ===> scala.collection.mutable.WrappedArrayBuilder: resize(I)
scala.collection.mutable.WrappedArrayBuilder: mapResult(Lscala/Function1;) ===> scala.collection.mutable.Builder$class: mapResult(Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.Array$: copy(Ljava/lang/Object;ILjava/lang/Object;II)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofBoolean: <init>([Z)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofByte: <init>([B)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofChar: <init>([C)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofDouble: <init>([D)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofFloat: <init>([F)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofInt: <init>([I)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofLong: <init>([J)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofRef: <init>([Ljava/lang/Object;)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofShort: <init>([S)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray$ofUnit: <init>([Lscala/runtime/BoxedUnit;)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArray: array()
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArrayBuilder: elems()
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.collection.mutable.WrappedArrayBuilder: size()
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.reflect.ClassTag: newArray(I)
scala.collection.mutable.WrappedArrayBuilder: mkArray(I) ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.collection.mutable.WrappedArrayBuilder: resize(I) ===> scala.collection.mutable.WrappedArrayBuilder: capacity_$eq(I)
scala.collection.mutable.WrappedArrayBuilder: resize(I) ===> scala.collection.mutable.WrappedArrayBuilder: elems_$eq(Lscala/collection/mutable/WrappedArray;)
scala.collection.mutable.WrappedArrayBuilder: resize(I) ===> scala.collection.mutable.WrappedArrayBuilder: mkArray(I)
scala.collection.mutable.WrappedArrayBuilder: result() ===> scala.collection.mutable.WrappedArrayBuilder: capacity()
scala.collection.mutable.WrappedArrayBuilder: result() ===> scala.collection.mutable.WrappedArrayBuilder: elems()
scala.collection.mutable.WrappedArrayBuilder: result() ===> scala.collection.mutable.WrappedArrayBuilder: mkArray(I)
scala.collection.mutable.WrappedArrayBuilder: result() ===> scala.collection.mutable.WrappedArrayBuilder: result()
scala.collection.mutable.WrappedArrayBuilder: result() ===> scala.collection.mutable.WrappedArrayBuilder: size()
scala.collection.mutable.WrappedArrayBuilder: sizeHint(I) ===> scala.collection.mutable.WrappedArrayBuilder: capacity()
scala.collection.mutable.WrappedArrayBuilder: sizeHint(I) ===> scala.collection.mutable.WrappedArrayBuilder: resize(I)
scala.collection.mutable.WrappedArrayBuilder: sizeHint(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;)
scala.collection.mutable.WrappedArrayBuilder: sizeHint(Lscala/collection/TraversableLike;I) ===> scala.collection.mutable.Builder$class: sizeHint(Lscala/collection/mutable/Builder;Lscala/collection/TraversableLike;I)
scala.collection.mutable.WrappedArrayBuilder: sizeHintBounded(ILscala/collection/TraversableLike;) ===> scala.collection.mutable.Builder$class: sizeHintBounded(Lscala/collection/mutable/Builder;ILscala/collection/TraversableLike;)
scala.collection.Seq$: <clinit>() ===> scala.collection.Seq$: <init>()
scala.collection.Seq$: <init>() ===> scala.collection.generic.SeqFactory: <init>()
scala.collection.Seq$: canBuildFrom() ===> scala.collection.generic.GenTraversableFactory: ReusableCBF()
scala.collection.Seq$: newBuilder() ===> scala.collection.immutable.Seq$: newBuilder()
scala.collection.SeqLike$$anonfun$reverse$1: <init>(Lscala/collection/SeqLike;Lscala/runtime/ObjectRef;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.SeqLike$$anonfun$reverse$1: apply(Ljava/lang/Object;) ===> scala.collection.immutable.List: $colon$colon(Ljava/lang/Object;)
scala.collection.SeqLike$$anonfun$reverse$1: apply(Ljava/lang/Object;) ===> scala.collection.SeqLike$$anonfun$reverse$1: apply(Ljava/lang/Object;)
scala.collection.SeqLike$$anonfun$sorted$1: <init>(Lscala/collection/SeqLike;Lscala/collection/mutable/ArraySeq;Lscala/runtime/IntRef;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.SeqLike$$anonfun$sorted$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.ArraySeq: update(ILjava/lang/Object;)
scala.collection.SeqLike$$anonfun$sorted$1: apply(Ljava/lang/Object;) ===> scala.collection.SeqLike$$anonfun$sorted$1: apply(Ljava/lang/Object;)
scala.collection.SeqLike$$anonfun$sorted$2: <init>(Lscala/collection/SeqLike;Lscala/collection/mutable/Builder;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.SeqLike$$anonfun$sorted$2: apply(Ljava/lang/Object;) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.SeqLike$$anonfun$sorted$2: apply(Ljava/lang/Object;) ===> scala.collection.SeqLike$$anonfun$sorted$2: apply(Ljava/lang/Object;)
scala.collection.SeqLike$class: isEmpty(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike: lengthCompare(I)
scala.collection.SeqLike$class: lengthCompare(Lscala/collection/SeqLike;I) ===> scala.collection.Iterator: hasNext()
scala.collection.SeqLike$class: lengthCompare(Lscala/collection/SeqLike;I) ===> scala.collection.Iterator: next()
scala.collection.SeqLike$class: lengthCompare(Lscala/collection/SeqLike;I) ===> scala.collection.SeqLike: iterator()
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.IterableLike: head()
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.mutable.Builder: result()
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.mutable.Builder: sizeHint(Lscala/collection/TraversableLike;)
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike$$anonfun$reverse$1: <init>(Lscala/collection/SeqLike;Lscala/runtime/ObjectRef;)
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike: foreach(Lscala/Function1;)
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike: isEmpty()
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike: newBuilder()
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.collection.TraversableLike: tail()
scala.collection.SeqLike$class: reverse(Lscala/collection/SeqLike;) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.SeqLike$class: reverseIterator(Lscala/collection/SeqLike;) ===> scala.collection.Seq: iterator()
scala.collection.SeqLike$class: reverseIterator(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike: reverse()
scala.collection.SeqLike$class: reverseIterator(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike: toCollection(Ljava/lang/Object;)
scala.collection.SeqLike$class: size(Lscala/collection/SeqLike;) ===> scala.collection.SeqLike: length()
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> java.util.Arrays: sort([Ljava/lang/Object;Ljava/util/Comparator;)
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.mutable.ArraySeq: <init>(I)
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.mutable.ArraySeq: array()
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.mutable.ArraySeq: foreach(Lscala/Function1;)
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.mutable.Builder: result()
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.mutable.Builder: sizeHint(I)
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.Seq: foreach(Lscala/Function1;)
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.SeqLike$$anonfun$sorted$1: <init>(Lscala/collection/SeqLike;Lscala/collection/mutable/ArraySeq;Lscala/runtime/IntRef;)
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.SeqLike$$anonfun$sorted$2: <init>(Lscala/collection/SeqLike;Lscala/collection/mutable/Builder;)
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.SeqLike: length()
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.SeqLike: newBuilder()
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.collection.SeqLike: seq()
scala.collection.SeqLike$class: sorted(Lscala/collection/SeqLike;Lscala/math/Ordering;) ===> scala.runtime.IntRef: <init>(I)
scala.collection.SeqLike$class: sortWith(Lscala/collection/SeqLike;Lscala/Function2;) ===> scala.collection.SeqLike: sorted(Lscala/math/Ordering;)
scala.collection.SeqLike$class: sortWith(Lscala/collection/SeqLike;Lscala/Function2;) ===> scala.math.Ordering$$anon$9: <init>(Lscala/Function2;)
scala.collection.SeqLike$class: toString(Lscala/collection/SeqLike;) ===> scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;)
scala.collection.Set$: <clinit>() ===> scala.collection.Set$: <init>()
scala.collection.Set$: <init>() ===> scala.collection.generic.SetFactory: <init>()
scala.collection.Set$: empty() ===> scala.collection.immutable.Set$: empty()
scala.collection.Set$: empty() ===> scala.collection.Set$: empty()
scala.collection.Set$: newBuilder() ===> scala.collection.generic.ImmutableSetFactory: newBuilder()
scala.collection.SetLike$$anonfun$$plus$plus$1: <init>(Lscala/collection/SetLike;) ===> scala.runtime.AbstractFunction2: <init>()
scala.collection.SetLike$$anonfun$$plus$plus$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.collection.SetLike$$anonfun$$plus$plus$1: apply(Lscala/collection/Set;Ljava/lang/Object;)
scala.collection.SetLike$$anonfun$$plus$plus$1: apply(Lscala/collection/Set;Ljava/lang/Object;) ===> scala.collection.Set: $plus(Ljava/lang/Object;)
scala.collection.SetLike$class: $plus$plus(Lscala/collection/SetLike;Lscala/collection/GenTraversableOnce;) ===> scala.collection.GenTraversableOnce: seq()
scala.collection.SetLike$class: $plus$plus(Lscala/collection/SetLike;Lscala/collection/GenTraversableOnce;) ===> scala.collection.SetLike$$anonfun$$plus$plus$1: <init>(Lscala/collection/SetLike;)
scala.collection.SetLike$class: $plus$plus(Lscala/collection/SetLike;Lscala/collection/GenTraversableOnce;) ===> scala.collection.SetLike: repr()
scala.collection.SetLike$class: $plus$plus(Lscala/collection/SetLike;Lscala/collection/GenTraversableOnce;) ===> scala.collection.TraversableOnce: $div$colon(Ljava/lang/Object;Lscala/Function2;)
scala.collection.SetLike$class: isEmpty(Lscala/collection/SetLike;) ===> scala.collection.SetLike: size()
scala.collection.SetLike$class: map(Lscala/collection/SetLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.SetLike: scala$collection$SetLike$$super$map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
scala.collection.SetLike$class: newBuilder(Lscala/collection/SetLike;) ===> scala.collection.mutable.SetBuilder: <init>(Lscala/collection/Set;)
scala.collection.SetLike$class: newBuilder(Lscala/collection/SetLike;) ===> scala.collection.SetLike: empty()
scala.collection.SetLike$class: toBuffer(Lscala/collection/SetLike;) ===> scala.collection.mutable.ArrayBuffer: <init>(I)
scala.collection.SetLike$class: toBuffer(Lscala/collection/SetLike;) ===> scala.collection.SetLike: copyToBuffer(Lscala/collection/mutable/Buffer;)
scala.collection.SetLike$class: toBuffer(Lscala/collection/SetLike;) ===> scala.collection.SetLike: size()
scala.collection.SetLike$class: toString(Lscala/collection/SetLike;) ===> scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;)
scala.collection.SetLike$class: union(Lscala/collection/SetLike;Lscala/collection/GenSet;) ===> scala.collection.SetLike: $plus$plus(Lscala/collection/GenTraversableOnce;)
scala.collection.Traversable$: <clinit>() ===> scala.collection.Traversable$: <init>()
scala.collection.Traversable$: <init>() ===> scala.collection.generic.GenTraversableFactory: <init>()
scala.collection.Traversable$: <init>() ===> scala.util.control.Breaks: <init>()
scala.collection.Traversable$: newBuilder() ===> scala.collection.immutable.Traversable$: newBuilder()
scala.collection.TraversableLike$$anonfun$filter$1: <init>(Lscala/collection/TraversableLike;Lscala/collection/mutable/Builder;Lscala/Function1;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$filter$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: <init>(Lscala/collection/TraversableLike;Lscala/collection/mutable/Builder;Lscala/Function1;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> scala.collection.GenTraversableOnce: seq()
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$flatMap$1: apply(Ljava/lang/Object;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$last$1: <init>(Lscala/collection/TraversableLike;Lscala/runtime/ObjectRef;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableLike$$anonfun$last$1: apply(Ljava/lang/Object;) ===> scala.collection.TraversableLike$$anonfun$last$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: <init>(Lscala/collection/TraversableLike;Lscala/collection/mutable/Builder;Lscala/Function1;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.Builder: $plus$eq(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$$anonfun$map$1: apply(Ljava/lang/Object;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.GenTraversableOnce: seq()
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: result()
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: sizeHint(Lscala/collection/TraversableLike;I)
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: repr()
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: thisCollection()
scala.collection.TraversableLike$class: $plus$plus(Lscala/collection/TraversableLike;Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableOnce: size()
scala.collection.TraversableLike$class: builder$1(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$class: builder$1(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: sizeHint(Lscala/collection/TraversableLike;)
scala.collection.TraversableLike$class: builder$1(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: repr()
scala.collection.TraversableLike$class: builder$2(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply(Ljava/lang/Object;)
scala.collection.TraversableLike$class: builder$2(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: repr()
scala.collection.TraversableLike$class: filter(Lscala/collection/TraversableLike;Lscala/Function1;) ===> scala.collection.mutable.Builder: result()
scala.collection.TraversableLike$class: filter(Lscala/collection/TraversableLike;Lscala/Function1;) ===> scala.collection.TraversableLike$$anonfun$filter$1: <init>(Lscala/collection/TraversableLike;Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.TraversableLike$class: filter(Lscala/collection/TraversableLike;Lscala/Function1;) ===> scala.collection.TraversableLike: foreach(Lscala/Function1;)
scala.collection.TraversableLike$class: filter(Lscala/collection/TraversableLike;Lscala/Function1;) ===> scala.collection.TraversableLike: newBuilder()
scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: result()
scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$$anonfun$flatMap$1: <init>(Lscala/collection/TraversableLike;Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: builder$2(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;)
scala.collection.TraversableLike$class: flatMap(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: foreach(Lscala/Function1;)
scala.collection.TraversableLike$class: last(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike$$anonfun$last$1: <init>(Lscala/collection/TraversableLike;Lscala/runtime/ObjectRef;)
scala.collection.TraversableLike$class: last(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: foreach(Lscala/Function1;)
scala.collection.TraversableLike$class: last(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: head()
scala.collection.TraversableLike$class: last(Lscala/collection/TraversableLike;) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: result()
scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$$anonfun$map$1: <init>(Lscala/collection/TraversableLike;Lscala/collection/mutable/Builder;Lscala/Function1;)
scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike$class: builder$1(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;)
scala.collection.TraversableLike$class: map(Lscala/collection/TraversableLike;Lscala/Function1;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: foreach(Lscala/Function1;)
scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;) ===> java.lang.Object: getClass()
scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;) ===> java.lang.String: indexOf(I)
scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;) ===> java.lang.String: lastIndexOf(I)
scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;) ===> java.lang.String: substring(I)
scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;) ===> java.lang.String: substring(II)
scala.collection.TraversableLike$class: stringPrefix(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: repr()
scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;) ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: drop(I)
scala.collection.TraversableLike$class: tail(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: isEmpty()
scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply()
scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: result()
scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: sizeHint(Lscala/collection/TraversableLike;)
scala.collection.TraversableLike$class: to(Lscala/collection/TraversableLike;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableLike: thisCollection()
scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.TraversableLike$class: toString(Lscala/collection/TraversableLike;) ===> scala.collection.TraversableLike: stringPrefix()
scala.collection.TraversableOnce$$anonfun$addString$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/BooleanRef;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableOnce$$anonfun$addString$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$addString$1: apply(Ljava/lang/Object;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
scala.collection.TraversableOnce$$anonfun$count$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/IntRef;Lscala/Function1;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$count$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/ObjectRef;Lscala/Function2;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$foldLeft$1: apply(Ljava/lang/Object;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$max$1: <init>(Lscala/collection/TraversableOnce;Lscala/math/Ordering;) ===> scala.runtime.AbstractFunction2: <init>()
scala.collection.TraversableOnce$$anonfun$max$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.math.Ordering: gteq(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/BooleanRef;Lscala/runtime/ObjectRef;Lscala/Function2;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$reduceLeft$1: apply(Ljava/lang/Object;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.collection.TraversableOnce$$anonfun$size$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/IntRef;) ===> scala.runtime.AbstractFunction1: <init>()
scala.collection.TraversableOnce$$anonfun$size$1: apply(Ljava/lang/Object;) ===> scala.collection.TraversableOnce$$anonfun$size$1: apply(Ljava/lang/Object;)
scala.collection.TraversableOnce$class: $div$colon(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce: foldLeft(Ljava/lang/Object;Lscala/Function2;)
scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce$$anonfun$addString$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/BooleanRef;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;)
scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.collection.TraversableOnce$class: addString(Lscala/collection/TraversableOnce;Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.runtime.BooleanRef: <init>(Z)
scala.collection.TraversableOnce$class: copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I) ===> scala.collection.TraversableOnce: copyToArray(Ljava/lang/Object;II)
scala.collection.TraversableOnce$class: copyToArray(Lscala/collection/TraversableOnce;Ljava/lang/Object;I) ===> scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;)
scala.collection.TraversableOnce$class: copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;) ===> scala.collection.mutable.Buffer: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.TraversableOnce$class: copyToBuffer(Lscala/collection/TraversableOnce;Lscala/collection/mutable/Buffer;) ===> scala.collection.TraversableOnce: seq()
scala.collection.TraversableOnce$class: count(Lscala/collection/TraversableOnce;Lscala/Function1;) ===> scala.collection.TraversableOnce$$anonfun$count$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/IntRef;Lscala/Function1;)
scala.collection.TraversableOnce$class: count(Lscala/collection/TraversableOnce;Lscala/Function1;) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.collection.TraversableOnce$class: count(Lscala/collection/TraversableOnce;Lscala/Function1;) ===> scala.runtime.IntRef: <init>(I)
scala.collection.TraversableOnce$class: foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce$$anonfun$foldLeft$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/ObjectRef;Lscala/Function2;)
scala.collection.TraversableOnce$class: foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.collection.TraversableOnce$class: foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;) ===> scala.collection.TraversableOnce: seq()
scala.collection.TraversableOnce$class: foldLeft(Lscala/collection/TraversableOnce;Ljava/lang/Object;Lscala/Function2;) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;) ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;) ===> scala.collection.TraversableOnce$$anonfun$max$1: <init>(Lscala/collection/TraversableOnce;Lscala/math/Ordering;)
scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;) ===> scala.collection.TraversableOnce: isEmpty()
scala.collection.TraversableOnce$class: max(Lscala/collection/TraversableOnce;Lscala/math/Ordering;) ===> scala.collection.TraversableOnce: reduceLeft(Lscala/Function2;)
scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;)
scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;) ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: toString()
scala.collection.TraversableOnce$class: mkString(Lscala/collection/TraversableOnce;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;) ===> scala.collection.TraversableOnce: addString(Lscala/collection/mutable/StringBuilder;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.collection.TraversableOnce$class: nonEmpty(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: isEmpty()
scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;) ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;) ===> scala.collection.TraversableOnce$$anonfun$reduceLeft$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/BooleanRef;Lscala/runtime/ObjectRef;Lscala/Function2;)
scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;) ===> scala.collection.TraversableOnce: isEmpty()
scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;) ===> scala.runtime.BooleanRef: <init>(Z)
scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.collection.TraversableOnce$class: reduceLeft(Lscala/collection/TraversableOnce;Lscala/Function2;) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.collection.TraversableOnce$class: size(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce$$anonfun$size$1: <init>(Lscala/collection/TraversableOnce;Lscala/runtime/IntRef;)
scala.collection.TraversableOnce$class: size(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.collection.TraversableOnce$class: size(Lscala/collection/TraversableOnce;) ===> scala.runtime.IntRef: <init>(I)
scala.collection.TraversableOnce$class: to(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.generic.CanBuildFrom: apply()
scala.collection.TraversableOnce$class: to(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
scala.collection.TraversableOnce$class: to(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.mutable.Builder: result()
scala.collection.TraversableOnce$class: to(Lscala/collection/TraversableOnce;Lscala/collection/generic/CanBuildFrom;) ===> scala.collection.TraversableOnce: seq()
scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;) ===> scala.collection.mutable.Buffer: toArray(Lscala/reflect/ClassTag;)
scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce: copyToArray(Ljava/lang/Object;I)
scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce: isTraversableAgain()
scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce: size()
scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;) ===> scala.collection.TraversableOnce: toBuffer()
scala.collection.TraversableOnce$class: toArray(Lscala/collection/TraversableOnce;Lscala/reflect/ClassTag;) ===> scala.reflect.ClassTag: newArray(I)
scala.collection.TraversableOnce$class: toBuffer(Lscala/collection/TraversableOnce;) ===> scala.collection.mutable.ArrayBuffer$: canBuildFrom()
scala.collection.TraversableOnce$class: toBuffer(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: to(Lscala/collection/generic/CanBuildFrom;)
scala.collection.TraversableOnce$class: toList(Lscala/collection/TraversableOnce;) ===> scala.collection.immutable.List$: canBuildFrom()
scala.collection.TraversableOnce$class: toList(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: to(Lscala/collection/generic/CanBuildFrom;)
scala.collection.TraversableOnce$class: toSet(Lscala/collection/TraversableOnce;) ===> scala.collection.immutable.Set$: canBuildFrom()
scala.collection.TraversableOnce$class: toSet(Lscala/collection/TraversableOnce;) ===> scala.collection.TraversableOnce: to(Lscala/collection/generic/CanBuildFrom;)
scala.compat.Platform$: <clinit>() ===> scala.compat.Platform$: <init>()
scala.compat.Platform$: <init>() ===> java.lang.Object: <init>()
scala.compat.Platform$: <init>() ===> scala.util.Properties$: lineSeparator()
scala.Console$: <clinit>() ===> scala.Console$: <init>()
scala.Console$: <init>() ===> java.io.BufferedReader: <init>(Ljava/io/Reader;)
scala.Console$: <init>() ===> java.io.InputStreamReader: <init>(Ljava/io/InputStream;)
scala.Console$: <init>() ===> java.lang.Object: <init>()
scala.Console$: <init>() ===> scala.util.DynamicVariable: <init>(Ljava/lang/Object;)
scala.Console$: out() ===> scala.Console$: outVar()
scala.Console$: out() ===> scala.util.DynamicVariable: value()
scala.Console$: println(Ljava/lang/Object;) ===> scala.Console$: out()
scala.FallbackArrayBuilding: <init>() ===> java.lang.Object: <init>()
scala.Function0$class: apply$mcV$sp(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.Function0$class: apply$mcV$sp(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.Function0$class: apply$mcV$sp(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.Function0$class: apply$mcV$sp(Lscala/Function0;) ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.Function0$class: apply$mcV$sp(Lscala/Function0;) ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.Function0$class: apply$mcV$sp(Lscala/Function0;) ===> scala.Function0: apply()
scala.LowPriorityImplicits: <init>() ===> java.lang.Object: <init>()
scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$: make(Ljava/lang/Object;)
scala.LowPriorityImplicits: unwrapString(Lscala/collection/immutable/WrappedString;) ===> scala.collection.immutable.WrappedString: self()
scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$: empty()
scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;) ===> scala.collection.mutable.WrappedArray$ofRef: <init>([Ljava/lang/Object;)
scala.MatchError: <init>(Ljava/lang/Object;) ===> java.lang.RuntimeException: <init>()
scala.MatchError: getMessage() ===> scala.MatchError: objString()
scala.MatchError: objString$lzycompute() ===> java.lang.Object: getClass()
scala.MatchError: objString$lzycompute() ===> java.lang.Object: toString()
scala.MatchError: objString$lzycompute() ===> org.clapper.argot.CommandLineOption: toString()
scala.MatchError: objString$lzycompute() ===> org.clapper.argot.Parameter: toString()
scala.MatchError: objString$lzycompute() ===> scala.collection.mutable.StringBuilder: <init>()
scala.MatchError: objString$lzycompute() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.MatchError: objString$lzycompute() ===> scala.collection.mutable.StringBuilder: toString()
scala.MatchError: objString() ===> scala.MatchError: objString$lzycompute()
scala.math.BigDecimal$$anonfun$isValidByte$1: <init>(Lscala/math/BigDecimal;) ===> java.lang.NullPointerException: <init>()
scala.math.BigDecimal$$anonfun$isValidByte$1: <init>(Lscala/math/BigDecimal;) ===> scala.runtime.AbstractFunction0$mcV$sp: <init>()
scala.math.BigDecimal$$anonfun$isValidByte$1: apply$mcV$sp() ===> scala.math.BigDecimal: toByteExact()
scala.math.BigDecimal$$anonfun$isValidByte$1: apply() ===> scala.math.BigDecimal$$anonfun$isValidByte$1: apply()
scala.math.BigDecimal$$anonfun$isValidByte$1: apply() ===> scala.math.BigDecimal: toByteExact()
scala.math.BigDecimal$$anonfun$isValidInt$1: <init>(Lscala/math/BigDecimal;) ===> java.lang.NullPointerException: <init>()
scala.math.BigDecimal$$anonfun$isValidInt$1: <init>(Lscala/math/BigDecimal;) ===> scala.runtime.AbstractFunction0$mcV$sp: <init>()
scala.math.BigDecimal$$anonfun$isValidInt$1: apply$mcV$sp() ===> scala.math.BigDecimal: toIntExact()
scala.math.BigDecimal$$anonfun$isValidInt$1: apply() ===> scala.math.BigDecimal$$anonfun$isValidInt$1: apply()
scala.math.BigDecimal$$anonfun$isValidInt$1: apply() ===> scala.math.BigDecimal: toIntExact()
scala.math.BigDecimal$$anonfun$isValidLong$1: <init>(Lscala/math/BigDecimal;) ===> java.lang.NullPointerException: <init>()
scala.math.BigDecimal$$anonfun$isValidLong$1: <init>(Lscala/math/BigDecimal;) ===> scala.runtime.AbstractFunction0$mcV$sp: <init>()
scala.math.BigDecimal$$anonfun$isValidLong$1: apply$mcV$sp() ===> scala.math.BigDecimal: toLongExact()
scala.math.BigDecimal$$anonfun$isValidLong$1: apply() ===> scala.math.BigDecimal$$anonfun$isValidLong$1: apply()
scala.math.BigDecimal$$anonfun$isValidLong$1: apply() ===> scala.math.BigDecimal: toLongExact()
scala.math.BigDecimal$$anonfun$isValidShort$1: <init>(Lscala/math/BigDecimal;) ===> java.lang.NullPointerException: <init>()
scala.math.BigDecimal$$anonfun$isValidShort$1: <init>(Lscala/math/BigDecimal;) ===> scala.runtime.AbstractFunction0$mcV$sp: <init>()
scala.math.BigDecimal$$anonfun$isValidShort$1: apply$mcV$sp() ===> scala.math.BigDecimal: toShortExact()
scala.math.BigDecimal$$anonfun$isValidShort$1: apply() ===> scala.math.BigDecimal$$anonfun$isValidShort$1: apply()
scala.math.BigDecimal$$anonfun$isValidShort$1: apply() ===> scala.math.BigDecimal: toShortExact()
scala.math.BigDecimal$: <clinit>() ===> scala.math.BigDecimal$: <init>()
scala.math.BigDecimal$: <init>() ===> java.lang.Object: <init>()
scala.math.BigDecimal$: <init>() ===> java.math.BigDecimal: valueOf(J)
scala.math.BigDecimal$: <init>() ===> scala.math.BigDecimal$: defaultMathContext()
scala.math.BigDecimal$: <init>() ===> scala.math.BigDecimal: <init>(Ljava/math/BigDecimal;Ljava/math/MathContext;)
scala.math.BigDecimal$: apply(I) ===> scala.math.BigDecimal$: apply(ILjava/math/MathContext;)
scala.math.BigDecimal$: apply(I) ===> scala.math.BigDecimal$: defaultMathContext()
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> java.math.BigDecimal: valueOf(J)
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> scala.math.BigDecimal$: cache()
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> scala.math.BigDecimal$: defaultMathContext()
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> scala.math.BigDecimal$: maxCached()
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> scala.math.BigDecimal$: minCached()
scala.math.BigDecimal$: apply(ILjava/math/MathContext;) ===> scala.math.BigDecimal: <init>(Ljava/math/BigDecimal;Ljava/math/MathContext;)
scala.math.BigDecimal$: cache$lzycompute() ===> scala.math.BigDecimal$: maxCached()
scala.math.BigDecimal$: cache$lzycompute() ===> scala.math.BigDecimal$: minCached()
scala.math.BigDecimal$: cache() ===> scala.math.BigDecimal$: cache$lzycompute()
scala.math.BigDecimal$: int2bigDecimal(I) ===> scala.math.BigDecimal$: apply(I)
scala.math.BigDecimal: <init>(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> scala.math.ScalaNumber: <init>()
scala.math.BigDecimal: <init>(Ljava/math/BigDecimal;Ljava/math/MathContext;) ===> scala.math.ScalaNumericAnyConversions$class: $init$(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigDecimal: bigdec2BigDecimal(Ljava/math/BigDecimal;) ===> scala.math.BigDecimal: <init>(Ljava/math/BigDecimal;Ljava/math/MathContext;)
scala.math.BigDecimal: bigdec2BigDecimal(Ljava/math/BigDecimal;) ===> scala.math.BigDecimal: mc()
scala.math.BigDecimal: byteValue() ===> scala.math.BigDecimal: intValue()
scala.math.BigDecimal: compare(Lscala/math/BigDecimal;) ===> java.math.BigDecimal: compareTo(Ljava/math/BigDecimal;)
scala.math.BigDecimal: compare(Lscala/math/BigDecimal;) ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: doubleValue() ===> java.math.BigDecimal: doubleValue()
scala.math.BigDecimal: doubleValue() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.BigDecimal: equals(Lscala/math/BigDecimal;)
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.BigDecimal: isValidDouble()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.BigDecimal: isValidFloat()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.BigDecimal: isValidLong()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.BigDecimal: toBigIntExact()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.BigInt: equals(Lscala/math/BigInt;)
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toDouble()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toFloat()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: unifiedPrimitiveEquals(Ljava/lang/Object;)
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.Option: get()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.Option: isEmpty()
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToDouble(Ljava/lang/Object;)
scala.math.BigDecimal: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToFloat(Ljava/lang/Object;)
scala.math.BigDecimal: equals(Lscala/math/BigDecimal;) ===> scala.math.BigDecimal: compare(Lscala/math/BigDecimal;)
scala.math.BigDecimal: floatValue() ===> java.math.BigDecimal: floatValue()
scala.math.BigDecimal: floatValue() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: hashCode() ===> scala.math.BigDecimal: doubleValue()
scala.math.BigDecimal: hashCode() ===> scala.math.BigDecimal: isWhole()
scala.math.BigDecimal: hashCode() ===> scala.math.ScalaNumericAnyConversions: unifiedPrimitiveHashcode()
scala.math.BigDecimal: hashCode() ===> scala.runtime.ScalaRunTime$: hash(D)
scala.math.BigDecimal: intValue() ===> java.math.BigDecimal: intValue()
scala.math.BigDecimal: intValue() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: isValidByte() ===> scala.math.BigDecimal$$anonfun$isValidByte$1: <init>(Lscala/math/BigDecimal;)
scala.math.BigDecimal: isValidByte() ===> scala.math.BigDecimal: noArithmeticException(Lscala/Function0;)
scala.math.BigDecimal: isValidChar() ===> scala.math.BigDecimal: isValidInt()
scala.math.BigDecimal: isValidChar() ===> scala.math.BigDecimal: toIntExact()
scala.math.BigDecimal: isValidDouble() ===> java.math.BigDecimal: <init>(D)
scala.math.BigDecimal: isValidDouble() ===> java.math.BigDecimal: compareTo(Ljava/math/BigDecimal;)
scala.math.BigDecimal: isValidDouble() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: isValidDouble() ===> scala.math.ScalaNumericAnyConversions: toDouble()
scala.math.BigDecimal: isValidDouble() ===> scala.runtime.RichDouble$: isInfinity$extension(D)
scala.math.BigDecimal: isValidFloat() ===> java.math.BigDecimal: <init>(D)
scala.math.BigDecimal: isValidFloat() ===> java.math.BigDecimal: compareTo(Ljava/math/BigDecimal;)
scala.math.BigDecimal: isValidFloat() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: isValidFloat() ===> scala.math.ScalaNumericAnyConversions: toFloat()
scala.math.BigDecimal: isValidFloat() ===> scala.runtime.RichFloat$: isInfinity$extension(F)
scala.math.BigDecimal: isValidInt() ===> scala.math.BigDecimal$$anonfun$isValidInt$1: <init>(Lscala/math/BigDecimal;)
scala.math.BigDecimal: isValidInt() ===> scala.math.BigDecimal: noArithmeticException(Lscala/Function0;)
scala.math.BigDecimal: isValidLong() ===> scala.math.BigDecimal$$anonfun$isValidLong$1: <init>(Lscala/math/BigDecimal;)
scala.math.BigDecimal: isValidLong() ===> scala.math.BigDecimal: noArithmeticException(Lscala/Function0;)
scala.math.BigDecimal: isValidShort() ===> scala.math.BigDecimal$$anonfun$isValidShort$1: <init>(Lscala/math/BigDecimal;)
scala.math.BigDecimal: isValidShort() ===> scala.math.BigDecimal: noArithmeticException(Lscala/Function0;)
scala.math.BigDecimal: isWhole() ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.math.BigDecimal: isWhole() ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.math.BigDecimal: isWhole() ===> scala.math.BigDecimal$: apply(I)
scala.math.BigDecimal: isWhole() ===> scala.math.BigDecimal$: int2bigDecimal(I)
scala.math.BigDecimal: isWhole() ===> scala.math.BigDecimal: remainder(Lscala/math/BigDecimal;)
scala.math.BigDecimal: isWhole() ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.math.BigDecimal: isWhole() ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.math.BigDecimal: longValue() ===> java.math.BigDecimal: longValue()
scala.math.BigDecimal: longValue() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: noArithmeticException(Lscala/Function0;) ===> scala.Function0: apply$mcV$sp()
scala.math.BigDecimal: remainder(Lscala/math/BigDecimal;) ===> java.math.BigDecimal: remainder(Ljava/math/BigDecimal;)
scala.math.BigDecimal: remainder(Lscala/math/BigDecimal;) ===> scala.math.BigDecimal: bigdec2BigDecimal(Ljava/math/BigDecimal;)
scala.math.BigDecimal: remainder(Lscala/math/BigDecimal;) ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: shortValue() ===> scala.math.BigDecimal: intValue()
scala.math.BigDecimal: toBigIntExact() ===> java.math.BigDecimal: toBigIntegerExact()
scala.math.BigDecimal: toBigIntExact() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: toBigIntExact() ===> scala.math.BigInt: <init>(Ljava/math/BigInteger;)
scala.math.BigDecimal: toBigIntExact() ===> scala.Some: <init>(Ljava/lang/Object;)
scala.math.BigDecimal: toByte() ===> scala.math.ScalaNumericAnyConversions$class: toByte(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigDecimal: toByteExact() ===> java.math.BigDecimal: byteValueExact()
scala.math.BigDecimal: toByteExact() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: toDouble() ===> scala.math.ScalaNumericAnyConversions$class: toDouble(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigDecimal: toFloat() ===> scala.math.ScalaNumericAnyConversions$class: toFloat(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigDecimal: toInt() ===> scala.math.ScalaNumericAnyConversions$class: toInt(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigDecimal: toIntExact() ===> java.math.BigDecimal: intValueExact()
scala.math.BigDecimal: toIntExact() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: toLong() ===> scala.math.ScalaNumericAnyConversions$class: toLong(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigDecimal: toLongExact() ===> java.math.BigDecimal: longValueExact()
scala.math.BigDecimal: toLongExact() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: toShort() ===> scala.math.ScalaNumericAnyConversions$class: toShort(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigDecimal: toShortExact() ===> java.math.BigDecimal: shortValueExact()
scala.math.BigDecimal: toShortExact() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: toString() ===> java.math.BigDecimal: toString()
scala.math.BigDecimal: toString() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: underlying() ===> scala.math.BigDecimal: bigDecimal()
scala.math.BigDecimal: underlying() ===> scala.math.BigDecimal: underlying()
scala.math.BigDecimal: unifiedPrimitiveEquals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;)
scala.math.BigDecimal: unifiedPrimitiveHashcode() ===> scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveHashcode(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt$: <clinit>() ===> scala.math.BigInt$: <init>()
scala.math.BigInt$: <init>() ===> java.lang.Object: <init>()
scala.math.BigInt$: <init>() ===> java.math.BigInteger: valueOf(J)
scala.math.BigInt$: <init>() ===> scala.math.BigInt$: apply(J)
scala.math.BigInt$: <init>() ===> scala.math.BigInt$: maxCached()
scala.math.BigInt$: <init>() ===> scala.math.BigInt$: minCached()
scala.math.BigInt$: apply(I) ===> java.math.BigInteger: valueOf(J)
scala.math.BigInt$: apply(I) ===> scala.math.BigInt$: cache()
scala.math.BigInt$: apply(I) ===> scala.math.BigInt$: maxCached()
scala.math.BigInt$: apply(I) ===> scala.math.BigInt$: minCached()
scala.math.BigInt$: apply(I) ===> scala.math.BigInt: <init>(Ljava/math/BigInteger;)
scala.math.BigInt$: apply(J) ===> java.math.BigInteger: valueOf(J)
scala.math.BigInt$: apply(J) ===> scala.math.BigInt$: apply(I)
scala.math.BigInt$: apply(J) ===> scala.math.BigInt$: maxCached()
scala.math.BigInt$: apply(J) ===> scala.math.BigInt$: minCached()
scala.math.BigInt$: apply(J) ===> scala.math.BigInt: <init>(Ljava/math/BigInteger;)
scala.math.BigInt$: int2bigInt(I) ===> scala.math.BigInt$: apply(I)
scala.math.BigInt$: long2bigInt(J) ===> scala.math.BigInt$: apply(J)
scala.math.BigInt: $greater$eq(Lscala/math/BigInt;) ===> scala.math.BigInt: compare(Lscala/math/BigInt;)
scala.math.BigInt: $less$eq(Lscala/math/BigInt;) ===> scala.math.BigInt: compare(Lscala/math/BigInt;)
scala.math.BigInt: <init>(Ljava/math/BigInteger;) ===> scala.math.ScalaNumber: <init>()
scala.math.BigInt: <init>(Ljava/math/BigInteger;) ===> scala.math.ScalaNumericAnyConversions$class: $init$(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt: bitLength() ===> java.math.BigInteger: bitLength()
scala.math.BigInt: bitLength() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: bitLengthOverflow() ===> java.math.BigInteger: equals(Ljava/lang/Object;)
scala.math.BigInt: bitLengthOverflow() ===> java.math.BigInteger: shiftRight(I)
scala.math.BigInt: bitLengthOverflow() ===> java.math.BigInteger: signum()
scala.math.BigInt: bitLengthOverflow() ===> scala.math.BigInt$: scala$math$BigInt$$minusOne()
scala.math.BigInt: bitLengthOverflow() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: byteValue() ===> scala.math.BigInt: intValue()
scala.math.BigInt: compare(Lscala/math/BigInt;) ===> java.math.BigInteger: compareTo(Ljava/math/BigInteger;)
scala.math.BigInt: compare(Lscala/math/BigInt;) ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: doubleValue() ===> java.math.BigInteger: doubleValue()
scala.math.BigInt: doubleValue() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.BigDecimal: toBigIntExact()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.BigInt: equals(Lscala/math/BigInt;)
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.BigInt: isValidDouble()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.BigInt: isValidFloat()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.BigInt: isValidLong()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toDouble()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toFloat()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: unifiedPrimitiveEquals(Ljava/lang/Object;)
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.Option: get()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.Option: isEmpty()
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToDouble(Ljava/lang/Object;)
scala.math.BigInt: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToFloat(Ljava/lang/Object;)
scala.math.BigInt: equals(Lscala/math/BigInt;) ===> scala.math.BigInt: compare(Lscala/math/BigInt;)
scala.math.BigInt: floatValue() ===> java.math.BigInteger: floatValue()
scala.math.BigInt: floatValue() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: hashCode() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: hashCode() ===> scala.math.BigInt: isValidLong()
scala.math.BigInt: hashCode() ===> scala.math.ScalaNumericAnyConversions: unifiedPrimitiveHashcode()
scala.math.BigInt: hashCode() ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Number;)
scala.math.BigInt: intValue() ===> java.math.BigInteger: intValue()
scala.math.BigInt: intValue() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: isValidByte() ===> scala.math.BigInt$: int2bigInt(I)
scala.math.BigInt: isValidByte() ===> scala.math.BigInt: $greater$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidByte() ===> scala.math.BigInt: $less$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidChar() ===> scala.math.BigInt$: int2bigInt(I)
scala.math.BigInt: isValidChar() ===> scala.math.BigInt: $greater$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidChar() ===> scala.math.BigInt: $less$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidDouble() ===> scala.math.BigInt: bitLength()
scala.math.BigInt: isValidDouble() ===> scala.math.BigInt: bitLengthOverflow()
scala.math.BigInt: isValidDouble() ===> scala.math.BigInt: lowestSetBit()
scala.math.BigInt: isValidFloat() ===> scala.math.BigInt: bitLength()
scala.math.BigInt: isValidFloat() ===> scala.math.BigInt: bitLengthOverflow()
scala.math.BigInt: isValidFloat() ===> scala.math.BigInt: lowestSetBit()
scala.math.BigInt: isValidInt() ===> scala.math.BigInt$: int2bigInt(I)
scala.math.BigInt: isValidInt() ===> scala.math.BigInt: $greater$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidInt() ===> scala.math.BigInt: $less$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidLong() ===> scala.math.BigInt$: long2bigInt(J)
scala.math.BigInt: isValidLong() ===> scala.math.BigInt: $greater$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidLong() ===> scala.math.BigInt: $less$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidShort() ===> scala.math.BigInt$: int2bigInt(I)
scala.math.BigInt: isValidShort() ===> scala.math.BigInt: $greater$eq(Lscala/math/BigInt;)
scala.math.BigInt: isValidShort() ===> scala.math.BigInt: $less$eq(Lscala/math/BigInt;)
scala.math.BigInt: longValue() ===> java.math.BigInteger: longValue()
scala.math.BigInt: longValue() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: lowestSetBit() ===> java.math.BigInteger: getLowestSetBit()
scala.math.BigInt: lowestSetBit() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: shortValue() ===> scala.math.BigInt: intValue()
scala.math.BigInt: toByte() ===> scala.math.ScalaNumericAnyConversions$class: toByte(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt: toDouble() ===> scala.math.ScalaNumericAnyConversions$class: toDouble(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt: toFloat() ===> scala.math.ScalaNumericAnyConversions$class: toFloat(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt: toInt() ===> scala.math.ScalaNumericAnyConversions$class: toInt(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt: toLong() ===> scala.math.ScalaNumericAnyConversions$class: toLong(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt: toShort() ===> scala.math.ScalaNumericAnyConversions$class: toShort(Lscala/math/ScalaNumericAnyConversions;)
scala.math.BigInt: toString() ===> java.math.BigInteger: toString()
scala.math.BigInt: toString() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: underlying() ===> scala.math.BigInt: bigInteger()
scala.math.BigInt: underlying() ===> scala.math.BigInt: underlying()
scala.math.BigInt: unifiedPrimitiveEquals(Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;)
scala.math.BigInt: unifiedPrimitiveHashcode() ===> scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveHashcode(Lscala/math/ScalaNumericAnyConversions;)
scala.math.Equiv$: <clinit>() ===> scala.math.Equiv$: <init>()
scala.math.Equiv$: <init>() ===> java.lang.Object: <init>()
scala.math.Equiv$: <init>() ===> scala.math.LowPriorityEquiv$class: $init$(Lscala/math/Equiv$;)
scala.math.Numeric$: <clinit>() ===> scala.math.Numeric$: <init>()
scala.math.Numeric$: <init>() ===> java.lang.Object: <init>()
scala.math.Ordered$: <clinit>() ===> scala.math.Ordered$: <init>()
scala.math.Ordered$: <init>() ===> java.lang.Object: <init>()
scala.math.Ordered$class: $less(Lscala/math/Ordered;Ljava/lang/Object;) ===> scala.math.Ordered: compare(Ljava/lang/Object;)
scala.math.Ordered$class: compareTo(Lscala/math/Ordered;Ljava/lang/Object;) ===> scala.math.Ordered: compare(Ljava/lang/Object;)
scala.math.Ordering$$anon$9: <init>(Lscala/Function2;) ===> java.lang.Object: <init>()
scala.math.Ordering$$anon$9: <init>(Lscala/Function2;) ===> scala.math.Ordering$class: $init$(Lscala/math/Ordering;)
scala.math.Ordering$$anon$9: <init>(Lscala/Function2;) ===> scala.math.PartialOrdering$class: $init$(Lscala/math/PartialOrdering;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Function2: apply(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$$anon$9: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.math.Ordering$: <clinit>() ===> scala.math.Ordering$: <init>()
scala.math.Ordering$: <init>() ===> java.lang.Object: <init>()
scala.math.Ordering$: <init>() ===> scala.math.LowPriorityOrderingImplicits$class: $init$(Lscala/math/LowPriorityOrderingImplicits;)
scala.math.Ordering$class: gteq(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;) ===> scala.math.Ordering: compare(Ljava/lang/Object;Ljava/lang/Object;)
scala.math.Ordering$Int$: <clinit>() ===> scala.math.Ordering$Int$: <init>()
scala.math.Ordering$Int$: <init>() ===> java.lang.Object: <init>()
scala.math.Ordering$Int$: <init>() ===> scala.math.Ordering$class: $init$(Lscala/math/Ordering;)
scala.math.Ordering$Int$: <init>() ===> scala.math.Ordering$IntOrdering$class: $init$(Lscala/math/Ordering$IntOrdering;)
scala.math.Ordering$Int$: <init>() ===> scala.math.PartialOrdering$class: $init$(Lscala/math/PartialOrdering;)
scala.math.Ordering$Int$: compare(II) ===> scala.math.Ordering$IntOrdering$class: compare(Lscala/math/Ordering$IntOrdering;II)
scala.math.Ordering$Int$: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.math.Ordering$IntOrdering: compare(II)
scala.math.Ordering$Int$: compare(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.math.Ordering$Int$: gteq(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.math.Ordering$class: gteq(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)
scala.math.package$: <clinit>() ===> scala.math.package$: <init>()
scala.math.package$: <init>() ===> java.lang.Object: <init>()
scala.math.package$: max(II) ===> java.lang.Math: max(II)
scala.math.package$: min(II) ===> java.lang.Math: min(II)
scala.math.ScalaNumber: <init>() ===> java.lang.Number: <init>()
scala.math.ScalaNumericAnyConversions$class: toByte(Lscala/math/ScalaNumericAnyConversions;) ===> scala.math.ScalaNumericAnyConversions: byteValue()
scala.math.ScalaNumericAnyConversions$class: toDouble(Lscala/math/ScalaNumericAnyConversions;) ===> scala.math.ScalaNumericAnyConversions: doubleValue()
scala.math.ScalaNumericAnyConversions$class: toFloat(Lscala/math/ScalaNumericAnyConversions;) ===> scala.math.ScalaNumericAnyConversions: floatValue()
scala.math.ScalaNumericAnyConversions$class: toInt(Lscala/math/ScalaNumericAnyConversions;) ===> scala.math.ScalaNumericAnyConversions: intValue()
scala.math.ScalaNumericAnyConversions$class: toLong(Lscala/math/ScalaNumericAnyConversions;) ===> scala.math.ScalaNumericAnyConversions: longValue()
scala.math.ScalaNumericAnyConversions$class: toShort(Lscala/math/ScalaNumericAnyConversions;) ===> scala.math.ScalaNumericAnyConversions: shortValue()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: isValidByte()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: isValidChar()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: isValidInt()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: isValidShort()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toByte()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toDouble()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toFloat()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toInt()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toLong()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.math.ScalaNumericAnyConversions: toShort()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToByte(Ljava/lang/Object;)
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToChar(Ljava/lang/Object;)
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToDouble(Ljava/lang/Object;)
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToFloat(Ljava/lang/Object;)
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToLong(Ljava/lang/Object;)
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveEquals(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToShort(Ljava/lang/Object;)
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveHashcode(Lscala/math/ScalaNumericAnyConversions;) ===> scala.math.ScalaNumericAnyConversions: toLong()
scala.math.ScalaNumericAnyConversions$class: unifiedPrimitiveHashcode(Lscala/math/ScalaNumericAnyConversions;) ===> scala.runtime.ScalaRunTime$: hash(J)
scala.None$: <clinit>() ===> scala.None$: <init>()
scala.None$: <init>() ===> scala.Option: <init>()
scala.None$: get() ===> java.util.NoSuchElementException: <init>(Ljava/lang/String;)
scala.None$: get() ===> scala.None$: get()
scala.None$: productElement(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.None$: productElement(I) ===> java.lang.Object: toString()
scala.None$: productElement(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.None$: productElement(I) ===> org.clapper.argot.Parameter: toString()
scala.None$: productElement(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.None$: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.Option$: <clinit>() ===> scala.Option$: <init>()
scala.Option$: <init>() ===> java.lang.Object: <init>()
scala.Option$: apply(Ljava/lang/Object;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.Option$WithFilter: <init>(Lscala/Option;Lscala/Function1;) ===> java.lang.NullPointerException: <init>()
scala.Option$WithFilter: <init>(Lscala/Option;Lscala/Function1;) ===> java.lang.Object: <init>()
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> scala.Option$WithFilter: scala$Option$WithFilter$$$outer()
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> scala.Option: get()
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> scala.Option: isEmpty()
scala.Option$WithFilter: flatMap(Lscala/Function1;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> scala.Option$WithFilter: scala$Option$WithFilter$$$outer()
scala.Option$WithFilter: map(Lscala/Function1;) ===> scala.Option: get()
scala.Option$WithFilter: map(Lscala/Function1;) ===> scala.Option: isEmpty()
scala.Option$WithFilter: map(Lscala/Function1;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.Option$WithFilter: map(Lscala/Function1;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.Option: <init>() ===> java.lang.Object: <init>()
scala.Option: <init>() ===> scala.Product$class: $init$(Lscala/Product;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.Option: foreach(Lscala/Function1;) ===> scala.Option: get()
scala.Option: foreach(Lscala/Function1;) ===> scala.Option: isEmpty()
scala.Option: getOrElse(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.Option: getOrElse(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.Option: getOrElse(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.Option: getOrElse(Lscala/Function0;) ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.Option: getOrElse(Lscala/Function0;) ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.Option: getOrElse(Lscala/Function0;) ===> scala.Function0: apply()
scala.Option: getOrElse(Lscala/Function0;) ===> scala.Option: get()
scala.Option: getOrElse(Lscala/Function0;) ===> scala.Option: isEmpty()
scala.Option: isDefined() ===> scala.Option: isEmpty()
scala.package$$anon$1: <init>() ===> java.lang.Object: <init>()
scala.package$: <clinit>() ===> scala.package$: <init>()
scala.package$: <init>() ===> java.lang.Object: <init>()
scala.package$: <init>() ===> scala.package$$anon$1: <init>()
scala.Predef$$anon$1: <init>() ===> scala.Predef$$less$colon$less: <init>()
scala.Predef$$anon$2: <init>() ===> scala.Predef$$eq$colon$eq: <init>()
scala.Predef$$anon$3: <init>() ===> java.lang.Object: <init>()
scala.Predef$$anon$3: apply() ===> scala.collection.mutable.StringBuilder$: newBuilder()
scala.Predef$$anon$3: apply() ===> scala.Predef$$anon$3: apply()
scala.Predef$$anon$3: apply(Ljava/lang/Object;) ===> scala.Predef$$anon$3: apply(Ljava/lang/String;)
scala.Predef$$anon$3: apply(Ljava/lang/String;) ===> scala.Predef$$anon$3: apply()
scala.Predef$$eq$colon$eq: <init>() ===> java.lang.Object: <init>()
scala.Predef$$eq$colon$eq: <init>() ===> scala.Function1$class: $init$(Lscala/Function1;)
scala.Predef$$eq$colon$eq: toString() ===> scala.Function1$class: toString(Lscala/Function1;)
scala.Predef$$less$colon$less: <init>() ===> java.lang.Object: <init>()
scala.Predef$$less$colon$less: <init>() ===> scala.Function1$class: $init$(Lscala/Function1;)
scala.Predef$$less$colon$less: toString() ===> scala.Function1$class: toString(Lscala/Function1;)
scala.Predef$: <clinit>() ===> scala.Predef$: <init>()
scala.Predef$: <init>() ===> scala.LowPriorityImplicits: <init>()
scala.Predef$: <init>() ===> scala.Predef$$anon$1: <init>()
scala.Predef$: <init>() ===> scala.Predef$$anon$2: <init>()
scala.Predef$: <init>() ===> scala.Predef$$anon$3: <init>()
scala.Predef$: <init>() ===> scala.reflect.package$: ClassManifest()
scala.Predef$: <init>() ===> scala.reflect.package$: Manifest()
scala.Predef$: assert(Z) ===> java.lang.AssertionError: <init>(Ljava/lang/Object;)
scala.Predef$: println(Ljava/lang/Object;) ===> scala.Console$: println(Ljava/lang/Object;)
scala.Predef$: refArrayOps([Ljava/lang/Object;) ===> scala.collection.mutable.ArrayOps$ofRef: <init>([Ljava/lang/Object;)
scala.Predef$: require(Z) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
scala.Predef$ArrowAssoc$: $minus$greater$extension(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
scala.Predef$ArrowAssoc$: <clinit>() ===> scala.Predef$ArrowAssoc$: <init>()
scala.Predef$ArrowAssoc$: <init>() ===> java.lang.Object: <init>()
scala.Product2$class: productElement(Lscala/Product2;I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.Product2$class: productElement(Lscala/Product2;I) ===> java.lang.Object: toString()
scala.Product2$class: productElement(Lscala/Product2;I) ===> org.clapper.argot.CommandLineOption: toString()
scala.Product2$class: productElement(Lscala/Product2;I) ===> org.clapper.argot.Parameter: toString()
scala.Product2$class: productElement(Lscala/Product2;I) ===> scala.Product2: _1()
scala.Product2$class: productElement(Lscala/Product2;I) ===> scala.Product2: _2()
scala.Product2$class: productElement(Lscala/Product2;I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.Proxy$class: equals(Lscala/Proxy;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.Proxy$class: equals(Lscala/Proxy;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.Proxy$class: equals(Lscala/Proxy;Ljava/lang/Object;) ===> scala.Proxy: self()
scala.Proxy$class: hashCode(Lscala/Proxy;) ===> java.lang.Object: hashCode()
scala.Proxy$class: hashCode(Lscala/Proxy;) ===> org.clapper.argot.CommandLineArgument: hashCode()
scala.Proxy$class: hashCode(Lscala/Proxy;) ===> scala.Proxy: self()
scala.Proxy$class: toString(Lscala/Proxy;) ===> java.lang.String: valueOf(Ljava/lang/Object;)
scala.Proxy$class: toString(Lscala/Proxy;) ===> scala.Proxy: self()
scala.reflect.AnyValManifest: <init>(Ljava/lang/String;) ===> java.lang.Object: <init>()
scala.reflect.AnyValManifest: <init>(Ljava/lang/String;) ===> java.lang.System: identityHashCode(Ljava/lang/Object;)
scala.reflect.AnyValManifest: <init>(Ljava/lang/String;) ===> scala.reflect.ClassManifestDeprecatedApis$class: $init$(Lscala/reflect/ClassTag;)
scala.reflect.AnyValManifest: <init>(Ljava/lang/String;) ===> scala.reflect.ClassTag$class: $init$(Lscala/reflect/ClassTag;)
scala.reflect.AnyValManifest: <init>(Ljava/lang/String;) ===> scala.reflect.Manifest$class: $init$(Lscala/reflect/Manifest;)
scala.reflect.ClassManifestFactory$: <clinit>() ===> scala.reflect.ClassManifestFactory$: <init>()
scala.reflect.ClassManifestFactory$: <init>() ===> java.lang.Object: <init>()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Any()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: AnyVal()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Boolean()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Byte()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Char()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Double()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Float()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Int()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Long()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Nothing()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Null()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Object()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Short()
scala.reflect.ClassManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Unit()
scala.reflect.ClassTag$$anon$1: <init>(Ljava/lang/Class;) ===> java.lang.Object: <init>()
scala.reflect.ClassTag$$anon$1: <init>(Ljava/lang/Class;) ===> scala.reflect.ClassManifestDeprecatedApis$class: $init$(Lscala/reflect/ClassTag;)
scala.reflect.ClassTag$$anon$1: <init>(Ljava/lang/Class;) ===> scala.reflect.ClassTag$class: $init$(Lscala/reflect/ClassTag;)
scala.reflect.ClassTag$$anon$1: equals(Ljava/lang/Object;) ===> scala.reflect.ClassTag$class: equals(Lscala/reflect/ClassTag;Ljava/lang/Object;)
scala.reflect.ClassTag$$anon$1: hashCode() ===> scala.reflect.ClassTag$class: hashCode(Lscala/reflect/ClassTag;)
scala.reflect.ClassTag$$anon$1: newArray(I) ===> scala.reflect.ClassTag$class: newArray(Lscala/reflect/ClassTag;I)
scala.reflect.ClassTag$$anon$1: toString() ===> scala.reflect.ClassTag$class: toString(Lscala/reflect/ClassTag;)
scala.reflect.ClassTag$: <clinit>() ===> scala.reflect.ClassTag$: <init>()
scala.reflect.ClassTag$: <init>() ===> java.lang.Object: <init>()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Any()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: AnyRef()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: AnyVal()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Boolean()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Byte()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Char()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Double()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Float()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Int()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Long()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Nothing()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Null()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Object()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Short()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.ManifestFactory$: Unit()
scala.reflect.ClassTag$: <init>() ===> scala.reflect.package$: Manifest()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$$anon$1: <init>(Ljava/lang/Class;)
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Boolean()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Byte()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Char()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Double()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Float()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Int()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Long()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Nothing()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: NothingTYPE()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Null()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: NullTYPE()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Object()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: ObjectTYPE()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Short()
scala.reflect.ClassTag$: apply(Ljava/lang/Class;) ===> scala.reflect.ClassTag$: Unit()
scala.reflect.ClassTag$class: equals(Lscala/reflect/ClassTag;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.reflect.ClassTag$class: equals(Lscala/reflect/ClassTag;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.reflect.ClassTag$class: equals(Lscala/reflect/ClassTag;Ljava/lang/Object;) ===> scala.reflect.ClassTag: runtimeClass()
scala.reflect.ClassTag$class: hashCode(Lscala/reflect/ClassTag;) ===> scala.reflect.ClassTag: runtimeClass()
scala.reflect.ClassTag$class: hashCode(Lscala/reflect/ClassTag;) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.reflect.ClassTag$class: newArray(Lscala/reflect/ClassTag;I) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.reflect.ClassTag$class: newArray(Lscala/reflect/ClassTag;I) ===> java.lang.reflect.Array: newInstance(Ljava/lang/Class;I)
scala.reflect.ClassTag$class: newArray(Lscala/reflect/ClassTag;I) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.reflect.ClassTag$class: newArray(Lscala/reflect/ClassTag;I) ===> scala.reflect.ClassTag: runtimeClass()
scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;) ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;) ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;) ===> scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;)
scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;) ===> scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;)
scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;) ===> scala.StringContext: <init>(Lscala/collection/Seq;)
scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;) ===> scala.StringContext: s(Lscala/collection/Seq;)
scala.reflect.ClassTag$class: toString(Lscala/reflect/ClassTag;) ===> scala.reflect.ClassTag$class: prettyprint$1(Lscala/reflect/ClassTag;Ljava/lang/Class;)
scala.reflect.ClassTag$class: toString(Lscala/reflect/ClassTag;) ===> scala.reflect.ClassTag: runtimeClass()
scala.reflect.ManifestFactory$$anon$10: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$10: newArray(I) ===> scala.reflect.ManifestFactory$$anon$10: newArray(I)
scala.reflect.ManifestFactory$$anon$11: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$11: newArray(I) ===> scala.reflect.ManifestFactory$$anon$11: newArray(I)
scala.reflect.ManifestFactory$$anon$12: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$12: newArray(I) ===> scala.reflect.ManifestFactory$$anon$12: newArray(I)
scala.reflect.ManifestFactory$$anon$13: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$13: newArray(I) ===> scala.reflect.ManifestFactory$$anon$13: newArray(I)
scala.reflect.ManifestFactory$$anon$14: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$14: newArray(I) ===> scala.reflect.ManifestFactory$$anon$14: newArray(I)
scala.reflect.ManifestFactory$$anon$1: <init>() ===> scala.reflect.ManifestFactory$: scala$reflect$ManifestFactory$$ObjectTYPE()
scala.reflect.ManifestFactory$$anon$1: <init>() ===> scala.reflect.ManifestFactory$PhantomManifest: <init>(Ljava/lang/Class;Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$2: <init>() ===> scala.reflect.ManifestFactory$: scala$reflect$ManifestFactory$$ObjectTYPE()
scala.reflect.ManifestFactory$$anon$2: <init>() ===> scala.reflect.ManifestFactory$PhantomManifest: <init>(Ljava/lang/Class;Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$3: <init>() ===> scala.reflect.ManifestFactory$: scala$reflect$ManifestFactory$$ObjectTYPE()
scala.reflect.ManifestFactory$$anon$3: <init>() ===> scala.reflect.ManifestFactory$PhantomManifest: <init>(Ljava/lang/Class;Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$4: <init>() ===> scala.reflect.ManifestFactory$: scala$reflect$ManifestFactory$$NullTYPE()
scala.reflect.ManifestFactory$$anon$4: <init>() ===> scala.reflect.ManifestFactory$PhantomManifest: <init>(Ljava/lang/Class;Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$5: <init>() ===> scala.reflect.ManifestFactory$: scala$reflect$ManifestFactory$$NothingTYPE()
scala.reflect.ManifestFactory$$anon$5: <init>() ===> scala.reflect.ManifestFactory$PhantomManifest: <init>(Ljava/lang/Class;Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$6: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$6: newArray(I) ===> scala.reflect.ManifestFactory$$anon$6: newArray(I)
scala.reflect.ManifestFactory$$anon$7: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$7: newArray(I) ===> scala.reflect.ManifestFactory$$anon$7: newArray(I)
scala.reflect.ManifestFactory$$anon$8: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$8: newArray(I) ===> scala.reflect.ManifestFactory$$anon$8: newArray(I)
scala.reflect.ManifestFactory$$anon$9: <init>() ===> scala.reflect.AnyValManifest: <init>(Ljava/lang/String;)
scala.reflect.ManifestFactory$$anon$9: newArray(I) ===> scala.reflect.ManifestFactory$$anon$9: newArray(I)
scala.reflect.ManifestFactory$: <clinit>() ===> scala.reflect.ManifestFactory$: <init>()
scala.reflect.ManifestFactory$: <init>() ===> java.lang.Object: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$10: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$11: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$12: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$13: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$14: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$1: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$2: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$3: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$4: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$5: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$6: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$7: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$8: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$$anon$9: <init>()
scala.reflect.ManifestFactory$: <init>() ===> scala.reflect.ManifestFactory$: Object()
scala.reflect.ManifestFactory$ClassTypeManifest: <init>(Lscala/Option;Ljava/lang/Class;Lscala/collection/immutable/List;) ===> java.lang.Object: <init>()
scala.reflect.ManifestFactory$ClassTypeManifest: <init>(Lscala/Option;Ljava/lang/Class;Lscala/collection/immutable/List;) ===> scala.reflect.ClassManifestDeprecatedApis$class: $init$(Lscala/reflect/ClassTag;)
scala.reflect.ManifestFactory$ClassTypeManifest: <init>(Lscala/Option;Ljava/lang/Class;Lscala/collection/immutable/List;) ===> scala.reflect.ClassTag$class: $init$(Lscala/reflect/ClassTag;)
scala.reflect.ManifestFactory$ClassTypeManifest: <init>(Lscala/Option;Ljava/lang/Class;Lscala/collection/immutable/List;) ===> scala.reflect.Manifest$class: $init$(Lscala/reflect/Manifest;)
scala.reflect.ManifestFactory$ClassTypeManifest: newArray(I) ===> scala.reflect.ClassTag$class: newArray(Lscala/reflect/ClassTag;I)
scala.reflect.ManifestFactory$PhantomManifest: <init>(Ljava/lang/Class;Ljava/lang/String;) ===> java.lang.System: identityHashCode(Ljava/lang/Object;)
scala.reflect.ManifestFactory$PhantomManifest: <init>(Ljava/lang/Class;Ljava/lang/String;) ===> scala.reflect.ManifestFactory$ClassTypeManifest: <init>(Lscala/Option;Ljava/lang/Class;Lscala/collection/immutable/List;)
scala.reflect.NoManifest$: <clinit>() ===> scala.reflect.NoManifest$: <init>()
scala.reflect.NoManifest$: <init>() ===> java.lang.Object: <init>()
scala.reflect.package$: <clinit>() ===> scala.reflect.package$: <init>()
scala.reflect.package$: <init>() ===> java.lang.Object: <init>()
scala.runtime.AbstractFunction0$mcI$sp: <init>() ===> scala.Function0$mcI$sp$class: $init$(Lscala/Function0$mcI$sp;)
scala.runtime.AbstractFunction0$mcI$sp: <init>() ===> scala.runtime.AbstractFunction0: <init>()
scala.runtime.AbstractFunction0$mcV$sp: <init>() ===> scala.Function0$mcV$sp$class: $init$(Lscala/Function0$mcV$sp;)
scala.runtime.AbstractFunction0$mcV$sp: <init>() ===> scala.runtime.AbstractFunction0: <init>()
scala.runtime.AbstractFunction0$mcZ$sp: <init>() ===> scala.Function0$mcZ$sp$class: $init$(Lscala/Function0$mcZ$sp;)
scala.runtime.AbstractFunction0$mcZ$sp: <init>() ===> scala.runtime.AbstractFunction0: <init>()
scala.runtime.AbstractFunction0: <init>() ===> java.lang.Object: <init>()
scala.runtime.AbstractFunction0: <init>() ===> scala.Function0$class: $init$(Lscala/Function0;)
scala.runtime.AbstractFunction0: apply$mcV$sp() ===> scala.Function0$class: apply$mcV$sp(Lscala/Function0;)
scala.runtime.AbstractFunction0: toString() ===> scala.Function0$class: toString(Lscala/Function0;)
scala.runtime.AbstractFunction1$mcVI$sp: <init>() ===> scala.Function1$mcVI$sp$class: $init$(Lscala/Function1$mcVI$sp;)
scala.runtime.AbstractFunction1$mcVI$sp: <init>() ===> scala.runtime.AbstractFunction1: <init>()
scala.runtime.AbstractFunction1: <init>() ===> java.lang.Object: <init>()
scala.runtime.AbstractFunction1: <init>() ===> scala.Function1$class: $init$(Lscala/Function1;)
scala.runtime.AbstractFunction1: toString() ===> scala.Function1$class: toString(Lscala/Function1;)
scala.runtime.AbstractFunction2$mcIII$sp: <init>() ===> scala.Function2$mcIII$sp$class: $init$(Lscala/Function2$mcIII$sp;)
scala.runtime.AbstractFunction2$mcIII$sp: <init>() ===> scala.runtime.AbstractFunction2: <init>()
scala.runtime.AbstractFunction2: <init>() ===> java.lang.Object: <init>()
scala.runtime.AbstractFunction2: <init>() ===> scala.Function2$class: $init$(Lscala/Function2;)
scala.runtime.AbstractFunction2: toString() ===> scala.Function2$class: toString(Lscala/Function2;)
scala.runtime.BooleanRef: <init>(Z) ===> java.lang.Object: <init>()
scala.runtime.BooleanRef: toString() ===> java.lang.String: valueOf(Z)
scala.runtime.BoxedUnit: <clinit>() ===> scala.runtime.BoxedUnit: <init>()
scala.runtime.BoxedUnit: <init>() ===> java.lang.Object: <init>()
scala.runtime.BoxesRunTime: boxToBoolean(Z) ===> java.lang.Boolean: valueOf(Z)
scala.runtime.BoxesRunTime: boxToByte(B) ===> java.lang.Byte: valueOf(B)
scala.runtime.BoxesRunTime: boxToCharacter(C) ===> java.lang.Character: valueOf(C)
scala.runtime.BoxesRunTime: boxToDouble(D) ===> java.lang.Double: valueOf(D)
scala.runtime.BoxesRunTime: boxToFloat(F) ===> java.lang.Float: valueOf(F)
scala.runtime.BoxesRunTime: boxToInteger(I) ===> java.lang.Integer: valueOf(I)
scala.runtime.BoxesRunTime: boxToLong(J) ===> java.lang.Long: valueOf(J)
scala.runtime.BoxesRunTime: boxToShort(S) ===> java.lang.Short: valueOf(S)
scala.runtime.BoxesRunTime: equals(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equals2(Ljava/lang/Object;Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equals2(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equals2(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.runtime.BoxesRunTime: equals2(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equals2(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;) ===> java.lang.Character: charValue()
scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;) ===> java.lang.Character: equals(Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;)
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> java.lang.Character: charValue()
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> java.lang.Number: doubleValue()
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> java.lang.Number: floatValue()
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> java.lang.Number: intValue()
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> java.lang.Number: longValue()
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;) ===> scala.runtime.BoxesRunTime: typeCode(Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;) ===> java.lang.Number: doubleValue()
scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;) ===> java.lang.Number: floatValue()
scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;) ===> java.lang.Number: intValue()
scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;) ===> java.lang.Number: longValue()
scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;) ===> scala.runtime.BoxesRunTime: typeCode(Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumChar(Ljava/lang/Number;Ljava/lang/Character;)
scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumNum(Ljava/lang/Number;Ljava/lang/Number;)
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Double: doubleValue()
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Double: floatValue()
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Double: hashCode()
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Double: intValue()
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Double: longValue()
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Float: hashCode()
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Float: valueOf(F)
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Long: hashCode()
scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;) ===> java.lang.Long: valueOf(J)
scala.runtime.BoxesRunTime: hashFromFloat(Ljava/lang/Float;) ===> java.lang.Float: floatValue()
scala.runtime.BoxesRunTime: hashFromFloat(Ljava/lang/Float;) ===> java.lang.Float: hashCode()
scala.runtime.BoxesRunTime: hashFromFloat(Ljava/lang/Float;) ===> java.lang.Float: intValue()
scala.runtime.BoxesRunTime: hashFromFloat(Ljava/lang/Float;) ===> java.lang.Float: longValue()
scala.runtime.BoxesRunTime: hashFromFloat(Ljava/lang/Float;) ===> java.lang.Long: hashCode()
scala.runtime.BoxesRunTime: hashFromFloat(Ljava/lang/Float;) ===> java.lang.Long: valueOf(J)
scala.runtime.BoxesRunTime: hashFromLong(Ljava/lang/Long;) ===> java.lang.Long: hashCode()
scala.runtime.BoxesRunTime: hashFromLong(Ljava/lang/Long;) ===> java.lang.Long: intValue()
scala.runtime.BoxesRunTime: hashFromLong(Ljava/lang/Long;) ===> java.lang.Long: longValue()
scala.runtime.BoxesRunTime: hashFromNumber(Ljava/lang/Number;) ===> java.lang.Object: hashCode()
scala.runtime.BoxesRunTime: hashFromNumber(Ljava/lang/Number;) ===> org.clapper.argot.CommandLineArgument: hashCode()
scala.runtime.BoxesRunTime: hashFromNumber(Ljava/lang/Number;) ===> scala.runtime.BoxesRunTime: hashFromDouble(Ljava/lang/Double;)
scala.runtime.BoxesRunTime: hashFromNumber(Ljava/lang/Number;) ===> scala.runtime.BoxesRunTime: hashFromFloat(Ljava/lang/Float;)
scala.runtime.BoxesRunTime: hashFromNumber(Ljava/lang/Number;) ===> scala.runtime.BoxesRunTime: hashFromLong(Ljava/lang/Long;)
scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;) ===> java.lang.Boolean: booleanValue()
scala.runtime.BoxesRunTime: unboxToByte(Ljava/lang/Object;) ===> java.lang.Byte: byteValue()
scala.runtime.BoxesRunTime: unboxToChar(Ljava/lang/Object;) ===> java.lang.Character: charValue()
scala.runtime.BoxesRunTime: unboxToDouble(Ljava/lang/Object;) ===> java.lang.Double: doubleValue()
scala.runtime.BoxesRunTime: unboxToFloat(Ljava/lang/Object;) ===> java.lang.Float: floatValue()
scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;) ===> java.lang.Integer: intValue()
scala.runtime.BoxesRunTime: unboxToLong(Ljava/lang/Object;) ===> java.lang.Long: longValue()
scala.runtime.BoxesRunTime: unboxToShort(Ljava/lang/Object;) ===> java.lang.Short: shortValue()
scala.runtime.IntRef: <init>(I) ===> java.lang.Object: <init>()
scala.runtime.IntRef: toString() ===> java.lang.Integer: toString(I)
scala.runtime.ObjectRef: <init>(Ljava/lang/Object;) ===> java.lang.Object: <init>()
scala.runtime.ObjectRef: toString() ===> java.lang.String: valueOf(Ljava/lang/Object;)
scala.runtime.RichDouble$: <clinit>() ===> scala.runtime.RichDouble$: <init>()
scala.runtime.RichDouble$: <init>() ===> java.lang.Object: <init>()
scala.runtime.RichDouble$: isInfinity$extension(D) ===> java.lang.Double: isInfinite(D)
scala.runtime.RichFloat$: <clinit>() ===> scala.runtime.RichFloat$: <init>()
scala.runtime.RichFloat$: <init>() ===> java.lang.Object: <init>()
scala.runtime.RichFloat$: isInfinity$extension(F) ===> java.lang.Float: isInfinite(F)
scala.runtime.RichInt$: <clinit>() ===> scala.runtime.RichInt$: <init>()
scala.runtime.RichInt$: <init>() ===> java.lang.Object: <init>()
scala.runtime.ScalaRunTime$$anon$1: <init>(Lscala/Product;) ===> scala.collection.AbstractIterator: <init>()
scala.runtime.ScalaRunTime$$anon$1: <init>(Lscala/Product;) ===> scala.Product: productArity()
scala.runtime.ScalaRunTime$$anon$1: hasNext() ===> scala.runtime.ScalaRunTime$$anon$1: c()
scala.runtime.ScalaRunTime$$anon$1: hasNext() ===> scala.runtime.ScalaRunTime$$anon$1: cmax()
scala.runtime.ScalaRunTime$$anon$1: next() ===> scala.Product: productElement(I)
scala.runtime.ScalaRunTime$$anon$1: next() ===> scala.runtime.ScalaRunTime$$anon$1: c()
scala.runtime.ScalaRunTime$$anon$1: next() ===> scala.runtime.ScalaRunTime$$anon$1: c_$eq(I)
scala.runtime.ScalaRunTime$: <clinit>() ===> scala.runtime.ScalaRunTime$: <init>()
scala.runtime.ScalaRunTime$: <init>() ===> java.lang.Object: <init>()
scala.runtime.ScalaRunTime$: <init>() ===> java.lang.String: valueOf(I)
scala.runtime.ScalaRunTime$: <init>() ===> scala.collection.immutable.List: $colon$colon(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: <init>() ===> scala.collection.mutable.StringBuilder: <init>()
scala.runtime.ScalaRunTime$: <init>() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: <init>() ===> scala.collection.mutable.StringBuilder: toString()
scala.runtime.ScalaRunTime$: <init>() ===> scala.collection.TraversableOnce: toSet()
scala.runtime.ScalaRunTime$: _hashCode(Lscala/Product;) ===> scala.util.hashing.MurmurHash3$: productHash(Lscala/Product;)
scala.runtime.ScalaRunTime$: _toString(Lscala/Product;) ===> scala.collection.Iterator: mkString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)
scala.runtime.ScalaRunTime$: _toString(Lscala/Product;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.runtime.ScalaRunTime$: _toString(Lscala/Product;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: _toString(Lscala/Product;) ===> scala.collection.mutable.StringBuilder: toString()
scala.runtime.ScalaRunTime$: _toString(Lscala/Product;) ===> scala.Product: productIterator()
scala.runtime.ScalaRunTime$: _toString(Lscala/Product;) ===> scala.Product: productPrefix()
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> java.lang.NullPointerException: <init>()
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToByte(B)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToDouble(D)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToFloat(F)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToLong(J)
scala.runtime.ScalaRunTime$: array_apply(Ljava/lang/Object;I) ===> scala.runtime.BoxesRunTime: boxToShort(S)
scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;) ===> java.lang.NullPointerException: <init>()
scala.runtime.ScalaRunTime$: array_length(Ljava/lang/Object;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> java.lang.NullPointerException: <init>()
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.MatchError: <init>(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToByte(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToChar(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToDouble(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToFloat(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToLong(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: array_update(Ljava/lang/Object;ILjava/lang/Object;) ===> scala.runtime.BoxesRunTime: unboxToShort(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;) ===> java.lang.Object: getClass()
scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;) ===> java.lang.UnsupportedOperationException: <init>(Ljava/lang/String;)
scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;) ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;) ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;) ===> scala.reflect.ClassTag: runtimeClass()
scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;) ===> scala.StringContext: <init>(Lscala/collection/Seq;)
scala.runtime.ScalaRunTime$: arrayElementClass(Ljava/lang/Object;) ===> scala.StringContext: s(Lscala/collection/Seq;)
scala.runtime.ScalaRunTime$: hash(D) ===> java.lang.Object: hashCode()
scala.runtime.ScalaRunTime$: hash(D) ===> org.clapper.argot.CommandLineArgument: hashCode()
scala.runtime.ScalaRunTime$: hash(D) ===> scala.runtime.BoxesRunTime: boxToDouble(D)
scala.runtime.ScalaRunTime$: hash(D) ===> scala.runtime.BoxesRunTime: boxToFloat(F)
scala.runtime.ScalaRunTime$: hash(D) ===> scala.runtime.BoxesRunTime: boxToLong(J)
scala.runtime.ScalaRunTime$: hash(Ljava/lang/Number;) ===> scala.runtime.BoxesRunTime: hashFromNumber(Ljava/lang/Number;)
scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;) ===> java.lang.Object: hashCode()
scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: hashCode()
scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: hashFromNumber(Ljava/lang/Number;)
scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;) ===> scala.runtime.ScalaRunTime$$anon$1: <init>(Lscala/Product;)
scala.runtime.StringAdd$: $plus$extension(Ljava/lang/Object;Ljava/lang/String;) ===> java.lang.String: valueOf(Ljava/lang/Object;)
scala.runtime.StringAdd$: $plus$extension(Ljava/lang/Object;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.runtime.StringAdd$: $plus$extension(Ljava/lang/Object;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.runtime.StringAdd$: $plus$extension(Ljava/lang/Object;Ljava/lang/String;) ===> scala.collection.mutable.StringBuilder: toString()
scala.runtime.StringAdd$: <clinit>() ===> scala.runtime.StringAdd$: <init>()
scala.runtime.StringAdd$: <init>() ===> java.lang.Object: <init>()
scala.runtime.VolatileByteRef: <init>(B) ===> java.lang.Object: <init>()
scala.runtime.VolatileByteRef: toString() ===> java.lang.Byte: toString(B)
scala.Some: <init>(Ljava/lang/Object;) ===> scala.Option: <init>()
scala.Some: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.Some: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.Some: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.Some: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.Some: equals(Ljava/lang/Object;) ===> scala.Some: x()
scala.Some: get() ===> scala.Some: x()
scala.Some: hashCode() ===> scala.runtime.ScalaRunTime$: _hashCode(Lscala/Product;)
scala.Some: productElement(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.Some: productElement(I) ===> java.lang.Object: toString()
scala.Some: productElement(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.Some: productElement(I) ===> org.clapper.argot.Parameter: toString()
scala.Some: productElement(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.Some: productElement(I) ===> scala.Some: x()
scala.Some: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.Some: toString() ===> scala.runtime.ScalaRunTime$: _toString(Lscala/Product;)
scala.StringContext$$anonfun$s$1: <init>(Lscala/StringContext;) ===> scala.runtime.AbstractFunction1: <init>()
scala.StringContext$$anonfun$s$1: apply(Ljava/lang/Object;) ===> scala.StringContext$$anonfun$s$1: apply(Ljava/lang/String;)
scala.StringContext$$anonfun$s$1: apply(Ljava/lang/String;) ===> scala.StringContext$: treatEscapes(Ljava/lang/String;)
scala.StringContext$: <clinit>() ===> scala.StringContext$: <init>()
scala.StringContext$: <init>() ===> java.lang.Object: <init>()
scala.StringContext$: bldr$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) ===> scala.StringContext$: bldr$lzycompute$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;)
scala.StringContext$: bldr$lzycompute$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) ===> java.lang.StringBuilder: <init>()
scala.StringContext$: output$1(CLjava/lang/String;Lscala/runtime/ObjectRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/VolatileByteRef;) ===> java.lang.String: substring(II)
scala.StringContext$: output$1(CLjava/lang/String;Lscala/runtime/ObjectRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/VolatileByteRef;) ===> java.lang.StringBuilder: append(C)
scala.StringContext$: output$1(CLjava/lang/String;Lscala/runtime/ObjectRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/VolatileByteRef;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
scala.StringContext$: output$1(CLjava/lang/String;Lscala/runtime/ObjectRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/VolatileByteRef;) ===> scala.StringContext$: bldr$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> java.lang.String: length()
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> java.lang.String: substring(II)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> java.lang.StringBuilder: toString()
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> scala.runtime.IntRef: <init>(I)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> scala.runtime.VolatileByteRef: <init>(B)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> scala.StringContext$: bldr$1(Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> scala.StringContext$: output$1(CLjava/lang/String;Lscala/runtime/ObjectRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/VolatileByteRef;)
scala.StringContext$: treatEscapes(Ljava/lang/String;) ===> scala.StringContext$InvalidEscapeException: <init>(Ljava/lang/String;I)
scala.StringContext$InvalidEscapeException: <init>(Ljava/lang/String;I) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
scala.StringContext$InvalidEscapeException: <init>(Ljava/lang/String;I) ===> scala.collection.mutable.StringBuilder: <init>()
scala.StringContext$InvalidEscapeException: <init>(Ljava/lang/String;I) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.StringContext$InvalidEscapeException: <init>(Ljava/lang/String;I) ===> scala.collection.mutable.StringBuilder: toString()
scala.StringContext$InvalidEscapeException: <init>(Ljava/lang/String;I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.StringContext: <init>(Lscala/collection/Seq;) ===> java.lang.Object: <init>()
scala.StringContext: <init>(Lscala/collection/Seq;) ===> scala.Product$class: $init$(Lscala/Product;)
scala.StringContext: checkLengths(Lscala/collection/Seq;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
scala.StringContext: checkLengths(Lscala/collection/Seq;) ===> scala.collection.Seq: length()
scala.StringContext: checkLengths(Lscala/collection/Seq;) ===> scala.StringContext: parts()
scala.StringContext: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.StringContext: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.StringContext: equals(Ljava/lang/Object;) ===> scala.StringContext: canEqual(Ljava/lang/Object;)
scala.StringContext: equals(Ljava/lang/Object;) ===> scala.StringContext: parts()
scala.StringContext: hashCode() ===> scala.runtime.ScalaRunTime$: _hashCode(Lscala/Product;)
scala.StringContext: productElement(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.StringContext: productElement(I) ===> java.lang.Object: toString()
scala.StringContext: productElement(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.StringContext: productElement(I) ===> org.clapper.argot.Parameter: toString()
scala.StringContext: productElement(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.StringContext: productElement(I) ===> scala.StringContext: parts()
scala.StringContext: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.StringContext: s(Lscala/collection/Seq;) ===> scala.StringContext$$anonfun$s$1: <init>(Lscala/StringContext;)
scala.StringContext: s(Lscala/collection/Seq;) ===> scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> java.lang.StringBuilder: <init>(Ljava/lang/String;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> java.lang.StringBuilder: append(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> java.lang.StringBuilder: append(Ljava/lang/String;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> java.lang.StringBuilder: toString()
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> scala.collection.Iterator: hasNext()
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> scala.collection.Iterator: next()
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> scala.collection.Seq: iterator()
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> scala.Function1: apply(Ljava/lang/Object;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> scala.StringContext: checkLengths(Lscala/collection/Seq;)
scala.StringContext: standardInterpolator(Lscala/Function1;Lscala/collection/Seq;) ===> scala.StringContext: parts()
scala.StringContext: toString() ===> scala.runtime.ScalaRunTime$: _toString(Lscala/Product;)
scala.sys.BooleanProp$$anonfun$keyExists$1: <init>() ===> scala.runtime.AbstractFunction1: <init>()
scala.sys.BooleanProp$$anonfun$keyExists$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.sys.BooleanProp$$anonfun$keyExists$1: apply(Ljava/lang/Object;) ===> scala.sys.BooleanProp$$anonfun$keyExists$1: apply(Ljava/lang/String;)
scala.sys.BooleanProp$$anonfun$valueIsTrue$1: <init>() ===> scala.runtime.AbstractFunction1: <init>()
scala.sys.BooleanProp$$anonfun$valueIsTrue$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.sys.BooleanProp$$anonfun$valueIsTrue$1: apply(Ljava/lang/Object;) ===> scala.sys.BooleanProp$$anonfun$valueIsTrue$1: apply(Ljava/lang/String;)
scala.sys.BooleanProp$$anonfun$valueIsTrue$1: apply(Ljava/lang/String;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.sys.BooleanProp$$anonfun$valueIsTrue$1: apply(Ljava/lang/String;) ===> java.lang.String: toLowerCase()
scala.sys.BooleanProp$$anonfun$valueIsTrue$1: apply(Ljava/lang/String;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.sys.BooleanProp$: <clinit>() ===> scala.sys.BooleanProp$: <init>()
scala.sys.BooleanProp$: <init>() ===> java.lang.Object: <init>()
scala.sys.BooleanProp$: keyExists(Ljava/lang/String;) ===> scala.sys.BooleanProp$$anonfun$keyExists$1: <init>()
scala.sys.BooleanProp$: keyExists(Ljava/lang/String;) ===> scala.sys.BooleanProp$BooleanPropImpl: <init>(Ljava/lang/String;Lscala/Function1;)
scala.sys.BooleanProp$: valueIsTrue(Ljava/lang/String;) ===> scala.sys.BooleanProp$$anonfun$valueIsTrue$1: <init>()
scala.sys.BooleanProp$: valueIsTrue(Ljava/lang/String;) ===> scala.sys.BooleanProp$BooleanPropImpl: <init>(Ljava/lang/String;Lscala/Function1;)
scala.sys.BooleanProp$BooleanPropImpl: <init>(Ljava/lang/String;Lscala/Function1;) ===> scala.sys.PropImpl: <init>(Ljava/lang/String;Lscala/Function1;)
scala.sys.BooleanProp$BooleanPropImpl: value() ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.sys.BooleanProp$BooleanPropImpl: value() ===> scala.sys.BooleanProp$BooleanPropImpl: value()
scala.sys.package$: <clinit>() ===> scala.sys.package$: <init>()
scala.sys.package$: <init>() ===> java.lang.Object: <init>()
scala.sys.package$: props() ===> scala.sys.SystemProperties: <init>()
scala.sys.PropImpl$$anonfun$get$1: <init>(Lscala/sys/PropImpl;) ===> scala.runtime.AbstractFunction0: <init>()
scala.sys.PropImpl$$anonfun$get$1: apply() ===> scala.sys.PropImpl$$anonfun$get$1: apply()
scala.sys.PropImpl: <init>(Ljava/lang/String;Lscala/Function1;) ===> java.lang.Object: <init>()
scala.sys.PropImpl: get() ===> scala.collection.mutable.Map: getOrElse(Ljava/lang/Object;Lscala/Function0;)
scala.sys.PropImpl: get() ===> scala.sys.PropImpl$$anonfun$get$1: <init>(Lscala/sys/PropImpl;)
scala.sys.PropImpl: get() ===> scala.sys.PropImpl: isSet()
scala.sys.PropImpl: get() ===> scala.sys.PropImpl: key()
scala.sys.PropImpl: get() ===> scala.sys.PropImpl: underlying()
scala.sys.PropImpl: getString() ===> scala.collection.mutable.StringBuilder: <init>()
scala.sys.PropImpl: getString() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.sys.PropImpl: getString() ===> scala.collection.mutable.StringBuilder: toString()
scala.sys.PropImpl: getString() ===> scala.sys.PropImpl: get()
scala.sys.PropImpl: getString() ===> scala.sys.PropImpl: isSet()
scala.sys.PropImpl: isSet() ===> scala.collection.mutable.Map: contains(Ljava/lang/Object;)
scala.sys.PropImpl: isSet() ===> scala.sys.PropImpl: key()
scala.sys.PropImpl: isSet() ===> scala.sys.PropImpl: underlying()
scala.sys.PropImpl: toString() ===> scala.collection.immutable.StringLike: format(Lscala/collection/Seq;)
scala.sys.PropImpl: toString() ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
scala.sys.PropImpl: toString() ===> scala.LowPriorityImplicits: genericWrapArray(Ljava/lang/Object;)
scala.sys.PropImpl: toString() ===> scala.sys.PropImpl: getString()
scala.sys.PropImpl: toString() ===> scala.sys.PropImpl: key()
scala.sys.PropImpl: underlying() ===> scala.sys.package$: props()
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> scala.Function1: apply(Ljava/lang/Object;)
scala.sys.PropImpl: value() ===> scala.sys.PropImpl: get()
scala.sys.PropImpl: value() ===> scala.sys.PropImpl: isSet()
scala.sys.PropImpl: value() ===> scala.sys.PropImpl: zero()
scala.sys.SystemProperties$$anonfun$$plus$eq$1: <init>(Lscala/sys/SystemProperties;Lscala/Tuple2;) ===> scala.runtime.AbstractFunction0: <init>()
scala.sys.SystemProperties$$anonfun$$plus$eq$1: apply() ===> java.lang.System: setProperty(Ljava/lang/String;Ljava/lang/String;)
scala.sys.SystemProperties$$anonfun$$plus$eq$1: apply() ===> scala.sys.SystemProperties$$anonfun$$plus$eq$1: apply()
scala.sys.SystemProperties$$anonfun$$plus$eq$1: apply() ===> scala.Tuple2: _1()
scala.sys.SystemProperties$$anonfun$$plus$eq$1: apply() ===> scala.Tuple2: _2()
scala.sys.SystemProperties$$anonfun$contains$1: <init>(Lscala/sys/SystemProperties;Ljava/lang/String;) ===> java.lang.NullPointerException: <init>()
scala.sys.SystemProperties$$anonfun$contains$1: <init>(Lscala/sys/SystemProperties;Ljava/lang/String;) ===> scala.runtime.AbstractFunction0$mcZ$sp: <init>()
scala.sys.SystemProperties$$anonfun$contains$1: apply() ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.sys.SystemProperties$$anonfun$contains$1: apply() ===> scala.sys.SystemProperties$$anonfun$contains$1: apply()
scala.sys.SystemProperties$$anonfun$contains$1: apply() ===> scala.sys.SystemProperties: scala$sys$SystemProperties$$super$contains(Ljava/lang/String;)
scala.sys.SystemProperties$$anonfun$get$1: <init>(Lscala/sys/SystemProperties;Ljava/lang/String;) ===> scala.runtime.AbstractFunction0: <init>()
scala.sys.SystemProperties$$anonfun$get$1: apply() ===> java.lang.System: getProperty(Ljava/lang/String;)
scala.sys.SystemProperties$$anonfun$get$1: apply() ===> scala.Option$: apply(Ljava/lang/Object;)
scala.sys.SystemProperties$$anonfun$get$1: apply() ===> scala.sys.SystemProperties$$anonfun$get$1: apply()
scala.sys.SystemProperties$$anonfun$iterator$1: <init>(Lscala/sys/SystemProperties;) ===> scala.runtime.AbstractFunction0: <init>()
scala.sys.SystemProperties$$anonfun$iterator$1: apply() ===> java.lang.System: getProperties()
scala.sys.SystemProperties$$anonfun$iterator$1: apply() ===> scala.collection.convert.DecorateAsScala: propertiesAsScalaMapConverter(Ljava/util/Properties;)
scala.sys.SystemProperties$$anonfun$iterator$1: apply() ===> scala.collection.convert.Decorators$AsScala: asScala()
scala.sys.SystemProperties$$anonfun$iterator$1: apply() ===> scala.collection.MapLike: iterator()
scala.sys.SystemProperties$$anonfun$iterator$1: apply() ===> scala.sys.SystemProperties$$anonfun$iterator$1: apply()
scala.sys.SystemProperties$: <clinit>() ===> scala.sys.SystemProperties$: <init>()
scala.sys.SystemProperties$: <init>() ===> java.lang.Object: <init>()
scala.sys.SystemProperties$: addHelp(Lscala/sys/Prop;Ljava/lang/String;) ===> scala.collection.mutable.Map: update(Ljava/lang/Object;Ljava/lang/Object;)
scala.sys.SystemProperties$: addHelp(Lscala/sys/Prop;Ljava/lang/String;) ===> scala.sys.Prop: key()
scala.sys.SystemProperties$: addHelp(Lscala/sys/Prop;Ljava/lang/String;) ===> scala.sys.SystemProperties$: propertyHelp()
scala.sys.SystemProperties$: bool(Ljava/lang/String;Ljava/lang/String;) ===> java.lang.String: startsWith(Ljava/lang/String;)
scala.sys.SystemProperties$: bool(Ljava/lang/String;Ljava/lang/String;) ===> scala.sys.BooleanProp$: keyExists(Ljava/lang/String;)
scala.sys.SystemProperties$: bool(Ljava/lang/String;Ljava/lang/String;) ===> scala.sys.BooleanProp$: valueIsTrue(Ljava/lang/String;)
scala.sys.SystemProperties$: bool(Ljava/lang/String;Ljava/lang/String;) ===> scala.sys.SystemProperties$: addHelp(Lscala/sys/Prop;Ljava/lang/String;)
scala.sys.SystemProperties$: noTraceSupression$lzycompute() ===> scala.sys.SystemProperties$: bool(Ljava/lang/String;Ljava/lang/String;)
scala.sys.SystemProperties$: noTraceSupression() ===> scala.sys.SystemProperties$: noTraceSupression$lzycompute()
scala.sys.SystemProperties$: propertyHelp$lzycompute() ===> scala.collection.generic.GenMapFactory: apply(Lscala/collection/Seq;)
scala.sys.SystemProperties$: propertyHelp() ===> scala.sys.SystemProperties$: propertyHelp$lzycompute()
scala.sys.SystemProperties: $plus$eq(Ljava/lang/Object;) ===> scala.sys.SystemProperties: $plus$eq(Lscala/Tuple2;)
scala.sys.SystemProperties: $plus$eq(Lscala/Tuple2;) ===> scala.sys.SystemProperties$$anonfun$$plus$eq$1: <init>(Lscala/sys/SystemProperties;Lscala/Tuple2;)
scala.sys.SystemProperties: $plus$eq(Lscala/Tuple2;) ===> scala.sys.SystemProperties: $plus$eq(Lscala/Tuple2;)
scala.sys.SystemProperties: $plus$eq(Lscala/Tuple2;) ===> scala.sys.SystemProperties: wrapAccess(Lscala/Function0;)
scala.sys.SystemProperties: <init>() ===> scala.collection.mutable.AbstractMap: <init>()
scala.sys.SystemProperties: contains(Ljava/lang/Object;) ===> scala.sys.SystemProperties: contains(Ljava/lang/String;)
scala.sys.SystemProperties: contains(Ljava/lang/String;) ===> scala.Option: get()
scala.sys.SystemProperties: contains(Ljava/lang/String;) ===> scala.Option: isEmpty()
scala.sys.SystemProperties: contains(Ljava/lang/String;) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
scala.sys.SystemProperties: contains(Ljava/lang/String;) ===> scala.sys.SystemProperties$$anonfun$contains$1: <init>(Lscala/sys/SystemProperties;Ljava/lang/String;)
scala.sys.SystemProperties: contains(Ljava/lang/String;) ===> scala.sys.SystemProperties: wrapAccess(Lscala/Function0;)
scala.sys.SystemProperties: default(Ljava/lang/Object;) ===> scala.sys.SystemProperties: default(Ljava/lang/String;)
scala.sys.SystemProperties: empty() ===> scala.sys.SystemProperties: <init>()
scala.sys.SystemProperties: empty() ===> scala.sys.SystemProperties: empty()
scala.sys.SystemProperties: get(Ljava/lang/Object;) ===> scala.sys.SystemProperties: get(Ljava/lang/String;)
scala.sys.SystemProperties: get(Ljava/lang/String;) ===> scala.Option: get()
scala.sys.SystemProperties: get(Ljava/lang/String;) ===> scala.Option: isEmpty()
scala.sys.SystemProperties: get(Ljava/lang/String;) ===> scala.sys.SystemProperties$$anonfun$get$1: <init>(Lscala/sys/SystemProperties;Ljava/lang/String;)
scala.sys.SystemProperties: get(Ljava/lang/String;) ===> scala.sys.SystemProperties: wrapAccess(Lscala/Function0;)
scala.sys.SystemProperties: iterator() ===> scala.collection.Iterator$: empty()
scala.sys.SystemProperties: iterator() ===> scala.Option: get()
scala.sys.SystemProperties: iterator() ===> scala.Option: isEmpty()
scala.sys.SystemProperties: iterator() ===> scala.sys.SystemProperties$$anonfun$iterator$1: <init>(Lscala/sys/SystemProperties;)
scala.sys.SystemProperties: iterator() ===> scala.sys.SystemProperties: wrapAccess(Lscala/Function0;)
scala.sys.SystemProperties: scala$sys$SystemProperties$$super$contains(Ljava/lang/String;) ===> scala.collection.MapLike$class: contains(Lscala/collection/MapLike;Ljava/lang/Object;)
scala.sys.SystemProperties: wrapAccess(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
scala.sys.SystemProperties: wrapAccess(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
scala.sys.SystemProperties: wrapAccess(Lscala/Function0;) ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
scala.sys.SystemProperties: wrapAccess(Lscala/Function0;) ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
scala.sys.SystemProperties: wrapAccess(Lscala/Function0;) ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
scala.sys.SystemProperties: wrapAccess(Lscala/Function0;) ===> scala.Function0: apply()
scala.sys.SystemProperties: wrapAccess(Lscala/Function0;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> java.lang.Object: <init>()
scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Product$class: $init$(Lscala/Product;)
scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.Product2$class: $init$(Lscala/Product2;)
scala.Tuple2: equals(Ljava/lang/Object;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.Tuple2: equals(Ljava/lang/Object;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.Tuple2: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsCharObject(Ljava/lang/Character;Ljava/lang/Object;)
scala.Tuple2: equals(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: equalsNumObject(Ljava/lang/Number;Ljava/lang/Object;)
scala.Tuple2: equals(Ljava/lang/Object;) ===> scala.Tuple2: _1()
scala.Tuple2: equals(Ljava/lang/Object;) ===> scala.Tuple2: _2()
scala.Tuple2: equals(Ljava/lang/Object;) ===> scala.Tuple2: canEqual(Ljava/lang/Object;)
scala.Tuple2: hashCode() ===> scala.runtime.ScalaRunTime$: _hashCode(Lscala/Product;)
scala.Tuple2: productArity() ===> scala.Product2$class: productArity(Lscala/Product2;)
scala.Tuple2: productElement(I) ===> scala.Product2$class: productElement(Lscala/Product2;I)
scala.Tuple2: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.Tuple2: toString() ===> scala.collection.mutable.StringBuilder: <init>()
scala.Tuple2: toString() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.Tuple2: toString() ===> scala.collection.mutable.StringBuilder: toString()
scala.Tuple2: toString() ===> scala.Tuple2: _1()
scala.Tuple2: toString() ===> scala.Tuple2: _2()
scala.util.control.BreakControl: <init>() ===> java.lang.Throwable: <init>()
scala.util.control.BreakControl: <init>() ===> scala.util.control.NoStackTrace$class: $init$(Lscala/util/control/NoStackTrace;)
scala.util.control.BreakControl: fillInStackTrace() ===> scala.util.control.NoStackTrace$class: fillInStackTrace(Lscala/util/control/NoStackTrace;)
scala.util.control.BreakControl: scala$util$control$NoStackTrace$$super$fillInStackTrace() ===> java.lang.Throwable: fillInStackTrace()
scala.util.control.Breaks: <init>() ===> java.lang.Object: <init>()
scala.util.control.Breaks: <init>() ===> scala.util.control.BreakControl: <init>()
scala.util.control.NoStackTrace$: <clinit>() ===> scala.util.control.NoStackTrace$: <init>()
scala.util.control.NoStackTrace$: <init>() ===> java.lang.Object: <init>()
scala.util.control.NoStackTrace$: <init>() ===> scala.sys.BooleanProp: value()
scala.util.control.NoStackTrace$: <init>() ===> scala.sys.SystemProperties$: noTraceSupression()
scala.util.control.NoStackTrace$: <init>() ===> scala.util.control.NoStackTrace$: _noSuppression_$eq(Z)
scala.util.control.NoStackTrace$: noSuppression() ===> scala.util.control.NoStackTrace$: _noSuppression()
scala.util.control.NoStackTrace$class: fillInStackTrace(Lscala/util/control/NoStackTrace;) ===> scala.util.control.NoStackTrace$: noSuppression()
scala.util.control.NoStackTrace$class: fillInStackTrace(Lscala/util/control/NoStackTrace;) ===> scala.util.control.NoStackTrace: scala$util$control$NoStackTrace$$super$fillInStackTrace()
scala.util.DynamicVariable$$anon$1: <init>(Lscala/util/DynamicVariable;) ===> java.lang.InheritableThreadLocal: <init>()
scala.util.DynamicVariable$$anon$1: <init>(Lscala/util/DynamicVariable;) ===> java.lang.NullPointerException: <init>()
scala.util.DynamicVariable: <init>(Ljava/lang/Object;) ===> java.lang.Object: <init>()
scala.util.DynamicVariable: <init>(Ljava/lang/Object;) ===> scala.util.DynamicVariable$$anon$1: <init>(Lscala/util/DynamicVariable;)
scala.util.DynamicVariable: toString() ===> scala.collection.mutable.StringBuilder: <init>()
scala.util.DynamicVariable: toString() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.util.DynamicVariable: toString() ===> scala.collection.mutable.StringBuilder: toString()
scala.util.DynamicVariable: toString() ===> scala.util.DynamicVariable: value()
scala.util.DynamicVariable: value() ===> java.lang.ThreadLocal: get()
scala.util.DynamicVariable: value() ===> scala.util.DynamicVariable: tl()
scala.util.Either$: <clinit>() ===> scala.util.Either$: <init>()
scala.util.Either$: <init>() ===> java.lang.Object: <init>()
scala.util.hashing.MurmurHash3$$anonfun$orderedHash$1: <init>(Lscala/util/hashing/MurmurHash3;Lscala/runtime/IntRef;Lscala/runtime/IntRef;) ===> java.lang.NullPointerException: <init>()
scala.util.hashing.MurmurHash3$$anonfun$orderedHash$1: <init>(Lscala/util/hashing/MurmurHash3;Lscala/runtime/IntRef;Lscala/runtime/IntRef;) ===> scala.runtime.AbstractFunction1: <init>()
scala.util.hashing.MurmurHash3$$anonfun$orderedHash$1: apply(Ljava/lang/Object;) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.util.hashing.MurmurHash3$$anonfun$orderedHash$1: apply(Ljava/lang/Object;) ===> scala.util.hashing.MurmurHash3$$anonfun$orderedHash$1: apply(Ljava/lang/Object;)
scala.util.hashing.MurmurHash3$$anonfun$orderedHash$1: apply(Ljava/lang/Object;) ===> scala.util.hashing.MurmurHash3: mix(II)
scala.util.hashing.MurmurHash3$$anonfun$unorderedHash$1: <init>(Lscala/util/hashing/MurmurHash3;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;) ===> scala.runtime.AbstractFunction1: <init>()
scala.util.hashing.MurmurHash3$$anonfun$unorderedHash$1: apply(Ljava/lang/Object;) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.util.hashing.MurmurHash3$$anonfun$unorderedHash$1: apply(Ljava/lang/Object;) ===> scala.util.hashing.MurmurHash3$$anonfun$unorderedHash$1: apply(Ljava/lang/Object;)
scala.util.hashing.MurmurHash3$: <clinit>() ===> scala.util.hashing.MurmurHash3$: <init>()
scala.util.hashing.MurmurHash3$: <init>() ===> java.lang.String: hashCode()
scala.util.hashing.MurmurHash3$: <init>() ===> scala.util.hashing.MurmurHash3: <init>()
scala.util.hashing.MurmurHash3$: mapHash(Lscala/collection/Map;) ===> scala.util.hashing.MurmurHash3$: mapSeed()
scala.util.hashing.MurmurHash3$: mapHash(Lscala/collection/Map;) ===> scala.util.hashing.MurmurHash3$: unorderedHash(Lscala/collection/TraversableOnce;I)
scala.util.hashing.MurmurHash3$: productHash(Lscala/Product;) ===> scala.util.hashing.MurmurHash3$: productHash(Lscala/Product;I)
scala.util.hashing.MurmurHash3$: seqHash(Lscala/collection/Seq;) ===> scala.util.hashing.MurmurHash3$: listHash(Lscala/collection/immutable/List;I)
scala.util.hashing.MurmurHash3$: seqHash(Lscala/collection/Seq;) ===> scala.util.hashing.MurmurHash3$: orderedHash(Lscala/collection/TraversableOnce;I)
scala.util.hashing.MurmurHash3$: seqHash(Lscala/collection/Seq;) ===> scala.util.hashing.MurmurHash3$: seqSeed()
scala.util.hashing.MurmurHash3$: setHash(Lscala/collection/Set;) ===> scala.util.hashing.MurmurHash3$: setSeed()
scala.util.hashing.MurmurHash3$: setHash(Lscala/collection/Set;) ===> scala.util.hashing.MurmurHash3$: unorderedHash(Lscala/collection/TraversableOnce;I)
scala.util.hashing.MurmurHash3: <init>() ===> java.lang.Object: <init>()
scala.util.hashing.MurmurHash3: finalizeHash(II) ===> scala.util.hashing.MurmurHash3: avalanche(I)
scala.util.hashing.MurmurHash3: listHash(Lscala/collection/immutable/List;I) ===> scala.collection.IterableLike: head()
scala.util.hashing.MurmurHash3: listHash(Lscala/collection/immutable/List;I) ===> scala.collection.SeqLike: isEmpty()
scala.util.hashing.MurmurHash3: listHash(Lscala/collection/immutable/List;I) ===> scala.collection.TraversableLike: tail()
scala.util.hashing.MurmurHash3: listHash(Lscala/collection/immutable/List;I) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.util.hashing.MurmurHash3: listHash(Lscala/collection/immutable/List;I) ===> scala.util.hashing.MurmurHash3: finalizeHash(II)
scala.util.hashing.MurmurHash3: listHash(Lscala/collection/immutable/List;I) ===> scala.util.hashing.MurmurHash3: mix(II)
scala.util.hashing.MurmurHash3: mix(II) ===> java.lang.Integer: rotateLeft(II)
scala.util.hashing.MurmurHash3: mix(II) ===> scala.util.hashing.MurmurHash3: mixLast(II)
scala.util.hashing.MurmurHash3: mixLast(II) ===> java.lang.Integer: rotateLeft(II)
scala.util.hashing.MurmurHash3: orderedHash(Lscala/collection/TraversableOnce;I) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.util.hashing.MurmurHash3: orderedHash(Lscala/collection/TraversableOnce;I) ===> scala.runtime.IntRef: <init>(I)
scala.util.hashing.MurmurHash3: orderedHash(Lscala/collection/TraversableOnce;I) ===> scala.util.hashing.MurmurHash3$$anonfun$orderedHash$1: <init>(Lscala/util/hashing/MurmurHash3;Lscala/runtime/IntRef;Lscala/runtime/IntRef;)
scala.util.hashing.MurmurHash3: orderedHash(Lscala/collection/TraversableOnce;I) ===> scala.util.hashing.MurmurHash3: finalizeHash(II)
scala.util.hashing.MurmurHash3: productHash(Lscala/Product;I) ===> java.lang.String: hashCode()
scala.util.hashing.MurmurHash3: productHash(Lscala/Product;I) ===> scala.Product: productArity()
scala.util.hashing.MurmurHash3: productHash(Lscala/Product;I) ===> scala.Product: productElement(I)
scala.util.hashing.MurmurHash3: productHash(Lscala/Product;I) ===> scala.Product: productPrefix()
scala.util.hashing.MurmurHash3: productHash(Lscala/Product;I) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.util.hashing.MurmurHash3: productHash(Lscala/Product;I) ===> scala.util.hashing.MurmurHash3: finalizeHash(II)
scala.util.hashing.MurmurHash3: productHash(Lscala/Product;I) ===> scala.util.hashing.MurmurHash3: mix(II)
scala.util.hashing.MurmurHash3: unorderedHash(Lscala/collection/TraversableOnce;I) ===> scala.collection.TraversableOnce: foreach(Lscala/Function1;)
scala.util.hashing.MurmurHash3: unorderedHash(Lscala/collection/TraversableOnce;I) ===> scala.runtime.IntRef: <init>(I)
scala.util.hashing.MurmurHash3: unorderedHash(Lscala/collection/TraversableOnce;I) ===> scala.util.hashing.MurmurHash3$$anonfun$unorderedHash$1: <init>(Lscala/util/hashing/MurmurHash3;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;Lscala/runtime/IntRef;)
scala.util.hashing.MurmurHash3: unorderedHash(Lscala/collection/TraversableOnce;I) ===> scala.util.hashing.MurmurHash3: finalizeHash(II)
scala.util.hashing.MurmurHash3: unorderedHash(Lscala/collection/TraversableOnce;I) ===> scala.util.hashing.MurmurHash3: mix(II)
scala.util.hashing.MurmurHash3: unorderedHash(Lscala/collection/TraversableOnce;I) ===> scala.util.hashing.MurmurHash3: mixLast(II)
scala.util.hashing.package$: <clinit>() ===> scala.util.hashing.package$: <init>()
scala.util.hashing.package$: <init>() ===> java.lang.Object: <init>()
scala.util.hashing.package$: byteswap32(I) ===> java.lang.Integer: reverseBytes(I)
scala.util.Left$: <clinit>() ===> scala.util.Left$: <init>()
scala.util.Left$: <init>() ===> java.lang.Object: <init>()
scala.util.matching.Regex: <init>(Ljava/lang/String;Lscala/collection/Seq;) ===> java.lang.Object: <init>()
scala.util.matching.Regex: <init>(Ljava/lang/String;Lscala/collection/Seq;) ===> java.util.regex.Pattern: compile(Ljava/lang/String;)
scala.util.matching.Regex: findFirstIn(Ljava/lang/CharSequence;) ===> java.util.regex.Matcher: find()
scala.util.matching.Regex: findFirstIn(Ljava/lang/CharSequence;) ===> java.util.regex.Matcher: group()
scala.util.matching.Regex: findFirstIn(Ljava/lang/CharSequence;) ===> java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;)
scala.util.matching.Regex: findFirstIn(Ljava/lang/CharSequence;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.util.matching.Regex: findFirstIn(Ljava/lang/CharSequence;) ===> scala.util.matching.Regex: pattern()
scala.util.matching.Regex: replaceFirstIn(Ljava/lang/CharSequence;Ljava/lang/String;) ===> java.util.regex.Matcher: replaceFirst(Ljava/lang/String;)
scala.util.matching.Regex: replaceFirstIn(Ljava/lang/CharSequence;Ljava/lang/String;) ===> java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;)
scala.util.matching.Regex: replaceFirstIn(Ljava/lang/CharSequence;Ljava/lang/String;) ===> scala.util.matching.Regex: pattern()
scala.util.Properties$: <clinit>() ===> scala.util.Properties$: <init>()
scala.util.Properties$: <init>() ===> java.lang.Object: <init>()
scala.util.Properties$: <init>() ===> java.util.jar.Attributes$Name: <init>(Ljava/lang/String;)
scala.util.Properties$: <init>() ===> scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;)
scala.util.Properties$: lineSeparator() ===> scala.util.PropertiesTrait$class: lineSeparator(Lscala/util/PropertiesTrait;)
scala.util.Properties$: propOrElse(Ljava/lang/String;Ljava/lang/String;) ===> scala.util.PropertiesTrait$class: propOrElse(Lscala/util/PropertiesTrait;Ljava/lang/String;Ljava/lang/String;)
scala.util.Properties$: scalaPropOrElse(Ljava/lang/String;Ljava/lang/String;) ===> scala.util.PropertiesTrait$class: scalaPropOrElse(Lscala/util/PropertiesTrait;Ljava/lang/String;Ljava/lang/String;)
scala.util.Properties$: scalaPropOrNone(Ljava/lang/String;) ===> scala.util.PropertiesTrait$class: scalaPropOrNone(Lscala/util/PropertiesTrait;Ljava/lang/String;)
scala.util.Properties$: scalaProps$lzycompute() ===> scala.util.PropertiesTrait$class: scalaProps(Lscala/util/PropertiesTrait;)
scala.util.Properties$: scalaProps() ===> scala.util.Properties$: scalaProps$lzycompute()
scala.util.PropertiesTrait$$anonfun$1: <init>(Lscala/util/PropertiesTrait;) ===> scala.runtime.AbstractFunction1: <init>()
scala.util.PropertiesTrait$$anonfun$1: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.util.PropertiesTrait$$anonfun$1: apply(Ljava/lang/Object;) ===> scala.util.PropertiesTrait$$anonfun$1: apply(Ljava/lang/String;)
scala.util.PropertiesTrait$$anonfun$1: apply(Ljava/lang/String;) ===> java.lang.String: endsWith(Ljava/lang/String;)
scala.util.PropertiesTrait$$anonfun$2: <init>(Lscala/util/PropertiesTrait;) ===> scala.runtime.AbstractFunction1: <init>()
scala.util.PropertiesTrait$$anonfun$2: apply(Ljava/lang/Object;) ===> scala.util.PropertiesTrait$$anonfun$2: apply(Ljava/lang/String;)
scala.util.PropertiesTrait$$anonfun$3: <init>(Lscala/util/PropertiesTrait;) ===> scala.runtime.AbstractFunction1: <init>()
scala.util.PropertiesTrait$$anonfun$3: apply(Ljava/lang/Object;) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
scala.util.PropertiesTrait$$anonfun$3: apply(Ljava/lang/Object;) ===> scala.util.PropertiesTrait$$anonfun$3: apply(Ljava/lang/String;)
scala.util.PropertiesTrait$$anonfun$3: apply(Ljava/lang/String;) ===> java.lang.String: endsWith(Ljava/lang/String;)
scala.util.PropertiesTrait$$anonfun$4: <init>(Lscala/util/PropertiesTrait;) ===> java.lang.NullPointerException: <init>()
scala.util.PropertiesTrait$$anonfun$4: <init>(Lscala/util/PropertiesTrait;) ===> scala.runtime.AbstractFunction1: <init>()
scala.util.PropertiesTrait$$anonfun$4: apply(Ljava/lang/Object;) ===> scala.util.PropertiesTrait$$anonfun$4: apply(Ljava/lang/String;)
scala.util.PropertiesTrait$$anonfun$4: apply(Ljava/lang/String;) ===> scala.Option: get()
scala.util.PropertiesTrait$$anonfun$4: apply(Ljava/lang/String;) ===> scala.Option: isEmpty()
scala.util.PropertiesTrait$$anonfun$4: apply(Ljava/lang/String;) ===> scala.Some: <init>(Ljava/lang/Object;)
scala.util.PropertiesTrait$$anonfun$4: apply(Ljava/lang/String;) ===> scala.util.PropertiesTrait: scalaPropOrNone(Ljava/lang/String;)
scala.util.PropertiesTrait$$anonfun$scalaProps$1: <init>(Lscala/util/PropertiesTrait;Ljava/util/Properties;Ljava/io/InputStream;) ===> scala.runtime.AbstractFunction0$mcV$sp: <init>()
scala.util.PropertiesTrait$$anonfun$scalaProps$1: apply$mcV$sp() ===> java.util.Properties: load(Ljava/io/InputStream;)
scala.util.PropertiesTrait$$anonfun$scalaProps$1: apply() ===> java.util.Properties: load(Ljava/io/InputStream;)
scala.util.PropertiesTrait$$anonfun$scalaProps$1: apply() ===> scala.util.PropertiesTrait$$anonfun$scalaProps$1: apply()
scala.util.PropertiesTrait$$anonfun$scalaProps$2: <init>(Lscala/util/PropertiesTrait;Ljava/io/InputStream;) ===> scala.runtime.AbstractFunction0$mcV$sp: <init>()
scala.util.PropertiesTrait$$anonfun$scalaProps$2: apply() ===> scala.util.PropertiesTrait$$anonfun$scalaProps$2: apply()
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.collection.mutable.StringBuilder: <init>()
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.collection.mutable.StringBuilder: toString()
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.Option$WithFilter: <init>(Lscala/Option;Lscala/Function1;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.Option$WithFilter: flatMap(Lscala/Function1;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.Option$WithFilter: map(Lscala/Function1;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait$$anonfun$1: <init>(Lscala/util/PropertiesTrait;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait$$anonfun$2: <init>(Lscala/util/PropertiesTrait;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait$$anonfun$3: <init>(Lscala/util/PropertiesTrait;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait$$anonfun$4: <init>(Lscala/util/PropertiesTrait;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: propCategory()
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: scala$util$PropertiesTrait$_setter_$copyrightString_$eq(Ljava/lang/String;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: scala$util$PropertiesTrait$_setter_$developmentVersion_$eq(Lscala/Option;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: scala$util$PropertiesTrait$_setter_$propFilename_$eq(Ljava/lang/String;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: scala$util$PropertiesTrait$_setter_$releaseVersion_$eq(Lscala/Option;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: scala$util$PropertiesTrait$_setter_$versionString_$eq(Ljava/lang/String;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: scalaPropOrElse(Ljava/lang/String;Ljava/lang/String;)
scala.util.PropertiesTrait$class: $init$(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: scalaPropOrNone(Ljava/lang/String;)
scala.util.PropertiesTrait$class: lineSeparator(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: propOrElse(Ljava/lang/String;Ljava/lang/String;)
scala.util.PropertiesTrait$class: propOrElse(Lscala/util/PropertiesTrait;Ljava/lang/String;Ljava/lang/String;) ===> java.lang.System: getProperty(Ljava/lang/String;Ljava/lang/String;)
scala.util.PropertiesTrait$class: quietlyDispose(Lscala/util/PropertiesTrait;Lscala/Function0;Lscala/Function0;) ===> scala.Function0: apply$mcV$sp()
scala.util.PropertiesTrait$class: scalaPropOrElse(Lscala/util/PropertiesTrait;Ljava/lang/String;Ljava/lang/String;) ===> java.util.Properties: getProperty(Ljava/lang/String;Ljava/lang/String;)
scala.util.PropertiesTrait$class: scalaPropOrElse(Lscala/util/PropertiesTrait;Ljava/lang/String;Ljava/lang/String;) ===> scala.util.PropertiesTrait: scalaProps()
scala.util.PropertiesTrait$class: scalaPropOrNone(Lscala/util/PropertiesTrait;Ljava/lang/String;) ===> java.util.Properties: getProperty(Ljava/lang/String;)
scala.util.PropertiesTrait$class: scalaPropOrNone(Lscala/util/PropertiesTrait;Ljava/lang/String;) ===> scala.Option$: apply(Ljava/lang/Object;)
scala.util.PropertiesTrait$class: scalaPropOrNone(Lscala/util/PropertiesTrait;Ljava/lang/String;) ===> scala.util.PropertiesTrait: scalaProps()
scala.util.PropertiesTrait$class: scalaProps(Lscala/util/PropertiesTrait;) ===> java.util.Properties: <init>()
scala.util.PropertiesTrait$class: scalaProps(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait$$anonfun$scalaProps$1: <init>(Lscala/util/PropertiesTrait;Ljava/util/Properties;Ljava/io/InputStream;)
scala.util.PropertiesTrait$class: scalaProps(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait$$anonfun$scalaProps$2: <init>(Lscala/util/PropertiesTrait;Ljava/io/InputStream;)
scala.util.PropertiesTrait$class: scalaProps(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait$class: quietlyDispose(Lscala/util/PropertiesTrait;Lscala/Function0;Lscala/Function0;)
scala.util.PropertiesTrait$class: scalaProps(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: pickJarBasedOn()
scala.util.PropertiesTrait$class: scalaProps(Lscala/util/PropertiesTrait;) ===> scala.util.PropertiesTrait: propFilename()
scala.util.Right$: <clinit>() ===> scala.util.Right$: <init>()
scala.util.Right$: <init>() ===> java.lang.Object: <init>()
scala.xml.Equality$: <clinit>() ===> scala.xml.Equality$: <init>()
scala.xml.Equality$: <init>() ===> java.lang.Object: <init>()
scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Ljava/lang/String;)
scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Ljava/lang/Object;) ===> scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Lscala/xml/Node;)
scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Ljava/lang/String;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Ljava/lang/String;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Lscala/xml/Node;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Lscala/xml/Node;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.xml.Equality$class: doComparison(Lscala/xml/Equality;Ljava/lang/Object;Z) ===> scala.xml.Equality$: asRef(Ljava/lang/Object;)
scala.xml.Equality$class: doComparison(Lscala/xml/Equality;Ljava/lang/Object;Z) ===> scala.xml.Equality$: compareBlithely(Ljava/lang/Object;Ljava/lang/Object;)
scala.xml.Equality$class: doComparison(Lscala/xml/Equality;Ljava/lang/Object;Z) ===> scala.xml.Equality: canEqual(Ljava/lang/Object;)
scala.xml.Equality$class: doComparison(Lscala/xml/Equality;Ljava/lang/Object;Z) ===> scala.xml.Equality: strict_$eq$eq(Lscala/xml/Equality;)
scala.xml.Equality$class: equals(Lscala/xml/Equality;Ljava/lang/Object;) ===> scala.xml.Equality$class: doComparison(Lscala/xml/Equality;Ljava/lang/Object;Z)
scala.xml.Equality$class: hashCode(Lscala/xml/Equality;) ===> scala.runtime.ScalaRunTime$: hash(Ljava/lang/Object;)
scala.xml.Equality$class: hashCode(Lscala/xml/Equality;) ===> scala.xml.Equality: basisForHashCode()
scala.xml.NamespaceBinding: <init>(Ljava/lang/String;Ljava/lang/String;Lscala/xml/NamespaceBinding;) ===> java.lang.IllegalArgumentException: <init>(Ljava/lang/String;)
scala.xml.NamespaceBinding: <init>(Ljava/lang/String;Ljava/lang/String;Lscala/xml/NamespaceBinding;) ===> java.lang.Object: <init>()
scala.xml.NamespaceBinding: <init>(Ljava/lang/String;Ljava/lang/String;Lscala/xml/NamespaceBinding;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.xml.NamespaceBinding: <init>(Ljava/lang/String;Ljava/lang/String;Lscala/xml/NamespaceBinding;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.xml.NamespaceBinding: <init>(Ljava/lang/String;Ljava/lang/String;Lscala/xml/NamespaceBinding;) ===> scala.Product$class: $init$(Lscala/Product;)
scala.xml.NamespaceBinding: <init>(Ljava/lang/String;Ljava/lang/String;Lscala/xml/NamespaceBinding;) ===> scala.xml.Equality$class: $init$(Lscala/xml/Equality;)
scala.xml.NamespaceBinding: basisForHashCode() ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
scala.xml.NamespaceBinding: basisForHashCode() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
scala.xml.NamespaceBinding: basisForHashCode() ===> scala.xml.NamespaceBinding: parent()
scala.xml.NamespaceBinding: basisForHashCode() ===> scala.xml.NamespaceBinding: prefix()
scala.xml.NamespaceBinding: basisForHashCode() ===> scala.xml.NamespaceBinding: uri()
scala.xml.NamespaceBinding: equals(Ljava/lang/Object;) ===> scala.xml.Equality$class: equals(Lscala/xml/Equality;Ljava/lang/Object;)
scala.xml.NamespaceBinding: hashCode() ===> scala.xml.Equality$class: hashCode(Lscala/xml/Equality;)
scala.xml.NamespaceBinding: productElement(I) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
scala.xml.NamespaceBinding: productElement(I) ===> java.lang.Object: toString()
scala.xml.NamespaceBinding: productElement(I) ===> org.clapper.argot.CommandLineOption: toString()
scala.xml.NamespaceBinding: productElement(I) ===> org.clapper.argot.Parameter: toString()
scala.xml.NamespaceBinding: productElement(I) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
scala.xml.NamespaceBinding: productElement(I) ===> scala.xml.NamespaceBinding: parent()
scala.xml.NamespaceBinding: productElement(I) ===> scala.xml.NamespaceBinding: prefix()
scala.xml.NamespaceBinding: productElement(I) ===> scala.xml.NamespaceBinding: uri()
scala.xml.NamespaceBinding: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
scala.xml.NamespaceBinding: strict_$eq$eq(Lscala/xml/Equality;) ===> java.lang.Object: equals(Ljava/lang/Object;)
scala.xml.NamespaceBinding: strict_$eq$eq(Lscala/xml/Equality;) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
scala.xml.NamespaceBinding: strict_$eq$eq(Lscala/xml/Equality;) ===> scala.xml.NamespaceBinding: parent()
scala.xml.NamespaceBinding: strict_$eq$eq(Lscala/xml/Equality;) ===> scala.xml.NamespaceBinding: prefix()
scala.xml.NamespaceBinding: strict_$eq$eq(Lscala/xml/Equality;) ===> scala.xml.NamespaceBinding: uri()
scala.xml.TopScope$: <clinit>() ===> scala.xml.TopScope$: <init>()
scala.xml.TopScope$: <init>() ===> scala.xml.NamespaceBinding: <init>(Ljava/lang/String;Ljava/lang/String;Lscala/xml/NamespaceBinding;)