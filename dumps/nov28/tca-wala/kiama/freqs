toString :: 229763
equals :: 201662
apply :: 136330
blob :: 1710
<init> :: 1020
parser2packrat :: 593
hashCode :: 544
productIterator :: 432
apply$mcV$sp :: 354
$init$ :: 292
parseAll :: 241
productElement :: 235
productArity :: 235
isDefinedAt :: 233
literal :: 213
regex :: 147
text :: 111
phrase :: 103
productPrefix :: 103
rep1sep :: 92
empty :: 80
line :: 80
rep :: 80
left :: 78
handleWhiteSpace :: 78
right :: 78
rep1 :: 77
parse :: 77
assertParseOk :: 73
toDoc :: 66
success :: 65
$tilde :: 64
parser :: 60
fail :: 58
org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer :: 57
pretty :: 54
process :: 53
emitln :: 49
assert :: 49
expr :: 47
group :: 46
linebreak :: 46
applyOrElse :: 44
whiteSpace :: 44
org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer :: 41
opt :: 40
memo :: 39
scala$util$parsing$combinator$PackratParsers$$super$Parser :: 38
acceptIf :: 38
scala$util$parsing$combinator$RegexParsers$$super$positioned :: 38
scala$util$parsing$combinator$RegexParsers$$super$phrase :: 38
scala$util$parsing$combinator$PackratParsers$$super$phrase :: 38
scala$util$parsing$combinator$Parsers$$lastNoSuccessVar :: 38
elem :: 38
scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq :: 38
scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute :: 38
commit :: 38
not :: 37
org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer :: 37
canEqual :: 36
translate :: 35
-> :: 34
nest :: 34
exp :: 33
start :: 32
expectResult :: 30
program :: 30
factor$lzycompute :: 28
org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer :: 28
convertToEqualizer :: 28
ident :: 27
factor :: 27
NoSuccess :: 26
org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer :: 26
assertEvalAll :: 26
skipWhitespace :: 26
check :: 26
initTree :: 25
execute :: 24
test :: 24
assertParseError :: 23
parser$lzycompute :: 23
keyword :: 22
org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq :: 22
priority :: 22
assertParseError$default$6 :: 22
org$scalatest$FunSuite$$engine :: 21
org$scalatest$Suite$_setter_$styleName_$eq :: 21
org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq :: 21
org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer :: 21
newAssertionFailedException :: 21
org$scalatest$FunSuite$_setter_$styleName_$eq :: 21
org$kiama$example$til$TIL1_1$$anonfun$$$outer :: 20
term$lzycompute :: 20
toParenDoc :: 19
expression :: 19
term :: 19
apply$mcVI$sp :: 19
keyword$lzycompute :: 19
expression$lzycompute :: 18
statement$lzycompute :: 18
statement :: 18
fixity :: 18
org$kiama$util$StdoutEmitter$_setter_$emitter_$eq :: 18
isSemanticallyCorrect :: 17
value :: 16
integer$lzycompute :: 16
<* :: 16
org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq :: 15
block :: 15
org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq :: 15
s :: 15
langlevel :: 15
$less$greater :: 15
org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq :: 15
org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq :: 15
org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq :: 15
integer :: 14
entity :: 14
idnuse :: 14
program$lzycompute :: 14
comment :: 13
toCodeSegment :: 13
:= :: 13
comment$lzycompute :: 13
assertMessage :: 13
whitespaceParser :: 13
org$kiama$rewriting$Rewriter$$anonfun$$$outer :: 13
whitespaceParser$lzycompute :: 13
tipe :: 13
NoSuccess$lzycompute :: 13
beta :: 12
repsep :: 12
elsifs :: 12
exp$lzycompute :: 12
optelse :: 12
code :: 12
integerType :: 12
block$lzycompute :: 12
unknownType :: 12
idndef :: 12
node :: 11
stateTToT :: 11
IDENTIFIER :: 11
booleanType :: 11
messagecount :: 11
<> :: 11
resetmessages :: 11
org$kiama$example$lambda2$Parser$$anonfun$$$outer :: 11
ident$lzycompute :: 11
org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer :: 11
start$lzycompute :: 11
org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer :: 11
evalInst :: 11
raiseException :: 11
variable :: 11
Named$lzycompute :: 10
org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer :: 10
org$kiama$example$imperative$Parser$$anonfun$$$outer :: 10
ifStatement :: 10
transform :: 10
elsif :: 10
assignment :: 10
exptypeDef :: 10
n1 :: 10
vardecl :: 10
compose :: 10
super$evalInst :: 10
whileStatement :: 10
artefact :: 10
org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer :: 10
string :: 10
stack :: 10
mangle :: 10
statementSequence :: 10
string$lzycompute :: 10
vardecl$lzycompute :: 10
control :: 10
tasklevel :: 10
declarations$lzycompute :: 10
subsVar :: 10
attr :: 10
lhs :: 10
n2 :: 10
parent :: 10
rootconstexp$lzycompute :: 9
namedtypedef$lzycompute :: 9
forStatement$lzycompute :: 9
org$kiama$util$Environments$Named$_setter_$id_$eq :: 9
falseConstant$lzycompute :: 9
beta$lzycompute :: 9
subsApp :: 9
value$lzycompute :: 9
simpexp$lzycompute :: 9
constdeclsection$lzycompute :: 9
booleanType$lzycompute :: 9
subsOpn :: 9
unknownType$lzycompute :: 9
idndef$lzycompute :: 9
assignment$lzycompute :: 9
elsif$lzycompute :: 9
idnuse$lzycompute :: 9
assertTransformOk :: 9
env$lzycompute :: 9
statements$lzycompute :: 9
typedecl :: 9
falseConstant :: 9
vardeclsection$lzycompute :: 9
constrainedInt$lzycompute :: 9
trueConstant :: 9
cases :: 9
idndeflist$lzycompute :: 9
forVar$lzycompute :: 9
expconst :: 9
condition$lzycompute :: 9
forVar :: 9
org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq :: 9
simpexp :: 9
typedecl$lzycompute :: 9
constrainedInt :: 9
namedtypedef :: 9
condition :: 9
isconst :: 9
constdeclsection :: 9
arithop :: 9
statementSequence$lzycompute :: 9
trueConstant$lzycompute :: 9
variable$lzycompute :: 9
forStatement :: 9
intexp$lzycompute :: 9
conditions$lzycompute :: 9
org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq :: 9
moduledecl$lzycompute :: 9
emit :: 9
kase$lzycompute :: 9
step$lzycompute :: 9
optelse$lzycompute :: 9
moduledecl :: 9
typedeclsection :: 9
isconst$lzycompute :: 9
FreshVar$lzycompute :: 9
org$kiama$example$lambda3$Parser$$anonfun$$$outer :: 9
statements :: 9
org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq :: 9
org$kiama$util$Environments$Named$$$outer :: 9
constdecl :: 9
arithop$lzycompute :: 9
declarations :: 9
entity$lzycompute :: 9
whileStatement$lzycompute :: 9
lambda :: 9
caseStatement :: 9
vardeclsection :: 9
lhs$lzycompute :: 9
elsifs$lzycompute :: 9
jnumber :: 9
expconst$lzycompute :: 9
intexp :: 9
step :: 9
typedef :: 9
typedeclsection$lzycompute :: 9
constdecl$lzycompute :: 9
kase :: 9
s$lzycompute :: 9
subsLam :: 9
env :: 9
integerType$lzycompute :: 9
ifStatement$lzycompute :: 9
cases$lzycompute :: 9
org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq :: 9
typedef$lzycompute :: 9
idndeflist :: 9
subsNum :: 9
conditions :: 9
org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq :: 9
rootconstexp :: 9
caseStatement$lzycompute :: 9
read_statement$lzycompute :: 8
super$translate :: 8
for_statement :: 8
for_statement$lzycompute :: 8
super$toDoc :: 8
assignment_statement$lzycompute :: 8
identifier :: 8
org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$$outer :: 8
keywordStrings :: 8
n3 :: 8
+ :: 8
declaration$lzycompute :: 8
write_statement :: 8
write_statement$lzycompute :: 8
if_statement$lzycompute :: 8
name :: 8
while_statement$lzycompute :: 8
subsNum$lzycompute :: 8
while_statement :: 8
subsLam$lzycompute :: 8
subsApp$lzycompute :: 8
primary :: 8
declaration :: 8
read_statement :: 8
assignment_statement :: 8
subsOpn$lzycompute :: 8
subsVar$lzycompute :: 8
primary$lzycompute :: 8
org$kiama$example$imperative$Parser$$anonfun$$anonfun$$$outer :: 8
lambda$lzycompute :: 8
identifier$lzycompute :: 8
org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq :: 8
if_statement :: 8
n :: 7
semi :: 7
jarray :: 7
org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$$outer :: 7
jobject :: 7
typebasetype :: 7
pos :: 7
info :: 7
constToTupleFunction2 :: 7
super$check :: 7
attempt :: 7
org$kiama$example$oberon0$base$Parser$$anonfun$$$outer :: 7
MemoState :: 6
org$kiama$example$oberon0$L2$Parser$$anonfun$$$outer :: 6
org$kiama$example$iswim$compiler$CodeGenerator$$anonfun$$$outer :: 6
org$kiama$example$lambda2$ParLazyShare$$anonfun$$$outer :: 6
org$kiama$rewriting$Rewriter$$anon$$$outer :: 6
super$toParenDoc :: 6
Parser :: 6
statementDef :: 6
org$kiama$example$lambda2$ParEagerSubst$$anonfun$$$outer :: 6
semisep :: 6
matchclause :: 6
base :: 6
n4 :: 6
expectEval :: 6
basetypeToDoc :: 6
main :: 6
semisep$default$2 :: 6
i :: 6
exptype :: 6
op :: 6
org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$$outer :: 6
idn :: 6
deftype :: 6
idn$lzycompute :: 6
basetype :: 6
writeProc$lzycompute :: 5
<+> :: 5
org$kiama$example$til$TIL2_1Tests$$anonfun$$$outer :: 5
level :: 5
fpsection :: 5
parameters :: 5
usageMessage :: 5
super$keywordStrings :: 5
driver :: 5
readProc :: 5
level$lzycompute :: 5
org$kiama$example$picojava$Parser$$anonfun$$$outer :: 5
procedureDeclaration$lzycompute :: 5
tipe$lzycompute :: 5
fpsection$lzycompute :: 5
typebasetype$lzycompute :: 5
writelnProc :: 5
exptype$lzycompute :: 5
name$lzycompute :: 5
parens :: 5
processargs :: 5
org$kiama$example$iswim$secd$IntegerOps$IntValue$$$outer :: 5
isLvalue :: 5
org$kiama$example$oberon0$L4$Parser$$anonfun$$anonfun$$$outer :: 5
idntype :: 5
paramAttr :: 5
org$kiama$example$lambda$Parser$$anonfun$$$outer :: 5
optvar :: 5
stmts :: 5
optformalParameters$lzycompute :: 5
vsep :: 5
readProc$lzycompute :: 5
org$kiama$example$lambda2$ParLazy$$anonfun$$$outer :: 5
space :: 5
idntype$lzycompute :: 5
FreshVar :: 5
Pos$lzycompute :: 5
setPos :: 5
reducesinlambdas :: 5
optActualParameters$lzycompute :: 5
org$kiama$example$oberon0$L4$Parser$$anonfun$$$outer :: 5
writeProc :: 5
writelnProc$lzycompute :: 5
isCompatible :: 5
x :: 5
guard :: 5
procedureDeclaration :: 5
org$kiama$example$iswim$compiler$CodeGenerator$$anonfun$$anonfun$$$outer :: 5
org$kiama$example$oberon0$L1$Parser$$anonfun$$$outer :: 5
optformalParameters :: 5
entityFromDecl :: 5
org$kiama$example$oberon0$base$TestDriver$_setter_$maxlanglevel_$eq :: 5
optActualParameters :: 5
org$kiama$example$oberon0$base$TestDriver$_setter_$pprintastFlagDefault_$eq :: 5
optvar$lzycompute :: 5
deftype$lzycompute :: 5
procedureCall :: 5
resetflags :: 5
andThen :: 5
org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 5
procedureCall$lzycompute :: 5
throwtoexpr$lzycompute :: 4
valexpr$lzycompute :: 4
primstmt :: 4
valexpr :: 4
org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$$outer :: 4
org$kiama$example$json$SyntaxAnalysis$$anonfun$$$outer :: 4
callccexpr :: 4
result :: 4
letLet :: 4
letrecstmt$lzycompute :: 4
org$kiama$example$oberon0$L3$Parser$$anonfun$$anonfun$$$outer :: 4
expr$lzycompute :: 4
t :: 4
lambdaexpr :: 4
b :: 4
parenexpr :: 4
term2$lzycompute :: 4
sanitise :: 4
org$kiama$example$lambda2$ParLazyShare$$anonfun$$anonfun$$$outer :: 4
org$kiama$example$lambda2$EagerSubst$$anonfun$$$outer :: 4
letLet$lzycompute :: 4
letrecexpr$lzycompute :: 4
tupleexpr$lzycompute :: 4
term4$lzycompute :: 4
org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 4
lambdaexpr$lzycompute :: 4
blockexpr :: 4
super$exptypeDef :: 4
nest$default$2 :: 4
blockexpr$lzycompute :: 4
term1 :: 4
letstmt$lzycompute :: 4
matchexpr$lzycompute :: 4
pattern :: 4
term4 :: 4
parenexpr$lzycompute :: 4
throwtoexpr :: 4
applic :: 4
returnexpr :: 4
whileexpr$lzycompute :: 4
emptyexpr :: 4
term1$lzycompute :: 4
rootconstexpDef :: 4
exprstmt :: 4
pretty$default$2 :: 4
stmt :: 4
ifelseexpr :: 4
tupleexpr :: 4
identRegex :: 4
fields :: 4
org$kiama$example$lambda2$ParLazySubst$$anonfun$$$outer :: 4
isNotArray :: 4
org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$anonfun$$$outer :: 4
term3 :: 4
letstmt :: 4
emptyexpr$lzycompute :: 4
resetMemo :: 4
letexpr$lzycompute :: 4
whileexpr :: 4
returnexpr$lzycompute :: 4
intRegex$lzycompute :: 4
primTable :: 4
org$kiama$rewriting$Rewriter$$anonfun$$anonfun$$$outer :: 4
letrecstmt :: 4
liter$lzycompute :: 4
matchexpr :: 4
pattern$lzycompute :: 4
matchclause$lzycompute :: 4
org$kiama$example$lambda2$LazySubst$$anonfun$$$outer :: 4
liter :: 4
exprstmt$lzycompute :: 4
mkrefexpr :: 4
term3$lzycompute :: 4
isVariable :: 4
callccexpr$lzycompute :: 4
intRegex :: 4
ifelseexpr$lzycompute :: 4
mkrefexpr$lzycompute :: 4
apply$mcI$sp :: 4
identRegex$lzycompute :: 4
jstring :: 4
errors :: 4
super$statementDef :: 4
reset :: 4
applic$lzycompute :: 4
letexpr :: 4
stmt$lzycompute :: 4
term2 :: 4
letrecexpr :: 4
stringLiteral :: 4
org$kiama$example$iswim$compiler$Parser$_setter_$reserved_$eq :: 4
primstmt$lzycompute :: 4
n5 :: 4
org$kiama$example$lambda2$Parser$$anonfun$$anonfun$$$outer :: 4
lterm :: 3
filetests$default$6 :: 3
xtends :: 3
org$kiama$example$dataflow$Parser$$anonfun$$$outer :: 3
prev :: 3
org$kiama$example$iswim$secd$BooleanOps$FalseValue$$$outer :: 3
op$lzycompute :: 3
hasChildren :: 3
org$kiama$example$lambda$Parser$$anonfun$$anonfun$$$outer :: 3
org$kiama$example$oberon0$base$TransformingDriver$_setter_$pprintiastFlagDefault_$eq :: 3
while_stmt :: 3
envir :: 3
class_decl$lzycompute :: 3
filetests :: 3
org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$anonfun$$$outer :: 3
class_decl :: 3
rule :: 3
IDENTIFIER$lzycompute :: 3
failParseError :: 3
failExpectedTest :: 3
numparams :: 3
initTreeProperties :: 3
block_stmt$lzycompute :: 3
rewrite :: 3
org$kiama$example$oberon0$base$TransformingDriver$_setter_$printiastFlagDefault_$eq :: 3
assign_stmt$lzycompute :: 3
cond :: 3
org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envirOut_$eq :: 3
boolean_literal$lzycompute :: 3
constToTupleFunction4 :: 3
block_stmt :: 3
desugarCase$lzycompute :: 3
isFirst :: 3
org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$anonfun$$$outer :: 3
translateFormalParam :: 3
var_decl$lzycompute :: 3
org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$$outer :: 3
elemtype :: 3
<@> :: 3
setNodeChildConnections :: 3
lastChild :: 3
filetests$default$5 :: 3
parseResultToTuple2 :: 3
org$kiama$output$PrettyPrinterBase$DocOps$$$outer :: 3
idntypeDef :: 3
constToTupleFunction3 :: 3
reader$lzycompute :: 3
envout :: 3
org$kiama$example$lambda2$EagerSubst$$anonfun$$anonfun$$$outer :: 3
declarationsDef :: 3
org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envir_$eq :: 3
org$kiama$example$iswim$secd$StringOps$StringValue$$$outer :: 3
parameters$lzycompute :: 3
everywherebu :: 3
super$transform :: 3
xtends$lzycompute :: 3
message :: 3
jfalse :: 3
envin :: 3
super$basetypeToDoc :: 3
org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$unreachable_$eq :: 3
assign_stmt :: 3
childAttr :: 3
org$kiama$output$PrettyPrinter$$anonfun$$$outer :: 3
lhsDef :: 3
failInputEnd :: 3
org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 3
org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$isSemanticallyCorrect_$eq :: 3
filetests$default$7 :: 3
org$kiama$example$oberon0$base$Parser$$anonfun$$anonfun$$$outer :: 3
defenvPairs :: 3
desugarFor$lzycompute :: 3
parent_= :: 3
boolean_literal :: 3
desugarCase :: 3
org$kiama$example$iswim$secd$SECDBase$$anonfun$$$outer :: 3
while_stmt$lzycompute :: 3
deftypeDef :: 3
translateActualParam :: 3
numparams$lzycompute :: 3
blockToDoc :: 3
e$lzycompute$1 :: 3
var_decl :: 3
jnull :: 3
query$lzycompute :: 3
org$kiama$example$picojava$Parser$_setter_$whiteSpace_$eq :: 3
jtrue :: 3
readLine :: 3
org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$anonfun$$$outer :: 3
typedefDef :: 3
org$kiama$example$iswim$secd$BooleanOps$TrueValue$$$outer :: 3
char :: 3
checkargs :: 3
failExpectedTest$default$3 :: 3
isRoot :: 3
tipeDef :: 3
org$kiama$example$lambda2$LazySubst$$anonfun$$anonfun$$$outer :: 3
org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$anonfun$$$outer :: 3
failParseFailure :: 3
org$kiama$util$ParserUtilities$$anonfun$$$outer :: 3
desugarFor :: 3
processline :: 3
query :: 3
org$kiama$rewriting$Rewriter$_setter_$equal_$eq :: 2
org$scalatest$prop$Configuration$_setter_$generatorDrivenConfig_$eq :: 2
parseResultToTuple3 :: 2
normal :: 2
eval :: 2
org$kiama$example$iswim$secd$SECDBase$ClosureValue$$$outer :: 2
jvalue :: 2
org$kiama$output$PrettyPrinter$Doc$$$outer :: 2
super$resetflags :: 2
dosanitisation :: 2
trans :: 2
pos_$eq :: 2
org$kiama$example$lambda$Generator$_setter_$genIdn_$eq :: 2
org$kiama$example$til$TIL2_2Tests$$anonfun$$$outer :: 2
parseResultToTuple6 :: 2
org$kiama$example$iswim$secd$RecordOps$RecordValue$$$outer :: 2
alltd :: 2
noparens :: 2
org$kiama$rewriting$Rewriter$_setter_$ispropersuperterm_$eq :: 2
org$kiama$machine$Machine$ParamUpdate$$$outer :: 2
arraydimensToDoc :: 2
dump :: 2
failure :: 2
index_= :: 2
constant :: 2
org$kiama$example$oberon0$L3$SymbolTable$Parameter$$$outer :: 2
org$kiama$example$oberon0$L3$SymbolTable$Procedure$$$outer :: 2
letLetRen$lzycompute :: 2
exp2 :: 2
_value :: 2
super$rootconstexpDef :: 2
evaluator :: 2
org$kiama$example$oberon0$L0$SymbolTable$IntegerValue$$$outer :: 2
org$kiama$example$lambda$Generator$_setter_$genLeafExp_$eq :: 2
desig :: 2
exp2$lzycompute :: 2
org$kiama$example$oberon0$L0$SymbolTable$Module$$$outer :: 2
prev_= :: 2
Term$lzycompute :: 2
PropertyCheckConfig :: 2
brackets :: 2
reader :: 2
org$kiama$rewriting$Rewriter$_setter_$id_$eq :: 2
org$kiama$example$oberon0$L0$SymbolTable$UserType$$$outer :: 2
number$lzycompute :: 2
mechanisms :: 2
uniquifyNames :: 2
hcat :: 2
translateActualParams :: 2
org$kiama$example$til$TIL2_1$_setter_$declareforvars_$eq :: 2
org$kiama$example$oberon0$L0$SymbolTable$BuiltinType$$$outer :: 2
org$kiama$example$iswim$compiler$CodeGenerator$_setter_$code_$eq :: 2
ifToDoc :: 2
arbVar :: 2
comma :: 2
org$kiama$machine$Machine$ParamState$$$outer :: 2
state :: 2
isDefinedInScope :: 2
jnumber$lzycompute :: 2
next_= :: 2
jpair$lzycompute :: 2
result_= :: 2
blockToDoc$default$2 :: 2
org$kiama$rewriting$Rewriter$Strategy$$$outer :: 2
org$kiama$util$GeneratingREPLBase$_setter_$prompt_$eq :: 2
org$kiama$example$imperative$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 2
handler :: 2
org$kiama$rewriting$Rewriter$_setter_$fail_$eq :: 2
org$kiama$example$lambda$Generator$_setter_$genNum_$eq :: 2
ttype$lzycompute :: 2
all :: 2
org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$anonfun$$$outer :: 2
setup :: 2
setStart :: 2
processast :: 2
jname$lzycompute :: 2
size :: 2
consumeast :: 2
debug :: 2
org$kiama$util$GeneratingREPLBase$_setter_$ignoreWhitespaceLines_$eq :: 2
createAst :: 2
parseResultToTuple5 :: 2
dynAttr :: 2
number :: 2
org$kiama$example$lambda2$ParLazyShare$$anonfun$$anonfun$$anonfun$$$outer :: 2
jname :: 2
org$kiama$rewriting$Rewriter$_setter_$constrcache_$eq :: 2
decls :: 2
canons :: 2
declsection :: 2
constToTupleFunction6 :: 2
mktests :: 2
exp1 :: 2
jstring$lzycompute :: 2
org$kiama$rewriting$NominalRewriter$$anonfun$$$outer :: 2
org$kiama$rewriting$Rewriter$_setter_$isinnernode_$eq :: 2
org$kiama$rewriting$Rewriter$_setter_$isleaf_$eq :: 2
dot :: 2
makeast :: 2
ttype0 :: 2
letLift :: 2
fold :: 2
exp1$lzycompute :: 2
idlistToDoc :: 2
jpair :: 2
n6 :: 2
report :: 2
super$usageMessage :: 2
assertPrettyE :: 2
</> :: 2
letLift$lzycompute :: 2
=:= :: 2
mode :: 2
jobject$lzycompute :: 2
getParams :: 2
org$kiama$example$lambda$Generator$_setter_$genVar_$eq :: 2
colon :: 2
paramtype :: 2
super$entityFromDecl :: 2
org$kiama$machine$Machine$State$$$outer :: 2
circular :: 2
dquotes :: 2
jfalse$lzycompute :: 2
ttype0$lzycompute :: 2
parseResultToTuple4 :: 2
Pos :: 2
tree :: 2
expectQuery :: 2
org$kiama$example$iswim$secd$SECDBase$PrimValue$$$outer :: 2
org$kiama$example$lambda$Evaluator$_setter_$xgc_reduction_$eq :: 2
org$kiama$example$transform$Parser$$anonfun$$$outer :: 2
braces :: 2
hsep :: 2
PropertyCheckConfig$lzycompute :: 2
letDrop :: 2
org$kiama$rewriting$Rewriter$_setter_$ispropersubterm_$eq :: 2
lsep :: 2
canonise :: 2
jvalue$lzycompute :: 2
org$kiama$attribution$Attribution$CachedParamAttribute$$$outer :: 2
OnceParser :: 2
err :: 2
trans$lzycompute :: 2
translateFormalParams :: 2
letLetRen :: 2
org$kiama$example$lambda2$ParLazySubst$$anonfun$$anonfun$$$outer :: 2
org$kiama$example$iswim$secd$HeapOps$RefValue$$$outer :: 2
org$kiama$output$PrettyPrinterBase$PrettyPrintable$$$outer :: 2
letDrop$lzycompute :: 2
org$kiama$example$til$TIL2_2$_setter_$fortowhile_$eq :: 2
genExp :: 2
org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$anonfun$$anonfun$$$outer :: 2
ttype :: 2
inputs :: 2
org$kiama$example$oberon0$L0$SymbolTable$Variable$$$outer :: 2
filetest :: 2
exp0$lzycompute :: 2
super$processargs :: 2
Named :: 2
org$kiama$machine$Machine$ScalarUpdate$$$outer :: 2
org$kiama$example$iswim$secd$ExceptionHandler$$anonfun$$$outer :: 2
messages :: 2
assertPrettyS :: 2
bracket :: 2
jnull$lzycompute :: 2
_children :: 2
bottomup :: 2
compile :: 2
sname :: 2
jarray$lzycompute :: 2
exp0 :: 2
org$kiama$example$prolog$Subst$$anonfun$$$outer :: 2
evalTo :: 2
anyToPrettyPrintable :: 2
org$kiama$example$oberon0$L2$Desugarer$$anonfun$$$outer :: 2
constToTupleFunction5 :: 2
equal :: 2
org$kiama$example$lambda$Evaluator$_setter_$normal_$eq :: 2
fieldname :: 2
generatorDrivenConfig :: 2
org$kiama$example$oberon0$L3$SymbolTable$BuiltinProc$$$outer :: 2
org$kiama$rewriting$Rewriter$_setter_$eq_$eq :: 2
org$kiama$rewriting$Rewriter$_setter_$issuperterm_$eq :: 2
org$kiama$example$oberon0$L0$SymbolTable$Constant$$$outer :: 2
parammode :: 2
org$kiama$rewriting$Rewriter$$anonfun$$anonfun$$anonfun$$$outer :: 2
org$kiama$rewriting$Rewriter$_setter_$issubterm_$eq :: 2
org$kiama$example$lambda$LambdaTests$$anonfun$$$outer :: 2
jtrue$lzycompute :: 2
letOpn :: 1
canon :: 1
clause$lzycompute :: 1
super$declsection :: 1
e :: 1
everywhere :: 1
rbrace :: 1
org$kiama$example$dataflow$ControlFlowImpl$_setter_$succ_$eq :: 1
next :: 1
stm$lzycompute :: 1
reduce :: 1
fi$lzycompute$1 :: 1
org$kiama$example$iswim$secd$StringOps$UserExceptionValue$$$outer :: 1
lookup$default$4 :: 1
updates :: 1
fldidn$lzycompute :: 1
org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$anonfun$$anonfun$$$outer :: 1
super$positioned :: 1
super$envout :: 1
statementseq$lzycompute :: 1
children :: 1
org$kiama$example$iswim$secd$SECDBase$$anon$$$outer :: 1
Tup3$lzycompute :: 1
org$kiama$example$dataflow$VariablesImpl$_setter_$uses_$eq :: 1
lookup$lzycompute :: 1
filereader$default$2 :: 1
ignoreWhitespaceLines :: 1
prioenv$lzycompute :: 1
r$lzycompute$1 :: 1
rename :: 1
org$kiama$example$imperative$Generator$_setter_$genIdn_$eq :: 1
org$kiama$example$oberon0$L4$SymbolTable$ArrayType$$$outer :: 1
congruence :: 1
returnStm :: 1
org$kiama$example$iswim$secd$ExceptionHandler$ExnContValue$$$outer :: 1
org$kiama$example$til$TIL2_3Tests$$anonfun$$$outer :: 1
org$kiama$example$imperative$Generator$_setter_$genLeafExp_$eq :: 1
inputs_$eq :: 1
literal$lzycompute :: 1
returnStm$lzycompute :: 1
initcount :: 1
one :: 1
org$kiama$util$Environments$UnknownEntity$$$outer :: 1
update :: 1
start_= :: 1
nameOf :: 1
org$kiama$example$dataflow$ControlFlowImpl$_setter_$following_$eq :: 1
ops$lzycompute :: 1
Binding$lzycompute :: 1
dump$lzycompute :: 1
org$kiama$example$dataflow$LivenessImpl$_setter_$out_$eq :: 1
asgnStm$lzycompute :: 1
whileStm :: 1
optelseend$lzycompute :: 1
super$declarationsDef :: 1
sequence$lzycompute :: 1
super$defenvPairs :: 1
listterms$lzycompute :: 1
salary$lzycompute :: 1
surround :: 1
org$kiama$util$ParserUtilitiesTests$Tup4$$$outer :: 1
org$kiama$example$iswim$compiler$Parser$Pos$$$outer :: 1
envir$lzycompute :: 1
collect :: 1
elimDeadAssign$lzycompute :: 1
defenv :: 1
emitter :: 1
mkprinttest :: 1
repeat :: 1
Tup5$lzycompute :: 1
makechild :: 1
org$kiama$example$dataflow$VariablesImpl$_setter_$defines_$eq :: 1
parsingWhitespace_= :: 1
ssep :: 1
some :: 1
isType :: 1
CircularState :: 1
fieldlist :: 1
idnlist$lzycompute :: 1
setFinish :: 1
leave :: 1
Tup4 :: 1
org$kiama$example$imperative$Generator$$anonfun$$$outer :: 1
variabledecls$lzycompute :: 1
assertType :: 1
control$lzycompute :: 1
constantdecls$lzycompute :: 1
org$kiama$rewriting$Rewriter$$anonfun$$anonfun$$anonfun$$anonfun$$$outer :: 1
key :: 1
atom$lzycompute :: 1
org$kiama$example$iswim$secd$SECDBase$CodeTree$$flattened$lzycompute :: 1
isLast :: 1
e2 :: 1
genAsgn :: 1
org$kiama$example$json$PrettyPrinting$_setter_$defaultIndent_$eq :: 1
collectl :: 1
genSeqn :: 1
literals$lzycompute :: 1
fielddecl$lzycompute :: 1
org$kiama$example$oberon0$L0$Desugarer$$anonfun$$$outer :: 1
any :: 1
fieldlists$lzycompute :: 1
org$kiama$example$oberon0$L4$SymbolTable$Field$$$outer :: 1
dattr$lzycompute$1 :: 1
enter :: 1
ifStm$lzycompute :: 1
super$process :: 1
org$kiama$example$oberon0$L4$SymbolTable$RecordType$$$outer :: 1
rules$lzycompute :: 1
elimDeadAssign :: 1
hasField :: 1
double$lzycompute :: 1
strategy :: 1
org$kiama$example$lambda$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 1
Mem :: 1
optSectionToDoc :: 1
op_tree$lzycompute :: 1
org$kiama$attribution$AttributionBase$CircularAttribute$$$outer :: 1
infunc$lzycompute$1 :: 1
list$default$5 :: 1
pprintcastFlagDefault :: 1
Tup2$lzycompute :: 1
org$kiama$util$ParserUtilitiesTests$Tup6$$$outer :: 1
idndefs :: 1
outfunc$lzycompute$1 :: 1
super$isCompatible :: 1
casesToDoc :: 1
org$kiama$rewriting$NominalRewriter$$anonfun$$anonfun$$$outer :: 1
super$translateActualParam :: 1
org$kiama$example$iswim$secd$SECDBase$ContValue$$$outer :: 1
variabledecl$lzycompute :: 1
org$kiama$example$transform$Parser$_setter_$whiteSpace_$eq :: 1
org$kiama$example$iswim$secd$BooleanOps$BooleanValue$$$outer :: 1
arbExp :: 1
pretty_any :: 1
isModule :: 1
fi :: 1
super$lhsDef :: 1
fldidn :: 1
v :: 1
org$kiama$machine$Machine$ParamUpdater$$$outer :: 1
genInternalStmt :: 1
lbracket :: 1
whileStm$lzycompute :: 1
result$lzycompute :: 1
R :: 1
lvalue :: 1
withPos :: 1
expectQueryParse :: 1
showPair :: 1
asgnStmt$lzycompute :: 1
start_$eq :: 1
side :: 1
fieldlist$lzycompute :: 1
pprintastFlagDefault :: 1
outermost :: 1
icount_= :: 1
parseWhitespace :: 1
isRecord :: 1
unescape :: 1
org$kiama$example$imperative$Generator$_setter_$genNum_$eq :: 1
e1 :: 1
Binding :: 1
org$kiama$example$lambda$LambdaTests$$anonfun$$anonfun$$$outer :: 1
letAppL :: 1
org$kiama$example$imperative$Generator$_setter_$genInteger_$eq :: 1
isDefinedInEnv :: 1
softline :: 1
clone :: 1
y :: 1
Tup6 :: 1
section :: 1
isRvalue :: 1
org$kiama$util$ParserUtilitiesTests$Tup3$$$outer :: 1
super$tipeDef :: 1
cut$lzycompute :: 1
parseAndPosition :: 1
basicAst :: 1
input_= :: 1
constantdecls :: 1
super$idntypeDef :: 1
mkparsetest :: 1
f$lzycompute$1 :: 1
asgnStmt :: 1
super$envin :: 1
fo :: 1
updates_= :: 1
topdown :: 1
mkvaluetest :: 1
body :: 1
genLamExp :: 1
encoding :: 1
basetype$lzycompute :: 1
super$pretty$default$2 :: 1
list$default$4 :: 1
org$kiama$example$oberon0$base$TranslatingDriver$_setter_$printcastFlagDefault_$eq :: 1
whileStmt :: 1
operator :: 1
asgnStm :: 1
define :: 1
org$kiama$example$lambda$Generator$$anonfun$$$outer :: 1
checkNonLocalVarAccess :: 1
opdecl :: 1
processline$default$4 :: 1
org$kiama$attribution$Attribution$CachedDynamicAttribute$$$outer :: 1
maxlanglevel :: 1
isArray :: 1
everywheretd :: 1
blockStm :: 1
super$clone :: 1
org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$anonfun$$anonfun$$$outer :: 1
org$kiama$example$obr$SyntaxAnalysis$Pos$$$outer :: 1
initialiseSemanticAnalysis :: 1
org$kiama$attribution$Attribution$CachedAttribute$$$outer :: 1
org$kiama$util$ParserUtilitiesTests$Node$$$outer :: 1
expectQueryPrint :: 1
org$kiama$example$picojava$Parser$$anonfun$$anonfun$$$outer :: 1
Tup3 :: 1
tipe2 :: 1
org$kiama$example$lambda2$Par$$anonfun$$$outer :: 1
y$lzycompute$1 :: 1
blockStm$lzycompute :: 1
terms$lzycompute :: 1
declsToDoc :: 1
org$kiama$example$lambda2$Reduce$$anonfun$$$outer :: 1
org$kiama$example$oberon0$L3$TypeAnalyser$$anonfun$$$outer :: 1
org$kiama$attribution$AttributionBase$$CircularState$lzycompute :: 1
elsifToDoc :: 1
HasVar :: 1
<+ :: 1
finish_= :: 1
org$kiama$util$ParserUtilitiesTests$Tup5$$$outer :: 1
errors$lzycompute :: 1
super$err :: 1
out$lzycompute$1 :: 1
accept :: 1
org$kiama$util$Environments$MultipleEntity$$$outer :: 1
caseToDoc :: 1
genMul :: 1
opdecl$lzycompute :: 1
node$lzycompute :: 1
parameterdecl$lzycompute :: 1
apply$mcDDD$sp :: 1
envoutl :: 1
setConnections :: 1
sequence :: 1
org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$anonfun$$anonfun$$anonfun$$$outer :: 1
genAdd :: 1
scala$App$_setter_$executionStart_$eq :: 1
list$lzycompute :: 1
org$kiama$example$dataflow$LivenessImpl$_setter_$in_$eq :: 1
org$kiama$example$iswim$secd$SECDBase$EmptyCont$$$outer :: 1
scala$util$parsing$combinator$Parsers$OnceParser$$$outer :: 1
org$kiama$example$imperative$Generator$_setter_$genVar_$eq :: 1
constantdecl$lzycompute :: 1
super$failure :: 1
isInteger :: 1
org$kiama$example$lambda2$ParLazyShare$$anonfun$$anonfun$$anonfun$$anonfun$$$outer :: 1
change :: 1
super$regex :: 1
everything :: 1
org$kiama$example$imperative$Generator$_setter_$genDouble_$eq :: 1
double :: 1
list :: 1
Tup4$lzycompute :: 1
org$kiama$example$lambda2$LambdaTests$$anonfun$$$outer :: 1
paramsToDoc :: 1
rparen :: 1
handler$lzycompute :: 1
where :: 1
perform :: 1
forToDoc :: 1
terminal :: 1
org$kiama$util$CompilerTests$$anonfun$$$outer :: 1
isError :: 1
arbStmt :: 1
org$kiama$example$oberon0$L4$TypeAnalyser$$anonfun$$$outer :: 1
org$kiama$example$oberon0$L3$TypeAnalyser$$anonfun$$anonfun$$$outer :: 1
index :: 1
envinl :: 1
org$kiama$example$oberon0$L3$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 1
fo$lzycompute$1 :: 1
signed$lzycompute :: 1
conditional$lzycompute :: 1
super$isLvalue :: 1
org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$anonfun$$$outer :: 1
lparen :: 1
_value_= :: 1
clause :: 1
Name :: 1
org$kiama$example$iswim$compiler$SemanticAnalysis$$anonfun$$$outer :: 1
Tup6$lzycompute :: 1
lookupb :: 1
HasVar$lzycompute :: 1
genInternalExp :: 1
dup :: 1
isNotRecord :: 1
super$pretty :: 1
scala$App$_setter_$scala$App$$initCode_$eq :: 1
liftBlocks$lzycompute$1 :: 1
enclose :: 1
genDiv :: 1
org$kiama$util$ParserUtilitiesTests$Tup2$$$outer :: 1
super$literal :: 1
delayedInit :: 1
genStmt :: 1
lvalue$lzycompute :: 1
org$kiama$example$oberon0$base$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 1
org$kiama$example$iswim$secd$SECDBase$EmptyValue$$$outer :: 1
org$kiama$example$imperative$Generator$_setter_$genLeafStmt_$eq :: 1
Tup5 :: 1
simplexp$lzycompute :: 1
super$deftypeDef :: 1
wrap :: 1
content$lzycompute :: 1
f :: 1
show :: 1
fieldlists :: 1
genWhile :: 1
counter_= :: 1
super$blockToDoc :: 1
whileStmt$lzycompute :: 1
org$kiama$example$oberon0$L4$Parser$$anonfun$$anonfun$$anonfun$$$outer :: 1
createProgram :: 1
prio$lzycompute :: 1
idnlist :: 1
setEvaluator :: 1
ifStm :: 1
org$kiama$attribution$AttributionBase$ParamAttributeKey$$$outer :: 1
org$kiama$util$TestCompiler$$anonfun$$$outer :: 1
bindexpr :: 1
scala$App$$initCode :: 1
rulef :: 1
positioned :: 1
list$default$3 :: 1
processline$default$3 :: 1
filereader :: 1
super$isVariable :: 1
rootenv :: 1
iteration$lzycompute :: 1
intercept :: 1
genAppExp :: 1
Term :: 1
dquote :: 1
org$kiama$example$oberon0$base$TranslatingTestDriver$_setter_$pprintcastFlagDefault_$eq :: 1
casesToIf :: 1
lbrace :: 1
assertEval :: 1
catchclause$lzycompute :: 1
fieldListsToFields :: 1
stack$lzycompute :: 1
org$kiama$example$oberon0$L3$SymbolTable$ParamInfo$$$outer :: 1
trycatch$lzycompute :: 1
varr$lzycompute :: 1
elimEmpties$lzycompute :: 1
strategyf :: 1
stringreader :: 1
same :: 1
rulefs :: 1
rbracket :: 1
build :: 1
org$kiama$example$oberon0$base$TranslatingDriver$_setter_$pprintcastFlagDefault_$eq :: 1
regexnows :: 1
para :: 1
ocount_= :: 1
genVar :: 1
org$kiama$attribution$Attribution$$MemoState$lzycompute :: 1
itype :: 1
infiletests :: 1
stringToInt :: 1
option :: 1
isConstant :: 1
assertSame :: 1
eval_top$lzycompute :: 1
super$translateFormalParam :: 1
params :: 1
id :: 1
super$typedefDef :: 1
stm :: 1
map :: 1
resetEnvironments :: 1
in$lzycompute$1 :: 1
Tup2 :: 1
isUndefined :: 1
keywords :: 1
oncetd :: 1
genSub :: 1
==================================================
ca.uwaterloo.scalacg.Library: blob() :: 1710
org.kiama.rewriting.Rewriter$Strategy: toString() :: 499
org.kiama.example.oberon0.L0.c.CMulExp: toString() :: 499
org.kiama.example.oberon0.L0.c.CGtExp: toString() :: 499
org.kiama.example.oberon0.L0.c.CDivExp: toString() :: 499
org.kiama.util.ParserUtilitiesTests.Tup2: toString() :: 499
org.kiama.example.iswim.secd.IOOps.Write: toString() :: 499
org.kiama.example.oberon0.L0.c.CSubExp: toString() :: 499
org.kiama.attribution.Decorators$Chain: toString() :: 499
org.kiama.example.iswim.secd.ConversionOps.ToString: toString() :: 499
org.kiama.example.oberon0.L0.c.CLtExp: toString() :: 499
org.kiama.example.iswim.secd.ConversionOps.ToInt: toString() :: 499
org.kiama.util.ParserUtilitiesTests.Node: toString() :: 499
org.kiama.attribution.Attribution$CachedParamAttribute: toString() :: 499
org.kiama.example.oberon0.L0.c.CModExp: toString() :: 499
org.kiama.example.oberon0.L0.c.CGeExp: toString() :: 499
org.kiama.example.obr.SyntaxAnalysis.Pos: toString() :: 499
org.kiama.example.oberon0.L0.c.CNeExp: toString() :: 499
org.kiama.util.ParserUtilitiesTests.Tup6: toString() :: 499
org.kiama.example.oberon0.L3.c.CAddrExp: toString() :: 499
org.kiama.example.oberon0.L0.c.CLeExp: toString() :: 499
org.kiama.example.iswim.secd.IOOps.Read: toString() :: 499
org.kiama.util.ParserUtilitiesTests.Tup5: toString() :: 499
org.kiama.example.oberon0.L3.c.CVoidType: toString() :: 499
org.kiama.example.iswim.secd.SECDBase.MkUserException: toString() :: 499
org.kiama.attribution.AttributionBase$Attribute: toString() :: 499
org.kiama.example.oberon0.L0.c.CAddExp: toString() :: 499
org.kiama.example.oberon0.L0.c.CAndExp: toString() :: 499
org.kiama.output.PrettyPrinter$Doc: toString() :: 499
org.kiama.machine.Machine.ParamUpdate: toString() :: 499
org.kiama.util.ParserUtilitiesTests.Tup4: toString() :: 499
org.kiama.example.oberon0.L0.c.COrExp: toString() :: 499
org.kiama.example.oberon0.L4.c.CRecordType: toString() :: 499
org.kiama.example.oberon0.L0.c.CNotExp: toString() :: 499
org.kiama.example.oberon0.base.c.CEmptyStmt: toString() :: 499
org.kiama.util.ParserUtilitiesTests.Tup3: toString() :: 499
org.kiama.example.oberon0.L3.c.CAddrType: toString() :: 499
org.kiama.example.oberon0.L0.c.CEqExp: toString() :: 499
org.kiama.output.Postfix: toString() :: 499
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: toString() :: 499
org.kiama.util.Environments.Named: toString() :: 496
org.kiama.output.RightAssoc: toString() :: 496
org.kiama.example.lambda.AST.Var: toString() :: 496
org.kiama.output.LeftAssoc: toString() :: 496
org.kiama.output.Prefix: toString() :: 496
org.kiama.output.NonAssoc: toString() :: 496
org.kiama.example.RISC.RISCISA.Target: toString() :: 495
org.kiama.example.RISC.RISCISA.SUBI: toString() :: 495
org.kiama.example.RISC.RISCISA.BLE: toString() :: 495
org.kiama.example.lambda.AST.Num: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.Block: toString() :: 495
org.kiama.example.transform.AST.Factor: toString() :: 495
org.kiama.example.obr.ObrTree.TryStmt: toString() :: 495
org.kiama.example.obr.RISCTree.RemW: toString() :: 495
org.kiama.util.Environments.UnknownEntity: toString() :: 495
org.kiama.example.oberon0.base.source.Block: toString() :: 495
org.kiama.example.oberon0.base.c.CStrType: toString() :: 495
org.kiama.example.RISC.RISCISA.CMP: toString() :: 495
org.kiama.example.oberon0.L0.source.GtExp: toString() :: 495
org.kiama.example.iswim.compiler.Parser.Pos: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Empty: toString() :: 495
org.kiama.example.prolog.PrologTree.Rule: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Less: toString() :: 495
org.kiama.example.iswim.secd.StringOps.PushString: toString() :: 495
org.kiama.example.obr.SymbolTable.ExnType: toString() :: 495
org.kiama.example.oberon0.L1.c.CWhileStatement: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Lambda: toString() :: 495
org.kiama.example.oberon0.L4.SymbolTable.RecordType: toString() :: 495
org.kiama.example.obr.RISCTree.Label: toString() :: 495
org.kiama.example.RISC.RISCISA.WRD: toString() :: 495
org.kiama.example.obr.RISCTree.DivW: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.MkClosures: toString() :: 495
org.kiama.example.oberon0.L3.source.Call: toString() :: 495
org.kiama.example.oberon0.L0.source.DivExp: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.GetType: toString() :: 495
org.kiama.example.prolog.SymbolTable.Predicate: toString() :: 495
org.kiama.example.obr.ObrTree.EqualExp: toString() :: 495
org.kiama.example.oberon0.base.c.CVarDecl: toString() :: 495
org.kiama.example.RISC.RISCISA.CHKI: toString() :: 495
org.kiama.example.transform.AST.BinExp: toString() :: 495
org.kiama.example.RISC.RISCISA.SUB: toString() :: 495
org.kiama.example.imperative.AST.Sub: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.RaiseException: toString() :: 495
org.kiama.example.obr.SymbolTable.EnumTypes: toString() :: 495
org.kiama.rewriting.NominalAST.Bind: toString() :: 495
org.kiama.example.iswim.secd.HeapOps.Alloc: toString() :: 495
org.kiama.example.til.AST.Read: toString() :: 495
org.kiama.example.oberon0.L0.source.ConstDecl: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Block: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.NotEqual: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.Resume: toString() :: 495
org.kiama.example.prolog.SymbolTable.Variable: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl: toString() :: 495
org.kiama.example.oberon0.L0.source.SubExp: toString() :: 495
org.kiama.example.RISC.RISCISA.BGT: toString() :: 495
org.kiama.example.til.AST.Sub: toString() :: 495
org.kiama.example.obr.ObrTree.IfStmt: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.Dot: toString() :: 495
org.kiama.example.lambda2.AST.AddOp: toString() :: 495
org.kiama.example.RISC.RISCISA.BLT: toString() :: 495
org.kiama.example.til.AST.IfThen: toString() :: 495
org.kiama.example.imperative.AST.Num: toString() :: 495
org.kiama.example.oberon0.L4.SymbolTable.ArrayType: toString() :: 495
org.kiama.example.til.AST.Str: toString() :: 495
org.kiama.example.lambda2.AST.FunType: toString() :: 495
org.kiama.example.oberon0.L0.source.ModExp: toString() :: 495
org.kiama.example.obr.ObrTree.IntVar: toString() :: 495
org.kiama.example.oberon0.L0.c.CNamedType: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.LetStmt: toString() :: 495
org.kiama.example.RISC.RISCISA.DIVI: toString() :: 495
org.kiama.example.oberon0.L4.c.CIndexExp: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.WhileStmt: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Match: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Plus: toString() :: 495
org.kiama.example.lambda3.AST.FreshQuery: toString() :: 495
org.kiama.example.prolog.Interpreter.UnifyGoal: toString() :: 495
org.kiama.example.oberon0.base.source.IdnUse: toString() :: 495
org.kiama.example.prolog.PrologTree.Pred: toString() :: 495
org.kiama.example.til.AST.Eq: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.Lookup: toString() :: 495
org.kiama.example.imperative.AST.Add: toString() :: 495
org.kiama.example.RISC.RISCISA.BGE: toString() :: 495
org.kiama.example.RISC.RISCISA.ADD: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Greater: toString() :: 495
org.kiama.example.lambda3.AST.SwapQuery: toString() :: 495
org.kiama.example.prolog.SymbolTable.ListType: toString() :: 495
org.kiama.example.iswim.secd.HeapOps.Get: toString() :: 495
org.kiama.example.obr.ObrTree.ExitStmt: toString() :: 495
org.kiama.example.oberon0.base.c.CInclude: toString() :: 495
org.kiama.example.prolog.SymbolTable.AtomType: toString() :: 495
org.kiama.example.obr.ObrTree.ArrayVar: toString() :: 495
org.kiama.example.obr.ObrTree.IdnExp: toString() :: 495
org.kiama.example.dataflow.DataflowAST.Assign: toString() :: 495
org.kiama.example.RISC.RISCISA.BR: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Assign: toString() :: 495
org.kiama.example.RISC.RISCISA.RET: toString() :: 495
org.kiama.example.oberon0.L3.source.VarMode: toString() :: 495
org.kiama.example.oberon0.base.c.CBlock: toString() :: 495
org.kiama.example.oberon0.L0.c.CTypeDef: toString() :: 495
org.kiama.example.obr.RISCTree.Cond: toString() :: 495
org.kiama.example.obr.RISCTree.AddW: toString() :: 495
org.kiama.example.obr.ObrTree.EnumVar: toString() :: 495
org.kiama.example.RISC.RISCISA.MODI: toString() :: 495
org.kiama.example.oberon0.L3.source.ValMode: toString() :: 495
org.kiama.example.til.AST.While: toString() :: 495
org.kiama.example.oberon0.L2.source.Case: toString() :: 495
org.kiama.example.oberon0.L4.c.CFieldExp: toString() :: 495
org.kiama.example.oberon0.L4.source.FieldList: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.PushEmpty: toString() :: 495
org.kiama.example.obr.ObrTree.NotEqualExp: toString() :: 495
org.kiama.example.lambda2.AST.Bind: toString() :: 495
org.kiama.example.obr.RISCTree.Indexed: toString() :: 495
org.kiama.example.imperative.AST.Neg: toString() :: 495
org.kiama.example.oberon0.L0.source.VarDecl: toString() :: 495
org.kiama.example.oneohonecompanies.Company.DU: toString() :: 495
org.kiama.example.oberon0.L2.source.CaseStatement: toString() :: 495
org.kiama.example.transform.AST.Var: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.While: toString() :: 495
org.kiama.example.transform.AST.VarDecl: toString() :: 495
org.kiama.example.json.JSONTree.JTrue: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.App: toString() :: 495
org.kiama.example.oberon0.L0.source.IdnExp: toString() :: 495
org.kiama.example.RISC.RISCISA.MVN: toString() :: 495
org.kiama.example.oberon0.L4.source.IndexExp: toString() :: 495
org.kiama.example.transform.AST.Program: toString() :: 495
org.kiama.example.oberon0.L0.source.Assignment: toString() :: 495
org.kiama.rewriting.NominalAST.Name: toString() :: 495
org.kiama.example.oberon0.L0.source.LeExp: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Variable: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Return: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.LetRecStmt: toString() :: 495
org.kiama.example.obr.ObrTree.PlusExp: toString() :: 495
org.kiama.example.oberon0.base.c.CProgram: toString() :: 495
org.kiama.example.oberon0.L0.c.CAssignment: toString() :: 495
org.kiama.example.dataflow.DataflowAST.Return: toString() :: 495
org.kiama.example.json.JSONTree.JName: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.CodeSegment: toString() :: 495
org.kiama.example.til.AST.Add: toString() :: 495
org.kiama.example.dataflow.DataflowAST.Empty: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.ThrowTo: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.PushMachineException: toString() :: 495
org.kiama.example.obr.ObrTree.NegExp: toString() :: 495
org.kiama.util.Environments.MultipleEntity: toString() :: 495
org.kiama.example.imperative.AST.Seqn: toString() :: 495
org.kiama.example.oberon0.L0.c.CInitDecl: toString() :: 495
org.kiama.example.obr.ObrTree.Catch: toString() :: 495
org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual: toString() :: 495
org.kiama.example.RISC.RISCISA.POP: toString() :: 495
org.kiama.example.oberon0.L4.source.FieldExp: toString() :: 495
org.kiama.example.iswim.secd.IntegerOps.Mult: toString() :: 495
org.kiama.example.RISC.RISCISA.ADDI: toString() :: 495
org.kiama.example.iswim.secd.RecordOps.UnpackRecord: toString() :: 495
org.kiama.example.obr.ObrTree.WhileStmt: toString() :: 495
org.kiama.machine.Machine.State: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Tuple: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.BoolVal: toString() :: 495
org.kiama.example.til.AST.Num: toString() :: 495
org.kiama.example.prolog.SymbolTable.UnknownType: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Times: toString() :: 495
org.kiama.example.lambda2.AST.Opn: toString() :: 495
org.kiama.example.oberon0.L0.source.GeExp: toString() :: 495
org.kiama.example.iswim.secd.RecordOps.MkRecord: toString() :: 495
org.kiama.example.RISC.RISCISA.Comment: toString() :: 495
org.kiama.example.obr.RISCTree.CmpneW: toString() :: 495
org.kiama.example.obr.ObrTree.IntExp: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Primitives: toString() :: 495
org.kiama.example.iswim.secd.IntegerOps.Div: toString() :: 495
org.kiama.example.prolog.Subst: toString() :: 495
org.kiama.example.obr.RISCTree.Local: toString() :: 495
org.kiama.example.til.AST.Program: toString() :: 495
org.kiama.example.dataflow.DataflowAST.Block: toString() :: 495
org.kiama.example.til.AST.For: toString() :: 495
org.kiama.example.oberon0.L3.source.ProcDecl: toString() :: 495
org.kiama.example.oberon0.L0.source.NamedType: toString() :: 495
org.kiama.example.oberon0.L0.source.AddExp: toString() :: 495
org.kiama.example.obr.ObrTree.AndExp: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.MkRef: toString() :: 495
org.kiama.example.oberon0.L0.source.NegExp: toString() :: 495
org.kiama.example.obr.SymbolTable.ArrayType: toString() :: 495
org.kiama.example.obr.RISCTree.NegW: toString() :: 495
org.kiama.example.oberon0.L0.source.NeExp: toString() :: 495
org.kiama.example.oberon0.base.c.CIntType: toString() :: 495
org.kiama.example.obr.ObrTree.ObrInt: toString() :: 495
org.kiama.example.oberon0.L0.source.AndExp: toString() :: 495
org.kiama.example.prolog.PrologTree.Cut: toString() :: 495
org.kiama.example.oberon0.L4.source.FieldIdn: toString() :: 495
org.kiama.example.obr.ObrTree.RecordVar: toString() :: 495
org.kiama.example.RISC.RISCISA.CMPI: toString() :: 495
org.kiama.example.oberon0.L3.c.CStrExp: toString() :: 495
org.kiama.example.iswim.secd.StackOps.Swap: toString() :: 495
org.kiama.example.oberon0.base.source.EmptyStmt: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.If: toString() :: 495
org.kiama.example.RISC.RISCISA.STW: toString() :: 495
org.kiama.example.iswim.secd.RecordOps.Fields: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.IswimProg: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.And: toString() :: 495
org.kiama.example.lambda3.AST.EquivQuery: toString() :: 495
org.kiama.example.oberon0.L3.c.CCall: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Let: toString() :: 495
org.kiama.example.oberon0.base.source.ModuleDecl: toString() :: 495
org.kiama.example.lambda2.AST.Var: toString() :: 495
org.kiama.example.obr.ObrTree.IntConst: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.ClassDecl: toString() :: 495
org.kiama.example.json.JSONTree.JString: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Remainder: toString() :: 495
org.kiama.example.prolog.PrologTree.Var: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Pattern: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.UnknownDecl: toString() :: 495
org.kiama.example.iswim.secd.IntegerOps.PushInt: toString() :: 495
org.kiama.example.oberon0.L0.c.CIdnExp: toString() :: 495
org.kiama.example.json.JSONTree.JNumber: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.FunctionSpec: toString() :: 495
org.kiama.example.obr.ObrTree.NotExp: toString() :: 495
org.kiama.example.obr.ObrTree.ExnConst: toString() :: 495
org.kiama.example.prolog.PrologTree.Integer: toString() :: 495
org.kiama.example.lambda2.AST.Lam: toString() :: 495
org.kiama.example.oberon0.L2.source.ForStatement: toString() :: 495
org.kiama.example.oberon0.base.source.IdnDef: toString() :: 495
org.kiama.example.oneohonecompanies.Company.Dept: toString() :: 495
org.kiama.example.obr.SymbolTable.Constant: toString() :: 495
org.kiama.machine.Machine.ParamUpdater: toString() :: 495
org.kiama.example.RISC.RISCISA.MOV: toString() :: 495
org.kiama.example.obr.ObrTree.StarExp: toString() :: 495
org.kiama.example.obr.ObrTree.BoolVar: toString() :: 495
org.kiama.example.obr.RISCTree.MulW: toString() :: 495
org.kiama.example.obr.SymbolTable.Multiple: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Minus: toString() :: 495
org.kiama.example.iswim.secd.BooleanOps.Equals: toString() :: 495
org.kiama.example.RISC.RISCISA.MUL: toString() :: 495
org.kiama.example.oberon0.base.c.CIntExp: toString() :: 495
org.kiama.example.oberon0.L0.source.OrExp: toString() :: 495
org.kiama.example.lambda3.AST.EvalQuery: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.GreaterEq: toString() :: 495
org.kiama.example.obr.RISCTree.CmpgtW: toString() :: 495
org.kiama.example.iswim.secd.StackOps.Dup: toString() :: 495
org.kiama.example.imperative.AST.Mul: toString() :: 495
org.kiama.example.RISC.RISCISA.WRH: toString() :: 495
org.kiama.example.json.JSONTree.JObject: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.VarDecl: toString() :: 495
org.kiama.example.dataflow.DataflowAST.While: toString() :: 495
org.kiama.example.json.JSONTree.JFalse: toString() :: 495
org.kiama.example.RISC.RISCISA.MULI: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Or: toString() :: 495
org.kiama.example.lambda3.AST.FreeNamesQuery: toString() :: 495
org.kiama.example.prolog.SymbolTable.IntegerType: toString() :: 495
org.kiama.example.iswim.secd.IntegerOps.Sub: toString() :: 495
org.kiama.example.til.AST.IfElse: toString() :: 495
org.kiama.example.RISC.RISCISA.BNE: toString() :: 495
org.kiama.example.iswim.secd.BooleanOps.PushFalse: toString() :: 495
org.kiama.example.iswim.secd.BooleanOps.Test: toString() :: 495
org.kiama.example.RISC.RISCISA.MOVI: toString() :: 495
org.kiama.example.oberon0.L0.c.CNegExp: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Not: toString() :: 495
org.kiama.example.json.JSONTree.JArray: toString() :: 495
org.kiama.example.til.AST.Decl: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.StringVal: toString() :: 495
org.kiama.example.oneohonecompanies.Company.Employee: toString() :: 495
org.kiama.example.transform.AST.Num: toString() :: 495
org.kiama.example.transform.AST.BinExpR: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.AssignStmt: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Negate: toString() :: 495
org.kiama.example.oberon0.L0.source.IntExp: toString() :: 495
org.kiama.example.RISC.RISCISA.PSH: toString() :: 495
org.kiama.example.obr.ObrTree.IndexExp: toString() :: 495
org.kiama.example.obr.SymbolTable.EnumType: toString() :: 495
org.kiama.util.Messaging.Record: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.MatchClause: toString() :: 495
org.kiama.example.oberon0.base.c.CArrayType: toString() :: 495
org.kiama.example.obr.RISCTree.SubW: toString() :: 495
org.kiama.example.oberon0.L1.source.WhileStatement: toString() :: 495
org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.TailApp: toString() :: 495
org.kiama.example.obr.RISCTree.Read: toString() :: 495
org.kiama.example.oberon0.L3.c.CDerefExp: toString() :: 495
org.kiama.example.iswim.secd.IntComparisonOps.LessThan: toString() :: 495
org.kiama.example.dataflow.DataflowAST.If: toString() :: 495
org.kiama.example.lambda2.AST.App: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.NumVal: toString() :: 495
org.kiama.example.prolog.PrologTree.Atom: toString() :: 495
org.kiama.example.obr.ObrTree.SlashExp: toString() :: 495
org.kiama.example.obr.ObrTree.MinusExp: toString() :: 495
org.kiama.example.lambda.AST.Lam: toString() :: 495
org.kiama.example.imperative.AST.Null: toString() :: 495
org.kiama.example.oberon0.L3.source.FPSection: toString() :: 495
org.kiama.example.iswim.secd.IntegerOps.Add: toString() :: 495
org.kiama.example.oberon0.L4.SymbolTable.Field: toString() :: 495
org.kiama.example.obr.ObrTree.ReturnStmt: toString() :: 495
org.kiama.example.lambda3.AST.Var: toString() :: 495
org.kiama.example.iswim.secd.BooleanOps.PushTrue: toString() :: 495
org.kiama.example.obr.SymbolTable.UnknownType: toString() :: 495
org.kiama.example.obr.RISCTree.SequenceDatum: toString() :: 495
org.kiama.example.lambda2.AST.NoType: toString() :: 495
org.kiama.example.oberon0.base.c.CFunctionDecl: toString() :: 495
org.kiama.example.til.AST.Mul: toString() :: 495
org.kiama.example.lambda.AST.Sub: toString() :: 495
org.kiama.example.lambda3.AST.App: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.Use: toString() :: 495
org.kiama.example.oberon0.L0.source.NotExp: toString() :: 495
org.kiama.example.obr.ObrTree.OrExp: toString() :: 495
org.kiama.example.lambda3.AST.Lam: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.ResumeFromDump: toString() :: 495
org.kiama.example.imperative.AST.While: toString() :: 495
org.kiama.example.obr.ObrTree.BoolExp: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.Program: toString() :: 495
org.kiama.example.obr.ObrTree.EnumConst: toString() :: 495
org.kiama.example.prolog.Interpreter.TermGoal: toString() :: 495
org.kiama.example.iswim.secd.IntegerOps.Rem: toString() :: 495
org.kiama.example.lambda2.AST.Let: toString() :: 495
org.kiama.example.iswim.secd.StackOps.Pop: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.PushType: toString() :: 495
org.kiama.example.obr.ObrTree.GreaterExp: toString() :: 495
org.kiama.example.til.AST.Write: toString() :: 495
org.kiama.example.prolog.PrologTree.Program: toString() :: 495
org.kiama.example.obr.SymbolTable.Unknown: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.CallCC: toString() :: 495
org.kiama.example.til.AST.Div: toString() :: 495
org.kiama.example.lambda3.AST.SubstQuery: toString() :: 495
org.kiama.example.oberon0.L0.source.EqExp: toString() :: 495
org.kiama.example.oberon0.L0.source.TypeDecl: toString() :: 495
org.kiama.example.lambda2.AST.Num: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.LetRec: toString() :: 495
org.kiama.example.obr.RISCTree.IntDatum: toString() :: 495
org.kiama.example.iswim.secd.ExceptionHandler.SetHandler: toString() :: 495
org.kiama.example.obr.ObrTree.TryBody: toString() :: 495
org.kiama.example.lambda2.AST.IntType: toString() :: 495
org.kiama.output.Infix: toString() :: 495
org.kiama.example.oneohonecompanies.Company.PU: toString() :: 495
org.kiama.example.oberon0.L2.source.ValCond: toString() :: 495
org.kiama.example.oberon0.L0.source.MulExp: toString() :: 495
org.kiama.example.RISC.RISCISA.DIV: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Divide: toString() :: 495
org.kiama.example.obr.SymbolTable.RecordType: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.$anon: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.LessEq: toString() :: 495
org.kiama.example.RISC.RISCISA.RD: toString() :: 495
org.kiama.example.obr.SymbolTable.BoolType: toString() :: 495
org.kiama.example.oberon0.L4.source.RecordTypeDef: toString() :: 495
org.kiama.example.oneohonecompanies.Company.Company: toString() :: 495
org.kiama.example.RISC.RISCISA.BEQ: toString() :: 495
org.kiama.example.picojava.AbstractSyntax.BooleanLiteral: toString() :: 495
org.kiama.example.imperative.AST.Div: toString() :: 495
org.kiama.example.obr.RISCTree.LdW: toString() :: 495
org.kiama.example.obr.ObrTree.FieldExp: toString() :: 495
org.kiama.machine.Machine.ScalarUpdate: toString() :: 495
org.kiama.example.obr.ObrTree.LessExp: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.Enter: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Val: toString() :: 495
org.kiama.example.obr.RISCTree.CmpltW: toString() :: 495
org.kiama.example.til.AST.Assign: toString() :: 495
org.kiama.example.obr.RISCTree.RISCProg: toString() :: 495
org.kiama.example.obr.SymbolTable.Variable: toString() :: 495
org.kiama.example.RISC.RISCISA.LDW: toString() :: 495
org.kiama.example.obr.ObrTree.ModExp: toString() :: 495
org.kiama.example.obr.RISCTree.CmpeqW: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Apply: toString() :: 495
org.kiama.example.oberon0.L1.source.IfStatement: toString() :: 495
org.kiama.example.obr.ObrTree.LoopStmt: toString() :: 495
org.kiama.example.prolog.Interpreter.DisplayGoal: toString() :: 495
org.kiama.example.lambda3.AST.Num: toString() :: 495
org.kiama.example.obr.ObrTree.AssignStmt: toString() :: 495
org.kiama.example.lambda.AST.App: toString() :: 495
org.kiama.example.json.JSONTree.JNull: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.Exit: toString() :: 495
org.kiama.example.RISC.RISCISA.MVNI: toString() :: 495
org.kiama.example.obr.RISCTree.Not: toString() :: 495
org.kiama.example.lambda2.AST.SubOp: toString() :: 495
org.kiama.example.oberon0.L1.c.CIfStatement: toString() :: 495
org.kiama.example.oberon0.base.c.CReturn: toString() :: 495
org.kiama.example.imperative.AST.Var: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Equal: toString() :: 495
org.kiama.example.obr.ObrTree.ForStmt: toString() :: 495
org.kiama.example.prolog.PrologTree.Fact: toString() :: 495
org.kiama.example.til.AST.Id: toString() :: 495
org.kiama.example.iswim.secd.HeapOps.Put: toString() :: 495
org.kiama.example.RISC.RISCISA.ORI: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.AppCC: toString() :: 495
org.kiama.example.til.AST.Ne: toString() :: 495
org.kiama.example.obr.ObrTree.IntParam: toString() :: 495
org.kiama.example.RISC.RISCISA.WRL: toString() :: 495
org.kiama.example.imperative.AST.Asgn: toString() :: 495
org.kiama.example.obr.SymbolTable.IntType: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.BindPrims: toString() :: 495
org.kiama.example.oberon0.L2.source.MinMaxCond: toString() :: 495
org.kiama.example.til.AST.Var: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.ExprStmt: toString() :: 495
org.kiama.example.oberon0.L1.c.CIfElseStatement: toString() :: 495
org.kiama.example.RISC.RISCISA.BSR: toString() :: 495
org.kiama.example.oberon0.L4.source.ArrayTypeDef: toString() :: 495
org.kiama.example.RISC.RISCISA.MOD: toString() :: 495
org.kiama.example.obr.ObrTree.RaiseStmt: toString() :: 495
org.kiama.example.iswim.compiler.Syntax.Binding: toString() :: 495
org.kiama.example.oberon0.L0.source.LtExp: toString() :: 495
org.kiama.example.iswim.secd.SECDBase.EmptyCont: toString() :: 495
org.kiama.example.lambda2.AST.Letp: toString() :: 495
org.kiama.example.obr.RISCTree.Bne: toString() :: 494
org.kiama.example.obr.RISCTree.StW: toString() :: 494
org.kiama.example.obr.RISCTree.Jmp: toString() :: 494
org.kiama.example.obr.RISCTree.Beq: toString() :: 494
org.kiama.example.obr.RISCTree.Ret: toString() :: 494
org.kiama.example.obr.RISCTree.LabelDef: toString() :: 494
org.kiama.example.obr.RISCTree.Write: toString() :: 494
org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.PrimTypeValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.PrimValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.ContValue: toString() :: 492
org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue: toString() :: 492
org.kiama.example.iswim.secd.RecordOps.RecordValue: toString() :: 492
org.kiama.example.iswim.secd.StringOps.StringValue: toString() :: 492
org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue: toString() :: 492
org.kiama.example.iswim.secd.RecordOps.RecordTypeValue: toString() :: 492
org.kiama.example.iswim.secd.BooleanOps.TrueValue: toString() :: 492
org.kiama.example.iswim.secd.HeapOps.RefTypeValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.ContTypeValue: toString() :: 492
org.kiama.example.iswim.secd.BooleanOps.FalseValue: toString() :: 492
org.kiama.example.iswim.secd.StringOps.UserExceptionValue: toString() :: 492
org.kiama.example.iswim.secd.IntegerOps.IntTypeValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.TypeTypeValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.EmptyValue: toString() :: 492
org.kiama.example.iswim.secd.SECDBase.ClosureValue: toString() :: 492
org.kiama.example.iswim.secd.StringOps.StringTypeValue: toString() :: 492
org.kiama.example.iswim.secd.IntegerOps.IntValue: toString() :: 492
org.kiama.example.iswim.secd.HeapOps.RefValue: toString() :: 492
org.kiama.util.ParserUtilitiesTests.Tup3: equals(x$1: Any) :: 430
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: equals(x$1: Any) :: 430
org.kiama.example.iswim.secd.ConversionOps.ToInt: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) :: 430
org.kiama.util.ParserUtilitiesTests.Tup6: equals(x$1: Any) :: 430
org.kiama.example.iswim.secd.SECDBase.MkUserException: equals(x$1: Any) :: 430
org.kiama.util.ParserUtilitiesTests.Node: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) :: 430
org.kiama.util.ParserUtilitiesTests.Tup2: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) :: 430
org.kiama.example.iswim.secd.ConversionOps.ToString: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) :: 430
org.kiama.example.oberon0.base.c.CEmptyStmt: equals(x$1: Any) :: 430
org.kiama.util.ParserUtilitiesTests.Tup5: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L3.c.CVoidType: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) :: 430
org.kiama.example.iswim.secd.IOOps.Write: equals(x$1: Any) :: 430
org.kiama.util.ParserUtilitiesTests.Tup4: equals(x$1: Any) :: 430
org.kiama.example.obr.SyntaxAnalysis.Pos: equals(x$1: Any) :: 430
org.kiama.example.iswim.secd.IOOps.Read: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) :: 430
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) :: 430
org.kiama.example.iswim.compiler.Syntax.NotEqual: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Str: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.ConversionOps.ConversionError: equals(x$1: Any) :: 429
org.kiama.util.Environments.UnknownEntity: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.EmptyCont: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.MinusExp: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.EnumVar: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.WhileStmt: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JName: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.LessEq: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.IdnExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.GetType: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.source.IdnUse: equals(x$1: Any) :: 429
org.kiama.example.til.AST.IfElse: equals(x$1: Any) :: 429
org.kiama.util.Environments.MultipleEntity: equals(x$1: Any) :: 429
org.kiama.example.oneohonecompanies.Company.Company: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Beq: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.ClosureValue: equals(that: Any) :: 429
org.kiama.example.prolog.SymbolTable.IntegerType: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.HeapOps.Get: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.BooleanOps.PushTrue: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.And: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.RET: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.MkRef: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.Add: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.FreeNamesQuery: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntComparisonOps.LessThan: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.EqualExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.LeExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Var: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.FreshQuery: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BLE: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.ModExp: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BR: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.NotExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.UnexpectedExit: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Sub: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JTrue: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.NotEqualExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.BindPrims: equals(x$1: Any) :: 429
org.kiama.example.dataflow.DataflowAST.Return: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Local: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.source.Call: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.source.ProcDecl: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.CMP: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Parser.Pos: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.ThrowTo: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.SymbolTable.UserType: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.LetStmt: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Negate: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.Letp: equals(x$1: Any) :: 429
org.kiama.example.prolog.SymbolTable.AtomType: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L2.source.Case: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Add: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.source.Block: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Num: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.VarDecl: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Seqn: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Variable: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.RemW: equals(x$1: Any) :: 429
org.kiama.example.til.AST.While: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.IntExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.SymbolTable.BuiltinType: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BLT: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.IntType: equals(x$1: Any) :: 429
org.kiama.example.transform.AST.BinExpR: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.HeapOps.Put: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.source.RecordTypeDef: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JNull: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.EvalQuery: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.Constant: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.AndExp: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MOD: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.OrExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.StackUnderflow: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Block: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.source.FPSection: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.MulW: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.SymbolTable.Constant: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.ExnType: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Val: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.source.ArrayTypeDef: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Tuple: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.PushType: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.App: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.ORI: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.SymbolTable.RecordType: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.Exit: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.IntType: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.ADD: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.BoolType: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.ReturnStmt: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.CmpeqW: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.CallCC: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.AppCC: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.Lookup: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.CHKI: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CStrType: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.AssignStmt: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.LetRec: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.Program: equals(x$1: Any) :: 429
org.kiama.output.Infix: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.BoolVal: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.Block: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Return: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L2.source.MinMaxCond: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Not: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.DumpEmpty: equals(x$1: Any) :: 429
org.kiama.example.oneohonecompanies.Company.Dept: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MOV: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.SwapQuery: equals(x$1: Any) :: 429
org.kiama.attribution.AttributionBase.ParamAttributeKey: equals(o: Any) :: 429
org.kiama.example.imperative.AST.Mul: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.While: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.HeapOps.RefTypeValue: equals(x$1: Any) :: 429
org.kiama.example.oneohonecompanies.Company.DU: equals(x$1: Any) :: 429
org.kiama.example.oneohonecompanies.Company.PU: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.GeExp: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JFalse: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.IfStmt: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.SequenceDatum: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Ne: equals(x$1: Any) :: 429
org.kiama.example.dataflow.DataflowAST.Block: equals(x$1: Any) :: 429
org.kiama.example.prolog.SymbolTable.Predicate: equals(x$1: Any) :: 429
org.kiama.rewriting.NominalAST.Name: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.RISCProg: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.StackOps.Swap: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.App: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.AssignStmt: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.FieldExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.SymbolTable.Module: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MVNI: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.HeapOps.RefValue: equals(that: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.PrimValue: equals(that: Any) :: 429
org.kiama.example.obr.SymbolTable.UnknownType: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.IswimProg: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.source.FieldExp: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Div: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Var: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Write: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BGE: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MOVI: equals(x$1: Any) :: 429
org.kiama.example.dataflow.DataflowAST.Empty: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Binding: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Read: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.IndexExp: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.POP: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.SubExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.ExprStmt: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.EquivQuery: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.Lam: equals(x$1: Any) :: 429
org.kiama.example.prolog.Interpreter.TermGoal: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.source.IndexExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.FunType: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Add: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.Div: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.StringOps.StringValue: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Eq: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.LtExp: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.UnknownDecl: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CArrayType: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.PSH: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.Var: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.AndExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.Mult: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.TryStmt: equals(x$1: Any) :: 429
org.kiama.example.oneohonecompanies.Company.Employee: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.BoolVar: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Divide: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MUL: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.DivW: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JNumber: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.VarDecl: equals(x$1: Any) :: 429
org.kiama.example.dataflow.DataflowAST.Assign: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Asgn: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Ret: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Not: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CReturn: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JObject: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.DivisionByZero: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.c.CNamedType: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BGT: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Num: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.PushInt: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.ResumeFromDump: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.Target: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.Variable: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.App: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Times: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.source.FieldList: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Jmp: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.Lam: equals(x$1: Any) :: 429
org.kiama.example.lambda.AST.Sub: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.Num: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.While: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Program: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.LoopStmt: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.LetRecStmt: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.AddW: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.SymbolTable.Procedure: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.GreaterExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Empty: equals(x$1: Any) :: 429
org.kiama.example.lambda3.AST.SubstQuery: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.RecordVar: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.Multiple: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.NumVal: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.NegW: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JArray: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.AddExp: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.WRL: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.CmpltW: equals(x$1: Any) :: 429
org.kiama.example.til.AST.For: equals(x$1: Any) :: 429
org.kiama.example.dataflow.DataflowAST.While: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Lambda: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Mul: equals(x$1: Any) :: 429
org.kiama.example.prolog.SymbolTable.UnknownType: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.If: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Cut: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.SymbolTable.Variable: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.source.FieldIdn: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.StringOps.PushString: equals(x$1: Any) :: 429
org.kiama.example.lambda.AST.App: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.Var: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Program: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.TailApp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CIntType: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.ContValue: equals(that: Any) :: 429
org.kiama.example.lambda2.AST.Let: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.SubOp: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Plus: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.PushEmpty: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.SubW: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.Bind: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MULI: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.STW: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.NoType: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.EmptyValue: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.MatchClause: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.BooleanOps.FalseValue: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.BooleanOps.Equals: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.RaiseException: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Let: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.LdW: equals(x$1: Any) :: 429
org.kiama.example.transform.AST.Factor: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MVN: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Assign: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.RaiseStmt: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L2.source.ValCond: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.WhileStmt: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.TypeTypeValue: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.Assignment: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.GtExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.TypeError: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.Num: equals(x$1: Any) :: 429
org.kiama.example.transform.AST.BinExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Apply: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.StW: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.ContTypeValue: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.Resume: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BNE: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Cond: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.CmpneW: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Equal: equals(x$1: Any) :: 429
org.kiama.example.json.JSONTree.JString: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.LDW: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.source.VarMode: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.BooleanOps.Test: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Pattern: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Primitives: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CIntExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.OrExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual: equals(x$1: Any) :: 429
org.kiama.example.dataflow.DataflowAST.If: equals(x$1: Any) :: 429
org.kiama.example.transform.AST.Var: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Decl: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.RecordOps.UnpackRecord: equals(x$1: Any) :: 429
org.kiama.example.lambda.AST.Lam: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.Sub: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.EnumTypes: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.DIV: equals(x$1: Any) :: 429
org.kiama.attribution.Decorators.Chain: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.Dot: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.Unknown: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.ExitStmt: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.StackOps.Dup: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.WRH: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.NegExp: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BEQ: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.ArrayType: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.NamedType: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.PrimTypeValue: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.IntTypeValue: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.DivExp: equals(x$1: Any) :: 429
org.kiama.example.lambda.AST.Var: equals(x$1: Any) :: 429
org.kiama.example.transform.AST.Num: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Id: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.CMPI: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.Opn: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.RecordOps.Fields: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CFunctionDecl: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.EnumConst: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.LabelDef: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Assign: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.RecordType: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.StringVal: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CVarDecl: equals(x$1: Any) :: 429
org.kiama.example.prolog.SymbolTable.ListType: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Null: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.BSR: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.WRD: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.RecordOps.RecordValue: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Var: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.IntConst: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.DIVI: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.IdnExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CBlock: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CInclude: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.UnboundVariable: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.Rem: equals(x$1: Any) :: 429
org.kiama.example.lambda.AST.Num: equals(x$1: Any) :: 429
org.kiama.example.transform.AST.VarDecl: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L2.source.ForStatement: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.source.ValMode: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Div: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Remainder: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Read: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.ArrayVar: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.ObrInt: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.TryBody: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.source.ModuleDecl: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.MatchError: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L1.source.WhileStatement: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.SymbolTable.Field: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Or: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.RD: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue: equals(x$1: Any) :: 429
org.kiama.util.Messaging.Record: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.StackOps.Pop: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.BoolExp: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.Catch: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L4.SymbolTable.ArrayType: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.ADDI: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.ExnConst: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.ClassDecl: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.NotExp: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.MODI: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.TypeDecl: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.CmpgtW: equals(x$1: Any) :: 429
org.kiama.example.prolog.SymbolTable.Variable: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L1.source.IfStatement: equals(x$1: Any) :: 429
org.kiama.example.prolog.Interpreter.DisplayGoal: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.BooleanLiteral: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.source.EmptyStmt: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.c.CProgram: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Pred: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Neg: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.CodeSegment: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.EqExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.ModExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.MkClosures: equals(x$1: Any) :: 429
org.kiama.example.imperative.AST.Sub: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.ConstDecl: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Fact: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Rule: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.NeExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.IntExp: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.source.MulExp: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.IntVar: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.Enter: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L2.source.CaseStatement: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.PushMachineException: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.IntParam: equals(x$1: Any) :: 429
org.kiama.example.prolog.Interpreter.UnifyGoal: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Minus: equals(x$1: Any) :: 429
org.kiama.rewriting.NominalAST.Bind: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L3.SymbolTable.Parameter: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.BooleanOps.TrueValue: equals(x$1: Any) :: 429
org.kiama.example.obr.SymbolTable.EnumType: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.IntegerOps.IntValue: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.ForStmt: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Label: equals(x$1: Any) :: 429
org.kiama.util.IO.FileNotFoundException: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.NegExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue: equals(that: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Match: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Atom: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.SlashExp: equals(x$1: Any) :: 429
org.kiama.example.transform.AST.Program: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.StarExp: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.IntDatum: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.BooleanOps.PushFalse: equals(x$1: Any) :: 429
org.kiama.example.picojava.AbstractSyntax.Use: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.SUBI: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.HeapOps.Alloc: equals(x$1: Any) :: 429
org.kiama.example.til.AST.IfThen: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.StringOps.UserExceptionValue: equals(x$1: Any) :: 429
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) :: 429
org.kiama.example.oberon0.base.source.IdnDef: equals(x$1: Any) :: 429
org.kiama.example.til.AST.Write: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Bne: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.LessExp: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Less: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.GreaterEq: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.SUB: equals(x$1: Any) :: 429
org.kiama.example.lambda2.AST.AddOp: equals(x$1: Any) :: 429
org.kiama.example.iswim.compiler.Syntax.Greater: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.RecordOps.MkRecord: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.FunctionSpec: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.RecordOps.RecordTypeValue: equals(x$1: Any) :: 429
org.kiama.example.obr.RISCTree.Indexed: equals(x$1: Any) :: 429
org.kiama.example.prolog.PrologTree.Integer: equals(x$1: Any) :: 429
org.kiama.example.RISC.RISCISA.Comment: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.ExceptionHandler.SetHandler: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.SECDBase.MalformedInstruction: equals(x$1: Any) :: 429
org.kiama.example.iswim.secd.StringOps.StringTypeValue: equals(x$1: Any) :: 429
org.kiama.example.obr.ObrTree.PlusExp: equals(x$1: Any) :: 429
org.kiama.attribution.Attribution.CachedDynamicAttribute: apply(t: T) :: 164
org.kiama.attribution.Attribution.CachedAttribute: apply(t: T) :: 164
org.kiama.example.oberon0.L2.Desugarer$$anonfun$casesToIf$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.PrettyPrinter$$anonfun$optSectionToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$lookup$1$$anonfun$apply$6$$anonfun$apply$7: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.AST$Seqn$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.LambdaTests$$anonfun$assertEvalAll$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.PrettyPrinting$$anonfun$show$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$82$$anonfun$apply$85: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121$$anonfun$apply$126: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.CCodeGenerator$$anonfun$translateActualParams$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.AST$Neg$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.PredefinedTypes$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.TypeAnalyser$$anonfun$exptypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.Analyser$$anonfun$check$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCTransformation$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.c.PrettyPrinter$$anonfun$basetypeToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$env$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$10: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$leave$1$$anonfun$3$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$eval_top$1$$anonfun$apply$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.source.PrettyPrinter$$anonfun$caseToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.c.PrettyPrinter$$anonfun$toDoc$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$7: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Attribution$$anonfun$tree$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.AST$Var$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.Interpreter$$anonfun$interpret$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.Parser$$anonfun$declarationsDef$1$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$Pos$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$6: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$regexnows$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$line$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$expconst$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.StringOps$$anonfun$org$kiama$example$iswim$secd$StringOps$$unescape$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$liter$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$scan$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$wrap$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.PrologTree$Var$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$105: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Syntax$ExprStmt$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$49: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$text$1$$anonfun$4$$anonfun$apply$5$$anonfun$apply$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$150: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Decorators$$anonfun$outfunc$lzycompute$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$rootconstexpDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Attribution$$anonfun$childAttr$1: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Decorators$$anonfun$infunc$lzycompute$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.LambdaTests$$anonfun$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$120$$anonfun$apply$123: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$check$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$signed$1$$anonfun$apply$126: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$15$$anonfun$someMap$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple5$1$$anonfun$apply$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$throwtoexpr$1$$anonfun$apply$180: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$Strategy$$anon$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$9: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.TypeAnalyser$$anonfun$idntypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.PrologTree$Program$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.Parser$$anonfun$name$1$$anonfun$apply$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda3.AST$FreeNamesQuery$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Syntax$IswimProg$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.source.PrettyPrinter$$anonfun$casesToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.AST$Write$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$IdnExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$9: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$119$$anonfun$apply$120: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$110: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_1Tests$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.LambdaTests$$anonfun$2$$anonfun$apply$mcV$sp$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$86$$anonfun$apply$89: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecstmt$1$$anonfun$apply$164: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$value$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1$$anonfun$applyOrElse$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.AST$Var$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$70$$anonfun$apply$73: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$encode$10: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$arbStmt$1$$anonfun$apply$12: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Attributable$$anonfun$setNodeChildConnections$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$prio$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.Driver$$anonfun$checkargs$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.AST$Num$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$PlusStrategy: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$constrainedInt$1$$anonfun$apply$9: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$4$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genSeqn$1$$anonfun$apply$6: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$empty$1: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Attribution$CachedDynamicAttribute$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.RISC.RISCISA$$anonfun$prettyprint$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$38$$anonfun$apply$40: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$getcode$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.source.IdnDef$: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$Term$$anonfun$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$IntVar$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.source.PrettyPrinter$$anonfun$toDoc$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L1.CCodeGenerator$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinterBase$$anonfun$any$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.NameAnalyser$$anonfun$rootconstexpDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.AST$Var$: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$group$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genSub$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$group$1$$anonfun$apply$9: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$Doc: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple2$1$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$check$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$line$1$$anonfun$5$$anonfun$apply$7$$anonfun$apply$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$primstmt$1$$anonfun$apply$188: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Decorators$$anonfun$dattr$lzycompute$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$variable$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$integer$1$$anonfun$apply$125: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.Interpreter$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.DataflowAST$Block$: apply(Ljava/lang/Object;) :: 162
org.kiama.util.Environments$$anonfun$isDefinedInEnv$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$isconst$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$2$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$10: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.source.PrettyPrinter$$anonfun$toDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$16: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.AbstractSyntax$Block$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$encode$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.source.PrettyPrinter$$anonfun$condsToDoc$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$errors$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$ExnConst$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$80$$anonfun$apply$83: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genAsgn$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$scan$1$$anonfun$apply$1$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinterBase$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1$$anonfun$apply$12: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L1.CCodeGenerator$$anonfun$translate$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.NamedType$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.VariablesImpl$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.util.PositionedParserUtilities$$anon$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$1$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$numparams$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.c.PrettyPrinter$$anonfun$toDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$58$$anonfun$apply$61: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$parameters$1$$anonfun$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.CCodeGenerator$$anonfun$translate$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oneohonecompanies.Other$$anonfun$salary$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_2Tests$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$84$$anonfun$apply$87: apply(Ljava/lang/Object;) :: 162
org.kiama.example.RISC.RISC$$anonfun$execute$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$2$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$group$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$genLamExp$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$op_tree$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.PrettyPrinter$$anonfun$show$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.TypeAnalyser$$anonfun$tipeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$10: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$7: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$list$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.ControlFlowImpl$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$lookup$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$65: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$68$$anonfun$apply$71: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$bindexpr$1$$anonfun$apply$144: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda3.Parser$$anonfun$integer$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.IdnExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$13: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genMul$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$nest$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$constToTupleFunction2$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$12: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anonfun$rulef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.Parser$$anonfun$statementSequence$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_1Tests$$anonfun$5$$anonfun$apply$mcV$sp$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Lambda$$anonfun$processline$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.AbstractSyntax$BooleanLiteral$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$liter$2$$anonfun$apply$12: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$idntypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.c.PrettyPrinter$$anonfun$toDoc$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCTransformation$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$env$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$fieldListsToFields$1$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$valexpr$1$$anonfun$apply$182: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.NominalRewriter$$anonfun$alphaequiv$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$5$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$72$$anonfun$apply$75: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.AbstractSyntax$Program$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L1.TypeAnalyser$$anonfun$exptypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.Interpreter$$anonfun$interpret$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$genLamExp$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$11: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.source.PrettyPrinter$$anonfun$semisep$1: apply(Ljava/lang/Object;) :: 162
org.kiama.machine.Machine$$anonfun$performUpdates$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.LambdaTests$$anonfun$2$$anonfun$apply$mcV$sp$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$2$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.c.PrettyPrinter$$anonfun$toDoc$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCTransformation$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$returnexpr$1$$anonfun$apply$141: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.AST$Var$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_1Tests$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anonfun$where$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$whileexpr$1$$anonfun$apply$174: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$3$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$118: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$106$$anonfun$apply$107: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$constToTupleFunction3$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$any$1$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.ErrorCheck$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$integer$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$5$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.ExceptionHandler$$anonfun$evalInst$1$$anonfun$applyOrElse$1: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Attribution$CachedParamAttribute: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilitiesTests$$anonfun$node$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$lookup$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$Strategy$$anon$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.Parser$$anonfun$step$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.Desugarer$$anonfun$desugarFor$1$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$156: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$group$1$$anonfun$apply$9$$anonfun$apply$10$$anonfun$6$$anonfun$apply$11: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$7: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$result$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$BoolVar$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$3$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.AST$Program$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genWhile$1$$anonfun$apply$10: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$9: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinterBase$$anonfun$any$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlists$3$$anonfun$apply$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$letstmt$1$$anonfun$apply$160: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Parser$$anonfun$integer$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$getcode$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.CCodeGenerator$$anonfun$translate$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$IntExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$CodeTree$$anonfun$org$kiama$example$iswim$secd$SECDBase$CodeTree$$flattened$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.WhitespaceParser$$anonfun$positioned$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1$$anonfun$apply$13$$anonfun$apply$14: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$ReturnStmt$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$tipeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Par$$anonfun$letLet$1$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.CCodeGenerator$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.source.PrettyPrinter$$anonfun$blockToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Parser$$anonfun$double$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$90$$anonfun$apply$93: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.NameAnalyser$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.Interpreter$TermGoal$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.ErrorCheck$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$mkrefexpr$1$$anonfun$apply$184: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$94$$anonfun$apply$97: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$9: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.AbstractSyntax$Use$: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$any$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1$$anonfun$applyOrElse$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.SyntaxAnalysis$$anonfun$string$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.source.PrettyPrinter$$anonfun$toDoc$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$fieldListsToFields$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anon$2$$anonfun$toDoc$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$63: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.Interpreter$$anonfun$org$kiama$example$prolog$Interpreter$$varsof$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$2$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.PrettyPrinting$$anonfun$show$2: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$constToTupleFunction4$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.LivenessImpl$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$7$$anonfun$apply$13: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$entity$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$4$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$NegExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.util.TestCompiler$$anonfun$filetests$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$5$$anonfun$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$NotExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.util.Messaging$$anonfun$report$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$eval_top$1$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$arbExp$1$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genAdd$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1$$anonfun$apply$171: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Attributable$$anonfun$initTreeProperties$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.SyntaxAnalysis$$anonfun$jarray$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple4$1$$anonfun$apply$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$92$$anonfun$apply$95: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L1.source.PrettyPrinter$$anonfun$ifToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.LambdaTests$$anonfun$2$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$leave$1$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_1Tests$$anonfun$4$$anonfun$apply$mcV$sp$4: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$13$$anonfun$allTraversable$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.TypeAnalyser$$anonfun$deftypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.SyntaxAnalysis$$anonfun$jnumber$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$IntParam$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$37$$anonfun$apply$38: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.source.RecordTypeDef$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$11: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.source.FieldIdn$: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinterBase$$anonfun$list$default$3$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.ControlFlowImpl$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$91: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$1$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$parameters$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$encode$8: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$line$1$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$117: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$14: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.SyntaxAnalysis$$anonfun$jpair$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$matchclause$1$$anonfun$apply$129: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$35$$anonfun$apply$37: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$9: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.DataflowAST$Return$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.CCodeGenerator$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$text$1$$anonfun$4$$anonfun$apply$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$2: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anonfun$collect$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$lookup$1$$anonfun$apply$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$$anonfun$3$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.PrologTree$Fact$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.CCodeGenerator$$anonfun$translate$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL1_1$$anonfun$integer$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$exptypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.WhitespaceParser$$anonfun$regex$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$genAppExp$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$13$$anonfun$allMap$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.LambdaTests$$anonfun$canon$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genDiv$1$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.JSONTree$JName$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$declarations$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1$$anonfun$apply$139: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.source.IdnUse$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.Parser$$anonfun$block$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$10: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.Interpreter$$anonfun$interpret$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlist$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genMul$1$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.IntExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genAsgn$1$$anonfun$apply$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1$$anonfun$applyOrElse$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.Desugarer$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$leave$1$$anonfun$3$$anonfun$apply$3$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.ErrorCheck$$anonfun$2$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genSeqn$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCTransformation$$anonfun$3$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.TypeAnalyser$$anonfun$exptypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$9: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$6: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$encode$11: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.Parser$$anonfun$declarationsDef$1$$anonfun$apply$3$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$prio$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$constToTupleFunction5$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$line$1$$anonfun$5$$anonfun$apply$7: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.PrettyPrinter$$anonfun$show$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$prune$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$deftypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCTransformation$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$empty$1$$anonfun$apply$12: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.NegExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlists$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$19$$anonfun$apply$23: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genWhile$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$RaiseStmt$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$cut$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$7: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.LambdaTests$$anonfun$assertEvalAll$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Parser$$anonfun$number$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.NotExp$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$trycatch$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.ErrorCheck$$anonfun$2$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.TypeAnalyser$$anonfun$typebasetype$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.AST$VarDecl$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.CCodeGenerator$$anonfun$translate$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.ErrorCheck$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.machine.Machine$$anonfun$performUpdates$2: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Decorators$$anonfun$in$lzycompute$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.c.PrettyPrinter$$anonfun$toDoc$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda3.AST$EvalQuery$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.CCodeGenerator$$anonfun$translateFormalParams$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$tipeDef$1$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$Strategy$$anon$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda3.Parser$$anonfun$name$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.AST$Decl$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.PrettyPrinter$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Syntax$Variable$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genDiv$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.LambdaTests$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$parameters$1$$anonfun$1$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$96$$anonfun$apply$99: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$1$$anonfun$apply$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$emptyexpr$1$$anonfun$apply$103: apply(Ljava/lang/Object;) :: 162
org.kiama.util.WhitespaceParser$$anonfun$literal$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.AST$Str$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.CCodeGenerator$$anonfun$translate$2: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$constToTupleFunction6$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.AST$Var$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$37: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$liter$4$$anonfun$apply$14: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L1.Parser$$anonfun$optelse$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.JSONTree$JString$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.RISC.RISC$$anonfun$execute$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.ErrorCheck$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.ObrTree$LoopStmt$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.SemanticAnalysis$$anonfun$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$66$$anonfun$apply$69: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinterBase$$anonfun$any$1: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Decorators$$anonfun$out$lzycompute$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.LivenessImpl$$anonfun$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$CodeSegment$$anonfun$toDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.source.PrettyPrinter$$anonfun$toDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1$$anonfun$applyOrElse$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$callccexpr$1$$anonfun$apply$176: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term4$1$$anonfun$apply$101: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anonfun$collect$1$$anonfun$8: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Parser$$anonfun$integer$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.source.PrettyPrinter$$anonfun$singleCaseToDoc$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$parameters$1$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Parser$$anonfun$integer$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda3.AST$Var$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$keyword$1: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.Attribution$CachedParamAttribute$$anon$6$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.attribution.AttributionBase$Attribute$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.json.JSONTree$JObject$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_3Tests$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L1.source.PrettyPrinter$$anonfun$ifToDoc$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$50$$anonfun$apply$53: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.Driver$$anonfun$checkargs$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$MkClosures$$anonfun$toDoc$2: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$text$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$getcode$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$$anonfun$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$prioenv$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple6$1$$anonfun$apply$7: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$14$$anonfun$oneMap$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1$$anonfun$apply$134: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$79: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$$anonfun$text$1$$anonfun$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L1.CCodeGenerator$$anonfun$translate$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$encode$9: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$exptypeDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$15: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.ErrorCheck$$anonfun$3$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.source.PrettyPrinter$$anonfun$idlistToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genSub$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$Pos$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda2.Analysis$$anonfun$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$ops$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.AST$Read$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$54$$anonfun$apply$57: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_1Tests$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.dataflow.VariablesImpl$$anonfun$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$64$$anonfun$apply$67: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.c.PrettyPrinter$$anonfun$toDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$34: apply(Ljava/lang/Object;) :: 162
org.kiama.example.lambda.Generator$$anonfun$genAppExp$1$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.AST$Id$: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinter$Doc$$anonfun$$less$greater$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.AST$Factor$: apply(Ljava/lang/Object;) :: 162
org.kiama.util.TestCompiler$$anonfun$infiletests$1$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anon$7: apply(Ljava/lang/Object;) :: 162
org.kiama.util.PositionedParserUtilities$$anon$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$77: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.NominalRewriter$$anonfun$fresh$1: apply(Ljava/lang/Object;) :: 162
org.kiama.util.TestCompiler$$anonfun$filetests$1$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.Rewriter$$anonfun$option$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.TypeAnalysis$$anonfun$7: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NullObjects$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.TIL2_2Tests$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;) :: 162
org.kiama.example.prolog.PrologTree$Atom$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.imperative.Generator$$anonfun$genAdd$1$$anonfun$apply$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.CCodeGenerator$$anonfun$translate$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$rootconstexpDef$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L0.TypeAnalyser$$anonfun$basetype$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.TestDriver$$anonfun$sanitise$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L4.SymbolTable$$anonfun$hasField$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.picojava.NameResolution$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.RISCEncoder$$anonfun$encode$12: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$ident$1$$anonfun$apply$127: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$6: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.source.ValCond$: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$78$$anonfun$apply$81: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.NominalRewriter$$anonfun$subst$1$$anonfun$apply$2$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$ops$1$$anonfun$apply$3: apply(Ljava/lang/Object;) :: 162
org.kiama.example.transform.Analysis$$anonfun$eval_top$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SemanticAnalysis$$anonfun$1: apply(Ljava/lang/Object;) :: 162
org.kiama.output.PrettyPrinterBase$$anonfun$any$4: apply(Ljava/lang/Object;) :: 162
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple3$1$$anonfun$apply$4: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.compiler.Parser$$anonfun$liter$3$$anonfun$apply$13: apply(Ljava/lang/Object;) :: 162
org.kiama.util.CompilerBase$$anonfun$driver$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$7$$anonfun$apply$41: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.base.Driver$$anonfun$driver$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1$$anonfun$applyOrElse$5: apply(Ljava/lang/Object;) :: 162
org.kiama.example.oberon0.L2.source.PrettyPrinter$$anonfun$forToDoc$1: apply(Ljava/lang/Object;) :: 162
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$100$$anonfun$apply$103: apply(Ljava/lang/Object;) :: 162
org.kiama.example.til.Main$$anonfun$main$1: apply(Ljava/lang/Object;) :: 162
org.kiama.rewriting.NominalRewriter.$anonfun: apply(t: T) :: 161
org.kiama.attribution.AttributionBase.ConstantAttribute: apply(t: T) :: 161
org.kiama.attribution.AttributionBase.CircularAttribute: apply(t: T) :: 161
org.kiama.attribution.Attribution.CachedParamAttribute.$anon: apply(t: T) :: 160
org.kiama.rewriting.Rewriter.$anonfun: apply(x0$1: Any) :: 119
org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) :: 119
org.kiama.rewriting.Rewriter.$anon.$anonfun: apply(ct: Any) :: 109
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply() :: 81
org.kiama.attribution.Decorators.Chain: apply(t: T) :: 74
org.kiama.util.RegexParserTests: assertParseOk([T]str: String,p: RegexParserTests.this.Parser[T],result: T) :: 73
org.kiama.util.PositionedParserUtilities$$anon$1: $tilde(Lscala/Function0;) :: 64
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply() :: 59
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply() :: 56
org.kiama.example.obr.SyntaxAnalysis.$anonfun: apply() :: 52
org.kiama.example.iswim.compiler.Parser: expr() :: 47
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply() :: 44
org.kiama.util.StringEmitter: emitln(any: Any) :: 41
org.kiama.example.iswim.compiler.Parser.$anonfun: apply() :: 39
org.kiama.example.lambda2.LambdaTests.$anonfun: apply() :: 39
org.kiama.example.iswim.tests.ParserTests: parser2packrat(Lscala/Function0;) :: 37
org.kiama.example.iswim.tests.CodeGeneratorTests: parser2packrat(Lscala/Function0;) :: 37
org.kiama.example.iswim.tests.SemanticAnalysisTests: parser2packrat(Lscala/Function0;) :: 37
org.kiama.example.iswim.driver.Main$: parser2packrat(Lscala/Function0;) :: 37
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$100: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$110$$anonfun$apply$112: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$24: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$whileStmt$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$6: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$name$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$50$$anonfun$apply$51: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$var_decl$2: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jobject$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jobject$1: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1$$anonfun$apply$15$$anonfun$apply$16: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$112$$anonfun$apply$113: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$32: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$factor$1$$anonfun$apply$9$$anonfun$apply$11: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$ifStm$5: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$whileStm$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$12$$anonfun$apply$13$$anonfun$apply$15: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$bindexpr$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$112: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$2: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$14$$anonfun$apply$15$$anonfun$apply$16: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$9$$anonfun$35: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$lambda$3: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$8: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$stm$1$$anonfun$apply$2: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$7: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$declarationsDef$1: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$9: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$2: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$class_decl$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$2: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$2$$anonfun$apply$16: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$16: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$31: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$98: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$117$$anonfun$apply$119: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$1$$anonfun$apply$14: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$integer$1: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$10: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$conditional$2$$anonfun$apply$46: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp1$1$$anonfun$apply$12: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$class_decl$2: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$35$$anonfun$apply$36$$anonfun$apply$37: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$parenexpr$1$$anonfun$apply$27: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$124: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$2: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$8$$anonfun$33: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecl$2$$anonfun$apply$18: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$10$$anonfun$apply$11: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple4$1: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$2: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$exp$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$120$$anonfun$apply$121: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$20: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$28$$anonfun$apply$29: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$procedureDeclaration$2$$anonfun$apply$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$154$$anonfun$apply$155: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$failure$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$76: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$14: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4$$anonfun$apply$22$$anonfun$apply$24: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$8: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$3: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$7: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$26$$anonfun$apply$27: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$primstmt$1$$anonfun$apply$185$$anonfun$apply$187: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$subsVar$1$$anonfun$applyOrElse$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$parenexpr$1$$anonfun$apply$26: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$term$3: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$s$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$50$$anonfun$apply$52: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$110: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$3$$anonfun$apply$49: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$ifStm$4: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$whileStm$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$blockStm$2: apply() :: 36
org.kiama.example.til.TIL1_1Tests$$anonfun$2: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$12$$anonfun$apply$13$$anonfun$apply$14: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$conditions$2: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$procedureDeclaration$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1$$anonfun$apply$169: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$trycatch$2$$anonfun$apply$60: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$20: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$program$2$$anonfun$apply$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literal$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$64: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$read_statement$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$14$$anonfun$apply$15: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$parenexpr$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$write_statement$1: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$condition$2: apply() :: 36
org.kiama.attribution.Attribution$CachedDynamicAttribute$$anonfun$5: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$ident$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$64: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$12: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31$$anonfun$apply$36: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$throwtoexpr$1$$anonfun$apply$177$$anonfun$apply$178: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$4$$anonfun$apply$13$$anonfun$apply$14: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$12: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$map$1$$anonfun$applyOrElse$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$6$$anonfun$apply$22$$anonfun$apply$23: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$sequence$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121$$anonfun$apply$125: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$86$$anonfun$apply$88: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$factor$1$$anonfun$apply$29: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$14: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$10: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$106$$anonfun$apply$107: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$7: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$32$$anonfun$apply$33: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$stmt$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$asgnStm$1: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$while_stmt$4: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$whitespaceParser$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$106$$anonfun$apply$108: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$8: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$45: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$6: apply() :: 36
org.kiama.attribution.AttributionBase$Attribute$$anonfun$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$4: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$factor$1$$anonfun$apply$27$$anonfun$apply$28: apply() :: 36
org.kiama.example.lambda2.ReduceSubst$$anonfun$lambda$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1$$anonfun$apply$25: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1$$anonfun$apply$130: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$stmt$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$14$$anonfun$apply$17: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$4$$anonfun$apply$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$valexpr$1$$anonfun$apply$181: apply() :: 36
org.kiama.rewriting.NominalRewriter$$anonfun$subst$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$11: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1$$anonfun$apply$13: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$7$$anonfun$apply$9: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$2: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$21: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$ifStm$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$58: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$4: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$kase$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$104: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$4$$anonfun$apply$6: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$constrainedInt$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$block_stmt$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$55$$anonfun$apply$56: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$22$$anonfun$apply$23$$anonfun$apply$24: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$1: apply() :: 36
org.kiama.example.til.TIL2_1Tests$$anonfun$3: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$8: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$statementDef$1$$anonfun$apply$14: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$4$$anonfun$apply$6$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$33: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlists$2: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$28$$anonfun$apply$29$$anonfun$apply$30: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$4$$anonfun$20: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$while_statement$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$asgnStmt$2: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jpair$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$factor$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$org$kiama$example$lambda2$LambdaTests$$canonise$1$1: apply() :: 36
org.kiama.example.oberon0.L2.source.PrettyPrinter$$anonfun$caseToDoc$2: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp2$1: apply() :: 36
org.kiama.util.CompilerTests$$anonfun$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$48$$anonfun$apply$49: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statementSequence$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$26: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple6$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$6$$anonfun$apply$7: apply() :: 36
org.kiama.util.TestCompiler$$anonfun$filetest$1$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$optelse$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$34: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$29$$anonfun$apply$30$$anonfun$apply$31: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$3$$anonfun$apply$49$$anonfun$apply$51: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$statement$1$$anonfun$apply$4: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$4: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$14: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$statementDef$1: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$18: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$26: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$boolean_literal$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecstmt$1$$anonfun$apply$161: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$109: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$92: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$3$$anonfun$apply$17: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$38$$anonfun$apply$39: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$27: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$parameterdecl$2: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$f$lzycompute$1$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$18: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$84$$anonfun$apply$86: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$22: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$5: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$8: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statements$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3$$anonfun$apply$7$$anonfun$apply$8: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$8$$anonfun$apply$9$$anonfun$apply$10: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$66$$anonfun$apply$68: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$2: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$22$$anonfun$apply$24: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$46: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$err$1: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$18$$anonfun$apply$19: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$idn$2: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$75: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$declaration$2: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$idn$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$while_statement$2: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$2$$anonfun$apply$3: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$33: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$47: apply() :: 36
org.kiama.example.lambda2.Reduce$$anonfun$s$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$liter$4: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$15: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$74: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$ifStm$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$104$$anonfun$apply$105: apply() :: 36
org.kiama.example.oberon0.L2.Lifter$$anonfun$liftBlocks$lzycompute$1$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp1$1$$anonfun$apply$11: apply() :: 36
org.kiama.example.lambda.Generator$$anonfun$arbVar$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$1$$anonfun$apply$11$$anonfun$apply$12: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$58$$anonfun$apply$60: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$50: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$asgnStmt$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$assignment$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$constdecl$2: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$clause$3: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jobject$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlist$4: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$outermost$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$whileexpr$1$$anonfun$apply$172: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letstmt$1: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$factor$1$$anonfun$apply$9$$anonfun$apply$10: apply() :: 36
org.kiama.example.oberon0.L2.Desugarer$$anonfun$desugarFor$1$$anonfun$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$whileexpr$1$$anonfun$apply$173: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$22: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$13: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$7: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$factor$1: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$map$1$$anonfun$applyOrElse$2$$anonfun$apply$1$$anonfun$applyOrElse$4: apply() :: 36
org.kiama.example.lambda.Evaluator$$anonfun$2: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$lambda$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$33$$anonfun$apply$34: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$mkrefexpr$1$$anonfun$apply$183: apply() :: 36
org.kiama.rewriting.Rewriter$Strategy$$anonfun$$plus$1: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$exp$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$3$$anonfun$apply$48: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$reduce$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$term$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$itype$2: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$constdecl$1: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$4: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4$$anonfun$apply$22$$anonfun$apply$23: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$conditions$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$returnStm$1: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$procedureDeclaration$1: apply() :: 36
org.kiama.example.prolog.Interpreter$$anonfun$rename$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$117$$anonfun$apply$118: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$primstmt$1$$anonfun$apply$185$$anonfun$apply$186: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$23: apply() :: 36
org.kiama.example.til.TIL1_1Tests$$anonfun$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$5: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$var_decl$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$8$$anonfun$32: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$38$$anonfun$apply$39: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$55: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$10$$anonfun$apply$13: apply() :: 36
org.kiama.example.oberon0.L2.source.PrettyPrinter$$anonfun$forToDoc$2: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$14: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term4$1$$anonfun$apply$100: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$subsVar$1$$anonfun$applyOrElse$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$stm$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$31: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$vardeclsection$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$itype$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$110$$anonfun$apply$111: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$111: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$blockStm$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$9$$anonfun$34: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$lambda$2: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$7: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$2: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$term$2: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$7$$anonfun$30: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$clause$2: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$statementDef$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$1: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$4$$anonfun$apply$6: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$1: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$14$$anonfun$apply$16: apply() :: 36
org.kiama.example.prolog.Subst$$anonfun$apply$2: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$6: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$3$$anonfun$apply$21: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$emptyexpr$1: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$while_stmt$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$whileexpr$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$moduledecl$3: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$5: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$clause$3$$anonfun$apply$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1$$anonfun$apply$24: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$86: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$63: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$2: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$stmt$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$25: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$10$$anonfun$39: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$14$$anonfun$apply$15: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$op$2$$anonfun$apply$24: apply() :: 36
org.kiama.example.til.TIL2_1$$anonfun$transform$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$28: apply() :: 36
org.kiama.attribution.Attributable$$anonfun$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$fielddecl$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$factor$1$$anonfun$apply$28: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$115: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$44: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$expression$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$list$3$$anonfun$apply$9: apply() :: 36
org.kiama.example.lambda2.ReduceSubst$$anonfun$lambda$2: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$name$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecstmt$1$$anonfun$apply$161$$anonfun$apply$163: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1$$anonfun$apply$10$$anonfun$apply$11: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$lambda$7: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$not$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$1: apply() :: 36
org.kiama.util.CompilerTests$$anonfun$2$$anonfun$3: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$vardeclsection$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$68$$anonfun$apply$70: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$13: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$block_stmt$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1$$anonfun$apply$168: apply() :: 36
org.kiama.output.PrettyPrinter: text(t: String) :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$fielddecl$3: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$condition$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$119: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$44: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$block$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$11: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$32: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$14$$anonfun$apply$15: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$where$1$$anonfun$apply$10: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$96$$anonfun$apply$98: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$op$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$86$$anonfun$apply$87: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$7$$anonfun$apply$8: apply() :: 36
org.kiama.example.dataflow.Optimise$$anonfun$run$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$11: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$4$$anonfun$apply$19: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1$$anonfun$apply$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$6$$anonfun$apply$22: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecl$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$72$$anonfun$apply$74: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$29: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$idnlist$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$148$$anonfun$apply$149: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$topdown$1: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$3: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$33: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$13: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$24: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$declaration$1: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$elsif$2$$anonfun$apply$5: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$idn$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$9: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8$$anonfun$apply$13: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$4: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$vardecl$2$$anonfun$apply$10: apply() :: 36
org.kiama.rewriting.NominalRewriter$$anonfun$swap$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$25: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$conditional$3: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$primary$1$$anonfun$apply$40: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$2$$anonfun$apply$39: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$20: apply() :: 36
org.kiama.example.dataflow.Optimise$$anonfun$elimEmpties$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$whitespaceParser$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literal$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$84$$anonfun$apply$85: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$liter$3: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statementDef$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$statement$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$exprstmt$1: apply() :: 36
org.kiama.example.lambda.Generator$$anonfun$arbExp$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$151$$anonfun$apply$153: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$3$$anonfun$apply$17: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8$$anonfun$apply$9: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$37: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$1$$anonfun$apply$14$$anonfun$apply$15$$anonfun$apply$16: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$17: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$20: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$12: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$90: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$primstmt$1: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$19: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literals$2: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$factor$1: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$program$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term4$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1$$anonfun$apply$15$$anonfun$apply$19: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$block$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$returnexpr$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$7: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$19$$anonfun$apply$21: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statementDef$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$operator$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$3$$anonfun$apply$49$$anonfun$apply$50: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$statement$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$list$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$22$$anonfun$apply$23: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$7: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$3: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$45: apply() :: 36
org.kiama.example.til.TIL2_1Tests$$anonfun$2: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$idn$1: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$update$1$$anonfun$applyOrElse$2: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$2$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$name$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$62: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$asgnStmt$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$lhsDef$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$comment$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$parameterdecl$1: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$name$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$factor$1$$anonfun$apply$32: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$10: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$7: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$117: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$57$$anonfun$apply$59: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$catchclause$3: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$term$1: apply() :: 36
org.kiama.example.dataflow.Optimise$$anonfun$rules$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1$$anonfun$apply$169$$anonfun$apply$170: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlists$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$22$$anonfun$apply$23: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$5$$anonfun$apply$20: apply() :: 36
org.kiama.example.prolog.Subst$$anonfun$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$5$$anonfun$apply$27$$anonfun$apply$29: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$5$$anonfun$apply$20$$anonfun$apply$21: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype$1$$anonfun$apply$19: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$66$$anonfun$apply$67: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$9: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$1: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$4: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$oncetd$1$$anonfun$apply$26: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$6: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$trans$3: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$3: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$4$$anonfun$apply$9: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$82$$anonfun$apply$84: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$21: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$oncetd$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$idndeflist$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4$$anonfun$apply$22: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$fpsection$1$$anonfun$apply$12: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$12: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$vardecl$1: apply() :: 36
org.kiama.example.lambda3.LambdaTests$$anonfun$mkparsetest$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$4: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$alltd$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$optelseend$3$$anonfun$apply$47: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1$$anonfun$apply$10$$anonfun$apply$11: apply() :: 36
org.kiama.rewriting.NominalRewriter$$anonfun$subst$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$moduledecl$3$$anonfun$apply$2: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$14: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$step$3: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$34$$anonfun$apply$35$$anonfun$apply$36: apply() :: 36
org.kiama.util.Environments$$anonfun$lookup$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letstmt$1$$anonfun$apply$157: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$x$7$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$14: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$factor$1: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$4: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$caseStatement$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$bindexpr$1$$anonfun$apply$143: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1$$anonfun$apply$7$$anonfun$apply$9: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$6: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$19: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$1$$anonfun$apply$13: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$8$$anonfun$31: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$3$$anonfun$apply$20: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$vardecl$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letstmt$1$$anonfun$apply$157$$anonfun$apply$159: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$38: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$opdecl$2: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$name$1$$anonfun$apply$6$$anonfun$apply$7: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$2$$anonfun$applyOrElse$5$$anonfun$apply$40: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$30: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$trans$2: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$1$$anonfun$applyOrElse$9: apply() :: 36
org.kiama.example.oneohonecompanies.Cut$$anonfun$cut$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.til.TIL2_2$$anonfun$transform$1: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$38: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jarray$1$$anonfun$apply$11: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$5$$anonfun$27: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$cases$3: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$map$1$$anonfun$applyOrElse$2$$anonfun$apply$1$$anonfun$applyOrElse$3: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$84: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$elsifs$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$whitespaceParser$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$stm$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$29: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$10$$anonfun$apply$12: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$109: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$50: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$ifStm$2: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$clause$1: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literal$1$$anonfun$apply$3$$anonfun$apply$5: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$12: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$29$$anonfun$apply$30: apply() :: 36
org.kiama.example.til.TIL2_1$$anonfun$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$78$$anonfun$apply$80: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype0$1: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$5: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$4$$anonfun$apply$4: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$factor$1$$anonfun$apply$27: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$23: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecstmt$1$$anonfun$apply$161$$anonfun$apply$162: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$27: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$3$$anonfun$apply$16: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple3$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$fielddecl$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype$1$$anonfun$apply$17$$anonfun$apply$18: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$4$$anonfun$apply$18$$anonfun$apply$19: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1$$anonfun$apply$167: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$constdeclsection$1: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$3$$anonfun$apply$17$$anonfun$apply$19: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$5: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$1$$anonfun$apply$2$$anonfun$apply$3: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$while_stmt$2: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$10: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$104: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecl$1: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$lambda$6: apply() :: 36
org.kiama.attribution.Attributable$$anonfun$deepclone$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$typedecl$2$$anonfun$apply$8: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$op$1: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1$$anonfun$apply$13: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3$$anonfun$apply$7$$anonfun$apply$8$$anonfun$apply$10: apply() :: 36
org.kiama.example.til.TIL2_2$$anonfun$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$42: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$4$$anonfun$apply$18: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$statementDef$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$8$$anonfun$apply$43: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$61: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$72$$anonfun$apply$73: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$constrainedInt$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$43: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$4: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$80$$anonfun$apply$81: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1$$anonfun$apply$23: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$62: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$2: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$12$$anonfun$apply$13: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121$$anonfun$apply$122: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$11: apply() :: 36
org.kiama.example.oneohonecompanies.Cut$$anonfun$cut$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$3$$anonfun$apply$20: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlist$4$$anonfun$apply$9: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$10: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$fpsection$2: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1$$anonfun$apply$1$$anonfun$apply$2$$anonfun$apply$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$112$$anonfun$apply$116: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$idnlist$1: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$11: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$24: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1$$anonfun$apply$135: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$80$$anonfun$apply$82: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$repeat$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1$$anonfun$apply$3$$anonfun$apply$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$12: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$113: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$96$$anonfun$apply$97: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$whileStmt$4: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$12: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp2$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$moduledecl$2: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype0$1$$anonfun$apply$21$$anonfun$apply$23: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$list$3$$anonfun$apply$8: apply() :: 36
org.kiama.example.lambda2.ReduceSubst$$anonfun$lambda$1: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31$$anonfun$apply$33: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$stmt$1$$anonfun$apply$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$10$$anonfun$38: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$assignment$1$$anonfun$apply$12: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$3$$anonfun$18: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$10$$anonfun$42: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$2$$anonfun$apply$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$5$$anonfun$apply$27$$anonfun$apply$28: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letLetRen$1$$anonfun$applyOrElse$11: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$8$$anonfun$apply$10: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$program$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1$$anonfun$apply$15$$anonfun$apply$18: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$112$$anonfun$apply$113$$anonfun$apply$114: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$90: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$statementDef$1: apply() :: 36
org.kiama.example.til.TIL2_3$$anonfun$2: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$statement$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1$$anonfun$apply$135$$anonfun$apply$137: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$block$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$factor$1$$anonfun$apply$31: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$assignment_statement$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$16: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$constdeclsection$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$38$$anonfun$apply$39$$anonfun$apply$40: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$stmt$1$$anonfun$apply$3: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$catchclause$2: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$18: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$26$$anonfun$apply$27$$anonfun$apply$28: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$1$$anonfun$apply$16: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$24: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype0$1$$anonfun$apply$21: apply() :: 36
org.kiama.example.lambda3.LambdaTests$$anonfun$mkvaluetest$1: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letLetRen$1$$anonfun$applyOrElse$12: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$112$$anonfun$apply$113$$anonfun$apply$115: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$5: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$callccexpr$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$50$$anonfun$apply$51: apply() :: 36
org.kiama.example.picojava.PredefinedTypes$$anonfun$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp2$1$$anonfun$apply$10: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$5: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$8$$anonfun$apply$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$conditional$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$assignment_statement$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.til.TIL2_1Tests$$anonfun$1: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$update$1$$anonfun$applyOrElse$1: apply() :: 36
org.kiama.example.imperative.Generator$$anonfun$arbStmt$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$78: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jfalse$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$2$$anonfun$apply$14: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$6: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$4$$anonfun$apply$13: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$mkrefexpr$1: apply() :: 36
org.kiama.rewriting.NominalRewriter$$anonfun$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$typedecl$2: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$151$$anonfun$apply$152: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$3: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$asgnStm$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$151: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$4$$anonfun$19: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$stmt$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$19$$anonfun$apply$20: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$conditional$2: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$3$$anonfun$17: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$8$$anonfun$apply$11: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$32: apply() :: 36
org.kiama.example.oberon0.L0.Desugarer$$anonfun$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literals$1: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$12: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$2$$anonfun$apply$7$$anonfun$apply$8: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype$1$$anonfun$apply$17: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$liter$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$8: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$68: apply() :: 36
org.kiama.example.prolog.Interpreter$$anonfun$1: apply() :: 36
org.kiama.example.picojava.tests.ErrorTests$$anonfun$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literals$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$34$$anonfun$apply$35: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$57$$anonfun$apply$58: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$statement$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp$1$$anonfun$apply$2: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$bottomup$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literal$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$4$$anonfun$apply$18: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letOpn$1$$anonfun$applyOrElse$5: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$5$$anonfun$apply$10: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$declarations$1: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlist$2: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$factor$1$$anonfun$apply$26: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$trans$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$148: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letOpn$1$$anonfun$applyOrElse$6: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$72: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$cases$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$3$$anonfun$apply$11: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$12: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$caseStatement$4: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jarray$1$$anonfun$apply$10: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$20: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$5$$anonfun$26: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$cases$2: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$18$$anonfun$apply$19$$anonfun$apply$21: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letstmt$1$$anonfun$apply$157$$anonfun$apply$158: apply() :: 36
org.kiama.example.til.TIL2_2Tests$$anonfun$2: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$opdecl$1: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$2$$anonfun$apply$12: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$ident$3: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$22: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$6: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$9$$anonfun$apply$12: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$10$$anonfun$apply$11: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$92$$anonfun$apply$94: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$94$$anonfun$apply$96: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$2$$anonfun$apply$12: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$96: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$whileStatement$2: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$13: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jarray$1: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$4: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jnull$1: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$22$$anonfun$apply$24: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jarray$2: apply() :: 36
org.kiama.example.lambda3.LambdaTests$$anonfun$mkprinttest$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$8: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$18: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$145$$anonfun$apply$147: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$16: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121$$anonfun$apply$122$$anonfun$apply$123: apply() :: 36
org.kiama.example.transform.Analysis$$anonfun$prio$1$$anonfun$apply$2$$anonfun$apply$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$53: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$optelseend$3: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$2: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$7$$anonfun$29: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$11: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121$$anonfun$apply$122$$anonfun$apply$124: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$idndeflist$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$58$$anonfun$apply$59: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letOpn$1$$anonfun$applyOrElse$6$$anonfun$apply$4$$anonfun$applyOrElse$8: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$8$$anonfun$apply$9: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$5$$anonfun$25: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$120: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$org$kiama$example$lambda2$LambdaTests$$canons$1$2$$anonfun$apply$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$26$$anonfun$apply$27: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp1$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$4$$anonfun$apply$8: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$5: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$9$$anonfun$apply$45: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$fieldlist$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optvar$2$$anonfun$apply$13: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple5$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$82$$anonfun$apply$83: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$trycatch$2: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.oberon0.L2.Desugarer$$anonfun$transform$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$ifStm$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$25: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$35$$anonfun$apply$36: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$108: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$whileStatement$2$$anonfun$apply$7: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letOpn$1$$anonfun$applyOrElse$6$$anonfun$apply$4$$anonfun$applyOrElse$7: apply() :: 36
org.kiama.example.oberon0.L2.Desugarer$$anonfun$2: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$xtends$1: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$3: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$7: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$bindexpr$1$$anonfun$apply$142: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$collect$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1$$anonfun$apply$7$$anonfun$apply$8: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchclause$1$$anonfun$apply$127: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$6$$anonfun$28: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1$$anonfun$apply$130$$anonfun$apply$133: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$stm$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1$$anonfun$apply$10: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$subsVar$1$$anonfun$applyOrElse$2$$anonfun$apply$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$3: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$elsif$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1$$anonfun$apply$22: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$typedefDef$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$9: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$4: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$1$$anonfun$apply$14$$anonfun$apply$15: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$whileStmt$3: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$17: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$fpsection$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp2$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$exp$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1$$anonfun$apply$3$$anonfun$apply$5: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4$$anonfun$apply$22$$anonfun$apply$26: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$9: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$25: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$1: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$vardecl$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$35$$anonfun$apply$36: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$22: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$10: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optvar$2: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$lambda$5: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1$$anonfun$apply$6$$anonfun$apply$8: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$5: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$name$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$68$$anonfun$apply$69: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$moduledecl$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$whitespaceParser$1$$anonfun$apply$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$4: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$2$$anonfun$apply$7: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$8$$anonfun$apply$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31$$anonfun$apply$32: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$18: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$throwtoexpr$1$$anonfun$apply$179: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$while_stmt$1: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$2: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$statementDef$1$$anonfun$apply$11: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$26: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$12: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$any$1: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jtrue$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype0$1$$anonfun$apply$21$$anonfun$apply$22: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$18: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$whileStm$4: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$itype$2$$anonfun$apply$7: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$8$$anonfun$apply$42: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$53$$anonfun$apply$54: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1$$anonfun$apply$15$$anonfun$apply$18: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$19: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp0$1$$anonfun$apply$14$$anonfun$apply$16: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$7: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$9$$anonfun$37: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$41: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$7$$anonfun$apply$9$$anonfun$apply$10: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$88: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$declarationsDef$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$3$$anonfun$apply$17$$anonfun$apply$18: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$exp$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8$$anonfun$apply$10$$anonfun$apply$12: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$41: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$4: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$16: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$5: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$2$$anonfun$14: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$66: apply() :: 36
org.kiama.example.oberon0.L1.CCodeGenerator$$anonfun$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$54$$anonfun$apply$56: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1$$anonfun$apply$135$$anonfun$apply$136: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$4: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$returnexpr$1$$anonfun$apply$140: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$factor$1$$anonfun$apply$30: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$5: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$77: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$5: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$subsVar$1$$anonfun$applyOrElse$2: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$6: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$10: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$org$kiama$example$lambda2$LambdaTests$$canons$1$2: apply() :: 36
org.kiama.util.ParserUtilities$$anonfun$parseResultToTuple2$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$30: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$11: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$2$$anonfun$15: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1$$anonfun$apply$15$$anonfun$apply$17: apply() :: 36
org.kiama.example.lambda2.ReduceSubst$$anonfun$lambda$6: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$14: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$terms$2: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$31: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1$$anonfun$apply$15: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$4: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letAppL$1$$anonfun$applyOrElse$4: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$3$$anonfun$16: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp0$1$$anonfun$apply$14: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$2$$anonfun$apply$12$$anonfun$apply$13: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$clause$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$106: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$113$$anonfun$apply$114: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$3$$anonfun$apply$16$$anonfun$apply$17: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$1$$anonfun$13: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$4$$anonfun$apply$12: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$8: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$primary$1$$anonfun$apply$39: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$typedecl$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$6: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$15: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$41$$anonfun$apply$42: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$terms$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$whitespaceParser$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$catchclause$1: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$17: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$19$$anonfun$apply$21$$anonfun$apply$22: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$100$$anonfun$apply$102: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$7$$anonfun$apply$40: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$program$1: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$1$$anonfun$apply$15: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$23: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$ttype0$1$$anonfun$apply$20: apply() :: 36
org.kiama.example.til.TIL2_3$$anonfun$1: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$1: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$everywherebu$1: apply() :: 36
org.kiama.example.lambda2.ReduceSubst$$anonfun$lambda$5: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$10$$anonfun$41: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$statementDef$1$$anonfun$apply$2: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$attempt$1: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$2$$anonfun$apply$3: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$41$$anonfun$apply$42$$anonfun$apply$43: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$2: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$while_statement$4: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$5$$anonfun$apply$5: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$28: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$4$$anonfun$22: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$7$$anonfun$apply$9: apply() :: 36
org.kiama.example.lambda2.RewritingEvaluator$$anonfun$eval$1: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$22$$anonfun$apply$23: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$identifier$2: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$s$2: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$trans$2$$anonfun$apply$17: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$factor$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$94$$anonfun$apply$95: apply() :: 36
org.kiama.example.oberon0.L0.Desugarer$$anonfun$uniquifyNames$1: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$8: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecstmt$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statements$3$$anonfun$apply$3: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$step$1: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$18$$anonfun$apply$20: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$7$$anonfun$apply$8: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$whileStatement$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$29: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$5$$anonfun$24: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31$$anonfun$apply$33$$anonfun$apply$35: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$3: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$8$$anonfun$apply$11: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$78: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$primstmt$1$$anonfun$apply$185: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statements$3: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$10: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$17: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$9$$anonfun$apply$44: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$9: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$78$$anonfun$apply$79: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$9$$anonfun$apply$11: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$trycatch$1: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$16: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$94: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$optelse$3: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$2: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$36: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$typedeclsection$1: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$64$$anonfun$apply$66: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$assignment_statement$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$statement$1$$anonfun$apply$6: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$24$$anonfun$apply$25: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$7: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$14: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$48: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$115$$anonfun$apply$116: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$52: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$145$$anonfun$apply$146: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$whileStatement$2$$anonfun$apply$6: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$92$$anonfun$apply$93: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$primary$1$$anonfun$apply$40$$anonfun$apply$42: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$3$$anonfun$apply$10: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$caseStatement$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1$$anonfun$apply$130$$anonfun$apply$132: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$ident$1: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$kase$1: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$37: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$52$$anonfun$apply$54: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$ident$2: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$21: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$5: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$2: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$4: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$not$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.til.TIL2_2Tests$$anonfun$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1$$anonfun$apply$7$$anonfun$apply$9$$anonfun$apply$10: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$11: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$70: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$optelseend$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$120$$anonfun$apply$122: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$33: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$declarationsDef$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$3: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4$$anonfun$apply$22$$anonfun$apply$25: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$1: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp0$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1$$anonfun$apply$20: apply() :: 36
org.kiama.example.oberon0.L2.Lifter$$anonfun$transform$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$25: apply() :: 36
org.kiama.example.picojava.NameResolution$$anonfun$org$kiama$example$picojava$NameResolution$$finddecl$2: apply() :: 36
org.kiama.example.til.TIL1_1Tests$$anonfun$3: apply() :: 36
org.kiama.example.oberon0.L2.Desugarer$$anonfun$2$$anonfun$apply$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$9$$anonfun$36: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$lambda$4: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1$$anonfun$apply$6$$anonfun$apply$7: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$procedureDeclaration$3: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$12$$anonfun$apply$13: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$procedureCall$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$3: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$52: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$1$$anonfun$apply$11$$anonfun$apply$12$$anonfun$apply$13: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$whileStmt$2: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$5: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$for_statement$4: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$valexpr$1: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$2$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda2.ReduceSubst$$anonfun$s$1: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jobject$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$57: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1$$anonfun$apply$15$$anonfun$apply$17: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchclause$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp0$1$$anonfun$apply$14$$anonfun$apply$15: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$6: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$54: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecl$2$$anonfun$apply$19: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$assign_stmt$1: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$whileStm$3: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$8: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$exp$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$procedureDeclaration$4: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8$$anonfun$apply$10$$anonfun$apply$11: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$s$2: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$5$$anonfun$apply$6$$anonfun$apply$7: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$82: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$throwtoexpr$1$$anonfun$apply$177: apply() :: 36
org.kiama.example.lambda2.Reduce$$anonfun$s$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$elsif$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$moduledecl$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.til.TIL2_3Tests$$anonfun$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$3: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$topdown$1$$anonfun$apply$13: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$11: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$whitespaceParser$1$$anonfun$apply$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1$$anonfun$apply$10: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$alltd$1$$anonfun$apply$30: apply() :: 36
org.kiama.example.oberon0.L3.Parser$$anonfun$optvar$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term4$1$$anonfun$apply$102: apply() :: 36
org.kiama.example.dataflow.Parser$$anonfun$stm$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$factor$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1$$anonfun$apply$21: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$24: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$17: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$factor$1$$anonfun$apply$9: apply() :: 36
org.kiama.example.dataflow.Optimise$$anonfun$elimEmpties$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$21: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$32: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$class_decl$3: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$3: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$condition$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$9: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$4: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8$$anonfun$apply$10: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$46$$anonfun$apply$47: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$query$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$5: apply() :: 36
org.kiama.example.lambda2.ReduceSubst$$anonfun$lambda$4: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$write_statement$2: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$letAppL$1$$anonfun$applyOrElse$3: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$10: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp0$1$$anonfun$apply$13: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$5: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$22: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$statementDef$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literal$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$100$$anonfun$apply$101: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$signed$1: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$22: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jpair$1: apply() :: 36
org.kiama.example.oberon0.L1.Parser$$anonfun$statementDef$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$if_statement$4$$anonfun$apply$13$$anonfun$apply$15: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$map$1$$anonfun$applyOrElse$2: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$8: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$89: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3$$anonfun$apply$11: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$primary$1$$anonfun$apply$38: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$3: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$18: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$3: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$sequence$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$54$$anonfun$apply$55: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$block$1: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$19: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$90$$anonfun$apply$91: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$2$$anonfun$applyOrElse$10: apply() :: 36
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$9: apply() :: 36
org.kiama.example.lambda2.Par$$anonfun$subsVar$1$$anonfun$applyOrElse$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$46: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$10$$anonfun$40: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$7: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$stmt$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$constdecl$2$$anonfun$apply$6: apply() :: 36
org.kiama.example.dataflow.Optimise$$anonfun$elimDeadAssign$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1$$anonfun$apply$15: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$3: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1$$anonfun$apply$14: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$f$lzycompute$1$1$$anonfun$apply$19: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$90$$anonfun$apply$92: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1$$anonfun$apply$16: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$statementDef$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$read_statement$2: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$2$$anonfun$apply$12$$anonfun$apply$13: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$13: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$1$$anonfun$apply$mcV$sp$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$factor$1$$anonfun$apply$27$$anonfun$apply$29: apply() :: 36
org.kiama.example.oberon0.L1.source.PrettyPrinter$$anonfun$ifToDoc$3: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$34: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$2$$anonfun$applyOrElse$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1$$anonfun$apply$138: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$15: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecl$1$$anonfun$apply$17: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$11: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$20$$anonfun$apply$21: apply() :: 36
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$20$$anonfun$apply$21: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3$$anonfun$apply$7$$anonfun$apply$8$$anonfun$apply$9: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$everywheretd$1: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statementSequence$2: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$typedeclsection$1$$anonfun$apply$7: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$primary$1$$anonfun$apply$40$$anonfun$apply$41: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$64$$anonfun$apply$65: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$35: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$15: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$19: apply() :: 36
org.kiama.rewriting.Rewriter$$anonfun$repeat$1: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$20: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$throwtoexpr$1: apply() :: 36
org.kiama.rewriting.NominalAST$Name$$anonfun$toString$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$term$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$while_statement$3: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$6: apply() :: 36
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$7$$anonfun$apply$8: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$5: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$2$$anonfun$apply$14$$anonfun$apply$15: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$primary$1: apply() :: 36
org.kiama.example.lambda.LambdaTests$$anonfun$6: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$9$$anonfun$apply$10: apply() :: 36
org.kiama.example.til.TIL2_1Tests$$anonfun$4: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$assign_stmt$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$7: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$106: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$5$$anonfun$apply$27: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$caseStatement$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$70$$anonfun$apply$71: apply() :: 36
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1$$anonfun$apply$3: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$28: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term4$1$$anonfun$apply$99: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$76: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$52$$anonfun$apply$53: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$list$3: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$5$$anonfun$23: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$70$$anonfun$apply$72: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$80: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1: apply() :: 36
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$4$$anonfun$apply$6$$anonfun$apply$8: apply() :: 36
org.kiama.example.picojava.tests.ParserTests$$anonfun$16: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$identifier$1: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$1$$anonfun$apply$1: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$6: apply() :: 36
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$delayedInit$body: apply() :: 36
org.kiama.example.iswim.tests.ParserTests$$anonfun$10: apply() :: 36
org.kiama.example.til.TIL2_1Tests$$anonfun$5: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$9: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$optelseend$1: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$22: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$1$$anonfun$apply$11: apply() :: 36
org.kiama.example.transform.Parser$$anonfun$exp$1: apply() :: 36
org.kiama.example.obr.SemanticAnalysis$$anonfun$5$$anonfun$apply$9: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$3$$anonfun$apply$4: apply() :: 36
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$2: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$35: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$itype$1$$anonfun$apply$6: apply() :: 36
org.kiama.util.ParserUtilitiesTests$$anonfun$4$$anonfun$21: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$2$$anonfun$apply$4: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$3: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$48: apply() :: 36
org.kiama.example.oberon0.base.Parser$$anonfun$statements$2: apply() :: 36
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$10: apply() :: 36
org.kiama.example.til.TIL1_1$$anonfun$statement$1$$anonfun$apply$5: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$154: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$1: apply() :: 36
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$26: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$145: apply() :: 36
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$5$$anonfun$apply$27$$anonfun$apply$30: apply() :: 36
org.kiama.util.CompilerTests$$anonfun$2: apply() :: 36
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31$$anonfun$apply$33$$anonfun$apply$34: apply() :: 36
org.kiama.example.oberon0.L2.Parser$$anonfun$caseStatement$1: apply() :: 36
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$2: apply() :: 36
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$1: apply() :: 36
org.kiama.example.lambda2.Parser$$anonfun$exp$1: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$callccexpr$1$$anonfun$apply$175: apply() :: 36
org.kiama.example.lambda2.ParLazyShare$$anonfun$s$1: apply() :: 36
org.kiama.example.lambda2.LambdaTests$$anonfun$35: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1$$anonfun$apply$130$$anonfun$apply$131: apply() :: 36
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$2$$anonfun$apply$4$$anonfun$apply$5: apply() :: 36
org.kiama.example.json.ParsingTests$$anonfun$2: apply() :: 36
org.kiama.example.picojava.Parser$$anonfun$assign_stmt$1$$anonfun$apply$4: apply() :: 36
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1: apply() :: 36
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$19: apply() :: 36
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$8$$anonfun$apply$10: apply() :: 36
org.kiama.example.iswim.compiler.Parser$$anonfun$matchclause$1$$anonfun$apply$127$$anonfun$apply$128: apply() :: 36
org.kiama.example.iswim.tests.ParserTests.$anonfun: apply() :: 33
org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U) :: 33
org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun: apply() :: 30
org.kiama.util.ParserUtilitiesTests.$anonfun.$anonfun: apply() :: 30
org.kiama.example.til.TIL1_1.$anonfun.$anonfun: apply() :: 29
org.kiama.example.oberon0.L0.Parser.$anonfun: apply() :: 26
org.kiama.example.til.TIL1_1.$anonfun: apply() :: 26
org.kiama.attribution.AttributionBase: initTree([T <: org.kiama.attribution.Attributable]t: T) :: 25
org.kiama.example.picojava.tests.ParserTests.$anonfun: apply() :: 25
org.kiama.example.lambda2.LambdaTests: assertEvalAll(term: String,result: org.kiama.example.lambda2.AST.Exp) :: 25
org.kiama.example.lambda2.AST.Num: <init>(n: Int) :: 24
org.kiama.example.oberon0.drivers.A4Tests: parser2packrat(Lscala/Function0;) :: 23
org.kiama.util.RegexParserTests: assertParseError([T]str: String,p: RegexParserTests.this.Parser[T],line: Int,column: Int,msg: String,iserr: Boolean) :: 23
org.kiama.util.RegexParserTests: assertParseError$default$6([T]) :: 22
org.kiama.example.json.ParsingTests.$anonfun: apply() :: 22
org.kiama.example.obr.SyntaxAnalysis.$anonfun: <init>() :: 22
org.kiama.example.oberon0.drivers.A3Tests: parser2packrat(Lscala/Function0;) :: 21
org.kiama.example.oberon0.drivers.A2a$: parser2packrat(Lscala/Function0;) :: 21
org.kiama.example.oberon0.L2.Parser.$anonfun: apply() :: 21
org.kiama.example.oberon0.drivers.A3$: parser2packrat(Lscala/Function0;) :: 21
org.kiama.example.oberon0.drivers.A2aTests: parser2packrat(Lscala/Function0;) :: 21
org.kiama.rewriting.Rewriter.$anonfun: apply() :: 20
org.kiama.output.PrettyPrinter: line() :: 20
org.kiama.output.PrettyPrinter: empty() :: 20
org.kiama.example.til.TIL1_1: parser() :: 19
org.kiama.output.PrettyPrinter: nest(d: PrettyPrinter.this.Doc,j: Int) :: 19
org.kiama.util.ParserUtilities: $init$() :: 19
org.kiama.example.picojava.Parser: program() :: 19
org.kiama.example.iswim.compiler.Syntax.Variable: <init>(s: String) :: 18
org.kiama.output.PrettyPrinter: pretty(d: PrettyPrinter.this.Doc,w: Int) :: 18
org.kiama.example.oberon0.drivers.A2b$: parser2packrat(Lscala/Function0;) :: 18
org.kiama.util.PositionedParserUtilities: $init$() :: 18
org.kiama.example.iswim.compiler.Syntax.NumVal: <init>(i: Int) :: 18
org.kiama.example.picojava.Parser.$anonfun: apply() :: 18
org.kiama.example.oberon0.drivers.A2bTests: parser2packrat(Lscala/Function0;) :: 18
org.kiama.example.lambda2.Parser.$anonfun.$anonfun: apply() :: 18
org.kiama.example.oberon0.drivers.A1$: parser2packrat(Lscala/Function0;) :: 18
org.kiama.example.oberon0.base.Parser: parser() :: 18
org.kiama.example.oberon0.drivers.A1Tests: parser2packrat(Lscala/Function0;) :: 18
org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun: apply() :: 17
org.kiama.example.iswim.compiler.SemanticAnalysis: isSemanticallyCorrect() :: 17
org.kiama.example.oberon0.base.Parser.$anonfun: apply() :: 17
org.kiama.rewriting.Rewriter.Strategy: <*(q: ) :: 16
org.kiama.output.PrettyPrinter: linebreak() :: 16
org.kiama.output.PrettyPrinter: group(d: PrettyPrinter.this.Doc) :: 16
org.kiama.example.dataflow.Parser.$anonfun: apply() :: 16
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun: apply() :: 16
org.kiama.example.prolog.SyntaxAnalysis.$anonfun: apply() :: 15
org.kiama.util.Tests: $init$() :: 15
org.kiama.example.obr.SyntaxAnalysis: parser2packrat(Lscala/Function0;) :: 15
org.kiama.example.picojava.tests.ParserTests: regex(Lscala/util/matching/Regex;) :: 15
org.kiama.example.imperative.Parser.$anonfun.$anonfun: apply() :: 15
org.kiama.example.oberon0.L3.Parser.$anonfun: apply() :: 15
org.kiama.example.iswim.tests.CodeGeneratorTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 15
org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun: apply() :: 15
org.kiama.rewriting.Rewriter.$anon: apply(t: Any) :: 15
org.kiama.output.PrettyPrinter$Doc: $less$greater(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 15
org.kiama.example.lambda2.Lambda$: parser2packrat(Lscala/Function0;) :: 14
org.kiama.example.imperative.Parser.$anonfun: apply() :: 14
org.kiama.example.lambda2.LambdaTests: parser2packrat(Lscala/Function0;) :: 14
org.kiama.example.iswim.compiler.Syntax.Plus: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 14
org.kiama.example.oberon0.L0.NameAnalyser: entity() :: 14
org.kiama.example.lambda3.Parser.$anonfun.$anonfun: apply() :: 13
org.kiama.example.iswim.secd.SECDBase: toCodeSegment(bcb: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase) :: 13
org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String) :: 13
org.kiama.example.til.TIL1_1Main$: parser2packrat(Lscala/Function0;) :: 12
org.kiama.example.oberon0.L0.SymbolTable: unknownType() :: 12
org.kiama.example.iswim.tests.CodeGeneratorTests: assert(Z) :: 12
org.kiama.example.iswim.compiler.CodeGenerator: code() :: 12
org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun: apply() :: 12
org.kiama.example.iswim.tests.CodeGeneratorTests.$anonfun: apply() :: 12
org.kiama.example.til.TIL2_3Tests: parser2packrat(Lscala/Function0;) :: 12
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() :: 12
org.kiama.example.til.TIL2_1Main$: parser2packrat(Lscala/Function0;) :: 12
org.kiama.example.obr.SyntaxAnalysis: literal(Ljava/lang/String;) :: 12
org.kiama.example.til.TIL2_2Main$: parser2packrat(Lscala/Function0;) :: 12
org.kiama.example.iswim.tests.SemanticAnalysisTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 12
org.kiama.example.til.TIL2_3Main$: parser2packrat(Lscala/Function0;) :: 12
org.kiama.example.iswim.tests.CodeGeneratorTests: convertToEqualizer(Ljava/lang/Object;) :: 12
org.kiama.example.til.TIL1_1Tests: parser2packrat(Lscala/Function0;) :: 12
org.kiama.example.oberon0.L0.SymbolTable: integerType() :: 12
org.kiama.example.iswim.tests.CodeGeneratorTests: assert(Lscala/Option;) :: 12
org.kiama.example.til.TIL2_1Tests: parser2packrat(Lscala/Function0;) :: 12
org.kiama.util.ParserUtilitiesTests.$anonfun: apply() :: 12
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun: apply() :: 12
org.kiama.example.til.TIL2_2Tests: parser2packrat(Lscala/Function0;) :: 12
org.kiama.example.picojava.AbstractSyntax$VarDecl$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$numparams$1$$anonfun$apply$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oneohonecompanies.Precedence$$anonfun$precedence$2: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.util.Messaging: messagecount() :: 11
org.kiama.example.oberon0.L0.source.LeExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.lambda.AST$App$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.imperative.AST$Asgn$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.lambda2.AST$FunType$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T]) :: 11
org.kiama.example.obr.ObrTree$Catch$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.SubExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.dataflow.DataflowAST$Assign$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.util.Messaging: resetmessages() :: 11
org.kiama.example.oberon0.L0.source.Assignment$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.NeExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.lambda3.AST$EquivQuery$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1$$anonfun$applyOrElse$6: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$11: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST.Write: <init>(e: org.kiama.example.til.AST.Exp) :: 11
org.kiama.example.lambda.AST$Lam$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$leave$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L2.source.Case$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.SymbolTable: booleanType() :: 11
org.kiama.example.picojava.Parser: IDENTIFIER() :: 11
org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue) :: 11
org.kiama.util.ParserUtilities$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.obr.ObrTree$IndexExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.picojava.AbstractSyntax$WhileStmt$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$vsep$2: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$ssep$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oneohonecompanies.Total$$anonfun$total$2: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.iswim.secd.SECDBase.CodeSegment: apply(bs: Seq[org.kiama.example.iswim.secd.SECDBase.ByteCodeBase]) :: 11
org.kiama.example.picojava.AbstractSyntax$AssignStmt$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$Assign$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.util.Messaging$$anonfun$sortedmessages$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$While$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL1_1Main$: literal(Ljava/lang/String;) :: 11
org.kiama.example.oberon0.L0.source.EqExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.imperative.Imperative$: parser2packrat(Lscala/Function0;) :: 11
org.kiama.example.obr.ObrTree$IntConst$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.prolog.PrologTree$Pred$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST.Num: <init>(n: Int) :: 11
org.kiama.example.obr.ObrTree$WhileStmt$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L1.source.WhileStatement$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.lambda3.AST$FreshQuery$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.LtExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL2_1Main$: literal(Ljava/lang/String;) :: 11
org.kiama.example.oberon0.L0.source.MulExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$lsep$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc) :: 11
org.kiama.util.ParserUtilitiesTests.Node: <init>(i: Int) :: 11
org.kiama.example.oberon0.L0.source.ModExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL2_2Main$: literal(Ljava/lang/String;) :: 11
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$prune$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.GeExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.AddExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.dataflow.DataflowAST$While$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.DivExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.obr.ObrTree$ArrayVar$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.iswim.secd.ExceptionHandler$$anonfun$evalInst$1$$anonfun$applyOrElse$2: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.imperative.AST$Div$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.VarDecl$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL1_1Tests: literal(Ljava/lang/String;) :: 11
org.kiama.example.lambda2.AST$App$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.prolog.PrologTree$Rule$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.obr.RISCEncoder$$anonfun$encode$5: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$hcat$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL2_1Tests: literal(Ljava/lang/String;) :: 11
org.kiama.example.lambda3.AST$SwapQuery$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.lambda3.Parser.$anonfun.$anonfun.$anonfun: apply() :: 11
org.kiama.example.oberon0.L0.source.OrExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$list$default$5$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L4.source.ArrayTypeDef$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$Div$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL2_3Main$: literal(Ljava/lang/String;) :: 11
org.kiama.example.til.AST$Sub$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL2_2Tests: literal(Ljava/lang/String;) :: 11
org.kiama.example.oberon0.L4.source.FieldExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$vsep$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinter$$anonfun$group$1$$anonfun$apply$9$$anonfun$apply$10: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$IfThen$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.imperative.AST$Sub$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oneohonecompanies.Depth$$anonfun$depth$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$hsep$2: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.GtExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.AndExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$Mul$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.source.ConstDecl$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L2.source.MinMaxCond$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.iswim.compiler.Syntax.Times: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 11
org.kiama.util.ParserUtilitiesTests$Tup2$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L0.Parser: expression() :: 11
org.kiama.example.til.AST.Var: <init>(i: org.kiama.example.til.AST.Id) :: 11
org.kiama.example.obr.ObrTree$RecordVar$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L4.source.IndexExp$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.imperative.AST$Mul$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.imperative.AST$While$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$scan$1$$anonfun$apply$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.picojava.ErrorCheck$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.rewriting.NominalRewriter$$anonfun$fv$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.output.PrettyPrinterBase$$anonfun$lterm$1: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$Eq$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.oberon0.L3.source.Call$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$Add$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.TIL2_3Tests: literal(Ljava/lang/String;) :: 11
org.kiama.example.lambda3.AST$App$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.util.ParserUtilitiesTests: node() :: 11
org.kiama.example.oberon0.L0.source.TypeDecl$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.imperative.AST$Add$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST.Program: <init>(ss: Seq[org.kiama.example.til.AST.Stat]) :: 11
org.kiama.example.json.JSONTree.JNumber: <init>(value: Double) :: 11
org.kiama.output.PrettyPrinter$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.til.AST$Ne$: apply(Ljava/lang/Object;Ljava/lang/Object;) :: 11
org.kiama.example.json.SyntaxAnalysis.$anonfun.$anonfun: apply() :: 11
org.kiama.example.oberon0.L1.Parser: elsifs() :: 10
org.kiama.example.oberon0.L0.NameAnalyser: value() :: 10
org.kiama.rewriting.Rewriter.$anonfun.$anonfun: apply() :: 10
org.kiama.example.oberon0.L1.Parser: ifStatement() :: 10
org.kiama.util.Environments.Named: <init>() :: 10
org.kiama.example.iswim.secd.SECDBase: control() :: 10
org.kiama.example.oberon0.L1.Parser: whileStatement() :: 10
org.kiama.example.oberon0.base.Driver: process(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 10
org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String) :: 10
org.kiama.example.oberon0.base.Parser: statementSequence() :: 10
org.kiama.example.picojava.AbstractSyntax.Block: <init>(BlockStmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]) :: 10
org.kiama.example.oberon0.L0.Parser: lhs() :: 10
org.kiama.example.oberon0.L0.Parser: assignment() :: 10
org.kiama.example.til.TIL1_1.$anonfun.$anonfun.$anonfun: apply() :: 10
org.kiama.example.oberon0.L1.Parser: optelse() :: 10
org.kiama.example.picojava.tests.ErrorTests: parser2packrat(Lscala/Function0;) :: 10
org.kiama.util.ParserUtilitiesTests.$anonfun.$anonfun: <init>() :: 10
org.kiama.example.lambda3.Lambda$: parser2packrat(Lscala/Function0;) :: 10
org.kiama.example.lambda3.LambdaTests: parser2packrat(Lscala/Function0;) :: 10
org.kiama.example.picojava.AbstractSyntax.Program: <init>(Block: org.kiama.example.picojava.AbstractSyntax.Block) :: 10
org.kiama.example.lambda2.Parser.$anonfun: apply() :: 10
org.kiama.example.til.AST.Decl: <init>(i: org.kiama.example.til.AST.Id) :: 10
org.kiama.example.picojava.Main$: parser2packrat(Lscala/Function0;) :: 10
org.kiama.example.oberon0.L1.Parser: elsif() :: 10
org.kiama.example.prolog.SyntaxAnalysis.$anonfun: <init>() :: 10
org.kiama.example.iswim.secd.SECDBase: stack() :: 10
org.kiama.example.picojava.tests.ParserTests: parser2packrat(Lscala/Function0;) :: 10
org.kiama.example.iswim.secd.IntegerOps.PushInt: <init>(n: Int) :: 10
org.kiama.example.oberon0.L0.Parser: typedeclsection() :: 9
org.kiama.example.oberon0.L2.Parser: cases() :: 9
org.kiama.example.oberon0.base.Parser: moduledecl() :: 9
org.kiama.example.oberon0.L0.Parser: namedtypedef() :: 9
org.kiama.example.iswim.tests.SemanticAnalysisTests.$anonfun: apply() :: 9
org.kiama.util.ParserUtilities: constrainedInt() :: 9
org.kiama.example.oberon0.L2.Parser: condition() :: 9
org.kiama.example.oberon0.L0.Parser: simpexp() :: 9
org.kiama.example.oberon0.L0.NameAnalyser: rootconstexp() :: 9
org.kiama.example.lambda2.Reduce: arithop() :: 9
org.kiama.example.oberon0.L0.Parser: constdeclsection() :: 9
org.kiama.example.oberon0.L2.Parser: conditions() :: 9
org.kiama.example.iswim.compiler.Syntax.Block: <init>(es: List[org.kiama.example.iswim.compiler.Syntax.Expr]) :: 9
org.kiama.example.iswim.tests.SemanticAnalysisTests: assert(Z) :: 9
org.kiama.example.oberon0.L0.Parser: intexp() :: 9
org.kiama.example.oberon0.L0.SymbolTable: falseConstant() :: 9
org.kiama.example.oberon0.L2.Parser: step() :: 9
org.kiama.example.prolog.SyntaxAnalysis: parser2packrat(Lscala/Function0;) :: 9
org.kiama.util.TransformerTests: assertTransformOk([T]str: String,p: TransformerTests.this.Parser[T],t: T => T,result: T) :: 9
org.kiama.example.oberon0.base.Parser: statements() :: 9
org.kiama.util.CompilerBase: $init$() :: 9
org.kiama.util.ParserUtilities.$anonfun: apply() :: 9
org.kiama.example.json.SyntaxAnalysis: jnumber() :: 9
org.kiama.example.oberon0.L0.SymbolTable: trueConstant() :: 9
org.kiama.example.oberon0.L0.Parser: vardecl() :: 9
org.kiama.example.oberon0.base.Parser: keyword() :: 9
org.kiama.example.iswim.compiler.Parser: start() :: 9
org.kiama.example.oberon0.L2.Parser: kase() :: 9
org.kiama.example.iswim.tests.SemanticAnalysisTests: convertToEqualizer(Ljava/lang/Object;) :: 9
org.kiama.example.prolog.SyntaxAnalysis.$anonfun.$anonfun: apply() :: 9
org.kiama.example.oberon0.L0.NameAnalyser: isconst() :: 9
org.kiama.example.oberon0.L0.NameAnalyser: expconst() :: 9
org.kiama.example.oberon0.L0.Parser: idndeflist() :: 9
org.kiama.example.oberon0.base.Parser: declarations() :: 9
org.kiama.example.oberon0.L0.Parser: term() :: 9
org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) :: 9
org.kiama.example.oberon0.base.Parser: comment() :: 9
org.kiama.example.iswim.tests.SemanticAnalysisTests: assert(Lscala/Option;) :: 9
org.kiama.example.oberon0.base.Parser: whitespaceParser() :: 9
org.kiama.rewriting.Rewriter.Strategy.$anon: apply(t1: Any) :: 9
org.kiama.example.obr.SemanticAnalysis.$anonfun.$anonfun: apply() :: 9
org.kiama.example.oberon0.L0.Parser: factor() :: 9
org.kiama.example.oberon0.L2.Parser: forStatement() :: 9
org.kiama.example.iswim.compiler.Syntax.Apply: <init>(f: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 9
org.kiama.example.oberon0.base.Parser: idnuse() :: 9
org.kiama.example.oberon0.base.Parser: block() :: 9
org.kiama.example.lambda.LambdaTests: parser2packrat(Lscala/Function0;) :: 9
org.kiama.example.oberon0.L2.Parser: caseStatement() :: 9
org.kiama.example.oberon0.L0.NameAnalyser: env() :: 9
org.kiama.example.json.SyntaxAnalysis.$anonfun: apply() :: 9
org.kiama.example.json.ParsingTests: literal(Ljava/lang/String;) :: 9
org.kiama.example.oberon0.base.Parser: statement() :: 9
org.kiama.example.oberon0.L0.Parser: constdecl() :: 9
org.kiama.example.oberon0.L0.Parser: vardeclsection() :: 9
org.kiama.attribution.Attribution: attr([T <: Object, U]f: T => U) :: 9
org.kiama.example.oberon0.L0.Parser: typedef() :: 9
org.kiama.example.oberon0.base.Parser: ident() :: 9
org.kiama.example.oberon0.base.Parser: idndef() :: 9
org.kiama.example.oberon0.L2.Parser: forVar() :: 9
org.kiama.example.oberon0.L0.Parser: typedecl() :: 9
org.kiama.example.json.Driver: literal(Ljava/lang/String;) :: 9
org.kiama.example.lambda2.Evaluator.FreshVar: <init>() :: 9
org.kiama.example.oberon0.L4.Parser.$anonfun: apply() :: 9
org.kiama.example.lambda.Lambda$: parser2packrat(Lscala/Function0;) :: 9
org.kiama.util.RegexParserTests: $init$() :: 8
org.kiama.example.til.TIL1_1: assignment_statement() :: 8
org.kiama.util.RegexCompiler: $init$() :: 8
org.kiama.example.til.TIL1_1: write_statement() :: 8
org.kiama.machine.Machine.State: :=(t: T) :: 8
org.kiama.example.lambda2.LazySubst.$anonfun.$anonfun.$anonfun: apply() :: 8
org.kiama.example.picojava.Main$: literal(Ljava/lang/String;) :: 8
org.kiama.util.WhitespaceParser: $init$() :: 8
org.kiama.example.til.TIL1_1: read_statement() :: 8
org.kiama.example.lambda.LambdaTests.$anonfun: apply() :: 8
org.kiama.example.til.TIL1_1: string() :: 8
org.kiama.example.transform.Driver: parser2packrat(Lscala/Function0;) :: 8
org.kiama.example.json.Driver: parser2packrat(Lscala/Function0;) :: 8
org.kiama.example.til.TIL1_1: keyword() :: 8
org.kiama.example.til.TIL1_1: if_statement() :: 8
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) :: 8
org.kiama.rewriting.Rewriter.Strategy: +(q: ) :: 8
org.kiama.example.lambda2.ParEagerSubst.$anonfun.$anonfun: apply() :: 8
org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun: apply() :: 8
org.kiama.example.lambda2.ParEagerSubst.$anonfun.$anonfun.$anonfun: apply() :: 8
org.kiama.example.imperative.Imperative$: literal(Ljava/lang/String;) :: 8
org.kiama.example.lambda2.EagerSubst.$anonfun.$anonfun.$anonfun: apply() :: 8
org.kiama.example.til.TIL1_1: identifier() :: 8
org.kiama.example.transform.Parser.$anonfun: apply() :: 8
org.kiama.example.til.TIL1_1: term() :: 8
org.kiama.util.WhitespacePositionedParserUtilities: $init$() :: 8
org.kiama.example.til.TIL1_1: primary() :: 8
org.kiama.example.til.TIL1_1: while_statement() :: 8
org.kiama.example.til.TIL1_1: expression() :: 8
org.kiama.util.Compiler: $init$() :: 8
org.kiama.example.til.TIL1_1: declaration() :: 8
org.kiama.example.iswim.secd.SECDBase.Lookup: <init>(nm: String) :: 8
org.kiama.example.json.ParsingTests: parser2packrat(Lscala/Function0;) :: 8
org.kiama.example.til.TIL1_1: statement() :: 8
org.kiama.example.picojava.tests.ParserTests: literal(Ljava/lang/String;) :: 8
org.kiama.example.dataflow.Driver: parser2packrat(Lscala/Function0;) :: 8
org.kiama.example.til.TIL1_1: program() :: 8
org.kiama.example.til.TIL1_1: factor() :: 8
org.kiama.example.oberon0.L2.Parser.$anonfun.$anonfun: apply() :: 8
org.kiama.example.til.TIL1_1: for_statement() :: 8
org.kiama.example.til.TIL1_1: integer() :: 8
org.kiama.example.picojava.tests.ErrorTests: literal(Ljava/lang/String;) :: 8
org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int) :: 7
org.kiama.example.prolog.SyntaxAnalysis: literal(Ljava/lang/String;) :: 7
org.kiama.example.oberon0.L0.TypeAnalyser: tipe() :: 7
org.kiama.example.lambda3.Parser.$anonfun: apply() :: 7
org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int) :: 7
org.kiama.example.iswim.secd.IOOps.Write: productArity() :: 7
org.kiama.example.oberon0.L0.c.CEqExp: productArity() :: 7
org.kiama.rewriting.Rewriter.PlusStrategy: apply(t: Any) :: 7
org.kiama.example.oberon0.L0.c.CNotExp: productArity() :: 7
org.kiama.example.picojava.AbstractSyntax.Use: <init>(Name: String) :: 7
org.kiama.example.oberon0.L3.c.CVoidType: productArity() :: 7
org.kiama.example.oberon0.L0.c.CLeExp: productArity() :: 7
org.kiama.example.oberon0.L3.c.CVoidType: productElement(x$1: Int) :: 7
org.kiama.util.ParserUtilitiesTests: parser2packrat(Lscala/Function0;) :: 7
org.kiama.example.lambda3.LambdaTests: literal(Ljava/lang/String;) :: 7
org.kiama.example.oberon0.L0.c.CLtExp: productArity() :: 7
org.kiama.example.lambda2.Par.$anonfun: apply() :: 7
org.kiama.util.ParserUtilitiesTests.Node: productElement(x$1: Int) :: 7
org.kiama.example.iswim.secd.IOOps.Read: productArity() :: 7
org.kiama.example.oberon0.L0.c.COrExp: productArity() :: 7
org.kiama.output.PrettyPrinterBase: semi() :: 7
org.kiama.example.oberon0.L0.c.CNeExp: productArity() :: 7
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() :: 7
org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int) :: 7
org.kiama.example.iswim.secd.ConversionOps.ToString: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L3.c.CAddrExp: productArity() :: 7
org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int) :: 7
org.kiama.example.json.SyntaxAnalysis: jarray() :: 7
org.kiama.util.ParserUtilitiesTests.Tup6: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L4.c.CRecordType: productArity() :: 7
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) :: 7
org.kiama.util.StringEmitter: emit(any: Any) :: 7
org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CAndExp: productArity() :: 7
org.kiama.rewriting.Rewriter: attempt(s: ) :: 7
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: productArity() :: 7
org.kiama.example.picojava.Parser.$anonfun.$anonfun: apply() :: 7
org.kiama.example.iswim.secd.IOOps.Read: productElement(x$1: Int) :: 7
org.kiama.util.ParserUtilitiesTests.Node: productArity() :: 7
org.kiama.example.transform.Analysis.$anonfun: <init>() :: 7
org.kiama.example.iswim.secd.IntegerOps.Add: <init>() :: 7
org.kiama.example.iswim.secd.ConversionOps.ToString: productArity() :: 7
org.kiama.util.ParserUtilitiesTests.Tup5: productElement(x$1: Int) :: 7
org.kiama.example.json.SyntaxAnalysis: jobject() :: 7
org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CGeExp: productArity() :: 7
org.kiama.example.oberon0.L0.TypeAnalyser: typebasetype() :: 7
org.kiama.output.Postfix: productArity() :: 7
org.kiama.example.oberon0.L0.c.CGtExp: productArity() :: 7
org.kiama.example.til.AST.Id: <init>(s: String) :: 7
org.kiama.example.oberon0.base.c.CEmptyStmt: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int) :: 7
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 7
org.kiama.example.iswim.secd.IOOps.Write: productElement(x$1: Int) :: 7
org.kiama.example.lambda2.LambdaTests: assertMessage(term: String,line: Int,col: Int,msg: String) :: 7
org.kiama.util.ParserUtilitiesTests.Tup4: productElement(x$1: Int) :: 7
org.kiama.util.ParserUtilitiesTests.Tup4: productArity() :: 7
org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int) :: 7
org.kiama.example.lambda2.LambdaTests: fail(Ljava/lang/String;) :: 7
org.kiama.example.lambda3.Lambda$: literal(Ljava/lang/String;) :: 7
org.kiama.util.ParserUtilitiesTests.Tup5: productArity() :: 7
org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int) :: 7
org.kiama.util.ParserUtilitiesTests.Tup2: productArity() :: 7
org.kiama.example.iswim.secd.SECDBase.MkUserException: productElement(x$1: Int) :: 7
org.kiama.example.obr.SyntaxAnalysis.Pos: productArity() :: 7
org.kiama.example.oberon0.L2.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 7
org.kiama.util.TestCompiler: $init$() :: 7
org.kiama.util.ParserUtilitiesTests.Tup3: productArity() :: 7
org.kiama.util.ParserUtilitiesTests.Tup6: productArity() :: 7
org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int) :: 7
org.kiama.example.iswim.secd.ConversionOps.ToInt: productArity() :: 7
org.kiama.util.ParserUtilitiesTests.Tup3: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CMulExp: productArity() :: 7
org.kiama.example.oberon0.L3.c.CAddrType: productArity() :: 7
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: productElement(x$1: Int) :: 7
org.kiama.example.dataflow.Driver: literal(Ljava/lang/String;) :: 7
org.kiama.util.ParserUtilitiesTests.Tup2: productElement(x$1: Int) :: 7
org.kiama.example.iswim.secd.SECDBase.MkUserException: productArity() :: 7
org.kiama.example.iswim.secd.ConversionOps.ToInt: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.base.c.CEmptyStmt: productArity() :: 7
org.kiama.example.oberon0.L0.c.CSubExp: productArity() :: 7
org.kiama.example.oberon0.L0.c.CDivExp: productArity() :: 7
org.kiama.example.imperative.Parser.$anonfun.$anonfun.$anonfun: apply() :: 7
org.kiama.example.obr.SyntaxAnalysis.Pos: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L0.c.CModExp: productArity() :: 7
org.kiama.attribution.Attributable: parent() :: 7
org.kiama.example.oberon0.L1.Parser.$anonfun.$anonfun: apply() :: 7
org.kiama.example.oberon0.L0.c.CAddExp: productArity() :: 7
org.kiama.example.til.AST.For: <init>(i: org.kiama.example.til.AST.Id,f: org.kiama.example.til.AST.Exp,t: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]) :: 7
org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int) :: 7
org.kiama.output.Postfix: productElement(x$1: Int) :: 7
org.kiama.util.ParserUtilities: constToTupleFunction2([A, B, R]r: A, B) :: 7
org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.drivers.A4Tests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 7
org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int) :: 7
org.kiama.example.oberon0.L4.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 7
org.kiama.example.json.JSONTree.JObject: <init>(fields: List[org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue) :: 6
org.kiama.example.til.TIL2_2Tests: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.oberon0.base.c.CVarDecl: <init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType) :: 6
org.kiama.example.lambda2.Lambda$: literal(Ljava/lang/String;) :: 6
org.kiama.example.oberon0.L0.TypeAnalyser: deftype() :: 6
org.kiama.example.lambda2.LambdaTests.$anonfun: <init>() :: 6
org.kiama.example.lambda.LambdaTests: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: productIterator() :: 6
org.kiama.example.lambda.Parser.$anonfun.$anonfun: apply() :: 6
org.kiama.example.json.JSONTree.JArray: <init>(values: scala.collection.immutable.Vector[org.kiama.example.json.JSONTree.JValue]) :: 6
org.kiama.attribution.Attribution: MemoState() :: 6
org.kiama.example.iswim.secd.ConversionOps.ToString: productIterator() :: 6
org.kiama.example.iswim.secd.ConversionOps.ToInt: productIterator() :: 6
org.kiama.example.oberon0.base.source.PrettyPrinter: semisep$default$2() :: 6
org.kiama.example.dataflow.Parser.$anonfun.$anonfun: apply() :: 6
org.kiama.example.til.TIL2_1Main$: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.lambda2.Parser: start() :: 6
org.kiama.example.oberon0.L0.TypeAnalyser: exptype() :: 6
org.kiama.example.lambda3.LambdaTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 6
org.kiama.example.lambda.Lambda$: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.til.TIL2_1Tests: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.lambda2.LambdaTests: literal(Ljava/lang/String;) :: 6
org.kiama.example.oberon0.base.Parser.$anonfun.$anonfun: apply() :: 6
org.kiama.example.til.TIL1_1Main$: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.picojava.tests.ErrorTests: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.transform.Driver: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.til.TIL2_3Main$: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.til.TIL1_1Tests: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) :: 6
org.kiama.example.lambda2.AST.Var: <init>(i: String) :: 6
org.kiama.example.oberon0.base.source.PrettyPrinter: semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc) :: 6
org.kiama.example.iswim.secd.IOOps.Read: productIterator() :: 6
org.kiama.util.Tests: assertMessage(index: Int,line: Int,column: Int,msg: String) :: 6
org.kiama.example.iswim.compiler.Parser: variable() :: 6
org.kiama.example.iswim.secd.SECDBase.Instruction: <init>() :: 6
org.kiama.example.til.TIL2_3Tests: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.prolog.SyntaxAnalysis: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) :: 6
org.kiama.example.picojava.Main$: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.iswim.secd.BooleanOps$Test: toDoc() :: 6
org.kiama.example.iswim.secd.IOOps.Write: productIterator() :: 6
org.kiama.example.lambda2.LambdaTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 6
org.kiama.example.iswim.secd.SECDBase$MkClosures: toDoc() :: 6
org.kiama.example.iswim.compiler.Parser: matchclause() :: 6
org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun.$anonfun: apply() :: 6
org.kiama.example.lambda2.Parser.$anonfun.$anonfun.$anonfun: apply() :: 6
org.kiama.util.WhitespaceParser: literal(s: String) :: 6
org.kiama.example.lambda2.Par: beta() :: 6
org.kiama.example.til.TIL2_2Main$: regex(Lscala/util/matching/Regex;) :: 6
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1: org$kiama$example$iswim$compiler$CodeGenerator$$anonfun$$$outer() :: 6
org.kiama.example.lambda.LambdaTests: expectEval(term: String,result: org.kiama.example.lambda.AST.Exp) :: 6
org.kiama.example.iswim.secd.SECDBase.MkUserException: productIterator() :: 6
org.kiama.example.iswim.tests.ParserTests: fail(Ljava/lang/String;) :: 5
org.kiama.example.lambda.Parser: start() :: 5
org.kiama.example.oberon0.L3.c.CAddrType: productIterator() :: 5
org.kiama.example.picojava.tests.ParserTests: fail(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.drivers.A1$: text(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.base.TestDriver: $init$() :: 5
org.kiama.example.til.AST.Mul: <init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 5
org.kiama.example.til.TIL2_1Tests.$anonfun.$anonfun: apply(ast: org.kiama.example.til.AST.Program) :: 5
org.kiama.example.json.PrettyPrinter$: text(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.L3.Parser: optformalParameters() :: 5
org.kiama.example.oberon0.drivers.A4Tests: rep(Lscala/Function0;) :: 5
org.kiama.example.lambda2.Evaluator: FreshVar() :: 5
org.kiama.example.lambda2.LambdaTests: regex(Lscala/util/matching/Regex;) :: 5
org.kiama.example.prolog.Main$: text(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.base.c.CEmptyStmt: productIterator() :: 5
org.kiama.example.iswim.secd.SECDBase$FunctionSpec: toDoc() :: 5
org.kiama.example.oberon0.L1.Parser: $init$() :: 5
org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.$anonfun: apply() :: 5
org.kiama.output.PrettyPrinterBase: space() :: 5
org.kiama.example.oberon0.L0.source.PrettyPrinter: $init$() :: 5
org.kiama.example.oberon0.L0.c.CLtExp: productIterator() :: 5
org.kiama.attribution.Decorators.$anonfun: apply(t: T) :: 5
org.kiama.example.oberon0.drivers.A2a$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.example.oberon0.L0.c.CSubExp: productIterator() :: 5
org.kiama.example.oberon0.L0.TypeAnalyser: idntype() :: 5
org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun: apply() :: 5
org.kiama.example.oberon0.base.Driver: $init$() :: 5
org.kiama.example.oberon0.base.source.PrettyPrinter: $init$() :: 5
org.kiama.example.til.TIL2_1Tests: n() :: 5
org.kiama.example.oberon0.L0.c.CGtExp: productIterator() :: 5
org.kiama.example.oberon0.L0.c.CNotExp: productIterator() :: 5
org.kiama.example.oberon0.L4.c.CRecordType: productIterator() :: 5
org.kiama.example.lambda2.AST.Lam: <init>(i: String,t: org.kiama.example.lambda2.AST.Type,e: org.kiama.example.lambda2.AST.Exp) :: 5
org.kiama.example.til.TIL1_1Tests: fail(Ljava/lang/String;) :: 5
org.kiama.util.ParserUtilitiesTests.Tup3: productIterator() :: 5
org.kiama.example.lambda2.EagerSubst.$anonfun.$anonfun: apply() :: 5
org.kiama.example.oberon0.drivers.A2bTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.output.Postfix: productIterator() :: 5
org.kiama.example.oberon0.L1.source.PrettyPrinter: $init$() :: 5
org.kiama.example.oberon0.drivers.A2a$: text(Ljava/lang/String;) :: 5
org.kiama.example.lambda2.Par: subsNum() :: 5
org.kiama.example.obr.RISCEncoder.$anonfun: apply(a: Int,b: Int,c: Int) :: 5
org.kiama.example.json.ParsingTests: regex(Lscala/util/matching/Regex;) :: 5
org.kiama.example.til.TIL2_1Tests: fail(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.L2.Parser: $init$() :: 5
org.kiama.example.lambda3.Parser: start() :: 5
org.kiama.example.lambda3.Lambda$: regex(Lscala/util/matching/Regex;) :: 5
org.kiama.output.PrettyPrinter: $init$() :: 5
org.kiama.example.lambda.AST.Num: <init>(i: Int) :: 5
org.kiama.example.lambda2.Par: subsApp() :: 5
org.kiama.example.oberon0.drivers.A3Tests: text(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.drivers.A3$: rep(Lscala/Function0;) :: 5
org.kiama.example.oberon0.L0.c.CAndExp: productIterator() :: 5
org.kiama.example.oberon0.drivers.A3$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.util.StringEmitter: emitln() :: 5
org.kiama.example.oberon0.L0.c.CEqExp: productIterator() :: 5
org.kiama.example.lambda2.AST.IntType: <init>() :: 5
org.kiama.example.oberon0.drivers.A2b$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.example.oberon0.drivers.A2a$: rep(Lscala/Function0;) :: 5
org.kiama.example.oberon0.L0.source.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) :: 5
org.kiama.example.oberon0.L3.Parser: optvar() :: 5
org.kiama.example.lambda2.ParEagerSubst.$anonfun: apply() :: 5
org.kiama.example.oberon0.L2.NameAnalyser: $init$() :: 5
org.kiama.example.oberon0.L3.SymbolTable: readProc() :: 5
org.kiama.example.iswim.driver.PrettyPrinter$: text(Ljava/lang/String;) :: 5
org.kiama.example.lambda.LambdaTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 5
org.kiama.example.oberon0.L0.c.COrExp: productIterator() :: 5
org.kiama.example.oberon0.drivers.A1Tests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.util.ParserUtilitiesTests: fail(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.L0.c.CDivExp: productIterator() :: 5
org.kiama.example.oberon0.L0.SymbolTable: $init$() :: 5
org.kiama.util.ParserUtilitiesTests.Tup2: productIterator() :: 5
org.kiama.util.ParserUtilitiesTests.Tup6: productIterator() :: 5
org.kiama.machine.Machine: text(Ljava/lang/String;) :: 5
org.kiama.example.lambda2.LazySubst.$anonfun.$anonfun: apply() :: 5
org.kiama.example.oberon0.drivers.A2aTests: rep(Lscala/Function0;) :: 5
org.kiama.example.oberon0.drivers.A2aTests: text(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.drivers.A3Tests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.util.Environments: $init$() :: 5
org.kiama.example.oberon0.L0.c.CAddExp: productIterator() :: 5
org.kiama.example.lambda2.Par: lambda() :: 5
org.kiama.attribution.Decorators.$anonfun: <init>() :: 5
org.kiama.util.ParserUtilitiesTests.Node: productIterator() :: 5
org.kiama.example.oberon0.L3.Parser: fpsection() :: 5
org.kiama.example.oberon0.L3.Parser: procedureCall() :: 5
org.kiama.example.lambda2.ReduceSubst: beta() :: 5
org.kiama.output.ParenPrettyPrinter: $init$() :: 5
org.kiama.example.oberon0.L2.source.PrettyPrinter: $init$() :: 5
org.kiama.example.oberon0.drivers.A2aTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.example.oberon0.drivers.A2b$: text(Ljava/lang/String;) :: 5
org.kiama.example.lambda3.LambdaTests: regex(Lscala/util/matching/Regex;) :: 5
org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun.$anonfun: apply() :: 5
org.kiama.example.imperative.Imperative$: regex(Lscala/util/matching/Regex;) :: 5
org.kiama.example.til.TIL2_2Tests: fail(Ljava/lang/String;) :: 5
org.kiama.output.PrettyPrinterBase: parens(d: PrettyPrinterBase.this.Doc) :: 5
org.kiama.example.oberon0.L3.c.CAddrExp: productIterator() :: 5
org.kiama.example.iswim.secd.IntegerOps$IntValue: org$kiama$example$iswim$secd$IntegerOps$IntValue$$$outer() :: 5
org.kiama.example.oberon0.drivers.A4Tests: text(Ljava/lang/String;) :: 5
org.kiama.example.json.JSONTree.JFalse: <init>() :: 5
org.kiama.example.oberon0.L3.TypeAnalyser: parameters() :: 5
org.kiama.example.til.AST.Assign: <init>(i: org.kiama.example.til.AST.Id,e: org.kiama.example.til.AST.Exp) :: 5
org.kiama.example.obr.SyntaxAnalysis.Pos: productIterator() :: 5
org.kiama.example.oberon0.drivers.A3$: text(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.L3.Parser: optActualParameters() :: 5
org.kiama.util.ParserUtilitiesTests.Tup5: productIterator() :: 5
org.kiama.example.lambda2.Par: subsOpn() :: 5
org.kiama.example.lambda2.PrettyPrinter$: text(Ljava/lang/String;) :: 5
org.kiama.example.json.JSONTree.JName: <init>(s: String) :: 5
org.kiama.example.oberon0.L3.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 5
org.kiama.example.oberon0.L0.c.CNeExp: productIterator() :: 5
org.kiama.example.iswim.secd.SECDBase$CodeSegment: toDoc() :: 5
org.kiama.example.oberon0.L0.c.CMulExp: productIterator() :: 5
org.kiama.example.oberon0.L3.SymbolTable: writeProc() :: 5
org.kiama.example.oberon0.L0.NameAnalyser: $init$() :: 5
org.kiama.example.lambda2.Lambda$: regex(Lscala/util/matching/Regex;) :: 5
org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 5
org.kiama.example.imperative.PrettyPrinter$: text(Ljava/lang/String;) :: 5
org.kiama.example.json.ParsingTests: fail(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.L3.c.CVoidType: productIterator() :: 5
org.kiama.example.oberon0.base.source.Block: stmts() :: 5
org.kiama.example.til.TIL2_1Tests.$anonfun: apply() :: 5
org.kiama.example.oberon0.L0.Parser: $init$() :: 5
org.kiama.output.PrettyPrinterBase.PrettyPrintable: toDoc() :: 5
org.kiama.example.oberon0.drivers.A2bTests: text(Ljava/lang/String;) :: 5
org.kiama.example.lambda2.Par: subsLam() :: 5
org.kiama.util.PositionedParserUtilities.$anon: apply(in: scala.util.parsing.input.Reader[Char]) :: 5
org.kiama.example.til.TIL2_1Tests: x() :: 5
org.kiama.example.oberon0.base.Analyser: $init$() :: 5
org.kiama.example.oberon0.L0.c.CModExp: productIterator() :: 5
org.kiama.example.oberon0.L3.Parser: procedureDeclaration() :: 5
org.kiama.output.PrettyPrinterBase: $init$() :: 5
org.kiama.example.til.TIL2_3Tests: fail(Ljava/lang/String;) :: 5
org.kiama.example.oberon0.drivers.A1$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 5
org.kiama.example.oberon0.L0.c.CLeExp: productIterator() :: 5
org.kiama.machine.Machine.ParamUpdater: :=(u: U) :: 5
org.kiama.example.oberon0.drivers.A1Tests: text(Ljava/lang/String;) :: 5
org.kiama.example.json.Driver: regex(Lscala/util/matching/Regex;) :: 5
org.kiama.example.oberon0.base.Parser: $init$() :: 5
org.kiama.util.ParserUtilitiesTests.Tup4: productIterator() :: 5
org.kiama.example.oberon0.base.c.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.c.CASTNode) :: 5
org.kiama.util.ParserUtilitiesTests: Parser(Lscala/Function1;) :: 5
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3: org$kiama$example$iswim$compiler$CodeGenerator$$anonfun$$anonfun$$$outer() :: 5
org.kiama.example.oberon0.drivers.A3Tests: rep(Lscala/Function0;) :: 5
org.kiama.output.PrettyPrinterBase.DocOps: <+>(e: PrettyPrinterBase.this.Doc) :: 5
org.kiama.example.oberon0.L3.SymbolTable: writelnProc() :: 5
org.kiama.example.iswim.compiler.Syntax.Tuple: <init>(fields: List[org.kiama.example.iswim.compiler.Syntax.Expr]) :: 5
org.kiama.example.til.TIL2_1Tests.$anonfun.$anonfun: <init>() :: 5
org.kiama.example.oberon0.L3.NameAnalyser: level() :: 5
org.kiama.example.oberon0.L0.c.CGeExp: productIterator() :: 5
org.kiama.example.iswim.compiler.Syntax.Negate: <init>(e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 4
org.kiama.example.lambda2.ReduceSubst: subsOpn() :: 4
org.kiama.example.lambda.Parser.$anonfun.$anonfun.$anonfun: apply() :: 4
org.kiama.example.iswim.secd.SECDBase.Exit: <init>() :: 4
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 4
org.kiama.example.iswim.secd.BooleanOps.Test: <init>(ct: org.kiama.example.iswim.secd.SECDBase.CodeSegment,ce: org.kiama.example.iswim.secd.SECDBase.CodeSegment) :: 4
org.kiama.example.oberon0.drivers.A1$: rep(Lscala/Function0;) :: 4
org.kiama.example.iswim.compiler.Parser: term4() :: 4
org.kiama.example.oberon0.L0.c.CSubExp: right() :: 4
org.kiama.example.transform.Parser.$anonfun.$anonfun: apply() :: 4
org.kiama.example.oberon0.L0.c.CNeExp: right() :: 4
org.kiama.example.obr.RISCEncoder.$anonfun: apply(label: Int) :: 4
org.kiama.example.oberon0.L0.c.CModExp: left() :: 4
org.kiama.util.ParserUtilitiesTests: regex(Lscala/util/matching/Regex;) :: 4
org.kiama.example.iswim.driver.PrettyPrinter$: line() :: 4
org.kiama.example.oberon0.L4.SymbolTable: isNotArray(e: SymbolTable.this.Entity) :: 4
org.kiama.example.oberon0.L3.c.CAddrExp: exp() :: 4
org.kiama.example.iswim.compiler.Parser: lambdaexpr() :: 4
org.kiama.example.iswim.secd.HeapOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.output.PrettyPrinter: pretty$default$2() :: 4
org.kiama.example.lambda2.LambdaTests.$anonfun: isDefinedAt(x1: Any) :: 4
org.kiama.example.oberon0.L0.c.COrExp: right() :: 4
org.kiama.example.oberon0.L0.c.CAddExp: left() :: 4
org.kiama.example.lambda2.ReduceSubst: lambda() :: 4
org.kiama.example.iswim.compiler.Parser: applic() :: 4
org.kiama.example.oberon0.drivers.A2a$: line() :: 4
org.kiama.example.iswim.secd.SECDBase.Enter: <init>(nms: List[String]) :: 4
org.kiama.example.iswim.compiler.Parser: letrecexpr() :: 4
org.kiama.example.iswim.compiler.Parser: term1() :: 4
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 4
org.kiama.example.iswim.secd.RecordOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.driver.SECD: primTable() :: 4
org.kiama.example.lambda2.ReduceSubst: subsVar() :: 4
org.kiama.example.oberon0.L0.c.CEqExp: right() :: 4
org.kiama.example.iswim.compiler.Parser: returnexpr() :: 4
org.kiama.example.obr.SyntaxAnalysis: ident() :: 4
org.kiama.example.imperative.Generator.$anonfun.$anonfun: apply(r: org.kiama.example.imperative.AST.Exp) :: 4
org.kiama.example.oberon0.L0.c.CMulExp: left() :: 4
org.kiama.util.StringEmitter: b() :: 4
org.kiama.example.iswim.compiler.Parser.Pos: <init>() :: 4
org.kiama.example.lambda2.PrettyPrinter$: empty() :: 4
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$2: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2: org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$$outer() :: 4
org.kiama.example.oberon0.L0.c.CAndExp: right() :: 4
org.kiama.example.iswim.secd.BooleanOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.oberon0.L1.Parser.$anonfun: <init>() :: 4
org.kiama.example.dataflow.Driver: regex(Lscala/util/matching/Regex;) :: 4
org.kiama.example.oberon0.L0.c.CAddExp: right() :: 4
org.kiama.example.iswim.compiler.Parser: throwtoexpr() :: 4
org.kiama.example.oberon0.L3.NameAnalyser$$anonfun$envoutl$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.secd.IntComparisonOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.lambda3.LambdaTests: fail(Ljava/lang/String;) :: 4
org.kiama.example.iswim.tests.ParserTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 4
org.kiama.example.iswim.compiler.Parser: letstmt() :: 4
org.kiama.example.lambda2.ReduceSubst: subsLam() :: 4
org.kiama.example.oberon0.drivers.A3$: line() :: 4
org.kiama.example.picojava.tests.ErrorTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 4
org.kiama.output.PrettyPrinterBase.$anon: toDoc() :: 4
org.kiama.example.oberon0.L0.c.CLtExp: right() :: 4
org.kiama.example.picojava.NameResolution$$anonfun$org$kiama$example$picojava$NameResolution$$finddecl$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.compiler.Parser: exprstmt() :: 4
org.kiama.example.oberon0.L0.c.COrExp: left() :: 4
org.kiama.example.lambda2.Par$$anonfun$lookupb$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.secd.StackOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.til.TIL1_1: $init$() :: 4
org.kiama.example.oberon0.L0.c.CGeExp: left() :: 4
org.kiama.example.lambda.Lambda$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 4
org.kiama.example.lambda.LambdaTests: literal(Ljava/lang/String;) :: 4
org.kiama.example.transform.Driver: literal(Ljava/lang/String;) :: 4
org.kiama.example.json.SyntaxAnalysis: jstring() :: 4
org.kiama.example.oberon0.L3.NameAnalyser$$anonfun$envinl$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.lambda2.ParLazyShare.$anonfun: apply() :: 4
org.kiama.example.oberon0.drivers.A1$: empty() :: 4
org.kiama.example.iswim.compiler.Parser: identRegex() :: 4
org.kiama.example.iswim.compiler.Parser: whitespaceParser() :: 4
org.kiama.example.iswim.compiler.Parser: term3() :: 4
org.kiama.example.oberon0.L0.c.CLeExp: right() :: 4
org.kiama.example.oberon0.drivers.A2b$: rep(Lscala/Function0;) :: 4
org.kiama.example.oberon0.drivers.A1Tests: empty() :: 4
org.kiama.example.oberon0.drivers.A1Tests: line() :: 4
org.kiama.attribution.Attribution: resetMemo() :: 4
org.kiama.example.iswim.compiler.Parser: letrecstmt() :: 4
org.kiama.util.ParserUtilities.$anonfun: <init>() :: 4
org.kiama.example.oberon0.drivers.A2bTests: empty() :: 4
org.kiama.example.iswim.compiler.Syntax.BoolVal: <init>(b: Boolean) :: 4
org.kiama.example.iswim.secd.SECDBase.PushEmpty: <init>() :: 4
org.kiama.example.oberon0.L0.NameAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 4
org.kiama.example.oberon0.drivers.A2bTests: line() :: 4
org.kiama.example.oberon0.L0.c.CGtExp: right() :: 4
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 4
org.kiama.example.oberon0.L0.c.CNeExp: left() :: 4
org.kiama.example.iswim.compiler.Parser: parenexpr() :: 4
org.kiama.example.iswim.compiler.Syntax.Lambda: <init>(par: org.kiama.example.iswim.compiler.Syntax.Variable,body: org.kiama.example.iswim.compiler.Syntax.Expr) :: 4
org.kiama.example.iswim.secd.ExceptionHandler$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.secd.IOOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.oberon0.drivers.A2a$: empty() :: 4
org.kiama.example.oberon0.L0.c.CGtExp: left() :: 4
org.kiama.example.oberon0.drivers.A4Tests: empty() :: 4
org.kiama.example.oberon0.L0.c.CGeExp: right() :: 4
org.kiama.example.lambda2.ParLazyShare.$anonfun.$anonfun.$anonfun: apply() :: 4
org.kiama.example.iswim.compiler.Syntax.Minus: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 4
org.kiama.example.prolog.Main$: line() :: 4
org.kiama.example.lambda2.ReduceSubst: subsNum() :: 4
org.kiama.rewriting.Rewriter.$anonfun: apply(t: Any) :: 4
org.kiama.example.iswim.compiler.Parser: pattern() :: 4
org.kiama.example.json.PrettyPrinter$: line() :: 4
org.kiama.example.iswim.compiler.Parser: emptyexpr() :: 4
org.kiama.example.iswim.tests.SemanticAnalysisTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 4
org.kiama.example.obr.SyntaxAnalysis: regex(Lscala/util/matching/Regex;) :: 4
org.kiama.example.iswim.secd.IntegerOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.lambda2.ParLazyUpdate.$anonfun: apply() :: 4
org.kiama.example.iswim.compiler.Parser: matchexpr() :: 4
org.kiama.example.obr.SyntaxAnalysis.Pos: s() :: 4
org.kiama.example.oneohonecompanies.Precedence$$anonfun$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.json.PrettyPrinter$: empty() :: 4
org.kiama.machine.Machine: empty() :: 4
org.kiama.example.oberon0.drivers.A2b$: empty() :: 4
org.kiama.example.oberon0.drivers.A2aTests: line() :: 4
org.kiama.example.iswim.compiler.Parser: valexpr() :: 4
org.kiama.output.PrettyPrinter: nest$default$2() :: 4
org.kiama.output.PrettyPrinterBase.$anonfun: apply(a: Any) :: 4
org.kiama.example.lambda2.ReduceSubst: subsApp() :: 4
org.kiama.example.iswim.compiler.Parser: intRegex() :: 4
org.kiama.example.oberon0.drivers.A2bTests: rep(Lscala/Function0;) :: 4
org.kiama.example.lambda3.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 4
org.kiama.attribution.Attribution: paramAttr([A, T <: Object, U]f: A => T => U) :: 4
org.kiama.example.lambda2.ParLazySubst.$anonfun.$anonfun: apply() :: 4
org.kiama.example.iswim.compiler.Parser: comment() :: 4
org.kiama.example.imperative.Generator.$anonfun: apply(l: org.kiama.example.imperative.AST.Exp) :: 4
org.kiama.example.til.AST.Add: <init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 4
org.kiama.example.oberon0.drivers.A4Tests: line() :: 4
org.kiama.example.iswim.secd.ConversionOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.driver.Main$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 4
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$envin$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.oberon0.L0.c.CMulExp: right() :: 4
org.kiama.example.oberon0.drivers.A1$: line() :: 4
org.kiama.example.iswim.tests.CodeGeneratorTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 4
org.kiama.example.iswim.compiler.Parser: callccexpr() :: 4
org.kiama.example.picojava.NameResolution.$anonfun: apply(name: String) :: 4
org.kiama.example.prolog.SyntaxAnalysis: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 4
org.kiama.example.iswim.compiler.Parser: term2() :: 4
org.kiama.machine.Machine: line() :: 4
org.kiama.example.oberon0.L0.c.CDivExp: left() :: 4
org.kiama.example.imperative.PrettyPrinter$: line() :: 4
org.kiama.example.iswim.compiler.Parser: blockexpr() :: 4
org.kiama.example.dataflow.Optimise.$anonfun: apply() :: 4
org.kiama.example.oberon0.L0.c.CAndExp: left() :: 4
org.kiama.example.oberon0.L0.c.CDivExp: right() :: 4
org.kiama.example.prolog.Main$: empty() :: 4
org.kiama.example.oberon0.L3.NameAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 4
org.kiama.example.oberon0.drivers.A3$: empty() :: 4
org.kiama.example.oberon0.L0.c.CNotExp: exp() :: 4
org.kiama.rewriting.Rewriter$$anonfun$map$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 4
org.kiama.example.oberon0.L0.c.CLtExp: left() :: 4
org.kiama.example.iswim.compiler.Parser: liter() :: 4
org.kiama.example.oberon0.drivers.A2aTests: empty() :: 4
org.kiama.example.iswim.secd.StringOps$$anonfun$evalInst$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.oberon0.L0.c.CLeExp: left() :: 4
org.kiama.example.iswim.compiler.Parser: primstmt() :: 4
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2: org$kiama$example$lambda2$ParLazyShare$$anonfun$$$outer() :: 4
org.kiama.example.oberon0.drivers.A1Tests: rep(Lscala/Function0;) :: 4
org.kiama.example.oberon0.L0.c.CSubExp: left() :: 4
org.kiama.example.oberon0.L0.c.CModExp: right() :: 4
org.kiama.example.oberon0.drivers.A3Tests: line() :: 4
org.kiama.example.oberon0.drivers.A3Tests: empty() :: 4
org.kiama.example.lambda.Lambda$: literal(Ljava/lang/String;) :: 4
org.kiama.example.iswim.compiler.Parser: mkrefexpr() :: 4
org.kiama.example.lambda2.Par: letLet() :: 4
org.kiama.example.lambda2.PrettyPrinter$: line() :: 4
org.kiama.example.iswim.compiler.Parser: tupleexpr() :: 4
org.kiama.example.imperative.PrettyPrinter$: empty() :: 4
org.kiama.example.iswim.compiler.Parser: whileexpr() :: 4
org.kiama.example.lambda2.ParLazySubst.$anonfun.$anonfun.$anonfun: apply() :: 4
org.kiama.example.lambda2.Lambda$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 4
org.kiama.example.picojava.AbstractSyntax.AssignStmt: <init>(Variable: org.kiama.example.picojava.AbstractSyntax.Access,Value: org.kiama.example.picojava.AbstractSyntax.Exp) :: 4
org.kiama.example.oberon0.drivers.A2b$: line() :: 4
org.kiama.example.til.AST.While: <init>(e: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]) :: 4
org.kiama.example.iswim.compiler.Parser: letexpr() :: 4
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.json.JSONTree.JString: <init>(value: String) :: 4
org.kiama.example.iswim.driver.PrettyPrinter$: empty() :: 4
org.kiama.example.oberon0.L3.NameAnalyser$$anonfun$level$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.compiler.Parser: ifelseexpr() :: 4
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$envout$1: isDefinedAt(Ljava/lang/Object;) :: 4
org.kiama.example.iswim.compiler.Parser: factor() :: 4
org.kiama.example.oberon0.L0.c.CEqExp: left() :: 4
org.kiama.example.lambda3.Lambda$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 4
org.kiama.example.imperative.Imperative$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 4
org.kiama.example.json.Driver: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.util.ParserUtilitiesTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.obr.SyntaxAnalysis: opt(Lscala/Function0;) :: 3
org.kiama.example.lambda3.LambdaTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 3
org.kiama.example.oberon0.L0.c.CLeExp: hashCode() :: 3
org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) :: 3
org.kiama.util.ParserUtilitiesTests.Tup6: hashCode() :: 3
org.kiama.example.oberon0.L3.c.CAddrExp: hashCode() :: 3
org.kiama.example.lambda3.AST$SwapQuery: execute() :: 3
org.kiama.example.oberon0.drivers.A2b$: success(Ljava/lang/Object;) :: 3
org.kiama.example.iswim.secd.SECDBase.MkClosures: <init>(fss: List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec]) :: 3
org.kiama.example.obr.SyntaxAnalysis.Pos: productPrefix() :: 3
org.kiama.example.iswim.tests.ParserTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.drivers.A1$: success(Ljava/lang/Object;) :: 3
org.kiama.example.prolog.SyntaxAnalysis: literal() :: 3
org.kiama.example.json.JSONTree.JNull: <init>() :: 3
org.kiama.example.picojava.Parser: assign_stmt() :: 3
org.kiama.example.prolog.SyntaxAnalysis: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.iswim.secd.SECDBase: envir() :: 3
org.kiama.util.ParserUtilities: parseResultToTuple2([A, B]p: ParserUtilities.this.Parser[ParserUtilities.this.~[A,B]]) :: 3
org.kiama.attribution.Attributable: setNodeChildConnections(node: Any) :: 3
org.kiama.example.iswim.secd.SECDBase.MkUserException: hashCode() :: 3
org.kiama.util.Tests: failExpectedTest([T]expected: T,found: T,description: String) :: 3
org.kiama.example.oberon0.L4.NameAnalyser: isLvalue(l: org.kiama.example.oberon0.L0.source.Expression) :: 3
org.kiama.example.obr.RISCEncoder.$anonfun: apply(inst: org.kiama.example.RISC.RISCISA.Assembler) :: 3
org.kiama.example.oberon0.drivers.A3$: success(Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.L0.c.CGeExp: hashCode() :: 3
org.kiama.example.til.TIL1_1$$anonfun$expression$1: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 3
org.kiama.example.til.AST$IfElse$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.L0.source.IdnExp: idnuse() :: 3
org.kiama.example.oberon0.drivers.A2a$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.output.PrettyPrinter.$anonfun: apply(iw: Int, Int) :: 3
org.kiama.example.oberon0.drivers.A1Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.imperative.Parser$$anonfun$term$1: org$kiama$example$imperative$Parser$$anonfun$$$outer() :: 3
org.kiama.example.prolog.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply() :: 3
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 3
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 3
org.kiama.example.picojava.tests.ErrorTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L0.c.CLeExp: productPrefix() :: 3
org.kiama.example.iswim.secd.SECDBase.FunctionSpec: <init>(fn: Option[String],pn: String,bdy: org.kiama.example.iswim.secd.SECDBase.CodeSegment) :: 3
org.kiama.example.picojava.Parser: xtends() :: 3
org.kiama.example.oberon0.L0.c.CAddExp: hashCode() :: 3
org.kiama.output.PrettyPrinter$Doc: org$kiama$output$PrettyPrinterBase$DocOps$$$outer() :: 3
org.kiama.example.json.SyntaxAnalysis: jnull() :: 3
org.kiama.example.dataflow.Driver: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L0.source.ProdExpression: fixity() :: 3
org.kiama.example.lambda2.LazySubst: s() :: 3
org.kiama.example.oberon0.L0.c.CLtExp: productPrefix() :: 3
org.kiama.example.oberon0.drivers.A2bTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.oberon0.L0.c.CNeExp: hashCode() :: 3
org.kiama.output.PrettyPrinter.$anonfun.$anonfun.$anonfun.$anonfun: apply(r: Int) :: 3
org.kiama.example.json.ParsingTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.util.ParserUtilitiesTests.Tup3: productPrefix() :: 3
org.kiama.example.oberon0.drivers.A2a$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L0.c.CMulExp: productPrefix() :: 3
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 3
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4: org$kiama$example$lambda2$ParLazyShare$$anonfun$$anonfun$$$outer() :: 3
org.kiama.example.iswim.tests.CodeGeneratorTests: rep(Lscala/Function0;) :: 3
org.kiama.util.ParserUtilitiesTests.Node: i() :: 3
org.kiama.example.oberon0.base.c.CType: <init>() :: 3
org.kiama.util.Tests: failExpectedTest$default$3([T]) :: 3
org.kiama.example.oberon0.drivers.A1Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.util.TestCompiler: filetests$default$5() :: 3
org.kiama.util.ParserUtilitiesTests.Tup4: productPrefix() :: 3
org.kiama.example.oberon0.L0.c.CAndExp: hashCode() :: 3
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 3
org.kiama.example.oberon0.drivers.A2b$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.transform.AST$Program$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.iswim.secd.IOOps.Read: hashCode() :: 3
org.kiama.util.Emitter: emitln(any: Any) :: 3
org.kiama.example.iswim.compiler.Parser: $init$() :: 3
org.kiama.output.PrettyPrinter.$anonfun.$anonfun.$anonfun: apply(c: Int => String) :: 3
org.kiama.example.iswim.compiler.Syntax.Binding: <init>(v: org.kiama.example.iswim.compiler.Syntax.Variable,e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 3
org.kiama.example.iswim.secd.StackOps.Swap: <init>(n: Int,m: Int) :: 3
org.kiama.example.oberon0.L0.c.CModExp: productPrefix() :: 3
org.kiama.output.PrettyPrinterBase: pretty(p: PrettyPrinterBase.this.PrettyPrintable) :: 3
org.kiama.example.til.AST.Sub: <init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 3
org.kiama.example.oberon0.L3.c.CVoidType: hashCode() :: 3
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 3
org.kiama.example.iswim.secd.ConversionOps.ToString: productPrefix() :: 3
org.kiama.example.oberon0.drivers.A1Tests: success(Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.drivers.A3Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.json.SyntaxAnalysis: jtrue() :: 3
org.kiama.example.iswim.driver.Main$: success(Ljava/lang/Object;) :: 3
org.kiama.example.lambda3.Parser$$anonfun$exp$1: org$kiama$example$lambda3$Parser$$anonfun$$$outer() :: 3
org.kiama.example.til.TIL1_1.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 3
org.kiama.example.picojava.benchmark.PicoJavaBenchmark.$anonfun: apply(i: Int) :: 3
org.kiama.example.oberon0.drivers.A4Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.obr.RISCEncoder$$anonfun$encode$6: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.L0.TypeAnalyser: basetype() :: 3
org.kiama.attribution.Attributable: initTreeProperties() :: 3
org.kiama.example.lambda3.LambdaTests.$anonfun: <init>() :: 3
org.kiama.example.transform.Driver: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.util.ParserUtilitiesTests.Tup5: hashCode() :: 3
org.kiama.example.transform.Driver: rep(Lscala/Function0;) :: 3
org.kiama.example.oberon0.L3.c.CAddrExp: productPrefix() :: 3
org.kiama.util.RegexParserTests: failParseFailure(f: RegexParserTests.this.Failure) :: 3
org.kiama.example.oberon0.L2.Desugarer: desugarFor() :: 3
org.kiama.example.picojava.Parser: exp() :: 3
org.kiama.example.dataflow.Driver: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 3
org.kiama.example.iswim.tests.ParserTests: rep(Lscala/Function0;) :: 3
org.kiama.example.oberon0.L3.SymbolTable: $init$() :: 3
org.kiama.example.til.TIL1_1$$anonfun$term$1: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 3
org.kiama.example.oberon0.base.source.IdnUse: ident() :: 3
org.kiama.output.PrettyPrinterBase: char(c: Char) :: 3
org.kiama.example.dataflow.Optimise.$anonfun: <init>() :: 3
org.kiama.example.oberon0.L2.Desugarer: desugarCase() :: 3
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: productPrefix() :: 3
org.kiama.example.iswim.secd.StringOps$StringValue: org$kiama$example$iswim$secd$StringOps$StringValue$$$outer() :: 3
org.kiama.example.oberon0.base.c.CEmptyStmt: hashCode() :: 3
org.kiama.example.oberon0.base.source.IdnDef: ident() :: 3
org.kiama.example.oberon0.drivers.A1Phases: langlevel() :: 3
org.kiama.example.til.ParsingMain: $init$() :: 3
org.kiama.example.obr.RISCEncoder$$anonfun$encode$2: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.iswim.secd.BooleanOps$TrueValue: org$kiama$example$iswim$secd$BooleanOps$TrueValue$$$outer() :: 3
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1: org$kiama$example$oberon0$base$Parser$$anonfun$$$outer() :: 3
org.kiama.example.oberon0.L0.c.COrExp: hashCode() :: 3
org.kiama.example.oberon0.drivers.A1$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.picojava.tests.ParserTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.output.PrettyPrinterBase: vsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc) :: 3
org.kiama.example.picojava.Parser: block_stmt() :: 3
org.kiama.example.iswim.secd.SECDBase.MkUserException: productPrefix() :: 3
org.kiama.example.oberon0.L3.source.FPSection$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.iswim.compiler.Syntax.If: <init>(e: org.kiama.example.iswim.compiler.Syntax.Expr,thn: org.kiama.example.iswim.compiler.Syntax.Expr,els: org.kiama.example.iswim.compiler.Syntax.Expr) :: 3
org.kiama.util.ParserUtilitiesTests.Tup4: hashCode() :: 3
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) :: 3
org.kiama.util.ParserUtilitiesTests$Tup3$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.drivers.A1$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.rewriting.Rewriter: rule(f: PartialFunction[Any,Any]) :: 3
org.kiama.example.lambda3.Lambda$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.drivers.A3Tests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L0.c.CSubExp: productPrefix() :: 3
org.kiama.util.Console: <init>() :: 3
org.kiama.attribution.Attributable: isRoot() :: 3
org.kiama.attribution.Attributable: prev([T]) :: 3
org.kiama.example.til.Main: $init$() :: 3
org.kiama.example.oberon0.L3.c.CAddrType: hashCode() :: 3
org.kiama.attribution.Attributable: isFirst() :: 3
org.kiama.example.lambda2.ParLazyShare.$anonfun.$anonfun: apply() :: 3
org.kiama.example.oberon0.L4.source.IndexExp: base() :: 3
org.kiama.example.transform.Driver: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.lambda3.Parser$$anonfun$query$1: org$kiama$example$lambda3$Parser$$anonfun$$$outer() :: 3
org.kiama.util.ParserUtilities: constToTupleFunction3([A, B, C, R]r: A, B, C) :: 3
org.kiama.example.obr.SyntaxAnalysis: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.til.TIL1_1$$anonfun$factor$1: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 3
org.kiama.example.picojava.Parser: class_decl() :: 3
org.kiama.example.oberon0.L1.TypeAnalyser: $init$() :: 3
org.kiama.example.dataflow.Driver: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.picojava.Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.oberon0.L0.source.RelationalExpression: fixity() :: 3
org.kiama.example.obr.SyntaxAnalysis: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.obr.ObrTree$IfStmt$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply(s: String) :: 3
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(p: Parser.this.Pos) :: 3
org.kiama.example.iswim.tests.ParserTests: success(Ljava/lang/Object;) :: 3
org.kiama.output.Postfix: hashCode() :: 3
org.kiama.example.oberon0.drivers.A2aTests: success(Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.base.Parser.$anonfun.$anonfun.$anonfun: apply() :: 3
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1: org$kiama$example$oberon0$L4$Parser$$anonfun$$$outer() :: 3
org.kiama.example.iswim.tests.CodeGeneratorTests: success(Ljava/lang/Object;) :: 3
org.kiama.example.picojava.Parser: while_stmt() :: 3
org.kiama.example.oberon0.drivers.A4Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.iswim.tests.SemanticAnalysisTests: success(Ljava/lang/Object;) :: 3
org.kiama.example.picojava.ErrorCheck: errors() :: 3
org.kiama.example.prolog.SyntaxAnalysis: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.json.JSONTree.JTrue: <init>() :: 3
org.kiama.util.TestCompiler: filetests$default$7() :: 3
org.kiama.util.ParserUtilitiesTests.Tup5: productPrefix() :: 3
org.kiama.rewriting.Rewriter: rewrite([T]s: ) :: 3
org.kiama.example.lambda2.AST$Lam$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.L0.c.CDivExp: productPrefix() :: 3
org.kiama.example.picojava.Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.oberon0.L0.c.CNotExp: productPrefix() :: 3
org.kiama.example.picojava.AbstractSyntax.ClassDecl: <init>(Name: String,Superclass: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse],Body: org.kiama.example.picojava.AbstractSyntax.Block) :: 3
org.kiama.example.iswim.tests.ParserTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.iswim.secd.ConversionOps.ToInt: productPrefix() :: 3
org.kiama.example.oberon0.L0.source.UnaryExpression: fixity() :: 3
org.kiama.util.WhitespaceParser.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) :: 3
org.kiama.example.obr.RISCEncoder$$anonfun$encode$3: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1: org$kiama$example$iswim$secd$SECDBase$$anonfun$$$outer() :: 3
org.kiama.example.oberon0.L4.c.CRecordType: hashCode() :: 3
org.kiama.example.oberon0.base.c.CEmptyStmt: productPrefix() :: 3
org.kiama.output.PrettyPrinterBase.DocOps: <@>(e: PrettyPrinterBase.this.Doc) :: 3
org.kiama.example.oberon0.L0.c.CNotExp: hashCode() :: 3
org.kiama.example.oberon0.drivers.A2aTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) :: 3
org.kiama.example.lambda3.AST$EquivQuery: execute() :: 3
org.kiama.example.oberon0.drivers.A2bPhases: langlevel() :: 3
org.kiama.example.oberon0.L4.c.CRecordType: fields() :: 3
org.kiama.example.lambda.Parser$$anonfun$exp$1: org$kiama$example$lambda$Parser$$anonfun$$$outer() :: 3
org.kiama.attribution.Attributable: parent([T]) :: 3
org.kiama.example.iswim.tests.CodeGeneratorTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L3.Parser: $init$() :: 3
org.kiama.example.oberon0.L0.c.CDivExp: hashCode() :: 3
org.kiama.util.ParserUtilities.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) :: 3
org.kiama.example.til.TIL1_1Tests.$anonfun: apply() :: 3
org.kiama.example.oberon0.drivers.A4Phases: langlevel() :: 3
org.kiama.rewriting.Rewriter.$anon.$anonfun: apply(ct: Any, Any) :: 3
org.kiama.example.picojava.Parser: boolean_literal() :: 3
org.kiama.example.oberon0.L0.c.CGeExp: productPrefix() :: 3
org.kiama.example.iswim.tests.SemanticAnalysisTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.util.CompilerBase: driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 3
org.kiama.example.transform.AST$BinExpR$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.drivers.A3Tests: success(Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.L0.c.CEqExp: hashCode() :: 3
org.kiama.example.oberon0.drivers.A2aTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.oberon0.drivers.A3$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.picojava.Main$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L0.c.CMulExp: hashCode() :: 3
org.kiama.util.ParserUtilitiesTests.Tup3: hashCode() :: 3
org.kiama.util.StdoutEmitter: $init$() :: 3
org.kiama.example.oberon0.L0.c.CAndExp: productPrefix() :: 3
org.kiama.example.imperative.Parser$$anonfun$exp$1: org$kiama$example$imperative$Parser$$anonfun$$$outer() :: 3
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$$outer() :: 3
org.kiama.example.oberon0.drivers.A3$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.drivers.A2b$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.oberon0.L0.c.CBinaryExpression: fixity() :: 3
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 3
org.kiama.example.oberon0.L2.TypeAnalyser: exptypeDef() :: 3
org.kiama.example.obr.RISCEncoder$$anonfun$encode$7: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.L0.c.CGtExp: productPrefix() :: 3
org.kiama.util.TestCompiler: filetests(name: String,path: String,srcext: String,resext: String,optinext: Option[String],indefault: String,argslist: List[Array[String]]) :: 3
org.kiama.example.picojava.Parser: stmt() :: 3
org.kiama.example.oberon0.drivers.A4Tests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.json.SyntaxAnalysis: jfalse() :: 3
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: hashCode() :: 3
org.kiama.example.iswim.driver.Main$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.drivers.A2aTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.drivers.A3Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.iswim.secd.IOOps.Write: productPrefix() :: 3
org.kiama.example.iswim.secd.IOOps.Write: hashCode() :: 3
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 3
org.kiama.example.iswim.driver.Main$: rep(Lscala/Function0;) :: 3
org.kiama.util.ParserUtilitiesTests.Tup2: hashCode() :: 3
org.kiama.example.picojava.Parser: whiteSpace() :: 3
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5: org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$anonfun$$$outer() :: 3
org.kiama.example.oberon0.drivers.A3$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.til.AST.Read: <init>(i: org.kiama.example.til.AST.Id) :: 3
org.kiama.example.iswim.compiler.Parser: keyword(k: String) :: 3
org.kiama.example.oberon0.L4.source.FieldExp: base() :: 3
org.kiama.example.oberon0.L0.c.CNeExp: productPrefix() :: 3
org.kiama.example.iswim.compiler.Syntax.Assign: <init>(r: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 3
org.kiama.example.picojava.AbstractSyntax.Dot: <init>(ObjectReference: org.kiama.example.picojava.AbstractSyntax.Access,IdnUse: org.kiama.example.picojava.AbstractSyntax.IdnUse) :: 3
org.kiama.example.lambda3.AST$SubstQuery: execute() :: 3
org.kiama.example.oberon0.drivers.A2a$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.lambda2.ParEagerSubst.$anonfun: <init>() :: 3
org.kiama.example.iswim.driver.Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.lambda2.Par: subsVar() :: 3
org.kiama.example.json.Driver: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L0.c.CLtExp: hashCode() :: 3
org.kiama.example.oberon0.drivers.A2bTests: success(Ljava/lang/Object;) :: 3
org.kiama.example.lambda3.AST$FreshQuery: execute() :: 3
org.kiama.util.ParserUtilitiesTests.Tup6: productPrefix() :: 3
org.kiama.rewriting.Rewriter$$anonfun$map$1$$anonfun$applyOrElse$2: org$kiama$rewriting$Rewriter$$anonfun$$anonfun$$$outer() :: 3
org.kiama.example.til.TIL2_1Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.oberon0.L0.c.CEqExp: productPrefix() :: 3
org.kiama.util.TransformerTests: $init$() :: 3
org.kiama.example.lambda3.LambdaTests.$anonfun: apply() :: 3
org.kiama.example.til.TIL2_1Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.oberon0.L2.TypeAnalyser: $init$() :: 3
org.kiama.example.oberon0.L0.source.SumExpression: fixity() :: 3
org.kiama.output.Postfix: productPrefix() :: 3
org.kiama.example.oberon0.L0.c.CUnaryExpression: fixity() :: 3
org.kiama.example.oberon0.L0.c.COrExp: productPrefix() :: 3
org.kiama.example.til.TIL1_1Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.prolog.SyntaxAnalysis: rep1sep(Lscala/Function0;Lscala/Function0;) :: 3
org.kiama.example.oberon0.L0.c.CGtExp: hashCode() :: 3
org.kiama.example.oberon0.base.source.ModuleDecl$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.lambda2.ParLazy: subsVar() :: 3
org.kiama.example.lambda3.AST$FreeNamesQuery: execute() :: 3
org.kiama.example.lambda3.AST$SubstQuery$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.iswim.compiler.Syntax.Equal: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 3
org.kiama.example.picojava.Parser: name() :: 3
org.kiama.example.oberon0.L2.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 3
org.kiama.example.picojava.Parser: block() :: 3
org.kiama.example.json.ParsingTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.iswim.secd.SECDBase$ExceptionValue: pos() :: 3
org.kiama.example.lambda2.AST$Opn$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.obr.SyntaxAnalysis: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.util.RegexParserTests: failParseError(f: RegexParserTests.this.Error) :: 3
org.kiama.example.oberon0.drivers.A2bTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.util.TestCompiler.$anonfun: <init>() :: 3
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1: org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer() :: 3
org.kiama.example.til.TIL1_1Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.obr.SyntaxAnalysis: rep1sep(Lscala/Function0;Lscala/Function0;) :: 3
org.kiama.example.oberon0.L0.c.CAddExp: productPrefix() :: 3
org.kiama.example.iswim.secd.BooleanOps$FalseValue: org$kiama$example$iswim$secd$BooleanOps$FalseValue$$$outer() :: 3
org.kiama.example.oberon0.L0.c.CSubExp: hashCode() :: 3
org.kiama.example.oberon0.drivers.A3Phases: langlevel() :: 3
org.kiama.example.lambda3.AST$EvalQuery: execute() :: 3
org.kiama.example.iswim.secd.SECDBase.$anon: <init>() :: 3
org.kiama.attribution.Attributable: parent_=(x$1: org.kiama.attribution.Attributable) :: 3
org.kiama.example.iswim.driver.Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.iswim.compiler.Syntax.Remainder: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 3
org.kiama.util.TestCompiler: filetests$default$6() :: 3
org.kiama.example.lambda3.LambdaTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: <init>() :: 3
org.kiama.example.oberon0.L3.c.CAddrType: basetype() :: 3
org.kiama.rewriting.NominalRewriter.$anonfun: apply() :: 3
org.kiama.output.PrettyPrinter.$anonfun: apply(p: Int,dq: scala.collection.immutable.Queue[Int, Boolean => Int => String) :: 3
org.kiama.example.oberon0.drivers.A2aPhases: langlevel() :: 3
org.kiama.example.oberon0.drivers.A4Tests: success(Ljava/lang/Object;) :: 3
org.kiama.example.til.TransformingMain: $init$() :: 3
org.kiama.example.imperative.Imperative$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.iswim.secd.SECDBase.App: <init>() :: 3
org.kiama.example.picojava.tests.ParserTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L3.c.CVoidType: productPrefix() :: 3
org.kiama.example.iswim.tests.SemanticAnalysisTests: rep(Lscala/Function0;) :: 3
org.kiama.example.oberon0.drivers.A2a$: success(Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.drivers.A2bTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.picojava.Parser: var_decl() :: 3
org.kiama.util.ParserUtilitiesTests.Node: hashCode() :: 3
org.kiama.example.obr.RISCEncoder$$anonfun$encode$4: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.drivers.A1Tests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.iswim.secd.ConversionOps.ToString: hashCode() :: 3
org.kiama.example.til.TIL2_2Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.oberon0.L4.c.CRecordType: productPrefix() :: 3
org.kiama.example.oberon0.L0.c.CModExp: hashCode() :: 3
org.kiama.example.oberon0.L3.c.CAddrType: productPrefix() :: 3
org.kiama.example.oberon0.L3.TypeAnalyser: numparams() :: 3
org.kiama.example.iswim.secd.BooleanOps.PushTrue: <init>() :: 3
org.kiama.example.oberon0.L0.TypeAnalyser: $init$() :: 3
org.kiama.example.til.TIL2_3Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.util.ParserUtilitiesTests.Node: productPrefix() :: 3
org.kiama.example.oberon0.L3.source.PrettyPrinter: $init$() :: 3
org.kiama.example.til.TIL2_2Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.example.oberon0.L3.NameAnalyser: $init$() :: 3
org.kiama.util.ParserUtilitiesTests.Tup2: productPrefix() :: 3
org.kiama.example.iswim.secd.IOOps.Read: productPrefix() :: 3
org.kiama.example.til.TIL2_3Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 3
org.kiama.rewriting.Rewriter: everywherebu(s: ) :: 3
org.kiama.util.ParserUtilities: constToTupleFunction4([A, B, C, D, R]r: A, B, C, D) :: 3
org.kiama.example.oberon0.L2.source.CaseStatement$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.picojava.AbstractSyntax$ClassDecl$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.lambda3.Parser: exp() :: 3
org.kiama.attribution.Attributable: hasChildren() :: 3
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 3
org.kiama.util.RegexParserTests: failInputEnd(in: scala.util.parsing.input.Reader[Char]) :: 3
org.kiama.example.iswim.secd.ConversionOps.ToInt: hashCode() :: 3
org.kiama.example.dataflow.DataflowAST$If$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 3
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) :: 3
org.kiama.example.oberon0.L3.TypeAnalyser: exptypeDef() :: 3
org.kiama.example.oberon0.L3.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 3
org.kiama.example.oberon0.drivers.A2b$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.oberon0.L4.source.IndexExp: exp() :: 3
org.kiama.example.oberon0.drivers.A1$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.lambda.Lambda$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.json.Driver: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.attribution.Attributable: lastChild([T]) :: 3
org.kiama.example.transform.Driver: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 3
org.kiama.example.lambda.LambdaTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 3
org.kiama.example.obr.SyntaxAnalysis.Pos: hashCode() :: 3
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x3: Any) :: 2
org.kiama.example.prolog.SyntaxAnalysis: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$41: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L4.source.FieldExp: fieldname() :: 2
org.kiama.example.oberon0.L0.source.LeExp: right() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.lambda2.AST.Let: <init>(i: String,t: org.kiama.example.lambda2.AST.Type,e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp) :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$1$$anonfun$apply$11: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.til.TIL2_2: transform(ast: org.kiama.example.til.AST.Program) :: 2
org.kiama.rewriting.Rewriter$$anonfun$map$1$$anonfun$applyOrElse$2$$anonfun$apply$1: org$kiama$rewriting$Rewriter$$anonfun$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L4.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) :: 2
org.kiama.util.ReaderConsole: $init$() :: 2
org.kiama.example.iswim.secd.SECDBase$ClosureValue: org$kiama$example$iswim$secd$SECDBase$ClosureValue$$$outer() :: 2
org.kiama.example.oberon0.drivers.A2aTests: whiteSpace() :: 2
org.kiama.example.oberon0.drivers.A3Tests: whiteSpace() :: 2
org.kiama.example.til.TIL2_3Tests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.lambda3.LambdaTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.oberon0.drivers.A2bTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.util.ParserUtilitiesTests.Tup3: n3() :: 2
org.kiama.example.lambda2.Parser$$anonfun$exp0$1: org$kiama$example$lambda2$Parser$$anonfun$$$outer() :: 2
org.kiama.example.til.TIL2_3Main$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.util.ParserUtilities$$anonfun$constrainedInt$1: org$kiama$util$ParserUtilities$$anonfun$$$outer() :: 2
org.kiama.rewriting.NominalRewriter$$anonfun$subst$1: org$kiama$rewriting$NominalRewriter$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.drivers.A1Phases: tasklevel() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$34: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.source.ModExp: right() :: 2
org.kiama.util.ParserUtilitiesTests.Tup4: n2() :: 2
org.kiama.example.oberon0.L0.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 2
org.kiama.example.lambda3.Lambda$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$18: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.picojava.benchmark.PicoJavaBenchmark: result_=(x$1: Int) :: 2
org.kiama.example.prolog.Interpreter.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.oberon0.L0.TypeAnalyser: idntypeDef() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$9: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazy: letDrop() :: 2
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.til.TIL1_1Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.oberon0.L0.SymbolTable.UserType: ident() :: 2
org.kiama.example.til.TIL2_3Main$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.util.ParserUtilities: constToTupleFunction5([A, B, C, D, E, R]r: A, B, C, D, E) :: 2
org.kiama.example.lambda2.ParLazySubst.$anonfun: apply() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$37: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazyShare.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 2
org.kiama.example.lambda3.Parser$$anonfun$factor$1: org$kiama$example$lambda3$Parser$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilities: parseResultToTuple5([A, B, C, D, E]p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E]]) :: 2
org.kiama.example.iswim.tests.ParserTests: NoSuccess() :: 2
org.kiama.example.oberon0.L0.TypeAnalyser: tipeDef() :: 2
org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply() :: 2
org.kiama.example.oberon0.L0.source.OrExp: left() :: 2
org.kiama.example.oberon0.L0.source.Assignment: desig() :: 2
org.kiama.example.oberon0.drivers.A3$: NoSuccess() :: 2
org.kiama.util.ParserUtilities: err(msg: String) :: 2
org.kiama.example.oberon0.drivers.A3$: repsep(Lscala/Function0;Lscala/Function0;) :: 2
org.kiama.example.oberon0.L4.source.FieldIdn: ident() :: 2
org.kiama.rewriting.Rewriter$Strategy: compose(Lscala/Function1;) :: 2
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$34: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests.Tup5: n4() :: 2
org.kiama.example.imperative.PrettyPrinter$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$13: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$16: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$35: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.rewriting.Rewriter$$anon$14: org$kiama$rewriting$Rewriter$$anon$$$outer() :: 2
org.kiama.example.lambda2.Parser: number() :: 2
org.kiama.example.lambda.LambdaTests: evalTo(term: String,result: org.kiama.example.lambda.AST.Exp) :: 2
org.kiama.rewriting.NominalRewriter.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.iswim.secd.ExceptionHandler: handler() :: 2
org.kiama.example.json.PrettyPrinter$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.prolog.Subst$$anonfun$1: org$kiama$example$prolog$Subst$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x6: Any) :: 2
org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement) :: 2
org.kiama.example.lambda2.AST.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1$$anonfun$apply$3: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1$$anonfun$apply$1: org$kiama$example$oberon0$L3$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.lambda3.Parser: variable() :: 2
org.kiama.example.iswim.compiler.Syntax.Val: <init>(e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literal$1: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.lambda3.LambdaTests$$anonfun$mkprinttest$1: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2bTests: NoSuccess() :: 2
org.kiama.example.oberon0.L1.source.IfStatement: elsifs() :: 2
org.kiama.example.iswim.tests.ParserTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x5: Any) :: 2
org.kiama.example.picojava.benchmark.PicoJavaBenchmark: createAst(subtree: org.kiama.example.picojava.AbstractSyntax.ClassDecl) :: 2
org.kiama.util.ParserUtilitiesTests.Tup6: n3() :: 2
org.kiama.example.iswim.secd.RecordOps$RecordValue: org$kiama$example$iswim$secd$RecordOps$RecordValue$$$outer() :: 2
org.kiama.example.dataflow.LivenessImpl.$anonfun: apply(s: org.kiama.example.dataflow.DataflowAST.Stm) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$10: apply$mcV$sp() :: 2
org.kiama.example.obr.SyntaxAnalysis: <init>() :: 2
org.kiama.machine.Machine.ParamUpdater: state() :: 2
org.kiama.attribution.Attribution$CachedParamAttribute: compose(Lscala/Function1;) :: 2
org.kiama.example.oberon0.L1.c.CIfElseStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement) :: 2
org.kiama.example.iswim.tests.ParserTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$29: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Syntax.MkRef: <init>(e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3$$anonfun$apply$7: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilitiesTests.Tup6: n6() :: 2
org.kiama.rewriting.Rewriter: all(s: ) :: 2
org.kiama.example.oberon0.L3.SymbolTable$Procedure: org$kiama$example$oberon0$L3$SymbolTable$Procedure$$$outer() :: 2
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) :: 2
org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: tipe() :: 2
org.kiama.rewriting.NominalAST.GenName: reset() :: 2
org.kiama.example.oberon0.L2.Lifter.$anonfun: apply() :: 2
org.kiama.output.PrettyPrinter$Doc: compose(Lscala/Function1;) :: 2
org.kiama.example.lambda2.LazySubst.$anonfun: apply() :: 2
org.kiama.output.PrettyPrinter.$anonfun.$anonfun: apply(r: Int) :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$10: apply$mcV$sp() :: 2
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$14: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.base.Parser$$anonfun$whitespaceParser$1: org$kiama$example$oberon0$base$Parser$$anonfun$$$outer() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$14: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$17: apply$mcV$sp() :: 2
org.kiama.example.oberon0.base.Driver: resetflags() :: 2
org.kiama.example.lambda.LambdaTests.$anonfun.$anonfun: <init>() :: 2
org.kiama.example.lambda2.Reduce.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.lambda2.ReduceSubst.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests: not(Lscala/Function0;) :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.base.Driver: checkargs(args: Array[String],emitter: org.kiama.util.Emitter) :: 2
org.kiama.example.oberon0.L0.SymbolTable$BuiltinType: org$kiama$example$oberon0$L0$SymbolTable$BuiltinType$$$outer() :: 2
org.kiama.machine.Machine: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.oberon0.drivers.A2a$: repsep(Lscala/Function0;Lscala/Function0;) :: 2
org.kiama.example.lambda2.AST.$anonfun: isDefinedAt(x5: Any) :: 2
org.kiama.example.oberon0.L0.Parser: declarationsDef() :: 2
org.kiama.example.lambda2.Parser: exp1() :: 2
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) :: 2
org.kiama.output.RightAssoc: hashCode() :: 2
org.kiama.example.oberon0.L0.source.NegExp: exp() :: 2
org.kiama.example.til.TIL2_2Tests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$11: apply$mcV$sp() :: 2
org.kiama.output.Infix: <init>(side: org.kiama.output.Side) :: 2
org.kiama.example.oberon0.drivers.A4Tests: repsep(Lscala/Function0;Lscala/Function0;) :: 2
org.kiama.example.til.TIL2_2Tests.$anonfun: apply() :: 2
org.kiama.example.oberon0.L0.source.AndExp: right() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.prolog.Main$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.oberon0.drivers.A3$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.oberon0.base.Driver: driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 2
org.kiama.example.oberon0.L2.Lifter: $init$() :: 2
org.kiama.example.oberon0.L4.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 2
org.kiama.attribution.Attributable.$anonfun: <init>() :: 2
org.kiama.example.lambda2.Parser: ttype0() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x13: Any) :: 2
org.kiama.example.iswim.secd.StackOps.Pop: <init>(n: Int) :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.example.iswim.driver.PrettyPrinter$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.oberon0.drivers.A3Tests: repsep(Lscala/Function0;Lscala/Function0;) :: 2
org.kiama.util.ParserUtilitiesTests.$anonfun: <init>() :: 2
org.kiama.example.til.TIL1_1Tests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.lambda.Parser: variable() :: 2
org.kiama.example.oberon0.drivers.A3Tests: not(Lscala/Function0;) :: 2
org.kiama.util.ParserUtilities: parseResultToTuple6([A, B, C, D, E, F]p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E],F]]) :: 2
org.kiama.attribution.Decorators$Chain: compose(Lscala/Function1;) :: 2
org.kiama.example.iswim.compiler.Syntax.LessEq: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.til.TIL2_2Tests.$anonfun.$anonfun: <init>() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests: NoSuccess() :: 2
org.kiama.example.json.PrettyPrinter$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.oberon0.L0.source.AndExp: left() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$11: apply$mcV$sp() :: 2
org.kiama.example.til.TIL2_3: transform(ast: org.kiama.example.til.AST.Program) :: 2
org.kiama.example.oberon0.base.c.CIntExp: <init>(v: Int) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$12: apply$mcV$sp() :: 2
org.kiama.example.picojava.AbstractSyntax.VarDecl: <init>(Type: org.kiama.example.picojava.AbstractSyntax.Access,Name: String) :: 2
org.kiama.example.oberon0.L0.source.NeExp: left() :: 2
org.kiama.example.lambda2.ReduceSubst.$anonfun: isDefinedAt(x4: Any) :: 2
org.kiama.util.ParserUtilities: parseResultToTuple3([A, B, C]p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C]]) :: 2
org.kiama.example.lambda2.LambdaTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.picojava.Main$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.lambda2.EagerSubst.$anonfun: apply() :: 2
org.kiama.example.oberon0.drivers.A2a$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.lambda2.Lambda$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.oberon0.drivers.A4Tests: NoSuccess() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$15: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2b$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) :: 2
org.kiama.example.oneohonecompanies.Precedence.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.oberon0.L0.source.DivExp: left() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests: whiteSpace() :: 2
org.kiama.util.Messaging.Record: pos() :: 2
org.kiama.example.oberon0.L0.source.PrettyPrinter: idlistToDoc(ids: List[org.kiama.example.oberon0.base.source.IdnDef]) :: 2
org.kiama.output.PrettyPrinterBase: hcat(ds: Seq[PrettyPrinterBase.this.Doc]) :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$38: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L3.TypeAnalyser: $init$() :: 2
org.kiama.example.lambda.LambdaTests.$anonfun.$anonfun: apply(t: Any) :: 2
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.util.ParserUtilitiesTests.Tup5: n1() :: 2
org.kiama.example.oberon0.base.c.CArrayType: elemtype() :: 2
org.kiama.output.PrettyPrinter$Doc: org$kiama$output$PrettyPrinter$Doc$$$outer() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.oberon0.L0.source.GeExp: left() :: 2
org.kiama.example.oberon0.L2.Parser: keywordStrings() :: 2
org.kiama.rewriting.Rewriter.$anonfun: isDefinedAt(x6: Any) :: 2
org.kiama.example.dataflow.Driver: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.oberon0.L2.Desugarer$$anonfun$desugarFor$1$$anonfun$1: apply$mcI$sp() :: 2
org.kiama.output.LeftAssoc: hashCode() :: 2
org.kiama.example.oberon0.L2.Desugarer.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$12: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.source.AddExp: right() :: 2
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$$anonfun$2: apply$mcVI$sp(I) :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecstmt$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$18: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A3$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.til.AST.Str: <init>(s: String) :: 2
org.kiama.example.lambda.LambdaTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.output.PrettyPrinterBase: lsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc) :: 2
org.kiama.util.Emitter: emit(any: Any) :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$6: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L4.TypeAnalyser: exptypeDef() :: 2
org.kiama.util.ParserUtilitiesTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.iswim.compiler.Syntax.Let: <init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.oberon0.drivers.A2bPhases: tasklevel() :: 2
org.kiama.example.oberon0.L1.source.IfStatement: cond() :: 2
org.kiama.example.til.TIL2_3Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$19: apply$mcV$sp() :: 2
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$$anonfun$3$$anonfun$apply$1: apply$mcVI$sp(I) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$13: apply$mcV$sp() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Syntax.StringVal: <init>(s: String) :: 2
org.kiama.example.oberon0.base.TestDriver: sanitise(s: String) :: 2
org.kiama.example.oberon0.drivers.A4Phases: tasklevel() :: 2
org.kiama.example.picojava.tests.ParserTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.lambda2.LambdaTests: canonise(x: org.kiama.example.lambda2.AST.Exp,d: Int,e: scala.collection.immutable.Map[String,String]) :: 2
org.kiama.example.lambda2.ParLazy: letLift() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.example.iswim.compiler.SemanticAnalysis: $init$() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$10: apply$mcV$sp() :: 2
org.kiama.example.imperative.Parser: start() :: 2
org.kiama.output.PrettyPrinterBase: comma() :: 2
org.kiama.util.ParserUtilitiesTests.Tup5: <init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node) :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$12: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2b$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.picojava.Parser$$anonfun$name$1: org$kiama$example$picojava$Parser$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L2.Desugarer.$anonfun: apply() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L0.NameAnalyser: envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 2
org.kiama.example.oberon0.drivers.A2aTests: NoSuccess() :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A1$: not(Lscala/Function0;) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$16: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ErrorTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$2: org$kiama$example$lambda$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.Parser$$anonfun$ttype0$1: org$kiama$example$lambda2$Parser$$anonfun$$$outer() :: 2
org.kiama.example.picojava.TypeAnalysis.$anonfun: apply(typedecl: org.kiama.example.picojava.AbstractSyntax.TypeDecl) :: 2
org.kiama.example.lambda.Parser: integer() :: 2
org.kiama.util.ParserUtilitiesTests.Tup4: <init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node) :: 2
org.kiama.example.oberon0.L3.Parser: keywordStrings() :: 2
org.kiama.machine.Machine: linebreak() :: 2
org.kiama.example.oberon0.drivers.A1Tests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A1$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.lambda2.AST.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.oberon0.L3.SymbolTable: isVariable(e: SymbolTable.this.Entity) :: 2
org.kiama.example.iswim.compiler.Syntax.Divide: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$19: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.SymbolTable$Variable: org$kiama$example$oberon0$L0$SymbolTable$Variable$$$outer() :: 2
org.kiama.example.oberon0.drivers.A1Phases: artefact() :: 2
org.kiama.example.oberon0.drivers.A2bTests: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.oberon0.drivers.A1Tests: linebreak() :: 2
org.kiama.example.dataflow.Optimise.$anonfun.$anonfun.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.oberon0.drivers.A3Tests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun: isDefinedAt(x3: Any) :: 2
org.kiama.rewriting.Rewriter$$anon$15: org$kiama$rewriting$Rewriter$$anon$$$outer() :: 2
org.kiama.example.oberon0.drivers.A1Tests: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.lambda2.LambdaTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.til.TIL1_1Main$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.lambda3.Parser: name() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.example.obr.SyntaxAnalysis: success(Ljava/lang/Object;) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$14: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$20: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.Desugarer: $init$() :: 2
org.kiama.output.PrettyPrinterBase: brackets(d: PrettyPrinterBase.this.Doc) :: 2
org.kiama.example.oberon0.L0.source.SubExp: left() :: 2
org.kiama.example.til.AST.Ne: <init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 2
org.kiama.example.oneohonecompanies.Total.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.output.PrettyPrinterBase: braces(d: PrettyPrinterBase.this.Doc) :: 2
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$3: org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda3.LambdaTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.dataflow.Optimise.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.lambda2.Parser: exp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.til.TIL2_1Tests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.iswim.secd.SECDBase: dump() :: 2
org.kiama.example.lambda2.LambdaTests: assertPrettyS(term: String,result: String) :: 2
org.kiama.rewriting.Rewriter.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.oberon0.drivers.A4Tests: not(Lscala/Function0;) :: 2
org.kiama.example.lambda2.Lambda$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.lambda.Evaluator: normal() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$23: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.lambda2.Parser: idn() :: 2
org.kiama.example.oberon0.drivers.A3$: whiteSpace() :: 2
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) :: 2
org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$17: apply$mcV$sp() :: 2
org.kiama.example.til.TIL2_2Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.example.til.TIL1_1Tests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$11: apply$mcV$sp() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.til.TIL1_1Tests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2a$: linebreak() :: 2
org.kiama.example.picojava.Parser: $init$() :: 2
org.kiama.util.ReaderConsole: readLine(prompt: String) :: 2
org.kiama.example.lambda.LambdaTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) :: 2
org.kiama.example.lambda2.AST.$anonfun: isDefinedAt(x4: Any) :: 2
org.kiama.example.oberon0.drivers.A1Tests: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.picojava.Parser: parser() :: 2
org.kiama.example.til.TIL1_1Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$18: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$24: apply$mcV$sp() :: 2
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$5: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$$anonfun$1: apply$mcVI$sp(I) :: 2
org.kiama.example.til.TIL2_3.$anonfun: apply() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.oberon0.drivers.A2aTests: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun: isDefinedAt(x8: Any) :: 2
org.kiama.example.json.ParsingTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.util.TestCompiler: sanitise(s: String) :: 2
org.kiama.example.lambda.Generator: arbVar() :: 2
org.kiama.machine.Machine.ParamState: apply(t: T) :: 2
org.kiama.example.oberon0.drivers.A2aTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests.Tup4: n1() :: 2
org.kiama.example.prolog.Subst.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$15: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazyUpdate.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests: not(Lscala/Function0;) :: 2
org.kiama.example.oberon0.L2.Desugarer.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.obr.RISCEncoder.$anonfun: apply(i: org.kiama.example.obr.RISCTree.Item) :: 2
org.kiama.example.json.ParsingTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.oberon0.drivers.A3$: linebreak() :: 2
org.kiama.example.oberon0.drivers.A2bPhases: artefact() :: 2
org.kiama.example.prolog.Main$: linebreak() :: 2
org.kiama.example.iswim.driver.PrettyPrinter$: linebreak() :: 2
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) :: 2
org.kiama.example.lambda.LambdaTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.lambda2.LazySubst$$anonfun$s$2: org$kiama$example$lambda2$LazySubst$$anonfun$$$outer() :: 2
org.kiama.rewriting.Rewriter.$anonfun: isDefinedAt(x5: Any) :: 2
org.kiama.example.lambda2.PrettyPrinter$: linebreak() :: 2
org.kiama.example.iswim.secd.ExceptionHandler$$anonfun$evalInst$1: org$kiama$example$iswim$secd$ExceptionHandler$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilitiesTests.Tup3: n2() :: 2
org.kiama.example.RISC.RISC$$anonfun$execute$2: apply$mcVI$sp(I) :: 2
org.kiama.example.lambda2.LambdaTests: assertPrettyE(term: org.kiama.example.lambda2.AST.Exp,result: String) :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.json.ParsingTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.example.obr.SyntaxAnalysis: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$21: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.prolog.SyntaxAnalysis: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests: whiteSpace() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.attribution.Attribution: childAttr([T <: org.kiama.attribution.Attributable, U]f: T => org.kiama.attribution.Attributable => U) :: 2
org.kiama.example.oberon0.L0.source.GtExp: left() :: 2
org.kiama.example.til.TIL1_1Tests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.til.TIL2_1Tests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.attribution.Attributable: index_=(x$1: Int) :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L3.source.Call: idnuse() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$12: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazy: letLetRen() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Syntax.MatchClause: <init>(p: org.kiama.example.iswim.compiler.Syntax.Pattern,e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$4: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 2
org.kiama.example.imperative.PrettyPrinter$: linebreak() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$25: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$10: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.output.PrettyPrinterBase: colon() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.example.oberon0.base.TransformingDriver: processargs(args: List[String]) :: 2
org.kiama.example.til.TIL1_1Tests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$19: apply$mcV$sp() :: 2
org.kiama.example.til.TIL1_1Tests: n() :: 2
org.kiama.util.ParserUtilitiesTests.Tup3: <init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node) :: 2
org.kiama.example.oberon0.drivers.A2b$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.machine.Machine.State: _value() :: 2
org.kiama.example.lambda.LambdaTests: fail(Ljava/lang/String;) :: 2
org.kiama.util.ParserUtilitiesTests.Tup5: n3() :: 2
org.kiama.example.oberon0.base.c.CBlock: <init>(decls: List[org.kiama.example.oberon0.base.c.CDeclaration],stmts: List[org.kiama.example.oberon0.base.c.CStatement]) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$25: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.TypeAnalyser: deftypeDef() :: 2
org.kiama.example.oberon0.L2.Desugarer: $init$() :: 2
org.kiama.util.ParserUtilitiesTests.Tup4: n4() :: 2
org.kiama.example.iswim.tests.ParserTests: whiteSpace() :: 2
org.kiama.output.PrettyPrinter.$anonfun.$anonfun: apply(h: Boolean) :: 2
org.kiama.util.Messaging: messages() :: 2
org.kiama.example.oberon0.L2.NameAnalyser: rootconstexpDef() :: 2
org.kiama.example.lambda2.Parser$$anonfun$exp$1: org$kiama$example$lambda2$Parser$$anonfun$$$outer() :: 2
org.kiama.example.json.Driver: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.lambda3.LambdaTests$$anonfun$mkparsetest$1: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$10: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ReduceSubst: s() :: 2
org.kiama.util.ParserUtilitiesTests.Tup6: n2() :: 2
org.kiama.example.lambda3.Parser: query() :: 2
org.kiama.example.transform.Analysis$$anonfun$prio$1$$anonfun$apply$2$$anonfun$apply$1: apply$mcI$sp() :: 2
org.kiama.example.til.TIL1_1Tests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.util.Environments: Named() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$22: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun: isDefinedAt(x10: Any) :: 2
org.kiama.example.json.ParsingTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$16: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.util.StringEmitter: <init>() :: 2
org.kiama.example.til.TIL2_1Tests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L3.TypeAnalyser: parammode(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) :: 2
org.kiama.rewriting.Rewriter$Strategy: org$kiama$rewriting$Rewriter$Strategy$$$outer() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$1$$anonfun$apply$14: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$22: apply$mcV$sp() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$primstmt$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.output.PrettyPrinterBase: equal() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$13: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2a$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.imperative.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 2
org.kiama.example.oberon0.drivers.A1$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.til.TIL2_2Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.oberon0.drivers.A2a$: not(Lscala/Function0;) :: 2
org.kiama.example.oberon0.drivers.A2bTests: linebreak() :: 2
org.kiama.example.json.ParsingTests$$anonfun$9: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests.Tup2: <init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node) :: 2
org.kiama.output.PrettyPrinterBase: anyToPrettyPrintable(a: Any) :: 2
org.kiama.attribution.Attributable: prev_=(x$1: org.kiama.attribution.Attributable) :: 2
org.kiama.example.oberon0.L0.NameAnalyser: entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x5: Any) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$9: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) :: 2
org.kiama.example.oberon0.base.TransformingDriver: $init$() :: 2
org.kiama.output.ParenPrettyPrinter: bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) :: 2
org.kiama.util.ParserUtilitiesTests: literal(Ljava/lang/String;) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$26: apply$mcV$sp() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$throwtoexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$whitespaceParser$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$11: apply$mcV$sp() :: 2
org.kiama.example.lambda2.Parser: exp0() :: 2
org.kiama.example.lambda2.LambdaTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.iswim.secd.SECDBase$PrimValue: org$kiama$example$iswim$secd$SECDBase$PrimValue$$$outer() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.lambda3.Lambda$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.output.Prefix: hashCode() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$14: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.SymbolTable: isVariable(e: SymbolTable.this.Entity) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$20: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A4Phases: artefact() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun: isDefinedAt(x4: Any) :: 2
org.kiama.machine.Machine: name() :: 2
org.kiama.example.lambda3.LambdaTests: expectQuery([T]str: String,result: T) :: 2
org.kiama.example.oberon0.drivers.A3Tests: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.oberon0.L2.Desugarer.$anonfun.$anonfun: apply() :: 2
org.kiama.example.oberon0.L0.source.LeExp: left() :: 2
org.kiama.example.oberon0.drivers.A3Phases: tasklevel() :: 2
org.kiama.example.oberon0.L0.Desugarer: uniquifyNames(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 2
org.kiama.example.iswim.tests.ParserTests: not(Lscala/Function0;) :: 2
org.kiama.example.til.TIL2_2Tests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x12: Any) :: 2
org.kiama.example.json.ParsingTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.example.json.SyntaxAnalysis: parser() :: 2
org.kiama.example.dataflow.Parser: parser() :: 2
org.kiama.example.lambda.Parser.$anonfun: apply() :: 2
org.kiama.example.lambda2.Evaluator: reducesinlambdas() :: 2
org.kiama.example.til.TIL2_1Tests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.util.Compiler: process(ast: T,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 2
org.kiama.example.lambda2.Reduce.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.util.Messaging.Record: message() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$29: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$23: apply$mcV$sp() :: 2
org.kiama.util.CompilerTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$12: org$kiama$example$oberon0$L4$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.til.TIL2_1Main$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.lambda.AST.Var: <init>(x: String) :: 2
org.kiama.example.til.TIL2_1Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$17: apply$mcV$sp() :: 2
org.kiama.util.CompilerTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 2
org.kiama.output.PrettyPrinterBase: vsep(ds: Seq[PrettyPrinterBase.this.Doc]) :: 2
org.kiama.util.ParserUtilitiesTests.Tup6: n5() :: 2
org.kiama.example.oberon0.L0.source.NotExp: exp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.example.iswim.driver.Main$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.til.TIL1_1$$anonfun$if_statement$4: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 2
org.kiama.util.CompilerBase: compile(args: Array[String],console: org.kiama.util.Console) :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.lambda2.Parser: ttype() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x7: Any) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$2: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 2
org.kiama.output.PrettyPrinterBase.DocOps: </>(e: PrettyPrinterBase.this.Doc) :: 2
org.kiama.example.oberon0.drivers.A4Tests: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.output.PrettyPrinterBase: value(v: Any) :: 2
org.kiama.example.oberon0.L0.SymbolTable: defenvPairs() :: 2
org.kiama.example.oberon0.L0.source.OrExp: right() :: 2
org.kiama.example.oberon0.drivers.A1Tests: whiteSpace() :: 2
org.kiama.example.oberon0.drivers.A2aTests: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$11: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2aPhases: tasklevel() :: 2
org.kiama.example.lambda2.LambdaTests: canons(d: Int,e: scala.collection.immutable.Map[String,String]) :: 2
org.kiama.example.picojava.tests.ErrorTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.machine.Machine.ParamUpdater: =:=(u: U) :: 2
org.kiama.output.NonAssoc: hashCode() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$18: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A3$: not(Lscala/Function0;) :: 2
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.til.TIL2_2Main$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$21: apply$mcV$sp() :: 2
org.kiama.attribution.Attribution.$anonfun: apply(t: T) :: 2
org.kiama.example.oberon0.L3.SymbolTable$Parameter: org$kiama$example$oberon0$L3$SymbolTable$Parameter$$$outer() :: 2
org.kiama.example.oberon0.drivers.A2aTests: repsep(Lscala/Function0;Lscala/Function0;) :: 2
org.kiama.example.oberon0.drivers.A3Tests: NoSuccess() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.attribution.Attributable.$anonfun: apply() :: 2
org.kiama.example.oberon0.drivers.A2aPhases: artefact() :: 2
org.kiama.output.PrettyPrinterBase: dot() :: 2
org.kiama.util.ParserUtilities: failure(msg: String) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.output.PrettyPrinterBase: dquotes(d: PrettyPrinterBase.this.Doc) :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilitiesTests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$15: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$15: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.source.AddExp: left() :: 2
org.kiama.example.lambda2.Par.$anonfun.$anonfun: apply() :: 2
org.kiama.util.ParserUtilitiesTests.Tup6: <init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node,n6: ParserUtilitiesTests.this.Node) :: 2
org.kiama.example.til.TIL2_2Tests: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.oberon0.drivers.A2b$: NoSuccess() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$27: apply$mcV$sp() :: 2
org.kiama.example.til.TIL1_1$$anonfun$primary$1: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.AST.$anonfun: isDefinedAt(x7: Any) :: 2
org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 2
org.kiama.example.til.TIL2_1Tests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ReduceSubst.$anonfun: isDefinedAt(x3: Any) :: 2
org.kiama.example.til.TIL2_1Tests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L2.Lifter.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.oberon0.L0.SymbolTable$IntegerValue: org$kiama$example$oberon0$L0$SymbolTable$IntegerValue$$$outer() :: 2
org.kiama.rewriting.Rewriter: alltd(s: ) :: 2
org.kiama.example.oberon0.drivers.A4Tests: linebreak() :: 2
org.kiama.example.oberon0.drivers.A1$: NoSuccess() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$24: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazy$$anonfun$letOpn$1$$anonfun$applyOrElse$6$$anonfun$apply$4: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L0.Parser: lhsDef() :: 2
org.kiama.example.picojava.TypeAnalysis.$anonfun: apply(c: org.kiama.example.picojava.AbstractSyntax.ClassDecl) :: 2
org.kiama.attribution.Attributable: _children() :: 2
org.kiama.example.lambda.Parser$$anonfun$factor$1: org$kiama$example$lambda$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda3.Parser: integer() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.example.lambda.Lambda$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.json.ParsingTests$$anonfun$18: apply$mcV$sp() :: 2
org.kiama.util.Messaging: report(emitter: org.kiama.util.Emitter) :: 2
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(s: String) :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 2
org.kiama.example.json.ParsingTests$$anonfun$12: apply$mcV$sp() :: 2
org.kiama.example.prolog.Subst.$anonfun: apply() :: 2
org.kiama.example.iswim.secd.SECDBase$ExceptionValue: setPos(Lscala/util/parsing/input/Position;) :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$12: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$9: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2bTests: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.lambda2.EagerSubst$$anonfun$s$2: org$kiama$example$lambda2$EagerSubst$$anonfun$$$outer() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$19: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$16: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2aTests: linebreak() :: 2
org.kiama.rewriting.Rewriter: bottomup(s: ) :: 2
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1: org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.ReduceSubst.$anonfun: isDefinedAt(x6: Any) :: 2
org.kiama.example.oberon0.L0.source.MulExp: right() :: 2
org.kiama.example.json.SyntaxAnalysis: string() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$31: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2b$: whiteSpace() :: 2
org.kiama.example.iswim.secd.IntegerOps.Mult: <init>() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$22: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$25: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L1.source.IfStatement: block() :: 2
org.kiama.example.json.ParsingTests$$anonfun$10: apply$mcV$sp() :: 2
org.kiama.example.lambda.LambdaTests: generatorDrivenConfig() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.SymbolTable$Constant: org$kiama$example$oberon0$L0$SymbolTable$Constant$$$outer() :: 2
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$28: apply$mcV$sp() :: 2
org.kiama.util.CompilerTests.$anonfun: apply() :: 2
org.kiama.example.json.SyntaxAnalysis: jpair() :: 2
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1: org$kiama$example$lambda2$EagerSubst$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L0.SymbolTable$UserType: org$kiama$example$oberon0$L0$SymbolTable$UserType$$$outer() :: 2
org.kiama.example.oberon0.L0.source.NeExp: right() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.example.picojava.tests.ParserTests$$anonfun$9: apply$mcV$sp() :: 2
org.kiama.example.til.TIL2_2Tests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.rewriting.Rewriter$$anon$13: org$kiama$rewriting$Rewriter$$anon$$$outer() :: 2
org.kiama.example.oberon0.base.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 2
org.kiama.example.lambda2.Evaluators: evaluator() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x4: Any) :: 2
org.kiama.example.obr.Driver.$anonfun: apply(a: String) :: 2
org.kiama.example.iswim.secd.IntComparisonOps.LessThan: <init>() :: 2
org.kiama.output.PrettyPrinter.$anonfun.$anonfun: apply(c: Int, scala.collection.immutable.Queue[Int, Boolean => Int => String) :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x3: Any) :: 2
org.kiama.example.json.ParsingTests$$anonfun$13: apply$mcV$sp() :: 2
org.kiama.example.lambda.Evaluator.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.til.TIL2_1.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.lambda3.LambdaTests$$anonfun$mkvaluetest$1: apply$mcV$sp() :: 2
org.kiama.example.til.TIL2_1Tests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.example.iswim.secd.StackOps.Dup: <init>(n: Int) :: 2
org.kiama.example.lambda.Lambda$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.picojava.tests.ErrorTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.til.TIL2_3Tests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.oberon0.L0.source.MulExp: left() :: 2
org.kiama.example.picojava.tests.ErrorTests: fail(Ljava/lang/String;) :: 2
org.kiama.example.iswim.driver.Main$: not(Lscala/Function0;) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$26: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$9: apply$mcV$sp() :: 2
org.kiama.example.iswim.secd.HeapOps$RefValue: org$kiama$example$iswim$secd$HeapOps$RefValue$$$outer() :: 2
org.kiama.machine.Machine$State: org$kiama$machine$Machine$State$$$outer() :: 2
org.kiama.example.oberon0.drivers.A2b$: not(Lscala/Function0;) :: 2
org.kiama.example.json.PrettyPrinter$: linebreak() :: 2
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$19: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) :: 2
org.kiama.example.json.ParsingTests$$anonfun$14: apply$mcV$sp() :: 2
org.kiama.example.oberon0.base.TransformingDriver: resetflags() :: 2
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) :: 2
org.kiama.example.lambda.Generator.$anonfun: apply() :: 2
org.kiama.util.TestCompiler: dosanitisation() :: 2
org.kiama.example.til.TIL2_1Tests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$32: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.source.DivExp: right() :: 2
org.kiama.example.oberon0.L0.source.ModExp: left() :: 2
org.kiama.example.til.TIL2_2.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.json.ParsingTests$$anonfun$11: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$20: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.example.iswim.secd.SECDBase$ByteCode: setPos(Lscala/util/parsing/input/Position;) :: 2
org.kiama.example.lambda2.Parser$$anonfun$ttype$1: org$kiama$example$lambda2$Parser$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilitiesTests.Tup5: n5() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun: isDefinedAt(x11: Any) :: 2
org.kiama.example.oberon0.drivers.A1$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$8: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.AST.$anonfun: isDefinedAt(x3: Any) :: 2
org.kiama.example.oberon0.L0.source.LtExp: left() :: 2
org.kiama.machine.Machine$ScalarUpdate: org$kiama$machine$Machine$ScalarUpdate$$$outer() :: 2
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1: org$kiama$example$oberon0$L4$Parser$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.PrettyPrinter: pretty(t: org.kiama.example.lambda2.AST.Exp) :: 2
org.kiama.example.lambda2.Lambda$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$29: apply$mcV$sp() :: 2
org.kiama.example.json.ParsingTests$$anonfun$17: apply$mcV$sp() :: 2
org.kiama.attribution.Attributable.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x7: Any) :: 2
org.kiama.example.lambda2.PrettyPrinter$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.example.til.TIL1_1Main$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A3Phases: artefact() :: 2
org.kiama.rewriting.Rewriter.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.iswim.secd.BooleanOps.PushFalse: <init>() :: 2
org.kiama.util.ParserUtilities: result([T]v: ) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$23: apply$mcV$sp() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L2.Parser: statementDef() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests: NoSuccess() :: 2
org.kiama.example.oberon0.base.TransformingDriver: usageMessage() :: 2
org.kiama.example.til.TIL2_2Main$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 2
org.kiama.example.transform.Driver: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.util.StringEmitter: result() :: 2
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$22: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.imperative.Imperative$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.til.TIL2_2.$anonfun: apply() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$21: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A2bTests: whiteSpace() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$9: apply$mcV$sp() :: 2
org.kiama.example.lambda.Parser: idn() :: 2
org.kiama.example.iswim.driver.PrettyPrinter$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.oberon0.L0.c.CIdnExp: <init>(i: String) :: 2
org.kiama.util.ParserUtilitiesTests.Tup3: n1() :: 2
org.kiama.example.oberon0.L0.Parser: typedefDef() :: 2
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$7: org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.ReduceSubst.$anonfun: isDefinedAt(x2: Any) :: 2
org.kiama.example.oberon0.drivers.A4Tests: whiteSpace() :: 2
org.kiama.example.oberon0.drivers.A2aTests: not(Lscala/Function0;) :: 2
org.kiama.example.RISC.RISC$$anonfun$execute$1: apply$mcVI$sp(I) :: 2
org.kiama.output.PrettyPrinterBase.$anonfun: <init>() :: 2
org.kiama.example.oberon0.L0.SymbolTable$Module: org$kiama$example$oberon0$L0$SymbolTable$Module$$$outer() :: 2
org.kiama.util.ParserUtilities: parseResultToTuple4([A, B, C, D]p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D]]) :: 2
org.kiama.machine.Machine: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.json.ParsingTests$$anonfun$21: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply() :: 2
org.kiama.example.til.TIL2_2Tests.$anonfun.$anonfun: apply(ast: org.kiama.example.til.AST.Program) :: 2
org.kiama.example.oberon0.drivers.A4Tests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$30: apply$mcV$sp() :: 2
org.kiama.example.lambda2.Evaluators: mechanisms() :: 2
org.kiama.example.json.SyntaxAnalysis: jname() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$4: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$7: apply$mcV$sp() :: 2
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$28: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L3.SymbolTable$BuiltinProc: org$kiama$example$oberon0$L3$SymbolTable$BuiltinProc$$$outer() :: 2
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1: org$kiama$example$lambda2$ParLazySubst$$anonfun$$$outer() :: 2
org.kiama.example.iswim.tests.CodeGeneratorTests$$anonfun$6: apply$mcV$sp() :: 2
org.kiama.example.obr.SyntaxAnalysis: rep1(Lscala/Function0;) :: 2
org.kiama.example.til.TIL2_2Tests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.util.CompilerTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$2: org$kiama$example$lambda2$ParLazySubst$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$27: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$24: apply$mcV$sp() :: 2
org.kiama.machine.Machine.ParamUpdater: t() :: 2
org.kiama.example.oberon0.drivers.A3Tests: linebreak() :: 2
org.kiama.example.oberon0.base.Transformer: $init$() :: 2
org.kiama.example.til.TIL2_3Tests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.prolog.Interpreter.$anonfun: apply() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.util.TestCompiler: filetest(name: String,rp: String,console: org.kiama.util.Console,extra: String,cmd: Array[String],rt: String) :: 2
org.kiama.util.ParserUtilitiesTests.Tup2: n2() :: 2
org.kiama.example.iswim.secd.IntegerOps.Sub: <init>() :: 2
org.kiama.example.lambda2.AST.$anonfun: isDefinedAt(x6: Any) :: 2
org.kiama.example.til.TIL2_3.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.oberon0.drivers.A4Tests: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.oneohonecompanies.Cut.$anonfun.$anonfun.$anonfun: isDefinedAt(x1: Any) :: 2
org.kiama.example.iswim.tests.ParserTests$$anonfun$33: apply$mcV$sp() :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$3: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.til.TIL2_1: transform(ast: org.kiama.example.til.AST.Program) :: 2
org.kiama.example.json.ParsingTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.util.ParserUtilitiesTests.Tup5: n2() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L3.c.CDerefExp: exp() :: 2
org.kiama.example.imperative.PrettyPrinter$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.rewriting.Rewriter.Term: <init>() :: 2
org.kiama.machine.Machine.State: sname() :: 2
org.kiama.example.oberon0.L0.source.EqExp: right() :: 2
org.kiama.example.json.ParsingTests$$anonfun$22: apply$mcV$sp() :: 2
org.kiama.example.oberon0.base.TranslatingDriver: processargs(args: List[String]) :: 2
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$check$1: apply$mcVI$sp(I) :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$5: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda3.Parser: factor() :: 2
org.kiama.example.iswim.tests.ParserTests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.oberon0.L1.source.IfStatement: optelse() :: 2
org.kiama.attribution.Attribution$CachedParamAttribute: org$kiama$attribution$Attribution$CachedParamAttribute$$$outer() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$28: apply$mcV$sp() :: 2
org.kiama.rewriting.Rewriter.$anonfun: isDefinedAt(x7: Any) :: 2
org.kiama.example.oberon0.L0.source.EqExp: left() :: 2
org.kiama.machine.Machine$ParamState: org$kiama$machine$Machine$ParamState$$$outer() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$8: apply$mcV$sp() :: 2
org.kiama.example.iswim.tests.SemanticAnalysisTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration) :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$31: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ReduceSubst.$anonfun: isDefinedAt(x5: Any) :: 2
org.kiama.example.picojava.benchmark.PicoJavaBenchmark: inputs() :: 2
org.kiama.util.ParserUtilitiesTests.Tup4: n3() :: 2
org.kiama.example.til.TIL2_1Main$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.util.Positioned: setStart(p: scala.util.parsing.input.Position) :: 2
org.kiama.util.ParserUtilitiesTests.Tup6: n1() :: 2
org.kiama.example.prolog.Main$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.iswim.driver.Main$: NoSuccess() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.attribution.Attributable: next_=(x$1: org.kiama.attribution.Attributable) :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$5: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.util.CompilerTests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$1: org$kiama$example$lambda2$ParLazyShare$$anonfun$$$outer() :: 2
org.kiama.example.lambda.Parser: factor() :: 2
org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun: isDefinedAt(x4: Any) :: 2
org.kiama.util.CompilerTests$$anonfun$2$$anonfun$3: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$32: apply$mcV$sp() :: 2
org.kiama.example.lambda3.LambdaTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.lambda.LambdaTests: check(Lscala/Function1;Lscala/collection/Seq;Lorg/scalatest/prop/Configuration$PropertyCheckConfig;Lscala/Function1;Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Shrink;Lscala/Function1;) :: 2
org.kiama.example.oberon0.drivers.A3$: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.util.ParserUtilitiesTests.Tup6: n4() :: 2
org.kiama.output.PrettyPrinterBase: fold(ds: Seq[PrettyPrinterBase.this.Doc],f: PrettyPrinterBase.this.Doc, PrettyPrinterBase.this.Doc) :: 2
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$35: apply$mcV$sp() :: 2
org.kiama.example.lambda2.PrettyPrinter$: pretty(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$112: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilities: constToTupleFunction6([A, B, C, D, E, F, R]r: A, B, C, D, E, F) :: 2
org.kiama.example.imperative.Imperative$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.imperative.Parser$$anonfun$factor$1: org$kiama$example$imperative$Parser$$anonfun$$$outer() :: 2
org.kiama.example.json.ParsingTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 2
org.kiama.example.oberon0.base.Driver: usageMessage() :: 2
org.kiama.example.oberon0.base.c.CIntType: <init>() :: 2
org.kiama.example.oberon0.L0.c.CUnaryExpression: <init>() :: 2
org.kiama.example.oberon0.L0.source.GtExp: right() :: 2
org.kiama.example.json.ParsingTests$$anonfun$20: apply$mcV$sp() :: 2
org.kiama.example.iswim.secd.SECDBase$ByteCode: pos() :: 2
org.kiama.example.oberon0.L3.NameAnalyser: entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String) :: 2
org.kiama.example.lambda2.AST.Opn: <init>(e1: org.kiama.example.lambda2.AST.Exp,o: org.kiama.example.lambda2.AST.Op,e2: org.kiama.example.lambda2.AST.Exp) :: 2
org.kiama.example.oberon0.drivers.A2bTests: not(Lscala/Function0;) :: 2
org.kiama.example.oberon0.L0.NameAnalyser: envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 2
org.kiama.output.PrettyPrinterBase: hsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc) :: 2
org.kiama.attribution.AttributionBase$Attribute: compose(Lscala/Function1;) :: 2
org.kiama.example.iswim.compiler.Syntax.Pattern: <init>(ns: List[org.kiama.example.iswim.compiler.Syntax.Variable]) :: 2
org.kiama.example.lambda2.LambdaTests.$anonfun: apply(mech: String) :: 2
org.kiama.example.lambda2.ParEagerSubst.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 2
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1: org$kiama$example$lambda2$ParLazy$$anonfun$$$outer() :: 2
org.kiama.example.til.TIL2_1.$anonfun: apply() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$33: apply$mcV$sp() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$36: apply$mcV$sp() :: 2
org.kiama.example.oberon0.L0.source.GeExp: right() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$3: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$matchclause$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.example.lambda3.Parser: trans() :: 2
org.kiama.example.lambda2.LazySubst$$anonfun$s$1: org$kiama$example$lambda2$LazySubst$$anonfun$$$outer() :: 2
org.kiama.example.lambda.Parser: exp() :: 2
org.kiama.example.iswim.compiler.Syntax.Return: <init>(res: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.oberon0.drivers.A3Tests: group(Lorg/kiama/output/PrettyPrinterBase$DocOps;) :: 2
org.kiama.example.oberon0.drivers.A1$: whiteSpace() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$2: apply$mcV$sp() :: 2
org.kiama.util.ParserUtilitiesTests$$anonfun$5: apply$mcV$sp() :: 2
org.kiama.example.oberon0.drivers.A1Tests: not(Lscala/Function0;) :: 2
org.kiama.example.prolog.SemanticAnalysis$$anonfun$2$$anonfun$apply$1: apply$mcVI$sp(I) :: 2
org.kiama.example.oberon0.L0.source.LtExp: right() :: 2
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1$$anonfun$apply$7: org$kiama$example$oberon0$base$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.RewritingEvaluator: eval(exp: org.kiama.example.lambda2.AST.Exp) :: 2
org.kiama.rewriting.Rewriter$$anonfun$2: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 2
org.kiama.util.TestCompiler$$anonfun$filetest$1$1: apply$mcV$sp() :: 2
org.kiama.example.oberon0.base.source.Block: decls() :: 2
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$1: org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$$outer() :: 2
org.kiama.example.oberon0.drivers.A1$: linebreak() :: 2
org.kiama.example.til.TIL2_1Main$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.util.StringConsole: <init>(string: String) :: 2
org.kiama.example.iswim.driver.Main$: whiteSpace() :: 2
org.kiama.example.oberon0.L0.source.SubExp: right() :: 2
org.kiama.example.til.TIL2_3Tests$$anonfun$1: apply$mcV$sp() :: 2
org.kiama.example.iswim.secd.BooleanOps.Equals: <init>() :: 2
org.kiama.example.oberon0.drivers.A2a$: whiteSpace() :: 2
org.kiama.example.oberon0.L0.source.PrettyPrinter: blockToDoc$default$2() :: 2
org.kiama.example.oberon0.drivers.A2a$: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 2
org.kiama.example.json.SyntaxAnalysis: jvalue() :: 2
org.kiama.example.iswim.compiler.Syntax.LetRec: <init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr) :: 2
org.kiama.example.picojava.tests.ParserTests: handleWhiteSpace(Ljava/lang/CharSequence;I) :: 2
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$5: org$kiama$example$lambda2$ParLazyShare$$anonfun$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.Parser: exp2() :: 2
org.kiama.example.imperative.Parser.$anonfun: apply(s: String) :: 2
org.kiama.example.oberon0.drivers.A2a$: NoSuccess() :: 2
org.kiama.example.til.TIL2_3Tests: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 2
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$$outer() :: 2
org.kiama.example.lambda2.LambdaTests$$anonfun$30: apply$mcV$sp() :: 2
org.kiama.example.lambda2.Parser: op() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun: isDefinedAt(x6: Any) :: 2
org.kiama.machine.Machine$ParamUpdate: org$kiama$machine$Machine$ParamUpdate$$$outer() :: 2
org.kiama.example.transform.Parser: parser() :: 2
org.kiama.example.oberon0.drivers.A1Tests: NoSuccess() :: 2
org.kiama.example.lambda2.ParLazy.$anonfun: isDefinedAt(x9: Any) :: 2
org.kiama.example.oberon0.L0.NameAnalyser: isLvalue(l: org.kiama.example.oberon0.L0.source.Expression) :: 2
org.kiama.example.oberon0.drivers.A2b$: linebreak() :: 2
org.kiama.example.oberon0.base.TestDriver: mktests(proglang: String) :: 2
org.kiama.example.iswim.compiler.Parser$$anonfun$letstmt$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 2
org.kiama.util.ParserUtilitiesTests.Tup2: n1() :: 2
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$26: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 2
org.kiama.example.obr.SymbolTable.Constant: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.output.Prefix: productElement(x$1: Int) :: 1
org.kiama.util.ParserUtilitiesTests: Tup5$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: expression$lzycompute() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.rewriting.NominalAST.GenName: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: typedef$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis.$anonfun: apply(x0$1: String) :: 1
org.kiama.example.RISC.RISCISA.ADDI: hashCode() :: 1
org.kiama.example.json.Driver: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.til.TIL2_3Main$: assignment_statement$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: rep(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_3Tests: identifier$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Beq: hashCode() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: s$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.rewriting.NominalRewriter.$anonfun: apply(c: Any) :: 1
org.kiama.example.iswim.secd.RecordOps.MkRecord: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests.$anonfun.$anonfun: apply() :: 1
org.kiama.example.lambda.LambdaTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.iswim.secd.SECDBase.FunctionSpec: hashCode() :: 1
org.kiama.example.oberon0.L0.SymbolTable.Variable: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests: commit(Lscala/Function0;) :: 1
org.kiama.example.lambda2.LambdaTests: skipWhitespace() :: 1
org.kiama.example.dataflow.Optimise$: elimEmpties$lzycompute() :: 1
org.kiama.example.dataflow.ControlFlowImpl.$anonfun: apply(x0$1: org.kiama.example.dataflow.DataflowAST.Stm) :: 1
org.kiama.example.oberon0.drivers.A2bTests: condition$lzycompute() :: 1
org.kiama.output.PrettyPrinter$Doc: apply$mcVI$sp(I) :: 1
org.kiama.example.transform.Analysis.$anonfun.$anonfun.$anonfun: apply(x$10: org.kiama.example.transform.AST.VarDecl) :: 1
org.kiama.example.til.TIL2_1Tests: read_statement$lzycompute() :: 1
org.kiama.example.lambda3.AST.SwapQuery: <init>() :: 1
org.kiama.example.iswim.tests.ParserTests: whileexpr$lzycompute() :: 1
org.kiama.rewriting.Rewriter$$anonfun$alltd$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L3.Parser: super$declarationsDef() :: 1
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$3: org$kiama$example$lambda2$LazySubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.picojava.tests.ErrorTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L4.NameAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.lambda2.Parser$$anonfun$exp0$1$$anonfun$apply$14: org$kiama$example$lambda2$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.util.REPLBase: ignoreWhitespaceLines() :: 1
org.kiama.example.imperative.Generator: genInternalExp(sz: Int) :: 1
org.kiama.example.oberon0.L0.source.IntExp: v() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$18: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.iswim.secd.HeapOps: evalInst() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser: super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.obr.ObrTree.RecordVar: apply(idn: String,fields: List[String]) :: 1
org.kiama.example.prolog.PrologTree.Var: hashCode() :: 1
org.kiama.example.transform.AST.Num: <init>() :: 1
org.kiama.example.oberon0.L0.SymbolTable$Module: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$ident$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3$: opt(Lscala/Function0;) :: 1
org.kiama.example.RISC.RISCISA.Comment: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CIdnExp: hashCode() :: 1
org.kiama.example.RISC.RISC: Mem() :: 1
org.kiama.example.oberon0.L2.source.ForStatement: hashCode() :: 1
org.kiama.example.picojava.Main$: success(Ljava/lang/Object;) :: 1
org.kiama.util.StdoutEmitter: emitter() :: 1
org.kiama.example.oberon0.L0.source.OrExp: productIterator() :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: arithop$lzycompute() :: 1
org.kiama.example.json.JSONTree.JNumber: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CGtExp: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.drivers.A3$: cases$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CGeExp: canEqual(x$1: Any) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$factor$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: letrecstmt$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: program() :: 1
org.kiama.example.til.TIL2_3Tests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$7: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.LambdaTests: rep1(Lscala/Function0;) :: 1
org.kiama.util.PositionedParserUtilities$$anon$1: scala$util$parsing$combinator$Parsers$OnceParser$$$outer() :: 1
org.kiama.example.imperative.Imperative$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.til.TIL1_1$$anonfun$assignment_statement$1: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 1
org.kiama.example.picojava.AbstractSyntax.VarDecl: Name() :: 1
org.kiama.example.iswim.secd.ExceptionHandler.SetHandler: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1Tests: namedtypedef$lzycompute() :: 1
org.kiama.example.imperative.AST.Seqn: <init>() :: 1
org.kiama.example.prolog.SemanticTestDriver: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.RISC.RISCISA.MOV: hashCode() :: 1
org.kiama.example.til.TIL2_3Tests: parser$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: typebasetype$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.UnexpectedExit: hashCode() :: 1
org.kiama.example.dataflow.Driver: not(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$TestDriver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.picojava.NameResolution.$anonfun: applyOrElse([A1 <: org.kiama.example.picojava.AbstractSyntax.BlockStmt, B1 >: org.kiama.example.picojava.AbstractSyntax.Decl]x1: A1,default: A1 => B1) :: 1
org.kiama.example.iswim.compiler.Syntax.Pattern: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.ThrowTo: <init>(e: org.kiama.example.iswim.compiler.Syntax.Expr,c: org.kiama.example.iswim.compiler.Syntax.Expr) :: 1
org.kiama.example.oberon0.drivers.A3Tests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SyntaxAnalysis: whiteSpace() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(v: org.kiama.example.iswim.compiler.Syntax.Variable) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$148: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$prop$Configuration$_setter_$generatorDrivenConfig_$eq(Lorg/scalatest/prop/Configuration$PropertyCheckConfig;) :: 1
org.kiama.example.til.AST.Mul: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.iswim.driver.Main$: primstmt$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.ThrowTo: hashCode() :: 1
org.kiama.example.til.TIL2_1Main$: not(Lscala/Function0;) :: 1
org.kiama.util.CompilerBase.$anonfun: apply(arg: String) :: 1
org.kiama.example.prolog.PrologTree.Rule: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: elsifs$lzycompute() :: 1
org.kiama.util.CompilerTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.prolog.PrologTree.Pred: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1Tests: block$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.TailApp: productIterator() :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(x0$2: org.kiama.example.obr.ObrTree.Declaration) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$letstmt$1$$anonfun$apply$157: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.transform.Driver: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Tests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.json.Driver: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.lambda.LambdaTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.til.TIL2_3Main$: parser$lzycompute() :: 1
org.kiama.example.oberon0.L3.source.ProcDecl: idndef() :: 1
org.kiama.example.oberon0.base.source.IdnDef: hashCode() :: 1
org.kiama.example.oneohonecompanies.Company.Dept: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.L3.NameAnalyser: envoutl(out: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.rewriting.Rewriter: everywhere(s: ) :: 1
org.kiama.example.oberon0.drivers.A4Tests: statement$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis.Pos: <init>() :: 1
org.kiama.example.oberon0.drivers.A2a$: writelnProc$lzycompute() :: 1
org.kiama.example.obr.ObrTree.IndexExp: apply(idn: String,indx: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.L1.c.CIfStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement) :: 1
org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x3: A1,default: A1 => B1) :: 1
org.kiama.example.oneohonecompanies.Company$Company: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(child: org.kiama.attribution.Attributable) :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter: forToDoc(s: org.kiama.example.oberon0.L2.source.ForStatement) :: 1
org.kiama.example.oberon0.drivers.A1$: NoSuccess$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.L3.source.PrettyPrinter.$anonfun: apply(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.oberon0.L3.Parser$$anonfun$optformalParameters$1$$anonfun$apply$6: org$kiama$example$oberon0$L3$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) :: 1
org.kiama.example.til.TIL2_3Tests: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.iswim.compiler.Syntax.GreaterEq: productIterator() :: 1
org.kiama.example.obr.ObrTree.ExnConst: hashCode() :: 1
org.kiama.example.picojava.tests.ErrorTests: while_stmt$lzycompute() :: 1
org.kiama.example.json.SyntaxAnalysis.$anonfun: apply(x0$1: String) :: 1
org.kiama.example.lambda2.Parser: $init$() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: lambdaexpr$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.iswim.secd.IntegerOps.PushInt: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.oberon0.L0.source.IdnExp: apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.iswim.secd.IOOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.rewriting.Rewriter$: Term$lzycompute() :: 1
org.kiama.example.lambda2.Evaluators: setEvaluator(mech: String) :: 1
org.kiama.example.oberon0.drivers.A1$: rootconstexp$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CLtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.transform.Driver: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.json.ParsingTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.prolog.Main$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.lambda2.ParLazyUpdate$class: e$lzycompute$1(Lorg/kiama/example/lambda2/ParLazyUpdate;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun: apply(x0$4: Option[List[org.kiama.example.obr.ObrTree.Declaration]]) :: 1
org.kiama.example.oberon0.L3.c.PrettyPrinter: $init$() :: 1
org.kiama.example.til.TIL1_1Tests: opt(Lscala/Function0;) :: 1
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.lambda2.LambdaTests: PropertyCheckConfig$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: read_statement$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.base.c.CStatement: <init>() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: callccexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$22: PrettyPrinterBase.this.Doc,x$23: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.oberon0.base.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.iswim.compiler.Syntax.While: <init>(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,body: org.kiama.example.iswim.compiler.Syntax.Expr) :: 1
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$constrcache_$eq(Lscala/collection/mutable/WeakHashMap;) :: 1
org.kiama.example.json.ParsingTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: isconst$lzycompute() :: 1
org.kiama.example.obr.ObrTree.BoolVar: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$80: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$TransformingDriver$_setter_$pprintiastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination: hashCode() :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(x0$1: org.kiama.example.obr.ObrTree.EnumConst) :: 1
org.kiama.example.oberon0.drivers.A1Tests: idndef$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$5$$anonfun$apply$27: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.CompilerBase: main(args: Array[String]) :: 1
org.kiama.example.iswim.secd.HeapOps.Get: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase.MalformedInstruction: <init>() :: 1
org.kiama.util.Positioned: finish_=(x$1: scala.util.parsing.input.Position) :: 1
org.kiama.example.oberon0.base.c.CFunctionDecl: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,args: List[org.kiama.example.oberon0.base.c.CDeclaration],body: org.kiama.example.oberon0.base.c.CBlock) :: 1
org.kiama.example.lambda2.LambdaTests: check(Lorg/scalacheck/Prop;Lorg/scalacheck/Test$Params;) :: 1
org.kiama.example.til.TIL1_1Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.til.TIL2_1Main$: commit(Lscala/Function0;) :: 1
org.kiama.util.Environments: define(env: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,Environments.this.Entity]],i: String,e: Environments.this.Entity) :: 1
org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase.ContTypeValue: hashCode() :: 1
org.kiama.example.lambda2.Lambda$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.L0.c.CDivExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds: hashCode() :: 1
org.kiama.example.obr.ObrTree.StarExp: productIterator() :: 1
org.kiama.example.iswim.compiler.Syntax.Tuple: productIterator() :: 1
org.kiama.example.til.TIL2_2Tests: for_statement$lzycompute() :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$ispropersuperterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: ifStatement$lzycompute() :: 1
org.kiama.example.lambda3.Lambda$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.til.TIL1_1Tests: integer$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$3$$anonfun$apply$7$$anonfun$apply$8: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.til.AST.IfThen: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply(x0$13: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$20: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[String,SyntaxAnalysis.this.Pos],String]) :: 1
org.kiama.example.dataflow.DataflowAST.If: apply(cond: String,tru: org.kiama.example.dataflow.DataflowAST.Stm,fls: org.kiama.example.dataflow.DataflowAST.Stm) :: 1
org.kiama.example.oberon0.drivers.A2a$: unknownType$lzycompute() :: 1
org.kiama.example.imperative.Generator: genDiv(sz: Int) :: 1
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$3: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$simplexp$1$$anonfun$apply$84: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.Assignment: <init>(desig: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.attribution.Decorators.Chain: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.And: productIterator() :: 1
org.kiama.example.til.TIL1_1Tests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A3$: typedeclsection$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.picojava.tests.ErrorTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.util.ParserUtilities: super$err(msg: String) :: 1
org.kiama.example.dataflow.DataflowAST.Return: <init>() :: 1
org.kiama.example.obr.RISCTree.MulW: hashCode() :: 1
org.kiama.example.lambda.AST.Lam: apply(x: String,e: org.kiama.example.lambda.AST.Exp) :: 1
org.kiama.example.lambda3.LambdaTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: booleanType$lzycompute() :: 1
org.kiama.example.json.ParsingTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.lambda3.AST.Var: <init>() :: 1
org.kiama.example.lambda2.Lambda$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A3$: term$lzycompute() :: 1
org.kiama.example.picojava.TypeAnalysis.$anonfun: apply(x0$1: org.kiama.example.picojava.AbstractSyntax.Decl) :: 1
org.kiama.example.imperative.Imperative$: start() :: 1
org.kiama.example.picojava.tests.ErrorTests: boolean_literal$lzycompute() :: 1
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$14$$anonfun$apply$15: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilitiesTests: OnceParser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: constdecl$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: Tup2() :: 1
org.kiama.util.Positioned: start_=(x$1: scala.util.parsing.input.Position) :: 1
org.kiama.example.imperative.Generator.$anonfun: apply(i: Int) :: 1
org.kiama.example.oberon0.drivers.A2bTests: caseStatement$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.obr.RISCTree$RISCNode: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$17: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.prolog.Interpreter.TermGoal: <init>() :: 1
org.kiama.example.oberon0.drivers.A1Tests: assert(Lscala/Option;Ljava/lang/Object;) :: 1
org.kiama.example.til.TIL2_3Main$: identifier$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.obr.ObrTree.RecordVar: productIterator() :: 1
org.kiama.example.iswim.secd.StackOps.Pop: productIterator() :: 1
org.kiama.example.dataflow.DataflowAST.Empty: hashCode() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests.$anonfun: <init>() :: 1
org.kiama.example.obr.ObrTree.StarExp: hashCode() :: 1
org.kiama.example.json.ParsingTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.obr.ObrTree.BoolExp: productIterator() :: 1
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.til.TIL2_2Tests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.iswim.tests.ParserTests: matchclause$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: convertToEqualizer(Ljava/lang/Object;) :: 1
org.kiama.util.Console: readLine(prompt: String) :: 1
org.kiama.example.transform.AST.Program: productIterator() :: 1
org.kiama.example.til.TIL2_2Tests: not(Lscala/Function0;) :: 1
org.kiama.example.iswim.secd.SECDBase: evalInst() :: 1
org.kiama.output.Infix: side() :: 1
org.kiama.example.oberon0.drivers.A2bTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.machine.Machine.Update: <init>() :: 1
org.kiama.machine.Machine.ParamUpdate: <init>(s: Machine.this.ParamState[T,U],t: T,u: U) :: 1
org.kiama.example.oberon0.drivers.A2a$: keyword$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: statementSequence$lzycompute() :: 1
org.kiama.attribution.AttributionBase: circular([T <: Object, U]init: U,f: T => U) :: 1
org.kiama.example.dataflow.LivenessImpl: ocount_=(x$1: Int) :: 1
org.kiama.rewriting.NominalRewriter.Binding: <init>() :: 1
org.kiama.example.picojava.TypeAnalysis: <init>() :: 1
org.kiama.example.dataflow.Driver: rep1(Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ParserTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.output.NonAssoc: canEqual(x$1: Any) :: 1
org.kiama.example.lambda2.ReduceEvaluator: arithop$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests$$anonfun$2: org$kiama$example$lambda$LambdaTests$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter: outermost(s: ) :: 1
org.kiama.example.oberon0.L4.source.FieldExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: conditions$lzycompute() :: 1
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply() :: 1
org.kiama.example.oberon0.drivers.A1$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oneohonecompanies.Company$Employee: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: commit(Lscala/Function0;) :: 1
org.kiama.example.til.TIL1_1Tests: skipWhitespace() :: 1
org.kiama.example.iswim.secd.SECDBase$ByteCodeBase: org$kiama$output$PrettyPrinterBase$PrettyPrintable$$$outer() :: 1
org.kiama.example.obr.ObrTree.Catch: hashCode() :: 1
org.kiama.example.picojava.tests.ParserTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL1_1Tests: commit(Lscala/Function0;) :: 1
org.kiama.output.PrettyPrinter$$anonfun$line$1$$anonfun$5: org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.SubExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: statement$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: s$lzycompute() :: 1
org.kiama.example.obr.Driver: process(ast: org.kiama.example.obr.ObrTree.ObrInt,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.lambda.LambdaTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_3Tests: rep1(Lscala/Function0;) :: 1
org.kiama.example.dataflow.DataflowAST.Block: <init>() :: 1
org.kiama.example.json.JSONTree.JObject: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2bTests: namedtypedef$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: skipWhitespace() :: 1
org.kiama.example.obr.RISCTree.NegW: hashCode() :: 1
org.kiama.example.til.TIL1_1Tests: assignment_statement$lzycompute() :: 1
org.kiama.example.iswim.secd.ConversionOps.ToInt: <init>() :: 1
org.kiama.example.oberon0.drivers.A3Tests: writeProc$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: keyword$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: s$lzycompute() :: 1
org.kiama.example.picojava.NameResolution.$anonfun.$anonfun: apply(x0$5: org.kiama.example.picojava.AbstractSyntax.BlockStmt) :: 1
org.kiama.example.imperative.AST$Exp: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: stringLiteral() :: 1
org.kiama.example.oberon0.drivers.A1$: step$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: NoSuccess$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.IndexExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2aTests: constdeclsection$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.ConstDecl: <init>() :: 1
org.kiama.example.json.ParsingTests: jpair$lzycompute() :: 1
org.kiama.example.oberon0.L3.c.CStrExp: <init>(s: String) :: 1
org.kiama.example.iswim.driver.Main$: blockexpr$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$constdeclsection$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.dataflow.Driver: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.json.JSONTree.JNumber: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.obr.RISCTree.IntDatum: productIterator() :: 1
org.kiama.example.til.TIL1_1Tests: if_statement$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L1.Parser.$anonfun: apply(ss: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.picojava.tests.ErrorTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$1: org$kiama$example$lambda2$ParLazy$$anonfun$$$outer() :: 1
org.kiama.example.imperative.AST.Var: productIterator() :: 1
org.kiama.example.lambda.Generator: genVar() :: 1
org.kiama.example.lambda3.Parser.$anonfun.$anonfun.$anonfun: apply(x0$2: Parser.this.~[org.kiama.rewriting.NominalAST.Name,org.kiama.example.lambda3.AST.Exp]) :: 1
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$4: org$kiama$example$oberon0$L4$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.prolog.SemanticTestDriver: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.iswim.tests.ParserTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.imperative.Imperative$: double$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: unknownType$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$29$$anonfun$apply$30: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Syntax.GreaterEq: hashCode() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L3.c.CAddrExp: op() :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: declsection(d: org.kiama.example.oberon0.base.source.Declaration) :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: super$entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String) :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$example$imperative$Generator$_setter_$genIdn_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: super$translate(d: org.kiama.example.oberon0.base.source.Declaration) :: 1
org.kiama.example.iswim.compiler.Syntax.Primitives: hashCode() :: 1
org.kiama.util.ParserUtilities: handleWhiteSpace(in: scala.util.parsing.input.Reader[Char]) :: 1
org.kiama.example.oberon0.L0.source.AddExp: <init>() :: 1
org.kiama.example.oberon0.drivers.A2a$: rootconstexp$lzycompute() :: 1
org.kiama.example.json.JSONTree.JName: <init>() :: 1
org.kiama.example.oberon0.drivers.A1$: forVar$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.UnexpectedExit: <init>() :: 1
org.kiama.example.imperative.Imperative$: commit(Lscala/Function0;) :: 1
org.kiama.example.lambda3.Lambda$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: isDefinedAt(x2: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.oberon0.drivers.A3$: desugarCase$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: integer$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: beta$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase: lbrace() :: 1
org.kiama.example.til.TIL2_2Tests: factor$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(check$ifrefutable$1: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.imperative.AST.Div: productIterator() :: 1
org.kiama.example.iswim.secd.IntegerOps.IntTypeValue: hashCode() :: 1
org.kiama.example.oberon0.L0.source.AddExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2b$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.obr.ObrTree.IntParam: apply(idn: String) :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$14: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2bTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$2: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: cases$lzycompute() :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.lambda2.ParLazy: letOpn(eval: ) :: 1
org.kiama.example.oberon0.L0.Desugarer$$anonfun$1: org$kiama$example$oberon0$L0$Desugarer$$anonfun$$$outer() :: 1
org.kiama.example.picojava.tests.ParserTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: lambda$lzycompute() :: 1
org.kiama.example.json.PrettyPrinter: <init>() :: 1
org.kiama.example.oberon0.L0.source.NegExp: priority() :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A1Tests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L4.source.PrettyPrinter.$anonfun: apply(t: String) :: 1
org.kiama.example.oberon0.L0.SymbolTable: isType(e: SymbolTable.this.Entity) :: 1
org.kiama.attribution.Decorators$: infunc$lzycompute$1(Lscala/Function1;Lscala/Function1;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.util.Messaging.$anonfun: apply(m: org.kiama.util.Messaging.Record) :: 1
org.kiama.example.oberon0.drivers.A2bTests: commit(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: factor$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: info() :: 1
org.kiama.example.oberon0.drivers.A3Tests: writelnProc$lzycompute() :: 1
org.kiama.example.iswim.secd.BooleanOps.TrueValue: hashCode() :: 1
org.kiama.example.oberon0.L0.NameAnalyser: rootconstexpDef() :: 1
org.kiama.machine.Machine.$anonfun: apply(u: Machine.this.Update) :: 1
org.kiama.example.til.TIL1_1Tests: string$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.lambda2.ParLazySubst: s() :: 1
org.kiama.example.til.TIL1_1Tests: for_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: typedeclsection$lzycompute() :: 1
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$9: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.json.Driver: skipWhitespace() :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.picojava.tests.ErrorTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A2b$: falseConstant$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CEqExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.til.TIL2_2Main$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.iswim.secd.SECDBase$CodeTree: org$kiama$example$iswim$secd$SECDBase$CodeTree$$flattened$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.Assignment: apply(desig: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.compiler.Syntax$Iswim: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.transform.Driver: org$kiama$example$transform$Parser$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$3: org.kiama.example.prolog.PrologTree.SourceNode) :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.picojava.tests.ParserTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.imperative.AST: <init>() :: 1
org.kiama.example.til.AST.IfThen: apply(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat]) :: 1
org.kiama.rewriting.Rewriter: same(v1: Any,v2: Any) :: 1
org.kiama.example.json.JSONTree.JName: productIterator() :: 1
org.kiama.example.iswim.tests.ParserTests: letrecexpr$lzycompute() :: 1
org.kiama.example.iswim.secd.BooleanOps.Equals: hashCode() :: 1
org.kiama.output.Prefix: productArity() :: 1
org.kiama.example.json.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.util.CompilerTests: process(ast: Any,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.oberon0.L4.SymbolTable.Field: tipe() :: 1
org.kiama.example.transform.Analysis$: prio$lzycompute() :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(e: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.example.oberon0.drivers.A1$: integerType$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Jmp: productIterator() :: 1
org.kiama.example.til.TIL2_1Main$: declaration$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Local: hashCode() :: 1
org.kiama.rewriting.Rewriter: where(s: ) :: 1
org.kiama.example.oberon0.drivers.A1$: optelse$lzycompute() :: 1
org.kiama.example.iswim.driver.Main.$anon: debug() :: 1
org.kiama.example.iswim.secd.SECDBase$EmptyValue: org$kiama$example$iswim$secd$SECDBase$EmptyValue$$$outer() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.c.CGeExp: priority() :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.oberon0.base.source.IdnDef: apply(ident: String) :: 1
org.kiama.example.oneohonecompanies.Company$Dept: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.util.WhitespacePositionedParserUtilities: handleWhiteSpace(in: scala.util.parsing.input.Reader[Char]) :: 1
org.kiama.example.oberon0.drivers.A1Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: string$lzycompute() :: 1
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A4Tests: booleanType$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: arithop$lzycompute() :: 1
org.kiama.example.imperative.AST.Sub: apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$9: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.til.TIL2_1Tests: expression$lzycompute() :: 1
org.kiama.example.oberon0.L1.source.IfStatement: productIterator() :: 1
org.kiama.example.picojava.TypeAnalysis.$anonfun: apply(typedecl: org.kiama.example.picojava.AbstractSyntax.ClassDecl) :: 1
org.kiama.example.imperative.Parser: exp() :: 1
org.kiama.example.imperative.AST.Sub: productIterator() :: 1
org.kiama.example.json.JSONTree.JFalse: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2bTests: conditions$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: commit(Lscala/Function0;) :: 1
org.kiama.example.json.SyntaxAnalysis.$anonfun: apply(x0$3: List[org.kiama.example.json.JSONTree.JValue]) :: 1
org.kiama.example.oberon0.drivers.A2bTests: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.til.TIL2_3Tests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.til.AST.For: hashCode() :: 1
org.kiama.example.RISC.RISC: debug() :: 1
org.kiama.example.picojava.AbstractSyntax.Dot: productIterator() :: 1
org.kiama.example.oneohonecompanies.Company.Dept: productIterator() :: 1
org.kiama.example.oberon0.base.TestDriver: processline(line: String,p: Int,q: Int,r: Int) :: 1
org.kiama.example.oberon0.base.Parser.$anonfun: apply(x0$2: Parser.this.~[List[org.kiama.example.oberon0.base.source.Declaration],org.kiama.example.oberon0.base.source.Block]) :: 1
org.kiama.example.lambda3.Lambda$: name$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: primstmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.lambda.LambdaTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: expr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: forVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: elsif$lzycompute() :: 1
org.kiama.example.iswim.secd.ConversionOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.oberon0.drivers.A1Tests: condition$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Company$SubUnit: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.lambda3.LambdaTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.prolog.SyntaxAnalysis: parser() :: 1
org.kiama.rewriting.Rewriter: makechild(c: Any) :: 1
org.kiama.util.ParserUtilitiesTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply(x$2: String) :: 1
org.kiama.example.oberon0.L0.source.SubExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.til.TIL2_1Tests: primary$lzycompute() :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$2: org.kiama.example.prolog.PrologTree.SourceNode) :: 1
org.kiama.example.imperative.AST.Mul: <init>() :: 1
org.kiama.example.lambda.Lambda$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.VarDecl: productIterator() :: 1
org.kiama.example.json.PrettyPrinting: showPair(p: org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue) :: 1
org.kiama.example.oberon0.drivers.A3Tests: constdecl$lzycompute() :: 1
org.kiama.example.lambda2.LazySubst$$anonfun$s$2$$anonfun$apply$12: org$kiama$example$lambda2$LazySubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.oneohonecompanies.Total$$anonfun$total$2: apply$mcDDD$sp(DD) :: 1
org.kiama.example.oberon0.L1.source.IfStatement$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.obr.ObrTree.SlashExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: typebasetype$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: rep1(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_1Tests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.util.ParserUtilitiesTests.Node: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.base.Parser$$anonfun$whitespaceParser$1$$anonfun$apply$5: org$kiama$example$oberon0$base$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilities.$anonfun: apply(x0$7: ParserUtilities.this.~[ParserUtilities.this.~[A,B],C]) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$154: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1Tests: rep1(Lscala/Function0;) :: 1
org.kiama.example.obr.RISCTree.CmpgtW: hashCode() :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis.$anonfun: apply(x0$1: org.kiama.example.iswim.compiler.Syntax.Iswim) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: super$translate(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.lambda.LambdaTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.lambda.Lambda$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: optelse$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$117: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2a$: ident$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: parameters$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.OrExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue: hashCode() :: 1
org.kiama.example.til.TIL2_1Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL2_2Main$: write_statement$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.NegExp: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.lambda3.Lambda$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.RISC.RISCISA.WRH: hashCode() :: 1
org.kiama.example.obr.ObrTree.ReturnStmt: <init>() :: 1
org.kiama.example.obr.ObrTree.IntExp: hashCode() :: 1
org.kiama.example.iswim.secd.StackOps.Dup: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: isconst$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$113: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL1_1Main$: while_statement$lzycompute() :: 1
org.kiama.example.transform.Driver: factor$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: optSectionToDoc(section: String,optds: Option[List[org.kiama.example.oberon0.base.source.Declaration]]) :: 1
org.kiama.example.lambda.AST.Lam: <init>() :: 1
org.kiama.example.oberon0.base.source.IdnDef: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase.CodeSegment: toDoc() :: 1
org.kiama.example.til.TIL2_3Tests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2b: <init>() :: 1
org.kiama.example.iswim.secd.BooleanOps.PushFalse: productIterator() :: 1
org.kiama.example.imperative.PrettyPrinter.$anonfun: apply(t: org.kiama.example.imperative.AST.ImperativeNode) :: 1
org.kiama.example.til.TIL2_2Main$: if_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.til.TIL2_3Tests: while_statement$lzycompute() :: 1
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(x0$2: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A3Tests: elsifs$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: env$lzycompute() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$3: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.example.iswim.secd.StringOps.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: statementSequence$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun: apply(x0$1: Parser.this.~[Parser.this.~[Option[List[org.kiama.example.oberon0.L0.source.ConstDecl]],Option[List[org.kiama.example.oberon0.L0.source.TypeDecl]]],Option[List[org.kiama.example.oberon0.L0.source.VarDecl]]]) :: 1
org.kiama.example.json.Driver: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.rewriting.NominalRewriter: Binding$lzycompute() :: 1
org.kiama.example.picojava.Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.secd.RecordOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.json.ParsingTests: repsep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.picojava.Main$: name$lzycompute() :: 1
org.kiama.example.obr.ObrTree.ExitStmt: productIterator() :: 1
org.kiama.example.til.TIL2_2Main$: integer$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.L1.source.WhileStatement: apply(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.imperative.Imperative$: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2a$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.base.TransformingDriver: super$resetflags() :: 1
org.kiama.example.lambda2.LambdaTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_1Main$: expression$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: liter$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.base.c.CIntExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2bTests: constdeclsection$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: parser() :: 1
org.kiama.example.oberon0.drivers.A3: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(check$ifrefutable$1: org.kiama.example.iswim.secd.SECDBase.FunctionSpec) :: 1
org.kiama.example.iswim.tests.ParserTests: emptyexpr$lzycompute() :: 1
org.kiama.example.dataflow.DataflowAST.Block: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2a$: declarations$lzycompute() :: 1
org.kiama.example.imperative.Parser: idn() :: 1
org.kiama.example.til.TIL2_1: $init$() :: 1
org.kiama.util.Environments$MultipleEntity: org$kiama$util$Environments$MultipleEntity$$$outer() :: 1
org.kiama.example.til.TIL2_3Main$: rep1(Lscala/Function0;) :: 1
org.kiama.example.picojava.TypeAnalysis.$anonfun: apply(x0$6: org.kiama.example.picojava.AbstractSyntax.Exp) :: 1
org.kiama.example.iswim.driver.Main$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.output.LeftAssoc: productPrefix() :: 1
org.kiama.example.json.ParsingTests: whiteSpace() :: 1
org.kiama.example.iswim.secd.SECDBase.PrimTypeValue: <init>() :: 1
org.kiama.example.oberon0.base.Parser$$anonfun$moduledecl$3: org$kiama$example$oberon0$base$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.AndExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oneohonecompanies.Company.Company: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: comment$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: mkrefexpr$lzycompute() :: 1
org.kiama.example.obr.SemanticDriver: process(ast: org.kiama.example.obr.ObrTree.ObrInt,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.obr.ObrTree.LoopStmt: apply(body: List[org.kiama.example.obr.ObrTree.Statement]) :: 1
org.kiama.example.oberon0.L0.source.IntExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3$: booleanType$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: f() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: matchexpr$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.SECDBase.TailApp: <init>() :: 1
org.kiama.example.transform.Driver: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oneohonecompanies.Cut.$anonfun.$anonfun: apply() :: 1
org.kiama.example.iswim.tests.ParserTests: commit(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_3Tests: keyword$lzycompute() :: 1
org.kiama.attribution.Attribution.CachedAttribute: memo() :: 1
org.kiama.example.picojava.tests.ParserTests: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L3.c.CCall: <init>(s: String,ps: List[org.kiama.example.oberon0.base.c.CExpression]) :: 1
org.kiama.example.lambda.LambdaTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.iswim.compiler.Syntax.Primitives: <init>(nms: List[org.kiama.example.iswim.compiler.Syntax.Variable]) :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$letLetRen$1: org$kiama$example$lambda2$ParLazy$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilities: keywords(ext: scala.util.matching.Regex,kws: List[String]) :: 1
org.kiama.example.picojava.AbstractSyntax.ClassDecl: hashCode() :: 1
org.kiama.example.obr.ObrTree.ArrayVar: <init>() :: 1
org.kiama.example.json.JSONTree.JString: hashCode() :: 1
org.kiama.example.oberon0.L0.source.EqExp: productIterator() :: 1
org.kiama.example.til.AST$For$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.til.TIL1_1Tests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.oberon0.drivers.A2aTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.FieldIdn: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.PushEmpty: productIterator() :: 1
org.kiama.example.imperative.Imperative$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.base.TranslatingDriver: $init$() :: 1
org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean) :: 1
org.kiama.example.iswim.secd.SECDBase.CodeTree.$anonfun: <init>() :: 1
org.kiama.example.iswim.secd.RecordOps.Fields: hashCode() :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: lambda$lzycompute() :: 1
org.kiama.example.oberon0.L4.SymbolTable: isArray(e: SymbolTable.this.Entity) :: 1
org.kiama.util.ParserUtilitiesTests.$anonfun: apply(s: String) :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: lambda$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: ifStatement$lzycompute() :: 1
org.kiama.example.transform.AST.BinExpR: hashCode() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$declarationsDef$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL1_1Main$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A2b$: lhs$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: opt(Lscala/Function0;) :: 1
org.kiama.example.obr.SyntaxAnalysis: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.lambda3.Parser.$anonfun: apply(x0$1: Parser.this.~[String,String]) :: 1
org.kiama.example.oberon0.drivers.A2bTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SyntaxAnalysis: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.iswim.driver.Main$: opt(Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ParserTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.dataflow.DataflowAST.While: <init>() :: 1
org.kiama.example.iswim.secd.BooleanOps$BooleanValue: org$kiama$example$iswim$secd$BooleanOps$BooleanValue$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.oberon0.drivers.A1$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.til.TIL2_2Main$: org$kiama$example$til$TIL2_2$_setter_$fortowhile_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.PSH: hashCode() :: 1
org.kiama.rewriting.Rewriter: collect([CC[U] <: Traversable[U], T]f: PartialFunction[Any,T],implicit cbf: scala.collection.generic.CanBuildFrom[CC[T],T,CC[T]]) :: 1
org.kiama.example.oberon0.drivers.A1Tests: lhs$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: valexpr$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: lambdaexpr$lzycompute() :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: letLet$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: applyOrElse([A1 <: org.kiama.example.iswim.compiler.Syntax.Binding, B1 >: org.kiama.example.iswim.secd.SECDBase.FunctionSpec]x2: A1,default: A1 => B1) :: 1
org.kiama.example.oberon0.L4.SymbolTable.ArrayType: size() :: 1
org.kiama.example.lambda.LambdaGen$: org$kiama$util$GeneratingREPLBase$_setter_$prompt_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_3Tests: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.secd.HeapOps.RefTypeValue: hashCode() :: 1
org.kiama.example.prolog.Main: process(querytree: org.kiama.example.prolog.PrologTree.Literal) :: 1
org.kiama.example.lambda.LambdaTests: org$kiama$example$lambda$Generator$_setter_$genLeafExp_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.til.TIL2_3Tests: program$lzycompute() :: 1
org.kiama.example.til.AST.Id: apply(s: String) :: 1
org.kiama.example.lambda2.AST.FunType: apply(t1: org.kiama.example.lambda2.AST.Type,t2: org.kiama.example.lambda2.AST.Type) :: 1
org.kiama.example.oberon0.L0.source.IntExp: hashCode() :: 1
org.kiama.example.imperative.ImperativeGen$: process(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo) :: 1
org.kiama.example.lambda3.LambdaTests: query$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: term$lzycompute() :: 1
org.kiama.example.obr.RISCEncoder: <init>() :: 1
org.kiama.util.CompilerTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.til.TIL2_3Main$: primary$lzycompute() :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$ispropersubterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.lambda.Lambda$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.RISC.RISC: R() :: 1
org.kiama.example.oberon0.L0.c.CNeExp: priority() :: 1
org.kiama.util.ParserUtilitiesTests$Tup6: org$kiama$util$ParserUtilitiesTests$Tup6$$$outer() :: 1
org.kiama.example.oberon0.L4.CCodeGenerator: super$translate(t: CCodeGenerator.this.Type) :: 1
org.kiama.example.oberon0.L4.source.RecordTypeDef: productIterator() :: 1
org.kiama.example.iswim.compiler.Parser: operator(op: String) :: 1
org.kiama.example.oberon0.drivers.A2b$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.c.CNegExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: expconst$lzycompute() :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(x0$1: ParserUtilities.this.~[A,B]) :: 1
org.kiama.example.oberon0.drivers.A1Tests: whileStatement$lzycompute() :: 1
org.kiama.example.imperative.AST.Add: productIterator() :: 1
org.kiama.example.til.AST.Div: <init>() :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$example$oberon0$base$TestDriver$_setter_$maxlanglevel_$eq(I) :: 1
org.kiama.example.iswim.secd.IntegerOps.Div: productIterator() :: 1
org.kiama.example.lambda3.LambdaTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.imperative.Parser: whileStmt() :: 1
org.kiama.rewriting.Rewriter: strategyf(f: Any => Option[Any]) :: 1
org.kiama.example.oberon0.drivers.A1Tests: booleanType$lzycompute() :: 1
org.kiama.example.prolog.Subst: <init>() :: 1
org.kiama.output.PrettyPrinterBase: lparen() :: 1
org.kiama.example.til.AST.Decl: hashCode() :: 1
org.kiama.example.oberon0.base.Analyser.$anonfun: apply(child: org.kiama.attribution.Attributable) :: 1
org.kiama.example.picojava.AbstractSyntax.AssignStmt: hashCode() :: 1
org.kiama.example.lambda2.ParLazy$class: r$lzycompute$1(Lorg/kiama/example/lambda2/ParLazy;Lorg/kiama/rewriting/Rewriter$Strategy;Lorg/kiama/rewriting/Rewriter$Strategy;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.til.TIL2_1Tests: integer$lzycompute() :: 1
org.kiama.example.iswim.driver.SECD: handler$lzycompute() :: 1
org.kiama.example.imperative.Generator: genAdd(sz: Int) :: 1
org.kiama.example.RISC.RISC.$anonfun: apply(m: Int) :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.oberon0.drivers.A3$: elsifs$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.transform.Driver: parser$lzycompute() :: 1
org.kiama.example.iswim.secd.IntComparisonOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser: idntypeDef() :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.L0.source.NotExp: productIterator() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: info() :: 1
org.kiama.example.oberon0.L3.Parser$$anonfun$statementDef$1: org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer() :: 1
org.kiama.example.transform.Analysis: <init>() :: 1
org.kiama.example.oberon0.drivers.A4Tests: trueConstant$lzycompute() :: 1
org.kiama.example.til.AST.Add: <init>() :: 1
org.kiama.example.oberon0.drivers.A2b$: idndeflist$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: cases$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.ForStatement: productIterator() :: 1
org.kiama.example.lambda2.LambdaTests: PropertyCheckConfig() :: 1
org.kiama.example.obr.Main: <init>() :: 1
org.kiama.example.lambda2.LambdaTests: exp0$lzycompute() :: 1
org.kiama.example.obr.ObrTree.ArrayVar: apply(idn: String,size: Int) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$parenexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$2: org$kiama$example$oberon0$L1$Parser$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_2Tests.$anonfun: <init>() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$26: Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.iswim.secd.SECDBase.ResumeFromDump: productIterator() :: 1
org.kiama.example.iswim.secd.BooleanOps: evalInst() :: 1
org.kiama.example.lambda2.Parser$$anonfun$ttype$1$$anonfun$apply$17: org$kiama$example$lambda2$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.RecordOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.json.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.iswim.compiler.Syntax.Less: productIterator() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$6: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.oberon0.drivers.A4Tests: constrainedInt$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$2: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.RISC.RISCISA.MULI: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: elsifs$lzycompute() :: 1
org.kiama.example.transform.AST.Num: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: tipe$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.c.CModExp: canEqual(x$1: Any) :: 1
org.kiama.attribution.Decorators$: dattr$lzycompute$1(Lscala/PartialFunction;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x2: A1,default: A1 => B1) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$valexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(x0$7: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.example.oberon0.drivers.A1$: constdecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: simpexp$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CNamedType: <init>(ident: String) :: 1
org.kiama.example.obr.ObrTree.ArrayVar: productIterator() :: 1
org.kiama.util.Messaging.Record: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.Or: hashCode() :: 1
org.kiama.example.dataflow.Parser: exp() :: 1
org.kiama.example.til.TIL1_1Main$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.c.CNegExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.dataflow.Parser: ifStm() :: 1
org.kiama.example.prolog.PrologTree.Integer: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2a$: Named$lzycompute() :: 1
org.kiama.example.iswim.secd.ConversionOps: <init>() :: 1
org.kiama.output.PrettyPrinterBase: dquote() :: 1
org.kiama.example.oberon0.L3.c.CVoidType: <init>() :: 1
org.kiama.example.lambda2.AST.Num: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2aTests: rootconstexp$lzycompute() :: 1
org.kiama.example.lambda2.LazySubstEvaluator: beta$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: ident$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A3$: ident$lzycompute() :: 1
org.kiama.example.json.JSONTree.JString: apply(value: String) :: 1
org.kiama.example.oberon0.drivers.A3Tests: typedecl$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.DumpEmpty: <init>() :: 1
org.kiama.example.lambda3.Evaluator: <init>() :: 1
org.kiama.example.json.ParsingTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.til.TIL2_1Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.json.ParsingTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.AST.IfElse: hashCode() :: 1
org.kiama.output.Fixity: <init>() :: 1
org.kiama.example.til.TIL1_1Main: <init>() :: 1
org.kiama.example.iswim.secd.IntegerOps.Sub: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests: getParams(Lscala/collection/Seq;Lorg/scalatest/prop/Configuration$PropertyCheckConfig;) :: 1
org.kiama.example.imperative.Imperative$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: vardeclsection$lzycompute() :: 1
org.kiama.example.obr.ObrTree.ModExp: productIterator() :: 1
org.kiama.example.oberon0.L3.NameAnalyser: super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.util.ParserUtilitiesTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.oberon0.drivers.A2a$: procedureDeclaration$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.base.TestDriver.$anonfun: <init>() :: 1
org.kiama.example.lambda2.Lambda.$anonfun: apply(mech: String) :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$example$imperative$Generator$_setter_$genInteger_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$1$$anonfun$apply$3: org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda3.LambdaTests: skipWhitespace() :: 1
org.kiama.example.iswim.secd.BooleanOps.PushFalse: hashCode() :: 1
org.kiama.example.obr.ObrTree.IndexExp: productIterator() :: 1
org.kiama.example.lambda.AST.Lam: <init>(x: String,e: org.kiama.example.lambda.AST.Exp) :: 1
org.kiama.example.oberon0.L2.Lifter$class: liftBlocks$lzycompute$1(Lorg/kiama/example/oberon0/L2/Lifter;Lscala/collection/mutable/ListBuffer;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.dataflow.DataflowAST: <init>() :: 1
org.kiama.example.oberon0.drivers.A3Tests: conditions$lzycompute() :: 1
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$8: org$kiama$example$lambda2$EagerSubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter: repeat(s: ) :: 1
org.kiama.example.json.ParsingTests.$anonfun: <init>() :: 1
org.kiama.example.lambda2.AST$Type: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(x0$3: org.kiama.example.obr.ObrTree.ObrNode) :: 1
org.kiama.example.transform.Driver: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$36: Parser.this.~[Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.json.SyntaxAnalysis.$anonfun: apply(x0$4: SyntaxAnalysis.this.~[org.kiama.example.json.JSONTree.JName,org.kiama.example.json.JSONTree.JValue]) :: 1
org.kiama.example.oberon0.L0.SymbolTable.UserType: hashCode() :: 1
org.kiama.example.til.TIL2_2Main$: parser$lzycompute() :: 1
org.kiama.example.obr.ObrTree.WhileStmt: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3$: whileStatement$lzycompute() :: 1
org.kiama.example.oberon0.base.CCodeGenerator: translate(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.imperative.Imperative$: skipWhitespace() :: 1
org.kiama.example.iswim.compiler.Syntax.StringVal: hashCode() :: 1
org.kiama.example.picojava.tests.ParserTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.json.ParsingTests: skipWhitespace() :: 1
org.kiama.example.oberon0.L0.source.OrExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.compiler.Syntax.IswimProg: apply(bds: List[org.kiama.example.iswim.compiler.Syntax.Stmt]) :: 1
org.kiama.example.picojava.NameResolution.$anonfun: apply() :: 1
org.kiama.example.obr.ObrTree.IntParam: <init>() :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis.$anonfun: apply(m: org.kiama.example.iswim.compiler.Syntax.MatchClause) :: 1
org.kiama.example.oberon0.drivers.A4Tests: basetype$lzycompute() :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$fail_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oberon0.L4.SymbolTable: isRecord(e: SymbolTable.this.Entity) :: 1
org.kiama.example.obr.SyntaxAnalysis: fielddecl$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.L4.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.oberon0.drivers.A2aTests: fpsection$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$5: org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.example.oberon0.L0.SymbolTable$BuiltinType: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.picojava.tests.ParserTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.til.TIL2_1Tests: org$kiama$example$til$TIL2_1$_setter_$declareforvars_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oberon0.drivers.A2a$: constdeclsection$lzycompute() :: 1
org.kiama.example.transform.AST.VarDecl: apply(name: String) :: 1
org.kiama.example.imperative.Generator.$anonfun.$anonfun: apply(ss: List[org.kiama.example.imperative.AST.Stmt]) :: 1
org.kiama.util.ParserUtilitiesTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.source.AndExp: hashCode() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$16: PrettyPrinterBase.this.Doc,x$17: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.oberon0.drivers.A3Tests: Named$lzycompute() :: 1
org.kiama.example.prolog.PrologTree.Var: productIterator() :: 1
org.kiama.example.obr.RISCEncoder.$anonfun.$anonfun: apply(x0$1: org.kiama.attribution.Attributable) :: 1
org.kiama.example.picojava.tests.ErrorTests: opt(Lscala/Function0;) :: 1
org.kiama.example.til.TIL1_1Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.json.PrettyPrinting: super$pretty$default$2() :: 1
org.kiama.rewriting.Rewriter: congruence(ss: Seq[Rewriter.this.Strategy]) :: 1
org.kiama.example.til.TIL2_2Main$: not(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.lambda.LambdaTests: whiteSpace() :: 1
org.kiama.example.lambda2.Lambda$: number$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: parser$lzycompute() :: 1
org.kiama.example.oberon0.L3.source.ProcDecl: productIterator() :: 1
org.kiama.example.imperative.Imperative$: process(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.driver.Main$: term2$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.prolog.PrologTree.Atom: apply(s: String) :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$example$imperative$Generator$_setter_$genVar_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.oberon0.L4.TypeAnalyser$$anonfun$fieldListsToFields$1: org$kiama$example$oberon0$L4$TypeAnalyser$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$31: Parser.this.~[Parser.this.Pos,List[org.kiama.example.iswim.compiler.Syntax.Binding]]) :: 1
org.kiama.example.json.ParsingTests: jobject$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$41$$anonfun$apply$42: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.attribution.AttributionBase$ConstantAttribute: result$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$example$oberon0$base$TestDriver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A2aTests: vardeclsection$lzycompute() :: 1
org.kiama.output.LeftAssoc: productElement(x$1: Int) :: 1
org.kiama.example.json.JSONTree.JArray: hashCode() :: 1
org.kiama.example.lambda2.Par$$anonfun$lookupb$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A1$: forStatement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: constrainedInt$lzycompute() :: 1
org.kiama.example.lambda.Parser: $init$() :: 1
org.kiama.example.oberon0.drivers.A1$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$example$imperative$Generator$_setter_$genLeafExp_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: NoSuccess$lzycompute() :: 1
org.kiama.example.json.Driver: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.IntExp: apply(num: Int) :: 1
org.kiama.util.WhitespaceParser: parseWhitespace(in: scala.util.parsing.input.Reader[Char]) :: 1
org.kiama.attribution.Attribution.CachedAttribute: reset() :: 1
org.kiama.example.iswim.tests.ParserTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.SECDBase$ContValue: org$kiama$example$iswim$secd$SECDBase$ContValue$$$outer() :: 1
org.kiama.output.RightAssoc: canEqual(x$1: Any) :: 1
org.kiama.example.til.TIL2_1Main$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.transform.Analysis$: eval_top$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: whitespaceParser$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: lambda$lzycompute() :: 1
org.kiama.example.oberon0.base.source.ModuleDecl: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: falseConstant$lzycompute() :: 1
org.kiama.example.lambda.Generator.$anonfun: apply(s: String) :: 1
org.kiama.example.til.TIL2_1Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.til.TIL2_1Tests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.SECDBase.PushMachineException: productIterator() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: returnexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: optelse$lzycompute() :: 1
org.kiama.example.lambda2.AST.Var: hashCode() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: mkrefexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: throwtoexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.oberon0.drivers.A2a$: guard(Lscala/Function0;) :: 1
org.kiama.example.json.ParsingTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.prolog.Main$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$34: Parser.this.~[Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$3: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.compiler.Syntax.If: hashCode() :: 1
org.kiama.example.iswim.secd.IntegerOps.Sub: productIterator() :: 1
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.lambda3.AST.FreeNamesQuery: hashCode() :: 1
org.kiama.example.oberon0.L4.Parser: idnlist() :: 1
org.kiama.example.oberon0.base.TranslatingDriver: usageMessage() :: 1
org.kiama.example.picojava.NameResolution$$anonfun$org$kiama$example$picojava$NameResolution$$finddecl$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.lambda2.LazySubstEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.iswim.secd.ConversionOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.picojava.TypeAnalysis.$anonfun.$anonfun: apply(x0$5: org.kiama.example.picojava.AbstractSyntax.TypeDecl) :: 1
org.kiama.example.RISC.RISCISA.MOVI: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis$$anonfun$4: org$kiama$example$iswim$compiler$SemanticAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2bTests: comment$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.iswim.tests.ParserTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.dataflow.Driver: keyword$lzycompute() :: 1
org.kiama.util.PositionedParserUtilities: parseAndPosition([T]f: scala.util.parsing.input.Reader[Char] => PositionedParserUtilities.this.ParseResult[T],in: scala.util.parsing.input.Reader[Char]) :: 1
org.kiama.example.oberon0.drivers.A3$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2a$: rep1(Lscala/Function0;) :: 1
org.kiama.attribution.Attribution: paramAttr([A, T <: Object, U]optNameDef: Option[String],f: A => T => U) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(i: Int) :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: letLetRen$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: commit(Lscala/Function0;) :: 1
org.kiama.example.iswim.secd.BooleanOps.FalseValue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.iswim.secd.IOOps.Read: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.drivers.A1$: typedef$lzycompute() :: 1
org.kiama.example.picojava.Parser$$anonfun$name$1$$anonfun$apply$6: org$kiama$example$picojava$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.imperative.AST.Asgn: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase$ByteCode: pos_$eq(Lscala/util/parsing/input/Position;) :: 1
org.kiama.example.oberon0.base.Parser.$anonfun: apply(x0$1: List[org.kiama.example.oberon0.base.source.Statement]) :: 1
org.kiama.util.ParserUtilitiesTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.util.ParserUtilitiesTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.prolog.PrologTree.Var: apply(s: String) :: 1
org.kiama.example.til.TIL1_1$$anonfun$if_statement$4$$anonfun$apply$13: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.RISCTree.Ret: hashCode() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$5: org.kiama.example.iswim.compiler.Syntax.Variable) :: 1
org.kiama.example.lambda.Generator.$anonfun: apply(l: org.kiama.example.lambda.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A4Tests: writeProc$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: expconst$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: parameters$lzycompute() :: 1
org.kiama.example.json.ParsingTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Tests: expression$lzycompute() :: 1
org.kiama.example.imperative.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A4Tests: typebasetype$lzycompute() :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(x0$4: org.kiama.example.obr.ObrTree.ObrNode) :: 1
org.kiama.example.iswim.secd.SECDBase.StackUnderflow: <init>() :: 1
org.kiama.example.oberon0.drivers.A2a$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.util.TestCompiler.$anonfun: apply() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A3$: namedtypedef$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.Main$: parser() :: 1
org.kiama.example.picojava.AbstractSyntax$Program: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.drivers.A2a$: constrainedInt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.oberon0.L0.source.MulExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A2bTests: assert(Lscala/Option;Ljava/lang/Object;) :: 1
org.kiama.example.lambda3.Lambda$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.lambda3.LambdaTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter: caseToDoc(s: org.kiama.example.oberon0.L2.source.CaseStatement) :: 1
org.kiama.example.oberon0.drivers.A2a$: forStatement$lzycompute() :: 1
org.kiama.rewriting.Rewriter: term(t: Any) :: 1
org.kiama.example.obr.RISCTree.CmpltW: productIterator() :: 1
org.kiama.example.picojava.NameResolution.$anonfun.$anonfun: apply(x0$3: org.kiama.attribution.Attributable) :: 1
org.kiama.example.imperative.Generator: genMul(sz: Int) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.output.NonAssoc: productArity() :: 1
org.kiama.example.obr.RISCTree.SequenceDatum: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: caseStatement$lzycompute() :: 1
org.kiama.example.lambda2.AST.App: hashCode() :: 1
org.kiama.example.lambda2.Lambda$: start$lzycompute() :: 1
org.kiama.example.prolog.PrologTree.Fact: productIterator() :: 1
org.kiama.example.obr.ObrTree.IdnExp: <init>() :: 1
org.kiama.example.lambda2.LambdaTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.L3.Parser: statementDef() :: 1
org.kiama.example.oberon0.L3.source.Call: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun: apply(x0$2: org.kiama.example.iswim.secd.SECDBase.ByteCode) :: 1
org.kiama.example.til.TIL2_1Main: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$comment$1$$anonfun$apply$3$$anonfun$apply$5: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2bTests: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.oberon0.drivers.A2aPhases: $init$() :: 1
org.kiama.example.dataflow.Driver: commit(Lscala/Function0;) :: 1
org.kiama.example.transform.Driver: parser() :: 1
org.kiama.example.prolog.PrologTree.Integer: hashCode() :: 1
org.kiama.example.oberon0.L2.Parser$$anonfun$kase$1: org$kiama$example$oberon0$L2$Parser$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilitiesTests: node$lzycompute() :: 1
org.kiama.example.iswim.secd.IOOps.Write: canEqual(x$1: Any) :: 1
org.kiama.example.picojava.AbstractSyntax.UnknownDecl: productIterator() :: 1
org.kiama.example.iswim.tests.ParserTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.source.GtExp: <init>() :: 1
org.kiama.example.json.Main: <init>() :: 1
org.kiama.example.lambda.AST.Var: apply(x: String) :: 1
org.kiama.example.json.PrettyPrinting.$anonfun: apply(p: org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue) :: 1
org.kiama.example.iswim.secd.IntegerOps.Mult: productIterator() :: 1
org.kiama.example.til.TIL2_1Main$: write_statement$lzycompute() :: 1
org.kiama.attribution.Attributable: next([T]) :: 1
org.kiama.example.lambda.LambdaTests$$anonfun$1: org$kiama$example$lambda$LambdaTests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.base.source.IdnUse: productIterator() :: 1
org.kiama.util.REPLBase: main(args: Array[String]) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: term4$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: expression$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: namedtypedef$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: declaration$lzycompute() :: 1
org.kiama.example.json.ParsingTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.json.ParsingTests: commit(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.c.CLeExp: priority() :: 1
org.kiama.example.obr.SymbolTable.Multiple: hashCode() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$16: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.til.TIL1_1Tests: declaration$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A2b$: trueConstant$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: elsifs$lzycompute() :: 1
org.kiama.example.obr.ObrTree.ForStmt: apply(idn: String,min: org.kiama.example.obr.ObrTree.Expression,max: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]) :: 1
org.kiama.example.lambda.LambdaTests: start$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.lambda3.Lambda$: process(Ljava/lang/Object;) :: 1
org.kiama.example.picojava.Main$: IDENTIFIER$lzycompute() :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark: createProgram(subtree: org.kiama.example.picojava.AbstractSyntax.ClassDecl) :: 1
org.kiama.example.oberon0.drivers.A4Tests: typedef$lzycompute() :: 1
org.kiama.example.obr.ObrTree.Catch: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2a$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.base.source.Identifier) :: 1
org.kiama.example.lambda2.LambdaTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A3$: idndeflist$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests.Tup6: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.L4.source.PrettyPrinter: $init$() :: 1
org.kiama.example.lambda2.AST.Lam: hashCode() :: 1
org.kiama.example.lambda.LambdaTests: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$4$$anonfun$apply$18: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$18: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.til.TransformingMain: process(reader: java.io.Reader) :: 1
org.kiama.example.picojava.NameResolution.$anonfun.$anonfun: apply(x0$4: org.kiama.example.picojava.AbstractSyntax.TypeDecl) :: 1
org.kiama.example.iswim.compiler.Syntax.Minus: hashCode() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$14: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.til.TIL1_1Tests: read_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: constdecl$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.IntExp: <init>() :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: letLet$lzycompute() :: 1
org.kiama.example.json.Driver: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$kiama$example$iswim$compiler$CodeGenerator$_setter_$code_$eq(Lscala/Function1;) :: 1
org.kiama.rewriting.Rewriter: topdown(s: ) :: 1
org.kiama.machine.Machine.$anonfun: apply(x$3: Machine.this.Update) :: 1
org.kiama.example.oberon0.drivers.A2aTests: Named$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$5: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL1_1.$anonfun: apply(s: String) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun.$anonfun.$anonfun: apply(check$ifrefutable$1: org.kiama.example.oberon0.base.source.IdnDef) :: 1
org.kiama.util.ParserUtilitiesTests$Node: org$kiama$util$ParserUtilitiesTests$Node$$$outer() :: 1
org.kiama.example.til.TIL1_1Tests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A1$: rep1(Lscala/Function0;) :: 1
org.kiama.rewriting.Rewriter.Strategy: <+(q: ) :: 1
org.kiama.example.picojava.AbstractSyntax.WhileStmt: productIterator() :: 1
org.kiama.example.lambda.LambdaTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: super$deftypeDef() :: 1
org.kiama.machine.Machine: <init>() :: 1
org.kiama.example.lambda.LambdaTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.transform.Driver: integer$lzycompute() :: 1
org.kiama.util.Environments: enter(env: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,Environments.this.Entity]]) :: 1
org.kiama.example.iswim.compiler.Syntax.Remainder: hashCode() :: 1
org.kiama.example.json.ParsingTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_1Main$: success(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$12: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.json.ParsingTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.util.ParserUtilities: any() :: 1
org.kiama.example.oberon0.drivers.A3Tests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL1_1Main$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun: apply(x0$1: org.kiama.example.iswim.secd.SECDBase.ByteCode) :: 1
org.kiama.example.oberon0.drivers.A3$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A3$: tipe$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: guard(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: commit(Lscala/Function0;) :: 1
org.kiama.example.lambda3.AST.Var: hashCode() :: 1
org.kiama.output.ParenPrettyPrinter$class: fo$lzycompute$1(Lorg/kiama/output/ParenPrettyPrinter;Lscala/runtime/ObjectRef;Lorg/kiama/output/PrettyOperatorExpression;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.iswim.secd.SECDBase.BindPrims: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A2aTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.imperative.AST.Neg: productIterator() :: 1
org.kiama.example.picojava.tests.ParserTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: rep1(Lscala/Function0;) :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(op: String) :: 1
org.kiama.example.oberon0.base.source.EmptyStmt: productIterator() :: 1
org.kiama.example.iswim.compiler.Syntax.Remainder: productIterator() :: 1
org.kiama.example.til.TIL2_3Main$: for_statement$lzycompute() :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$: scala$App$_setter_$executionStart_$eq(J) :: 1
org.kiama.example.oberon0.L0.CCodeGenerator: super$translate(s: org.kiama.example.oberon0.base.source.Statement) :: 1
org.kiama.example.obr.ObrTree.NotExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: Named$lzycompute() :: 1
org.kiama.example.iswim.secd.IntComparisonOps.LessThan: productIterator() :: 1
org.kiama.example.til.TIL1_1Tests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.lambda3.LambdaTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.rewriting.Rewriter: query([T]f: PartialFunction[Any,T]) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.oberon0.drivers.A2a$: NoSuccess$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$21: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],List[org.kiama.example.iswim.compiler.Syntax.MatchClause]]) :: 1
org.kiama.example.til.TIL2_2Tests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.lambda3.AST.EvalQuery: execute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$3: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.dataflow.Driver: process(ast: org.kiama.example.dataflow.DataflowAST.Stm,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(s: String) :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.dataflow.Dataflow$: org$kiama$example$dataflow$VariablesImpl$_setter_$uses_$eq(Lscala/Function1;) :: 1
org.kiama.example.lambda3.LambdaTests: mkprinttest(s: String,r: String) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envir_$eq(Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_1Main$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: expconst$lzycompute() :: 1
org.kiama.example.picojava.AbstractSyntax.BooleanLiteral: apply(Value: String) :: 1
org.kiama.example.oberon0.L0.SymbolTable$Constant: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.obr.SyntaxAnalysis: lvalue$lzycompute() :: 1
org.kiama.example.iswim.secd.BooleanOps.PushTrue: hashCode() :: 1
org.kiama.example.json.ParsingTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.tests.ParserTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.json.Driver: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.L2.source.ValCond: apply(value: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.attribution.Decorators$Chain: andThen(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L3.c.CDerefExp: hashCode() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$24: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L3.source.ProcDecl: body() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$7: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.example.prolog.PrologTree.Atom: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: optelse$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable$UserType: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2a$: typedeclsection$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$leave$1$$anonfun$3$$anonfun$apply$3: org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: vardecl$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$20: Parser.this.~[Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr],List[org.kiama.example.iswim.compiler.Syntax.Expr]]) :: 1
org.kiama.example.til.TIL2_1Main$: factor$lzycompute() :: 1
org.kiama.example.picojava.Main$: class_decl$lzycompute() :: 1
org.kiama.example.iswim.driver.PrettyPrinter: <init>() :: 1
org.kiama.example.oberon0.drivers.A2aTests: lhs$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$unreachable_$eq(Lscala/Function1;) :: 1
org.kiama.util.TestCompiler.$anonfun: apply(args: Array[String]) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L1.TypeAnalyser: super$exptypeDef() :: 1
org.kiama.example.oberon0.drivers.A3Tests: comment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: elsifs$lzycompute() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: subsLam$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: intexp$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2a$: caseStatement$lzycompute() :: 1
org.kiama.example.oberon0.L4.CCodeGenerator: super$translate(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.secd.ExceptionHandler$ExnContValue: org$kiama$example$iswim$secd$ExceptionHandler$ExnContValue$$$outer() :: 1
org.kiama.util.ParserUtilitiesTests$Tup4: org$kiama$util$ParserUtilitiesTests$Tup4$$$outer() :: 1
org.kiama.example.oberon0.L3.SymbolTable$BuiltinProc: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.iswim.driver.Main$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.tests.ParserTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: Tup4$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(x$5: org.kiama.example.iswim.secd.SECDBase.FunctionSpec) :: 1
org.kiama.util.CompilerTests: convertToEqualizer(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.L2.source.ValCond: <init>() :: 1
org.kiama.example.til.TIL1_1Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.til.TIL2_3Tests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_1Tests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.lambda2.Lambda$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.json.Driver: jstring$lzycompute() :: 1
org.kiama.example.lambda.AST.App: apply(l: org.kiama.example.lambda.AST.Exp,r: org.kiama.example.lambda.AST.Exp) :: 1
org.kiama.example.iswim.secd.IntegerOps.Add: productIterator() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.util.ParserUtilitiesTests: success(Ljava/lang/Object;) :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark.$anonfun: <init>() :: 1
org.kiama.example.oberon0.L0.source.NamedType: <init>() :: 1
org.kiama.example.json.ParsingTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun: apply(xo: Option[org.kiama.example.oberon0.L4.source.FieldList]) :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(clos: SECDBase.this.ClosureValue) :: 1
org.kiama.example.picojava.NullObjects: <init>() :: 1
org.kiama.example.lambda3.LambdaTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$TransformingDriver$_setter_$printiastFlagDefault_$eq(Z) :: 1
org.kiama.example.prolog.SyntaxAnalysis: literal$lzycompute() :: 1
org.kiama.example.obr.ParserDriver: process(ast: org.kiama.example.obr.ObrTree.ObrInt,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.iswim.tests.ParserTests: pattern$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.lambda2.Analysis: tipe() :: 1
org.kiama.example.imperative.Imperative$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L1.Parser$$anonfun$elsif$2: org$kiama$example$oberon0$L1$Parser$$anonfun$$$outer() :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun.$anonfun.$anonfun: apply(child: org.kiama.attribution.Attributable) :: 1
org.kiama.example.oberon0.drivers.A4Tests: idnuse$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$8: PrettyPrinterBase.this.Doc,x$9: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.til.AST.Decl: apply(i: org.kiama.example.til.AST.Id) :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$: inputs_$eq(Lscala/collection/mutable/ArrayBuffer;) :: 1
org.kiama.example.til.TIL1_1Main$: success(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A3$: commit(Lscala/Function0;) :: 1
org.kiama.example.picojava.Main$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: ident$lzycompute() :: 1
org.kiama.example.lambda.AST.Lam: hashCode() :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) :: 1
org.kiama.example.oberon0.L4.Parser: fieldlist() :: 1
org.kiama.example.prolog.SyntaxAnalysis: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.obr.ObrTree.RaiseStmt: <init>() :: 1
org.kiama.example.oberon0.L3.SymbolTable$Procedure: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.example.oberon0.L3.c.CAddrExp: priority() :: 1
org.kiama.example.oneohonecompanies.Company.DU: productIterator() :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: $init$() :: 1
org.kiama.example.oberon0.L0.source.GeExp: <init>() :: 1
org.kiama.example.oberon0.L3.Parser: super$keywordStrings() :: 1
org.kiama.example.lambda2.AST.Var: <init>() :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$example$imperative$Generator$_setter_$genDouble_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(n: org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.example.picojava.tests.ErrorTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ErrorTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: cases$lzycompute() :: 1
org.kiama.example.lambda2.AST.SubOp: <init>() :: 1
org.kiama.example.iswim.secd.ConversionOps.ConversionError: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$matchclause$1$$anonfun$apply$127: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.SECDBase$$anon$2: org$kiama$example$iswim$secd$SECDBase$$anon$$$outer() :: 1
org.kiama.example.til.TIL2_2Tests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A2bTests: simpexp$lzycompute() :: 1
org.kiama.util.JLineConsole$: reader$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: constantdecl$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: assertEval(mech: String,term: String,result: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.picojava.AbstractSyntax.UnknownDecl: hashCode() :: 1
org.kiama.example.oberon0.L1.source.WhileStatement: hashCode() :: 1
org.kiama.example.oberon0.L2.TypeAnalyser: super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.til.TIL2_1Tests: factor$lzycompute() :: 1
org.kiama.example.oberon0.L4.NameAnalyser: $init$() :: 1
org.kiama.example.oberon0.drivers.A1$: declarations$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: block$lzycompute() :: 1
org.kiama.example.prolog.SemanticTestDriver: process(ast: org.kiama.example.prolog.PrologTree.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.lambda3.LambdaTests: integer$lzycompute() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: subsOpn$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.NumVal: hashCode() :: 1
org.kiama.example.transform.AST.Program: apply(ops: List[String, Int) :: 1
org.kiama.example.oberon0.drivers.A1$: value$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.tests.ErrorTests: org$kiama$example$picojava$Parser$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: throwtoexpr$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration) :: 1
org.kiama.example.oberon0.drivers.A3Tests: commit(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L1.Parser$$anonfun$statementDef$1: org$kiama$example$oberon0$L1$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1$: elsif$lzycompute() :: 1
org.kiama.example.obr.RISCTree.DivW: productIterator() :: 1
org.kiama.util.TestCompiler.$anonfun.$anonfun: <init>() :: 1
org.kiama.example.til.TIL2_3Main$: not(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.lambda2.Lambda: process(e: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: factor$lzycompute() :: 1
org.kiama.example.lambda2.AST.Let: e2() :: 1
org.kiama.example.iswim.secd.SECDBase.UnboundVariable: <init>() :: 1
org.kiama.example.oberon0.drivers.A1$: kase$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: comment$lzycompute() :: 1
org.kiama.example.json.JSONTree.JFalse: productIterator() :: 1
org.kiama.example.json.JSONTree.JObject: hashCode() :: 1
org.kiama.example.json.ParsingTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.drivers.A4Tests: factor$lzycompute() :: 1
org.kiama.example.dataflow.DataflowAST.While: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: typedef$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: statements$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: skipWhitespace() :: 1
org.kiama.rewriting.Rewriter$$anonfun$oncetd$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter: option(o: ) :: 1
org.kiama.example.obr.SyntaxAnalysis: commit(Lscala/Function0;) :: 1
org.kiama.example.lambda2.Reduce.$anonfun.$anonfun: apply() :: 1
org.kiama.example.iswim.secd.StackOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.json.ParsingTests: rep(Lscala/Function0;) :: 1
org.kiama.example.imperative.AST.Neg: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: vardecl$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: parser$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: idntype$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.dataflow.Driver: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl: productIterator() :: 1
org.kiama.example.til.TIL2_3Tests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.obr.ObrTree.WhileStmt: apply(cond: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$assignment$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.iswim.driver.Main$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: keyword$lzycompute() :: 1
org.kiama.example.dataflow.Driver: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.imperative.Imperative$: asgnStmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: idndeflist$lzycompute() :: 1
org.kiama.example.imperative.Generator.$anonfun: apply(v: String) :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: subsOpn$lzycompute() :: 1
org.kiama.example.lambda.AST.App: <init>() :: 1
org.kiama.example.oberon0.L0.source.NotExp: hashCode() :: 1
org.kiama.example.til.TIL2_1Tests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.util.ParserUtilitiesTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.iswim.secd.ConversionOps.ToString: canEqual(x$1: Any) :: 1
org.kiama.example.transform.AST$ASTNode: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.obr.ObrTree.OrExp: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase.Enter: productIterator() :: 1
org.kiama.example.json.JSONTree.JObject: apply(fields: List[org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue) :: 1
org.kiama.example.til.TIL2_2Main$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$primstmt$1$$anonfun$apply$185: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) :: 1
org.kiama.example.iswim.tests.ParserTests: NoSuccess$lzycompute() :: 1
org.kiama.attribution.AttributionBase: constant([T <: Object, U]optNameDef: Option[String],u: ) :: 1
org.kiama.example.oberon0.drivers.A2b$: intexp$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.LtExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.til.TIL2_2Main$: success(Ljava/lang/Object;) :: 1
org.kiama.example.json.Driver: rep(Lscala/Function0;) :: 1
org.kiama.example.til.Main.$anonfun: apply(arg: String) :: 1
org.kiama.util.ParserUtilitiesTests.Tup4: <init>() :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis.$anonfun.$anonfun: apply(x0$3: org.kiama.example.iswim.compiler.Syntax.Variable) :: 1
org.kiama.rewriting.NominalRewriter: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: idnuse$lzycompute() :: 1
org.kiama.example.dataflow.VariablesImpl.$anonfun: apply(x0$3: org.kiama.example.dataflow.DataflowAST.Stm) :: 1
org.kiama.example.oberon0.drivers.A2bTests: Named$lzycompute() :: 1
org.kiama.example.til.AST.IfElse: apply(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat],f: Seq[org.kiama.example.til.AST.Stat]) :: 1
org.kiama.example.oberon0.L2.Parser$$anonfun$statementDef$1: org$kiama$example$oberon0$L2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$: start_$eq(J) :: 1
org.kiama.example.lambda3.AST.Lam: hashCode() :: 1
org.kiama.example.til.TIL2_1Main$: parser$lzycompute() :: 1
org.kiama.example.prolog.PrologTree: <init>() :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: subsLam$lzycompute() :: 1
org.kiama.util.WhitespaceParser: super$regex(r: scala.util.matching.Regex) :: 1
org.kiama.example.obr.SyntaxAnalysis.Pos: apply(s: String) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: Pos$lzycompute() :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$4: org.kiama.example.prolog.PrologTree.SourceNode) :: 1
org.kiama.example.oberon0.L1.CCodeGenerator: super$translate(s: org.kiama.example.oberon0.base.source.Statement) :: 1
org.kiama.example.lambda2.Parser$$anonfun$exp1$1: org$kiama$example$lambda2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: identRegex$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Empty: <init>() :: 1
org.kiama.example.iswim.driver.Main$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.lambda2.LambdaTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.L0.c.CNegExp: exp() :: 1
org.kiama.example.json.JSONTree.JString: productIterator() :: 1
org.kiama.example.oberon0.drivers.A4Tests: fldidn$lzycompute() :: 1
org.kiama.example.json.ParsingTests: jnumber$lzycompute() :: 1
org.kiama.example.til.AST.Write: apply(e: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A2a$: term$lzycompute() :: 1
org.kiama.example.til.TIL1_1: whiteSpace() :: 1
org.kiama.example.obr.ObrTree.Catch: <init>() :: 1
org.kiama.example.imperative.Imperative$: keyword$lzycompute() :: 1
org.kiama.example.lambda2.ParEagerSubst$$anonfun$y$lzycompute$1$1$$anonfun$apply$15: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3Tests: falseConstant$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CMulExp: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.drivers.A4Tests: idnlist$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: ttype$lzycompute() :: 1
org.kiama.example.lambda3.Parser: $init$() :: 1
org.kiama.example.picojava.Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.iswim.secd.SECDBase.MatchError: hashCode() :: 1
org.kiama.util.ParserUtilitiesTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.output.RightAssoc: <init>() :: 1
org.kiama.example.transform.Driver: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.L4.source.RecordTypeDef: apply(fields: List[org.kiama.example.oberon0.L4.source.FieldList]) :: 1
org.kiama.example.picojava.tests.ParserTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.til.TIL2_2Tests: org$kiama$example$til$TIL2_2$_setter_$fortowhile_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.iswim.tests.ParserTests: term4$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: lhs$lzycompute() :: 1
org.kiama.example.oberon0.L1.c.PrettyPrinter: $init$() :: 1
org.kiama.example.oberon0.L3.SymbolTable$Procedure: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: letrecexpr$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: read_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: rootconstexp$lzycompute() :: 1
org.kiama.example.imperative.Generator: genInternalStmt(sz: Int) :: 1
org.kiama.example.lambda2.LambdaTests: idn$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: getParams(Lscala/collection/Seq;Lorg/scalatest/prop/Configuration$PropertyCheckConfig;) :: 1
org.kiama.example.json.Driver: whiteSpace() :: 1
org.kiama.rewriting.Rewriter: oncetd(s: ) :: 1
org.kiama.example.picojava.Main$: rep1(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.BoolExp: hashCode() :: 1
org.kiama.example.til.TIL2_1Tests: commit(Lscala/Function0;) :: 1
org.kiama.example.prolog.SyntaxAnalysis: integer$lzycompute() :: 1
org.kiama.example.lambda3.Lambda$: variable$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: term$lzycompute() :: 1
org.kiama.example.obr.RISCTree.RemW: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2a$: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.oneohonecompanies.Total.$anonfun: apply(x$1: Double,x$2: Double) :: 1
org.kiama.example.oberon0.L3.SymbolTable$Parameter: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.secd.BooleanOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) :: 1
org.kiama.attribution.AttributionBase$Attribute: apply$mcVI$sp(I) :: 1
org.kiama.example.lambda2.AST.Lam: apply(i: String,t: org.kiama.example.lambda2.AST.Type,e: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.util.ParserUtilitiesTests.Tup3: apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node) :: 1
org.kiama.rewriting.Rewriter: Term() :: 1
org.kiama.example.oberon0.drivers.A1$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.base.TransformingDriver: super$processargs(args: List[String]) :: 1
org.kiama.example.obr.SymbolTable.Unknown: hashCode() :: 1
org.kiama.example.json.ParsingTests: jname$lzycompute() :: 1
org.kiama.example.lambda2.AST.NoType: hashCode() :: 1
org.kiama.example.iswim.secd.StringOps.$anonfun: apply(c: Char) :: 1
org.kiama.example.lambda3.LambdaTests: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: intexp$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: parenexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$clause$3: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: forStatement$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.obr.SyntaxAnalysis: statement() :: 1
org.kiama.util.WhitespaceParser: parsingWhitespace_=(x$1: Boolean) :: 1
org.kiama.example.oberon0.drivers.A3Tests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.tests.ParserTests: tupleexpr$lzycompute() :: 1
org.kiama.example.oberon0.L2.Parser$$anonfun$condition$1: org$kiama$example$oberon0$L2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L2.source.MinMaxCond: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.PushType: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: letstmt$lzycompute() :: 1
org.kiama.example.iswim.secd.StackOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.picojava.AbstractSyntax.Program: hashCode() :: 1
org.kiama.example.transform.Parser: whiteSpace() :: 1
org.kiama.example.iswim.secd.SECDBase.TypeTypeValue: hashCode() :: 1
org.kiama.output.Prefix: canEqual(x$1: Any) :: 1
org.kiama.example.til.TIL2_3Main$: skipWhitespace() :: 1
org.kiama.example.lambda2.AST.AddOp: <init>() :: 1
org.kiama.example.oberon0.L3.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.RISC.RISCISA.MUL: hashCode() :: 1
org.kiama.example.lambda2.AST.Let: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$9: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$26: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.c.CInitDecl: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,e: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.picojava.tests.ParserTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.til.TIL1_1Tests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L4.SymbolTable: $init$() :: 1
org.kiama.example.lambda2.LambdaTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: start$lzycompute() :: 1
org.kiama.output.LeftAssoc: <init>() :: 1
org.kiama.example.oberon0.drivers.A2aTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.secd.RecordOps: super$evalInst() :: 1
org.kiama.example.til.TIL2_1Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.dataflow.DataflowAST.Assign: apply(left: String,right: String) :: 1
org.kiama.example.imperative.AST.Mul: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.obr.SymbolTable: reset() :: 1
org.kiama.example.oberon0.drivers.A3Tests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.json.Driver: rep1(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L1.source.WhileStatement: <init>() :: 1
org.kiama.example.oberon0.base.TestDriver: processline$default$4() :: 1
org.kiama.example.lambda2.AST$Exp: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.util.TestCompiler.$anon: accept(dir: java.io.File,name: String) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$simpexp$1$$anonfun$apply$26$$anonfun$apply$27: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_3Main$: if_statement$lzycompute() :: 1
org.kiama.example.picojava.Main$: block_stmt$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.CaseStatement: <init>() :: 1
org.kiama.example.iswim.tests.ParserTests: throwtoexpr$lzycompute() :: 1
org.kiama.example.obr.ObrTree.OrExp: productIterator() :: 1
org.kiama.example.iswim.driver.Main$: returnexpr$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: term$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.NeExp: productIterator() :: 1
org.kiama.example.iswim.driver.Main$: org$kiama$example$iswim$compiler$CodeGenerator$_setter_$code_$eq(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L1.c.CWhileStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,stmt: org.kiama.example.oberon0.base.c.CStatement) :: 1
org.kiama.example.json.Driver: jnull$lzycompute() :: 1
org.kiama.example.picojava.AbstractSyntax.Use: hashCode() :: 1
org.kiama.rewriting.Rewriter: rulefs(f: PartialFunction[Any,Rewriter.this.Strategy]) :: 1
org.kiama.example.til.AST.Write: hashCode() :: 1
org.kiama.rewriting.Rewriter: everywheretd(s: ) :: 1
org.kiama.example.oberon0.L3.NameAnalyser$$anonfun$envinl$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.til.AST.Var: apply(i: org.kiama.example.til.AST.Id) :: 1
org.kiama.example.oberon0.drivers.A3Tests: ident$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$vardeclsection$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.iswim.driver.Main$: exprstmt$lzycompute() :: 1
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: <init>() :: 1
org.kiama.example.til.TIL1_1Tests: statement$lzycompute() :: 1
org.kiama.example.iswim.secd.IntegerOps.PushInt: productIterator() :: 1
org.kiama.example.iswim.compiler.Syntax.Or: productIterator() :: 1
org.kiama.example.dataflow.Parser: keyword() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests.$anonfun: <init>() :: 1
org.kiama.example.transform.Parser: ident() :: 1
org.kiama.example.picojava.AbstractSyntax.VarDecl: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.lambda.Generator.$anonfun.$anonfun: apply(sz: Int) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun.$anonfun: apply(x0$1: org.kiama.example.oberon0.L3.source.FPSection,x1$1: Int) :: 1
org.kiama.example.oberon0.drivers.A4Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: booleanType$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Val: productIterator() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun: apply(x0$1: org.kiama.example.iswim.compiler.Syntax.Variable) :: 1
org.kiama.example.obr.RISCTree.Write: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$14: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.oberon0.drivers.A3Tests: simpexp$lzycompute() :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$id_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.imperative.Generator.$anonfun: apply() :: 1
org.kiama.example.oberon0.L2.source.Case: <init>() :: 1
org.kiama.example.picojava.Main$: block$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.CallCC: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: env$lzycompute() :: 1
org.kiama.attribution.AttributionBase$ParamAttributeKey: org$kiama$attribution$AttributionBase$ParamAttributeKey$$$outer() :: 1
org.kiama.example.obr.ObrTree.EnumConst: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CEqExp: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: super$tipeDef() :: 1
org.kiama.example.oberon0.drivers.A2bPhases: $init$() :: 1
org.kiama.example.til.TIL2_2Main$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.transform.AST.VarDecl: productIterator() :: 1
org.kiama.example.lambda2.LambdaTests: success(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.compiler.Syntax.IswimProg: productIterator() :: 1
org.kiama.example.obr.ObrTree.BoolVar: productIterator() :: 1
org.kiama.attribution.Attributable: children() :: 1
org.kiama.example.lambda3.LambdaTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.base.source.IdnDef: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis: variabledecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: parser() :: 1
org.kiama.example.oberon0.drivers.A1$: constdeclsection$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase: list$default$3([T]) :: 1
org.kiama.example.oberon0.L0.source.AddExp: productIterator() :: 1
org.kiama.example.lambda2.Par.$anonfun.$anonfun: apply(x0$1: org.kiama.example.lambda2.AST.Bind) :: 1
org.kiama.example.obr.SyntaxAnalysis.Pos: <init>(s: String) :: 1
org.kiama.example.oneohonecompanies.Precedence.$anonfun: isDefinedAt(x1: org.kiama.example.oneohonecompanies.Company.Node) :: 1
org.kiama.example.til.TIL2_2Main$: program$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: factor$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.imperative.AST.While: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: unknownType$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.util.ParserUtilitiesTests: Tup4() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: arithop$lzycompute() :: 1
org.kiama.example.picojava.AbstractSyntax.BooleanLiteral: <init>() :: 1
org.kiama.rewriting.Rewriter: map(s: ) :: 1
org.kiama.example.oberon0.L4.SymbolTable$Field: org$kiama$example$oberon0$L4$SymbolTable$Field$$$outer() :: 1
org.kiama.example.iswim.secd.IntegerOps.Rem: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests: rep(Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.lambda.LambdaTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$7: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.til.TIL2_3Tests: for_statement$lzycompute() :: 1
org.kiama.example.transform.Parser: program() :: 1
org.kiama.util.CompilerTests$$anonfun$2: org$kiama$util$CompilerTests$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$letexpr$1$$anonfun$apply$145: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.imperative.Generator.$anonfun.$anonfun: apply(sz: Int) :: 1
org.kiama.example.til.TIL2_3Tests: term$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: variable$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Ret: productIterator() :: 1
org.kiama.example.dataflow.Dataflow$: org$kiama$example$dataflow$LivenessImpl$_setter_$in_$eq(Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_2Tests: read_statement$lzycompute() :: 1
org.kiama.machine.Machine.ParamState: change(t: T,u: U) :: 1
org.kiama.example.imperative.Parser: integer() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: tipeDef() :: 1
org.kiama.example.oberon0.drivers.A3$: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.iswim.driver.Main$: emptyexpr$lzycompute() :: 1
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.example.oberon0.base.source.IdnUse: apply(ident: String) :: 1
org.kiama.example.picojava.Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.lambda.LambdaTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.lambda.LambdaTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.c.CAddExp: canEqual(x$1: Any) :: 1
org.kiama.example.dataflow.DataflowAST.Empty: productIterator() :: 1
org.kiama.example.picojava.tests.ErrorTests.$anonfun: <init>() :: 1
org.kiama.example.lambda3.AST.EvalQuery: hashCode() :: 1
org.kiama.example.lambda2.AST.FunType: <init>() :: 1
org.kiama.example.obr.ObrTree$ObrNode: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.prolog.SemanticTestDriver: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$66: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.ForStmt: <init>() :: 1
org.kiama.example.til.AST.Mul: hashCode() :: 1
org.kiama.example.dataflow.Dataflow$: org$kiama$example$dataflow$VariablesImpl$_setter_$defines_$eq(Lscala/Function1;) :: 1
org.kiama.example.iswim.tests.ParserTests: intRegex$lzycompute() :: 1
org.kiama.example.transform.Analysis.$anonfun.$anonfun: apply(e: org.kiama.example.transform.AST.ExpR) :: 1
org.kiama.example.iswim.compiler.Syntax.Block: productIterator() :: 1
org.kiama.example.json.SyntaxAnalysis$$anonfun$jvalue$1: org$kiama$example$json$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.SymbolTable: defenv() :: 1
org.kiama.example.iswim.secd.BooleanOps.Test: productIterator() :: 1
org.kiama.example.lambda2.Reduce: beta() :: 1
org.kiama.example.oberon0.drivers.A1Tests: declarations$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: conditions$lzycompute() :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$5: org.kiama.example.prolog.PrologTree.SourceNode) :: 1
org.kiama.example.prolog.Main: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.RISC.RISCISA.$anonfun: apply(line: org.kiama.example.RISC.RISCISA.Assembler) :: 1
org.kiama.example.til.TIL1_1Tests: write_statement$lzycompute() :: 1
org.kiama.example.json.Driver: jname$lzycompute() :: 1
org.kiama.example.lambda3.Parser$$anonfun$exp$1$$anonfun$apply$19$$anonfun$apply$21: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_2Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: factor$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envir_$eq(Lscala/Function1;) :: 1
org.kiama.example.lambda.Lambda$: org$kiama$example$lambda$Evaluator$_setter_$normal_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.prolog.PrologTree.Pred: <init>() :: 1
org.kiama.example.oberon0.drivers.A2b$: constdeclsection$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CAddExp: priority() :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: declsToDoc(ds: List[org.kiama.example.oberon0.base.source.Declaration]) :: 1
org.kiama.example.iswim.compiler.Syntax.ExprStmt: <init>(e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 1
org.kiama.util.IO: filereader$default$2() :: 1
org.kiama.example.oberon0.base.Driver: super$process(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.json.ParsingTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.til.AST.Sub: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.transform.AST.BinExpR: productIterator() :: 1
org.kiama.example.lambda2.Par.$anonfun: applyOrElse([A1 <: org.kiama.example.lambda2.AST.Bind, B1 >: org.kiama.example.lambda2.AST.Exp]x8: A1,default: A1 => B1) :: 1
org.kiama.example.iswim.secd.HeapOps.Put: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$10: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.oberon0.L3.SymbolTable$BuiltinProc: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.transform.Analysis.$anonfun.$anonfun: apply(x0$4: org.kiama.attribution.Attributable) :: 1
org.kiama.example.transform.Analysis.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.til.AST.Mul: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.TypeError: hashCode() :: 1
org.kiama.example.lambda.LambdaTests.$anonfun.$anonfun: apply(b: Boolean) :: 1
org.kiama.output.PrettyPrinter$$anonfun$line$1$$anonfun$5$$anonfun$apply$7: org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda.LambdaTests: integer$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: start$lzycompute() :: 1
org.kiama.util.GeneratingREPLBase: process(t: T) :: 1
org.kiama.example.oberon0.drivers.A3Tests: step$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: statement$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Other$: salary$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: idnuse$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: declarations$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: factor$lzycompute() :: 1
org.kiama.example.oberon0.L4.NameAnalyser.$anonfun: apply(x$1: org.kiama.example.oberon0.L4.source.FieldList) :: 1
org.kiama.example.obr.SymbolTable.EnumType: hashCode() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: exprstmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: idndeflist$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.secd.StringOps$UserExceptionValue: org$kiama$example$iswim$secd$StringOps$UserExceptionValue$$$outer() :: 1
org.kiama.example.iswim.tests.ParserTests: applic$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Not: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CGeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.oberon0.base.TranslatingTestDriver: $init$() :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: arithop$lzycompute() :: 1
org.kiama.rewriting.Rewriter: rulef(f: Any => Any) :: 1
org.kiama.example.imperative.Parser: asgnStmt() :: 1
org.kiama.example.iswim.secd.HeapOps.Alloc: productIterator() :: 1
org.kiama.example.lambda.LambdaGen$: org$kiama$example$lambda$Generator$_setter_$genIdn_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.iswim.tests.ParserTests: Pos$lzycompute() :: 1
org.kiama.example.obr.SemanticDriver: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: commit(Lscala/Function0;) :: 1
org.kiama.example.obr.RISCTree.Beq: productIterator() :: 1
org.kiama.example.til.TIL2_3Main$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.json.PrettyPrinting.$anonfun: apply(t: org.kiama.example.json.JSONTree.JValue) :: 1
org.kiama.example.obr.ObrTree.TryBody: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.L4.Parser$$anonfun$typedefDef$1$$anonfun$apply$2: org$kiama$example$oberon0$L4$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.picojava.AbstractSyntax.Block: productIterator() :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(s: String) :: 1
org.kiama.example.obr.SyntaxAnalysis: parser$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: keyword$lzycompute() :: 1
org.kiama.example.json.ParsingTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$issubterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(x$6: org.kiama.example.iswim.secd.SECDBase.FunctionSpec, SECDBase.this.ClosureValue) :: 1
org.kiama.example.oberon0.drivers.A1$: elsifs$lzycompute() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: isDefinedAt(x2: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.example.til.TIL2_2Tests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$3$$anonfun$apply$16: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: step$lzycompute() :: 1
org.kiama.util.ParserUtilities: regexnows(r: scala.util.matching.Regex) :: 1
org.kiama.example.lambda.LambdaTests.$anonfun.$anonfun: apply(i: Int) :: 1
org.kiama.example.oberon0.L0.c.COrExp: priority() :: 1
org.kiama.example.iswim.compiler.Syntax.LessEq: hashCode() :: 1
org.kiama.example.iswim.driver.Main$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_3Tests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.util.Environments: isDefinedInEnv(env: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,Environments.this.Entity]],i: String) :: 1
org.kiama.example.json.ParsingTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.json.Driver: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.til.TIL2_1Tests$$anonfun$4: org$kiama$example$til$TIL2_1Tests$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: matchexpr$lzycompute() :: 1
org.kiama.rewriting.NominalAST.Name.$anonfun: apply() :: 1
org.kiama.example.imperative.Imperative$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.lambda2.ReduceEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.til.TIL2_1Tests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_3Tests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.AbstractSyntax.Use: productIterator() :: 1
org.kiama.example.lambda2.AST: <init>() :: 1
org.kiama.machine.Machine.State: value() :: 1
org.kiama.example.lambda.LambdaTests: check(Lorg/scalacheck/Prop;Lscala/collection/Seq;Lorg/scalatest/prop/Configuration$PropertyCheckConfig;) :: 1
org.kiama.example.oberon0.drivers.A2b$: unknownType$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Company.PU: hashCode() :: 1
org.kiama.example.lambda2.Reduce: s() :: 1
org.kiama.example.oberon0.L3.SymbolTable$ParamInfo: org$kiama$example$oberon0$L3$SymbolTable$ParamInfo$$$outer() :: 1
org.kiama.example.til.AST.Eq: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.output.PrettyPrinterBase: enclose(l: PrettyPrinterBase.this.Doc,d: PrettyPrinterBase.this.Doc,r: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.obr.SyntaxAnalysis: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.drivers.A2bTests: whitespaceParser$lzycompute() :: 1
org.kiama.rewriting.NominalAST.GenName: initcount() :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$18$$anonfun$apply$19: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.AST.Bind: <init>(i: String,e: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.obr.ObrTree.IfStmt: productIterator() :: 1
org.kiama.example.transform.Driver: exp$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.lambda3.Lambda$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A3$: comment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: caseStatement$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Plus: productIterator() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$10: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.prolog.Main$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.RISC.RISCISA.DIV: hashCode() :: 1
org.kiama.example.dataflow.Driver: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.til.TIL2_2Tests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: Pos$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: rootconstexp$lzycompute() :: 1
org.kiama.example.oberon0.base.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.picojava.tests.ErrorTests: exp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: optformalParameters$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L1.TypeAnalyser: exptypeDef() :: 1
org.kiama.example.oberon0.drivers.A1Tests: typedeclsection$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: ttype0$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: typedecl$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL2_2Main$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.picojava.AbstractSyntax.VarDecl: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3Tests: intexp$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.iswim.tests.ParserTests: letexpr$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.ArrayTypeDef: productIterator() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: super$rootconstexpDef() :: 1
org.kiama.example.lambda3.LambdaTests: name$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_3Tests: expression$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L2.source.ValCond: hashCode() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: subsVar$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Equal: productIterator() :: 1
org.kiama.example.lambda3.Lambda$: skipWhitespace() :: 1
org.kiama.example.oberon0.drivers.A2b$: expression$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: moduledecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: kase$lzycompute() :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(node: org.kiama.attribution.Attributable) :: 1
org.kiama.example.obr.RISCTree.SequenceDatum: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: constrainedInt$lzycompute() :: 1
org.kiama.example.obr.ObrTree.IndexExp: hashCode() :: 1
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.obr.RISCTree.SubW: productIterator() :: 1
org.kiama.example.picojava.tests.ErrorTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.iswim.compiler.Syntax.Times: productIterator() :: 1
org.kiama.example.iswim.compiler.Syntax.LessEq: productIterator() :: 1
org.kiama.util.CompilerTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$2$$anonfun$apply$4$$anonfun$apply$5$$anonfun$apply$7: org$kiama$example$lambda2$ParLazyShare$$anonfun$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilities.$anonfun: apply(x0$6: ParserUtilities.this.~[A,B]) :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: s$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: assignment$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: if_statement$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.driver.Main$: letrecstmt$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.RD: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.Negate: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: ident$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$8: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: intRegex$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: org$kiama$example$picojava$Parser$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: info() :: 1
org.kiama.example.lambda.Lambda$: org$kiama$example$lambda$Evaluator$_setter_$xgc_reduction_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.imperative.AST.Var: apply(s: String) :: 1
org.kiama.example.oberon0.L0.SymbolTable$Variable: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.oberon0.L0.SymbolTable: isInteger(e: SymbolTable.this.Type) :: 1
org.kiama.example.obr.SymbolTable.BoolType: hashCode() :: 1
org.kiama.output.PrettyPrinter.$anonfun.$anonfun.$anonfun: apply(p: Int,dq: scala.collection.immutable.Queue[Int, Boolean => Int => String) :: 1
org.kiama.example.oberon0.drivers.A2bTests: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda2.Lambda: <init>() :: 1
org.kiama.example.picojava.TypeAnalysis.$anonfun.$anonfun: apply(x0$4: org.kiama.example.picojava.AbstractSyntax.TypeDecl) :: 1
org.kiama.example.oberon0.drivers.A3$: statements$lzycompute() :: 1
org.kiama.example.lambda2.AST.Num: hashCode() :: 1
org.kiama.example.til.TIL2_2Tests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.base.TranslatingDriver: consumeast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$3: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.util.Positioned: setPos(p: org.kiama.util.Positioned) :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$4: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.attribution.Decorators$Chain: apply$mcVI$sp(I) :: 1
org.kiama.example.oberon0.L0.c.CSubExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.oberon0.base.Parser: statementDef() :: 1
org.kiama.example.til.TIL2_1Main$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.json.JSONTree: <init>() :: 1
org.kiama.example.til.AST.Div: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2bTests: idntype$lzycompute() :: 1
org.kiama.example.json.PrettyPrinting: super$pretty(d: PrettyPrinting.this.Doc,w: Int) :: 1
org.kiama.util.ParserUtilitiesTests: skipWhitespace() :: 1
org.kiama.example.picojava.tests.ErrorTests: name$lzycompute() :: 1
org.kiama.example.transform.Analysis$: prioenv$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.MatchClause: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2a$: statementSequence$lzycompute() :: 1
org.kiama.example.transform.Parser: integer() :: 1
org.kiama.example.lambda2.LazySubstEvaluator: subsLam$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda2.LambdaTests: check(Lorg/scalacheck/Prop;Lscala/collection/Seq;Lorg/scalatest/prop/Configuration$PropertyCheckConfig;) :: 1
org.kiama.example.lambda3.AST.SwapQuery: apply(tr: org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name) :: 1
org.kiama.example.oberon0.drivers.A3$: NoSuccess$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: rep1(Lscala/Function0;) :: 1
org.kiama.attribution.Attribution: <init>() :: 1
org.kiama.example.picojava.tests.ErrorTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.tests.ParserTests: callccexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: ifStatement$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$27: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Variable,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.obr.ObrTree.ForStmt: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3Tests: env$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: stmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: elsifs$lzycompute() :: 1
org.kiama.example.imperative.AST.Div: hashCode() :: 1
org.kiama.example.prolog.SyntaxAnalysis: terms$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.EqExp: hashCode() :: 1
org.kiama.example.lambda3.LambdaTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.ConversionOps.ToInt: canEqual(x$1: Any) :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$isleaf_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.obr.ObrTree.ExnConst: <init>() :: 1
org.kiama.example.oberon0.L0.SymbolTable$IntegerValue: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: subsLam$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable$BuiltinType: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.example.iswim.secd.ExceptionHandler.SetHandler: hashCode() :: 1
org.kiama.example.til.TIL2_3Tests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.Desugarer.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A3Tests: block$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Binding: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$example$oberon0$base$TransformingDriver$_setter_$pprintiastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: <init>() :: 1
org.kiama.rewriting.NominalRewriter: Binding() :: 1
org.kiama.example.obr.RISCTree.Indexed: productIterator() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$110: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.RISCTree.LdW: hashCode() :: 1
org.kiama.example.RISC.RISCISA.BNE: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis: rep(Lscala/Function0;) :: 1
org.kiama.example.imperative.AST.Sub: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecexpr$1$$anonfun$apply$151: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.SECDBase: dump$lzycompute() :: 1
org.kiama.example.lambda2.LazySubstEvaluator: subsOpn$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda3.LambdaTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.iswim.compiler.Parser: bindexpr(rhsexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.obr.ObrTree.NotExp: apply(exp: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.example.oberon0.drivers.A3Tests: condition$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CNeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.obr.RISCTree.Read: productIterator() :: 1
org.kiama.util.Environments.$anonfun: apply() :: 1
org.kiama.example.json.SyntaxAnalysis$$anonfun$jobject$1: org$kiama$example$json$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter: reduce(s: ) :: 1
org.kiama.example.iswim.secd.BooleanOps.Equals: productIterator() :: 1
org.kiama.example.lambda2.LambdaTests.$anonfun: apply(n: String) :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: subsOpn$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Company.Employee: hashCode() :: 1
org.kiama.util.ParserUtilitiesTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.til.TIL1_1Tests: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L4.Parser.$anonfun: apply(x$1: List[Option[org.kiama.example.oberon0.L4.source.FieldList]]) :: 1
org.kiama.example.iswim.secd.SECDBase.UnboundVariable: hashCode() :: 1
org.kiama.example.json.Driver: parser$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: valexpr$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.Case: apply(conds: List[org.kiama.example.oberon0.L2.source.Condition],block: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.lambda3.AST.SubstQuery: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CNegExp: priority() :: 1
org.kiama.example.iswim.compiler.Syntax.LetRec: hashCode() :: 1
org.kiama.example.oberon0.L0.source.DivExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.tests.ParserTests: org$kiama$example$iswim$compiler$Parser$_setter_$reserved_$eq(Lscala/collection/immutable/HashSet;) :: 1
org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.til.TIL2_3Main$: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A3$: typedecl$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: expression$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.AndExp: productIterator() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: ifelseexpr$lzycompute() :: 1
org.kiama.example.oberon0.L3.c.CAddrType: <init>(basetype: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.example.til.TIL2_2Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.L4.Parser: fldidn() :: 1
org.kiama.example.prolog.SymbolTable.IntegerType: hashCode() :: 1
org.kiama.example.til.TIL2_2Tests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A2a$: integerType$lzycompute() :: 1
org.kiama.example.picojava.Parser.$anonfun.$anonfun: apply(x0$1: Parser.this.~[org.kiama.example.picojava.AbstractSyntax.Access,String]) :: 1
org.kiama.example.oberon0.drivers.A3$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$statementDef$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue: hashCode() :: 1
org.kiama.example.iswim.secd.ConversionOps.ToString: <init>() :: 1
org.kiama.example.oberon0.L2.Lifter: super$transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement) :: 1
org.kiama.example.oberon0.L4.CCodeGenerator: super$translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) :: 1
org.kiama.example.oberon0.drivers.A2bTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.til.TIL2_1Tests: program$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: vardecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: optvar$lzycompute() :: 1
org.kiama.example.til.AST.Div: <init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.iswim.compiler.Syntax.Divide: hashCode() :: 1
org.kiama.example.oberon0.base.CCodeGenerator: $init$() :: 1
org.kiama.output.PrettyPrinter.Doc: apply(iw: Int, Int) :: 1
org.kiama.example.lambda.AST.Var: hashCode() :: 1
org.kiama.example.oneohonecompanies.Company.Company: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: statementSequence$lzycompute() :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$isleaf_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.picojava.AbstractSyntax.Block: apply(BlockStmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]) :: 1
org.kiama.example.oberon0.L0.source.TypeDecl: hashCode() :: 1
org.kiama.example.til.TIL1_1$$anonfun$if_statement$2: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: Int]x1: A1,default: A1 => B1) :: 1
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: <init>() :: 1
org.kiama.example.picojava.PredefinedTypes.$anonfun: apply(x0$1: org.kiama.attribution.Attributable) :: 1
org.kiama.example.picojava.tests.ParserTests: exp$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: whileStatement$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: mkvaluetest([T]s: String,r: T) :: 1
org.kiama.example.oberon0.drivers.A1Tests: term$lzycompute() :: 1
org.kiama.example.obr.SymbolTable.RecordType: hashCode() :: 1
org.kiama.example.iswim.driver.Main$: term1$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.iswim.secd.SECDBase.Exit: productIterator() :: 1
org.kiama.output.PrettyPrinterBase: lbracket() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun: apply(x0$7: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.AssignNode,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.dataflow.Driver: blockStm$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax: <init>() :: 1
org.kiama.example.til.TIL2_1Tests: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazyUpdate.$anonfun: <init>() :: 1
org.kiama.example.til.TIL1_1Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.tests.ParserTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.attribution.Attributable: <init>() :: 1
org.kiama.example.oberon0.drivers.A2a$: writeProc$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.util.ParserUtilitiesTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: blockexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: block$lzycompute() :: 1
org.kiama.example.imperative.Generator: genExp(sz: Int) :: 1
org.kiama.example.picojava.Main$: exp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: parser$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.CaseStatement: productIterator() :: 1
org.kiama.example.til.TIL2_3Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.util.Patterns: <init>() :: 1
org.kiama.example.imperative.Imperative$: start$lzycompute() :: 1
org.kiama.example.iswim.secd.BooleanOps.Test: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.Variable: productIterator() :: 1
org.kiama.example.lambda.LambdaTests: opt(Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$matchexpr$1$$anonfun$apply$112$$anonfun$apply$113: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.ExceptionHandler.SetHandler: <init>() :: 1
org.kiama.example.transform.Driver: op$lzycompute() :: 1
org.kiama.output.PrettyPrinter$$anonfun$text$1$$anonfun$4: org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.WhitespaceParser: super$positioned([T <: scala.util.parsing.input.Positional]p: ) :: 1
org.kiama.example.oberon0.drivers.A2b$: statementSequence$lzycompute() :: 1
org.kiama.example.obr.ObrTree.MinusExp: hashCode() :: 1
org.kiama.example.imperative.Imperative$: factor$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: hashCode() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$start$1$$anonfun$apply$15: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L3.source.ProcDecl: <init>() :: 1
org.kiama.example.iswim.secd.IntegerOps.DivisionByZero: hashCode() :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: subsVar$lzycompute() :: 1
org.kiama.util.Positioned: setFinish(p: scala.util.parsing.input.Position) :: 1
org.kiama.example.prolog.SyntaxAnalysis: list$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: unknownType$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: fpsection$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: step$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: primary$lzycompute() :: 1
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) :: 1
org.kiama.example.iswim.secd.SECDBase: envir$lzycompute() :: 1
org.kiama.example.prolog.PrologTree.Fact: <init>() :: 1
org.kiama.example.obr.ObrTree.LessExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: simpexp$lzycompute() :: 1
org.kiama.example.oberon0.base.source.IdnUse: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$returnexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL2_1Tests$$anonfun$2: org$kiama$example$til$TIL2_1Tests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2a$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2a$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.obr.ObrTree.FieldExp: hashCode() :: 1
org.kiama.example.oberon0.L0.c.PrettyPrinter: $init$() :: 1
org.kiama.example.lambda.AST.App: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CNeExp: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.base.source.IdnUse: <init>(ident: String) :: 1
org.kiama.example.iswim.driver.Main$: variable$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CGtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.imperative.AST.While: apply(e: org.kiama.example.imperative.AST.Exp,b: org.kiama.example.imperative.AST.Stmt) :: 1
org.kiama.example.iswim.tests.ParserTests: factor$lzycompute() :: 1
org.kiama.example.lambda2.AST.Var: productIterator() :: 1
org.kiama.example.lambda3.AST.EquivQuery: execute() :: 1
org.kiama.example.obr.ObrTree.IntConst: apply(idn: String,value: Int) :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: subsOpn$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.MVNI: hashCode() :: 1
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$prune$1: org$kiama$output$PrettyPrinter$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L1.source.IfStatement: hashCode() :: 1
org.kiama.example.imperative.Imperative$: sequence$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: whileexpr$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.drivers.A2a$: lhs$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.MkClosures: toDoc() :: 1
org.kiama.example.iswim.compiler.Parser: Pos() :: 1
org.kiama.example.oberon0.drivers.A3$: lhs$lzycompute() :: 1
org.kiama.example.dataflow.Dataflow: <init>() :: 1
org.kiama.example.oberon0.drivers.A1Tests: value$lzycompute() :: 1
org.kiama.example.lambda2.Parser.$anonfun: apply(s: String) :: 1
org.kiama.example.obr.RISCTree.SubW: hashCode() :: 1
org.kiama.example.oberon0.L0.source.TypeDecl: idndef() :: 1
org.kiama.example.oberon0.drivers.A1Tests: elsif$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$unreachable_$eq(Lscala/Function1;) :: 1
org.kiama.example.lambda3.LambdaTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.obr.RISCTransformation.$anonfun: apply(x0$4: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.util.ParserUtilitiesTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.til.TIL2_3Tests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.iswim.compiler.Syntax.Apply: hashCode() :: 1
org.kiama.example.oberon0.L4.SymbolTable.Field: hashCode() :: 1
org.kiama.example.oberon0.L3.NameAnalyser: envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.example.iswim.secd.StackOps.Dup: productIterator() :: 1
org.kiama.example.oberon0.L3.c.PrettyPrinter.$anonfun: apply(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.lambda.Lambda$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: vardeclsection$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.iswim.secd.SECDBase: control$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: ident$lzycompute() :: 1
org.kiama.example.lambda3.Lambda$: query$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: caseStatement$lzycompute() :: 1
org.kiama.example.oberon0.L2.Desugarer$$anonfun$2: org$kiama$example$oberon0$L2$Desugarer$$anonfun$$$outer() :: 1
org.kiama.example.imperative.Imperative$: idn$lzycompute() :: 1
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$8$$anonfun$apply$9: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.Lambda$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun: apply(b: scala.collection.mutable.Buffer[String],s: String) :: 1
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.oberon0.L4.SymbolTable: isNotRecord(e: SymbolTable.this.Entity) :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: s$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$callccexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.SymbolTable$Variable: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.driver.Main$: letrecexpr$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SyntaxAnalysis: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.imperative.PrettyPrinter: <init>() :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter: casesToDoc(l: List[org.kiama.example.oberon0.L2.source.Case]) :: 1
org.kiama.example.til.TIL1_1$$anonfun$for_statement$2: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL1_1Tests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.L3.c.PrettyPrinter: super$basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: super$translate(s: org.kiama.example.oberon0.base.source.Statement) :: 1
org.kiama.example.imperative.AST.Null: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: integerType$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: forStatement$lzycompute() :: 1
org.kiama.example.picojava.Main$: boolean_literal$lzycompute() :: 1
org.kiama.example.imperative.AST.Asgn: apply(v: org.kiama.example.imperative.AST.Var,e: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.example.iswim.secd.IntComparisonOps.LessThan: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: comment$lzycompute() :: 1
org.kiama.example.til.AST.While: apply(e: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]) :: 1
org.kiama.example.lambda2.AST.IntType: productIterator() :: 1
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) :: 1
org.kiama.output.RightAssoc: productElement(x$1: Int) :: 1
org.kiama.util.ParserUtilitiesTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: procedureDeclaration$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L3.source.FPSection: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase$ExceptionValue: pos_$eq(Lscala/util/parsing/input/Position;) :: 1
org.kiama.example.iswim.secd.SECDBase.Exit: hashCode() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun.$anonfun: apply(fps: org.kiama.example.oberon0.L3.source.FPSection) :: 1
org.kiama.example.oberon0.L0.c.CAndExp: priority() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$9: org.kiama.example.iswim.secd.SECDBase.CodeTree,x1$1: org.kiama.example.iswim.compiler.Syntax.Expr) :: 1
org.kiama.example.oberon0.drivers.A3Tests: idntype$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: applic$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.VarDecl: idndefs() :: 1
org.kiama.example.picojava.tests.ErrorTests: assign_stmt$lzycompute() :: 1
org.kiama.example.til.AST.Assign: hashCode() :: 1
org.kiama.example.obr.RISCTree.RISCProg: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2a$: statements$lzycompute() :: 1
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$envin$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L3.source.Call: params() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.til.AST.Read: apply(i: org.kiama.example.til.AST.Id) :: 1
org.kiama.example.obr.SemanticAnalysis: errors() :: 1
org.kiama.example.oberon0.drivers.A3$: expression$lzycompute() :: 1
org.kiama.example.prolog.SymbolTable$: Named$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: Tup3$lzycompute() :: 1
org.kiama.example.picojava.ErrorCheck: <init>() :: 1
org.kiama.example.til.TIL2_3Main$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.obr.SymbolTable.Variable: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: optvar$lzycompute() :: 1
org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc: hashCode() :: 1
org.kiama.example.oberon0.L2.NameAnalyser: super$rootconstexpDef() :: 1
org.kiama.example.lambda2.Lambda$: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$1$$anonfun$apply$3: org$kiama$example$lambda2$ParLazySubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.prolog.SyntaxAnalysis: opt(Lscala/Function0;) :: 1
org.kiama.example.dataflow.Optimise: elimDeadAssign() :: 1
org.kiama.example.oberon0.drivers.A3$: assignment$lzycompute() :: 1
org.kiama.example.lambda2.PrettyPrinter$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.iswim.secd.HeapOps.RefValue: hashCode() :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: super$declsection(d: org.kiama.example.oberon0.base.source.Declaration) :: 1
org.kiama.example.lambda.Lambda$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.picojava.AbstractSyntax.BooleanLiteral: productIterator() :: 1
org.kiama.example.til.TIL2_1Tests: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.til.TIL1_1Tests: program$lzycompute() :: 1
org.kiama.example.prolog.SemanticTestDriver: info() :: 1
org.kiama.example.lambda3.AST.SwapQuery: execute() :: 1
org.kiama.example.iswim.secd.RecordOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.oberon0.drivers.A3$: idnuse$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$6$$anonfun$apply$31$$anonfun$apply$33: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_1Tests: assignment_statement$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.L0.source.IdnExp: productIterator() :: 1
org.kiama.example.obr.ObrTree.AssignStmt: hashCode() :: 1
org.kiama.example.obr.ObrTree.ReturnStmt: hashCode() :: 1
org.kiama.example.til.TIL1_1Main$: primary$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Read: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$2: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3$: writelnProc$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: idnuse$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.imperative.Imperative$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_3Main$: integer$lzycompute() :: 1
org.kiama.output.RightAssoc: productIterator() :: 1
org.kiama.example.oberon0.L4.source.FieldExp: <init>() :: 1
org.kiama.example.til.TIL1_1$$anonfun$for_statement$3: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 1
org.kiama.example.dataflow.DataflowAST.If: hashCode() :: 1
org.kiama.example.obr.ObrTree.IntConst: <init>() :: 1
org.kiama.example.obr.RISCTransformation.$anonfun: apply(x0$3: org.kiama.example.obr.ObrTree.Statement) :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.Identifier) :: 1
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply() :: 1
org.kiama.example.obr.SymbolTable.UnknownType: hashCode() :: 1
org.kiama.example.lambda3.Lambda$: factor$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: namedtypedef$lzycompute() :: 1
org.kiama.example.oberon0.L2.NameAnalyser.$anonfun: apply(x0$1: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.secd.SECDBase.Enter: hashCode() :: 1
org.kiama.example.picojava.Main$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SyntaxAnalysis: simplexp$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: while_statement$lzycompute() :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$example$imperative$Generator$_setter_$genNum_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.til.TIL1_1Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.output.PrettyPrinter.$anonfun: apply(x0$2: Int, Int) :: 1
org.kiama.example.iswim.secd.SECDBase.TypeError: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$ifelseexpr$1$$anonfun$apply$169: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.output.Postfix: <init>() :: 1
org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: value() :: 1
org.kiama.example.oneohonecompanies.Depth.$anonfun: apply(x0$1: Any,x1$1: Seq[Int]) :: 1
org.kiama.example.imperative.AST.Null: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1$: condition$lzycompute() :: 1
org.kiama.example.picojava.Main$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A1$: intexp$lzycompute() :: 1
org.kiama.example.oberon0.L4.SymbolTable.Field: ident() :: 1
org.kiama.util.Messaging.$anonfun: apply(x$1: org.kiama.util.Messaging.Record,x$2: org.kiama.util.Messaging.Record) :: 1
org.kiama.example.oberon0.L1.Parser: statementDef() :: 1
org.kiama.example.obr.SyntaxAnalysis: lvalue() :: 1
org.kiama.example.oberon0.drivers.A4Tests: isconst$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: parser$lzycompute() :: 1
org.kiama.util.GeneratingREPLBase: processline(line: String) :: 1
org.kiama.example.iswim.secd.SECDBase.TailApp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2bTests: statementSequence$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Local: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1$: typedeclsection$lzycompute() :: 1
org.kiama.example.oberon0.base.Driver: initialiseSemanticAnalysis() :: 1
org.kiama.attribution.Attributable: super$clone() :: 1
org.kiama.example.oneohonecompanies.Precedence: <init>() :: 1
org.kiama.example.picojava.Main$: opt(Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$blockexpr$1$$anonfun$apply$130: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3$: falseConstant$lzycompute() :: 1
org.kiama.example.transform.Parser.$anonfun: apply(s: String) :: 1
org.kiama.example.iswim.driver.Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.output.PrettyPrinter.$anonfun.$anonfun: apply(p: Int,dq: scala.collection.immutable.Queue[Int, Boolean => Int => String) :: 1
org.kiama.example.picojava.tests.ParserTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_3Tests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.rewriting.NominalRewriter.$anonfun.$anonfun: apply() :: 1
org.kiama.example.til.TIL1_1Main$: factor$lzycompute() :: 1
org.kiama.example.json.PrettyPrinter$: org$kiama$example$json$PrettyPrinting$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.lambda.Generator.$anonfun.$anonfun: apply(b: org.kiama.example.lambda.AST.Exp) :: 1
org.kiama.example.lambda2.ParLazy.$anonfun: apply() :: 1
org.kiama.example.oberon0.L4.Parser.$anonfun: apply(x0$1: Parser.this.~[List[String],org.kiama.example.oberon0.L0.source.TypeDef]) :: 1
org.kiama.example.obr.RISCTree.CmpeqW: hashCode() :: 1
org.kiama.example.til.TIL1_1Main$: skipWhitespace() :: 1
org.kiama.machine.Machine: updates() :: 1
org.kiama.example.oberon0.drivers.A2bTests: keyword$lzycompute() :: 1
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: <init>() :: 1
org.kiama.example.picojava.Main$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun.$anonfun: apply(child: org.kiama.attribution.Attributable) :: 1
org.kiama.example.oberon0.L0.Parser.$anonfun: <init>() :: 1
org.kiama.example.oberon0.L0.source.DivExp: productIterator() :: 1
org.kiama.example.transform.AST: <init>() :: 1
org.kiama.example.dataflow.Driver: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L2.source.ForStatement: <init>() :: 1
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$2: org$kiama$example$oberon0$L2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.IdnExp: apply(idn: String) :: 1
org.kiama.example.oberon0.L3.c.CAddrExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.oberon0.L4.Parser: lhsDef() :: 1
org.kiama.util.ParserUtilitiesTests.Tup5: <init>() :: 1
org.kiama.example.oberon0.drivers.A2a$: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.obr.ObrTree.NegExp: productIterator() :: 1
org.kiama.example.transform.Analysis.$anonfun.$anonfun: apply(x0$1: org.kiama.example.transform.AST.ASTNode) :: 1
org.kiama.attribution.Attribution.CachedParamAttribute.$anon.$anonfun: apply(x$2: String) :: 1
org.kiama.example.oberon0.drivers.A3$: intexp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: parser$lzycompute() :: 1
org.kiama.example.imperative.Parser$$anonfun$term$1$$anonfun$apply$12: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda.Evaluator.$anonfun: apply() :: 1
org.kiama.example.til.TIL1_1Tests: keyword$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.AbstractSyntax.ClassDecl: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: unknownType$lzycompute() :: 1
org.kiama.example.til.TIL2_2: $init$() :: 1
org.kiama.example.til.TIL2_3Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.output.PrettyPrinterBase: softline() :: 1
org.kiama.example.til.TIL2_2Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: expression$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.lambda2.AST.Letp: <init>(bs: List[org.kiama.example.lambda2.AST.Bind],e: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.iswim.driver.Main$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: beta$lzycompute() :: 1
org.kiama.example.lambda2.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A3$: constrainedInt$lzycompute() :: 1
org.kiama.example.obr.RISCTree.CmpltW: hashCode() :: 1
org.kiama.example.iswim.secd.IntegerOps.Add: hashCode() :: 1
org.kiama.example.oberon0.L2.source.Case: productIterator() :: 1
org.kiama.example.lambda3.Lambda$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A3$: block$lzycompute() :: 1
org.kiama.example.iswim.driver.Main: main(args: Array[String]) :: 1
org.kiama.example.oberon0.drivers.A2aTests: intexp$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc) :: 1
org.kiama.util.ParserUtilitiesTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: commit(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: hashCode() :: 1
org.kiama.example.iswim.driver.Main$: pattern$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.oberon0.L0.source.MulExp: <init>() :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.lambda.LambdaGen$: org$kiama$example$lambda$Generator$_setter_$genVar_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.til.TIL2_3Tests: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda2.LambdaTests: exp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.til.TIL1_1$$anonfun$for_statement$4: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.Lambda$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2a$: trueConstant$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: guard(Lscala/Function0;) :: 1
org.kiama.example.til.AST.Eq: <init>() :: 1
org.kiama.example.oberon0.drivers.A2b$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.SlashExp: hashCode() :: 1
org.kiama.example.iswim.secd.IntegerOps.IntValue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: optformalParameters$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.iswim.secd.StringOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$example$oberon0$base$TestDriver$_setter_$maxlanglevel_$eq(I) :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.oberon0.L1.source.WhileStatement: block() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$typedeclsection$1: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A4Tests: Named$lzycompute() :: 1
org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) :: 1
org.kiama.example.oberon0.drivers.A2aTests: idndeflist$lzycompute() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$parameters$1: org$kiama$example$oberon0$L3$TypeAnalyser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1$: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.prolog.Interpreter.DisplayGoal: hashCode() :: 1
org.kiama.example.til.TIL2_3Main$: commit(Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: term4$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: term$lzycompute() :: 1
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: <init>() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: term3$lzycompute() :: 1
org.kiama.example.oberon0.base.TransformingDriver: super$usageMessage() :: 1
org.kiama.example.oberon0.drivers.A3Tests: factor$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: whitespaceParser$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: Pos$lzycompute() :: 1
org.kiama.example.dataflow.DataflowAST.Assign: <init>() :: 1
org.kiama.example.lambda3.AST.FreshQuery: apply(n: org.kiama.rewriting.NominalAST.Name,e: org.kiama.example.lambda3.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.til.TIL1_1Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: isconst$lzycompute() :: 1
org.kiama.example.oberon0.L3.source.ProcDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,params: List[org.kiama.example.oberon0.L3.source.FPSection],body: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.oberon0.L3.SymbolTable: super$defenvPairs() :: 1
org.kiama.example.imperative.Imperative$: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A2a$: procedureCall$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: writelnProc$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: rep1(Lscala/Function0;) :: 1
org.kiama.util.Messaging: message(value: org.kiama.util.Positioned,message: String) :: 1
org.kiama.example.iswim.tests.ParserTests: whitespaceParser$lzycompute() :: 1
org.kiama.example.oberon0.base.c.CArrayType: hashCode() :: 1
org.kiama.example.oberon0.L3.c.CDerefExp: priority() :: 1
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$throwtoexpr$1$$anonfun$apply$177: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.GreaterExp: hashCode() :: 1
org.kiama.example.iswim.secd.StackOps.Pop: hashCode() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(u: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.iswim.secd.ExceptionHandler: evalInst() :: 1
org.kiama.example.transform.Driver: vardecl$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CAssignment: <init>(desig: org.kiama.example.oberon0.base.c.CExpression,exp: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.oberon0.drivers.A4Tests: tipe$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: signed$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: term3$lzycompute() :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: isDefinedAt(x1: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.oberon0.L3.NameAnalyser: super$envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.attribution.Attributable: index() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: variable$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) :: 1
org.kiama.example.dataflow.DataflowAST.Return: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase.ResumeFromDump: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2b$: NoSuccess$lzycompute() :: 1
org.kiama.util.Environments: isDefinedInScope(env: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,Environments.this.Entity]],i: String) :: 1
org.kiama.example.transform.Analysis$: ops$lzycompute() :: 1
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$1: org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$1: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.picojava.Main$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.source.NotExp: priority() :: 1
org.kiama.example.til.TIL2_1Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.L3.Parser$$anonfun$declarationsDef$1$$anonfun$apply$1$$anonfun$apply$2: org$kiama$example$oberon0$L3$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.picojava.AbstractSyntax.AssignStmt: productIterator() :: 1
org.kiama.example.oberon0.L3.source.VarMode: <init>() :: 1
org.kiama.example.json.Driver: jobject$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$isSemanticallyCorrect_$eq(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: block$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: assignment_statement$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.AppCC: hashCode() :: 1
org.kiama.util.CompilerTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.til.AST.Ne: hashCode() :: 1
org.kiama.util.REPLBase: setup(args: Array[String]) :: 1
org.kiama.example.til.TIL2_3Main: <init>() :: 1
org.kiama.example.oberon0.L0.source.NegExp: <init>() :: 1
org.kiama.example.oberon0.base.c.CFunctionDecl: hashCode() :: 1
org.kiama.example.prolog.SyntaxAnalysis: program$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$8: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.til.AST.For: apply(i: org.kiama.example.til.AST.Id,f: org.kiama.example.til.AST.Exp,t: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]) :: 1
org.kiama.example.iswim.driver.Main$: tupleexpr$lzycompute() :: 1
org.kiama.example.iswim.secd.HeapOps: super$evalInst() :: 1
org.kiama.example.iswim.secd.ConversionOps.ToBoolean: canEqual(x$1: Any) :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(x0$6: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.iswim.secd.SECDBase.MkClosures.$anonfun: apply(fs: org.kiama.example.iswim.secd.SECDBase.FunctionSpec) :: 1
org.kiama.example.lambda2.AST.Lam: i() :: 1
org.kiama.example.til.TIL2_1Tests: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2b$: idnuse$lzycompute() :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$6: org.kiama.example.prolog.PrologTree.SourceNode) :: 1
org.kiama.example.oberon0.drivers.A2a$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SyntaxAnalysis$Pos: org$kiama$example$obr$SyntaxAnalysis$Pos$$$outer() :: 1
org.kiama.example.lambda.Parser$$anonfun$factor$1$$anonfun$apply$9: org$kiama$example$lambda$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter$$anonfun$map$1$$anonfun$applyOrElse$2$$anonfun$apply$1$$anonfun$applyOrElse$4: org$kiama$rewriting$Rewriter$$anonfun$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.RaiseStmt: hashCode() :: 1
org.kiama.attribution.Attribution$: org$kiama$attribution$AttributionBase$$CircularState$lzycompute() :: 1
org.kiama.example.json.ParsingTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L4.source.PrettyPrinter: super$toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.til.TIL1_1Main$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Tests: commit(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.IntParam: hashCode() :: 1
org.kiama.example.lambda2.Lambda$: skipWhitespace() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$35$$anonfun$apply$36: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: writelnProc$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2b$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.machine.Machine$ParamUpdater: org$kiama$machine$Machine$ParamUpdater$$$outer() :: 1
org.kiama.example.lambda3.LambdaTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.compiler.Syntax.Empty: productIterator() :: 1
org.kiama.example.picojava.tests.ErrorTests: var_decl$lzycompute() :: 1
org.kiama.util.CompilerTests: fail(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A3$: vardecl$lzycompute() :: 1
org.kiama.example.obr.SymbolTable.IntType: hashCode() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$6: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.til.AST.Str: apply(s: String) :: 1
org.kiama.example.dataflow.Optimise: <init>() :: 1
org.kiama.example.lambda2.ParLazyShare: s() :: 1
org.kiama.example.oberon0.base.source.ModuleDecl: productIterator() :: 1
org.kiama.example.dataflow.Driver: opt(Lscala/Function0;) :: 1
org.kiama.example.prolog.Interpreter.$anonfun: apply(check$ifrefutable$1: String, org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.example.oberon0.drivers.A3$: factor$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.L0.source.LtExp: hashCode() :: 1
org.kiama.util.PositionedParserUtilities: Parser([T]f: scala.util.parsing.input.Reader[Char] => PositionedParserUtilities.this.ParseResult[T]) :: 1
org.kiama.example.iswim.secd.SECDBase.EmptyValue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.iswim.secd.IOOps: super$evalInst() :: 1
org.kiama.example.iswim.tests.ParserTests: primstmt$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: reducesinlambdas() :: 1
org.kiama.example.obr.SyntaxAnalysis: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.til.TIL2_3Tests: string$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.BSR: hashCode() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: subsLam$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests.$anonfun.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazyShare.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.iswim.driver.Main$: comment$lzycompute() :: 1
org.kiama.example.obr.Driver: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: start$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests$$anonfun$2: org$kiama$example$til$TIL2_2Tests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.c.CTypeDef: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl) :: 1
org.kiama.example.iswim.secd.SECDBase.BindPrims: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.GreaterEq: <init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr) :: 1
org.kiama.example.oberon0.drivers.A2a$: optvar$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: op$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: level$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: typedef$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Precedence.$anonfun: apply(x$1: Boolean,x$2: Boolean) :: 1
org.kiama.example.iswim.compiler.Syntax.Match: <init>(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,clauses: List[org.kiama.example.iswim.compiler.Syntax.MatchClause]) :: 1
org.kiama.example.lambda.LambdaTests: org$kiama$example$lambda$Generator$_setter_$genVar_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.til.TIL2_2Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.obr.RISCTree.Not: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: statements$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis.$anonfun.$anonfun: apply(x0$4: org.kiama.example.iswim.compiler.Syntax.Variable) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.imperative.Generator: genSub(sz: Int) :: 1
org.kiama.example.iswim.secd.BooleanOps.PushTrue: productIterator() :: 1
org.kiama.example.oberon0.L0.source.GeExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A1$: expression$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: commit(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L2.Desugarer: transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.oberon0.base.TranslatingDriver: resetflags() :: 1
org.kiama.example.oberon0.drivers.A3Tests: vardeclsection$lzycompute() :: 1
org.kiama.example.til.AST.Program: apply(ss: Seq[org.kiama.example.til.AST.Stat]) :: 1
org.kiama.example.transform.Driver: process(program: org.kiama.example.transform.AST.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$isSemanticallyCorrect_$eq(Lscala/Function1;) :: 1
org.kiama.example.imperative.Parser: double() :: 1
org.kiama.example.RISC.RISCISA.WRL: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: constdecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: expression$lzycompute() :: 1
org.kiama.example.oberon0.L4.SymbolTable$ArrayType: org$kiama$example$oberon0$L4$SymbolTable$ArrayType$$$outer() :: 1
org.kiama.example.oberon0.L3.source.Call: apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse,params: List[org.kiama.example.oberon0.L0.source.Expression]) :: 1
org.kiama.example.json.JSONTree$JName: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.obr.SyntaxAnalysis: statement$lzycompute() :: 1
org.kiama.example.oberon0.base.c.CEmptyStmt: <init>() :: 1
org.kiama.example.oberon0.drivers.A4Tests: fieldlists$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literal$1$$anonfun$apply$3: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3Tests: level$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: rep1(Lscala/Function0;) :: 1
org.kiama.output.PrettyPrinterBase$$anon$1: org$kiama$output$PrettyPrinterBase$PrettyPrintable$$$outer() :: 1
org.kiama.util.ParserUtilitiesTests$Tup2: org$kiama$util$ParserUtilitiesTests$Tup2$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$55: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.attribution.Attributable: isLast() :: 1
org.kiama.example.oberon0.drivers.A3Tests: keyword$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Equal: hashCode() :: 1
org.kiama.example.lambda3.AST.App: hashCode() :: 1
org.kiama.example.lambda.Lambda: <init>() :: 1
org.kiama.attribution.Decorators$: outfunc$lzycompute$1(Lscala/Function1;Lscala/Function1;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.transform.Parser: opdecl() :: 1
org.kiama.example.obr.RISCTransformation.$anonfun: apply(x0$1: org.kiama.example.obr.ObrTree.ObrInt) :: 1
org.kiama.example.picojava.AbstractSyntax$Block: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.L3.SymbolTable: defenvPairs() :: 1
org.kiama.example.oberon0.base.Parser$$anonfun$comment$1$$anonfun$apply$7$$anonfun$apply$9: org$kiama$example$oberon0$base$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun: apply(x0$3: Option[List[org.kiama.example.obr.ObrTree.Declaration]]) :: 1
org.kiama.example.prolog.PrologTree.Program: hashCode() :: 1
org.kiama.example.picojava.Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.attribution.AttributionBase: circular([T <: Object, U]optNameDef: Option[String],init: U,f: T => U) :: 1
org.kiama.example.lambda3.AST.SubstQuery: <init>() :: 1
org.kiama.example.oberon0.drivers.A1$: factor$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: forStatement$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.json.JSONTree.JName: apply(s: String) :: 1
org.kiama.example.oberon0.drivers.A3Tests: parser$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: factor$lzycompute() :: 1
org.kiama.output.PrettyPrinter.Doc.$anonfun: apply(iw: Int, Int) :: 1
org.kiama.example.til.TIL2_1Main$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.util.ParserUtilitiesTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.til.TIL1_1Tests: success(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.secd.SECDBase$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.iswim.secd.SECDBase.EmptyCont: hashCode() :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: beta$lzycompute() :: 1
org.kiama.example.transform.Driver: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.lambda2.AST.Letp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$14: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.attribution.Attributable.$anonfun: apply(v: _) :: 1
org.kiama.example.dataflow.DataflowAST.If: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$119: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$6: PrettyPrinterBase.this.Doc,x$7: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.oberon0.L3.source.FPSection: <init>() :: 1
org.kiama.example.picojava.tests.ParserTests: var_decl$lzycompute() :: 1
org.kiama.machine.Machine: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.L4.CCodeGenerator: $init$() :: 1
org.kiama.example.RISC.RISCISA.MOD: hashCode() :: 1
org.kiama.machine.Machine: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.oberon0.drivers.A2a$: idnuse$lzycompute() :: 1
org.kiama.example.iswim.secd.HeapOps.Put: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: tipe$lzycompute() :: 1
org.kiama.example.iswim.secd.ConversionOps: evalInst() :: 1
org.kiama.example.til.TIL1_1Main$: parser$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: NoSuccess$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase: list$default$4([T]) :: 1
org.kiama.example.oberon0.drivers.A3$: writeProc$lzycompute() :: 1
org.kiama.example.dataflow.Dataflow$: org$kiama$example$dataflow$ControlFlowImpl$_setter_$following_$eq(Lscala/Function1;) :: 1
org.kiama.example.til.AST.Read: <init>() :: 1
org.kiama.example.til.TIL2_2Tests: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ReduceEvaluator: reducesinlambdas() :: 1
org.kiama.example.iswim.tests.ParserTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.lambda3.Lambda$: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A1$: cases$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$TestDriver$_setter_$maxlanglevel_$eq(I) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$2$$anonfun$apply$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.LeExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: commit(Lscala/Function0;) :: 1
org.kiama.example.prolog.PrologTree.Atom: productIterator() :: 1
org.kiama.example.prolog.SyntaxAnalysis: rep1(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.WhileStmt: <init>() :: 1
org.kiama.example.lambda.LambdaTests: org$kiama$example$lambda$Evaluator$_setter_$xgc_reduction_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.til.TIL1_1Tests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.til.TIL1_1Main$: rep(Lscala/Function0;) :: 1
org.kiama.example.lambda.LambdaTests: factor$lzycompute() :: 1
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.oberon0.drivers.A1Tests: isconst$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.iswim.compiler.Syntax.Match: productIterator() :: 1
org.kiama.util.Positioned: $init$() :: 1
org.kiama.example.lambda3.AST.SubstQuery: execute() :: 1
org.kiama.example.obr.ObrTree.NotEqualExp: productIterator() :: 1
org.kiama.example.lambda2.EagerSubst$$anonfun$s$2$$anonfun$apply$12: org$kiama$example$lambda2$EagerSubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3$: desugarFor$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: stringLiteral() :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(x0$5: ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E],F]) :: 1
org.kiama.example.oberon0.drivers.A2aTests: readProc$lzycompute() :: 1
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) :: 1
org.kiama.example.til.TIL2_3Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.lambda2.LazySubstEvaluator: subsVar$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: string$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envirOut_$eq(Lscala/Function1;) :: 1
org.kiama.example.lambda.LambdaTests: skipWhitespace() :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(nm: String) :: 1
org.kiama.example.iswim.driver.Main$: liter$lzycompute() :: 1
org.kiama.output.NonAssoc: <init>() :: 1
org.kiama.example.json.Driver: commit(Lscala/Function0;) :: 1
org.kiama.example.lambda.Lambda$: skipWhitespace() :: 1
org.kiama.example.oberon0.drivers.A2aTests: factor$lzycompute() :: 1
org.kiama.example.lambda2.AST.Var: apply(i: String) :: 1
org.kiama.example.oberon0.drivers.A4Tests: condition$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: assertType(e: org.kiama.example.lambda2.AST.Exp,aname: String,a: org.kiama.example.lambda2.AST.Exp => org.kiama.example.lambda2.AST.Type,line: Int,col: Int,msg: String) :: 1
org.kiama.example.iswim.driver.Main$: letstmt$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser: super$keywordStrings() :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: subsVar$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.tests.ErrorTests: rep(Lscala/Function0;) :: 1
org.kiama.example.prolog.SyntaxAnalysis: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.driver.Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.prolog.SyntaxAnalysis: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: readProc$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: term$lzycompute() :: 1
org.kiama.example.obr.ObrTree.RaiseStmt: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: ident$lzycompute() :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(s: org.kiama.example.obr.ObrTree.Statement) :: 1
org.kiama.example.oberon0.drivers.A2a$: assignment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: simpexp$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Pattern: productIterator() :: 1
org.kiama.example.json.ParsingTests: jnull$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.prolog.Interpreter.TermGoal: hashCode() :: 1
org.kiama.example.imperative.AST.Var: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2b$: moduledecl$lzycompute() :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$id_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.imperative.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.imperative.AST.Asgn: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: declarations$lzycompute() :: 1
org.kiama.example.lambda3.Lambda$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_1Main$: opt(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_1Tests: term$lzycompute() :: 1
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$1: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_3Main$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A2a$: intexp$lzycompute() :: 1
org.kiama.example.lambda.AST.Sub: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: mkrefexpr$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: declaration$lzycompute() :: 1
org.kiama.example.oberon0.L2.TypeAnalyser: super$exptypeDef() :: 1
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$20: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.ParserTests: matchexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: rootconstexp$lzycompute() :: 1
org.kiama.attribution.Attribution: childAttr([T <: org.kiama.attribution.Attributable, U]optName: Option[String],f: T => org.kiama.attribution.Attributable => U) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$2$$anonfun$apply$14: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.AST.Let: e1() :: 1
org.kiama.example.oberon0.L0.c.CNotExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.imperative.AST.Add: apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.example.prolog.SyntaxAnalysis: cut$lzycompute() :: 1
org.kiama.example.oberon0.base.c.CReturn: hashCode() :: 1
org.kiama.example.prolog.SyntaxAnalysis: term$lzycompute() :: 1
org.kiama.example.lambda2.Parser$$anonfun$exp$1$$anonfun$apply$3: org$kiama$example$lambda2$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Syntax.NumVal: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1$: booleanType$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.obr.RISCTree.LabelDef: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: idndeflist$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.imperative.Generator.$anonfun: apply(e: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.example.oberon0.L0.SymbolTable$Constant: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.driver.PrettyPrinter$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.oberon0.drivers.A2b$: namedtypedef$lzycompute() :: 1
org.kiama.example.prolog.SemanticTestDriver: assert(Lscala/Option;Ljava/lang/Object;) :: 1
org.kiama.example.til.TIL2_1Main$: skipWhitespace() :: 1
org.kiama.example.til.TIL2_2Tests: integer$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: integer$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: block$lzycompute() :: 1
org.kiama.example.picojava.Main$: stmt$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.iswim.secd.IntegerOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$104: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A4Tests: rep1(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.NotExp: <init>() :: 1
org.kiama.example.lambda.LambdaTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.iswim.driver.Main$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL2_3Tests.$anonfun: apply() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: subsOpn$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$vardecl$2: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_3Tests.$anonfun: <init>() :: 1
org.kiama.example.obr.ObrTree.BoolVar: <init>() :: 1
org.kiama.example.til.TIL2_3Tests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.AST.IfElse: <init>() :: 1
org.kiama.example.til.TIL2_3Tests: assignment_statement$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L4.Parser: super$keywordStrings() :: 1
org.kiama.example.oberon0.drivers.A4Tests: constdeclsection$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: deftype$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: falseConstant$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: varr$lzycompute() :: 1
org.kiama.example.picojava.Main: process(program: org.kiama.example.picojava.AbstractSyntax.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: $init$() :: 1
org.kiama.example.til.TIL2_1Tests: while_statement$lzycompute() :: 1
org.kiama.util.Environments: resetEnvironments() :: 1
org.kiama.example.oberon0.drivers.A2aTests: typedef$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.compiler.Syntax.If: productIterator() :: 1
org.kiama.example.oberon0.L4.source.IndexExp: <init>() :: 1
org.kiama.util.Environments.UnknownEntity: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: moduledecl$lzycompute() :: 1
org.kiama.machine.Machine.State: _value_=(x$1: Option[T]) :: 1
org.kiama.example.oberon0.L0.source.LtExp: <init>() :: 1
org.kiama.example.prolog.PrologTree.Rule: productIterator() :: 1
org.kiama.example.oberon0.drivers.A4Tests: comment$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.til.TIL2_3Tests: read_statement$lzycompute() :: 1
org.kiama.attribution.Attribution$CachedAttribute: org$kiama$attribution$Attribution$CachedAttribute$$$outer() :: 1
org.kiama.example.iswim.compiler.Parser.Pos: apply(s: String) :: 1
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(x0$3: org.kiama.example.oberon0.L0.source.TypeDef) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: letrecstmt$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Company.Employee: productIterator() :: 1
org.kiama.example.lambda2.AST.Let: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase.GetType: productIterator() :: 1
org.kiama.example.oberon0.L0.CCodeGenerator: translate(t: CCodeGenerator.this.Type) :: 1
org.kiama.example.json.ParsingTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.oberon0.drivers.A2aTests: whitespaceParser$lzycompute() :: 1
org.kiama.example.lambda.AST.Var: <init>() :: 1
org.kiama.example.oberon0.drivers.A1$: parser$lzycompute() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: beta$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.prolog.Interpreter.$anonfun: apply(v: String) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun: apply(x0$2: SyntaxAnalysis.this.~[List[org.kiama.example.obr.ObrTree.Declaration],List[org.kiama.example.obr.ObrTree.Declaration]]) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$48: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3Tests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.compiler.Syntax.Lambda: hashCode() :: 1
org.kiama.example.til.TIL2_3Main$: declaration$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.iswim.secd.HeapOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.iswim.secd.BooleanOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x2: A1,default: A1 => B1) :: 1
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$listterms$1$$anonfun$apply$10: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_1Main$: primary$lzycompute() :: 1
org.kiama.example.iswim.secd.IOOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.oberon0.drivers.A2bTests: declarations$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark: basicAst() :: 1
org.kiama.example.oneohonecompanies.Other: <init>() :: 1
org.kiama.example.picojava.Main$: while_stmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: level$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: level$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.DumpEmpty: hashCode() :: 1
org.kiama.example.iswim.secd.ExceptionHandler: super$evalInst() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$52: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.RISC.RISCISA.SUBI: hashCode() :: 1
org.kiama.example.oberon0.L0.source.LeExp: <init>() :: 1
org.kiama.example.oberon0.L0.source.EqExp: <init>() :: 1
org.kiama.example.til.TIL1_1Main$: write_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: whitespaceParser$lzycompute() :: 1
org.kiama.example.oberon0.L1.Parser$$anonfun$whileStatement$2: org$kiama$example$oberon0$L1$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: block$lzycompute() :: 1
org.kiama.example.oberon0.base.source.Block: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1$: comment$lzycompute() :: 1
org.kiama.example.oberon0.L4.SymbolTable.RecordType: fields() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun: apply(x0$8: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[SyntaxAnalysis.this.Pos,List[org.kiama.example.obr.ObrTree.Statement]],List[org.kiama.example.obr.ObrTree.Catch]]) :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark: start() :: 1
org.kiama.example.til.TIL1_1Main$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L2.Desugarer: casesToIf(ce: org.kiama.example.oberon0.L0.source.IdnExp,cases: List[org.kiama.example.oberon0.L2.source.Case],optelse: Option[org.kiama.example.oberon0.base.source.Block]) :: 1
org.kiama.rewriting.NominalRewriter$$anonfun$subst$1$$anonfun$apply$2: org$kiama$rewriting$NominalRewriter$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3Tests: caseStatement$lzycompute() :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(e: org.kiama.example.transform.AST.ExpR) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$17: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.obr.RISCEncoder.$anonfun: apply(x$1: Int,x$2: Int) :: 1
org.kiama.example.til.TIL1_1Tests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.source.DivExp: hashCode() :: 1
org.kiama.example.json.SyntaxAnalysis: $init$() :: 1
org.kiama.example.oberon0.drivers.A2bTests: idndeflist$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Not: productIterator() :: 1
org.kiama.attribution.Attribution: tree([T <: org.kiama.attribution.Attributable, U <: org.kiama.attribution.Attributable]optName: Option[String],f: T => U) :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun.$anonfun: apply(x0$3: String) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser: super$exptypeDef() :: 1
org.kiama.util.StringConsole: reader$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: primstmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: fpsection$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: parenexpr$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: exp2$lzycompute() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.imperative.PrettyPrinter$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.oberon0.drivers.A1$: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.imperative.Parser$$anonfun$asgnStmt$1: org$kiama$example$imperative$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.Desugarer: super$transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.util.CompilerTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.prolog.PrologTree.Var: <init>() :: 1
org.kiama.example.iswim.tests.ParserTests: expr$lzycompute() :: 1
org.kiama.example.dataflow.Driver: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.iswim.secd.ExceptionHandler$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.transform.AST.BinExp: productIterator() :: 1
org.kiama.example.oberon0.L0.source.GtExp: hashCode() :: 1
org.kiama.example.lambda3.Lambda$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.driver.Main$: rep1(Lscala/Function0;) :: 1
org.kiama.example.transform.AST.Factor: hashCode() :: 1
org.kiama.example.lambda3.AST.FreshQuery: execute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: NoSuccess$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.lambda2.LazySubstEvaluator: lambda$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL2_3Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$TestDriver$_setter_$maxlanglevel_$eq(I) :: 1
org.kiama.example.obr.RISCTree.NegW: productIterator() :: 1
org.kiama.example.oberon0.L0.source.AddExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A4Tests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecl$2: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.json.Driver: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.til.TIL2_3Main$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.util.ParserUtilitiesTests.Tup6: <init>() :: 1
org.kiama.example.prolog.PrologTree.Program: <init>() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$33: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda3.AST.App: apply(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A2aTests: parser$lzycompute() :: 1
org.kiama.example.imperative.Generator.$anonfun: apply(i: Double) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A2a$: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.attribution.Attribution.CachedParamAttribute: apply(arg: A) :: 1
org.kiama.example.oberon0.drivers.A2a$: optActualParameters$lzycompute() :: 1
org.kiama.example.obr.RISCTree.AddW: productIterator() :: 1
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: <init>() :: 1
org.kiama.example.til.TIL2_3Main$: while_statement$lzycompute() :: 1
org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue: <init>() :: 1
org.kiama.example.oberon0.L4.c.PrettyPrinter.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A2a$: factor$lzycompute() :: 1
org.kiama.attribution.AttributionBase: CircularState() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: callccexpr$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.RelationalExpression: priority() :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.oberon0.L4.source.RecordTypeDef: hashCode() :: 1
org.kiama.example.lambda3.LambdaTests: exp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: expression$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term2$1$$anonfun$apply$70: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.imperative.Imperative$: stmt$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: integer$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.transform.Parser: vardecl() :: 1
org.kiama.example.oberon0.drivers.A1$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.RISC.RISCISA.BEQ: hashCode() :: 1
org.kiama.example.picojava.Main$: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.picojava.Main$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.lambda3.Lambda$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.L0.c.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$38: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.WhitespaceParser: regex(r: scala.util.matching.Regex) :: 1
org.kiama.output.RightAssoc: productPrefix() :: 1
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: <init>() :: 1
org.kiama.example.picojava.AbstractSyntax.Block: hashCode() :: 1
org.kiama.example.lambda2.ParEagerSubst$class: e$lzycompute$1(Lorg/kiama/example/lambda2/ParEagerSubst;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.obr.RISCTree.DivW: hashCode() :: 1
org.kiama.example.iswim.secd.IntComparisonOps: evalInst() :: 1
org.kiama.util.WhitespaceParser: skipWhitespace() :: 1
org.kiama.util.Environments: rootenv(bindings: Seq[String, Environments.this.Entity) :: 1
org.kiama.example.imperative.Imperative$: exp$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.transform.Driver: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.base.c.CExpression: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.L4.Parser: keywordStrings() :: 1
org.kiama.example.oberon0.drivers.A2b$: typedeclsection$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: trycatch$lzycompute() :: 1
org.kiama.example.oberon0.L3.NameAnalyser: super$entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String) :: 1
org.kiama.example.oberon0.drivers.A4Tests: entity$lzycompute() :: 1
org.kiama.util.FileConsole: reader() :: 1
org.kiama.example.iswim.secd.IntegerOps: super$evalInst() :: 1
org.kiama.example.oberon0.base.c.CEmptyStmt: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.drivers.A4Tests: falseConstant$lzycompute() :: 1
org.kiama.example.iswim.secd.StringOps.StringTypeValue: <init>() :: 1
org.kiama.example.til.TIL1_1$$anonfun$term$1$$anonfun$apply$28$$anonfun$apply$29: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda3.LambdaTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$letOpn$1$$anonfun$applyOrElse$6: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.c.COrExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.iswim.secd.SECDBase.MkClosures: hashCode() :: 1
org.kiama.example.til.TIL2_1Tests: keyword$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda.Lambda$: process(Ljava/lang/Object;) :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: subsVar$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.L0.c.PrettyPrinter: super$toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.lambda2.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A2b$: term$lzycompute() :: 1
org.kiama.example.oberon0.base.Analyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.obr.ObrTree.TryStmt: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2b$: exptype$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$22: Parser.this.~[Parser.this.Pos,List[org.kiama.example.iswim.compiler.Syntax.Variable]]) :: 1
org.kiama.example.prolog.SyntaxAnalysis: whiteSpace() :: 1
org.kiama.example.picojava.tests.ErrorTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: statements$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.Target: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A2a$: constdecl$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdate: update(eval: org.kiama.rewriting.Rewriter.Strategy) :: 1
org.kiama.example.oberon0.L0.source.TypeDecl: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: Named$lzycompute() :: 1
org.kiama.example.til.AST.Write: <init>() :: 1
org.kiama.example.lambda2.AST.Opn: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: typedeclsection$lzycompute() :: 1
org.kiama.example.lambda2.Analysis.$anonfun.$anonfun: apply(x$2: org.kiama.example.lambda2.AST.Bind) :: 1
org.kiama.example.oberon0.base.Driver: consumeast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: valexpr$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CSubExp: canEqual(x$1: Any) :: 1
org.kiama.example.iswim.secd.HeapOps.Alloc: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.$anon.$anonfun: apply(kv: String, org.kiama.example.iswim.secd.SECDBase.Value) :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.picojava.TypeAnalysis.$anonfun.$anonfun: apply(x0$3: org.kiama.example.picojava.AbstractSyntax.TypeDecl) :: 1
org.kiama.example.oberon0.L0.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: lambda$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: trueConstant$lzycompute() :: 1
org.kiama.example.dataflow.Driver: asgnStm$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable: isError(e: SymbolTable.this.Entity) :: 1
org.kiama.example.oberon0.L3.Parser$$anonfun$optActualParameters$3$$anonfun$apply$17: org$kiama$example$oberon0$L3$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter: not(s: ) :: 1
org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: mode() :: 1
org.kiama.example.til.TIL2_2Tests: success(Ljava/lang/Object;) :: 1
org.kiama.example.lambda2.Parser$$anonfun$exp2$1: org$kiama$example$lambda2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2bTests: expression$lzycompute() :: 1
org.kiama.example.obr.RISCTree.IntDatum: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase$EmptyCont: org$kiama$example$iswim$secd$SECDBase$EmptyCont$$$outer() :: 1
org.kiama.example.til.TIL2_3Tests.$anonfun.$anonfun: apply(ast: org.kiama.example.til.AST.Program) :: 1
org.kiama.example.oberon0.L0.source.ConstDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,exp: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.output.Infix: hashCode() :: 1
org.kiama.example.lambda.LambdaTests: org$kiama$example$lambda$Evaluator$_setter_$normal_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.json.Driver: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.imperative.Generator$$anonfun$arbStmt$1: org$kiama$example$imperative$Generator$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.Parser$$anonfun$ttype0$1$$anonfun$apply$21: org$kiama$example$lambda2$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.base.Driver: input_=(x$1: Option[String]) :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun: apply() :: 1
org.kiama.example.oberon0.L0.source.MulExp: hashCode() :: 1
org.kiama.example.picojava.tests.ParserTests: boolean_literal$lzycompute() :: 1
org.kiama.example.imperative.Generator.$anonfun: apply(len: Int) :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun: apply(x0$1: org.kiama.example.picojava.AbstractSyntax.IdnUse) :: 1
org.kiama.example.til.TIL2_2Tests: if_statement$lzycompute() :: 1
org.kiama.example.prolog.SemanticTestDriver: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.lambda3.AST.SubstQuery: apply(n: org.kiama.rewriting.NominalAST.Name,e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A3Tests: numparams$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable$Variable: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.rewriting.Rewriter$$anonfun$2$$anonfun$applyOrElse$5: org$kiama$rewriting$Rewriter$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.oberon0.drivers.A3Tests: convertToEqualizer(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.secd.HeapOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.lambda2.Lambda$: process(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$24: Parser.this.~[Parser.this.Pos,List[org.kiama.example.iswim.compiler.Syntax.Expr]]) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.til.TIL2_3Main$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.picojava.AbstractSyntax.BooleanLiteral: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$11: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.imperative.Imperative: <init>() :: 1
org.kiama.example.til.TIL2_1Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.CallCC: <init>(e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 1
org.kiama.example.oberon0.L3.NameAnalyser$$anonfun$envoutl$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_3Tests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.picojava.tests.ErrorTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.lambda3.Lambda: process(q: org.kiama.example.lambda3.AST.Query) :: 1
org.kiama.example.iswim.secd.IntegerOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.oberon0.L1.Parser: super$statementDef() :: 1
org.kiama.example.oberon0.base.source.Block: hashCode() :: 1
org.kiama.example.til.TIL2_3Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.dataflow.Driver: skipWhitespace() :: 1
org.kiama.output.LeftAssoc: productArity() :: 1
org.kiama.example.oberon0.drivers.A4Tests: guard(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2a$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L3.SymbolTable: super$isVariable(e: SymbolTable.this.Entity) :: 1
org.kiama.example.oberon0.drivers.A3$: parser$lzycompute() :: 1
org.kiama.example.oberon0.base.TranslatingDriver: super$usageMessage() :: 1
org.kiama.example.lambda2.AST.IntType: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: env$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: kase$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue: hashCode() :: 1
org.kiama.example.oberon0.L0.source.VarDecl: apply(idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef) :: 1
org.kiama.example.oberon0.L0.source.GeExp: productIterator() :: 1
org.kiama.util.ParserUtilitiesTests$Tup6$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$TestDriver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.lambda2.Lambda$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.til.TIL2_1Main$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.AbstractSyntax.VarDecl: <init>() :: 1
org.kiama.example.til.TIL2_3: $init$() :: 1
org.kiama.example.lambda.AST.Num: hashCode() :: 1
org.kiama.example.oberon0.L1.c.CWhileStatement: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: idntype$lzycompute() :: 1
org.kiama.example.transform.AST.Num: productIterator() :: 1
org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: ident() :: 1
org.kiama.example.picojava.Main$: xtends$lzycompute() :: 1
org.kiama.example.picojava.AbstractSyntax$BlockStmt: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.til.TIL2_2Tests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L4.SymbolTable.RecordType: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: lambdaexpr$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.IswimProg: <init>(bds: List[org.kiama.example.iswim.compiler.Syntax.Stmt]) :: 1
org.kiama.example.til.TIL1_1Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.til.TIL1_1$$anonfun$if_statement$3: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_3Tests: if_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: constdeclsection$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$TransformingDriver$_setter_$pprintiastFlagDefault_$eq(Z) :: 1
org.kiama.rewriting.Rewriter: <init>() :: 1
org.kiama.example.lambda2.LambdaTests: assertEvalAll(term: String,result1: org.kiama.example.lambda2.AST.Exp,result2: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.obr.SemanticAnalysis: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: guard(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.c.CNotExp: priority() :: 1
org.kiama.example.oberon0.drivers.A1Tests: assignment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: constdeclsection$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: beta$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Apply: productIterator() :: 1
org.kiama.example.dataflow.Driver: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.L2.Desugarer$$anonfun$desugarFor$1: org$kiama$example$oberon0$L2$Desugarer$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: assignment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A3Phases: $init$() :: 1
org.kiama.example.lambda3.AST.EvalQuery: <init>() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$33: Parser.this.~[Parser.this.~[Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr],org.kiama.example.iswim.compiler.Syntax.Expr],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.oberon0.drivers.A2aTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL2_3Main$: program$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.dataflow.Parser$$anonfun$asgnStm$1: org$kiama$example$dataflow$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3$: keyword$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: expression$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.FieldIdn: apply(ident: String) :: 1
org.kiama.rewriting.Rewriter: para([T]f: Any, Seq[T]) :: 1
org.kiama.example.oberon0.drivers.A3$: forStatement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: optvar$lzycompute() :: 1
org.kiama.example.json.ParsingTests: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$TransformingDriver$_setter_$printiastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A3Tests: idndeflist$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.lambda2.Par$$anonfun$subsVar$1: org$kiama$example$lambda2$Par$$anonfun$$$outer() :: 1
org.kiama.example.imperative.Imperative$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: term2$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: moduledecl$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyShare.$anonfun: <init>() :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$22: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda.LambdaGen$: org$kiama$util$GeneratingREPLBase$_setter_$ignoreWhitespaceLines_$eq(Z) :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun.$anonfun: apply(a: org.kiama.example.picojava.AbstractSyntax.ASTNode) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$mkrefexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.picojava.AbstractSyntax: <init>() :: 1
org.kiama.example.oberon0.L2.Desugarer: super$transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.obr.ObrTree.ModExp: hashCode() :: 1
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.iswim.secd.StackOps.Swap: productIterator() :: 1
org.kiama.util.ParserUtilities.$anonfun: apply(x0$9: ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E]) :: 1
org.kiama.example.lambda3.AST.App: <init>() :: 1
org.kiama.example.til.TIL1_1$$anonfun$primary$1$$anonfun$apply$40: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Parser.Pos: <init>(s: String) :: 1
org.kiama.example.prolog.Interpreter.$anonfun: apply(t: org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.example.obr.ObrTree.IntConst: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3$: procedureDeclaration$lzycompute() :: 1
org.kiama.example.prolog.PrologTree.Rule: apply(hd: org.kiama.example.prolog.PrologTree.Term,bdy: List[org.kiama.example.prolog.PrologTree.Term]) :: 1
org.kiama.output.RightAssoc: productArity() :: 1
org.kiama.example.iswim.compiler.Parser: name(msg: String) :: 1
org.kiama.output.PrettyPrinterBase: rbracket() :: 1
org.kiama.example.til.TIL2_2Tests: declaration$lzycompute() :: 1
org.kiama.example.obr.ObrTree.LoopStmt: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: identRegex$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply(x0$16: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.json.ParsingTests: string$lzycompute() :: 1
org.kiama.example.oberon0.L4.CCodeGenerator: super$translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) :: 1
org.kiama.example.iswim.secd.SECDBase.Resume: hashCode() :: 1
org.kiama.example.iswim.secd.StackOps: super$evalInst() :: 1
org.kiama.example.lambda.Lambda$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.ParserTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.util.ParserUtilities.$anonfun: apply(x0$8: ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D]) :: 1
org.kiama.example.til.TIL2_2Tests: string$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: program$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: conditional$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CEqExp: priority() :: 1
org.kiama.example.oberon0.L0.source.ModExp: productIterator() :: 1
org.kiama.example.lambda2.AST.App: apply(e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.iswim.secd.StackOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.lambda2.LambdaTests: number$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: integer$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: isconst$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: rep1(Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.L0.source.Assignment: productIterator() :: 1
org.kiama.example.imperative.Generator: genSeqn(sz: Int) :: 1
org.kiama.example.picojava.tests.ParserTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.IntComparisonOps: super$evalInst() :: 1
org.kiama.example.oberon0.L0.Parser: super$statementDef() :: 1
org.kiama.example.oberon0.drivers.A3Tests: desugarCase$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: typedecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A1$: ident$lzycompute() :: 1
org.kiama.example.oberon0.L3.source.PrettyPrinter: paramsToDoc(ds: List[PrettyPrinter.this.Doc],sep: PrettyPrinter.this.Doc) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$19: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.oberon0.L3.SymbolTable$BuiltinProc: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.lambda3.Lambda$: opt(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: term$lzycompute() :: 1
org.kiama.example.obr.ObrTree.EqualExp: hashCode() :: 1
org.kiama.example.oneohonecompanies.Depth: <init>() :: 1
org.kiama.example.transform.AST.Num: apply(value: Int) :: 1
org.kiama.example.oberon0.drivers.A3$: expconst$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: constdecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: intexp$lzycompute() :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun.$anonfun: apply(t: org.kiama.attribution.Attributable) :: 1
org.kiama.example.oberon0.drivers.A3Tests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.base.Parser: keywordStrings() :: 1
org.kiama.example.lambda2.AST.Opn: productIterator() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun: apply(x0$1: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[String,List[org.kiama.example.obr.ObrTree.Declaration]],List[org.kiama.example.obr.ObrTree.Declaration]],List[org.kiama.example.obr.ObrTree.Statement]],String]) :: 1
org.kiama.example.til.TIL2_1Tests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_2Main$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.util.CompilerTests.$anonfun.$anonfun: apply() :: 1
org.kiama.example.oberon0.L0.SymbolTable.BuiltinType: hashCode() :: 1
org.kiama.example.til.TIL2_1Tests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$scan$1$$anonfun$apply$1: org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: pattern$lzycompute() :: 1
org.kiama.example.lambda3.AST.EquivQuery: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.Lookup: productIterator() :: 1
org.kiama.example.lambda2.ParLazyShare$class: e$lzycompute$1(Lorg/kiama/example/lambda2/ParLazyShare;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.oberon0.drivers.A3$: kase$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: subsLam$lzycompute() :: 1
org.kiama.example.prolog.PrologTree$SourceNode: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef) :: 1
org.kiama.util.ParserUtilities: stringToInt(s: String) :: 1
org.kiama.example.til.TIL1_1Tests: not(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.source.NamedType: apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.obr.ObrTree.IfStmt: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: simpexp$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_1Tests: statement$lzycompute() :: 1
org.kiama.example.til.AST.Div: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.iswim.secd.HeapOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.picojava.tests.ParserTests: class_decl$lzycompute() :: 1
org.kiama.example.til.TIL1_1$$anonfun$statement$1: org$kiama$example$til$TIL1_1$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$bindexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.SymbolTable$RecordType: org$kiama$example$oberon0$L4$SymbolTable$RecordType$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1$: statementSequence$lzycompute() :: 1
org.kiama.example.dataflow.Driver: success(Ljava/lang/Object;) :: 1
org.kiama.example.imperative.Generator.$anonfun: apply(v: org.kiama.example.imperative.AST.Var) :: 1
org.kiama.example.iswim.secd.SECDBase.GetType: <init>() :: 1
org.kiama.example.oberon0.L4.Parser: fieldlists() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun.$anonfun: apply(x$1: TypeAnalyser.this.Field) :: 1
org.kiama.example.oberon0.L4.c.CFieldExp: <init>(record: org.kiama.example.oberon0.base.c.CExpression,field: String) :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$ispropersuperterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.iswim.compiler.Syntax.Block: hashCode() :: 1
org.kiama.example.til.TIL1_1Tests: term$lzycompute() :: 1
org.kiama.example.oberon0.L1.Parser: super$keywordStrings() :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$TranslatingDriver$_setter_$printcastFlagDefault_$eq(Z) :: 1
org.kiama.example.prolog.PrologTree.Fact: apply(hd: org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.example.lambda.LambdaGen$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$clause$1: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1Tests: idnuse$lzycompute() :: 1
org.kiama.util.ParserUtilities: super$failure(msg: String) :: 1
org.kiama.example.iswim.compiler.Syntax.Val: hashCode() :: 1
org.kiama.example.json.SyntaxAnalysis$$anonfun$jarray$1: org$kiama$example$json$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.picojava.tests.ErrorTests: program$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: term$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: factor$lzycompute() :: 1
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$8$$anonfun$apply$10: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.prolog.SemanticTestDriver: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL1_1Main$: statement$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.ValCond: productIterator() :: 1
org.kiama.example.json.ParsingTests: jvalue$lzycompute() :: 1
org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl: hashCode() :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$subsVar$1: org$kiama$example$lambda2$ParLazy$$anonfun$$$outer() :: 1
org.kiama.example.RISC.RISCISA.CHKI: hashCode() :: 1
org.kiama.example.oberon0.L0.source.Assignment: exp() :: 1
org.kiama.example.oberon0.L0.source.SubExp: <init>() :: 1
org.kiama.example.oberon0.drivers.A1Tests: constrainedInt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: expconst$lzycompute() :: 1
org.kiama.example.dataflow.Driver: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.transform.AST.BinExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.prolog.SyntaxAnalysis: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: subsVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: value$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: unknownType$lzycompute() :: 1
org.kiama.util.CompilerTests: assert(Lscala/Option;Ljava/lang/Object;) :: 1
org.kiama.rewriting.Rewriter: dup([T <: Product]t: T,children: Array[Object]) :: 1
org.kiama.util.ParsingREPLBase: processline(line: String) :: 1
org.kiama.example.til.TIL2_2Main$: string$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: constrainedInt$lzycompute() :: 1
org.kiama.example.lambda3.Lambda$: whiteSpace() :: 1
org.kiama.example.json.Driver: jvalue$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.lambda.Lambda$: commit(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazyUpdate: s() :: 1
org.kiama.example.lambda3.AST.FreeNamesQuery: apply(e: org.kiama.example.lambda3.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A1$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.lambda3.Lambda: <init>() :: 1
org.kiama.example.RISC.RISCISA.SUB: hashCode() :: 1
org.kiama.example.oberon0.L0.source.ConstDecl: exp() :: 1
org.kiama.example.dataflow.Optimise$: elimDeadAssign$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.obr.SyntaxAnalysis.Pos: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.picojava.Main$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.compiler.Syntax.Variable: apply(s: String) :: 1
org.kiama.example.til.TIL2_2Main$: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda.LambdaTests: org$kiama$example$lambda$Generator$_setter_$genIdn_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.prolog.Interpreter: <init>() :: 1
org.kiama.example.lambda.Generator$$anonfun$arbExp$1: org$kiama$example$lambda$Generator$$anonfun$$$outer() :: 1
org.kiama.example.transform.Driver: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: optvar$lzycompute() :: 1
org.kiama.example.transform.AST.Var: <init>() :: 1
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply() :: 1
org.kiama.util.ParserUtilitiesTests$Tup5$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.til.TIL2_1Tests: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.picojava.Main$: program$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: letLet$lzycompute() :: 1
org.kiama.rewriting.Rewriter: everything([T]v: T,f: T, T) :: 1
org.kiama.example.til.TIL2_3Main$: keyword$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A1$: idnuse$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x: T) :: 1
org.kiama.example.oberon0.drivers.A4Tests: simpexp$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: super$blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) :: 1
org.kiama.example.oberon0.drivers.A2aTests: integerType$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.oberon0.L2.Desugarer.$anonfun: apply(n: org.kiama.example.oberon0.L2.source.Condition) :: 1
org.kiama.rewriting.NominalRewriter.$anonfun: apply(x0$3: scala.collection.immutable.Set[org.kiama.rewriting.NominalAST.Name],x1$1: Any) :: 1
org.kiama.example.iswim.secd.SECDBase.ClosureValue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.lambda.LambdaGen: <init>() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: opt(Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: term3$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: ifStatement$lzycompute() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$1: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.lambda3.Parser$$anonfun$factor$1$$anonfun$apply$27: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_3Tests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A1$: statements$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.transform.AST.BinExpR: apply(left: org.kiama.example.transform.AST.Exp,op: String,right: org.kiama.example.transform.AST.ExpR) :: 1
org.kiama.example.til.TIL1_1Main$: assignment_statement$lzycompute() :: 1
org.kiama.example.iswim.secd.BooleanOps: super$evalInst() :: 1
org.kiama.example.oberon0.drivers.A1Tests: parser() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: start$lzycompute() :: 1
org.kiama.example.transform.Driver: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.oberon0.drivers.A2a$: condition$lzycompute() :: 1
org.kiama.example.transform.Parser: exp() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$8: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.dataflow.Driver: ifStm$lzycompute() :: 1
org.kiama.util.TestCompiler: infiletests(c: String,dir: java.io.File,inext: String,args: Array[String]) :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$2: org.kiama.example.oberon0.L0.source.TypeDef) :: 1
org.kiama.example.til.AST: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.picojava.NameResolution: <init>() :: 1
org.kiama.example.lambda3.LambdaTests: trans$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.LDW: hashCode() :: 1
org.kiama.example.prolog.SyntaxAnalysis.$anonfun.$anonfun: apply(x0$4: SyntaxAnalysis.this.~[org.kiama.example.prolog.PrologTree.Term,org.kiama.example.prolog.PrologTree.Literal]) :: 1
org.kiama.output.PrettyPrinterBase: pretty_any(a: Any) :: 1
org.kiama.example.lambda2.Lambda$: whiteSpace() :: 1
org.kiama.example.oberon0.drivers.A1Tests: trueConstant$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: moduledecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: deftype$lzycompute() :: 1
org.kiama.util.CompilerBase: checkargs(args: Array[String],emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.util.CompilerTests: info() :: 1
org.kiama.example.til.AST.Sub: hashCode() :: 1
org.kiama.util.ParserUtilitiesTests: Tup2$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: <init>() :: 1
org.kiama.example.til.TIL2_2Tests: skipWhitespace() :: 1
org.kiama.example.iswim.secd.StringOps.PushString: <init>(s: String) :: 1
org.kiama.example.oberon0.drivers.A2bTests: whileStatement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: block$lzycompute() :: 1
org.kiama.example.transform.Driver: program$lzycompute() :: 1
org.kiama.util.CompilerTests.$anonfun: <init>() :: 1
org.kiama.example.picojava.tests.ErrorTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.AST.Read: hashCode() :: 1
org.kiama.example.lambda.Parser$$anonfun$exp$1$$anonfun$apply$2$$anonfun$apply$4: org$kiama$example$lambda$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3Tests: forStatement$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: constantdecls() :: 1
org.kiama.example.iswim.compiler.Syntax.NotEqual: productIterator() :: 1
org.kiama.example.til.TIL2_2Tests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.oberon0.drivers.A2aTests: parser() :: 1
org.kiama.example.prolog.SyntaxAnalysis: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.picojava.Main$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.imperative.AST.Sub: hashCode() :: 1
org.kiama.example.til.TIL1_1Main$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2a$: expconst$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: comment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: exptype$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: letLift$lzycompute() :: 1
org.kiama.example.lambda3.AST.Num: hashCode() :: 1
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.util.CompilerTests: makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.iswim.compiler.Syntax.CallCC: productIterator() :: 1
org.kiama.example.lambda3.LambdaTests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.til.TIL2_3Main$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_3Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.imperative.Imperative$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.util.IO: stringreader(string: String) :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.L0.source.SubExp: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.util.ParserUtilitiesTests.Tup2: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.drivers.A2aTests: env$lzycompute() :: 1
org.kiama.example.oberon0.base.TestDriver.$anonfun: apply(t: String) :: 1
org.kiama.example.picojava.Main$: var_decl$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.json.JSONTree.JNull: hashCode() :: 1
org.kiama.example.oberon0.L4.source.FieldExp: apply(base: org.kiama.example.oberon0.L0.source.Expression,fieldname: org.kiama.example.oberon0.L4.source.FieldIdn) :: 1
org.kiama.example.RISC.RISCISA.BGT: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: optActualParameters$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.json.Driver: jnumber$lzycompute() :: 1
org.kiama.example.iswim.secd.HeapOps.Alloc: hashCode() :: 1
org.kiama.example.transform.AST.VarDecl: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis: constantdecls$lzycompute() :: 1
org.kiama.example.oberon0.L0.TypeAnalyser: super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$letrecstmt$1$$anonfun$apply$161: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.SECDBase.RaiseException: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis: optelseend$lzycompute() :: 1
org.kiama.util.CompilerTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.prolog.SyntaxAnalysis: listterms$lzycompute() :: 1
org.kiama.example.obr.SymbolTable.EnumTypes: hashCode() :: 1
org.kiama.example.iswim.secd.StringOps.StringTypeValue: hashCode() :: 1
org.kiama.example.lambda.LambdaTests.$anonfun.$anonfun.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A2b$: whitespaceParser$lzycompute() :: 1
org.kiama.example.oberon0.L3.NameAnalyser$$anonfun$level$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.SymbolTable$Module: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.picojava.tests.ParserTests: IDENTIFIER$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CAndExp: canEqual(x$1: Any) :: 1
org.kiama.attribution.Attribution: tree([T <: org.kiama.attribution.Attributable, U <: org.kiama.attribution.Attributable]f: T => U) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: blockexpr$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$factor$1$$anonfun$apply$115: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Syntax.Lambda: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2a$: parser$lzycompute() :: 1
org.kiama.util.Messaging: <init>() :: 1
org.kiama.example.oberon0.L0.CCodeGenerator: $init$() :: 1
org.kiama.example.dataflow.Dataflow$: org$kiama$example$dataflow$ControlFlowImpl$_setter_$succ_$eq(Lscala/Function1;) :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$2: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.example.obr.SyntaxAnalysis: program() :: 1
org.kiama.example.oberon0.drivers.A2bTests: NoSuccess$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.util.JLineConsole: terminal() :: 1
org.kiama.output.Prefix: <init>() :: 1
org.kiama.example.oberon0.L3.NameAnalyser: checkNonLocalVarAccess(u: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$78: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.AST.SubOp: hashCode() :: 1
org.kiama.example.til.TIL2_3Tests: commit(Lscala/Function0;) :: 1
org.kiama.example.RISC.RISCISA.ORI: hashCode() :: 1
org.kiama.example.lambda.Generator: $init$() :: 1
org.kiama.example.oberon0.drivers.A1$: Named$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Phases: $init$() :: 1
org.kiama.example.iswim.compiler.Syntax.Binding: hashCode() :: 1
org.kiama.example.oberon0.base.TranslatingDriver: super$resetflags() :: 1
org.kiama.example.oberon0.drivers.A1Tests: cases$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: integerType$lzycompute() :: 1
org.kiama.example.lambda2.PrettyPrinter: <init>() :: 1
org.kiama.example.oberon0.drivers.A4Tests: kase$lzycompute() :: 1
org.kiama.example.lambda2.ReduceEvaluator: s$lzycompute() :: 1
org.kiama.output.LeftAssoc: canEqual(x$1: Any) :: 1
org.kiama.example.lambda2.ParEagerSubst$class: y$lzycompute$1(Lorg/kiama/example/lambda2/ParEagerSubst;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.obr.RISCTree.Bne: productIterator() :: 1
org.kiama.example.oberon0.drivers.A4Tests: env$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.lambda2.LambdaTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: exptype$lzycompute() :: 1
org.kiama.example.til.AST.Var: hashCode() :: 1
org.kiama.example.picojava.AbstractSyntax.WhileStmt: hashCode() :: 1
org.kiama.example.obr.ObrTree.GreaterExp: productIterator() :: 1
org.kiama.example.picojava.tests.ParserTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.lambda3.AST.Var: apply(x: org.kiama.rewriting.NominalAST.Name) :: 1
org.kiama.example.oberon0.L1.source.WhileStatement: <init>(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.lambda2.Analysis.$anonfun: apply(x0$2: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.til.TIL1_1Tests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$eq_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun.$anonfun: apply(x0$1: String,x1$1: scala.collection.immutable.Map[String,org.kiama.example.iswim.secd.SECDBase.Value]) :: 1
org.kiama.example.prolog.SyntaxAnalysis.$anonfun: apply(x0$3: String) :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$example$oberon0$base$TestDriver$_setter_$maxlanglevel_$eq(I) :: 1
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(x0$3: String,x1$1: scala.collection.immutable.Map[String,org.kiama.example.iswim.secd.SECDBase.Value]) :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$isinnernode_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: typedeclsection$lzycompute() :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(x0$3: org.kiama.example.transform.AST.ExpR) :: 1
org.kiama.example.til.TIL1_1Tests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.output.PrettyPrinter.$anonfun: apply(x0$1: Int, Int) :: 1
org.kiama.example.json.JSONTree.JArray: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1Tests: moduledecl$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.FieldIdn: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1$: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.attribution.Attribution.CachedDynamicAttribute.$anonfun: apply() :: 1
org.kiama.output.PrettyPrinter.$anonfun.$anonfun.$anonfun.$anonfun: apply(h: Boolean) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$19: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$8: org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.example.iswim.secd.SECDBase.CodeSegment: productIterator() :: 1
org.kiama.example.lambda2.Lambda$: exp$lzycompute() :: 1
org.kiama.example.oberon0.L4.c.CIndexExp: hashCode() :: 1
org.kiama.example.lambda2.RewritingEvaluator.$anonfun: apply() :: 1
org.kiama.example.obr.RISCTree.Cond: productIterator() :: 1
org.kiama.example.lambda2.ParLazy.$anonfun: <init>() :: 1
org.kiama.example.iswim.compiler.Syntax.Greater: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis: catchclause$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.BLT: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: term2$lzycompute() :: 1
org.kiama.example.iswim.secd.HeapOps.RefValue.$anon: <init>() :: 1
org.kiama.example.til.TIL1_1Main$: rep1(Lscala/Function0;) :: 1
org.kiama.util.StringConsole: reader() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$expr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.util.ParserUtilities.$anonfun: apply(x0$11: Int,x1$1: Char) :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: lambda$lzycompute() :: 1
org.kiama.example.iswim.compiler.CodeGenerator: $init$() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.imperative.Generator: genAsgn(sz: Int) :: 1
org.kiama.example.oberon0.L0.source.ProdExpression: priority() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String) :: 1
org.kiama.example.imperative.Parser$$anonfun$stmt$1: org$kiama$example$imperative$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: isDefinedAt(x3: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.oberon0.drivers.A4Tests: numparams$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$6$$anonfun$apply$22: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: convertToEqualizer(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.compiler.Syntax.Divide: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1$: assignment$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination: <init>() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$38: Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.iswim.tests.ParserTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.Parser$$anonfun$assign_stmt$1: org$kiama$example$picojava$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.LeExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.lambda2.AST.Let: i() :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis.$anonfun: apply(x0$5: org.kiama.example.iswim.compiler.Syntax.Iswim) :: 1
org.kiama.example.til.TIL1_1Tests: rep1(Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ErrorTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.rewriting.Rewriter$$anonfun$topdown$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) :: 1
org.kiama.example.til.TIL2_2Main$: while_statement$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: y() :: 1
org.kiama.example.oberon0.base.source.IdnUse: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2bTests: step$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$lambdaexpr$1$$anonfun$apply$135: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: returnexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: ifStatement$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.MinMaxCond: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: writeProc$lzycompute() :: 1
org.kiama.example.iswim.secd.ConversionOps.ConversionError: hashCode() :: 1
org.kiama.machine.Machine.ParamUpdate: perform() :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun: apply(c: scala.collection.mutable.Buffer[String]) :: 1
org.kiama.example.iswim.driver.Main$: callccexpr$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: parenexpr$lzycompute() :: 1
org.kiama.example.prolog.PrologTree.Program: productIterator() :: 1
org.kiama.example.imperative.AST.Neg: apply(e: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.rewriting.NominalRewriter: Term$lzycompute() :: 1
org.kiama.example.picojava.NameResolution.$anonfun: isDefinedAt(x1: org.kiama.example.picojava.AbstractSyntax.BlockStmt) :: 1
org.kiama.example.obr.RISCTransformation.$anonfun.$anonfun: apply(x$2: org.kiama.example.obr.ObrTree.Catch) :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_2Main$: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: deftype$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable$IntegerValue: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_2Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.json.ParsingTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.util.JLineConsole: <init>() :: 1
org.kiama.example.oberon0.drivers.A3Tests: entity$lzycompute() :: 1
org.kiama.example.dataflow.DataflowAST.While: productIterator() :: 1
org.kiama.example.picojava.tests.ParserTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L4.source.ArrayTypeDef: hashCode() :: 1
org.kiama.output.Prefix: productPrefix() :: 1
org.kiama.example.oberon0.drivers.A4Tests: idndef$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable$BuiltinType: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.til.AST.Program: <init>() :: 1
org.kiama.example.obr.ObrTree.IntExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2bTests: moduledecl$lzycompute() :: 1
org.kiama.example.lambda2.Par.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.til.TIL2_1Tests: rep(Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$8: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.example.RISC.RISCISA: <init>() :: 1
org.kiama.util.ParserUtilitiesTests: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A1$: parser() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.prolog.PrologTree.Program: apply(cs: List[org.kiama.example.prolog.PrologTree.Clause]) :: 1
org.kiama.example.oberon0.drivers.A1$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(x0$7: org.kiama.example.transform.AST.Exp) :: 1
org.kiama.example.iswim.secd.SECDBase.ContTypeValue: <init>() :: 1
org.kiama.example.prolog.SyntaxAnalysis: literals$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: rootconstexp$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: rep(Lscala/Function0;) :: 1
org.kiama.example.obr.RISCTransformation.$anonfun: apply(x0$2: org.kiama.example.obr.ObrTree.Declaration) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$68: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.source.RecordTypeDef: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.App: productIterator() :: 1
org.kiama.example.til.AST.Id: <init>() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$23: Parser.this.~[Parser.this.Pos, List[org.kiama.example.iswim.compiler.Syntax.Variable]) :: 1
org.kiama.example.lambda2.Analysis.$anonfun: apply(x0$3: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A2aTests: constdecl$lzycompute() :: 1
org.kiama.example.lambda2.AST.FunType: hashCode() :: 1
org.kiama.example.oberon0.L3.c.CAddrType: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.drivers.A1Phases: $init$() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: super$isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) :: 1
org.kiama.example.RISC.RISCISA.BGE: hashCode() :: 1
org.kiama.example.oberon0.L1.c.CIfStatement: hashCode() :: 1
org.kiama.example.lambda2.Analysis.$anonfun: apply(x0$6: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.picojava.tests.ErrorTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.iswim.tests.ParserTests: ifelseexpr$lzycompute() :: 1
org.kiama.example.obr.ObrTree.TryBody: productIterator() :: 1
org.kiama.util.FileConsole: reader$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: mkrefexpr$lzycompute() :: 1
org.kiama.example.obr.ObrTree.ExitStmt: hashCode() :: 1
org.kiama.example.oberon0.L0.source.MulExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3Tests: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.oberon0.drivers.A2b$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.L2.Parser: super$statementDef() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.iswim.driver.Main$: matchexpr$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: letstmt$lzycompute() :: 1
org.kiama.example.lambda2.Analysis.$anonfun.$anonfun: apply(x0$4: String, org.kiama.example.lambda2.AST.Type) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: comment$lzycompute() :: 1
org.kiama.util.CompilerBase: encoding() :: 1
org.kiama.example.prolog.SymbolTable: <init>() :: 1
org.kiama.util.ParserUtilitiesTests: Tup3() :: 1
org.kiama.example.lambda.LambdaGen$: org$kiama$example$lambda$Generator$_setter_$genNum_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.util.ParserUtilitiesTests.Tup5: apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: whileexpr$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(cond: org.kiama.example.oberon0.L2.source.Condition) :: 1
org.kiama.example.lambda2.AST.NoType: productIterator() :: 1
org.kiama.example.lambda3.Parser.$anonfun: apply(s: String) :: 1
org.kiama.example.oberon0.base.c.CArrayType: <init>(size: Int,elemtype: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.util.ParserUtilitiesTests.Tup3: canEqual(x$1: Any) :: 1
org.kiama.example.imperative.Imperative$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$constrcache_$eq(Lscala/collection/mutable/WeakHashMap;) :: 1
org.kiama.example.oberon0.drivers.A2a$: step$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda3.Lambda$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.util.ParserUtilitiesTests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(u: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.lambda2.LambdaTests: ttype$lzycompute() :: 1
org.kiama.example.imperative.Generator.$anonfun.$anonfun: apply(e: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A2b$: optelse$lzycompute() :: 1
org.kiama.example.oberon0.L1.source.IfStatement: <init>() :: 1
org.kiama.example.oberon0.drivers.A1$: block$lzycompute() :: 1
org.kiama.example.oberon0.L1.source.WhileStatement: productIterator() :: 1
org.kiama.example.lambda.Lambda$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.c.CModExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.oberon0.L4.c.CRecordType: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.drivers.A4Tests: rootconstexp$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: start() :: 1
org.kiama.example.prolog.SyntaxAnalysis: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A3$: constdeclsection$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2a$: isconst$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: optformalParameters$lzycompute() :: 1
org.kiama.example.oberon0.L1.c.CIfElseStatement: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$example$oberon0$base$TestDriver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A2bTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.attribution.AttributionBase$CircularAttribute: org$kiama$attribution$AttributionBase$CircularAttribute$$$outer() :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$: scala$App$_setter_$scala$App$$initCode_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.drivers.A2b$: parser() :: 1
org.kiama.example.oberon0.L0.source.TypeDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,tipe: org.kiama.example.oberon0.L0.source.TypeDef) :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$issuperterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oberon0.drivers.A2b$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.SECDBase.StackUnderflow: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: step$lzycompute() :: 1
org.kiama.example.oberon0.L4.c.CRecordType: <init>(fields: List[org.kiama.example.oberon0.base.c.CVarDecl]) :: 1
org.kiama.example.oberon0.drivers.A4Tests: vardecl$lzycompute() :: 1
org.kiama.example.RISC.RISC.$anonfun: apply(r: Int) :: 1
org.kiama.example.oberon0.drivers.A1$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.prolog.SyntaxAnalysis: commit(Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun: apply(x0$2: org.kiama.example.iswim.compiler.Syntax.Variable) :: 1
org.kiama.example.oberon0.base.c.CInclude: hashCode() :: 1
org.kiama.example.picojava.tests.ParserTests: xtends$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: factor$lzycompute() :: 1
org.kiama.example.dataflow.Parser: whileStm() :: 1
org.kiama.example.prolog.PrologTree.Fact: hashCode() :: 1
org.kiama.example.lambda2.AST.AddOp: hashCode() :: 1
org.kiama.example.dataflow.DataflowAST.Assign: productIterator() :: 1
org.kiama.example.imperative.AST$Stmt: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.iswim.driver.Main$: org$kiama$example$iswim$compiler$Parser$_setter_$reserved_$eq(Lscala/collection/immutable/HashSet;) :: 1
org.kiama.example.oberon0.drivers.A2a$: simpexp$lzycompute() :: 1
org.kiama.example.til.AST.Id: hashCode() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$24: PrettyPrinterBase.this.Doc,x$25: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.oberon0.drivers.A2bTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.output.PrettyPrinter.$anonfun.$anonfun.$anonfun: apply(h: Boolean) :: 1
org.kiama.example.prolog.Interpreter.UnifyGoal: hashCode() :: 1
org.kiama.rewriting.Rewriter: some(s: ) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$64: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.IO: <init>() :: 1
org.kiama.example.lambda.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.json.ParsingTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.obr.RISCTransformation: <init>() :: 1
org.kiama.example.oberon0.L4.source.IndexExp: apply(base: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.compiler.Syntax.ExprStmt: hashCode() :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$15: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.oberon0.drivers.A3Tests: declarations$lzycompute() :: 1
org.kiama.example.imperative.ImperativeGen: process(s: org.kiama.example.imperative.AST.Stmt) :: 1
org.kiama.example.oberon0.drivers.A2aTests: statement$lzycompute() :: 1
org.kiama.example.picojava.Main: <init>() :: 1
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.example.oberon0.base.TestDriver: processline$default$3() :: 1
org.kiama.example.oberon0.drivers.A2aTests: trueConstant$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable.Constant: hashCode() :: 1
org.kiama.example.til.AST.Eq: hashCode() :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$equal_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.lambda3.Lambda$: integer$lzycompute() :: 1
org.kiama.example.dataflow.DataflowAST.If: productIterator() :: 1
org.kiama.example.lambda2.Reduce.$anonfun: apply() :: 1
org.kiama.example.picojava.tests.ErrorTests: xtends$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: optformalParameters$lzycompute() :: 1
org.kiama.example.oberon0.L4.SymbolTable.ArrayType: hashCode() :: 1
org.kiama.example.lambda2.Analysis.$anonfun: apply(x0$5: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.iswim.compiler.Syntax.StringVal: productIterator() :: 1
org.kiama.example.oberon0.L0.c.CAddExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.util.ParserUtilitiesTests.Tup2: apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node) :: 1
org.kiama.example.prolog.SemanticAnalysis: <init>() :: 1
org.kiama.example.oberon0.L2.source.ForStatement$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.imperative.Imperative$: not(Lscala/Function0;) :: 1
org.kiama.example.til.AST.Str: hashCode() :: 1
org.kiama.example.obr.ObrTree.ForStmt: hashCode() :: 1
org.kiama.example.oberon0.L4.source.ArrayTypeDef: apply(size: org.kiama.example.oberon0.L0.source.Expression,tipe: org.kiama.example.oberon0.L0.source.TypeDef) :: 1
org.kiama.example.json.Driver: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.prolog.SyntaxAnalysis: clause() :: 1
org.kiama.example.iswim.compiler.Syntax.LetRecStmt: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1Tests: unknownType$lzycompute() :: 1
org.kiama.example.iswim.compiler.CodeGenerator$$anonfun$1$$anonfun$apply$3$$anonfun$apply$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L4.SymbolTable.ArrayType: elemtype() :: 1
org.kiama.example.iswim.secd.StringOps: unescape(s: String) :: 1
org.kiama.example.transform.Analysis$: op_tree$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: whileStatement$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: translate(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.lambda3.Lambda$: trans$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: caseStatement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: parser() :: 1
org.kiama.output.PrettyPrinterBase: list$default$5([T]) :: 1
org.kiama.example.dataflow.DataflowAST$Stm: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.imperative.Generator.$anonfun: apply(s: String) :: 1
org.kiama.example.picojava.tests.ParserTests: block_stmt$lzycompute() :: 1
org.kiama.example.picojava.AbstractSyntax.Program: <init>() :: 1
org.kiama.output.ParenPrettyPrinter$class: fi$lzycompute$1(Lorg/kiama/output/ParenPrettyPrinter;Lscala/runtime/ObjectRef;Lorg/kiama/output/PrettyOperatorExpression;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$issubterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oberon0.L0.source.ModExp: hashCode() :: 1
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration) :: 1
org.kiama.example.oberon0.drivers.A2bTests: statements$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Match: hashCode() :: 1
org.kiama.example.transform.Driver: opdecl$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Main: <init>() :: 1
org.kiama.example.oberon0.L0.source.VarDecl: <init>() :: 1
org.kiama.example.lambda3.Parser$$anonfun$trans$2: org$kiama$example$lambda3$Parser$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.LambdaTests.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) :: 1
org.kiama.example.oberon0.drivers.A2b$: typedecl$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envirOut_$eq(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L1.c.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) :: 1
org.kiama.example.iswim.tests.ParserTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.til.TIL1_1Tests: parser$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$statement$7: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A4Tests: forVar$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: assignment_statement$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.FieldList: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$5: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.transform.Driver: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.lambda2.ParEagerSubst$$anonfun$f$lzycompute$1$1: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$4: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$whileexpr$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(fl: org.kiama.example.oberon0.L4.source.FieldList) :: 1
org.kiama.example.oberon0.drivers.A2aTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.oneohonecompanies.Cut: <init>() :: 1
org.kiama.example.obr.ParserDriver: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.L0.source.TypeDecl: tipe() :: 1
org.kiama.example.oberon0.drivers.A3$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.obr.SyntaxAnalysis: withPos(op: SyntaxAnalysis.this.Parser[String]) :: 1
org.kiama.example.lambda2.Lambda$: ttype0$lzycompute() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: rootconstexpDef() :: 1
org.kiama.example.oberon0.L0.source.NamedType: productIterator() :: 1
org.kiama.example.oberon0.L3.c.CDerefExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.lambda.LambdaTests: org$kiama$example$lambda$Generator$_setter_$genNum_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.prolog.PrologTree.Rule: hashCode() :: 1
org.kiama.example.dataflow.Driver: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SymbolTable.ExnType: hashCode() :: 1
org.kiama.example.til.TIL2_3Tests: write_statement$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase: surround(d: PrettyPrinterBase.this.Doc,b: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.iswim.secd.SECDBase.GetType: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$example$oberon0$base$TestDriver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun.$anonfun: apply(x$1: Char) :: 1
org.kiama.example.picojava.Main$: rep(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.imperative.Imperative$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.lambda3.Lambda$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: isconst$lzycompute() :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: subsOpn$lzycompute() :: 1
org.kiama.attribution.AttributionBase.Attribute.$anonfun: apply(x$1: String) :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.oberon0.drivers.A4Tests: level$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: IDENTIFIER$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: statementSequence$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.transform.AST.Factor: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.AppCC: productIterator() :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$prop$Configuration$_setter_$generatorDrivenConfig_$eq(Lorg/scalatest/prop/Configuration$PropertyCheckConfig;) :: 1
org.kiama.example.imperative.AST.Var: <init>() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: deftypeDef() :: 1
org.kiama.example.til.AST.Add: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$15: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.iswim.secd.StringOps.PushString: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.LetRec: productIterator() :: 1
org.kiama.example.oberon0.L4.source.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.lambda2.Lambda$: exp1$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.c.CNotExp: canEqual(x$1: Any) :: 1
org.kiama.example.prolog.Interpreter.$anonfun: apply(clause: org.kiama.example.prolog.PrologTree.Clause) :: 1
org.kiama.example.oberon0.drivers.A4Tests: integerType$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.secd.SECDBase.PrimTypeValue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: idntype$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: moduledecl$lzycompute() :: 1
org.kiama.util.CompilerTests: intercept(Lscala/Function0;Lscala/reflect/Manifest;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: entity$lzycompute() :: 1
org.kiama.example.dataflow.LivenessImpl: icount_=(x$1: Int) :: 1
org.kiama.example.obr.RISCTree.Write: productIterator() :: 1
org.kiama.example.oneohonecompanies.Main: main(args: Array[String]) :: 1
org.kiama.util.CompilerTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$expression$1$$anonfun$apply$72: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1$: vardeclsection$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: statement$lzycompute() :: 1
org.kiama.attribution.Attributable: clone() :: 1
org.kiama.example.iswim.tests.ParserTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: vardeclsection$lzycompute() :: 1
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$22: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.prolog.SemanticTestDriver: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$37: Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.transform.Analysis.$anonfun.$anonfun: apply(x0$6: org.kiama.attribution.Attributable) :: 1
org.kiama.example.oberon0.L1.CCodeGenerator: $init$() :: 1
org.kiama.example.oberon0.drivers.A2a$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: assert(Lscala/Option;Ljava/lang/Object;) :: 1
org.kiama.example.lambda3.Lambda$: rep1(Lscala/Function0;) :: 1
org.kiama.rewriting.Rewriter$$anonfun$not$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: rootconstexp$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.json.ParsingTests: jfalse$lzycompute() :: 1
org.kiama.machine.Machine.ParamUpdate: value() :: 1
org.kiama.example.oberon0.drivers.A3Tests: statements$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.BLE: hashCode() :: 1
org.kiama.util.RegexCompiler: makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.oberon0.L0.c.PrettyPrinter: super$basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.example.iswim.secd.IOOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.RISC.RISCISA.WRD: hashCode() :: 1
org.kiama.util.ParserUtilitiesTests: Tup6() :: 1
org.kiama.example.lambda.Lambda$: idn$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: condition$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests.$anonfun.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: lhs$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2b$: tipe$lzycompute() :: 1
org.kiama.example.oberon0.L4.c.PrettyPrinter: super$toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.iswim.compiler.Syntax.MatchClause: productIterator() :: 1
org.kiama.example.lambda2.ParEagerSubst: s() :: 1
org.kiama.example.iswim.driver.Main$: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$isSemanticallyCorrect_$eq(Lscala/Function1;) :: 1
org.kiama.example.imperative.Generator.$anonfun.$anonfun: apply(b: org.kiama.example.imperative.AST.Stmt) :: 1
org.kiama.example.til.TIL1_1Main$: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ErrorTests.$anonfun: apply() :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: letLift$lzycompute() :: 1
org.kiama.example.json.Driver: jtrue$lzycompute() :: 1
org.kiama.example.obr.ObrTree.ArrayVar: hashCode() :: 1
org.kiama.example.dataflow.Parser: asgnStm() :: 1
org.kiama.example.oberon0.drivers.A2a$: idndef$lzycompute() :: 1
org.kiama.example.json.Driver: process(ast: org.kiama.example.json.JSONTree.JValue,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.obr.RISCTree.Label: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply(x0$9: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.oberon0.L2.Lifter: transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.oberon0.drivers.A4Tests: expression$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: emptyexpr$lzycompute() :: 1
org.kiama.example.dataflow.Driver: whileStm$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.ModExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.L0.NameAnalyser: super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.json.Driver: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda.Lambda$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.drivers.A2b$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.drivers.A1$: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.source.LtExp: productIterator() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$82: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: conditions$lzycompute() :: 1
org.kiama.example.oberon0.L4.c.CIndexExp: <init>(array: org.kiama.example.oberon0.base.c.CExpression,index: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.iswim.secd.SECDBase: <init>() :: 1
org.kiama.example.til.TIL2_2Main$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L2.source.MinMaxCond: productIterator() :: 1
org.kiama.example.iswim.driver.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.obr.ObrTree.PlusExp: productIterator() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$86: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.iswim.driver.Main$: commit(Lscala/Function0;) :: 1
org.kiama.example.RISC.RISCISA.RET: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: whileStatement$lzycompute() :: 1
org.kiama.example.oberon0.base.c.PrettyPrinter: super$toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.til.AST.Assign: <init>() :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$util$GeneratingREPLBase$_setter_$ignoreWhitespaceLines_$eq(Z) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecls$1$$anonfun$apply$14$$anonfun$apply$15: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L3.source.Call: hashCode() :: 1
org.kiama.example.oberon0.base.source.ModuleDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,block: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse) :: 1
org.kiama.example.oberon0.drivers.A1Tests: convertToEqualizer(Ljava/lang/Object;) :: 1
org.kiama.output.PrettyPrinter$$anonfun$org$kiama$output$PrettyPrinter$$scan$1: org$kiama$output$PrettyPrinter$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2a$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.drivers.A2a$: value$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue: <init>() :: 1
org.kiama.example.picojava.tests.ErrorTests: class_decl$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Less: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2a$: elsif$lzycompute() :: 1
org.kiama.example.oberon0.L3.source.ValMode: hashCode() :: 1
org.kiama.example.iswim.driver.Main$: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$unreachable_$eq(Lscala/Function1;) :: 1
org.kiama.example.lambda.LambdaTests: idn$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: letexpr$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: op$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CNamedType: ident() :: 1
org.kiama.attribution.Decorators: <init>() :: 1
org.kiama.example.iswim.secd.SECDBase.PrimValue: hashCode() :: 1
org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds: <init>() :: 1
org.kiama.example.iswim.driver.Main$: matchclause$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.BoolVal: productIterator() :: 1
org.kiama.example.dataflow.DataflowAST.Return: apply(ret: String) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: expr$lzycompute() :: 1
org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: isDefinedAt(x1: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark.$anonfun.$anonfun: apply(i: Int) :: 1
org.kiama.example.obr.RISCTree.LabelDef: productIterator() :: 1
org.kiama.example.picojava.AbstractSyntax.AssignStmt: <init>() :: 1
org.kiama.example.oberon0.base.c.CStrType: hashCode() :: 1
org.kiama.example.lambda.Lambda$: start$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.transform.AST.Program: <init>() :: 1
org.kiama.example.prolog.SymbolTable.AtomType: hashCode() :: 1
org.kiama.example.obr.ObrTree.NotExp: productIterator() :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: parser$lzycompute() :: 1
org.kiama.example.iswim.secd.StringOps: super$evalInst() :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: arithop$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: variable$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: string$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.CMP: hashCode() :: 1
org.kiama.example.prolog.SymbolTable.Predicate: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2bTests: assignment$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: opt(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.IfStmt: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis: program$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.VarDecl: tipe() :: 1
org.kiama.example.lambda3.Lambda$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.lambda2.ParLazy: letAppL(eval: ) :: 1
org.kiama.example.iswim.secd.SECDBase.PushEmpty: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: blockexpr$lzycompute() :: 1
org.kiama.example.iswim.secd.RecordOps: evalInst() :: 1
org.kiama.example.til.TIL2_3Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.rewriting.NominalAST: <init>() :: 1
org.kiama.example.til.AST.While: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecl$1: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1$: typedecl$lzycompute() :: 1
org.kiama.example.oberon0.L2.source.ForStatement: apply(idn: org.kiama.example.oberon0.L0.source.IdnExp,lower: org.kiama.example.oberon0.L0.source.Expression,upper: org.kiama.example.oberon0.L0.source.Expression,by: Option[org.kiama.example.oberon0.L0.source.Expression],block: org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.oberon0.L3.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.til.TIL1_1Tests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$equal_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.transform.Driver: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: subsNum$lzycompute() :: 1
org.kiama.example.prolog.Unifier: <init>() :: 1
org.kiama.example.til.TIL1_1Tests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_3Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L0.source.IdnExp: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$96: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.ConstDecl: idndef() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser: super$idntypeDef() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$variabledecl$4$$anonfun$apply$22: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oneohonecompanies.Other.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A2b$: env$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: rep(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: letLet$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: not(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L3.c.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) :: 1
org.kiama.example.lambda3.LambdaTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.imperative.AST.While: <init>() :: 1
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$5: org$kiama$example$oberon0$L2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: declarations$lzycompute() :: 1
org.kiama.example.lambda3.Lambda$: exp$lzycompute() :: 1
org.kiama.output.NonAssoc: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase.MatchError: <init>() :: 1
org.kiama.example.oberon0.drivers.A3Tests: value$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: entity$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.dataflow.ControlFlowImpl.$anonfun: apply(s: org.kiama.example.dataflow.DataflowAST.Stm) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$25: Parser.this.~[Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Variable],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.picojava.PredefinedTypes: <init>() :: 1
org.kiama.example.lambda2.Par.$anonfun: isDefinedAt(x8: org.kiama.example.lambda2.AST.Bind) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun.$anonfun.$anonfun: apply(x$1: org.kiama.example.oberon0.base.source.IdnDef) :: 1
org.kiama.example.oberon0.base.TestDriver: pprintastFlagDefault() :: 1
org.kiama.example.obr.RISCTree.RISCProg: productIterator() :: 1
org.kiama.output.PrettyPrinter.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun: apply(c: Int => String) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: valexpr$lzycompute() :: 1
org.kiama.example.obr.RISCTree.CmpneW: productIterator() :: 1
org.kiama.example.lambda2.ParEagerSubst$class: f$lzycompute$1(Lorg/kiama/example/lambda2/ParEagerSubst;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.lambda.Lambda: process(e: org.kiama.example.lambda.AST.Exp) :: 1
org.kiama.util.TestCompiler.$anon: <init>() :: 1
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$12$$anonfun$apply$13: org$kiama$example$oberon0$L4$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.imperative.AST.Seqn: productIterator() :: 1
org.kiama.example.transform.Parser: factor() :: 1
org.kiama.example.oberon0.drivers.A2bTests: typebasetype$lzycompute() :: 1
org.kiama.example.obr.RISCTree.Indexed: hashCode() :: 1
org.kiama.example.json.Driver: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envir_$eq(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: procedureCall$lzycompute() :: 1
org.kiama.example.imperative.Parser: factor() :: 1
org.kiama.example.picojava.PredefinedTypes.$anonfun: apply() :: 1
org.kiama.example.picojava.AbstractSyntax.Program: apply(Block: org.kiama.example.picojava.AbstractSyntax.Block) :: 1
org.kiama.attribution.Decorators$: in$lzycompute$1(Lscala/Function1;Lscala/Function1;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.oberon0.base.Driver.$anonfun: apply(arg: String) :: 1
org.kiama.example.iswim.tests.ParserTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.til.TIL2_2Tests: statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ParserTests: assign_stmt$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.AndExp: <init>() :: 1
org.kiama.output.PrettyPrinter.$anonfun: apply(c: Int, scala.collection.immutable.Queue[Int, Boolean => Int => String) :: 1
org.kiama.example.oberon0.L0.SymbolTable$Module: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.lambda2.ParLazySubst$$anonfun$s$2$$anonfun$apply$7: org$kiama$example$lambda2$ParLazySubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.IdnExp: hashCode() :: 1
org.kiama.example.prolog.SymbolTable.UnknownType: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$example$oberon0$base$TransformingDriver$_setter_$printiastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A1Tests: kase$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: vardecl$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: Pos$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: idndef$lzycompute() :: 1
org.kiama.example.lambda.Evaluator: $init$() :: 1
org.kiama.attribution.Attributable: ->([T, U]a: T => U,implicit b: Attributable.this.type => T) :: 1
org.kiama.example.json.ParsingTests: jtrue$lzycompute() :: 1
org.kiama.rewriting.NominalRewriter.HasVar: <init>() :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$util$GeneratingREPLBase$_setter_$prompt_$eq(Ljava/lang/String;) :: 1
org.kiama.rewriting.NominalRewriter: HasVar() :: 1
org.kiama.example.iswim.compiler.Parser.Pos: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: exprstmt$lzycompute() :: 1
org.kiama.example.imperative.AST.Mul: apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$list$3: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.c.CDivExp: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.base.TestDriver: maxlanglevel() :: 1
org.kiama.example.iswim.tests.ParserTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: fieldListsToFields(fls: List[org.kiama.example.oberon0.L4.source.FieldList]) :: 1
org.kiama.example.lambda3.Lambda$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.obr.RISCTree.RemW: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CTypeDef: hashCode() :: 1
org.kiama.example.dataflow.DataflowAST.Assign: hashCode() :: 1
org.kiama.example.obr.ObrTree.IntVar: <init>() :: 1
org.kiama.example.lambda2.ParLazy: rename() :: 1
org.kiama.example.picojava.AbstractSyntax$Exp: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.base.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) :: 1
org.kiama.example.prolog.SyntaxAnalysis: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.transform.Analysis$: errors$lzycompute() :: 1
org.kiama.example.lambda2.AST.Lam: t() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.obr.ObrTree.IntExp: <init>() :: 1
org.kiama.example.json.Driver: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: optelse$lzycompute() :: 1
org.kiama.output.PrettyPrinter$$anonfun$text$1$$anonfun$4$$anonfun$apply$5: org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1Tests: step$lzycompute() :: 1
org.kiama.example.lambda2.Parser: itype() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: letexpr$lzycompute() :: 1
org.kiama.example.oberon0.L3.source.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.obr.SyntaxAnalysis: variabledecls$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests: primary$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.BR: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2a$: booleanType$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A1Tests: NoSuccess$lzycompute() :: 1
org.kiama.example.iswim.secd.IOOps.Read: <init>() :: 1
org.kiama.example.lambda3.AST.FreeNamesQuery: execute() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$10: org.kiama.example.iswim.compiler.Syntax.Variable) :: 1
org.kiama.example.til.TIL2_1Tests: string$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: integerType$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests$$anonfun$5: org$kiama$example$til$TIL2_1Tests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L3.source.VarMode: hashCode() :: 1
org.kiama.example.prolog.SyntaxAnalysis: query$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser: keywordStrings() :: 1
org.kiama.example.iswim.compiler.Syntax.Empty: hashCode() :: 1
org.kiama.example.lambda2.PrettyPrinter.$anonfun: apply(b: org.kiama.example.lambda2.AST.Bind) :: 1
org.kiama.example.lambda2.LambdaTests: canon(x: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.picojava.tests.ErrorTests: stmt$lzycompute() :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun: apply(x0$2: org.kiama.example.picojava.AbstractSyntax.IdnUse) :: 1
org.kiama.example.lambda3.AST.EvalQuery: apply(e: org.kiama.example.lambda3.AST.Exp) :: 1
org.kiama.example.obr.SyntaxAnalysis: statementseq$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: idndef$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: term$lzycompute() :: 1
org.kiama.example.picojava.NameResolution.$anonfun.$anonfun: apply(x0$2: org.kiama.attribution.Attributable) :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(x0$3: ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D]) :: 1
org.kiama.example.oberon0.drivers.A4Tests: idndeflist$lzycompute() :: 1
org.kiama.example.oberon0.L1.source.PrettyPrinter: super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.obr.RISCTree.Cond: hashCode() :: 1
org.kiama.example.obr.RISCTree.AddW: hashCode() :: 1
org.kiama.attribution.Attribution: dynAttr([T <: Object, U]optNameDef: Option[String],f: T => U) :: 1
org.kiama.example.transform.Driver: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.dataflow.Driver: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A3$: parameters$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests.Tup4: apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node) :: 1
org.kiama.example.oberon0.L3.source.FPSection: apply(mode: org.kiama.example.oberon0.L3.source.Mode,idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef) :: 1
org.kiama.example.obr.SyntaxAnalysis: declarations$lzycompute() :: 1
org.kiama.output.ParenPrettyPrinter: fo() :: 1
org.kiama.example.lambda2.Lambda$: idn$lzycompute() :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: beta$lzycompute() :: 1
org.kiama.example.imperative.AST.Div: <init>() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$11: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.til.AST.For: <init>() :: 1
org.kiama.example.lambda.Generator: genExp(sz: Int) :: 1
org.kiama.example.til.TIL2_1Main$: for_statement$lzycompute() :: 1
org.kiama.example.til.AST.Ne: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.oberon0.L3.NameAnalyser: envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.example.dataflow.Driver: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.compiler.Syntax.IswimProg: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$92: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.ParserTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.tests.ParserTests: stringLiteral() :: 1
org.kiama.example.iswim.driver.Main$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.dataflow.Driver: parser() :: 1
org.kiama.example.oberon0.drivers.A4Tests: typedeclsection$lzycompute() :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$delayedInit$body: <init>(Lorg/kiama/example/picojava/benchmark/PicoJavaBenchmark$;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$applic$1$$anonfun$apply$35: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.AST.FunType: productIterator() :: 1
org.kiama.example.iswim.compiler.Syntax.LetRecStmt: hashCode() :: 1
org.kiama.example.prolog.SyntaxAnalysis: parser$lzycompute() :: 1
org.kiama.example.obr.ObrTree.NegExp: <init>() :: 1
org.kiama.example.oberon0.L4.source.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive: <init>() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$4: Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.lambda.Generator.$anonfun: apply(v: String) :: 1
org.kiama.example.til.TIL2_2Tests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.imperative.AST.Div: apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp) :: 1
org.kiama.example.obr.ObrTree.ObrInt: productIterator() :: 1
org.kiama.util.ParserUtilitiesTests$Tup5: org$kiama$util$ParserUtilitiesTests$Tup5$$$outer() :: 1
org.kiama.example.imperative.AST.Seqn: apply(ss: Seq[org.kiama.example.imperative.AST.Stmt]) :: 1
org.kiama.example.obr.ObrTree.ReturnStmt: productIterator() :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) :: 1
org.kiama.example.oberon0.L3.Parser$$anonfun$procedureDeclaration$2: org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer() :: 1
org.kiama.output.ParenPrettyPrinter: fi() :: 1
org.kiama.example.transform.AST.Var: productIterator() :: 1
org.kiama.example.lambda.LambdaTests: PropertyCheckConfig() :: 1
org.kiama.example.oberon0.drivers.A1$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: block_stmt$lzycompute() :: 1
org.kiama.example.obr.ObrTree.AssignStmt: productIterator() :: 1
org.kiama.example.til.TIL2_2Main$: assignment_statement$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.App: hashCode() :: 1
org.kiama.example.json.Driver: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.obr.ObrTree.ReturnStmt: apply(value: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.example.picojava.AbstractSyntax.VarDecl: apply(Type: org.kiama.example.picojava.AbstractSyntax.Access,Name: String) :: 1
org.kiama.machine.Machine.ParamState: value(t: T) :: 1
org.kiama.example.til.TIL2_1Main$: read_statement$lzycompute() :: 1
org.kiama.example.prolog.SemanticTestDriver: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.lambda.Generator: genLamExp(sz: Int) :: 1
org.kiama.example.til.TIL2_1Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.picojava.AbstractSyntax.WhileStmt: apply(Condition: org.kiama.example.picojava.AbstractSyntax.Exp,Body: org.kiama.example.picojava.AbstractSyntax.Stmt) :: 1
org.kiama.example.transform.Driver: ident$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: opt(Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ParserTests: success(Ljava/lang/Object;) :: 1
org.kiama.example.dataflow.Driver: idn$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: optformalParameters$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: constdecl$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$4: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A3$: fpsection$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$TranslatingTestDriver$_setter_$pprintcastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis.$anonfun: apply(x0$2: org.kiama.example.iswim.compiler.Syntax.Iswim) :: 1
org.kiama.example.obr.ObrTree.IntVar: apply(idn: String) :: 1
org.kiama.example.obr.RISCEncoder.$anonfun: apply(d: org.kiama.example.obr.RISCTree.RISCNode) :: 1
org.kiama.util.Environments.Named: id() :: 1
org.kiama.example.picojava.Parser$$anonfun$stmt$1: org$kiama$example$picojava$Parser$$anonfun$$$outer() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$18: PrettyPrinterBase.this.Doc,x$19: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.til.TIL1_1Main$: commit(Lscala/Function0;) :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$9: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$46: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.SECDBase.RaiseException: productIterator() :: 1
org.kiama.example.lambda.Lambda$: variable$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.attribution.Attribution$CachedParamAttribute: apply$mcVI$sp(I) :: 1
org.kiama.example.lambda2.AST.Lam: e() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: apply(x0$6: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.example.obr.RISCTree.CmpeqW: productIterator() :: 1
org.kiama.example.imperative.Imperative: process(s: org.kiama.example.imperative.AST.Stmt) :: 1
org.kiama.example.oberon0.drivers.A3$: deftype$lzycompute() :: 1
org.kiama.example.lambda2.AST.Opn: apply(e1: org.kiama.example.lambda2.AST.Exp,o: org.kiama.example.lambda2.AST.Op,e2: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.oberon0.L1.source.IfStatement: apply(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block,elsifs: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.oberon0.drivers.A4Tests: caseStatement$lzycompute() :: 1
org.kiama.example.RISC.RISCISA.MVN: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: typedecl$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.IndexExp: hashCode() :: 1
org.kiama.example.oberon0.L3.SymbolTable.Parameter: mode() :: 1
org.kiama.example.oberon0.L2.source.CaseStatement: hashCode() :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$isinnernode_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.dataflow.Driver: stm$lzycompute() :: 1
org.kiama.example.dataflow.Driver: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.picojava.NameResolution.$anonfun: apply(x0$1: org.kiama.example.picojava.AbstractSyntax.Access) :: 1
org.kiama.attribution.Decorators$: out$lzycompute$1(Lscala/Function1;Lscala/Function1;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/ObjectRef;Lscala/runtime/VolatileByteRef;) :: 1
org.kiama.example.oberon0.drivers.A2a$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: entity$lzycompute() :: 1
org.kiama.example.oberon0.base.Driver: processargs(args: List[String]) :: 1
org.kiama.example.oberon0.drivers.A3$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L3.SymbolTable$Procedure: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A4Tests: keyword$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: letLetRen$lzycompute() :: 1
org.kiama.example.oberon0.L3.Parser: declarationsDef() :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(in: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.rewriting.Rewriter$$anonfun$where$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_3Main$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.til.TIL2_1Main$: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.c.CLeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.output.PrettyPrinterBase: rbrace() :: 1
org.kiama.example.oberon0.L2.Parser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.L0.source.Assignment: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CMulExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.oberon0.drivers.A3$: conditions$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests$Tup4$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.prolog.PrologTree.Pred: apply(s: String,ts: List[org.kiama.example.prolog.PrologTree.Term]) :: 1
org.kiama.example.lambda2.Analysis: <init>() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: pattern$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: namedtypedef$lzycompute() :: 1
org.kiama.example.iswim.secd.RecordOps.UnpackRecord: productIterator() :: 1
org.kiama.example.oberon0.drivers.A3Tests: booleanType$lzycompute() :: 1
org.kiama.example.oberon0.base.TranslatingTestDriver: pprintcastFlagDefault() :: 1
org.kiama.example.transform.Driver: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: whitespaceParser$lzycompute() :: 1
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.til.TIL2_1Tests: for_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: ident$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.attribution.Attribution$: org$kiama$attribution$Attribution$$MemoState$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: whitespaceParser$lzycompute() :: 1
org.kiama.example.obr.ObrTree.TryStmt: productIterator() :: 1
org.kiama.example.iswim.tests.ParserTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.util.ParserUtilitiesTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.til.AST.Sub: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: exptype$lzycompute() :: 1
org.kiama.example.oberon0.base.TranslatingDriver: super$processargs(args: List[String]) :: 1
org.kiama.rewriting.Rewriter$Strategy: apply$mcVI$sp(I) :: 1
org.kiama.example.oberon0.drivers.A2b$: entity$lzycompute() :: 1
org.kiama.example.dataflow.Optimise.$anonfun.$anonfun: apply() :: 1
org.kiama.example.oberon0.drivers.A4Tests: whitespaceParser$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.prolog.Main$: process(Ljava/lang/Object;) :: 1
org.kiama.example.prolog.SymbolTable.Variable: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.picojava.Main$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Tests: term$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.oberon0.drivers.A3$: elsif$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.c.CLeExp: canEqual(x$1: Any) :: 1
org.kiama.example.iswim.secd.StringOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2a$: vardeclsection$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.FieldExp: productIterator() :: 1
org.kiama.example.picojava.ErrorCheck.$anonfun: apply(p: org.kiama.example.picojava.AbstractSyntax.Program) :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun: apply(x0$5: org.kiama.example.obr.ObrTree.EntityNode) :: 1
org.kiama.example.prolog.SyntaxAnalysis$$anonfun$literals$1: org$kiama$example$prolog$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.SymbolTable: isModule(e: SymbolTable.this.Entity) :: 1
org.kiama.example.obr.SemanticAnalysis.$anonfun.$anonfun: apply(x$1: org.kiama.example.obr.SymbolTable.TypeBase) :: 1
org.kiama.example.oneohonecompanies.Company.DU: hashCode() :: 1
org.kiama.example.lambda3.LambdaTests: commit(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.c.CNotExp: op() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser: super$exptypeDef() :: 1
org.kiama.example.transform.Parser$$anonfun$program$2: org$kiama$example$transform$Parser$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_1Tests: identifier$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CDivExp: priority() :: 1
org.kiama.example.oberon0.L3.Parser: super$statementDef() :: 1
org.kiama.rewriting.Rewriter.$anonfun.$anonfun: apply(v: T) :: 1
org.kiama.example.oberon0.drivers.A2bTests: statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.lambda2.AST.Lam: <init>() :: 1
org.kiama.example.oberon0.base.c.CProgram: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: optelse$lzycompute() :: 1
org.kiama.example.til.TIL1_1Tests: identifier$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(m: Int) :: 1
org.kiama.example.lambda2.LambdaTests: exp2$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: caseStatement$lzycompute() :: 1
org.kiama.example.dataflow.DataflowAST.While: apply(cond: String,body: org.kiama.example.dataflow.DataflowAST.Stm) :: 1
org.kiama.util.ParserUtilitiesTests: whiteSpace() :: 1
org.kiama.example.oberon0.drivers.A3$: trueConstant$lzycompute() :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(x0$5: List[String], String, List[org.kiama.example.transform.AST.Exp]) :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$10: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.Lambda.Command: <init>() :: 1
org.kiama.example.json.PrettyPrinter$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.util.WhitespaceParser: super$literal(s: String) :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun.$anonfun: apply(i: Int) :: 1
org.kiama.example.picojava.AbstractSyntax.Dot: hashCode() :: 1
org.kiama.example.json.Driver: string$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: forStatement$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda2.AST.App: <init>() :: 1
org.kiama.example.dataflow.Driver: parser$lzycompute() :: 1
org.kiama.example.transform.AST.VarDecl: hashCode() :: 1
org.kiama.example.oberon0.L0.source.TypeDecl: <init>() :: 1
org.kiama.attribution.AttributionBase.ParamAttributeKey: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.lambda.LambdaTests.$anonfun: <init>() :: 1
org.kiama.util.Environments.$anonfun: apply(s: scala.collection.immutable.Map[String,Environments.this.Entity]) :: 1
org.kiama.example.transform.Parser: op() :: 1
org.kiama.example.lambda.Lambda$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.HeapOps.Put: productIterator() :: 1
org.kiama.example.oberon0.L0.source.GtExp: productIterator() :: 1
org.kiama.example.picojava.tests.ErrorTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A3$: env$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: commit(Lscala/Function0;) :: 1
org.kiama.output.NonAssoc: productPrefix() :: 1
org.kiama.example.oberon0.L0.c.CLtExp: canEqual(x$1: Any) :: 1
org.kiama.output.NonAssoc: productElement(x$1: Int) :: 1
org.kiama.example.lambda3.LambdaTests: start$lzycompute() :: 1
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$32: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.RISCTree.LdW: productIterator() :: 1
org.kiama.example.obr.ObrTree.IndexExp: <init>() :: 1
org.kiama.example.oberon0.drivers.A1$: unknownType$lzycompute() :: 1
org.kiama.example.oberon0.base.Transformer: transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.oberon0.drivers.A3Tests: assignment$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: success(Ljava/lang/Object;) :: 1
org.kiama.example.imperative.AST.Asgn: <init>() :: 1
org.kiama.example.iswim.secd.BooleanOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.lambda3.LambdaTests: mkparsetest(s: String,r: String) :: 1
org.kiama.example.lambda.Parser.$anonfun: apply(s: String) :: 1
org.kiama.example.oberon0.L0.c.CGtExp: priority() :: 1
org.kiama.example.oberon0.L4.Parser$$anonfun$lhsDef$1$$anonfun$apply$10: org$kiama$example$oberon0$L4$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_2Main$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser$$anonfun$parameters$1$$anonfun$1: org$kiama$example$oberon0$L3$TypeAnalyser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: letrecexpr$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: block$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: letDrop$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: idndef$lzycompute() :: 1
org.kiama.example.til.AST.Eq: <init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.til.TIL2_3Tests: success(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.driver.Main$: stringLiteral() :: 1
org.kiama.example.til.TIL2_1Tests$$anonfun$3: org$kiama$example$til$TIL2_1Tests$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_1Tests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: term1$lzycompute() :: 1
org.kiama.example.lambda3.AST.FreshQuery: <init>() :: 1
org.kiama.example.oberon0.drivers.A1Tests: integerType$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a: <init>() :: 1
org.kiama.example.oberon0.L0.c.CMulExp: priority() :: 1
org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) :: 1
org.kiama.example.til.TIL2_1Main$: while_statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: typedef$lzycompute() :: 1
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$4: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.driver.Main$: term4$lzycompute() :: 1
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: <init>() :: 1
org.kiama.example.oberon0.base.Parser$$anonfun$moduledecl$1: org$kiama$example$oberon0$base$Parser$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_1Tests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.imperative.AST.Neg: hashCode() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$expression$5$$anonfun$apply$20: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.NameAnalyser: super$isLvalue(l: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A3$: parser() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$factor$1$$anonfun$apply$50: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: emptyexpr$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.til.AST.Ne: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: falseConstant$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: exprstmt$lzycompute() :: 1
org.kiama.example.prolog.Interpreter.TermGoal: apply(term: org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.example.oberon0.base.c.CVarDecl: hashCode() :: 1
org.kiama.example.oberon0.L0.source.ConstDecl: hashCode() :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$4: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2a$: entity$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.MkUserException: canEqual(x$1: Any) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$constantdecls$1$$anonfun$apply$11$$anonfun$apply$12: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A3$: value$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: identRegex$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.machine.Machine: updates_=(x$1: List[Machine.this.Update]) :: 1
org.kiama.util.ParserUtilities.$anonfun: apply(x0$10: ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E],F]) :: 1
org.kiama.example.lambda3.LambdaTests: expectQueryParse(str: String,result: String) :: 1
org.kiama.example.dataflow.Parser: returnStm() :: 1
org.kiama.example.iswim.secd.IOOps: evalInst() :: 1
org.kiama.util.ParserUtilities$$anonfun$any$1: org$kiama$util$ParserUtilities$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$issuperterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.obr.ObrTree.MinusExp: productIterator() :: 1
org.kiama.attribution.Attribution: dynAttr([T <: Object, U]f: T => U) :: 1
org.kiama.example.til.TIL2_2Tests: rep(Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ErrorTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.til.TIL2_1Main$: identifier$lzycompute() :: 1
org.kiama.example.dataflow.VariablesImpl.$anonfun: apply(x0$2: org.kiama.example.dataflow.DataflowAST.Stm) :: 1
org.kiama.example.json.Driver: success(Ljava/lang/Object;) :: 1
org.kiama.example.obr.ObrTree: <init>() :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply(x$1: SyntaxAnalysis.this.~[String,String]) :: 1
org.kiama.example.oberon0.drivers.A2aTests: elsif$lzycompute() :: 1
org.kiama.example.iswim.secd.IntegerOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.til.TIL1_1Main$: identifier$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests: integer$lzycompute() :: 1
org.kiama.example.lambda2.Parser$$anonfun$itype$1: org$kiama$example$lambda2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.Parser: super$typedefDef() :: 1
org.kiama.example.iswim.compiler.Syntax.ExprStmt: <init>() :: 1
org.kiama.rewriting.NominalAST.Bind: hashCode() :: 1
org.kiama.example.oberon0.L3.SymbolTable$Parameter: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.util.ParserUtilitiesTests: commit(Lscala/Function0;) :: 1
org.kiama.example.lambda3.Lambda$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L4.SymbolTable.$anonfun: apply(x$1: SymbolTable.this.Field) :: 1
org.kiama.example.oberon0.L3.source.FPSection: productIterator() :: 1
org.kiama.example.transform.Driver: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: reducesinlambdas() :: 1
org.kiama.example.til.TIL2_2Tests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.util.Environments: isDefinedInScope(scope: scala.collection.immutable.Map[String,Environments.this.Entity],i: String) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: term2$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable$UserType: org$kiama$util$Environments$Named$_setter_$id_$eq(Ljava/lang/String;) :: 1
org.kiama.machine.Machine: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.dataflow.DataflowAST.Return: hashCode() :: 1
org.kiama.example.obr.RISCTree.Jmp: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase.TypeTypeValue: <init>() :: 1
org.kiama.example.lambda3.AST.FreeNamesQuery: <init>() :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.lambda2.LambdaTests: assertSame(mech: String,e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.iswim.compiler.Syntax.NotEqual: hashCode() :: 1
org.kiama.example.lambda.Lambda$: exp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: readProc$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: rep1(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.NegExp: apply(exp: org.kiama.example.obr.ObrTree.Expression) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: applic$lzycompute() :: 1
org.kiama.example.lambda2.ParLazyUpdateEvaluator: beta$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: readProc$lzycompute() :: 1
org.kiama.example.dataflow.Parser: blockStm() :: 1
org.kiama.example.picojava.tests.ErrorTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.rewriting.NominalAST.GenName: counter_=(x$1: Int) :: 1
org.kiama.example.oberon0.L0.SymbolTable$Constant: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(x0$4: ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E]) :: 1
org.kiama.example.lambda.Generator.$anonfun.$anonfun: apply(r: org.kiama.example.lambda.AST.Exp) :: 1
org.kiama.example.picojava.tests.ErrorTests: success(Ljava/lang/Object;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$35: Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.iswim.secd.RecordOps.RecordValue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: desugarFor$lzycompute() :: 1
org.kiama.example.lambda3.AST.SwapQuery: hashCode() :: 1
org.kiama.example.lambda.Lambda$: opt(Lscala/Function0;) :: 1
org.kiama.example.iswim.tests.ParserTests: lambdaexpr$lzycompute() :: 1
org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual: hashCode() :: 1
org.kiama.example.lambda3.AST.FreshQuery: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: idndef$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$29: Parser.this.~[Parser.this.~[Parser.this.Pos,List[org.kiama.example.iswim.compiler.Syntax.Binding]],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.imperative.AST.Seqn: hashCode() :: 1
org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun: apply(x0$1: Parser.this.~[List[org.kiama.example.oberon0.base.source.Declaration],List[org.kiama.example.oberon0.L3.source.ProcDecl]]) :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.compiler.Syntax.BoolVal: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: term1$lzycompute() :: 1
org.kiama.example.oberon0.L4.SymbolTable: hasField(t: SymbolTable.this.Type,f: String) :: 1
org.kiama.example.lambda.LambdaTests.$anonfun.$anonfun: apply(v: org.kiama.example.lambda.AST.Var) :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun: apply(x0$1: org.kiama.example.iswim.compiler.Syntax.Iswim) :: 1
org.kiama.example.oberon0.drivers.A4Tests: fieldlist$lzycompute() :: 1
org.kiama.example.til.TIL1_1$$anonfun$expression$1$$anonfun$apply$22$$anonfun$apply$23: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.util.CompilerTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.til.TIL1_1Main$: for_statement$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$3$$anonfun$apply$49: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: cases$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.L3.CCodeGenerator: super$translate(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.lambda.LambdaTests: rep1(Lscala/Function0;) :: 1
org.kiama.output.PrettyPrinter$$anonfun$group$1: org$kiama$output$PrettyPrinter$$anonfun$$$outer() :: 1
org.kiama.example.lambda.Generator.$anonfun: apply(i: String) :: 1
org.kiama.example.oberon0.drivers.A2aTests: comment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: procedureCall$lzycompute() :: 1
org.kiama.attribution.Attribution$CachedDynamicAttribute: org$kiama$attribution$Attribution$CachedDynamicAttribute$$$outer() :: 1
org.kiama.example.oberon0.L1.Parser$$anonfun$ifStatement$4: org$kiama$example$oberon0$L1$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x1: A1,default: A1 => B1) :: 1
org.kiama.example.lambda.LambdaTests$$anonfun$1$$anonfun$apply$mcV$sp$1: org$kiama$example$lambda$LambdaTests$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$term$1$$anonfun$apply$100: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.AST.Add: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: variable$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: conditions$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: start$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: elsif$lzycompute() :: 1
org.kiama.example.oberon0.base.source.IdnDef: <init>(ident: String) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.oberon0.base.Driver: section(emitter: org.kiama.util.Emitter,name: String) :: 1
org.kiama.example.oberon0.L4.c.PrettyPrinter: super$basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) :: 1
org.kiama.example.lambda2.LambdaTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.iswim.secd.HeapOps$RefValue: content$lzycompute() :: 1
org.kiama.example.lambda2.AST.Opn: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: letrecstmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.json.JSONTree.JTrue: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase.PushMachineException: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: Named$lzycompute() :: 1
org.kiama.example.oberon0.L2.Parser$$anonfun$forStatement$3: org$kiama$example$oberon0$L2$Parser$$anonfun$$$outer() :: 1
org.kiama.example.json.JSONTree.JString: <init>() :: 1
org.kiama.example.dataflow.Parser$$anonfun$ifStm$5: org$kiama$example$dataflow$Parser$$anonfun$$$outer() :: 1
org.kiama.example.imperative.AST.Add: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2a$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.lambda.Lambda$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: declarations$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: optActualParameters$lzycompute() :: 1
org.kiama.example.oberon0.L3.source.ProcDecl$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.iswim.compiler.Syntax.Tuple: hashCode() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: arithop$lzycompute() :: 1
org.kiama.example.prolog.SymbolTable.ListType: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.LetRecStmt: <init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]) :: 1
org.kiama.example.oberon0.drivers.A3$: typebasetype$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: subsOpn$lzycompute() :: 1
org.kiama.example.oberon0.L4.Parser: $init$() :: 1
org.kiama.example.oberon0.drivers.A3Tests: forVar$lzycompute() :: 1
org.kiama.example.obr.SymbolTable: <init>() :: 1
org.kiama.example.oberon0.L0.source.NegExp: productIterator() :: 1
org.kiama.example.iswim.driver.Main$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: letstmt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.til.TIL2_1Tests: rep1(Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: s$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Not: productIterator() :: 1
org.kiama.example.lambda.Generator.$anonfun: apply(i: Int) :: 1
org.kiama.example.iswim.secd.SECDBase.CodeSegment: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2a$: commit(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Tests: program$lzycompute() :: 1
org.kiama.example.obr.ObrTree.EqualExp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A1$: idndef$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: condition$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.secd.SECDBase.CodeTree: apply(bs: Seq[org.kiama.example.iswim.secd.SECDBase.ByteCodeBase]) :: 1
org.kiama.example.oneohonecompanies.Main$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.til.TIL2_2Main: <init>() :: 1
org.kiama.example.prolog.SyntaxAnalysis: <init>() :: 1
org.kiama.util.Emitter: <init>() :: 1
org.kiama.rewriting.Rewriter$: org$kiama$rewriting$Rewriter$_setter_$fail_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.oneohonecompanies.Precedence$$anonfun$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2a$: namedtypedef$lzycompute() :: 1
org.kiama.util.Environments$UnknownEntity: org$kiama$util$Environments$UnknownEntity$$$outer() :: 1
org.kiama.example.iswim.compiler.Syntax.Times: hashCode() :: 1
org.kiama.example.picojava.AbstractSyntax.WhileStmt: <init>() :: 1
org.kiama.example.til.TIL2_2Tests: keyword$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue: <init>() :: 1
org.kiama.example.oberon0.L0.c.CNamedType: hashCode() :: 1
org.kiama.example.picojava.NullObjects.$anonfun: apply(x0$1: org.kiama.attribution.Attributable) :: 1
org.kiama.example.RISC.RISCISA.POP: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1Tests: keyword$lzycompute() :: 1
org.kiama.example.til.TIL1_1Main$: declaration$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: readProc$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: forStatement$lzycompute() :: 1
org.kiama.example.picojava.Main$: assign_stmt$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: ifelseexpr$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.While: productIterator() :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$example$imperative$Generator$_setter_$genLeafStmt_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.iswim.compiler.Syntax.LetStmt: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase.MkClosures: productIterator() :: 1
org.kiama.example.obr.SyntaxAnalysis: Pos() :: 1
org.kiama.example.lambda2.Evaluators: <init>() :: 1
org.kiama.example.oberon0.drivers.A2bTests: typedef$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: kase$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests: statement$lzycompute() :: 1
org.kiama.example.dataflow.Driver: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() :: 1
org.kiama.example.iswim.secd.RecordOps.MkRecord: productIterator() :: 1
org.kiama.example.lambda2.ParEagerSubst$$anonfun$e$lzycompute$1$1$$anonfun$apply$3$$anonfun$apply$4$$anonfun$apply$6: org$kiama$example$lambda2$ParEagerSubst$$anonfun$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.Catch: apply(idn: String,stmts: List[org.kiama.example.obr.ObrTree.Statement]) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$39: Parser.this.~[Parser.this.Pos,List[org.kiama.example.iswim.compiler.Syntax.Variable]]) :: 1
org.kiama.util.ParserUtilitiesTests$Tup3: org$kiama$util$ParserUtilitiesTests$Tup3$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2b$: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.transform.Driver: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.RISCTree.Bne: hashCode() :: 1
org.kiama.example.lambda2.ParLazyShare$$anonfun$e$lzycompute$1$1$$anonfun$apply$2: org$kiama$example$lambda2$ParLazyShare$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.GeExp: hashCode() :: 1
org.kiama.example.RISC.RISCISA.DIVI: hashCode() :: 1
org.kiama.example.imperative.AST.Num: productIterator() :: 1
org.kiama.example.lambda.LambdaTests: exp$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.CodeTree: <init>() :: 1
org.kiama.example.picojava.tests.ErrorTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.iswim.tests.ParserTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.iswim.driver.Main$: parenexpr$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.til.TIL1_1Tests: while_statement$lzycompute() :: 1
org.kiama.example.lambda.LambdaTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A4Tests: moduledecl$lzycompute() :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: subsVar$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.PushType: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2aTests: idndef$lzycompute() :: 1
org.kiama.example.iswim.tests.ParserTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.obr.SyntaxAnalysis: parameterdecl$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests$$anonfun$1: org$kiama$example$til$TIL2_1Tests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.FieldExp: productIterator() :: 1
org.kiama.example.dataflow.Driver: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.prolog.SemanticTestDriver: convertToEqualizer(Ljava/lang/Object;) :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: s$lzycompute() :: 1
org.kiama.example.json.JSONTree.JObject: <init>() :: 1
org.kiama.example.lambda3.LambdaTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.iswim.tests.ParserTests.$anonfun: <init>() :: 1
org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(x0$2: ParserUtilities.this.~[ParserUtilities.this.~[A,B],C]) :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$7: org.kiama.example.prolog.PrologTree.Var) :: 1
org.kiama.example.iswim.secd.HeapOps.Get: hashCode() :: 1
org.kiama.example.til.AST.Num: hashCode() :: 1
org.kiama.example.lambda.LambdaTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: statements$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests: Tup6$lzycompute() :: 1
org.kiama.example.oberon0.base.Driver: processast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.lambda3.LambdaTests: whiteSpace() :: 1
org.kiama.example.prolog.SyntaxAnalysis.$anonfun: apply(x0$2: String) :: 1
org.kiama.example.oberon0.L0.source.NotExp: apply(exp: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.lambda3.Lambda$: start$lzycompute() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: optActualParameters$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.iswim.secd.SECDBase.MkUserException: <init>() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.prolog.SemanticTestDriver: parser() :: 1
org.kiama.example.til.AST.IfThen: hashCode() :: 1
org.kiama.example.til.TIL2_2Main$: statement$lzycompute() :: 1
org.kiama.example.prolog.PrologTree.Pred: hashCode() :: 1
org.kiama.example.oberon0.L0.TypeAnalyser: exptypeDef() :: 1
org.kiama.example.lambda2.Analysis: tipe2() :: 1
org.kiama.example.til.TIL2_1Tests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: isDefinedAt(x2: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.lambda2.AST.Lam: productIterator() :: 1
org.kiama.example.imperative.AST.Num: hashCode() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: subsLam$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: vardecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: org$kiama$example$oberon0$base$Driver$_setter_$challengeFlagDefault_$eq(Z) :: 1
org.kiama.example.RISC.RISCISA.ADD: hashCode() :: 1
org.kiama.util.Environments.MultipleEntity: hashCode() :: 1
org.kiama.attribution.AttributionBase.CircularState: <init>() :: 1
org.kiama.util.TestCompiler.$anonfun.$anonfun: apply(c: String) :: 1
org.kiama.example.oberon0.base.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.json.Driver: parser() :: 1
org.kiama.example.lambda2.Lambda$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.oberon0.drivers.A3$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.obr.RISCTree.CmpneW: hashCode() :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: applyOrElse([A1 <: org.kiama.example.iswim.compiler.Syntax.Binding, B1 >: org.kiama.example.iswim.secd.SECDBase.FunctionSpec]x1: A1,default: A1 => B1) :: 1
org.kiama.example.oberon0.drivers.A1: <init>() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_2Main$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.lambda.LambdaTests: PropertyCheckConfig$lzycompute() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$1: Char) :: 1
org.kiama.example.iswim.secd.SECDBase.Lookup: hashCode() :: 1
org.kiama.example.lambda2.LazySubstEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2a$: kase$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda.LambdaTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_1Tests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.til.TIL2_2Main$: primary$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: fpsection$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.til.TIL2_1Tests.$anonfun: <init>() :: 1
org.kiama.example.lambda.LambdaGen$: org$kiama$example$lambda$Generator$_setter_$genLeafExp_$eq(Lorg/scalacheck/Gen;) :: 1
org.kiama.example.til.TIL1_1Main$: keyword$lzycompute() :: 1
org.kiama.example.obr.ObrTree.WhileStmt: hashCode() :: 1
org.kiama.example.imperative.Generator: genWhile(sz: Int) :: 1
org.kiama.example.lambda2.LambdaTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.lambda3.Parser$$anonfun$query$1$$anonfun$apply$5$$anonfun$apply$6: org$kiama$example$lambda3$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.driver.Main: <init>() :: 1
org.kiama.example.iswim.compiler.Syntax.Plus: hashCode() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: comment$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: expconst$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: statement$lzycompute() :: 1
org.kiama.util.PositionedParserUtilities: OnceParser([T]f: scala.util.parsing.input.Reader[Char] => PositionedParserUtilities.this.ParseResult[T]) :: 1
org.kiama.example.lambda3.Lambda$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.util.ParserUtilities: wrap([T, U]p: ) :: 1
org.kiama.example.oneohonecompanies.Precedence.$anonfun: applyOrElse([A1 <: org.kiama.example.oneohonecompanies.Company.Node, B1 >: Double]x1: A1,default: A1 => B1) :: 1
org.kiama.example.oberon0.drivers.A3Tests: procedureDeclaration$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: opt(Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$13: Parser.this.~[Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,Parser.this.Pos],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.lambda3.Lambda$: commit(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: constrainedInt$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.lambda2.Analysis.$anonfun: apply(x0$1: org.kiama.example.lambda2.AST.Exp) :: 1
org.kiama.example.oberon0.drivers.A2bTests: trueConstant$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.json.SyntaxAnalysis.$anonfun: apply(x0$2: String) :: 1
org.kiama.example.til.TIL2_1Tests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.picojava.tests.ErrorTests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.obr.ObrTree.NegExp: hashCode() :: 1
org.kiama.example.iswim.driver.Main$: intRegex$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.tests.ParserTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.iswim.secd.SECDBase.FunctionSpec: productIterator() :: 1
org.kiama.example.iswim.secd.IntegerOps.Mult: hashCode() :: 1
org.kiama.example.prolog.SyntaxAnalysis: atom$lzycompute() :: 1
org.kiama.example.lambda2.Analysis.$anonfun.$anonfun: apply(x$1: org.kiama.example.lambda2.AST.Bind) :: 1
org.kiama.example.imperative.Generator: arbStmt() :: 1
org.kiama.example.obr.ObrTree.IntVar: hashCode() :: 1
org.kiama.example.oberon0.L0.c.CSubExp: priority() :: 1
org.kiama.example.picojava.AbstractSyntax.Use: <init>() :: 1
org.kiama.example.iswim.driver.Main$: applic$lzycompute() :: 1
org.kiama.example.prolog.SymbolTable.UnknownType: hashCode() :: 1
org.kiama.example.iswim.secd.IntegerOps.DivisionByZero: <init>() :: 1
org.kiama.example.til.TIL2_2Tests: org$scalatest$FunSuite$_setter_$org$scalatest$FunSuite$$engine_$eq(Lorg/scalatest/Engine;) :: 1
org.kiama.example.oberon0.L0.source.PrettyPrinter: super$toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.oberon0.drivers.A2bTests: value$lzycompute() :: 1
org.kiama.example.oberon0.L2.Desugarer.$anonfun.$anonfun: apply(x$1: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.lambda.LambdaTests: check(Lorg/scalacheck/Prop;Lorg/scalacheck/Test$Params;) :: 1
org.kiama.example.til.TIL1_1Main$: if_statement$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CBinaryExpression: op() :: 1
org.kiama.example.til.TIL1_1Main$: program$lzycompute() :: 1
org.kiama.example.lambda2.ReduceSubstEvaluator: lambda$lzycompute() :: 1
org.kiama.example.obr.ObrTree.RaiseStmt: apply(idn: String) :: 1
org.kiama.output.PrettyPrinterBase: rparen() :: 1
org.kiama.rewriting.Rewriter.Strategy.$anonfun: apply() :: 1
org.kiama.example.oberon0.L0.c.CInitDecl: hashCode() :: 1
org.kiama.example.til.TIL2_2Tests: write_statement$lzycompute() :: 1
org.kiama.example.oberon0.base.source.PrettyPrinter: declsection(d: org.kiama.example.oberon0.base.source.Declaration) :: 1
org.kiama.example.oberon0.drivers.A2aTests: ifStatement$lzycompute() :: 1
org.kiama.example.imperative.ImperativeGen: <init>() :: 1
org.kiama.example.iswim.secd.RecordOps.UnpackRecord: hashCode() :: 1
org.kiama.util.ParserUtilitiesTests.Tup2: <init>() :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$eq_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.prolog.Main$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.attribution.Attribution: attr([T <: Object, U]optNameDef: Option[String],f: T => U) :: 1
org.kiama.example.iswim.secd.IntComparisonOps.$anonfun: isDefinedAt(x1: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.transform.Main: <init>() :: 1
org.kiama.util.ParserUtilitiesTests.Tup6: apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node,n6: ParserUtilitiesTests.this.Node) :: 1
org.kiama.example.json.Driver: repsep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.NameAnalyser$$anonfun$envout$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.obr.RISCTree: <init>() :: 1
org.kiama.example.obr.ObrTree.AndExp: productIterator() :: 1
org.kiama.example.oberon0.L0.c.CModExp: priority() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$6: SyntaxAnalysis.this.Pos) :: 1
org.kiama.example.lambda2.EagerSubst: s() :: 1
org.kiama.example.obr.SyntaxAnalysis: skipWhitespace() :: 1
org.kiama.example.picojava.tests.ParserTests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.oberon0.drivers.A1$: lhs$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.CodeSegment: <init>() :: 1
org.kiama.example.prolog.SemanticAnalysis.$anonfun: apply(x0$1: org.kiama.example.prolog.PrologTree.SourceNode) :: 1
org.kiama.example.oberon0.drivers.A3Tests: constrainedInt$lzycompute() :: 1
org.kiama.util.Environments: lookup$default$4() :: 1
org.kiama.example.til.TIL1_1Main$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$: delayedInit(Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Syntax.MkRef: hashCode() :: 1
org.kiama.example.oneohonecompanies.Total: <init>() :: 1
org.kiama.example.til.AST.While: hashCode() :: 1
org.kiama.example.lambda2.LazySubst$$anonfun$s$1$$anonfun$apply$8: org$kiama$example$lambda2$LazySubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oneohonecompanies.SampleCompany: <init>() :: 1
org.kiama.example.oberon0.L4.source.ArrayTypeDef: <init>() :: 1
org.kiama.example.oberon0.drivers.A3$: whitespaceParser$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$28: Parser.this.~[Parser.this.~[Parser.this.Pos,List[org.kiama.example.iswim.compiler.Syntax.Binding]],org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: NoSuccess$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.IntExp: apply(v: Int) :: 1
org.kiama.example.til.AST.Program: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.secd.IntComparisonOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.obr.ObrTree.NotEqualExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3$: forVar$lzycompute() :: 1
org.kiama.example.oberon0.L3.c.CAddrExp: canEqual(x$1: Any) :: 1
org.kiama.example.til.TIL2_3Tests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A3Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$50: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter.$anonfun: apply(x$2: Any) :: 1
org.kiama.example.prolog.SyntaxAnalysis: clause$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: simpexp$lzycompute() :: 1
org.kiama.example.json.Driver: jpair$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: matchclause$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: rep1(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: forVar$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests: rep(Lscala/Function0;) :: 1
org.kiama.example.iswim.secd.SECDBase.RaiseException: <init>() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: liter$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: typedef$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.util.ParserUtilitiesTests: Tup5() :: 1
org.kiama.example.iswim.compiler.Syntax.Minus: productIterator() :: 1
org.kiama.example.oberon0.L0.Desugarer: transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) :: 1
org.kiama.example.oberon0.L0.source.DivExp: <init>() :: 1
org.kiama.example.json.Driver: jfalse$lzycompute() :: 1
org.kiama.example.til.TIL1_1$$anonfun$factor$1$$anonfun$apply$34$$anonfun$apply$35: org$kiama$example$til$TIL1_1$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.dataflow.DataflowAST.Block: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: term$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x0$12: SyntaxAnalysis.this.~[SyntaxAnalysis.this.~[org.kiama.example.obr.ObrTree.Expression,SyntaxAnalysis.this.Pos],org.kiama.example.obr.ObrTree.Expression]) :: 1
org.kiama.example.iswim.secd.RecordOps.RecordTypeValue: hashCode() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$pattern$1$$anonfun$apply$121$$anonfun$apply$122: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$conditional$2: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.util.CompilerTests.$anonfun.$anonfun: <init>() :: 1
org.kiama.example.oberon0.L3.c.CVoidType: canEqual(x$1: Any) :: 1
org.kiama.example.oberon0.L4.Parser: typedefDef() :: 1
org.kiama.example.iswim.secd.IntegerOps.Rem: productIterator() :: 1
org.kiama.example.lambda3.AST.EquivQuery: apply(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: factor$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: typedecl$lzycompute() :: 1
org.kiama.example.oberon0.L4.c.PrettyPrinter: $init$() :: 1
org.kiama.example.picojava.Main$: parser$lzycompute() :: 1
org.kiama.util.TestCompiler$$anonfun$filetests$1: org$kiama$util$TestCompiler$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1Tests: entity$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2bTests: integerType$lzycompute() :: 1
org.kiama.util.IO.FileNotFoundException: hashCode() :: 1
org.kiama.example.til.TIL2_2Main$: identifier$lzycompute() :: 1
org.kiama.example.obr.RISCTree.MulW: productIterator() :: 1
org.kiama.example.prolog.PrologTree.Atom: <init>() :: 1
org.kiama.example.oberon0.drivers.A4Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.iswim.secd.StringOps.StringValue: hashCode() :: 1
org.kiama.example.lambda2.ParLazyShareEvaluator: letDrop$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Other.$anonfun: apply(x0$2: org.kiama.example.oneohonecompanies.Company.Node) :: 1
org.kiama.example.oberon0.drivers.A2b$: value$lzycompute() :: 1
org.kiama.example.transform.Analysis.$anonfun.$anonfun: apply(x$5: org.kiama.example.transform.AST.ExpR) :: 1
org.kiama.example.lambda2.ParEagerSubstEvaluator: subsLam$lzycompute() :: 1
org.kiama.example.obr.ObrTree.IfStmt: apply(cond: org.kiama.example.obr.ObrTree.Expression,thens: List[org.kiama.example.obr.ObrTree.Statement],elses: List[org.kiama.example.obr.ObrTree.Statement]) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$typedecl$2: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.RecordOps.Fields: productIterator() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$kiama$example$iswim$compiler$Parser$_setter_$reserved_$eq(Lscala/collection/immutable/HashSet;) :: 1
org.kiama.example.lambda2.AST.Letp: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2aTests: commit(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_1Main$: if_statement$lzycompute() :: 1
org.kiama.example.til.TIL2_1Tests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.lambda2.ParEagerSubst.$anonfun.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.lambda2.ParLazySubstEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.obr.ObrTree.IntVar: productIterator() :: 1
org.kiama.example.imperative.Parser: sequence() :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$letOpn$1$$anonfun$applyOrElse$6$$anonfun$apply$4$$anonfun$applyOrElse$8: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Syntax.ExprStmt: apply(e: org.kiama.example.iswim.compiler.Syntax.Expr) :: 1
org.kiama.example.iswim.secd.IntegerOps.IntTypeValue: <init>() :: 1
org.kiama.example.oberon0.L2.source.Case: hashCode() :: 1
org.kiama.example.imperative.AST.Mul: productIterator() :: 1
org.kiama.example.oberon0.L0.c.CAndExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) :: 1
org.kiama.example.transform.AST.Var: apply(name: String) :: 1
org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual: productIterator() :: 1
org.kiama.example.lambda2.Lambda$: exp0$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: step$lzycompute() :: 1
org.kiama.example.transform.AST.BinExpR: <init>() :: 1
org.kiama.example.obr.ObrTree.LoopStmt: <init>() :: 1
org.kiama.example.iswim.compiler.Syntax.Return: productIterator() :: 1
org.kiama.example.prolog.Main: main(args: Array[String]) :: 1
org.kiama.example.oberon0.base.c.CBlock: hashCode() :: 1
org.kiama.example.obr.ObrTree.EnumVar: hashCode() :: 1
org.kiama.example.oberon0.L0.source.EqExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.drivers.A3$: numparams$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$2: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.picojava.Main$: org$kiama$example$picojava$Parser$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue: hashCode() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: tupleexpr$lzycompute() :: 1
org.kiama.attribution.Attribution.CachedDynamicAttribute.$anonfun: apply(x$3: PartialFunction[T,U]) :: 1
org.kiama.example.iswim.secd.HeapOps.Get: <init>() :: 1
org.kiama.example.lambda2.AST.Let: t() :: 1
org.kiama.attribution.AttributionBase$Attribute: andThen(Lscala/Function1;) :: 1
org.kiama.example.obr.SymbolTable.ArrayType: hashCode() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: FreshVar$lzycompute() :: 1
org.kiama.example.oberon0.L2.Lifter.$anonfun: <init>() :: 1
org.kiama.example.lambda3.LambdaTests: expectQueryPrint([T]str: String,result: String) :: 1
org.kiama.example.til.TIL2_1Tests: not(Lscala/Function0;) :: 1
org.kiama.example.picojava.AbstractSyntax.AssignStmt: apply(Variable: org.kiama.example.picojava.AbstractSyntax.Access,Value: org.kiama.example.picojava.AbstractSyntax.Exp) :: 1
org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.$anonfun.$anonfun: isDefinedAt(x1: org.kiama.example.iswim.compiler.Syntax.Binding) :: 1
org.kiama.util.ParserUtilitiesTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$afterFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.picojava.AbstractSyntax.Use: apply(Name: String) :: 1
org.kiama.example.oberon0.L0.source.SumExpression: priority() :: 1
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$10: PrettyPrinterBase.this.Doc,x$11: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.oberon0.drivers.A2bTests: info() :: 1
org.kiama.example.iswim.tests.ParserTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A3$: optelse$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase.Resume: productIterator() :: 1
org.kiama.example.picojava.AbstractSyntax.Program: productIterator() :: 1
org.kiama.example.iswim.compiler.Syntax.Assign: productIterator() :: 1
org.kiama.example.iswim.secd.SECDBase.CodeSegment.$anonfun: apply(e: org.kiama.example.iswim.secd.SECDBase.Instruction) :: 1
org.kiama.example.imperative.Parser: variable() :: 1
org.kiama.example.iswim.driver.Main$: factor$lzycompute() :: 1
org.kiama.example.til.TIL2_3Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.json.ParsingTests: jstring$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: ifStatement$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Primitives: productIterator() :: 1
org.kiama.example.imperative.AST.Add: <init>() :: 1
org.kiama.output.PrettyPrinter.$anonfun.$anonfun: apply(x$36: Boolean) :: 1
org.kiama.example.obr.ObrTree.AndExp: hashCode() :: 1
org.kiama.example.oberon0.L1.source.WhileStatement: cond() :: 1
org.kiama.example.iswim.secd.SECDBase.MalformedInstruction: hashCode() :: 1
org.kiama.example.oberon0.L2.Parser: super$keywordStrings() :: 1
org.kiama.example.oberon0.drivers.A2b$: kase$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.COrExp: canEqual(x$1: Any) :: 1
org.kiama.rewriting.NominalRewriter: org$kiama$rewriting$Rewriter$_setter_$ispropersubterm_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: whitespaceParser$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: expectResult(Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.picojava.tests.ParserTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.drivers.A2a$: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A2bTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.iswim.compiler.Syntax.LetStmt: productIterator() :: 1
org.kiama.example.oberon0.drivers.A2b$: whileStatement$lzycompute() :: 1
org.kiama.example.oberon0.L0.c.CLtExp: priority() :: 1
org.kiama.example.oberon0.drivers.A4Tests: procedureDeclaration$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: fail(Ljava/lang/String;) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: whitespaceParser$lzycompute() :: 1
org.kiama.example.picojava.tests.ParserTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.L2.Desugarer.$anonfun: apply(x0$1: org.kiama.example.oberon0.L2.source.Case) :: 1
org.kiama.example.lambda2.Par: lookupb(x: String,ds: List[org.kiama.example.lambda2.AST.Bind]) :: 1
org.kiama.util.ParserUtilitiesTests$$anonfun$7: org$kiama$util$ParserUtilitiesTests$$anonfun$$$outer() :: 1
org.kiama.example.json.JSONTree.JNull: productIterator() :: 1
org.kiama.example.oberon0.base.source.SourceASTNode: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.prolog.SemanticAnalysis: check(n: org.kiama.example.prolog.PrologTree.SourceNode) :: 1
org.kiama.example.dataflow.Parser: stm() :: 1
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.lambda2.LambdaTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_3Tests: declaration$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: elsif$lzycompute() :: 1
org.kiama.output.Prefix: productIterator() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$scalatest$Suite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_2Tests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda2.LazySubstEvaluator: s$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: condition$lzycompute() :: 1
org.kiama.example.dataflow.Driver: whiteSpace() :: 1
org.kiama.example.iswim.secd.SECDBase.FunctionSpec: toDoc() :: 1
org.kiama.example.picojava.benchmark.PicoJavaBenchmark$: scala$App$$initCode() :: 1
org.kiama.example.picojava.TypeAnalysis.$anonfun: apply(x0$2: org.kiama.example.picojava.AbstractSyntax.ASTNode) :: 1
org.kiama.example.til.TIL2_3Tests: skipWhitespace() :: 1
org.kiama.output.PrettyPrinterBase: ssep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.oberon0.L3.SymbolTable.Procedure: hashCode() :: 1
org.kiama.example.picojava.AbstractSyntax.Block: <init>() :: 1
org.kiama.rewriting.NominalRewriter: HasVar$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Let: productIterator() :: 1
org.kiama.example.til.TIL1_1Main$: expression$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: org$kiama$example$til$TIL2_1$_setter_$declareforvars_$eq(Lorg/kiama/rewriting/Rewriter$Strategy;) :: 1
org.kiama.example.json.PrettyPrinting: pretty(t: org.kiama.example.json.JSONTree.JValue) :: 1
org.kiama.example.oberon0.drivers.A2b$: expconst$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$lvalue$1$$anonfun$apply$120: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: letexpr$lzycompute() :: 1
org.kiama.example.oneohonecompanies.Cut.$anonfun: apply() :: 1
org.kiama.example.lambda3.Lambda$: start() :: 1
org.kiama.attribution.Attribution$CachedParamAttribute: andThen(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L4.c.CFieldExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2aTests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.dataflow.Driver: exp$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A4Tests: assignment$lzycompute() :: 1
org.kiama.example.transform.AST.Factor: apply(exp: org.kiama.example.transform.AST.PrimExp) :: 1
org.kiama.example.lambda2.Lambda$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.example.lambda.Generator: arbExp() :: 1
org.kiama.example.oberon0.L4.source.FieldList: productIterator() :: 1
org.kiama.example.oberon0.L0.source.Assignment: <init>() :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(x0$2: org.kiama.example.transform.AST.ExpR) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$54: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$program$4: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L2.source.CaseStatement: apply(exp: org.kiama.example.oberon0.L0.source.Expression,cases: List[org.kiama.example.oberon0.L2.source.Case],optelse: Option[org.kiama.example.oberon0.base.source.Block]) :: 1
org.kiama.example.iswim.secd.IntegerOps: evalInst() :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$TranslatingDriver$_setter_$pprintcastFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$constdecl$2: org$kiama$example$oberon0$L0$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.ConstDecl: productIterator() :: 1
org.kiama.example.obr.ObrTree.LessExp: productIterator() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term1$1$$anonfun$apply$58: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL1_1Tests: expression$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: org$scalatest$FunSuite$$engine() :: 1
org.kiama.example.transform.Parser$$anonfun$exp$1: org$kiama$example$transform$Parser$$anonfun$$$outer() :: 1
org.kiama.example.lambda3.Lambda$: rep(Lscala/Function0;) :: 1
org.kiama.example.json.Driver: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.iswim.compiler.SemanticAnalysis.$anonfun.$anonfun: apply(n: org.kiama.attribution.Attributable) :: 1
org.kiama.example.oberon0.drivers.A1Tests: conditions$lzycompute() :: 1
org.kiama.example.prolog.SyntaxAnalysis: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(x0$1: TypeAnalyser.this.Type) :: 1
org.kiama.example.iswim.secd.RecordOps.Fields: <init>() :: 1
org.kiama.example.prolog.SyntaxAnalysis: rep(Lscala/Function0;) :: 1
org.kiama.example.json.SyntaxAnalysis$$anonfun$jpair$1: org$kiama$example$json$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.rewriting.Rewriter: one(s: ) :: 1
org.kiama.rewriting.Rewriter$Strategy: andThen(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2aTests: namedtypedef$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: whileStatement$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: variable$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Assign: hashCode() :: 1
org.kiama.example.obr.ObrTree.EnumConst: productIterator() :: 1
org.kiama.example.til.TIL1_1Tests: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda2.LambdaTests$$anonfun$org$kiama$example$lambda2$LambdaTests$$canons$1$2: org$kiama$example$lambda2$LambdaTests$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.SECDBase: stack$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1Tests: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.L3.source.ProcDecl: hashCode() :: 1
org.kiama.rewriting.Rewriter: build(t: ) :: 1
org.kiama.rewriting.Rewriter$$anonfun$repeat$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 1
org.kiama.example.imperative.Parser: keyword() :: 1
org.kiama.example.oberon0.drivers.A2a$: vardecl$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: identRegex$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: rep(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.SymbolTable$IntegerValue: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A2a$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/io/Reader;) :: 1
org.kiama.machine.Machine.ParamState: isUndefined(t: T) :: 1
org.kiama.example.oberon0.drivers.A2b$: vardeclsection$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: term$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: whileexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: entity$lzycompute() :: 1
org.kiama.example.til.TIL2_2Tests$$anonfun$1: org$kiama$example$til$TIL2_2Tests$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L0.source.NamedType: hashCode() :: 1
org.kiama.example.lambda3.LambdaTests: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.picojava.tests.ParserTests: while_stmt$lzycompute() :: 1
org.kiama.util.TestCompiler.$anonfun: apply(r: String) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: intRegex$lzycompute() :: 1
org.kiama.attribution.AttributionBase.Attribute.$anonfun: apply() :: 1
org.kiama.example.oberon0.L0.source.NeExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: desugarCase$lzycompute() :: 1
org.kiama.util.ParserUtilitiesTests.Tup4: canEqual(x$1: Any) :: 1
org.kiama.example.json.PrettyPrinting: show(t: org.kiama.example.json.JSONTree.JValue) :: 1
org.kiama.example.til.TIL2_2Tests: identifier$lzycompute() :: 1
org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(out: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field) :: 1
org.kiama.example.obr.RISCTree.StW: hashCode() :: 1
org.kiama.example.til.TIL2_1Main$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.picojava.tests.ParserTests.$anonfun: <init>() :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun.$anonfun: apply(x$3: String) :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$trycatch$2: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$$outer() :: 1
org.kiama.example.obr.RISCTree.CmpgtW: productIterator() :: 1
org.kiama.example.oberon0.L2.source.MinMaxCond: apply(minvalue: org.kiama.example.oberon0.L0.source.Expression,maxvalue: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun.$anonfun: apply(x0$5: Parser.this.~[Parser.this.Pos,org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.RISC.RISCISA.MODI: hashCode() :: 1
org.kiama.example.oneohonecompanies.Company.PU: productIterator() :: 1
org.kiama.example.oberon0.L0.Parser: statementDef() :: 1
org.kiama.example.lambda2.AST.Bind: hashCode() :: 1
org.kiama.util.CompilerTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.lambda2.EagerSubst$$anonfun$s$1$$anonfun$apply$3: org$kiama$example$lambda2$EagerSubst$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.base.source.ModuleDecl: <init>() :: 1
org.kiama.attribution.Attributable.$anonfun: apply(c: Any) :: 1
org.kiama.example.oberon0.drivers.A1Tests: info() :: 1
org.kiama.util.IO: filereader(name: String,encoding: String) :: 1
org.kiama.example.oberon0.drivers.A1Tests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.transform.Driver: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.secd.SECDBase.PushType: <init>(ty: org.kiama.example.iswim.secd.SECDBase.TypeValue) :: 1
org.kiama.example.iswim.secd.IntegerOps.Div: hashCode() :: 1
org.kiama.rewriting.Rewriter: collectl([T]f: PartialFunction[Any,T]) :: 1
org.kiama.example.iswim.secd.ConversionOps: super$evalInst() :: 1
org.kiama.example.lambda.Lambda$: whiteSpace() :: 1
org.kiama.example.til.TIL1_1Tests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(kase: org.kiama.example.oberon0.L2.source.Case) :: 1
org.kiama.attribution.Attribution.MemoState: <init>() :: 1
org.kiama.example.oberon0.L0.source.GtExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.compiler.Syntax.ThrowTo: productIterator() :: 1
org.kiama.example.oberon0.L0.NameAnalyser: isRvalue(r: org.kiama.example.oberon0.L0.source.IdnExp) :: 1
org.kiama.example.picojava.tests.ErrorTests: org$scalatest$BeforeAndAfter$$runHasBeenInvoked_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A3$: org$kiama$example$oberon0$base$Driver$_setter_$pprintastFlagDefault_$eq(Z) :: 1
org.kiama.example.til.AST.Var: <init>() :: 1
org.kiama.example.oberon0.L3.source.Call: productIterator() :: 1
org.kiama.example.til.TIL2_1Main$: org$kiama$example$til$TIL1_1$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: expconst$lzycompute() :: 1
org.kiama.example.oberon0.L3.c.CStrExp: hashCode() :: 1
org.kiama.example.imperative.Parser: stmt() :: 1
org.kiama.util.Environments: leave(env: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,Environments.this.Entity]]) :: 1
org.kiama.example.iswim.compiler.Syntax.Negate: productIterator() :: 1
org.kiama.example.lambda3.AST: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$94: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Syntax.MkRef: productIterator() :: 1
org.kiama.example.obr.ObrTree.RecordVar: <init>() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: term1$lzycompute() :: 1
org.kiama.example.json.ParsingTests: opt(Lscala/Function0;) :: 1
org.kiama.example.iswim.compiler.Parser$Pos: org$kiama$example$iswim$compiler$Parser$Pos$$$outer() :: 1
org.kiama.example.oberon0.drivers.A2aTests: procedureCall$lzycompute() :: 1
org.kiama.example.transform.Analysis$: lookup$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: isconst$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.lambda.AST: <init>() :: 1
org.kiama.example.obr.ObrTree.RecordVar: hashCode() :: 1
org.kiama.example.obr.ObrTree.EnumVar: productIterator() :: 1
org.kiama.example.iswim.tests.ParserTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.json.ParsingTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A3$: ifStatement$lzycompute() :: 1
org.kiama.example.iswim.secd.SECDBase$ByteCode: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.L3.Parser$$anonfun$fpsection$1: org$kiama$example$oberon0$L3$Parser$$anonfun$$$outer() :: 1
org.kiama.example.dataflow.Driver: rep(Lscala/Function0;) :: 1
org.kiama.example.til.ParsingMain: process(reader: java.io.Reader) :: 1
org.kiama.example.picojava.tests.ParserTests: skipWhitespace() :: 1
org.kiama.example.oberon0.drivers.A2a$: cases$lzycompute() :: 1
org.kiama.example.iswim.driver.Main$: term3$lzycompute() :: 1
org.kiama.example.oberon0.base.c.CIntType: hashCode() :: 1
org.kiama.example.picojava.tests.ErrorTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.json.JSONTree.JName: hashCode() :: 1
org.kiama.example.iswim.driver.Main$: ifelseexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: vardeclsection$lzycompute() :: 1
org.kiama.example.oberon0.L0.SymbolTable$UserType: org$kiama$util$Environments$Named$_setter_$org$kiama$util$Environments$Named$$num_$eq(I) :: 1
org.kiama.example.lambda2.LambdaTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.til.TIL1_1Main$: read_statement$lzycompute() :: 1
org.kiama.example.iswim.secd.ConversionOps$$anonfun$evalInst$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) :: 1
org.kiama.example.til.TIL1_1Tests: primary$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$whitespaceParser$1$$anonfun$apply$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: arithop$lzycompute() :: 1
org.kiama.example.transform.Driver: rep1(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.IntConst: hashCode() :: 1
org.kiama.example.til.AST.Assign: apply(i: org.kiama.example.til.AST.Id,e: org.kiama.example.til.AST.Exp) :: 1
org.kiama.example.picojava.Main$: skipWhitespace() :: 1
org.kiama.example.oberon0.drivers.A4Tests: ifStatement$lzycompute() :: 1
org.kiama.example.iswim.secd.StackOps.Swap: hashCode() :: 1
org.kiama.example.obr.RISCTree.StW: productIterator() :: 1
org.kiama.example.lambda.Lambda$: integer$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: assert(Lscala/Option;Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: deftype$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.NeExp: <init>() :: 1
org.kiama.rewriting.Rewriter$$anonfun$collect$1: org$kiama$rewriting$Rewriter$$anonfun$$$outer() :: 1
org.kiama.example.iswim.compiler.Syntax.ExprStmt: productIterator() :: 1
org.kiama.example.dataflow.Driver: returnStm$lzycompute() :: 1
org.kiama.example.til.TIL2_2Main$: skipWhitespace() :: 1
org.kiama.example.oberon0.drivers.A4Tests: assert(Lscala/Option;Ljava/lang/Object;) :: 1
org.kiama.output.PrettyPrinter$Doc: andThen(Lscala/Function1;) :: 1
org.kiama.example.picojava.Main$: commit(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_2Main$: for_statement$lzycompute() :: 1
org.kiama.example.oberon0.base.c.PrettyPrinter: $init$() :: 1
org.kiama.example.dataflow.Optimise$: rules$lzycompute() :: 1
org.kiama.example.lambda2.Lambda$: success(Ljava/lang/Object;) :: 1
org.kiama.example.lambda2.LambdaTests: exp1$lzycompute() :: 1
org.kiama.example.oberon0.L3.NameAnalyser: envinl(in: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.example.oberon0.drivers.A2aTests: vardecl$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: factor$lzycompute() :: 1
org.kiama.example.til.TIL2_1Main$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.json.ParsingTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.oberon0.drivers.A2aTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.c.CAssignment: hashCode() :: 1
org.kiama.example.til.TIL2_3Tests: not(Lscala/Function0;) :: 1
org.kiama.example.obr.SyntaxAnalysis: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L1.source.IfStatement: <init>(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block,elsifs: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) :: 1
org.kiama.example.oberon0.drivers.A2aTests: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.til.TIL1_1Main$: elem(Ljava/lang/String;Lscala/Function1;) :: 1
org.kiama.example.iswim.driver.Main$: throwtoexpr$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: commit(Lscala/Function0;) :: 1
org.kiama.example.picojava.Parser.$anonfun.$anonfun.$anonfun: apply() :: 1
org.kiama.example.iswim.driver.PrettyPrinter$: org$kiama$output$PrettyPrinterBase$_setter_$defaultWidth_$eq(I) :: 1
org.kiama.example.til.TIL2_1Main$: keyword$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2aTests: booleanType$lzycompute() :: 1
org.kiama.example.lambda2.InnermostSubstEvaluator: subsVar$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.IswimProg: hashCode() :: 1
org.kiama.example.til.TIL2_3Tests: rep1sep(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.json.Driver: jarray$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: success(Ljava/lang/Object;) :: 1
org.kiama.example.oberon0.L0.source.LeExp: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: keyword$lzycompute() :: 1
org.kiama.example.transform.AST.Factor: productIterator() :: 1
org.kiama.example.imperative.Generator: genStmt(sz: Int) :: 1
org.kiama.example.dataflow.Driver: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$30: Parser.this.~[Parser.this.Pos,List[org.kiama.example.iswim.compiler.Syntax.Binding]]) :: 1
org.kiama.example.iswim.compiler.Syntax.Variable: hashCode() :: 1
org.kiama.example.iswim.compiler.Syntax.And: hashCode() :: 1
org.kiama.example.imperative.Parser$$anonfun$factor$1$$anonfun$apply$20: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.AST.Var: i() :: 1
org.kiama.example.oberon0.drivers.A2b$: forVar$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3$: rep1(Lscala/Function0;) :: 1
org.kiama.example.lambda.Generator.$anonfun: <init>() :: 1
org.kiama.example.til.TIL2_3Tests: factor$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2a$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.prolog.SyntaxAnalysis: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;) :: 1
org.kiama.util.ParserUtilitiesTests.Tup5: canEqual(x$1: Any) :: 1
org.kiama.example.til.AST.Decl: <init>() :: 1
org.kiama.example.dataflow.Parser$$anonfun$stm$1: org$kiama$example$dataflow$Parser$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.Parser: super$lhsDef() :: 1
org.kiama.example.lambda2.Reduce$$anonfun$s$1: org$kiama$example$lambda2$Reduce$$anonfun$$$outer() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: expr$lzycompute() :: 1
org.kiama.example.iswim.secd.RecordOps.RecordTypeValue: <init>() :: 1
org.kiama.example.lambda2.ParLazyUpdate$$anonfun$e$lzycompute$1$2$$anonfun$apply$5$$anonfun$apply$7$$anonfun$apply$9: org$kiama$example$lambda2$ParLazyUpdate$$anonfun$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: <init>() :: 1
org.kiama.example.til.TIL2_3Main$: statement$lzycompute() :: 1
org.kiama.example.imperative.Imperative$: whiteSpace() :: 1
org.kiama.example.til.TIL2_1Main$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.oberon0.L0.source.NeExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.oberon0.L0.SymbolTable.Module: hashCode() :: 1
org.kiama.example.iswim.secd.StringOps.PushString: productIterator() :: 1
org.kiama.example.obr.ObrTree.LoopStmt: productIterator() :: 1
org.kiama.example.transform.Driver: opt(Lscala/Function0;) :: 1
org.kiama.machine.Machine.State: <init>(sname: String) :: 1
org.kiama.example.transform.AST.Var: hashCode() :: 1
org.kiama.rewriting.Rewriter: strategy(f: PartialFunction[Any,Option[Any]]) :: 1
org.kiama.example.iswim.tests.ParserTests: returnexpr$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: desugarFor$lzycompute() :: 1
org.kiama.example.imperative.ImperativeGen$: org$kiama$util$StdoutEmitter$_setter_$emitter_$eq(Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.lambda2.LazySubstEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$scalatest$BeforeAndAfter$_setter_$org$scalatest$BeforeAndAfter$$beforeFunctionAtomic_$eq(Ljava/util/concurrent/atomic/AtomicReference;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.oberon0.drivers.A3Tests: org$kiama$example$oberon0$base$Driver$_setter_$helpFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: fail(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_1Main$: program$lzycompute() :: 1
org.kiama.example.lambda.Lambda$: start() :: 1
org.kiama.example.imperative.AST.While: productIterator() :: 1
org.kiama.example.oberon0.base.TransformingDriver: processast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.example.lambda.LambdaTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.attribution.AttributionBase: constant([T <: Object, U]u: ) :: 1
org.kiama.example.lambda3.LambdaTests: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.drivers.A3Tests: cases$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.lambda2.EagerSubstEvaluator: subsApp$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.ModExp: <init>() :: 1
org.kiama.example.prolog.Interpreter.$anonfun: apply(x$2: String, org.kiama.example.prolog.PrologTree.Term) :: 1
org.kiama.util.FileConsole: <init>(filename: String) :: 1
org.kiama.example.json.ParsingTests: jarray$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: process(Ljava/lang/Object;Lorg/kiama/util/Console;Lorg/kiama/util/Emitter;) :: 1
org.kiama.example.obr.SyntaxAnalysis: iteration$lzycompute() :: 1
org.kiama.example.obr.ObrTree.IntParam: productIterator() :: 1
org.kiama.example.picojava.tests.ParserTests: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.json.JSONTree.JTrue: hashCode() :: 1
org.kiama.example.oberon0.drivers.A4Tests: elsifs$lzycompute() :: 1
org.kiama.example.oberon0.L0.Parser$$anonfun$term$1$$anonfun$apply$38$$anonfun$apply$39: org$kiama$example$oberon0$L0$Parser$$anonfun$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.RecordOps.MkRecord: <init>(n: Int) :: 1
org.kiama.output.LeftAssoc: productIterator() :: 1
org.kiama.example.iswim.compiler.Syntax.Variable: <init>() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term4$1: org$kiama$example$iswim$compiler$Parser$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.NotExp: <init>() :: 1
org.kiama.example.transform.Driver: skipWhitespace() :: 1
org.kiama.example.picojava.tests.ParserTests: name$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Greater: productIterator() :: 1
org.kiama.example.RISC.RISCISA.CMPI: hashCode() :: 1
org.kiama.example.obr.ObrTree$ForStmt$: apply(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;) :: 1
org.kiama.example.dataflow.Parser: idn() :: 1
org.kiama.example.oberon0.drivers.A3Tests: trueConstant$lzycompute() :: 1
org.kiama.example.oberon0.L0.source.NegExp: apply(exp: org.kiama.example.oberon0.L0.source.Expression) :: 1
org.kiama.example.til.Main: main(args: Array[String]) :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: tupleexpr$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: skipWhitespace() :: 1
org.kiama.example.picojava.Parser$$anonfun$block$1: org$kiama$example$picojava$Parser$$anonfun$$$outer() :: 1
org.kiama.example.til.TIL2_2Main$: rep1(Lscala/Function0;) :: 1
org.kiama.util.WhitespaceParser: positioned([T <: scala.util.parsing.input.Positional]p: ) :: 1
org.kiama.example.oberon0.drivers.A4Tests: procedureCall$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: opt(Lscala/Function0;) :: 1
org.kiama.example.obr.ObrTree.ObrInt: hashCode() :: 1
org.kiama.example.iswim.secd.SECDBase.ContValue: hashCode() :: 1
org.kiama.example.iswim.secd.StringOps: evalInst() :: 1
org.kiama.example.json.JSONTree$JValue: org$kiama$attribution$Attributable$_setter_$org$kiama$attribution$Attributable$$_children_$eq(Lscala/collection/mutable/ListBuffer;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: falseConstant$lzycompute() :: 1
org.kiama.example.imperative.Parser: term() :: 1
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: <init>() :: 1
org.kiama.example.oberon0.drivers.A3Tests: NoSuccess$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: newAssertionFailedException(Lscala/Option;Lscala/Option;I) :: 1
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun.$anonfun: apply(nm: String) :: 1
org.kiama.example.oberon0.L3.c.PrettyPrinter: super$toParenDoc(e: org.kiama.output.PrettyExpression) :: 1
org.kiama.example.oberon0.drivers.A3Tests: parser() :: 1
org.kiama.example.oberon0.L1.Parser: keywordStrings() :: 1
org.kiama.example.picojava.AbstractSyntax.ClassDecl: apply(Name: String,Superclass: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse],Body: org.kiama.example.picojava.AbstractSyntax.Block) :: 1
org.kiama.example.oberon0.drivers.A3$: optActualParameters$lzycompute() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.picojava.tests.ErrorTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.source.IdnExp: hashCode() :: 1
org.kiama.example.lambda2.ParLazy$$anonfun$r$lzycompute$1$1$$anonfun$apply$10: org$kiama$example$lambda2$ParLazy$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.AST.App: productIterator() :: 1
org.kiama.util.GeneratingREPLBase: setup(args: Array[String]) :: 1
org.kiama.example.oberon0.drivers.A1Tests: optelse$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A1$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.oberon0.drivers.A2b$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() :: 1
org.kiama.example.oberon0.L0.source.VarDecl: hashCode() :: 1
org.kiama.example.oberon0.drivers.A1$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.obr.SyntaxAnalysis.$anonfun.$anonfun: apply(x0$5: SyntaxAnalysis.this.~[String,List[SyntaxAnalysis.this.Pos]]) :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun.$anonfun: apply(x0$3: Parser.this.~[org.kiama.example.iswim.compiler.Syntax.Expr,org.kiama.example.iswim.compiler.Syntax.Expr]) :: 1
org.kiama.example.lambda2.Lambda$: acceptIf(Lscala/Function1;Lscala/Function1;) :: 1
org.kiama.example.til.TIL2_2Tests: rep1(Lscala/Function0;) :: 1
org.kiama.example.picojava.AbstractSyntax.ClassDecl: <init>() :: 1
org.kiama.example.RISC.RISCISA.STW: hashCode() :: 1
org.kiama.output.PrettyPrinterBase: list([T]l: List[T],prefix: String,elemToDoc: T => PrettyPrinterBase.this.Doc,sep: PrettyPrinterBase.this.Doc,sepfn: Seq[PrettyPrinterBase.this.Doc], PrettyPrinterBase.this.Doc) :: 1
org.kiama.example.oberon0.drivers.A2bTests: forVar$lzycompute() :: 1
org.kiama.example.oberon0.L3.SymbolTable$Parameter: org$kiama$util$Environments$Named$$$outer() :: 1
org.kiama.example.oberon0.L0.source.OrExp: <init>() :: 1
org.kiama.example.iswim.tests.CodeGeneratorTests: org$kiama$example$iswim$compiler$SemanticAnalysis$_setter_$envirOut_$eq(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2b$: nest(Lorg/kiama/output/PrettyPrinterBase$DocOps;I) :: 1
org.kiama.example.til.TIL1_1Tests.$anonfun: <init>() :: 1
org.kiama.example.oberon0.base.source.EmptyStmt: hashCode() :: 1
org.kiama.example.json.ParsingTests: org$scalatest$FunSuite$_setter_$styleName_$eq(Ljava/lang/String;) :: 1
org.kiama.example.til.TIL2_3Tests$$anonfun$1: org$kiama$example$til$TIL2_3Tests$$anonfun$$$outer() :: 1
org.kiama.example.obr.ObrTree.ExnConst: apply(idn: String) :: 1
org.kiama.example.til.TIL2_1Tests: write_statement$lzycompute() :: 1
org.kiama.machine.Machine.ParamUpdate: key() :: 1
org.kiama.example.oberon0.drivers.A2bTests: org$kiama$example$oberon0$base$Driver$_setter_$printastFlagDefault_$eq(Z) :: 1
org.kiama.example.iswim.tests.ParserTests: opt(Lscala/Function0;) :: 1
org.kiama.example.lambda.LambdaTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2a$: env$lzycompute() :: 1
org.kiama.example.iswim.secd.HeapOps.RefValue: <init>() :: 1
org.kiama.example.iswim.secd.BooleanOps.Test: toDoc() :: 1
org.kiama.example.oberon0.drivers.A1$: org$kiama$output$PrettyPrinterBase$_setter_$defaultIndent_$eq(I) :: 1
org.kiama.example.oberon0.drivers.A2bTests: convertToEqualizer(Ljava/lang/Object;) :: 1
org.kiama.example.imperative.Imperative$: whileStmt$lzycompute() :: 1
org.kiama.example.til.TIL2_3Main$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.drivers.A1Tests: statementSequence$lzycompute() :: 1
org.kiama.example.lambda3.LambdaTests: variable$lzycompute() :: 1
org.kiama.example.picojava.tests.ErrorTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.transform.AST.Program: hashCode() :: 1
org.kiama.example.oberon0.L3.NameAnalyser: super$envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]) :: 1
org.kiama.rewriting.NominalRewriter.$anonfun: apply(x0$1: Any, Any) :: 1
org.kiama.example.oberon0.drivers.A2a$: forVar$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.lambda2.LazySubstEvaluator: arithop$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$tupleexpr$1$$anonfun$apply$106: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.L4.NameAnalyser: super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode) :: 1
org.kiama.example.lambda2.Lambda$: commit(Lscala/Function0;) :: 1
org.kiama.example.til.TIL2_3Main$: factor$lzycompute() :: 1
org.kiama.example.dataflow.DataflowAST.Block: apply(stms: List[org.kiama.example.dataflow.DataflowAST.Stm]) :: 1
org.kiama.example.oberon0.drivers.A3$: rep1(Lscala/Function0;Lscala/Function0;) :: 1
org.kiama.rewriting.NominalAST.Name: hashCode() :: 1
org.kiama.example.oberon0.drivers.A3Tests: term$lzycompute() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: matchclause$lzycompute() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$53: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.lambda2.ReduceEvaluator: beta$lzycompute() :: 1
org.kiama.example.iswim.secd.StackOps: evalInst() :: 1
org.kiama.example.lambda.Generator: genAppExp(sz: Int) :: 1
org.kiama.example.oberon0.drivers.A4Tests: value$lzycompute() :: 1
org.kiama.example.obr.ObrTree.ExnConst: productIterator() :: 1
org.kiama.example.picojava.AbstractSyntax.WhileStmt: <init>(Condition: org.kiama.example.picojava.AbstractSyntax.Exp,Body: org.kiama.example.picojava.AbstractSyntax.Stmt) :: 1
org.kiama.attribution.Attributable: setConnections(c: org.kiama.attribution.Attributable) :: 1
org.kiama.rewriting.NominalRewriter.$anonfun.$anonfun.$anonfun: apply(x0$2: Any) :: 1
org.kiama.example.til.TIL2_3Main$: write_statement$lzycompute() :: 1
org.kiama.example.oberon0.L3.SymbolTable.Parameter: hashCode() :: 1
org.kiama.example.prolog.PrologTree.Cut: hashCode() :: 1
org.kiama.example.oberon0.base.c.CArrayType: size() :: 1
org.kiama.example.picojava.Main$: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.transform.Driver: commit(Lscala/Function0;) :: 1
org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun: apply(xo: Option[List[org.kiama.example.oberon0.base.source.Declaration with Serializable]]) :: 1
org.kiama.example.iswim.compiler.Syntax.Return: hashCode() :: 1
org.kiama.example.transform.Analysis.$anonfun: apply(p: org.kiama.example.transform.AST.Program) :: 1
org.kiama.example.obr.ObrTree.BoolVar: apply(idn: String) :: 1
org.kiama.example.picojava.tests.ParserTests: scala$util$parsing$combinator$RegexParsers$$super$positioned(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A4Tests: elsif$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A4Tests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.prolog.PrologTree.Cut: productIterator() :: 1
org.kiama.example.obr.ObrTree.IdnExp: productIterator() :: 1
org.kiama.example.lambda3.AST.EquivQuery: hashCode() :: 1
org.kiama.example.iswim.tests.ParserTests: liter$lzycompute() :: 1
org.kiama.example.oberon0.L4.c.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.c.CASTNode) :: 1
org.kiama.example.iswim.compiler.Syntax.While: hashCode() :: 1
org.kiama.example.oberon0.drivers.A2a$: falseConstant$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser$$anonfun$term3$1$$anonfun$apply$90: org$kiama$example$iswim$compiler$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.iswim.secd.SECDBase.PrimValue: <init>(bdy: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) :: 1
org.kiama.example.oberon0.drivers.A4Tests: exptype$lzycompute() :: 1
org.kiama.example.iswim.compiler.Parser.$anonfun: apply(p: Parser.this.Pos) :: 1
org.kiama.example.iswim.secd.SECDBase.CodeTree.$anonfun: apply(b: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase) :: 1
org.kiama.example.oberon0.L3.c.CCall: hashCode() :: 1
org.kiama.example.obr.SyntaxAnalysis$$anonfun$iteration$4$$anonfun$apply$57: org$kiama$example$obr$SyntaxAnalysis$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A4Tests: typedecl$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A3Tests: lhs$lzycompute() :: 1
org.kiama.example.iswim.compiler.Syntax.Let: hashCode() :: 1
org.kiama.example.json.Driver: opt(Lscala/Function0;) :: 1
org.kiama.example.oberon0.drivers.A3Tests: test(Ljava/lang/String;Lscala/collection/Seq;Lscala/Function0;) :: 1
org.kiama.example.til.TIL1_1Tests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.oberon0.L0.SymbolTable: isConstant(e: SymbolTable.this.Entity) :: 1
org.kiama.example.oberon0.drivers.A4Tests: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) :: 1
org.kiama.example.dataflow.Dataflow$: org$kiama$example$dataflow$LivenessImpl$_setter_$out_$eq(Lscala/Function1;) :: 1
org.kiama.util.ParserUtilitiesTests.Tup3: <init>() :: 1
org.kiama.example.obr.ObrTree.PlusExp: hashCode() :: 1
org.kiama.example.lambda2.LambdaTests: whiteSpace() :: 1
org.kiama.example.oberon0.drivers.A2aTests: conditions$lzycompute() :: 1
org.kiama.example.oberon0.L4.source.FieldIdn: hashCode() :: 1
org.kiama.example.dataflow.Main: <init>() :: 1
org.kiama.example.imperative.Parser$$anonfun$exp$1$$anonfun$apply$6: org$kiama$example$imperative$Parser$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.til.AST.Str: <init>() :: 1
org.kiama.util.Patterns.HasParent: <init>() :: 1
org.kiama.example.iswim.secd.IOOps.Write: <init>() :: 1
org.kiama.example.iswim.tests.SemanticAnalysisTests: org$kiama$example$iswim$compiler$Parser$_setter_$reserved_$eq(Lscala/collection/immutable/HashSet;) :: 1
org.kiama.output.PrettyPrinter$$anonfun$group$1$$anonfun$apply$9: org$kiama$output$PrettyPrinter$$anonfun$$anonfun$$$outer() :: 1
org.kiama.example.oberon0.drivers.A1$: statement$lzycompute() :: 1
org.kiama.example.oberon0.drivers.A2b$: memo(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1
org.kiama.example.picojava.tests.ParserTests: scala$util$parsing$combinator$PackratParsers$$super$Parser(Lscala/Function1;) :: 1
org.kiama.example.oberon0.drivers.A2a$: whileStatement$lzycompute() :: 1
org.kiama.example.lambda2.LambdaTests: scala$util$parsing$combinator$PackratParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) :: 1