Blank$: <clinit>() ===> Blank: <init>()
Blank: canEqual(x$1: Any) ===> Blank: canEqual(x$1: Any)
Blank: hashCode() ===> Blank: hashCode()
Blank: productArity() ===> Blank: productArity()
Blank: productElement(x$1: Int) ===> Blank: productElement(x$1: Int)
Blank: productElement(x$1: Int) ===> Blank: toString()
Blank: productElement(x$1: Int) ===> O: toString()
Blank: productElement(x$1: Int) ===> TicTacToeBoard: toString()
Blank: productElement(x$1: Int) ===> X: toString()
Blank: productIterator() ===> Blank: productIterator()
Blank: productPrefix() ===> Blank: productPrefix()
Blank: toString() ===> Blank: toString()
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$$init$$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$$init$$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$columns$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$columns$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$determineWinner$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$diagonalsLTR$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$diagonalsRTL$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$getPlayersFromString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply$mcVI$sp(I)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$nInARow$1: apply$mcVI$sp(I)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$nInARow$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$rows$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$TicTacToeBoard$$p$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply$mcVI$sp(I)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$toString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> TicTacToeBoard$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
GameResult$: <clinit>() ===> GameResult: <init>()
O$: <clinit>() ===> O: <init>()
O: canEqual(x$1: Any) ===> O: canEqual(x$1: Any)
O: hashCode() ===> O: hashCode()
O: productArity() ===> O: productArity()
O: productElement(x$1: Int) ===> Blank: toString()
O: productElement(x$1: Int) ===> O: productElement(x$1: Int)
O: productElement(x$1: Int) ===> O: toString()
O: productElement(x$1: Int) ===> TicTacToeBoard: toString()
O: productElement(x$1: Int) ===> X: toString()
O: productIterator() ===> O: productIterator()
O: productPrefix() ===> O: productPrefix()
O: toString() ===> O: toString()
TicTacToe$: <clinit>() ===> TicTacToe: <init>()
TicTacToe: main(args: Array[String]) ===> TicTacToe: main(args: Array[String])
TicTacToeBoard$$anonfun$$init$$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(row: String)
TicTacToeBoard$$anonfun$$init$$2: apply() ===> TicTacToeBoard.$anonfun: apply()
TicTacToeBoard$$anonfun$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(n: Int)
TicTacToeBoard$$anonfun$2: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(array: Array[Player])
TicTacToeBoard$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(acc: String,c: Int)
TicTacToeBoard$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(acc: String,c: Int)
TicTacToeBoard$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(acc: String,c: Int)
TicTacToeBoard$$anonfun$columns$1$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$columns$1$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun.$anonfun: apply(r: Int)
TicTacToeBoard$$anonfun$columns$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$columns$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(c: Int)
TicTacToeBoard$$anonfun$determineWinner$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$determineWinner$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(row: Array[Player])
TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply$mcZI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsLTR$1: TicTacToeBoard$$anonfun$$$outer()
TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply$mcZI$sp(I) ===> TicTacToeBoard: columnCount()
TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun.$anonfun: apply(row: Int)
TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun.$anonfun: apply(row: Int)
TicTacToeBoard$$anonfun$diagonalsLTR$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$diagonalsLTR$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(offset: Int)
TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply$mcZI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsRTL$1: TicTacToeBoard$$anonfun$$$outer()
TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply$mcZI$sp(I) ===> TicTacToeBoard: rowCount()
TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun.$anonfun: apply(col: Int)
TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$5: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$5: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun.$anonfun: apply(col: Int)
TicTacToeBoard$$anonfun$diagonalsRTL$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$diagonalsRTL$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(offset: Int)
TicTacToeBoard$$anonfun$getPlayersFromString$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$getPlayersFromString$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(char: Char)
TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply$mcVI$sp(I) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun.$anonfun: apply(j: Int)
TicTacToeBoard$$anonfun$nInARow$1: apply$mcVI$sp(I) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$nInARow$1: apply$mcVI$sp(I) ===> TicTacToeBoard.$anonfun.$anonfun: <init>()
TicTacToeBoard$$anonfun$nInARow$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$nInARow$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(i: Int)
TicTacToeBoard$$anonfun$rows$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$rows$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(r: Int)
TicTacToeBoard$$anonfun$TicTacToeBoard$$p$1$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(str: String)
TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply$mcVI$sp(I) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$toString$1: TicTacToeBoard$$anonfun$$$outer()
TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun.$anonfun: apply(c: Int)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$$init$$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$2: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$columns$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$columns$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$determineWinner$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsLTR$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$diagonalsRTL$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$getPlayersFromString$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$nInARow$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$rows$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$TicTacToeBoard$$p$1$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard$$anonfun$toString$1: apply(Ljava/lang/Object;)
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard.$anonfun.$anonfun: <init>()
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard: columnCount()
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard: p()
TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I) ===> TicTacToeBoard: rowCount()
TicTacToeBoard$$anonfun$toString$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$toString$1: apply(Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(r: Int)
TicTacToeBoard$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
TicTacToeBoard$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> TicTacToeBoard.$anonfun: apply(acc: String,n: Int)
TicTacToeBoard$: <clinit>() ===> TicTacToeBoard: <init>()
TicTacToeBoard.$anonfun.$anonfun: apply(c: Int) ===> TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply$mcVI$sp(I)
TicTacToeBoard.$anonfun.$anonfun: apply(col: Int) ===> TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply$mcZI$sp(I)
TicTacToeBoard.$anonfun.$anonfun: apply(col: Int) ===> TicTacToeBoard$$anonfun$diagonalsRTL$1: TicTacToeBoard$$anonfun$$$outer()
TicTacToeBoard.$anonfun.$anonfun: apply(j: Int) ===> TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply$mcVI$sp(I)
TicTacToeBoard.$anonfun.$anonfun: apply(r: Int) ===> TicTacToeBoard$$anonfun$columns$1: TicTacToeBoard$$anonfun$$$outer()
TicTacToeBoard.$anonfun.$anonfun: apply(row: Int) ===> TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply$mcZI$sp(I)
TicTacToeBoard.$anonfun.$anonfun: apply(row: Int) ===> TicTacToeBoard$$anonfun$diagonalsLTR$1: TicTacToeBoard$$anonfun$$$outer()
TicTacToeBoard.$anonfun: apply(i: Int) ===> TicTacToeBoard$$anonfun$nInARow$1: apply$mcVI$sp(I)
TicTacToeBoard.$anonfun: apply(r: Int) ===> TicTacToeBoard$$anonfun$toString$1: apply$mcVI$sp(I)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$$init$$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$2: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$columns$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$columns$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$determineWinner$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$diagonalsLTR$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$diagonalsLTR$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$diagonalsRTL$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$diagonalsRTL$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$getPlayersFromString$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$nInARow$1$$anonfun$apply$mcVI$sp$2: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$nInARow$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$rows$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$TicTacToeBoard$$p$1$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$toString$1$$anonfun$apply$mcVI$sp$1: apply(Ljava/lang/Object;)
TicTacToeBoard: toString() ===> TicTacToeBoard$$anonfun$toString$1: apply(Ljava/lang/Object;)
X$: <clinit>() ===> X: <init>()
X: canEqual(x$1: Any) ===> X: canEqual(x$1: Any)
X: hashCode() ===> X: hashCode()
X: productArity() ===> X: productArity()
X: productElement(x$1: Int) ===> Blank: toString()
X: productElement(x$1: Int) ===> O: toString()
X: productElement(x$1: Int) ===> TicTacToeBoard: toString()
X: productElement(x$1: Int) ===> X: productElement(x$1: Int)
X: productElement(x$1: Int) ===> X: toString()
X: productIterator() ===> X: productIterator()
X: productPrefix() ===> X: productPrefix()
X: toString() ===> X: toString()