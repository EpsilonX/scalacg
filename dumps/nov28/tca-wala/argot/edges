ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;)
org.clapper.argot.ArgotConverters$: <clinit>() ===> org.clapper.argot.ArgotConverters: <init>()
org.clapper.argot.ArgotConverters: convertInt(s: String,opt: org.clapper.argot.CommandLineArgument[Int]) ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.ArgotConverters: convertInt(s: String,opt: org.clapper.argot.CommandLineArgument[Int]) ===> org.clapper.argot.FlagOption: name()
org.clapper.argot.ArgotConverters: convertInt(s: String,opt: org.clapper.argot.CommandLineArgument[Int]) ===> org.clapper.argot.Parameter: name()
org.clapper.argot.ArgotException: <init>(message: String,cause: Option[Throwable]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$14: String,x$15: String)
org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$11: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$16: String)
org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$17: String,x$18: String)
org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$20: String,x$21: String)
org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$14: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$22: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$15: apply() ===> org.clapper.argot.ArgotParser.$anonfun: apply()
org.clapper.argot.ArgotParser$$anonfun$16: apply() ===> org.clapper.argot.ArgotParser.$anonfun: apply()
org.clapper.argot.ArgotParser$$anonfun$17: apply() ===> org.clapper.argot.ArgotParser.$anonfun: apply()
org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$7: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(args: Seq[Int])
org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$8$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$8: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(opt: org.clapper.argot.CommandLineOption[_])
org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$9: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$13: String)
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$26: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$27: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$checkMissing$1$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$28: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$flag$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$flag$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$multiOption$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$option$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$org$clapper$argot$ArgotParser$$handleOneOption$1$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
org.clapper.argot.ArgotParser$$anonfun$parseNext$1$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$replaceOption$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$24: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotParser$$anonfun$replaceOption$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$25: String)
org.clapper.argot.ArgotParser$$anonfun$replaceOption$4: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$usageString$4: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(key: String)
org.clapper.argot.ArgotParser$$anonfun$usageString$5: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$23: org.clapper.argot.Parameter[_])
org.clapper.argot.ArgotParser$$anonfun$usageString$6: apply(Ljava/lang/Object;) ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
org.clapper.argot.ArgotParser$: <clinit>() ===> org.clapper.argot.ArgotParser: <init>()
org.clapper.argot.ArgotParser.$anonfun.$anonfun: apply(name: String) ===> org.clapper.argot.ArgotParser$$anonfun$8: org$clapper$argot$ArgotParser$$anonfun$$$outer()
org.clapper.argot.ArgotParser: checkForMultiParam(param: org.clapper.argot.Parameter[_]) ===> org.clapper.argot.Parameter: name()
org.clapper.argot.ArgotParser: checkOptionName(name: String) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> org.clapper.argot.MultiValueArg: supportsMultipleValues()
org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> org.clapper.argot.SingleValueArg: supportsMultipleValues()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.MultiValueOption: valueName()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.MultiValueParameter: valueName()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.SingleValueOption: valueName()
org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.SingleValueParameter: valueName()
org.clapper.argot.ArgotParser: parseArgList(a: List[String]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.FlagOption: setByName(name: String)
org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> org.clapper.argot.FlagOption: setByName(name: String)
org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.FlagOption: setByName(name: String)
org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[Int])
org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply() ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply() ===> org.clapper.argot.ArgotTest.$anonfun.$anonfun: apply()
org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int])
org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean])
org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[String])
org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String])
org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[String])
org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.Parameter[java.io.File])
org.clapper.argot.ArgotTest$: <clinit>() ===> org.clapper.argot.ArgotTest: <init>()
org.clapper.argot.ArgotTest.$anonfun.$anonfun: apply() ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply$mcI$sp()
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean]) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int]) ===> org.clapper.argot.FlagOption: value()
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String]) ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.ArgotTest: main(args: Array[String])
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.FlagOption: value()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.MultiValueArg: value()
org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.SingleValueArg: value()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.MultiValueOption: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.MultiValueParameter: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.SingleValueOption: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.SingleValueParameter: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.MultiValueOption: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.MultiValueParameter: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.SingleValueOption: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.SingleValueParameter: key()
org.clapper.argot.CommandLineOption: key() ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.CommandLineOption: key() ===> org.clapper.argot.FlagOption: name()
org.clapper.argot.CommandLineOption: name() ===> org.clapper.argot.CommandLineOption: name()
org.clapper.argot.CommandLineOption: name() ===> org.clapper.argot.FlagOption: names()
org.clapper.argot.CommandLineOption: toString() ===> org.clapper.argot.CommandLineOption: toString()
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply$mcI$sp() ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply() ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.Conversions$$anonfun$parseInt$1: apply() ===> org.clapper.argot.Conversions.$anonfun: apply()
org.clapper.argot.Conversions$: <clinit>() ===> org.clapper.argot.Conversions: <init>()
org.clapper.argot.Conversions.$anonfun: apply() ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply$mcI$sp()
org.clapper.argot.Conversions: parseInt(s: String,opt: String) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotParser$$anonfun$15: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotParser$$anonfun$16: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotParser$$anonfun$17: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotTest$$anonfun$3$$anonfun$1: apply()
org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.Conversions$$anonfun$parseInt$1: apply()
org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption$$anonfun$3: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$4: String)
org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption$$anonfun$4: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$5: String)
org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption$$anonfun$5: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$6: String)
org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption$$anonfun$6: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$7: String)
org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption$$anonfun$wellDefined$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(x$10: String)
org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption$$anonfun$wellDefined$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.FlagOption.$anonfun: apply(s: String)
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.ArgotException: <init>(msg: String)
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: longNamesOffSet()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: longNamesOnSet()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: name()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: shortNamesOffSet()
org.clapper.argot.FlagOption: checkValidity(optName: String) ===> org.clapper.argot.FlagOption: shortNamesOnSet()
org.clapper.argot.FlagOption: clear() ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.FlagOption: convert()
org.clapper.argot.FlagOption: clear() ===> org.clapper.argot.FlagOption: flagValue_=(x$1: Option[T])
org.clapper.argot.FlagOption: key() ===> org.clapper.argot.FlagOption: key()
org.clapper.argot.FlagOption: name() ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.FlagOption: set() ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.FlagOption: convert()
org.clapper.argot.FlagOption: set() ===> org.clapper.argot.FlagOption: flagValue_=(x$1: Option[T])
org.clapper.argot.FlagOption: setByName(name: String) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: checkValidity(optName: String)
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: clear()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: longNamesOnSet()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: set()
org.clapper.argot.FlagOption: setByName(name: String) ===> org.clapper.argot.FlagOption: shortNamesOnSet()
org.clapper.argot.FlagOption: value() ===> org.clapper.argot.FlagOption: flagValue()
org.clapper.argot.FlagOption: wellDefined() ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.MultiValueOption: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.MultiValueParameter: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.SingleValueOption: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.SingleValueParameter: org$clapper$argot$HasValue$_setter_$hasValue_$eq(Z)
org.clapper.argot.HasValue: setFromString(s: String) ===> org.clapper.argot.HasValue: setFromString(s: String)
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueArg: optValue_=(x$1: Seq[T])
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueOption: org$clapper$argot$MultiValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueParameter: org$clapper$argot$MultiValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.MultiValueArg: storeValue(v: T) ===> org.clapper.argot.MultiValueArg: storeValue(v: T)
org.clapper.argot.MultiValueArg: value() ===> org.clapper.argot.MultiValueArg: optValue()
org.clapper.argot.MultiValueArg: value() ===> org.clapper.argot.MultiValueArg: value()
org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.MultiValueOption$$anonfun$2: apply(Ljava/lang/Object;) ===> org.clapper.argot.MultiValueOption.$anonfun: apply(x$3: String)
org.clapper.argot.MultiValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.MultiValueOption[T]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.MultiValueOption: key() ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.MultiValueParameter: key() ===> org.clapper.argot.Parameter: key()
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.Parameter: convertString(s: String) ===> org.clapper.argot.Parameter: convertString(s: String)
org.clapper.argot.Parameter: key() ===> org.clapper.argot.Parameter: key()
org.clapper.argot.Parameter: name() ===> org.clapper.argot.Parameter: name()
org.clapper.argot.Parameter: toString() ===> org.clapper.argot.Parameter: toString()
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueArg: optValue_=(x$1: Option[T])
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueOption: org$clapper$argot$SingleValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueParameter: org$clapper$argot$SingleValueArg$_setter_$supportsMultipleValues_$eq(Z)
org.clapper.argot.SingleValueArg: storeValue(v: T) ===> org.clapper.argot.SingleValueArg: storeValue(v: T)
org.clapper.argot.SingleValueArg: value() ===> org.clapper.argot.SingleValueArg: optValue()
org.clapper.argot.SingleValueArg: value() ===> org.clapper.argot.SingleValueArg: value()
org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
org.clapper.argot.SingleValueOption$$anonfun$1: apply(Ljava/lang/Object;) ===> org.clapper.argot.SingleValueOption.$anonfun: apply(x$2: String)
org.clapper.argot.SingleValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.SingleValueOption[T]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotParser$$anonfun$13: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: convertString(s: String) ===> org.clapper.argot.ArgotTest$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
org.clapper.argot.SingleValueOption: key() ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.SingleValueParameter: key() ===> org.clapper.argot.Parameter: key()