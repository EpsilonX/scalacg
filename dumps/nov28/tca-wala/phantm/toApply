ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.AnnotationsStore$$anonfun$getReturnType$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$2$$anonfun$apply$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$2$$anonfun$apply$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$3: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$3: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$4$$anonfun$apply$5: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$4$$anonfun$apply$6: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$4: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$7: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$6$$anonfun$apply$9: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$6: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$10: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$11: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$13: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$14: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$16: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$17: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$19: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$20: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$22: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23$$anonfun$apply$24: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$27: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$1$$anonfun$apply$25$$anonfun$apply$26: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$1$$anonfun$apply$25: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTSimpleTraversal$$anonfun$traverse$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$statement$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.Trees$PHPNull$: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$4: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$varFromVar$1$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.helpers.CFGGraphs$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ASTIntegrityChecks$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$execute$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2$$anonfun$7: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3$$anonfun$8: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4$$anonfun$9: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.ParsingPhase$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.PhasesRunner$$anonfun$run$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.TypeAnalyzingPhase$$anonfun$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.TypeFlowAnalysis$$anonfun$getCFG$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.Settings$$anonfun$get$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.ObjectStore$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$depth$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$hashCode$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectByType$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$lookup$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$lookup$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$lookupByType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TRealObject$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TRealObject$$anonfun$lookupField$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$depth$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$hashCode$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$union$1$$anonfun$apply$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$union$1$$anonfun$apply$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$getSuperGlobal$1$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$15: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$17: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$allTypesBut$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$6$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$7$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$lookupConstructor$1$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$lookupConstructor$1$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$11: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$4: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8$$anonfun$apply$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$elemsToType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.DumpCollector$$anonfun$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.DumpCollector$$anonfun$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.DumpCollector$$anonfun$3: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1$$anonfun$apply$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Positional$$anonfun$getPos$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitAll$1$$anonfun$apply$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitAll$1$$anonfun$apply$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitAll$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitNormal$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$emitQuickFix$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Reporter$$anonfun$get$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.annotations.AnnotationsStore$$anonfun$getReturnType$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.annotations.AnnotationsStore.$anonfun: apply(x$1: phantm.types.Type,x$2: phantm.types.Type)
phantm.annotations.SourceAnnotations$Parser$$anonfun$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$2$$anonfun$apply$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$2$$anonfun$apply$2: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$2: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$3: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(x0$1: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType])
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$3: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$4$$anonfun$apply$5: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$4$$anonfun$apply$6: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$4: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$7: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply(x0$2: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType])
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$6$$anonfun$apply$9: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$array$6: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$2: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(x0$3: phantm.annotations.SourceAnnotations.Parser.~[phantm.annotations.SourceAnnotations.Parser.~[String,String],phantm.types.Type])
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$10: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$11: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply(x0$4: phantm.annotations.SourceAnnotations.Parser.~[phantm.annotations.SourceAnnotations.Parser.~[String,String],phantm.types.Type])
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$13: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$14: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$16: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$17: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$19: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$20: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(ae: phantm.annotations.SourceAnnotations.Parser.ArrayEntryType)
phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(x$3: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(s: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(l: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(comment: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(l: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$2: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(comment: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(comment: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(l: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(i: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$2: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$22: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23$$anonfun$apply$24: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply(i: String)
phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$2: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(x0$6: phantm.annotations.SourceAnnotations.Parser.~[phantm.annotations.SourceAnnotations.Parser.~[String,String],phantm.types.Type])
phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(x0$7: phantm.annotations.SourceAnnotations.Parser.~[phantm.types.Type,String])
phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$27: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply(x0$8: phantm.annotations.SourceAnnotations.Parser.~[String,phantm.types.Type])
phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$1$$anonfun$apply$25$$anonfun$apply$26: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$1$$anonfun$apply$25: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(x0$5: phantm.annotations.SourceAnnotations.Parser.~[phantm.types.Type,List[phantm.types.Type]])
phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$1: apply() ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply()
phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(x$2: String)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTSimpleTraversal.$anonfun: apply(tr: phantm.ast.Trees.Tree)
phantm.ast.ASTSimpleTraversal$$anonfun$traverse$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.ast.ASTSimpleTraversal.$anonfun: apply(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ca: phantm.ast.Trees.CallArg)
phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ca: phantm.ast.Trees.CallArg)
phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ca: phantm.ast.Trees.CallArg)
phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ca: phantm.ast.Trees.CallArg)
phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(x$2: Option[phantm.ast.Trees.Variable])
phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(st: phantm.ast.Trees.Statement)
phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(x$3: Option[phantm.ast.Trees.Variable])
phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(x0$1: Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)
phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ad: phantm.ast.Trees.ArgumentDecl)
phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ad: phantm.ast.Trees.ArgumentDecl)
phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(th: phantm.ast.Trees.TypeHint)
phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ad: phantm.ast.Trees.ArgumentDecl)
phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(st: phantm.ast.Trees.Statement)
phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(pd: phantm.ast.Trees.PropertyDecl)
phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(cl: phantm.ast.Trees.ClassConstantDecl)
phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(c: phantm.ast.Trees.Catch)
phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(st: phantm.ast.Trees.Statement)
phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(c: Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)
phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ex: phantm.ast.Trees.Expression)
phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(iv: phantm.ast.Trees.InitVariable)
phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(ad: phantm.ast.Trees.ArgumentDecl)
phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(st: phantm.ast.Trees.Statement)
phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(scr: phantm.ast.Trees.StaticClassRef)
phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(md: phantm.ast.Trees.MethodDecl)
phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(cl: phantm.ast.Trees.ClassConstantDecl)
phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(scr: phantm.ast.Trees.StaticClassRef)
phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(scr: phantm.ast.Trees.StaticClassRef)
phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(md: phantm.ast.Trees.MethodDecl)
phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTransform.$anonfun: apply(pd: phantm.ast.Trees.PropertyDecl)
phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTraversal.$anonfun: apply(el: Any)
phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTraversal.$anonfun: apply(n: _)
phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;) ===> phantm.ast.ASTTraversal.$anonfun: apply(x$1: Int)
phantm.ast.ASTTraversal: traverse0() ===> phantm.annotations.AnnotationsStore$$anonfun$getReturnType$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.ast.ASTSimpleTraversal$$anonfun$traverse$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.ast.STToAST$$anonfun$statement$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.helpers.CFGGraphs$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.phases.ASTIntegrityChecks$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.phases.CallGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.phases.CollectSymbols$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.phases.CollectSymbols$$anonfun$execute$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.phases.ParsingPhase$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.ObjectStore$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TArray$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TArray$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TArray$$anonfun$depth$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TArray$$anonfun$hashCode$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TArray$$anonfun$lookupByType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TRealObject$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TUnion$$anonfun$depth$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TUnion$$anonfun$hashCode$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeEnvironment$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeFlowAnalyzer$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$15: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$17: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$allTypesBut$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$6$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$7$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$11: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8$$anonfun$apply$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.util.API$Reader$$anonfun$elemsToType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.util.Reporter$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.util.Reporter$$anonfun$emitAll$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.ASTTraversal: traverse0() ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun: apply(n: Int)
phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun: apply(c: phantm.parser.ParseNode)
phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun: apply(x$4: phantm.ast.Trees.MemberFlag)
phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun.$anonfun: apply(id: Option[phantm.ast.Trees.Expression])
phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun.$anonfun: apply(id: Option[phantm.ast.Trees.Expression])
phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun: apply(oa: phantm.ast.Trees.ObjectAccess)
phantm.ast.STToAST$$anonfun$statement$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun: apply(x: phantm.ast.Trees.Expression,y: phantm.ast.Trees.Expression)
phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;) ===> phantm.ast.STToAST.$anonfun: apply(n: Int)
phantm.ast.Trees$PHPNull$: apply() ===> phantm.ast.Trees.PHPNull: apply()
phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(check$ifrefutable$3: String, List[phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.util.Positional)
phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun.$anonfun: apply(check$ifrefutable$4: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.util.Positional)
phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun.$anonfun: apply(x$17: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.util.Positional)
phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(x$18: String, List[phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.util.Positional)
phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(a: phantm.ast.Trees.CallArg)
phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(a: phantm.ast.Trees.CallArg)
phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(a: phantm.ast.Trees.CallArg)
phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(a: phantm.ast.Trees.CallArg)
phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun.$anonfun.$anonfun: apply(eIn: phantm.cfg.EdgeImp[phantm.cfg.Trees.Statement])
phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun.$anonfun: apply(eOut: phantm.cfg.EdgeImp[phantm.cfg.Trees.Statement])
phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(v: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement])
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(check$ifrefutable$1: Option[phantm.ast.Trees.Variable], Int)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(x$3: Option[phantm.ast.Trees.Variable], Int)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(x$4: phantm.ast.Trees.Variable)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(av: Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(e: phantm.ast.Trees.Expression)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$1: apply() ===> phantm.cfg.ASTToCFG.$anonfun: apply()
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(check$ifrefutable$2: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.util.Positional)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(x$6: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.util.Positional)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$4: apply() ===> phantm.cfg.ASTToCFG.$anonfun: apply()
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(c: Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(c: phantm.ast.Trees.Expression, phantm.cfg.VertexImp[phantm.cfg.Trees.Statement])
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(v: phantm.ast.Trees.InitVariable)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(v: phantm.ast.Trees.Variable)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;) ===> phantm.cfg.ASTToCFG.$anonfun: apply(e: phantm.ast.Trees.Expression)
phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$varFromVar$1$1: apply() ===> phantm.cfg.ASTToCFG.$anonfun: apply()
phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.$anonfun: apply(e: phantm.cfg.EdgeImp[LabelType])
phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.$anonfun: apply(e: phantm.cfg.EdgeImp[LabelType])
phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.$anonfun: apply(e: phantm.cfg.EdgeImp[LabelType])
phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.$anonfun: apply(v: phantm.cfg.VertexImp[LabelType])
phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.$anonfun: apply(edge: phantm.cfg.EdgeImp[LabelType])
phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.$anonfun: apply(x: LabeledDirectedGraphImp.this.Group)
phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.$anonfun: apply(x$6: phantm.cfg.EdgeImp[LabelType])
phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.Group.$anonfun: apply(eOut: phantm.cfg.EdgeImp[LabelType])
phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;) ===> phantm.cfg.LabeledDirectedGraphImp.Group.$anonfun: apply(sg: LabeledDirectedGraphImp.this.Group)
phantm.dataflow.AnalysisAlgorithm$$anonfun$1: apply() ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply()
phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(v: phantm.cfg.VertexImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(v: phantm.cfg.VertexImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(v: phantm.cfg.VertexImp[S])
phantm.dataflow.AnalysisAlgorithm.$anonfun.$anonfun: apply(e: phantm.cfg.EdgeImp[S]) ===> phantm.types.TypeTransferFunction: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S]) ===> phantm.types.TypeTransferFunction: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.StronglyConnectedComponents.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.dataflow.StronglyConnectedComponents.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.dataflow.StronglyConnectedComponents.$anonfun.$anonfun.$anonfun: apply(e: phantm.cfg.EdgeImp[S])
phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.dataflow.StronglyConnectedComponents.$anonfun.$anonfun.$anonfun: apply(x$3: StronglyConnectedComponents.this.SCC)
phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.StronglyConnectedComponents.$anonfun.$anonfun: apply(v: phantm.cfg.VertexImp[S])
phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.StronglyConnectedComponents.$anonfun: apply(scc: StronglyConnectedComponents.this.SCC)
phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;) ===> phantm.dataflow.StronglyConnectedComponents.$anonfun: apply(x$2: phantm.cfg.VertexImp[S])
phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;) ===> phantm.helpers.ASTGraph.$anonfun: apply(x$1: Int)
phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;) ===> phantm.helpers.ASTGraph.$anonfun: apply(c: Any)
phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;) ===> phantm.helpers.ASTGraph.$anonfun: apply(n: _)
phantm.helpers.CFGGraphs$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.helpers.CFGGraphs.$anonfun: apply(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext)
phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;) ===> phantm.helpers.CFGGraphs.$anonfun: apply(m: phantm.ast.Trees.MethodDecl)
phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;) ===> phantm.helpers.STGraph.$anonfun: apply(c: phantm.parser.ParseNode)
phantm.Main$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.Main.$anonfun: apply(x$2: String)
phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;) ===> phantm.Main.$anonfun: apply(path: String)
phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;) ===> phantm.parser.Parser.$anonfun: apply(c: phantm.parser.Comment)
phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;) ===> phantm.parser.Parser.$anonfun: apply(c: phantm.util.Positional, String)
phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;) ===> phantm.phases.APIImportationPhase.$anonfun: apply(api: String)
phantm.phases.ASTIntegrityChecks$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.phases.ASTIntegrityChecks.$anonfun: apply(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext)
phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;) ===> phantm.phases.ASTIntegrityChecks.$anonfun: apply(arg: phantm.ast.Trees.CallArg)
phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;) ===> phantm.phases.ASTIntegrityChecks.$anonfun: apply(arg: phantm.ast.Trees.CallArg)
phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;) ===> phantm.phases.ASTIntegrityChecks.$anonfun: apply(arg: phantm.ast.Trees.CallArg)
phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;) ===> phantm.phases.ASTPruner.$anonfun: apply(x$7: phantm.ast.Trees.Statement)
phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.phases.ASTPruningPhase.$anonfun: apply(dc: phantm.util.DumpCollector)
phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.phases.ASTPruningPhase.$anonfun: apply(dc: phantm.util.DumpCollector)
phantm.phases.CallGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.phases.CallGraphGeneration.$anonfun: apply(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext)
phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphGeneration.CallGraph.$anonfun: apply(x$2: phantm.cfg.EdgeImp[Int])
phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphGeneration.CallGraph.$anonfun: apply(x$1: phantm.symbols.FunctionSymbol)
phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$2: apply() ===> phantm.phases.CallGraphGeneration.CallGraph.$anonfun: apply()
phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphGeneration.CallGraph.$anonfun.$anonfun: apply(x$3: phantm.cfg.EdgeImp[Int])
phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphGeneration.CallGraph.$anonfun.$anonfun: apply(x$4: phantm.cfg.EdgeImp[Int])
phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphGeneration.CallGraph.$anonfun: apply(mf: phantm.cfg.VertexImp[Int])
phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphPhase.$anonfun: apply(v: phantm.cfg.VertexImp[Int])
phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphPhase.$anonfun: apply(v: phantm.cfg.VertexImp[Int])
phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphPhase.$anonfun.$anonfun: apply(v: phantm.cfg.VertexImp[Int])
phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphPhase.$anonfun.$anonfun: apply(e: phantm.cfg.EdgeImp[Int])
phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;) ===> phantm.phases.CallGraphPhase.$anonfun: apply(ssc: tarjan.SCC)
phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;) ===> phantm.phases.CFGGenerator.$anonfun: apply(m: phantm.ast.Trees.MethodDecl)
phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(a: phantm.ast.Trees.ArgumentDecl)
phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(check$ifrefutable$3: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(x$12: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(check$ifrefutable$4: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(x$13: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassDecl)
phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassDecl)
phantm.phases.CollectSymbols$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext)
phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(i: phantm.symbols.IfaceSymbol, phantm.ast.Trees.InterfaceDecl)
phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.symbols.ClassSymbol, phantm.ast.Trees.ClassDecl)
phantm.phases.CollectSymbols$$anonfun$execute$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext)
phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(x: phantm.ast.Trees.ClassDecl)
phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(i: phantm.ast.Trees.StaticClassRef)
phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(x: phantm.ast.Trees.InterfaceDecl)
phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(i: phantm.ast.Trees.InterfaceDecl)
phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(i: phantm.ast.Trees.InterfaceDecl)
phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(pi: phantm.ast.Trees.StaticClassRef)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(check$ifrefutable$1: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(x$9: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(check$ifrefutable$2: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(x$10: String, phantm.symbols.ArgumentSymbol)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(a: phantm.ast.Trees.ArgumentDecl)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(m: phantm.ast.Trees.MethodDecl)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$2$$anonfun$7: apply() ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply()
phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$3$$anonfun$8: apply() ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply()
phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl)
phantm.phases.CollectSymbols$$anonfun$secondClassPass$4$$anonfun$9: apply() ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply()
phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl)
phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun.$anonfun: apply(a: phantm.ast.Trees.ArgumentDecl)
phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;) ===> phantm.phases.CollectSymbols.$anonfun: apply(m: phantm.ast.Trees.MethodDecl)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;) ===> phantm.phases.DumpsCollectionPhase.$anonfun: apply(path: String)
phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.phases.IncludesConstantsResolutionPhase.$anonfun: apply(d: phantm.util.DumpCollector)
phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;) ===> phantm.phases.IncludesConstantsResolutionPhase.$anonfun: apply(check$ifrefutable$1: String, phantm.ast.Trees.Scalar)
phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;) ===> phantm.phases.IncludesConstantsResolutionPhase.$anonfun: apply(x$1: String, phantm.ast.Trees.Scalar)
phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;) ===> phantm.phases.IncludesConstantsResolutionPhase.$anonfun: apply(x$2: String, phantm.ast.Trees.Scalar)
phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;) ===> phantm.phases.IncludesConstantsResolutionPhase.$anonfun: apply(d: phantm.util.DumpCollector)
phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;) ===> phantm.phases.IncludesConstantsResolutionPhase.$anonfun: apply(f: String)
phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;) ===> phantm.phases.IncludesConstantsResolutionPhase.$anonfun: apply(f: String)
phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;) ===> phantm.phases.MethodGraphGeneration.$anonfun: apply(check$ifrefutable$1: String, phantm.symbols.ClassSymbol)
phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;) ===> phantm.phases.MethodGraphGeneration.$anonfun: apply(x$2: String, phantm.symbols.ClassSymbol)
phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.phases.MethodGraphGeneration.$anonfun.$anonfun: apply(check$ifrefutable$2: String, phantm.symbols.MethodSymbol)
phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.phases.MethodGraphGeneration.$anonfun.$anonfun: apply(x$1: String, phantm.symbols.MethodSymbol)
phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;) ===> phantm.phases.MethodGraphGeneration.$anonfun: apply(x$3: String, phantm.symbols.ClassSymbol)
phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;) ===> phantm.phases.MethodGraphPhase.$anonfun: apply(v: phantm.cfg.VertexImp[String])
phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;) ===> phantm.phases.MethodGraphPhase.$anonfun: apply(v: phantm.cfg.VertexImp[String])
phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.phases.NamespaceResolverPhase.$anonfun.$anonfun: apply(stmt: phantm.ast.Trees.Statement)
phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;) ===> phantm.phases.NamespaceResolverPhase.$anonfun: apply(stmt: phantm.ast.Trees.Statement)
phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(cl: phantm.ast.Trees.ClassConstantDecl)
phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(ad: phantm.ast.Trees.ArgumentDecl)
phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(scr: phantm.ast.Trees.StaticClassRef)
phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(md: phantm.ast.Trees.MethodDecl)
phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(cl: phantm.ast.Trees.ClassConstantDecl)
phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(scr: phantm.ast.Trees.StaticClassRef)
phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(scr: phantm.ast.Trees.StaticClassRef)
phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(md: phantm.ast.Trees.MethodDecl)
phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(pd: phantm.ast.Trees.PropertyDecl)
phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;) ===> phantm.phases.NSResolver.$anonfun: apply(pd: phantm.ast.Trees.PropertyDecl)
phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;) ===> phantm.phases.NSWrapper.$anonfun: apply(s: phantm.ast.Trees.Statement)
phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.phases.ParsingPhase.$anonfun: apply(f: String)
phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.phases.ParsingPhase.$anonfun: apply(x$1: String, phantm.parser.Parser, Option[phantm.parser.ParseNode])
phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.phases.ParsingPhase.$anonfun: apply(c: String, phantm.parser.Parser, Option[phantm.parser.ParseNode])
phantm.phases.ParsingPhase$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.phases.ParsingPhase.$anonfun: apply(a: phantm.ast.Trees.Program,b: phantm.ast.Trees.Program)
phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;) ===> phantm.phases.PhasesRunner.$anonfun.$anonfun: apply(check$ifrefutable$1: phantm.phases.Phase, Int)
phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;) ===> phantm.phases.PhasesRunner.$anonfun.$anonfun: apply(x$1: phantm.phases.Phase, Int)
phantm.phases.PhasesRunner$$anonfun$run$1: apply() ===> phantm.phases.PhasesRunner.$anonfun: apply()
phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;) ===> phantm.phases.PureStatementsChecks.$anonfun: apply(stmt: phantm.ast.Trees.Statement)
phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;) ===> phantm.phases.PureStatementsChecks.$anonfun: apply(v: Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)
phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;) ===> phantm.phases.PureStatementsChecks.$anonfun: apply(stmt: phantm.ast.Trees.Statement)
phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;) ===> phantm.phases.PureStatementsChecks.$anonfun: apply(a: phantm.ast.Trees.CallArg)
phantm.phases.TypeAnalyzingPhase$$anonfun$1: apply() ===> phantm.phases.TypeAnalyzingPhase.$anonfun: apply()
phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;) ===> phantm.phases.TypeAnalyzingPhase.$anonfun: apply(f: String)
phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$2: apply() ===> phantm.phases.TypeAnalyzingPhase.$anonfun: apply()
phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;) ===> phantm.phases.TypeAnalyzingPhase.$anonfun: apply(check$ifrefutable$1: phantm.symbols.FunctionSymbol, Int)
phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;) ===> phantm.phases.TypeAnalyzingPhase.$anonfun: apply(x$1: phantm.symbols.FunctionSymbol, Int)
phantm.phases.TypeFlowAnalysis$$anonfun$getCFG$1: apply() ===> phantm.phases.TypeFlowAnalysis.$anonfun: apply()
phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;) ===> phantm.phases.TypeFlowAnalysis.$anonfun: apply(m: phantm.ast.Trees.MethodDecl)
phantm.Settings$$anonfun$get$1: apply() ===> phantm.Settings.$anonfun: apply()
phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;) ===> phantm.symbols.ClassSymbol.$anonfun: apply(x: String, phantm.symbols.PropertySymbol)
phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;) ===> phantm.symbols.FunctionSymbol.$anonfun: apply(check$ifrefutable$1: String, phantm.symbols.ArgumentSymbol)
phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;) ===> phantm.symbols.FunctionSymbol.$anonfun: apply(x$1: String, phantm.symbols.ArgumentSymbol)
phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;) ===> phantm.symbols.FunctionSymbol.$anonfun: apply(x: String, phantm.symbols.ArgumentSymbol)
phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;) ===> phantm.symbols.GlobalSymbols.$anonfun: apply(x: String, phantm.symbols.ClassSymbol)
phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.symbols.IfaceSymbol.$anonfun: apply(x$4: phantm.symbols.IfaceSymbol)
phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.symbols.IfaceSymbol.$anonfun: apply(x$5: phantm.symbols.IfaceSymbol)
phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;) ===> phantm.symbols.IfaceSymbol.$anonfun: apply(p: phantm.symbols.IfaceSymbol)
phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;) ===> phantm.symbols.IfaceSymbol.$anonfun: apply(p: phantm.symbols.IfaceSymbol)
phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;) ===> phantm.types.ObjectStore.$anonfun: apply(x: phantm.symbols.PropertySymbol)
phantm.types.ObjectStore$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.ObjectStore.$anonfun: apply(x: phantm.types.ObjectId, phantm.types.TRealObject)
phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;) ===> phantm.types.ObjectStore.$anonfun: apply(x: phantm.types.ObjectId, phantm.types.TRealObject)
phantm.types.TArray$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$depth$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x$9: Int,x$10: Int)
phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x$8: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$hashCode$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(a: Int,b: phantm.types.Type)
phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(check$ifrefutable$2: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x$11: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(check$ifrefutable$4: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x$13: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(check$ifrefutable$3: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x$12: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.types.TArray$$anonfun$injectByType$1: apply() ===> phantm.types.TArray.$anonfun: apply()
phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(t: phantm.types.Type)
phantm.types.TArray$$anonfun$lookup$1: apply() ===> phantm.types.TArray.$anonfun: apply()
phantm.types.TArray$$anonfun$lookup$2: apply() ===> phantm.types.TArray.$anonfun: apply()
phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x$5: phantm.types.Type)
phantm.types.TArray$$anonfun$lookupByType$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(x$6: phantm.types.Type,x$7: phantm.types.Type)
phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;) ===> phantm.types.TArray.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;) ===> phantm.types.TFunction.$anonfun: apply(a: phantm.types.Type, Boolean, Boolean)
phantm.types.TRealObject$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TRealObject.$anonfun: apply(a: Int,b: Int)
phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.types.TRealObject.$anonfun: apply(x$1: String, phantm.types.Type)
phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.types.TRealObject.$anonfun: apply(x: String, phantm.types.Type)
phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;) ===> phantm.types.TRealObject.$anonfun: apply(check$ifrefutable$1: String, phantm.types.Type)
phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;) ===> phantm.types.TRealObject.$anonfun: apply(x$2: String, phantm.types.Type)
phantm.types.TRealObject$$anonfun$lookupField$1: apply() ===> phantm.types.TRealObject.$anonfun: apply()
phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(x$22: phantm.types.Type)
phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(x$23: phantm.types.Type)
phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TUnion$$anonfun$depth$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(x$25: Int,x$26: Int)
phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(x$24: phantm.types.Type)
phantm.types.TUnion$$anonfun$hashCode$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(a: Int,b: phantm.types.Type)
phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;) ===> phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type)
phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun: apply(check$ifrefutable$1: phantm.cfg.Trees.SimpleVariable, phantm.types.Type)
phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun.$anonfun: apply(check$ifrefutable$2: phantm.cfg.Trees.Statement, phantm.types.TypeEnvironment)
phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun.$anonfun: apply(x$2: phantm.cfg.Trees.Statement, phantm.types.TypeEnvironment)
phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun: apply(x$3: phantm.cfg.Trees.SimpleVariable, phantm.types.Type)
phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun: apply(tmp: phantm.cfg.Trees.SimpleVariable, phantm.types.Type)
phantm.types.TypeEnvironment$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun: apply(x: phantm.cfg.Trees.SimpleVariable, phantm.types.Type)
phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun: apply(x: phantm.cfg.Trees.SimpleVariable, phantm.types.Type)
phantm.types.TypeEnvironment$$anonfun$union$1$$anonfun$apply$1: apply() ===> phantm.types.TypeEnvironment.$anonfun.$anonfun: apply()
phantm.types.TypeEnvironment$$anonfun$union$1$$anonfun$apply$2: apply() ===> phantm.types.TypeEnvironment.$anonfun.$anonfun: apply()
phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun: apply(k: phantm.cfg.Trees.SimpleVariable)
phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeEnvironment.$anonfun: apply(id: phantm.types.ObjectId)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.types.TypeEnvironment.$anonfun: applyOrElse([A1 <: phantm.cfg.Trees.SimpleVariable, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(d: phantm.util.DumpCollector)
phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(mf: phantm.symbols.FunctionSymbol)
phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(x$2: String, phantm.types.TypeEnvironment)
phantm.types.TypeFlowAnalyzer$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(e1: phantm.types.TypeEnvironment,e2: phantm.types.TypeEnvironment)
phantm.types.TypeFlowAnalyzer$$anonfun$analyze$1: apply() ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply()
phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(v: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.types.TypeEnvironment)
phantm.types.TypeFlowAnalyzer$$anonfun$analyze$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(x: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.types.TypeEnvironment)
phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(check$ifrefutable$2: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.types.TypeEnvironment)
phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(x$3: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement], phantm.types.TypeEnvironment)
phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(l: phantm.cfg.Trees.Statement)
phantm.types.TypeFlowAnalyzer$$anonfun$analyze$7: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(msg: String,pos: phantm.util.Positional)
phantm.types.TypeFlowAnalyzer$$anonfun$getSuperGlobal$1$1: apply() ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply()
phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(check$ifrefutable$1: String, phantm.symbols.ArgumentSymbol)
phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(x$1: String, phantm.symbols.ArgumentSymbol)
phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun.$anonfun: apply(ps: phantm.symbols.PropertySymbol)
phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(cs: phantm.symbols.ClassSymbol)
phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(index: String)
phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(index: String)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(k: String)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun.$anonfun: apply(y: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x$5: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x: phantm.types.Type,y: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x$6: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x: phantm.types.Type,y: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun.$anonfun: apply(t2: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(t1: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$7: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x: phantm.types.Type,y: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(t1: phantm.types.Type)
phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$9: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeLattice.$anonfun: apply(x: phantm.types.Type,y: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$48: phantm.types.Type,x$49: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(a: String, phantm.symbols.ArgumentSymbol)
phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$56: phantm.cfg.Trees.SimpleValue)
phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: phantm.types.FunctionType)
phantm.types.TypeTransferFunction$$anonfun$15: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(a: phantm.types.FunctionType, Int)
phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$58: phantm.types.FunctionType)
phantm.types.TypeTransferFunction$$anonfun$17: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$59: phantm.types.Type,x$60: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$12: phantm.types.Type,x$13: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(a: phantm.cfg.Trees.SimpleValue)
phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x: phantm.symbols.PropertySymbol)
phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(kt: String, phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(kt: String, phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$42: phantm.types.Type,x$43: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$46: phantm.types.Type,x$47: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$allTypesBut$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$5: phantm.types.Type,x$6: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(v: phantm.cfg.Trees.Variable)
phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(v: phantm.cfg.Trees.Variable)
phantm.types.TypeTransferFunction$$anonfun$apply$default$6$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$1: String,x$2: phantm.util.Positional)
phantm.types.TypeTransferFunction$$anonfun$apply$default$7$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$3: String,x$4: phantm.util.Positional)
phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(i: Int)
phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(check$ifrefutable$1: phantm.types.Type, Int)
phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$54: phantm.types.Type, Int)
phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(check$ifrefutable$2: phantm.types.Type, Int)
phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$55: phantm.types.Type, Int)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(kt: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(t: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(e: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$50: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$51: phantm.types.Type,x$52: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$lookupConstructor$1$1: apply() ===> phantm.types.TypeTransferFunction.$anonfun: apply()
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$lookupConstructor$1$2: apply() ===> phantm.types.TypeTransferFunction.$anonfun: apply()
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(i: Int)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(t: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$20: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$11: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$21: phantm.types.Type,x$22: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(unser: phantm.util.DumpCollector)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$4: apply() ===> phantm.types.TypeTransferFunction.$anonfun: apply()
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$14: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$15: phantm.types.Type,x$16: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$7: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(t: phantm.types.Type,e: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8$$anonfun$apply$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun.$anonfun: apply(t: phantm.types.Type,e: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$17: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$9: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$18: phantm.types.Type,x$19: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(k: phantm.types.ArrayKey)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: String)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: String)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: String)
phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(t: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(t: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$removeUninit$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$7: phantm.types.Type,x$8: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(e: phantm.types.ArrayKey, phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(t: phantm.types.Type)
phantm.types.TypeTransferFunction$$anonfun$uninitToNull$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$9: phantm.types.Type,x$10: phantm.types.Type)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction.$anonfun: applyOrElse([A1 <: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.types.TypeTransferFunction: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.types.TypeTransferFunction: apply(node: phantm.cfg.Trees.Statement,envInit: phantm.types.TypeEnvironment)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.annotations.AnnotationsStore$$anonfun$getReturnType$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.ast.ASTSimpleTraversal$$anonfun$traverse$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.ast.STToAST$$anonfun$statement$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.helpers.CFGGraphs$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.phases.ASTIntegrityChecks$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.phases.CallGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.phases.CollectSymbols$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.phases.CollectSymbols$$anonfun$execute$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.phases.ParsingPhase$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.ObjectStore$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$depth$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$hashCode$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$lookupByType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TRealObject$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TUnion$$anonfun$depth$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TUnion$$anonfun$hashCode$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeEnvironment$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$15: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$17: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$allTypesBut$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$6$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$7$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$11: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8$$anonfun$apply$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.util.API$Reader$$anonfun$elemsToType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.util.Reporter$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.util.Reporter$$anonfun$emitAll$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.annotations.AnnotationsStore$$anonfun$getReturnType$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.ast.ASTSimpleTraversal$$anonfun$traverse$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.ast.STToAST$$anonfun$statement$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.helpers.CFGGraphs$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.phases.ASTIntegrityChecks$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.phases.CallGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.phases.CollectSymbols$$anonfun$execute$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.phases.CollectSymbols$$anonfun$execute$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.phases.ParsingPhase$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.ObjectStore$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$depth$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$hashCode$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TArray$$anonfun$lookupByType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TRealObject$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TUnion$$anonfun$depth$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TUnion$$anonfun$hashCode$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeEnvironment$$anonfun$toString$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer$$anonfun$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$15: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$17: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$allTypesBut$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$6$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$apply$default$7$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$11: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8$$anonfun$apply$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.util.API$Reader$$anonfun$elemsToType$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.util.Reporter$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.util.Reporter$$anonfun$emitAll$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(e: scala.xml.Node)
phantm.util.API$Reader$$anonfun$elemsToType$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(a: phantm.types.Type,b: phantm.types.Type)
phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(el: scala.xml.Node)
phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(el: scala.xml.Node)
phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(el: scala.xml.Node)
phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(el: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun.$anonfun: apply(a: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun.$anonfun: apply(check$ifrefutable$1: scala.xml.Node, phantm.types.Type, Boolean, Boolean)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun.$anonfun: apply(x$1: scala.xml.Node, phantm.types.Type, Boolean, Boolean)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun.$anonfun: apply(a: String, phantm.symbols.ArgumentSymbol)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(m: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(f: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(f: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(cc: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(c: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(a: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(a: String, phantm.symbols.ArgumentSymbol)
phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(check$ifrefutable$2: scala.xml.Node, phantm.types.Type, Boolean, Boolean)
phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun.$anonfun: apply(x$2: scala.xml.Node, phantm.types.Type, Boolean, Boolean)
phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(f: scala.xml.Node)
phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;) ===> phantm.util.API.Reader.$anonfun: apply(cc: scala.xml.Node)
phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun: apply(e: phantm.types.ArrayKey, phantm.types.Type)
phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun: apply(check$ifrefutable$3: String, List[phantm.types.TFunction], List[phantm.types.Type])
phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$5: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun.$anonfun: apply(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction)
phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun.$anonfun: apply(x: phantm.types.Type,y: phantm.types.Type)
phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun.$anonfun: apply(arg: phantm.types.Type, Boolean, Boolean)
phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun: apply(x$4: String, List[phantm.types.TFunction], List[phantm.types.Type])
phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun: apply(x$3: phantm.types.Type)
phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;) ===> phantm.util.API.Writer.$anonfun: apply(a: phantm.types.Type, Boolean, Boolean)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;) ===> phantm.util.DumpCollector.$anonfun.$anonfun: apply(l: String)
phantm.util.DumpCollector$$anonfun$1: apply() ===> phantm.util.DumpCollector.$anonfun: apply()
phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;) ===> phantm.util.DumpCollector.$anonfun.$anonfun: apply(l: String)
phantm.util.DumpCollector$$anonfun$2: apply() ===> phantm.util.DumpCollector.$anonfun: apply()
phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;) ===> phantm.util.DumpCollector.$anonfun.$anonfun: apply(l: String)
phantm.util.DumpCollector$$anonfun$3: apply() ===> phantm.util.DumpCollector.$anonfun: apply()
phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;) ===> phantm.util.IncludeResolver.$anonfun: apply(p: String)
phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.util.IncludeResolver.$anonfun: apply(scalar: phantm.ast.Trees.Scalar)
phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;) ===> phantm.util.IncludeResolver.$anonfun: apply(ph: phantm.phases.Phase)
phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1$$anonfun$apply$2: apply() ===> phantm.util.IncludeResolver.$anonfun.$anonfun.$anonfun: apply()
phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> phantm.util.IncludeResolver.$anonfun.$anonfun: apply(l: String)
phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;) ===> phantm.util.IncludeResolver.$anonfun: apply(incl: String)
phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;) ===> phantm.util.IncludeResolver.$anonfun: apply(prefix: String)
phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;) ===> phantm.util.IncludeResolver.$anonfun: apply(prefix: String)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)
phantm.util.Positional$$anonfun$getPos$1: apply() ===> phantm.util.Positional.$anonfun: apply()
phantm.util.Reporter$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun: apply(x$4: scala.collection.immutable.Set[Reporter.this.Error],x$5: scala.collection.immutable.Set[Reporter.this.Error])
phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun: apply(e: Reporter.this.Error)
phantm.util.Reporter$$anonfun$emitAll$1$$anonfun$apply$1: apply() ===> phantm.util.Reporter.$anonfun.$anonfun: apply()
phantm.util.Reporter$$anonfun$emitAll$1$$anonfun$apply$2: apply() ===> phantm.util.Reporter.$anonfun.$anonfun: apply()
phantm.util.Reporter$$anonfun$emitAll$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun: apply(a: Option[String], scala.collection.immutable.Set[Reporter.this.Error])
phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun: apply(x: Option[String], scala.collection.immutable.Set[Reporter.this.Error])
phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun.$anonfun: apply(x: Reporter.this.Error,y: Reporter.this.Error)
phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun.$anonfun: apply(e: Reporter.this.Error)
phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun: apply(errsPerFile: scala.collection.immutable.Set[Reporter.this.Error])
phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun: apply(i: Int)
phantm.util.Reporter$$anonfun$emitNormal$2: apply() ===> phantm.util.Reporter.$anonfun: apply()
phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;) ===> phantm.util.Reporter.$anonfun: apply(i: Int)
phantm.util.Reporter$$anonfun$emitQuickFix$1: apply() ===> phantm.util.Reporter.$anonfun: apply()
phantm.util.Reporter$$anonfun$get$1: apply() ===> phantm.util.Reporter.$anonfun: apply()
phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(v: phantm.util.UValue)
phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(check$ifrefutable$3: String, phantm.types.Type)
phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(x$4: String, phantm.types.Type)
phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(check$ifrefutable$4: phantm.types.ObjectId, phantm.types.TRealObject)
phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(x$5: phantm.types.ObjectId, phantm.types.TRealObject)
phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(check$ifrefutable$5: phantm.util.UValue, phantm.util.UValue)
phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(x$6: phantm.util.UValue, phantm.util.UValue)
phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(v: phantm.util.UValue)
phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(v: phantm.util.UValue)
phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(e: Int)
phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(e: Int)
phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(check$ifrefutable$1: phantm.util.UValue, phantm.util.UValue)
phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(x$2: phantm.util.UValue, phantm.util.UValue)
phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(check$ifrefutable$2: phantm.util.UValue, phantm.util.UValue)
phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;) ===> phantm.util.Unserializer.$anonfun: apply(x$3: phantm.util.UValue, phantm.util.UValue)
