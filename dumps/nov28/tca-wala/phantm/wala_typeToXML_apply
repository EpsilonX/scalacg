phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$array$5$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$4$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$5$$anonfun$apply$15: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$6$$anonfun$apply$18: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrayentry$7$$anonfun$apply$21: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$arrentriesToArray$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$filterLines$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getAnyType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getConstType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getFunctionTypes$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getReturnType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$getVarType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$importTypeDefs$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typ$3$$anonfun$apply$23: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typedef$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$typVar$3$$anonfun$apply$28: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$utyp$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.annotations.SourceAnnotations$Parser$$anonfun$variable$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTSimpleTraversal$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trArgDecl$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trInitVariable$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trMethod$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trProperty$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$15: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$16: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$17: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$18: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTransform$$anonfun$trStmt$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$addRec$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.ASTTraversal$$anonfun$elements$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$base_variable$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$childrenNames$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$class_statement$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$deriveOAList$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.ast.STToAST$$anonfun$variable_without_objects$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$assumeProp$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$convertAST$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$exprStoreGet$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$fewerSkips$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$assignListItem$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$expr$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.ASTToCFG$$anonfun$phantm$cfg$ASTToCFG$$stmt$1$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$$minus$eq$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$betweenEdges$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toDotString$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$followGraph$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.cfg.LabeledDirectedGraphImp$Group$$anonfun$toDotString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$computeFixpoint$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$detectUnreachable$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.AnalysisAlgorithm$$anonfun$pass$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$getComponents$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.dataflow.StronglyConnectedComponents$$anonfun$tarjan$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$elements$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.ASTGraph$$anonfun$phantm$helpers$ASTGraph$$dotPrint$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.CFGGraphs$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.helpers.STGraph$$anonfun$phantm$helpers$STGraph$$dotPrint$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.Main$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.Main$$anonfun$handleArgs$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.parser.Parser$$anonfun$parse$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.APIImportationPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTIntegrityChecks$$anonfun$visit$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTPruner$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ASTPruningPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$addNode$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphGeneration$CallGraph$$anonfun$computeReachableFromMain$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CallGraphPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CFGGenerator$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstClassPass0$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$firstIfacePass0$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondClassPass$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.CollectSymbols$$anonfun$secondIfacePass$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.DumpsCollectionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.IncludesConstantsResolutionPhase$$anonfun$run$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphGeneration$$anonfun$execute$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.MethodGraphPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NamespaceResolverPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSResolver$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.NSWrapper$$anonfun$trStmts$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.ParsingPhase$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PhasesRunner$$anonfun$run$1$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$checkPures$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.PureStatementsChecks$$anonfun$isPure$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$phantm$phases$TypeAnalyzingPhase$$displaySummary$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeAnalyzingPhase$$anonfun$run$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.phases.TypeFlowAnalysis$$anonfun$visit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.ClassSymbol$$anonfun$getStaticProperties$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$importAPIFrom$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.FunctionSymbol$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.GlobalSymbols$$anonfun$getClasses$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.symbols.IfaceSymbol$$anonfun$lookupMethod$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$newObject$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.ObjectStore$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$depth$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAny$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyInt$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectAnyString$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$injectByType$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$lookupByType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray$$anonfun$merge$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TFunction$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TRealObject$$anonfun$injectAnyField$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$15: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$16: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$addToSet$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$depth$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TUnion$$anonfun$toText$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$checkMonotonicity$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$toString$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$union$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeEnvironment$$anonfun$unionStoreFrom$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$analyze$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeFlowAnalyzer$$anonfun$setupEnvironment$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$joinObjects$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$meetObjects$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$joinTypes$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$leqT$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeLattice$$anonfun$phantm$types$TypeLattice$$meetTypes$2$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$13: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$14: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$16: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$checkAgainstFType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$getInlinedRetType$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$fixType$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$limitType$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$protoErrors$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$simpleText$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typeFromSV$1$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$phantm$types$TypeTransferFunction$$typesDiff$1$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$removeUninit$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction$$anonfun$uninitToNull$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemsToType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$elemToType$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$6: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1$$anonfun$apply$7: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$8: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2$$anonfun$apply$9: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Reader$$anonfun$load$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$10: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11$$anonfun$apply$12: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2$$anonfun$apply$11: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$emitXML$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$phantm$util$API$Writer$$typeToXML$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API$Writer$$anonfun$reduceFT$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$1$$anonfun$apply$mcV$sp$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$2$$anonfun$apply$mcV$sp$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.DumpCollector$$anonfun$3$$anonfun$apply$mcV$sp$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$getAST$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1$$anonfun$apply$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$importIncludes$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.IncludeResolver$$anonfun$phantm$util$IncludeResolver$$astFromScalar$1$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3$$anonfun$apply$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitAll$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Reporter$$anonfun$emitNormal$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$4: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$importToEnv$5: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toMap$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toScalarMap$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$toTypeMap$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$unser$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$1: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$2: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$3: apply(Ljava/lang/Object;)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.Unserializer$$anonfun$uValueToType$4: apply(Ljava/lang/Object;)