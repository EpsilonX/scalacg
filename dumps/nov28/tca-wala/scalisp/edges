ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$10: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$11: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$12: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$13: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$3: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$4: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$5: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$6: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$7: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$8: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$9: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Builtins$$anonfun$builtins$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Interpreter$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Interpreter$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Interpreter$$anonfun$eval$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Interpreter$$anonfun$eval$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$exp$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$exp$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$exp$3: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$exp$4: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$exp$5: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$exp$6: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$exp$7: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$hexInteger$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$integer$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$list$1$$anonfun$apply$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$list$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$list$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$literal$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$program$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$quote$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$quote$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$real$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$real$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$real$2: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$replacement$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$replacement$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$$anonfun$token$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: handleWhiteSpace(Ljava/lang/CharSequence;I)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: opt(Lscala/Function0;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: Parser(Lscala/Function1;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: regex(Lscala/util/matching/Regex;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: rep1(Lscala/Function0;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: rep1(Lscala/Function0;Lscala/Function0;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: scala$util$parsing$combinator$RegexParsers$_setter_$whiteSpace_$eq(Lscala/util/matching/Regex;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: skipWhitespace()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: success(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.LispParser$: whiteSpace()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.MySeq$$anonfun$allLong$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.MySeq$$anonfun$toDouble$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.MySeq$$anonfun$toLong$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.MySeq.$anonfun: apply(e: T)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Preprocessor$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Preprocessor$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Preprocessor$$anonfun$process$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$main$1: apply()
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$main$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$main$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.Scalisp$$anonfun$main$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$10: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$11: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$8: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$9: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$isFunction$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$process$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$process$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$process$3: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$process$4: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$process$5: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$process$6: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$process$7: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$stringify$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$usedInFunction$1: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.ScalispCompiler$$anonfun$usedInFunction$2: apply(Ljava/lang/Object;)
ca.uwaterloo.scalacg.Library: blob() ===> Scalisp.StringsCompleter$$anonfun$complete$1: apply(Ljava/lang/Object;)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$10: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$10: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$19: Double,x$20: Double)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$11: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$11: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$21: Double,x$22: Double)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$12: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$12: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$23: Double,x$24: Double)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$13: apply(Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x0$5: Any)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$1: Long,x$2: Long)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$3: Double,x$4: Double)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$3: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$5: Long,x$6: Long)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$4: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$7: Double,x$8: Double)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$5: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$5: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$9: Long,x$10: Long)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$6: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$11: Double,x$12: Double)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$7: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$7: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$13: Long,x$14: Long)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$8: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$8: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$15: Double,x$16: Double)
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$9: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$9: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun.$anonfun: apply(x$17: Double,x$18: Double)
Scalisp.Builtins$$anonfun$builtins$1: applyOrElse(Ljava/lang/Object;Lscala/Function1;) ===> Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1)
Scalisp.Builtins$$anonfun$builtins$1: isDefinedAt(Ljava/lang/Object;) ===> Scalisp.Builtins.$anonfun: isDefinedAt(x1: String)
Scalisp.Builtins$: <clinit>() ===> Scalisp.Builtins: <init>()
Scalisp.Builtins.$anonfun.$anonfun: apply(x$11: Double,x$12: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$6: apply$mcDDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$13: Long,x$14: Long) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$7: apply$mcJJJ$sp(JJ)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$15: Double,x$16: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$8: apply$mcDDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$17: Double,x$18: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$9: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$19: Double,x$20: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$10: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$1: Long,x$2: Long) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$1: apply$mcJJJ$sp(JJ)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$21: Double,x$22: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$11: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$23: Double,x$24: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$12: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$3: Double,x$4: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$2: apply$mcDDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$5: Long,x$6: Long) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$3: apply$mcJJJ$sp(JJ)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$7: Double,x$8: Double) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$4: apply$mcDDD$sp(DD)
Scalisp.Builtins.$anonfun.$anonfun: apply(x$9: Long,x$10: Long) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$5: apply$mcJJJ$sp(JJ)
Scalisp.Builtins.$anonfun: apply(x0$4: Any,x1$1: Any) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$10: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun: apply(x0$4: Any,x1$1: Any) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$11: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun: apply(x0$4: Any,x1$1: Any) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$12: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun: apply(x0$4: Any,x1$1: Any) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$9: apply$mcZDD$sp(DD)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Builtins$$anonfun$builtins$1$$anonfun$applyOrElse$13: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Interpreter$$anonfun$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Interpreter$$anonfun$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Interpreter$$anonfun$eval$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Interpreter$$anonfun$eval$3: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$hexInteger$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$integer$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$literal$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$quote$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$real$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$real$2$$anonfun$apply$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$replacement$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.LispParser$$anonfun$token$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq$$anonfun$allLong$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq$$anonfun$toDouble$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq$$anonfun$toLong$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq.$anonfun: apply(e: T)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq: allLong()
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq: eval(env: Scalisp.Env)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq: toDouble()
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.MySeq: toLong()
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Preprocessor$$anonfun$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Preprocessor$$anonfun$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Preprocessor$$anonfun$process$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Scalisp$$anonfun$main$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Scalisp$$anonfun$main$3: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.Scalisp$$anonfun$main$4: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$10: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$11: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$3: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$4: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$5: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$6: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$7: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$8: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$9: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$isFunction$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$process$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$process$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$process$3: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$process$4: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$process$5: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$process$6: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$process$7: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$stringify$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$usedInFunction$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler$$anonfun$usedInFunction$2: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Builtins.$anonfun: applyOrElse([A1 <: String, B1 >: Any]x1: A1,default: A1 => B1) ===> Scalisp.StringsCompleter$$anonfun$complete$1: apply(Ljava/lang/Object;)
Scalisp.Builtins.$anonfun: isDefinedAt(x1: String) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Builtins.$anonfun: isDefinedAt(x1: String) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Builtins.$anonfun: isDefinedAt(x1: String) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Builtins.$anonfun: isDefinedAt(x1: String) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Builtins: compare(op: Double, Double) ===> Scalisp.MySeq: eval(env: Scalisp.Env)
Scalisp.Builtins: compare(op: Double, Double) ===> Scalisp.MySeq: toDouble()
Scalisp.Env: apply(k: String) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Env: apply(k: String) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Env: apply(k: String) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Env: apply(k: String) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Env: getFunction(k: String,arity: Int) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Env: getFunction(k: String,arity: Int) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Env: getFunction(k: String,arity: Int) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Env: getFunction(k: String,arity: Int) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Env: update(k: String,v: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Env: update(k: String,v: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Env: update(k: String,v: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Env: update(k: String,v: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Function: equals(x$1: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Function: equals(x$1: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Function: equals(x$1: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Function: equals(x$1: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Function: productElement(x$1: Int) ===> Scalisp.Env: toString()
Scalisp.Function: productElement(x$1: Int) ===> Scalisp.Function: toString()
Scalisp.Function: productElement(x$1: Int) ===> Scalisp.FunctionTable: toString()
Scalisp.Function: productElement(x$1: Int) ===> Scalisp.Literal: toString()
Scalisp.Function: productElement(x$1: Int) ===> Scalisp.Replace: toString()
Scalisp.Function: productElement(x$1: Int) ===> Scalisp.ScalispCompiler.UsedIn: toString()
Scalisp.Helper$: <clinit>() ===> Scalisp.Helper: <init>()
Scalisp.Interpreter$$anonfun$1: apply(Ljava/lang/Object;) ===> Scalisp.Interpreter.$anonfun: apply(x0$1: Any)
Scalisp.Interpreter$$anonfun$2: apply(Ljava/lang/Object;) ===> Scalisp.Interpreter.$anonfun: apply(x0$2: Any)
Scalisp.Interpreter$$anonfun$eval$2: apply(Ljava/lang/Object;) ===> Scalisp.Interpreter.$anonfun: apply(x0$3: String, Any)
Scalisp.Interpreter$$anonfun$eval$3: apply(Ljava/lang/Object;) ===> Scalisp.Interpreter.$anonfun: apply(x0$4: String, Any)
Scalisp.Interpreter$: <clinit>() ===> Scalisp.Interpreter: <init>()
Scalisp.Interpreter: eval(expression: Any,environment: Scalisp.Env) ===> Scalisp.Builtins$$anonfun$builtins$1: isDefinedAt(Ljava/lang/Object;)
Scalisp.Interpreter: eval(expression: Any,environment: Scalisp.Env) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Interpreter: eval(expression: Any,environment: Scalisp.Env) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Interpreter: eval(expression: Any,environment: Scalisp.Env) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Interpreter: eval(expression: Any,environment: Scalisp.Env) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.LispParser$$anonfun$exp$1: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$exp$2: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$exp$3: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$exp$4: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$exp$5: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$exp$6: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$exp$7: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$hexInteger$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$$anonfun$hexInteger$1: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun: apply(n: String)
Scalisp.LispParser$$anonfun$integer$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$$anonfun$integer$1: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun: apply(n: String)
Scalisp.LispParser$$anonfun$list$1$$anonfun$apply$1: apply() ===> Scalisp.LispParser.$anonfun.$anonfun: apply()
Scalisp.LispParser$$anonfun$list$1: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$list$2: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$literal$1: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun: apply(l: String)
Scalisp.LispParser$$anonfun$program$1: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$quote$1: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$quote$2: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun: apply(e: Any)
Scalisp.LispParser$$anonfun$real$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$$anonfun$real$1: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun: apply(d: String)
Scalisp.LispParser$$anonfun$real$2$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$$anonfun$real$2$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun.$anonfun: apply(d: String)
Scalisp.LispParser$$anonfun$real$2: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$replacement$1: apply() ===> Scalisp.LispParser.$anonfun: apply()
Scalisp.LispParser$$anonfun$replacement$2: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun: apply(t: String)
Scalisp.LispParser$$anonfun$token$1: apply(Ljava/lang/Object;) ===> Scalisp.LispParser.$anonfun: apply(n: String)
Scalisp.LispParser$: <clinit>() ===> Scalisp.LispParser: <init>()
Scalisp.LispParser$: handleWhiteSpace(Ljava/lang/CharSequence;I) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: literal(Ljava/lang/String;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: opt(Lscala/Function0;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: parse(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: Parser(Lscala/Function1;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: phrase(Lscala/util/parsing/combinator/Parsers$Parser;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: regex(Lscala/util/matching/Regex;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: rep(Lscala/Function0;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: rep1(Lscala/Function0;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: rep1(Lscala/Function0;Lscala/Function0;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar() ===> Scalisp.LispParser$: scala$util$parsing$combinator$Parsers$$lastNoSuccessVar$lzycompute()
Scalisp.LispParser$: scala$util$parsing$combinator$RegexParsers$$super$phrase(Lscala/util/parsing/combinator/Parsers$Parser;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: skipWhitespace() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: stringLiteral() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: success(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser$: wholeNumber() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.LispParser.$anonfun: apply() ===> Scalisp.LispParser$: literal(Ljava/lang/String;)
Scalisp.LispParser.$anonfun: apply() ===> Scalisp.LispParser$: regex(Lscala/util/matching/Regex;)
Scalisp.LispParser.$anonfun: apply() ===> Scalisp.LispParser$: rep(Lscala/Function0;)
Scalisp.LispParser: hexInteger() ===> Scalisp.LispParser$: regex(Lscala/util/matching/Regex;)
Scalisp.LispParser: integer() ===> Scalisp.LispParser$: wholeNumber()
Scalisp.LispParser: list() ===> Scalisp.LispParser$: literal(Ljava/lang/String;)
Scalisp.LispParser: literal() ===> Scalisp.LispParser$: stringLiteral()
Scalisp.LispParser: parse(line: String) ===> Scalisp.LispParser$: parseAll(Lscala/util/parsing/combinator/Parsers$Parser;Ljava/lang/CharSequence;)
Scalisp.LispParser: program() ===> Scalisp.LispParser$: rep(Lscala/Function0;)
Scalisp.LispParser: quote() ===> Scalisp.LispParser$: literal(Ljava/lang/String;)
Scalisp.LispParser: real() ===> Scalisp.LispParser$: regex(Lscala/util/matching/Regex;)
Scalisp.LispParser: replacement() ===> Scalisp.LispParser$: literal(Ljava/lang/String;)
Scalisp.LispParser: token() ===> Scalisp.LispParser$: regex(Lscala/util/matching/Regex;)
Scalisp.Literal: equals(x$1: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Literal: equals(x$1: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Literal: equals(x$1: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Literal: equals(x$1: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Literal: productElement(x$1: Int) ===> Scalisp.Env: toString()
Scalisp.Literal: productElement(x$1: Int) ===> Scalisp.Function: toString()
Scalisp.Literal: productElement(x$1: Int) ===> Scalisp.FunctionTable: toString()
Scalisp.Literal: productElement(x$1: Int) ===> Scalisp.Literal: toString()
Scalisp.Literal: productElement(x$1: Int) ===> Scalisp.Replace: toString()
Scalisp.Literal: productElement(x$1: Int) ===> Scalisp.ScalispCompiler.UsedIn: toString()
Scalisp.MySeq$$anonfun$allLong$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq$$anonfun$allLong$1: apply(Ljava/lang/Object;) ===> Scalisp.MySeq.$anonfun: apply(x0$3: T)
Scalisp.MySeq$$anonfun$toDouble$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq$$anonfun$toDouble$1: apply(Ljava/lang/Object;) ===> Scalisp.MySeq.$anonfun: apply(x0$1: T)
Scalisp.MySeq$$anonfun$toLong$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq$$anonfun$toLong$1: apply(Ljava/lang/Object;) ===> Scalisp.MySeq.$anonfun: apply(x0$2: T)
Scalisp.MySeq.$anonfun: <init>() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq.$anonfun: apply(e: T) ===> Scalisp.Interpreter: eval(expression: Any,environment: Scalisp.Env)
Scalisp.MySeq.$anonfun: apply(x0$1: T) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq.$anonfun: apply(x0$2: T) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq: allLong() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq: allLong() ===> Scalisp.MySeq.$anonfun: <init>()
Scalisp.MySeq: eval(env: Scalisp.Env) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq: eval(env: Scalisp.Env) ===> Scalisp.MySeq.$anonfun: <init>()
Scalisp.MySeq: toDouble() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq: toDouble() ===> Scalisp.MySeq.$anonfun: <init>()
Scalisp.MySeq: toDouble() ===> Scalisp.TypeError: <init>(s: String)
Scalisp.MySeq: toLong() ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.MySeq: toLong() ===> Scalisp.MySeq.$anonfun: <init>()
Scalisp.MySeq: toLong() ===> Scalisp.TypeError: <init>(s: String)
Scalisp.Preprocessor$$anonfun$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Preprocessor$$anonfun$1: apply(Ljava/lang/Object;) ===> Scalisp.Preprocessor.$anonfun: apply(x0$1: Any)
Scalisp.Preprocessor$$anonfun$2: apply(Ljava/lang/Object;) ===> Scalisp.Preprocessor.$anonfun: apply(x0$3: String, Any)
Scalisp.Preprocessor$$anonfun$process$1: apply(Ljava/lang/Object;) ===> Scalisp.Preprocessor.$anonfun: apply(x0$2: Any)
Scalisp.Preprocessor$: <clinit>() ===> Scalisp.Preprocessor: <init>()
Scalisp.Preprocessor.$anonfun: apply(x0$1: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Preprocessor.$anonfun: apply(x0$1: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Preprocessor.$anonfun: apply(x0$1: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Preprocessor.$anonfun: apply(x0$1: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Preprocessor.$anonfun: apply(x0$2: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Preprocessor.$anonfun: apply(x0$2: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Preprocessor.$anonfun: apply(x0$2: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Preprocessor.$anonfun: apply(x0$2: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Replace: equals(x$1: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Replace: equals(x$1: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Replace: equals(x$1: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Replace: equals(x$1: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Replace: productElement(x$1: Int) ===> Scalisp.Env: toString()
Scalisp.Replace: productElement(x$1: Int) ===> Scalisp.Function: toString()
Scalisp.Replace: productElement(x$1: Int) ===> Scalisp.FunctionTable: toString()
Scalisp.Replace: productElement(x$1: Int) ===> Scalisp.Literal: toString()
Scalisp.Replace: productElement(x$1: Int) ===> Scalisp.Replace: toString()
Scalisp.Replace: productElement(x$1: Int) ===> Scalisp.ScalispCompiler.UsedIn: toString()
Scalisp.Scalisp$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Scalisp$$anonfun$1: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Scalisp.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean])
Scalisp.Scalisp$$anonfun$2: apply(Ljava/lang/Object;Ljava/lang/Object;) ===> Scalisp.Scalisp.$anonfun: apply(x0$1: String,x1$1: org.clapper.argot.Parameter[String])
Scalisp.Scalisp$$anonfun$main$1: apply() ===> Scalisp.Scalisp.$anonfun: apply()
Scalisp.Scalisp$$anonfun$main$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Scalisp$$anonfun$main$2: apply(Ljava/lang/Object;) ===> Scalisp.Scalisp.$anonfun: apply(x$1: String)
Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> Scalisp.Scalisp.$anonfun.$anonfun: apply(x$2: Char)
Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.Scalisp$$anonfun$main$3$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> Scalisp.Scalisp.$anonfun.$anonfun: apply(x$3: Char)
Scalisp.Scalisp$$anonfun$main$3: apply(Ljava/lang/Object;) ===> Scalisp.Scalisp.$anonfun: apply(x0$2: String)
Scalisp.Scalisp$$anonfun$main$4: apply(Ljava/lang/Object;) ===> Scalisp.Scalisp.$anonfun: apply(x0$3: String)
Scalisp.Scalisp$: <clinit>() ===> Scalisp.Scalisp: <init>()
Scalisp.Scalisp.$anonfun: apply(x$1: String) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Scalisp.$anonfun: apply(x$1: String) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Scalisp.$anonfun: apply(x$1: String) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Scalisp.$anonfun: apply(x$1: String) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Scalisp.$anonfun: apply(x0$2: String) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.Scalisp.$anonfun: apply(x0$2: String) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.Scalisp.$anonfun: apply(x0$2: String) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.Scalisp.$anonfun: apply(x0$2: String) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.Scalisp: main(args: Array[String]) ===> Scalisp.Scalisp: main(args: Array[String])
Scalisp.ScalispCompiler$$anonfun$10: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.ScalispCompiler$$anonfun$10: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(n: String)
Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$1: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun.$anonfun: apply(x$5: Int)
Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.ScalispCompiler$$anonfun$11$$anonfun$apply$2: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun.$anonfun: apply(x$6: Int)
Scalisp.ScalispCompiler$$anonfun$11: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x0$4: Int, String)
Scalisp.ScalispCompiler$$anonfun$1: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x$1: String)
Scalisp.ScalispCompiler$$anonfun$2: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$3: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.ScalispCompiler$$anonfun$3: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x$2: String)
Scalisp.ScalispCompiler$$anonfun$4: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$5: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.ScalispCompiler$$anonfun$5: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x$3: String)
Scalisp.ScalispCompiler$$anonfun$6: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x0$1: Any)
Scalisp.ScalispCompiler$$anonfun$7: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x$4: String)
Scalisp.ScalispCompiler$$anonfun$8: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x0$2: String, Any)
Scalisp.ScalispCompiler$$anonfun$9: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(x0$3: Any)
Scalisp.ScalispCompiler$$anonfun$isFunction$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.ScalispCompiler$$anonfun$isFunction$1: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$process$1: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$process$2: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$process$3: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$process$4: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$process$5: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$process$6: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$process$7: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$stringify$1: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$usedInFunction$1: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(e: Any)
Scalisp.ScalispCompiler$$anonfun$usedInFunction$2: apply(Ljava/lang/Object;) ===> Scalisp.ScalispCompiler.$anonfun: apply(xo: Option[Scalisp.ScalispCompiler.UsedIn])
Scalisp.ScalispCompiler$: <clinit>() ===> Scalisp.ScalispCompiler: <init>()
Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.ScalispCompiler.UsedIn: productElement(x$1: Int) ===> Scalisp.Env: toString()
Scalisp.ScalispCompiler.UsedIn: productElement(x$1: Int) ===> Scalisp.Function: toString()
Scalisp.ScalispCompiler.UsedIn: productElement(x$1: Int) ===> Scalisp.FunctionTable: toString()
Scalisp.ScalispCompiler.UsedIn: productElement(x$1: Int) ===> Scalisp.Literal: toString()
Scalisp.ScalispCompiler.UsedIn: productElement(x$1: Int) ===> Scalisp.Replace: toString()
Scalisp.ScalispCompiler.UsedIn: productElement(x$1: Int) ===> Scalisp.ScalispCompiler.UsedIn: toString()
Scalisp.ScalispCompiler: isFunction(name: String,body: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.ScalispCompiler: isFunction(name: String,body: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.ScalispCompiler: isFunction(name: String,body: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.ScalispCompiler: isFunction(name: String,body: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.Env: toString()
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.Function: toString()
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.FunctionTable: toString()
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.Literal: toString()
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.Replace: toString()
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.ScalispCompiler: process(exp: Any,indent: String) ===> Scalisp.ScalispCompiler.UsedIn: toString()
Scalisp.ScalispCompiler: stringify(exp: Any) ===> Scalisp.Env: toString()
Scalisp.ScalispCompiler: stringify(exp: Any) ===> Scalisp.Function: toString()
Scalisp.ScalispCompiler: stringify(exp: Any) ===> Scalisp.FunctionTable: toString()
Scalisp.ScalispCompiler: stringify(exp: Any) ===> Scalisp.Literal: toString()
Scalisp.ScalispCompiler: stringify(exp: Any) ===> Scalisp.Replace: toString()
Scalisp.ScalispCompiler: stringify(exp: Any) ===> Scalisp.ScalispCompiler.UsedIn: toString()
Scalisp.ScalispCompiler: usedInFunction(name: String,exp: Any) ===> Scalisp.Function: equals(x$1: Any)
Scalisp.ScalispCompiler: usedInFunction(name: String,exp: Any) ===> Scalisp.Literal: equals(x$1: Any)
Scalisp.ScalispCompiler: usedInFunction(name: String,exp: Any) ===> Scalisp.Replace: equals(x$1: Any)
Scalisp.ScalispCompiler: usedInFunction(name: String,exp: Any) ===> Scalisp.ScalispCompiler.UsedIn: equals(x$1: Any)
Scalisp.StringsCompleter$$anonfun$complete$1: apply(Ljava/lang/Object;) ===> ca.uwaterloo.scalacg.Library: blob()
Scalisp.StringsCompleter$$anonfun$complete$1: apply(Ljava/lang/Object;) ===> Scalisp.StringsCompleter.$anonfun: apply(m: String)