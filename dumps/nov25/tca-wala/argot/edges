ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun.$anonfun: apply(name: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(args: Seq[Int])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(key: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(name: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(opt: org.clapper.argot.CommandLineOption[_])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(p: org.clapper.argot.Parameter[_])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(s: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$13: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$14: String,x$15: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$16: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$17: String,x$18: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$20: String,x$21: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$22: org.clapper.argot.Parameter[_])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$23: org.clapper.argot.Parameter[_])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$24: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$25: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$26: org.clapper.argot.Parameter[_])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$27: org.clapper.argot.Parameter[_])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotParser.$anonfun: apply(x$28: org.clapper.argot.Parameter[_])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest.$anonfun.$anonfun: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest.$anonfun: apply(onOff: Boolean,opt: org.clapper.argot.FlagOption[Int])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[Int])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.CommandLineArgument[String])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.MultiValueOption[String])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.ArgotTest.$anonfun: apply(s: String,opt: org.clapper.argot.Parameter[java.io.File])
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.Conversions.$anonfun: apply()
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption.$anonfun: apply(s: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption.$anonfun: apply(x$10: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption.$anonfun: apply(x$4: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption.$anonfun: apply(x$5: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption.$anonfun: apply(x$6: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.FlagOption.$anonfun: apply(x$7: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.MultiValueOption.$anonfun: apply(x$3: String)
ca.uwaterloo.scalacg.Library: blob() ===> org.clapper.argot.SingleValueOption.$anonfun: apply(x$2: String)


org.clapper.argot.ArgotException: <init>(message: String,cause: Option[Throwable]) ===> org.clapper.argot.ArgotException: cause()
org.clapper.argot.ArgotException: <init>(msg: String,cause: Throwable) ===> org.clapper.argot.ArgotException: <init>(message: String,cause: Option[Throwable])

org.clapper.argot.ArgotParser: parseArgList(a: List[String]) ===> org.clapper.argot.ArgotParser: parseArgList(a: List[String])
org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> org.clapper.argot.ArgotParser: parseNext(a: List[String],paramSpecs: List[org.clapper.argot.Parameter[_]])

org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.CommandLineArgument: equals(o: Any) ===> org.clapper.argot.Parameter: key()

org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.CommandLineOption: key()
org.clapper.argot.CommandLineArgument: hashCode() ===> org.clapper.argot.Parameter: key()

org.clapper.argot.Conversions: parseNum([T]s: String,parse: ) ===> org.clapper.argot.ArgotParser.$anonfun: apply()

org.clapper.argot.CommandLineOption: $init$() ===> org.clapper.argot.CommandLineArgument: $init$()
org.clapper.argot.HasValue: $init$() ===> org.clapper.argot.CommandLineArgument: $init$()
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.CommandLineArgument: $init$()
org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.HasValue: $init$()
org.clapper.argot.MultiValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.MultiValueOption[T]) ===> org.clapper.argot.MultiValueOption: names()
org.clapper.argot.Parameter: $init$() ===> org.clapper.argot.CommandLineArgument: $init$()
org.clapper.argot.Parameter: $init$() ===> org.clapper.argot.HasValue: $init$()
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.CommandLineArgument: $init$()
org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.HasValue: $init$()

org.clapper.argot.SingleValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.SingleValueOption[T]) ===> org.clapper.argot.SingleValueOption: names()