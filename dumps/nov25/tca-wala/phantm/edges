ca.uwaterloo.scalacg.Library: blob() ===> phantm.ast.STToAST.$anonfun: apply(c: phantm.parser.ParseNode)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.helpers.STGraph.$anonfun: apply(c: phantm.parser.ParseNode)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: action_table()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: do_action(act_num: Int,parser: java_cup.runtime.lr_parser,stack: java.util.Stack,top: Int)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: EOF_sym()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: error_sym()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: init_actions()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: production_table()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: reduce_table()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: report_error(message: String,info: Any)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: report_fatal_error(message: String,info: Any)
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: start_production()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: start_state()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.CUPParser: user_init()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.Lexer: next_token()
ca.uwaterloo.scalacg.Library: blob() ===> phantm.parser.Parser.$anonfun: apply(c: phantm.parser.Comment)
phantm.annotations.SourceAnnotations.Parser: getFunctionTypes(comment: String) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(comment: String)
phantm.annotations.SourceAnnotations.Parser: isAnnotated(comment: String) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(comment: String)
phantm.ast.ASTSimpleTraversal: visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext) ===> phantm.ast.ASTSimpleTraversal.$anonfun: apply(tr: phantm.ast.Trees.Tree)
phantm.ast.ASTTraversal: traverse0() ===> phantm.ast.ASTTraversal: traverse0()
phantm.ast.STToAST.$anonfun: apply(n: Int) ===> phantm.ast.Trees.VariableVariable: <init>(name: phantm.ast.Trees.Expression)
phantm.ast.STToAST.$anonfun: apply(n: Int) ===> phantm.util.Positional: setPos(p: phantm.util.Positional)
phantm.ast.STToAST: accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]) ===> phantm.ast.STToAST: accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]])
phantm.cfg.ASTToCFG: stmts(sts: List[phantm.ast.Trees.Statement],cont: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement]) ===> phantm.cfg.ASTToCFG: stmts(sts: List[phantm.ast.Trees.Statement],cont: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement])
phantm.cfg.Trees.FuncRef: <init>(id: phantm.ast.Trees.NSIdentifier) ===> phantm.cfg.Trees.FuncRef: id()
phantm.dataflow.AnalysisAlgorithm.$anonfun: apply() ===> phantm.types.BaseTypeEnvironment: copy()
phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S]) ===> phantm.types.BaseTypeEnvironment: union(e: phantm.types.TypeEnvironment)
phantm.dataflow.AnalysisAlgorithm.$anonfun: apply(e: phantm.cfg.EdgeImp[S]) ===> phantm.types.TypeEnvironment: union(e: phantm.types.TypeEnvironment)
phantm.dataflow.AnalysisAlgorithm: computeFixpoint(ctx: phantm.phases.PhasesContext) ===> phantm.types.TypeEnvironment: checkMonotonicity(vrtx: phantm.cfg.VertexImp[phantm.cfg.Trees.Statement],e: phantm.types.TypeEnvironment,ctx: phantm.phases.PhasesContext,inEdges: Iterable[phantm.cfg.Trees.Statement, phantm.types.TypeEnvironment)
phantm.helpers.Lint: generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext) ===> phantm.parser.CUPParser: <init>(s: java_cup.runtime.Scanner)
phantm.helpers.Lint: generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext) ===> phantm.parser.Lexer: <init>(in: java.io.Reader)
phantm.helpers.Lint: generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext) ===> phantm.parser.Lexer: setFileName(fileName: String)
phantm.helpers.Main: handle_options(opts: List[String]) ===> phantm.helpers.Main: handle_options(opts: List[String])
phantm.helpers.Tokenizer: generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext) ===> phantm.parser.Lexer: <init>(in: java.io.Reader)
phantm.helpers.Tokenizer: generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext) ===> phantm.parser.Lexer: next_token()
phantm.helpers.Tokenizer: generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext) ===> phantm.parser.Lexer: setFileName(fileName: String)
phantm.Main: handleArgs(args: List[String]) ===> phantm.Main: handleArgs(args: List[String])
phantm.parser.Parser: parse() ===> phantm.parser.CUPParser: <init>(s: java_cup.runtime.Scanner)
phantm.parser.Parser: parse() ===> phantm.parser.Lexer: <init>(in: java.io.Reader)
phantm.parser.Parser: parse() ===> phantm.parser.Lexer: setFileName(fileName: String)
phantm.phases.CFGGenerator: <init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree) ===> phantm.phases.CFGGenerator: initCtx()
phantm.phases.CollectSymbols.$anonfun: apply(c: phantm.ast.Trees.ClassConstantDecl) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(comment: String)
phantm.phases.CollectSymbols.$anonfun: apply(p: phantm.ast.Trees.PropertyDecl) ===> phantm.annotations.SourceAnnotations.Parser.$anonfun: apply(comment: String)
phantm.phases.CollectSymbols: checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional) ===> phantm.types.Type: toText(e: phantm.types.TypeEnvironment)
phantm.phases.PhasesRunner.$anonfun: apply() ===> phantm.phases.PhasesRunner.$anonfun.$anonfun: <init>()
phantm.phases.TypeFlowAnalysis: <init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree) ===> phantm.phases.TypeFlowAnalysis: initCtx()
phantm.symbols.ClassSymbol: lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]) ===> phantm.symbols.ClassSymbol: lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol])
phantm.types.TArray.$anonfun: apply() ===> phantm.types.TArray.$anonfun.$anonfun: <init>()
phantm.types.TArray.$anonfun: apply(x: phantm.types.ArrayKey, phantm.types.Type) ===> phantm.types.Type: toText(e: phantm.types.TypeEnvironment)
phantm.types.TArray: <init>(entries: scala.collection.immutable.Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type) ===> phantm.types.TArray: globalInt()
phantm.types.TArray: <init>(entries: scala.collection.immutable.Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type) ===> phantm.types.TArray: globalString()
phantm.types.TArray: toText(env: phantm.types.TypeEnvironment) ===> phantm.types.Type: toText(e: phantm.types.TypeEnvironment)
phantm.types.TUnion.$anonfun: apply(t: phantm.types.Type) ===> phantm.types.Type: toText(e: phantm.types.TypeEnvironment)
phantm.types.TUnion: <init>(types: scala.collection.immutable.Set[phantm.types.Type]) ===> phantm.types.TUnion: types()
phantm.types.TypeTransferFunction.$anonfun: apply(i: Int) ===> phantm.types.TypeTransferFunction: leq(t1: phantm.types.Type,t2: phantm.types.Type)
phantm.types.TypeTransferFunction.$anonfun: apply(i: Int) ===> phantm.types.TypeTransferFunction: typeFromSV(sv: phantm.cfg.Trees.SimpleValue)
phantm.types.TypeTransferFunction.$anonfun: apply(x$58: phantm.types.FunctionType) ===> phantm.types.TFunctionAny: ret()
phantm.types.TypeTransferFunction: backPatchType(sv: phantm.cfg.Trees.SimpleValue,typ: phantm.types.Type) ===> phantm.types.TypeTransferFunction: backPatchType(sv: phantm.cfg.Trees.SimpleValue,typ: phantm.types.Type)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(msg: String,pos: phantm.util.Positional)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$1: String,x$2: phantm.util.Positional)
phantm.types.TypeTransferFunction: error(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$3: String,x$4: phantm.util.Positional)
phantm.types.TypeTransferFunction: getCheckType(sv: phantm.cfg.Trees.SimpleValue,ct: phantm.types.Type,hasTmp: Boolean) ===> phantm.types.TypeTransferFunction: getCheckType(sv: phantm.cfg.Trees.SimpleValue,ct: phantm.types.Type,hasTmp: Boolean)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeFlowAnalyzer.$anonfun: apply(msg: String,pos: phantm.util.Positional)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$1: String,x$2: phantm.util.Positional)
phantm.types.TypeTransferFunction: notice(msg: String,pos: phantm.util.Positional) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$3: String,x$4: phantm.util.Positional)
phantm.types.TypeTransferFunction: simpleText(t: phantm.types.Type) ===> phantm.types.Type: toText(e: phantm.types.TypeEnvironment)
phantm.types.TypeTransferFunction: typesDiff(et: phantm.types.Type,vt: phantm.types.Type) ===> phantm.types.Type: toText(e: phantm.types.TypeEnvironment)
phantm.util.API.Reader.APIPos: <init>(elem: scala.xml.Node) ===> phantm.util.API.Reader.APIPos: elem()
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TArray.$anonfun: apply(x$5: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction.$anonfun: apply(f: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction.$anonfun: apply(t: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$14: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$17: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$20: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.types.TypeTransferFunction.$anonfun: apply(x$50: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API.Writer.$anonfun.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.util.API.Writer: typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type) ===> phantm.util.API.Writer.$anonfun.$anonfun: apply(t: phantm.types.Type)
phantm.util.DumpCollector.$anonfun: apply() ===> phantm.util.DumpCollector.$anonfun.$anonfun: <init>()
phantm.util.DumpCollector.$anonfun: apply() ===> phantm.util.DumpCollector: content()
phantm.util.DumpCollector.$anonfun: apply() ===> phantm.util.DumpCollector: lineNr()
phantm.util.DumpCollector: <init>(path: String,ctx: phantm.phases.PhasesContext) ===> phantm.util.DumpCollector: ctx()
phantm.util.DumpCollector: <init>(path: String,ctx: phantm.phases.PhasesContext) ===> phantm.util.DumpCollector: path()
phantm.util.IncludeResolver: <init>(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext) ===> phantm.util.IncludeResolver: ast()
phantm.util.IncludeResolver: <init>(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext) ===> phantm.util.IncludeResolver: ctx()
phantm.util.JavaListIteratorWrapper: foreach(f: A => Unit) ===> phantm.helpers.ASTGraph.$anonfun: apply(c: Any)
phantm.util.Unserializer.$anonfun: apply(e: Int) ===> phantm.util.Unserializer: unser(r: Boolean)