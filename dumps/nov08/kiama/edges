org.kiama.example.oberon0.L0.c.CNegExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CGeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: <init>() ===> scala.runtime.AbstractPartialFunction: <init>()
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L3.c.CVoidType: <init>() ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CNeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.base.c.CEmptyStmt: <init>() ===> scala.Product: $init$()
org.kiama.example.iswim.secd.StringOps.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L0.c.CModExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L0.c.CGeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.COrExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CMulExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.COrExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L0.c.CInitDecl: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,e: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L1.c.CIfStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement) ===> scala.Product: $init$()
org.kiama.output.Side: <init>() ===> java.lang.Object: <init>()
org.kiama.output.LeftAssoc: <init>() ===> org.kiama.output.Side: <init>()
org.kiama.example.oberon0.L4.c.CIndexExp: <init>(array: org.kiama.example.oberon0.base.c.CExpression,index: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L0.c.CIdnExp: <init>(i: String) ===> org.kiama.example.oberon0.base.c.CExpression: <init>()
org.kiama.example.oberon0.L0.c.CAndExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: <init>() ===> scala.runtime.AbstractFunction0: <init>()
org.kiama.example.oberon0.L0.c.CSubExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L1.c.CWhileStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,stmt: org.kiama.example.oberon0.base.c.CStatement) ===> org.kiama.example.oberon0.base.c.CStatement: <init>()
org.kiama.example.oberon0.L0.c.CUnaryExpression: <init>() ===> org.kiama.example.oberon0.base.c.CExpression: <init>()
org.kiama.example.oberon0.L0.c.CAndExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.output.RightAssoc: <init>() ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String) ===> org.kiama.output.Infix: <init>(side: org.kiama.output.Side)
org.kiama.example.oberon0.L0.c.CTypeDef: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl) ===> org.kiama.example.oberon0.base.c.CDeclaration: <init>()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L4.c.PrettyPrinter.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.output.NonAssoc: <init>() ===> org.kiama.output.Side: <init>()
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L0.c.CModExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L3.c.CStrExp: <init>(s: String) ===> scala.Product: $init$()
org.kiama.example.iswim.secd.SECDBase.PrimValue: <init>(bdy: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) ===> org.kiama.example.iswim.secd.SECDBase.Value: <init>()
org.kiama.example.oberon0.L3.c.CAddrExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.output.Postfix: <init>() ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CLeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L3.c.CCall: <init>(s: String,ps: List[org.kiama.example.oberon0.base.c.CExpression]) ===> scala.Product: $init$()
org.kiama.output.Postfix: <init>() ===> org.kiama.output.Fixity: <init>()
org.kiama.example.oberon0.L0.c.CMulExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L3.c.CCall: <init>(s: String,ps: List[org.kiama.example.oberon0.base.c.CExpression]) ===> org.kiama.example.oberon0.base.c.CStatement: <init>()
org.kiama.example.oberon0.L0.Desugarer.$anonfun: <init>() ===> scala.runtime.AbstractFunction0: <init>()
org.kiama.example.oberon0.L1.c.CIfElseStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CGtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L1.c.CIfStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement) ===> org.kiama.example.oberon0.base.c.CStatement: <init>()
org.kiama.example.iswim.secd.IOOps.Write: <init>() ===> org.kiama.example.iswim.secd.SECDBase.Instruction: <init>()
org.kiama.output.RightAssoc: <init>() ===> org.kiama.output.Side: <init>()
org.kiama.example.oberon0.L0.c.CLeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L0.c.CLtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.output.LeftAssoc: <init>() ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CInitDecl: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,e: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.base.c.CDeclaration: <init>()
org.kiama.example.oberon0.L0.c.CAssignment: <init>(desig: org.kiama.example.oberon0.base.c.CExpression,exp: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.output.Prefix: <init>() ===> org.kiama.output.Fixity: <init>()
org.kiama.example.oberon0.L3.c.CDerefExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CEqExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L0.c.CDivExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L3.c.CDerefExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CUnaryExpression: <init>()
org.kiama.example.oberon0.L1.c.CWhileStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,stmt: org.kiama.example.oberon0.base.c.CStatement) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CAddExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String) ===> org.kiama.example.oberon0.base.c.CExpression: <init>()
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: <init>() ===> scala.runtime.AbstractFunction0: <init>()
org.kiama.example.oberon0.base.c.CEmptyStmt: <init>() ===> org.kiama.example.oberon0.base.c.CStatement: <init>()
org.kiama.example.oberon0.L3.c.CAddrType: <init>(basetype: org.kiama.example.oberon0.base.c.CType) ===> scala.Product: $init$()
org.kiama.example.oberon0.L3.c.CStrExp: <init>(s: String) ===> org.kiama.example.oberon0.base.c.CExpression: <init>()
org.kiama.example.oberon0.L4.c.CRecordType: <init>(fields: List[org.kiama.example.oberon0.base.c.CVarDecl]) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CNegExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CUnaryExpression: <init>()
org.kiama.example.oberon0.L4.c.CRecordType: <init>(fields: List[org.kiama.example.oberon0.base.c.CVarDecl]) ===> org.kiama.example.oberon0.base.c.CType: <init>()
org.kiama.example.oberon0.L0.c.CDivExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L3.c.CAddrType: <init>(basetype: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.base.c.CType: <init>()
org.kiama.example.oberon0.L0.c.CLtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CAddExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.output.Prefix: <init>() ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CSubExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.iswim.secd.IOOps.Read: <init>() ===> org.kiama.example.iswim.secd.SECDBase.Instruction: <init>()
org.kiama.example.oberon0.L0.c.CTypeDef: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl) ===> scala.Product: $init$()
org.kiama.example.oberon0.L4.c.CFieldExp: <init>(record: org.kiama.example.oberon0.base.c.CExpression,field: String) ===> scala.Product: $init$()
org.kiama.example.oberon0.L3.c.CAddrExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CUnaryExpression: <init>()
org.kiama.output.NonAssoc: <init>() ===> scala.Product: $init$()
org.kiama.example.oberon0.L3.c.CVoidType: <init>() ===> org.kiama.example.oberon0.base.c.CType: <init>()
org.kiama.example.oberon0.L0.c.CNeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: <init>(op: String)
org.kiama.example.oberon0.L0.c.CIdnExp: <init>(i: String) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CEqExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L1.c.CIfElseStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement) ===> org.kiama.example.oberon0.base.c.CStatement: <init>()
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L4.c.CFieldExp: <init>(record: org.kiama.example.oberon0.base.c.CExpression,field: String) ===> org.kiama.example.oberon0.base.c.CExpression: <init>()
org.kiama.example.oberon0.L4.c.CIndexExp: <init>(array: org.kiama.example.oberon0.base.c.CExpression,index: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.base.c.CExpression: <init>()
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: <init>() ===> scala.runtime.AbstractFunction1: <init>()
org.kiama.example.oberon0.L0.c.CGtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CNotExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> scala.Product: $init$()
org.kiama.example.oberon0.L0.c.CAssignment: <init>(desig: org.kiama.example.oberon0.base.c.CExpression,exp: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.base.c.CStatement: <init>()
org.kiama.example.oberon0.L0.c.CNotExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression) ===> org.kiama.example.oberon0.L0.c.CUnaryExpression: <init>()
org.kiama.example.iswim.secd.SECDBase.PrimValue: <init>(bdy: List[org.kiama.example.iswim.secd.SECDBase.Instruction]) ===> scala.Product: $init$()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CSubExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CVoidType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Write: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNegExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAssignment: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.Postfix: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrType: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.Prefix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.RightAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Read: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Read: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.LeftAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNotExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAndExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CDivExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CCall: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CModExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.Postfix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAddExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.NonAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.RightAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.Prefix: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Write: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNegExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CVoidType: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.NonAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CStrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.LeftAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: allRewritable(r: org.kiama.rewriting.Rewritable) ===> scala.collection.mutable.StringBuilder: apply(index: Int)
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.Prefix: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CVoidType: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CNegExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.LeftAssoc: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.Prefix: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CNotExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CNotExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.iswim.secd.IOOps.Read: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L4.c.CRecordType: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.Postfix: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CCall: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CNegExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.NonAssoc: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CStrExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CStrExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CVoidType: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.LeftAssoc: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CCall: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.iswim.secd.IOOps.Write: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CAddrType: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.iswim.secd.IOOps.Write: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.Postfix: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.NonAssoc: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.iswim.secd.IOOps.Read: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.RightAssoc: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CAddrType: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.output.RightAssoc: productPrefix()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L4.c.CRecordType: productIterator()
org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productIterator()
org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply()
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() ===> org.kiama.example.lambda2.Par: lambda()
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L1.TypeAnalyser: exptypeDef()
org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.util.ParserUtilities: result([T]v: )
org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply() ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: <init>()
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> scala.util.parsing.combinator.Parsers.Parser: ~>([U]q: )
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun.$anonfun: apply(nm: String) ===> org.kiama.example.iswim.driver.SECD: primTable()
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.L1.Parser: ifStatement()
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.output.PrettyPrinter: line()
org.kiama.util.ParserUtilities.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) ===> scala.collection.mutable.StringBuilder: toString()
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() ===> org.kiama.example.lambda2.Par: subsLam()
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field) ===> org.kiama.example.oberon0.base.c.CVarDecl: <init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.iswim.secd.StringOps.$anonfun: apply(c: Char) ===> scala.Char: toInt()
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: parent()
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.L0.Parser: expression()
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.util.CompilerBase.$anonfun: apply(arg: String) ===> org.kiama.example.oberon0.base.Driver: process(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter)
org.kiama.util.ParserUtilities.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) ===> scala.collection.mutable.StringBuilder: subSequence(start: Int,end: Int)
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field) ===> org.kiama.example.oberon0.L4.SymbolTable.Field: tipe()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L4.c.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode)
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L2.TypeAnalyser: exptypeDef()
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)
org.kiama.example.oberon0.L3.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply() ===> org.kiama.rewriting.Rewriter: rule(f: PartialFunction[Any,Any])
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field) ===> org.kiama.example.oberon0.L4.SymbolTable.Field: ident()
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Function1: apply(v1: T1)
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int)
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef) ===> org.kiama.example.oberon0.base.c.CVarDecl: <init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.L1.Parser: optelse()
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Function1: apply(v1: T1)
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.base.source.Block: stmts()
org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Function1: apply(v1: T1)
org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(check$ifrefutable$1: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.base.Analyser.$anonfun: apply(child: org.kiama.attribution.Attributable) ===> org.kiama.example.oberon0.L4.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef) ===> org.kiama.example.oberon0.base.source.IdnDef: ident()
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Tuple2: _2()
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode)
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L3.TypeAnalyser: exptypeDef()
org.kiama.example.oberon0.L1.Parser.$anonfun.$anonfun: apply() ===> org.kiama.util.WhitespaceParser: literal(s: String)
org.kiama.example.oberon0.base.c.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode)
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun.$anonfun: apply(x0$1: String,x1$1: scala.collection.immutable.Map[String,org.kiama.example.iswim.secd.SECDBase.Value]) ===> org.kiama.example.iswim.driver.SECD: primTable()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(i: Int) ===> scala.collection.LinearSeqOptimized: apply(n: Int)
org.kiama.util.ParserUtilities.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) ===> scala.collection.mutable.StringBuilder: length()
org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply()
org.kiama.example.lambda2.EagerSubst.$anonfun.$anonfun: apply() ===> org.kiama.example.lambda2.LazySubst: s()
org.kiama.example.lambda2.Reduce.$anonfun: apply() ===> org.kiama.example.lambda2.Par: beta()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo) ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: tipe()
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$24: PrettyPrinterBase.this.Doc,x$25: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$22: PrettyPrinterBase.this.Doc,x$23: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinterBase.DocOps: <@>(e: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.base.Analyser.$anonfun: apply(child: org.kiama.attribution.Attributable) ===> org.kiama.example.oberon0.L3.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: parent()
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.TypeAnalyser: tipe()
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> scala.util.parsing.combinator.Parsers.Parser: <~([U]q: )
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.SymbolTable: integerType()
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() ===> org.kiama.example.lambda2.Par: subsVar()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo) ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: ident()
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> org.kiama.util.WhitespaceParser: literal(s: String)
org.kiama.example.iswim.secd.StringOps.$anonfun: apply(c: Char) ===> scala.collection.mutable.StringBuilder: +=(x: Char)
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(nm: String) ===> org.kiama.example.iswim.driver.SECD: primTable()
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$4: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$4: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Function1: apply(v1: T1)
org.kiama.example.iswim.secd.StringOps.$anonfun: apply(c: Char) ===> scala.Char: ==(x: Char)
org.kiama.example.oberon0.L3.source.PrettyPrinter.$anonfun: apply(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type)
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.L1.Parser: elsif()
org.kiama.example.oberon0.base.Analyser.$anonfun: apply(child: org.kiama.attribution.Attributable) ===> org.kiama.example.oberon0.L0.NameAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Tuple2: _1()
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: parent()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(i: Int) ===> scala.Int: +(x: Int)
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration)
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(x$5: org.kiama.example.iswim.secd.SECDBase.FunctionSpec) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply() ===> org.kiama.output.PrettyPrinter: empty()
org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration)
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.$anonfun: apply() ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L3.TypeAnalyser: parammode(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int)
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.base.Analyser.$anonfun: apply(child: org.kiama.attribution.Attributable) ===> org.kiama.example.oberon0.L2.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() ===> org.kiama.example.lambda2.Par: subsApp()
org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun: apply() ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.oberon0.L1.Parser.$anonfun.$anonfun: apply() ===> org.kiama.example.oberon0.L1.Parser: whileStatement()
org.kiama.example.lambda2.EagerSubst.$anonfun.$anonfun.$anonfun: apply() ===> org.kiama.example.lambda2.LazySubst: s()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo) ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: mode()
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(x$5: org.kiama.example.iswim.secd.SECDBase.FunctionSpec) ===> org.kiama.example.iswim.secd.SECDBase: envir()
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.SymbolTable: booleanType()
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() ===> org.kiama.example.lambda2.Par: subsOpn()
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() ===> org.kiama.example.lambda2.Par: subsNum()
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.TypeAnalyser: exptypeDef()
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.Assignment: desig()
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement)
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.SymbolTable: booleanType()
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.SymbolTable: unknownType()
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement)
org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.SymbolTable: integerType()
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: parent()
org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(x0$3: String,x1$1: scala.collection.immutable.Map[String,org.kiama.example.iswim.secd.SECDBase.Value]) ===> org.kiama.example.iswim.driver.SECD: primTable()
org.kiama.example.oberon0.L0.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.L0.Parser: assignment()
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: index()
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L1.Parser.$anonfun.$anonfun: apply() ===> org.kiama.example.oberon0.base.Parser: statementSequence()
org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$22: PrettyPrinterBase.this.Doc,x$23: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun: apply() ===> org.kiama.example.oberon0.L0.Parser: expression()
org.kiama.example.oberon0.base.Analyser.$anonfun: apply(child: org.kiama.attribution.Attributable) ===> org.kiama.example.oberon0.L3.NameAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.lambda2.Reduce.$anonfun: apply() ===> org.kiama.example.lambda2.ReduceSubst: beta()
org.kiama.example.lambda2.ReduceSubst.$anonfun: apply() ===> org.kiama.example.lambda2.ParLazy: subsVar()
org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep$default$2()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.L1.Parser: elsifs()
org.kiama.rewriting.Rewriter.$anon: apply(t: Any) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: isDefinedAt(x1: Any)
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type)
org.kiama.util.ParserUtilities.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) ===> scala.collection.mutable.StringBuilder: charAt(index: Int)
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: parent()
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.SymbolTable: integerType()
org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply() ===> org.kiama.example.oberon0.L1.c.CIfStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement)
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.output.PrettyPrinterBase.$anonfun: apply(a: Any)
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: envir()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.$anonfun: apply(x0$1: Any)
org.kiama.example.iswim.secd.IntComparisonOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.iswim.secd.HeapOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x1: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.PlusStrategy: apply(t: Any)
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean)
org.kiama.example.iswim.secd.RecordOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.iswim.secd.RecordOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.iswim.secd.HeapOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.iswim.secd.BooleanOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.$anonfun: apply(t: Any)
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> scala.collection.mutable.HashMap: apply(key: A)
org.kiama.example.iswim.secd.ConversionOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.$anon.$anonfun: apply(ct: Any)
org.kiama.example.iswim.secd.IntComparisonOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: dump()
org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.iswim.secd.BooleanOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: dump()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.iswim.secd.HeapOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.$anonfun: apply(x$2: Any)
org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.iswim.secd.ConversionOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x2: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.iswim.secd.HeapOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.iswim.secd.ConversionOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: handler()
org.kiama.example.iswim.secd.RecordOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x7: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: envir()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> scala.runtime.AbstractPartialFunction: apply(x: T1)
org.kiama.example.iswim.secd.IntComparisonOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.iswim.secd.IOOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: toString()
org.kiama.example.iswim.secd.BooleanOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.iswim.secd.ConversionOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: toString()
org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x5: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.iswim.secd.IntegerOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x4: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x6: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.iswim.secd.IntegerOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.iswim.secd.RecordOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> scala.Function1: apply(v1: T1)
org.kiama.example.iswim.secd.IntegerOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.iswim.secd.StackOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.iswim.secd.ConversionOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> scala.collection.MapLike: apply(key: A)
org.kiama.example.iswim.secd.IntegerOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.$anon: apply(t: Any)
org.kiama.example.iswim.secd.StackOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.attribution.Decorators.Chain: apply(t: T)
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any)
org.kiama.example.iswim.secd.StackOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.rewriting.Rewriter.Strategy.$anon: apply(t1: Any)
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: bdy()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.StringOps: unescape(s: String)
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.NameAnalyser: entity()
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.iswim.secd.IntComparisonOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.machine.Machine: stateTToT([T, U >: T]t: Machine.this.State[T])
org.kiama.example.iswim.secd.ExceptionHandler.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: bdy()
org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x3: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
org.kiama.example.iswim.secd.BooleanOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: stack()
org.kiama.example.iswim.secd.StackOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase: control()
org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.ExceptionHandler: raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue)
org.kiama.example.iswim.secd.SECDBase.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: getType()
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> org.kiama.output.PrettyPrinter: empty()
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> org.kiama.example.oberon0.base.c.CArrayType: elemtype()
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> org.kiama.example.oberon0.base.c.CArrayType: size()
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> java.lang.String: +(x$1: Any)
org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType) ===> org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType)
org.kiama.example.oberon0.L0.Parser: assignment() ===> org.kiama.example.oberon0.L0.Parser: lhs()
org.kiama.example.oberon0.L0.Parser: assignment() ===> org.kiama.example.oberon0.L0.Parser.$anonfun: <init>()
org.kiama.example.oberon0.L0.Parser: assignment() ===> scala.util.parsing.combinator.Parsers.Parser: ^^([U]f: T => U)
org.kiama.example.oberon0.L0.Parser: assignment() ===> scala.util.parsing.combinator.Parsers.Parser: ~([U]q: )
org.kiama.example.oberon0.L0.Parser: assignment() ===> org.kiama.util.ParserUtilities: constToTupleFunction2([A, B, R]r: A, B)
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.collection.immutable.List: canBuildFrom([A])
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinterBase: space()
org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinterBase: semi()
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinterBase: space()
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter: nest$default$2()
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter.$anonfun: <init>()
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinterBase.DocOps: <+>(e: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.base.c.CArrayType: elemtype()
org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter: nest(d: PrettyPrinter.this.Doc,j: Int)
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.L3.c.CAddrType: basetype()
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter: line()
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.L3.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinterBase: space()
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinterBase: space()
org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.example.oberon0.L4.c.CRecordType: fields()
org.kiama.example.oberon0.base.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType) ===> org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.base.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) ===> org.kiama.output.PrettyPrinterBase: vsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.base.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.base.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) ===> org.kiama.output.PrettyPrinterBase: semi()
org.kiama.example.oberon0.base.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep$default$2()
org.kiama.example.oberon0.base.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.output.ParenPrettyPrinter: bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.output.ParenPrettyPrinter: bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.source.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.output.ParenPrettyPrinter: bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.output.PrettyPrinterBase: parens(d: PrettyPrinterBase.this.Doc)
org.kiama.output.ParenPrettyPrinter: bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side)
org.kiama.example.iswim.secd.IOOps.Write: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNegExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAndExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CGeExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CInitDecl: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CIndexExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CAddrType: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAddExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLeExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CDivExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CTypeDef: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CCall: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CEqExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.COrExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CStrExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.output.NonAssoc: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAssignment: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.output.LeftAssoc: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CFieldExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.iswim.secd.SECDBase.PrimValue: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CSubExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNotExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.iswim.secd.IOOps.Read: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CRecordType: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLtExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CIdnExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CModExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.output.RightAssoc: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CDerefExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNeExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CMulExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CAddrExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CWhileStatement: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CGtExp: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CVoidType: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.base.c.CEmptyStmt: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.output.Prefix: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CIfElseStatement: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CIfStatement: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.output.Postfix: canEqual(x$1: Any) ===> java.lang.Object: $isInstanceOf([T0])
org.kiama.example.oberon0.L3.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.NameAnalyser: isLvalue(l: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.TypeAnalyser: tipe()
org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type)
org.kiama.example.oberon0.L2.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L3.SymbolTable: isVariable(e: SymbolTable.this.Entity)
org.kiama.example.oberon0.L0.NameAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.NameAnalyser: isLvalue(l: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.TypeAnalyser: exptype()
org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.iswim.secd.IOOps.Read: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.iswim.secd.IOOps.Write: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CGeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.COrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.c.CRecordType: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CAddrType: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CNeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.Postfix: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.Prefix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.iswim.secd.IOOps.Write: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CGtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAssignment: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CNegExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CNotExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CEqExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.LeftAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.Postfix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CMulExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CDivExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.iswim.secd.IOOps.Read: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CSubExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.Prefix: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CModExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.LeftAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CVoidType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CCall: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAddExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.RightAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAndExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.RightAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CLtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CNegExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.NonAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CVoidType: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CStrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.output.NonAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CLeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int)
org.kiama.util.CompilerBase: driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) ===> org.kiama.example.oberon0.base.Driver: checkargs(args: Array[String],emitter: org.kiama.util.Emitter)
org.kiama.example.oberon0.L1.Parser: elsif() ===> org.kiama.example.oberon0.L1.Parser.$anonfun: <init>()
org.kiama.example.oberon0.L1.Parser: elsif() ===> scala.util.parsing.combinator.Parsers.Parser: ~>([U]q: )
org.kiama.example.oberon0.L1.Parser: elsif() ===> org.kiama.util.WhitespaceParser: literal(s: String)
org.kiama.example.oberon0.L1.Parser: elsif() ===> org.kiama.util.ParserUtilities: parseResultToTuple2([A, B]p: ParserUtilities.this.Parser[ParserUtilities.this.~[A,B]])
org.kiama.example.oberon0.L1.Parser: elsif() ===> scala.util.parsing.combinator.Parsers.Parser: ~([U]q: )
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L4.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep$default$2()
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.output.PrettyPrinterBase.DocOps: <+>(e: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L3.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Tuple2: _2()
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Tuple2: _1()
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.output.PrettyPrinter: line()
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.base.source.Block: stmts()
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L2.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: elsifToDoc(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.L1.Parser: elsifs() ===> org.kiama.example.oberon0.L1.Parser.$anonfun: <init>()
org.kiama.example.oberon0.L1.Parser: elsifs() ===> scala.util.parsing.combinator.Parsers: rep([T]p: )
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.output.Prefix: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.iswim.secd.IOOps.Write: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.output.Postfix: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> scala.collection.mutable.StringBuilder: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L3.c.CAddrType: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L4.c.CRecordType: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L3.c.CStrExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CNotExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.output.NonAssoc: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L3.c.CDerefExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L3.c.CCall: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CIdnExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CNegExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L3.c.CAddrExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L3.c.CVoidType: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L0.c.CTypeDef: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.output.LeftAssoc: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.iswim.secd.IOOps.Read: toString()
org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.output.RightAssoc: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L3.c.CAddrExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CNegExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L4.c.CRecordType: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L3.c.CStrExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.iswim.secd.IOOps.Write: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CTypeDef: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CIdnExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L3.c.CCall: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L3.c.CAddrType: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L3.c.CDerefExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.output.LeftAssoc: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CNotExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> scala.collection.mutable.StringBuilder: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.output.RightAssoc: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L3.c.CVoidType: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.output.Postfix: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.output.Prefix: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.iswim.secd.IOOps.Read: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.output.NonAssoc: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: toString()
org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: toString()
org.kiama.output.PrettyPrinterBase: equal() ===> org.kiama.output.PrettyPrinterBase: char(c: Char)
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: left()
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: right()
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.base.c.CEmptyStmt: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: e()
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: array()
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: right()
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.iswim.secd.IOOps.Write: equals(x$1: Any) ===> org.kiama.example.iswim.secd.IOOps.Write: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: left()
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CCall: canEqual(x$1: Any)
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: right()
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CAddrType: basetype()
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CVoidType: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CStrExp: s()
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CCall: s()
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: right()
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: stmt()
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: field()
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: left()
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CDerefExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: left()
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: left()
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: canEqual(x$1: Any)
org.kiama.example.iswim.secd.SECDBase.PrimValue: equals(that: Any) ===> java.lang.Object: equals(x$1: Any)
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: right()
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: cond()
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: right()
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CIdnExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CRecordType: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: estmt()
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.iswim.secd.IOOps.Write: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: record()
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CNotExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: exp()
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CIdnExp: i()
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CAddrType: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: right()
org.kiama.example.oberon0.base.c.CEmptyStmt: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CStrExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.iswim.secd.IOOps.Read: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.iswim.secd.IOOps.Write: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CIdnExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: right()
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: left()
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CVoidType: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CVoidType: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: desig()
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CAddrExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: right()
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: decl()
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CRecordType: fields()
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CAddrExp: exp()
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: cond()
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CTypeDef: decl()
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: left()
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: right()
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CNegExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.iswim.secd.IOOps.Read: equals(x$1: Any) ===> org.kiama.example.iswim.secd.IOOps.Read: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CAssignment: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: right()
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: tstmt()
org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: index()
org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: left()
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CCall: ps()
org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: cond()
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.iswim.secd.IOOps.Read: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: left()
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: left()
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: canEqual(x$1: Any)
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CVoidType: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L3.c.CDerefExp: exp()
org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: left()
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: right()
org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> java.lang.Object: eq(x$1: Object)
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: tstmt()
org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: left()
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: left()
org.kiama.example.oberon0.base.c.CEmptyStmt: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.iswim.secd.IOOps.Write: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L3.c.CVoidType: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CTypeDef: canEqual(x$1: Any)
org.kiama.example.oberon0.L1.c.CIfStatement: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: right()
org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.base.c.CEmptyStmt: equals(x$1: Any) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: canEqual(x$1: Any)
org.kiama.example.oberon0.L0.c.CNegExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CNegExp: exp()
org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.iswim.secd.IOOps.Read: equals(x$1: Any) ===> scala.Boolean: &&(x: Boolean)
org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any) ===> org.kiama.example.oberon0.L0.c.CNotExp: exp()
org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L0.TypeAnalyser: exptype() ===> org.kiama.example.oberon0.L4.TypeAnalyser: exptypeDef()
org.kiama.example.oberon0.L0.TypeAnalyser: exptype() ===> org.kiama.example.oberon0.L3.TypeAnalyser: exptypeDef()
org.kiama.example.oberon0.L0.TypeAnalyser: exptype() ===> org.kiama.attribution.Attribution: attr([T <: Object, U]f: T => U)
org.kiama.example.oberon0.L0.TypeAnalyser: exptype() ===> org.kiama.example.oberon0.L2.TypeAnalyser: exptypeDef()
org.kiama.example.oberon0.L2.TypeAnalyser: exptypeDef() ===> org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: <init>()
org.kiama.example.oberon0.L0.TypeAnalyser: exptypeDef() ===> org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: <init>()
org.kiama.example.oberon0.L4.TypeAnalyser: exptypeDef() ===> org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: <init>()
org.kiama.example.oberon0.L1.TypeAnalyser: exptypeDef() ===> org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: <init>()
org.kiama.example.oberon0.L3.TypeAnalyser: exptypeDef() ===> org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: <init>()
org.kiama.output.ParenPrettyPrinter: fi() ===> org.kiama.example.oberon0.L0.source.ProdExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fi() ===> org.kiama.example.oberon0.L0.source.SumExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fi() ===> org.kiama.example.oberon0.L0.source.RelationalExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fi() ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fi() ===> org.kiama.example.oberon0.L0.c.CUnaryExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fo() ===> org.kiama.example.oberon0.L0.c.CUnaryExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fo() ===> org.kiama.example.oberon0.L0.source.RelationalExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fo() ===> org.kiama.example.oberon0.L0.source.SumExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fo() ===> org.kiama.example.oberon0.L0.source.ProdExpression: fixity()
org.kiama.output.ParenPrettyPrinter: fo() ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: fixity()
org.kiama.example.iswim.secd.SECDBase.PrimValue: getType() ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue: <init>()
org.kiama.example.oberon0.L0.c.CIdnExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CMulExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CEqExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L4.c.CFieldExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CLeExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L3.c.CStrExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L1.c.CIfStatement: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L3.c.CCall: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L3.c.CAddrType: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L4.c.CIndexExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.base.c.CEmptyStmt: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CNeExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CGtExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L1.c.CIfElseStatement: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CAndExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CGeExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CAssignment: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L3.c.CAddrExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.iswim.secd.SECDBase.PrimValue: hashCode() ===> java.lang.Object: hashCode()
org.kiama.example.oberon0.L0.c.CNegExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CInitDecl: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CDivExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.iswim.secd.IOOps.Read: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CAddExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.iswim.secd.IOOps.Write: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CModExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L3.c.CDerefExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L1.c.CWhileStatement: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CLtExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.COrExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L3.c.CVoidType: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CTypeDef: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CNotExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L0.c.CSubExp: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.example.oberon0.L4.c.CRecordType: hashCode() ===> scala.runtime.ScalaRunTime: _hashCode(x: Product)
org.kiama.output.PrettyPrinterBase: hcat(ds: Seq[PrettyPrinterBase.this.Doc]) ===> org.kiama.output.PrettyPrinterBase: fold(ds: Seq[PrettyPrinterBase.this.Doc],f: PrettyPrinterBase.this.Doc, PrettyPrinterBase.this.Doc)
org.kiama.output.PrettyPrinterBase: hcat(ds: Seq[PrettyPrinterBase.this.Doc]) ===> org.kiama.output.PrettyPrinterBase.$anonfun: <init>()
org.kiama.example.oberon0.L1.Parser: ifStatement() ===> scala.util.parsing.combinator.Parsers.Parser: ~([U]q: )
org.kiama.example.oberon0.L1.Parser: ifStatement() ===> org.kiama.util.WhitespaceParser: literal(s: String)
org.kiama.example.oberon0.L1.Parser: ifStatement() ===> scala.util.parsing.combinator.Parsers.Parser: ~>([U]q: )
org.kiama.example.oberon0.L1.Parser: ifStatement() ===> org.kiama.util.ParserUtilities: constToTupleFunction4([A, B, C, D, R]r: A, B, C, D)
org.kiama.example.oberon0.L1.Parser: ifStatement() ===> org.kiama.example.oberon0.L1.Parser.$anonfun: <init>()
org.kiama.example.oberon0.L1.Parser: ifStatement() ===> scala.util.parsing.combinator.Parsers.Parser: ^^([U]f: T => U)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L1.source.IfStatement: block()
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> scala.Option: getOrElse([B >: A]default: )
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L1.source.IfStatement: cond()
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.output.PrettyPrinterBase.DocOps: <+>(e: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep$default$2()
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> scala.collection.immutable.List: canBuildFrom([A])
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L1.source.IfStatement: optelse()
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> scala.Option: map([B]f: A => B)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L3.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L1.source.IfStatement: elsifs()
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L4.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.base.source.Block: stmts()
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.output.PrettyPrinterBase: hcat(ds: Seq[PrettyPrinterBase.this.Doc])
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: <init>()
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.example.oberon0.L2.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement) ===> org.kiama.output.PrettyPrinterBase.DocOps: <@>(e: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> org.kiama.example.oberon0.L0.SymbolTable: unknownType()
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> scala.Tuple2: _1()
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> org.kiama.example.oberon0.L0.SymbolTable.UserType: ident()
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> scala.Function1: apply(v1: T1)
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type)
org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> scala.Boolean: ||(x: Boolean)
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> scala.Tuple2: <init>(_1: T1,_2: T2)
org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(x0$1: TypeAnalyser.this.Type)
org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> scala.Tuple2: _2()
org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type) ===> org.kiama.example.oberon0.L0.TypeAnalyser: typebasetype()
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: isDefinedAt(x1: Any) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: isDefinedAt(x1: Any) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.lambda2.ReduceSubst: lambda() ===> org.kiama.example.lambda2.Par: beta()
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinter: empty()
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) ===> scala.collection.immutable.Nil: isEmpty()
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) ===> scala.collection.SeqLike: isEmpty()
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinter: linebreak()
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinterBase.$anonfun: <init>()
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinterBase: fold(ds: Seq[PrettyPrinterBase.this.Doc],f: PrettyPrinterBase.this.Doc, PrettyPrinterBase.this.Doc)
org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc) ===> org.kiama.output.PrettyPrinter.Doc: <>(e: PrettyPrinter.this.Doc)
org.kiama.example.iswim.driver.Main: main(args: Array[String]) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: toString()
org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String) ===> java.lang.String: +(x$1: Any)
org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean) ===> org.kiama.example.oberon0.base.source.IdnUse: <init>(ident: String)
org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean) ===> org.kiama.example.oberon0.L0.NameAnalyser: entity()
org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean) ===> org.kiama.example.oberon0.base.source.IdnDef: <init>(ident: String)
org.kiama.example.oberon0.L0.Desugarer: nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Tuple2: <init>(_1: T1,_2: T2)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Tuple2: _2()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CLeExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CNotExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.output.Infix: side()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CLtExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Int: ==(x: Int)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CDivExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Tuple2: _1()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.source.RelationalExpression: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CAddExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Int: <(x: Int)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.output.ParenPrettyPrinter: fo()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CGeExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.COrExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Boolean: ||(x: Boolean)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CSubExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CEqExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CNegExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> java.lang.Object: ne(x$1: Object)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Any: asInstanceOf([T0])
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L3.c.CDerefExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Boolean: &&(x: Boolean)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> scala.Any: isInstanceOf([T0])
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.output.Infix: <init>(side: org.kiama.output.Side)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.source.ProdExpression: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.source.SumExpression: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L3.c.CAddrExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CModExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CNeExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.output.ParenPrettyPrinter: fi()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> java.lang.Object: ==(x$1: Object)
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CMulExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CGtExp: priority()
org.kiama.output.ParenPrettyPrinter: noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side) ===> org.kiama.example.oberon0.L0.c.CAndExp: priority()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAssignment: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.Prefix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.RightAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Read: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CModExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CCall: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAndExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.Postfix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNegExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CSubExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CVoidType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.LeftAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.Prefix: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Write: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.RightAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNotExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Write: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CVoidType: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAddExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CStrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Read: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNegExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.NonAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.Postfix: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.NonAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrType: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.output.LeftAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CDivExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productArity()
org.kiama.rewriting.Rewriter.$anon: oneRewritable(r: org.kiama.rewriting.Rewritable) ===> scala.collection.mutable.StringBuilder: apply(index: Int)
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> scala.Some: x()
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> org.kiama.example.oberon0.L3.TypeAnalyser: parameters()
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> scala.Int: <=(x: Int)
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> scala.collection.LinearSeqOptimized: apply(n: Int)
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> org.kiama.example.oberon0.L0.SymbolTable: unknownType()
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> scala.Int: -(x: Int)
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: tipe()
org.kiama.example.oberon0.L3.TypeAnalyser: paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int) ===> scala.collection.LinearSeqOptimized: length()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.ConversionOps.ToString: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.GetType: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.StackOps.Pop: <init>(n: Int)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> scala.LowPriorityImplicits: wrapRefArray([T <: Object]xs: Array[T])
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment: apply(bs: Seq[org.kiama.example.iswim.secd.SECDBase.ByteCodeBase])
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> scala.collection.generic.GenMapFactory: apply([A, B]elems: Seq[A, B)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.IOOps.Read: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.IntegerOps.PushInt: <init>(n: Int)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.PushType: <init>(ty: org.kiama.example.iswim.secd.SECDBase.TypeValue)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.StackOps.Swap: <init>(n: Int,m: Int)
org.kiama.example.iswim.driver.SECD: primTable() ===> scala.collection.immutable.List: apply([A]xs: Seq[A])
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.BooleanOps.Test: <init>(ct: org.kiama.example.iswim.secd.SECDBase.CodeSegment,ce: org.kiama.example.iswim.secd.SECDBase.CodeSegment)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> scala.Predef: Map()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.HeapOps.RefValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.TypeError: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: <init>(bdy: List[org.kiama.example.iswim.secd.SECDBase.Instruction])
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.IOOps.Write: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.MatchError: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> scala.Predef.ArrowAssoc: ->([B]y: B)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.BooleanOps.Equals: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.StackOps.Dup: <init>(n: Int)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.ConversionOps.ToInt: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase: toCodeSegment(bcb: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.MkUserException: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> scala.Predef: any2ArrowAssoc([A]x: A)
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.RecordOps.Fields: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.RaiseException: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination: <init>()
org.kiama.example.iswim.driver.SECD: primTable() ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler: <init>()
org.kiama.example.oberon0.base.TransformingDriver: processargs(args: List[String]) ===> org.kiama.example.oberon0.base.TranslatingDriver: processargs(args: List[String])
org.kiama.example.oberon0.base.Driver: processargs(args: List[String]) ===> org.kiama.example.oberon0.base.TranslatingDriver: processargs(args: List[String])
org.kiama.example.oberon0.base.Driver: processargs(args: List[String]) ===> org.kiama.example.oberon0.base.TransformingDriver: processargs(args: List[String])
org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CAddExp: left()
org.kiama.output.Postfix: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L3.c.CVoidType: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.iswim.secd.IOOps.Read: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int) ===> org.kiama.example.oberon0.L3.c.CAddrType: basetype()
org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: cond()
org.kiama.example.iswim.secd.IOOps.Read: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CIdnExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CIdnExp: i()
org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.base.c.CEmptyStmt: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.output.NonAssoc: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CNotExp: exp()
org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.iswim.secd.SECDBase.PrimValue: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int) ===> org.kiama.example.oberon0.L4.c.CRecordType: fields()
org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CAddExp: right()
org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CMulExp: right()
org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CGtExp: left()
org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int) ===> org.kiama.example.oberon0.L1.c.CIfStatement: tstmt()
org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CGtExp: right()
org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L3.c.CDerefExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L3.c.CDerefExp: exp()
org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: cond()
org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: stmt()
org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.COrExp: right()
org.kiama.output.RightAssoc: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CLtExp: left()
org.kiama.example.oberon0.base.c.CEmptyStmt: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CLeExp: left()
org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CNegExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int) ===> org.kiama.example.oberon0.L3.c.CCall: ps()
org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CNeExp: right()
org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CNeExp: left()
org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int) ===> org.kiama.example.oberon0.L3.c.CCall: s()
org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CSubExp: right()
org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CAndExp: right()
org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CDivExp: right()
org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CEqExp: left()
org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: tstmt()
org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: estmt()
org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.iswim.secd.SECDBase.PrimValue: productElement(x$1: Int) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: bdy()
org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.COrExp: left()
org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CTypeDef: decl()
org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CMulExp: left()
org.kiama.output.RightAssoc: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L3.c.CStrExp: s()
org.kiama.example.oberon0.L0.c.CIdnExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CGeExp: left()
org.kiama.example.oberon0.L0.c.CNegExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CNegExp: exp()
org.kiama.example.oberon0.L3.c.CDerefExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L3.c.CAddrExp: exp()
org.kiama.example.oberon0.L0.c.CNegExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.output.Prefix: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CInitDecl: decl()
org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CDivExp: left()
org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int) ===> org.kiama.example.oberon0.L1.c.CIfStatement: cond()
org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CAndExp: left()
org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L4.c.CIndexExp: array()
org.kiama.example.iswim.secd.SECDBase.PrimValue: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.iswim.secd.IOOps.Write: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CDerefExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L4.c.CIndexExp: index()
org.kiama.output.Prefix: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CAssignment: desig()
org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CModExp: left()
org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CModExp: right()
org.kiama.output.NonAssoc: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CLtExp: right()
org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CSubExp: left()
org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CEqExp: right()
org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L4.c.CFieldExp: field()
org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CVoidType: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CInitDecl: e()
org.kiama.output.LeftAssoc: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CGeExp: right()
org.kiama.output.Postfix: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L4.c.CFieldExp: record()
org.kiama.example.oberon0.L0.c.CIdnExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CLeExp: right()
org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int) ===> org.kiama.example.oberon0.L0.c.CAssignment: exp()
org.kiama.example.iswim.secd.IOOps.Write: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(x$1: String)
org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.output.LeftAssoc: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int) ===> scala.Any: toString()
org.kiama.example.oberon0.L3.c.CDerefExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L1.c.CWhileStatement: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CAddExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L4.c.CRecordType: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CAndExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.iswim.secd.IOOps.Read: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CNotExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CLeExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L3.c.CStrExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CAssignment: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CEqExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.output.LeftAssoc: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.iswim.secd.SECDBase.PrimValue: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CGeExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.base.c.CEmptyStmt: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CInitDecl: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L1.c.CIfStatement: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L1.c.CIfElseStatement: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.output.RightAssoc: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CNeExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CTypeDef: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CNegExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.output.NonAssoc: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.iswim.secd.IOOps.Write: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L3.c.CCall: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L3.c.CVoidType: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L3.c.CAddrType: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L3.c.CAddrExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.output.Prefix: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CDivExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CGtExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CIdnExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L4.c.CFieldExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CModExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CLtExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.output.Postfix: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CMulExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L4.c.CIndexExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.COrExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.example.oberon0.L0.c.CSubExp: productIterator() ===> scala.runtime.ScalaRunTime: typedProductIterator([T]x: Product)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.Prefix: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.LeftAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAddExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.Prefix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Write: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CDivExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAndExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Write: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.RightAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNotExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.NonAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.NonAssoc: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CStrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.RightAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNegExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Read: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.iswim.secd.IOOps.Read: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGtExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.Postfix: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CLeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfStatement: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CVoidType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CIdnExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAssignment: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.Postfix: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNegExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CCall: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CSubExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CDerefExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrType: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CInitDecl: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAssignment: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CVoidType: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.output.LeftAssoc: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CModExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int)
org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productArity()
org.kiama.rewriting.Rewriter.$anon: someRewritable(r: org.kiama.rewriting.Rewritable) ===> scala.collection.mutable.StringBuilder: apply(index: Int)
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.source.PrettyPrinter: idlistToDoc(ids: List[org.kiama.example.oberon0.base.source.IdnDef])
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L0.c.CAssignment: exp()
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: parens(d: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L3.c.CCall: ps()
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L1.c.CIfStatement: tstmt()
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinterBase: colon()
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.source.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: vsep(ds: Seq[PrettyPrinterBase.this.Doc])
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: semi()
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: parens(d: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L2.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L3.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinter: empty()
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinter: nest$default$2()
org.kiama.example.oberon0.base.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinter: empty()
org.kiama.example.oberon0.base.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinterBase: dot()
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep$default$2()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.example.oberon0.base.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.source.PrettyPrinter: blockToDoc$default$2()
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: estmt()
org.kiama.example.oberon0.base.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinterBase: semi()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L0.c.CAssignment: desig()
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: cond()
org.kiama.example.oberon0.base.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.source.PrettyPrinter: blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean)
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement)
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L2.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: semi()
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: lsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: braces(d: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: cond()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L0.c.CInitDecl: e()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode)
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode)
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinterBase: equal()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L0.c.CTypeDef: decl()
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L1.c.CIfStatement: cond()
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinterBase: semi()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L0.c.CInitDecl: decl()
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.base.source.PrettyPrinter: semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc)
org.kiama.example.oberon0.L3.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: comma()
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: hsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: vsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc)
org.kiama.example.oberon0.base.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinter: nest(d: PrettyPrinter.this.Doc,j: Int)
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode)
org.kiama.example.oberon0.L0.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinter: line()
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: tstmt()
org.kiama.example.oberon0.L3.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L3.c.CCall: s()
org.kiama.example.oberon0.L0.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L3.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode)
org.kiama.example.oberon0.L1.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: stmt()
org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CUnaryExpression: fixity()
org.kiama.example.oberon0.L3.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L3.c.CStrExp: s()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLeExp: right()
org.kiama.example.oberon0.L3.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.PrettyPrinterBase: dquotes(d: PrettyPrinterBase.this.Doc)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNotExp: exp()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CMulExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CMulExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L3.c.CDerefExp: op()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.ParenPrettyPrinter: bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAddExp: right()
org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L4.c.CIndexExp: array()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.COrExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLtExp: right()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CIdnExp: i()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CSubExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGtExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CEqExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CModExp: left()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.PrettyPrinterBase: parens(d: PrettyPrinterBase.this.Doc)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAddExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CEqExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: op()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLtExp: left()
org.kiama.example.oberon0.base.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.PrettyPrinterBase: value(v: Any)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNeExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGeExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGeExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L3.c.CAddrExp: exp()
org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L4.c.CIndexExp: index()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLeExp: left()
org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L4.c.CFieldExp: field()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNeExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L3.c.CDerefExp: exp()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNegExp: op()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNegExp: exp()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CModExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.COrExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAndExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L3.c.CAddrExp: op()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.source.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.example.oberon0.L0.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CDivExp: right()
org.kiama.example.oberon0.L3.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.PrettyPrinter: text(t: String)
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGtExp: right()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAndExp: left()
org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L4.c.CFieldExp: record()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNegExp: exp()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNotExp: op()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CSubExp: left()
org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CDivExp: left()
org.kiama.example.oberon0.L0.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression)
org.kiama.example.oberon0.L0.c.CSubExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CAddExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L3.c.CDerefExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CDivExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.iswim.secd.SECDBase.PrimValue: toString() ===> scala.collection.TraversableLike: ++([B >: A, That]that: scala.collection.GenTraversableOnce[B],implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.base.c.CEmptyStmt: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.iswim.secd.SECDBase.PrimValue: toString() ===> scala.Predef: augmentString(x: String)
org.kiama.example.oberon0.L0.c.CEqExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CLeExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L3.c.CAddrExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L3.c.CVoidType: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CAssignment: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CGeExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L4.c.CIndexExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CIdnExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L1.c.CIfElseStatement: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.iswim.secd.SECDBase.PrimValue: toString() ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: hashCode()
org.kiama.example.iswim.secd.SECDBase.PrimValue: toString() ===> scala.runtime.RichInt: toHexString()
org.kiama.example.oberon0.L3.c.CCall: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L4.c.CRecordType: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L3.c.CStrExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CTypeDef: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CModExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CGtExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.iswim.secd.SECDBase.PrimValue: toString() ===> scala.LowPriorityImplicits: intWrapper(x: Int)
org.kiama.example.oberon0.L4.c.CFieldExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CAndExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.COrExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L1.c.CWhileStatement: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CInitDecl: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CNeExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CNotExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.iswim.secd.IOOps.Write: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CNegExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L1.c.CIfStatement: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.iswim.secd.IOOps.Read: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L3.c.CAddrType: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.c.CMulExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.iswim.secd.SECDBase.PrimValue: toString() ===> scala.Predef: StringCanBuildFrom()
org.kiama.example.oberon0.L0.c.CLtExp: toString() ===> scala.runtime.ScalaRunTime: _toString(x: Product)
org.kiama.example.oberon0.L0.Desugarer: transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) ===> org.kiama.example.oberon0.L0.Desugarer: uniquifyNames(m: org.kiama.example.oberon0.base.source.ModuleDecl)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.base.source.IdnUse: ident()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.NameAnalyser: entity()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CMulExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.IdnExp: idnuse()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.c.CInitDecl: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,e: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.c.CVarDecl: <init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CSubExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.collection.immutable.List: reverse()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CDivExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.collection.immutable.List: apply([A]xs: Seq[A])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.LowPriorityImplicits: wrapRefArray([T <: Object]xs: Array[T])
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: <init>()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.IdnExp: idnuse()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.c.CIntExp: <init>(v: Int)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.source.VarDecl: tipe()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.EqExp: left()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CGtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.collection.immutable.List: foreach([B]f: A => B)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.COrExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.source.IdnDef: ident()
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.collection.immutable.List: ::([B >: A]x: B)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.AndExp: left()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.source.IfStatement: block()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.IdnExp: idnuse()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.source.IfStatement: optelse()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L3.c.CStrExp: <init>(s: String)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CIdnExp: <init>(i: String)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.AddExp: left()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L0.source.Assignment: exp()
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Tuple2: <init>(_1: T1,_2: T2)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CGeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.EqExp: right()
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Tuple2: <init>(_1: T1,_2: T2)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.collection.generic.FilterMonadic: foreach([U]f: A => U)
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Predef: conforms([A])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter: mode()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.collection.immutable.List: apply([A]xs: Seq[A])
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: <init>()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L3.c.CCall: <init>(s: String,ps: List[org.kiama.example.oberon0.base.c.CExpression])
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.collection.immutable.List: canBuildFrom([A])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CAndExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.collection.immutable.List: canBuildFrom([A])
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.c.CRecordType: <init>(fields: List[org.kiama.example.oberon0.base.c.CVarDecl])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.collection.immutable.List: apply([A]xs: Seq[A])
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> scala.collection.immutable.List: canBuildFrom([A])
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType: fields()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.base.source.IdnUse: ident()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CNegExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CEqExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.c.CTypeDef: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.c.CIntType: <init>()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.SymbolTable: isNotArray(e: SymbolTable.this.Entity)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.base.c.CArrayType: <init>(size: Int,elemtype: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L0.c.CAssignment: <init>(desig: org.kiama.example.oberon0.base.c.CExpression,exp: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.GeExp: right()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration)
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.base.source.Block: decls()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Tuple2: _1()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.collection.TraversableLike: init()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.c.CVarDecl: <init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.base.source.Block: stmts()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.AndExp: right()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: value()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> java.lang.Object: ne(x$1: Object)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Option: getOrElse([B >: A]default: )
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.c.CFieldExp: <init>(record: org.kiama.example.oberon0.base.c.CExpression,field: String)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.TypeAnalyser: deftype()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.source.Block: stmts()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CLtExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CNotExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: <init>()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.source.IdnDef: ident()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.LeExp: right()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.collection.immutable.List: ::([B >: A]x: B)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.source.IfStatement: cond()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.source.WhileStatement: cond()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType: size()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CLeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.c.CFunctionDecl: <init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,args: List[org.kiama.example.oberon0.base.c.CDeclaration],body: org.kiama.example.oberon0.base.c.CBlock)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: <init>()
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Tuple2: _2()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.NameAnalyser: entity()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType: elemtype()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.Option: map([B]f: A => B)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.TypeAnalyser: basetype()
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.collection.TraversableLike: withFilter(p: A => Boolean)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: <init>()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CAddExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.AddExp: right()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.c.CBlock: <init>(decls: List[org.kiama.example.oberon0.base.c.CDeclaration],stmts: List[org.kiama.example.oberon0.base.c.CStatement])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.LeExp: left()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CIdnExp: <init>(i: String)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.GeExp: left()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.source.WhileStatement: block()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L3.c.CVoidType: <init>()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L3.c.CDerefExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.base.c.CBlock: <init>(decls: List[org.kiama.example.oberon0.base.c.CDeclaration],stmts: List[org.kiama.example.oberon0.base.c.CStatement])
org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: <init>(cond: org.kiama.example.oberon0.base.c.CExpression,stmt: org.kiama.example.oberon0.base.c.CStatement)
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.LowPriorityImplicits: wrapRefArray([T <: Object]xs: Array[T])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L0.NameAnalyser: entity()
org.kiama.example.oberon0.L1.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L1.source.IfStatement: elsifs()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.collection.TraversableLike: flatMap([B, That]f: A => scala.collection.GenTraversableOnce[B],implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.LowPriorityImplicits: wrapRefArray([T <: Object]xs: Array[T])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.source.IntExp: v()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.base.c.CIntExp: <init>(v: Int)
org.kiama.example.oberon0.base.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> scala.collection.generic.GenericTraversableTemplate: flatten([B]asTraversable: A => scala.collection.GenTraversableOnce[B])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: <init>()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.base.source.Block: decls()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L0.source.Assignment: desig()
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CModExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.source.VarDecl: idndefs()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L0.c.CNeExp: <init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.c.CIndexExp: <init>(array: org.kiama.example.oberon0.base.c.CExpression,index: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L1.CCodeGenerator: translate(eis: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block) ===> scala.collection.LinearSeqOptimized: last()
org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.base.source.IdnUse: ident()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L0.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L0.NameAnalyser: value()
org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration) ===> scala.collection.immutable.List: canBuildFrom([A])
org.kiama.example.oberon0.L4.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.example.oberon0.L4.SymbolTable: isNotArray(e: SymbolTable.this.Entity)
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> scala.MatchError: <init>(obj: Any)
org.kiama.example.oberon0.L4.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L4.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.example.oberon0.L0.TypeAnalyser: basetype()
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.example.oberon0.L3.c.CDerefExp: exp()
org.kiama.example.oberon0.L4.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode)
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> scala.Any: asInstanceOf([T0])
org.kiama.example.oberon0.L4.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> scala.Any: isInstanceOf([T0])
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(e: org.kiama.example.oberon0.L0.source.Expression)
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode) ===> org.kiama.example.oberon0.L3.c.CAddrExp: <init>(exp: org.kiama.example.oberon0.base.c.CExpression)
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) ===> scala.collection.TraversableOnce: toList()
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) ===> scala.LowPriorityImplicits: intWrapper(x: Int)
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) ===> scala.collection.immutable.IndexedSeq: canBuildFrom([A])
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) ===> scala.collection.LinearSeqOptimized: length()
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) ===> org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: <init>()
org.kiama.example.oberon0.L3.CCodeGenerator: translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]) ===> scala.runtime.RichInt: until(end: Int)
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> scala.Function1: apply(v1: T1)
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.SymbolTable: isNotArray(e: SymbolTable.this.Entity)
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> java.lang.Object: ==(x$1: Object)
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L0.TypeAnalyser: typebasetype()
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.base.c.CVarDecl: <init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L3.c.CAddrType: <init>(basetype: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L4.CCodeGenerator: translate(t: CCodeGenerator.this.Type)
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L3.source.VarMode: <init>()
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.base.c.CVarDecl: <init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType)
org.kiama.example.oberon0.L4.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type)
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type) ===> org.kiama.example.oberon0.L0.CCodeGenerator: mangle(s: String)
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) ===> org.kiama.attribution.Attributable: ->([U]a: Attributable.this.type => U)
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) ===> org.kiama.example.oberon0.L3.TypeAnalyser: parameters()
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) ===> scala.collection.TraversableLike: map([B, That]f: A => B,implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That])
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) ===> scala.None: get()
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) ===> scala.collection.immutable.List: canBuildFrom([A])
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) ===> org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: <init>()
org.kiama.example.oberon0.L3.CCodeGenerator: translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef) ===> scala.Option: get()
org.kiama.example.iswim.secd.StringOps: unescape(s: String) ===> scala.collection.mutable.StringBuilder: <init>()
org.kiama.example.iswim.secd.StringOps: unescape(s: String) ===> org.kiama.example.iswim.secd.StringOps.$anonfun: <init>()
org.kiama.example.iswim.secd.StringOps: unescape(s: String) ===> scala.Predef: augmentString(x: String)
org.kiama.example.iswim.secd.StringOps: unescape(s: String) ===> scala.collection.mutable.StringBuilder: toString()
org.kiama.example.iswim.secd.StringOps: unescape(s: String) ===> scala.collection.IndexedSeqOptimized: foreach([U]f: A => U)
org.kiama.example.oberon0.L0.Desugarer: uniquifyNames(m: org.kiama.example.oberon0.base.source.ModuleDecl) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: <init>()
org.kiama.example.oberon0.L0.Desugarer: uniquifyNames(m: org.kiama.example.oberon0.base.source.ModuleDecl) ===> org.kiama.rewriting.Rewriter: everywherebu(s: )
org.kiama.example.oberon0.L0.Desugarer: uniquifyNames(m: org.kiama.example.oberon0.base.source.ModuleDecl) ===> org.kiama.rewriting.Rewriter: rewrite([T]s: )
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CGtExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CIdnExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L3.c.CAddrType: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.iswim.secd.SECDBase.PrimValue: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.output.NonAssoc: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CTypeDef: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CGeExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CEqExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.base.c.CEmptyStmt: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> scala.collection.mutable.StringBuilder: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L4.c.CFieldExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CModExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CSubExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.iswim.secd.IOOps.Write: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.iswim.secd.IOOps.Read: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CNotExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L3.c.CVoidType: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CAssignment: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CAndExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.output.RightAssoc: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.output.LeftAssoc: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L4.c.CRecordType: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L3.c.CStrExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CInitDecl: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L1.c.CIfStatement: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CNegExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CLtExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.COrExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L4.c.CIndexExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L3.c.CAddrExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CDivExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L3.c.CDerefExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L3.c.CCall: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.output.Postfix: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CNeExp: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.output.Prefix: toString()
org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CMulExp: toString()
org.kiama.example.oberon0.L1.Parser: whileStatement() ===> scala.util.parsing.combinator.Parsers.Parser: ~>([U]q: )
org.kiama.example.oberon0.L1.Parser: whileStatement() ===> org.kiama.example.oberon0.L1.Parser.$anonfun: <init>()
org.kiama.example.oberon0.L1.Parser: whileStatement() ===> scala.util.parsing.combinator.Parsers.Parser: ^^([U]f: T => U)
org.kiama.example.oberon0.L1.Parser: whileStatement() ===> scala.util.parsing.combinator.Parsers.Parser: ~([U]q: )
org.kiama.example.oberon0.L1.Parser: whileStatement() ===> org.kiama.util.WhitespaceParser: literal(s: String)
org.kiama.example.oberon0.L1.Parser: whileStatement() ===> org.kiama.util.ParserUtilities: constToTupleFunction2([A, B, R]r: A, B)

