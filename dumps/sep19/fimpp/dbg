Buildfile: /u/karim/workspace/scalabench/build.xml

bm-plugin.jar:

bm.jar.init:

bm.plugin:

bm.init:

bm.source:
     [copy] Copying 1 file to /u/karim/workspace/scalabench/sources/fimpp

deps.init:

bm.deps:
    [unjar] Expanding: /u/karim/workspace/scalabench/sources/fimpp/fimpp-sources.jar into /u/karim/workspace/scalabench/build_src/fimpp
[scalac.plugin] Compiling 10 source files to /u/karim/workspace/scalabench/build_plugin/fimpp
[scalac.plugin] Running TCA
[scalac.plugin] [[syntax trees at end of          targetannotation]] // AST.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   case class Function extends Object with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val name: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1) <stable> <caseaccessor> <accessor> <paramaccessor> def name(): String = Function.this.name;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val argNames: List[String] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2) <stable> <caseaccessor> <accessor> <paramaccessor> def argNames(): List[String] = Function.this.argNames;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val body: List[stasiak.karol.fimpp.Statement] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 3) <stable> <caseaccessor> <accessor> <paramaccessor> def body(): List[stasiak.karol.fimpp.Statement] = Function.this.body;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val returnVar: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 4) <stable> <caseaccessor> <accessor> <paramaccessor> def returnVar(): String = Function.this.returnVar;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 5) def <init>(name: String, argNames: List[String], body: List[stasiak.karol.fimpp.Statement], returnVar: String): stasiak.karol.fimpp.Function = {
[scalac.plugin]       Function.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 6) def call(context: stasiak.karol.fimpp.Context, args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       val c: stasiak.karol.fimpp.Context = context.forFunctionCall(this, args);
[scalac.plugin]       Function.this.body().foreach[Unit]({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 7) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 8) final def apply(x$1: stasiak.karol.fimpp.Statement): Unit = x$1.interpret(c)
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]       });
[scalac.plugin]       c.get(Function.this.returnVar())
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 9) <synthetic> def copy(name: String, argNames: List[String], body: List[stasiak.karol.fimpp.Statement], returnVar: String): stasiak.karol.fimpp.Function = new stasiak.karol.fimpp.Function(name, argNames, body, returnVar);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 10) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = Function.this.name();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 11) <synthetic> def copy$default$2(): List[String] @scala.annotation.unchecked.uncheckedVariance = Function.this.argNames();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 12) <synthetic> def copy$default$3(): List[stasiak.karol.fimpp.Statement] @scala.annotation.unchecked.uncheckedVariance = Function.this.body();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 13) <synthetic> def copy$default$4(): String @scala.annotation.unchecked.uncheckedVariance = Function.this.returnVar();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 14) override <synthetic> def productPrefix(): String = "Function";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 15) <synthetic> def productArity(): Int = 4;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 16) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Function.this.name()
[scalac.plugin]         case 1 => Function.this.argNames()
[scalac.plugin]         case 2 => Function.this.body()
[scalac.plugin]         case 3 => Function.this.returnVar()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 17) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Function.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 18) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Function]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 19) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Function.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 20) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Function.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 21) override <synthetic> def equals(x$1: Any): Boolean = Function.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Function]().&&({
[scalac.plugin]       <synthetic> val Function$1: stasiak.karol.fimpp.Function = x$1.asInstanceOf[stasiak.karol.fimpp.Function]();
[scalac.plugin]       Function.this.name().==(Function$1.name()).&&(Function.this.argNames().==(Function$1.argNames())).&&(Function.this.body().==(Function$1.body())).&&(Function.this.returnVar().==(Function$1.returnVar())).&&(Function$1.canEqual(Function.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Function extends scala.runtime.AbstractFunction4[String,List[String],List[stasiak.karol.fimpp.Statement],String,stasiak.karol.fimpp.Function] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 22) def <init>(): stasiak.karol.fimpp.Function.type = {
[scalac.plugin]       Function.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 23) final override def toString(): String = "Function";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 24) case <synthetic> def apply(name: String, argNames: List[String], body: List[stasiak.karol.fimpp.Statement], returnVar: String): stasiak.karol.fimpp.Function = new stasiak.karol.fimpp.Function(name, argNames, body, returnVar);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 25) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Function): Option[(String, List[String], List[stasiak.karol.fimpp.Statement], String)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, List[String], List[stasiak.karol.fimpp.Statement], String)](new (String, List[String], List[stasiak.karol.fimpp.Statement], String)(x$0.name(), x$0.argNames(), x$0.body(), x$0.returnVar()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 26) <synthetic> private def readResolve(): Object = fimpp.this.Function
[scalac.plugin]   };
[scalac.plugin]   sealed abstract trait Statement extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 27) def interpret(context: stasiak.karol.fimpp.Context): Unit
[scalac.plugin]   };
[scalac.plugin]   case class ClassImportStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val variable: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 28) <stable> <caseaccessor> <accessor> <paramaccessor> def variable(): String = ClassImportStat.this.variable;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val id: List[String] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 29) <stable> <caseaccessor> <accessor> <paramaccessor> def id(): List[String] = ClassImportStat.this.id;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 30) def <init>(variable: String, id: List[String]): stasiak.karol.fimpp.ClassImportStat = {
[scalac.plugin]       ClassImportStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 31) def interpret(context: stasiak.karol.fimpp.Context): Unit = context.set(ClassImportStat.this.variable(), new stasiak.karol.fimpp.RuntimeClass(JavaInterop.loadClass(ClassImportStat.this.id())));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 32) <synthetic> def copy(variable: String, id: List[String]): stasiak.karol.fimpp.ClassImportStat = new stasiak.karol.fimpp.ClassImportStat(variable, id);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 33) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = ClassImportStat.this.variable();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 34) <synthetic> def copy$default$2(): List[String] @scala.annotation.unchecked.uncheckedVariance = ClassImportStat.this.id();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 35) override <synthetic> def productPrefix(): String = "ClassImportStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 36) <synthetic> def productArity(): Int = 2;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 37) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => ClassImportStat.this.variable()
[scalac.plugin]         case 1 => ClassImportStat.this.id()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 38) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](ClassImportStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 39) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.ClassImportStat]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 40) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(ClassImportStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 41) override <synthetic> def toString(): String = ScalaRunTime.this._toString(ClassImportStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 42) override <synthetic> def equals(x$1: Any): Boolean = ClassImportStat.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.ClassImportStat]().&&({
[scalac.plugin]       <synthetic> val ClassImportStat$1: stasiak.karol.fimpp.ClassImportStat = x$1.asInstanceOf[stasiak.karol.fimpp.ClassImportStat]();
[scalac.plugin]       ClassImportStat.this.variable().==(ClassImportStat$1.variable()).&&(ClassImportStat.this.id().==(ClassImportStat$1.id())).&&(ClassImportStat$1.canEqual(ClassImportStat.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object ClassImportStat extends scala.runtime.AbstractFunction2[String,List[String],stasiak.karol.fimpp.ClassImportStat] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 43) def <init>(): stasiak.karol.fimpp.ClassImportStat.type = {
[scalac.plugin]       ClassImportStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 44) final override def toString(): String = "ClassImportStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 45) case <synthetic> def apply(variable: String, id: List[String]): stasiak.karol.fimpp.ClassImportStat = new stasiak.karol.fimpp.ClassImportStat(variable, id);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 46) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.ClassImportStat): Option[(String, List[String])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, List[String])](new (String, List[String])(x$0.variable(), x$0.id()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 47) <synthetic> private def readResolve(): Object = fimpp.this.ClassImportStat
[scalac.plugin]   };
[scalac.plugin]   case class MethodCall extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val returnTo: Option[String] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 48) <stable> <caseaccessor> <accessor> <paramaccessor> def returnTo(): Option[String] = MethodCall.this.returnTo;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val clazz: Option[String] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 49) <stable> <caseaccessor> <accessor> <paramaccessor> def clazz(): Option[String] = MethodCall.this.clazz;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val id: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 50) <stable> <caseaccessor> <accessor> <paramaccessor> def id(): String = MethodCall.this.id;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val args: List[stasiak.karol.fimpp.Expr] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 51) <stable> <caseaccessor> <accessor> <paramaccessor> def args(): List[stasiak.karol.fimpp.Expr] = MethodCall.this.args;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 52) def <init>(returnTo: Option[String], clazz: Option[String], id: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.MethodCall = {
[scalac.plugin]       MethodCall.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 53) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       case <synthetic> val x1: Option[String] = MethodCall.this.clazz();
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.isInstanceOf[Some[String]]())
[scalac.plugin]           {
[scalac.plugin]             val x2: Some[String] = (x1.asInstanceOf[Some[String]](): Some[String]);
[scalac.plugin]             if (x2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val cla: String = x2.x();
[scalac.plugin]                 matchEnd5({
[scalac.plugin]                   case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = context.get(cla);
[scalac.plugin]                   case5(){
[scalac.plugin]                     if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]                       {
[scalac.plugin]                         val x2: stasiak.karol.fimpp.RuntimeClass = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]                         if (x2.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val cl: Class[_] = x2.clazz();
[scalac.plugin]                             matchEnd4({
[scalac.plugin]                               val result: stasiak.karol.fimpp.RuntimeValue = JavaInterop.callMethod(context, cl, MethodCall.this.id(), MethodCall.this.args().map[stasiak.karol.fimpp.RuntimeValue, List[stasiak.karol.fimpp.RuntimeValue]]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.RuntimeValue] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 54) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 55) final def apply(x$2: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.RuntimeValue = x$2.eval(context)
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.RuntimeValue)
[scalac.plugin]                               }, immutable.this.List.canBuildFrom[stasiak.karol.fimpp.RuntimeValue]()));
[scalac.plugin]                               MethodCall.this.returnTo().foreach[Unit]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,Unit] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 56) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 57) final def apply(x$3: String): Unit = context.set(x$3, result)
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): String => Unit)
[scalac.plugin]                               })
[scalac.plugin]                             })
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case6()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case6()
[scalac.plugin]                   };
[scalac.plugin]                   case6(){
[scalac.plugin]                     matchEnd4(throw new stasiak.karol.fimpp.FimException("‘".+(cla).+("’ is not a class")))
[scalac.plugin]                   };
[scalac.plugin]                   matchEnd4(x: Unit){
[scalac.plugin]                     x
[scalac.plugin]                   }
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (scala.None.==(x1))
[scalac.plugin]           {
[scalac.plugin]             val x3: Option[String] = x1;
[scalac.plugin]             matchEnd5({
[scalac.plugin]               val evaluatedArgs: List[stasiak.karol.fimpp.RuntimeValue] = MethodCall.this.args().map[stasiak.karol.fimpp.RuntimeValue, List[stasiak.karol.fimpp.RuntimeValue]]({
[scalac.plugin]                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.RuntimeValue] with Serializable {
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 58) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                     $anonfun.super.<init>();
[scalac.plugin]                     ()
[scalac.plugin]                   };
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 59) final def apply(x$4: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.RuntimeValue = x$4.eval(context)
[scalac.plugin]                 };
[scalac.plugin]                 (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.RuntimeValue)
[scalac.plugin]               }, immutable.this.List.canBuildFrom[stasiak.karol.fimpp.RuntimeValue]());
[scalac.plugin]               if (MethodCall.this.args().isEmpty())
[scalac.plugin]                 throw new stasiak.karol.fimpp.FimException("I have no idea what to do")
[scalac.plugin]               else
[scalac.plugin]                 ();
[scalac.plugin]               if (evaluatedArgs.head().==(null))
[scalac.plugin]                 throw new stasiak.karol.fimpp.FimException("There\'s nothing here")
[scalac.plugin]               else
[scalac.plugin]                 ();
[scalac.plugin]               val result: stasiak.karol.fimpp.RuntimeValue = JavaInterop.callMethod(context, evaluatedArgs.head().toJava().getClass(), MethodCall.this.id(), evaluatedArgs);
[scalac.plugin]               MethodCall.this.returnTo().foreach[Unit]({
[scalac.plugin]                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,Unit] with Serializable {
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 60) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                     $anonfun.super.<init>();
[scalac.plugin]                     ()
[scalac.plugin]                   };
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 61) final def apply(x$5: String): Unit = context.set(x$5, result)
[scalac.plugin]                 };
[scalac.plugin]                 (new anonymous class $anonfun(): String => Unit)
[scalac.plugin]               })
[scalac.plugin]             })
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd5(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 62) <synthetic> def copy(returnTo: Option[String], clazz: Option[String], id: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.MethodCall = new stasiak.karol.fimpp.MethodCall(returnTo, clazz, id, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 63) <synthetic> def copy$default$1(): Option[String] @scala.annotation.unchecked.uncheckedVariance = MethodCall.this.returnTo();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 64) <synthetic> def copy$default$2(): Option[String] @scala.annotation.unchecked.uncheckedVariance = MethodCall.this.clazz();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 65) <synthetic> def copy$default$3(): String @scala.annotation.unchecked.uncheckedVariance = MethodCall.this.id();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 66) <synthetic> def copy$default$4(): List[stasiak.karol.fimpp.Expr] @scala.annotation.unchecked.uncheckedVariance = MethodCall.this.args();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 67) override <synthetic> def productPrefix(): String = "MethodCall";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 68) <synthetic> def productArity(): Int = 4;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 69) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => MethodCall.this.returnTo()
[scalac.plugin]         case 1 => MethodCall.this.clazz()
[scalac.plugin]         case 2 => MethodCall.this.id()
[scalac.plugin]         case 3 => MethodCall.this.args()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 70) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](MethodCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 71) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.MethodCall]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 72) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(MethodCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 73) override <synthetic> def toString(): String = ScalaRunTime.this._toString(MethodCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 74) override <synthetic> def equals(x$1: Any): Boolean = MethodCall.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.MethodCall]().&&({
[scalac.plugin]       <synthetic> val MethodCall$1: stasiak.karol.fimpp.MethodCall = x$1.asInstanceOf[stasiak.karol.fimpp.MethodCall]();
[scalac.plugin]       MethodCall.this.returnTo().==(MethodCall$1.returnTo()).&&(MethodCall.this.clazz().==(MethodCall$1.clazz())).&&(MethodCall.this.id().==(MethodCall$1.id())).&&(MethodCall.this.args().==(MethodCall$1.args())).&&(MethodCall$1.canEqual(MethodCall.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object MethodCall extends scala.runtime.AbstractFunction4[Option[String],Option[String],String,List[stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 75) def <init>(): stasiak.karol.fimpp.MethodCall.type = {
[scalac.plugin]       MethodCall.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 76) final override def toString(): String = "MethodCall";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 77) case <synthetic> def apply(returnTo: Option[String], clazz: Option[String], id: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.MethodCall = new stasiak.karol.fimpp.MethodCall(returnTo, clazz, id, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 78) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.MethodCall): Option[(Option[String], Option[String], String, List[stasiak.karol.fimpp.Expr])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(Option[String], Option[String], String, List[stasiak.karol.fimpp.Expr])](new (Option[String], Option[String], String, List[stasiak.karol.fimpp.Expr])(x$0.returnTo(), x$0.clazz(), x$0.id(), x$0.args()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 79) <synthetic> private def readResolve(): Object = fimpp.this.MethodCall
[scalac.plugin]   };
[scalac.plugin]   case class ConstructorCall extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val returnTo: Option[String] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 80) <stable> <caseaccessor> <accessor> <paramaccessor> def returnTo(): Option[String] = ConstructorCall.this.returnTo;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val clazz: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 81) <stable> <caseaccessor> <accessor> <paramaccessor> def clazz(): String = ConstructorCall.this.clazz;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val args: List[stasiak.karol.fimpp.Expr] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 82) <stable> <caseaccessor> <accessor> <paramaccessor> def args(): List[stasiak.karol.fimpp.Expr] = ConstructorCall.this.args;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 83) def <init>(returnTo: Option[String], clazz: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ConstructorCall = {
[scalac.plugin]       ConstructorCall.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 84) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = context.get(ConstructorCall.this.clazz());
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]           {
[scalac.plugin]             val x2: stasiak.karol.fimpp.RuntimeClass = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]             if (x2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val cl: Class[_] = x2.clazz();
[scalac.plugin]                 matchEnd4({
[scalac.plugin]                   val result: stasiak.karol.fimpp.RuntimeValue = JavaInterop.callConstructor(context, cl, ConstructorCall.this.args().map[stasiak.karol.fimpp.RuntimeValue, List[stasiak.karol.fimpp.RuntimeValue]]({
[scalac.plugin]                     @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.RuntimeValue] with Serializable {
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 85) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                         $anonfun.super.<init>();
[scalac.plugin]                         ()
[scalac.plugin]                       };
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 86) final def apply(x$6: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.RuntimeValue = x$6.eval(context)
[scalac.plugin]                     };
[scalac.plugin]                     (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.RuntimeValue)
[scalac.plugin]                   }, immutable.this.List.canBuildFrom[stasiak.karol.fimpp.RuntimeValue]()));
[scalac.plugin]                   ConstructorCall.this.returnTo().foreach[Unit]({
[scalac.plugin]                     @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,Unit] with Serializable {
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 87) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                         $anonfun.super.<init>();
[scalac.plugin]                         ()
[scalac.plugin]                       };
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 88) final def apply(x$7: String): Unit = context.set(x$7, result)
[scalac.plugin]                     };
[scalac.plugin]                     (new anonymous class $anonfun(): String => Unit)
[scalac.plugin]                   })
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         matchEnd4(throw new stasiak.karol.fimpp.FimException("‘".+(ConstructorCall.this.clazz()).+("’ is not a class")))
[scalac.plugin]       };
[scalac.plugin]       matchEnd4(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 89) <synthetic> def copy(returnTo: Option[String], clazz: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ConstructorCall = new stasiak.karol.fimpp.ConstructorCall(returnTo, clazz, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 90) <synthetic> def copy$default$1(): Option[String] @scala.annotation.unchecked.uncheckedVariance = ConstructorCall.this.returnTo();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 91) <synthetic> def copy$default$2(): String @scala.annotation.unchecked.uncheckedVariance = ConstructorCall.this.clazz();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 92) <synthetic> def copy$default$3(): List[stasiak.karol.fimpp.Expr] @scala.annotation.unchecked.uncheckedVariance = ConstructorCall.this.args();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 93) override <synthetic> def productPrefix(): String = "ConstructorCall";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 94) <synthetic> def productArity(): Int = 3;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 95) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => ConstructorCall.this.returnTo()
[scalac.plugin]         case 1 => ConstructorCall.this.clazz()
[scalac.plugin]         case 2 => ConstructorCall.this.args()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 96) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](ConstructorCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 97) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.ConstructorCall]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 98) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(ConstructorCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 99) override <synthetic> def toString(): String = ScalaRunTime.this._toString(ConstructorCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 100) override <synthetic> def equals(x$1: Any): Boolean = ConstructorCall.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.ConstructorCall]().&&({
[scalac.plugin]       <synthetic> val ConstructorCall$1: stasiak.karol.fimpp.ConstructorCall = x$1.asInstanceOf[stasiak.karol.fimpp.ConstructorCall]();
[scalac.plugin]       ConstructorCall.this.returnTo().==(ConstructorCall$1.returnTo()).&&(ConstructorCall.this.clazz().==(ConstructorCall$1.clazz())).&&(ConstructorCall.this.args().==(ConstructorCall$1.args())).&&(ConstructorCall$1.canEqual(ConstructorCall.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object ConstructorCall extends scala.runtime.AbstractFunction3[Option[String],String,List[stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.ConstructorCall] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 101) def <init>(): stasiak.karol.fimpp.ConstructorCall.type = {
[scalac.plugin]       ConstructorCall.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 102) final override def toString(): String = "ConstructorCall";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 103) case <synthetic> def apply(returnTo: Option[String], clazz: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ConstructorCall = new stasiak.karol.fimpp.ConstructorCall(returnTo, clazz, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 104) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.ConstructorCall): Option[(Option[String], String, List[stasiak.karol.fimpp.Expr])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(Option[String], String, List[stasiak.karol.fimpp.Expr])](new (Option[String], String, List[stasiak.karol.fimpp.Expr])(x$0.returnTo(), x$0.clazz(), x$0.args()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 105) <synthetic> private def readResolve(): Object = fimpp.this.ConstructorCall
[scalac.plugin]   };
[scalac.plugin]   case class FieldAssignment extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val objClass: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 106) <stable> <caseaccessor> <accessor> <paramaccessor> def objClass(): String = FieldAssignment.this.objClass;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val field: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 107) <stable> <caseaccessor> <accessor> <paramaccessor> def field(): stasiak.karol.fimpp.Expr = FieldAssignment.this.field;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val value: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 108) <stable> <caseaccessor> <accessor> <paramaccessor> def value(): stasiak.karol.fimpp.Expr = FieldAssignment.this.value;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 109) def <init>(objClass: String, field: stasiak.karol.fimpp.Expr, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.FieldAssignment = {
[scalac.plugin]       FieldAssignment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 110) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       val oc: stasiak.karol.fimpp.RuntimeValue = context.get(FieldAssignment.this.objClass());
[scalac.plugin]       val v: stasiak.karol.fimpp.RuntimeValue = FieldAssignment.this.value().eval(context);
[scalac.plugin]       {
[scalac.plugin]         case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, stasiak.karol.fimpp.Expr) = new (stasiak.karol.fimpp.RuntimeValue, stasiak.karol.fimpp.Expr)(oc, FieldAssignment.this.field());
[scalac.plugin]         case20(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p3: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]                 {
[scalac.plugin]                   val x4: stasiak.karol.fimpp.RuntimeClass = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]                   if (x4.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val cl: Class[_] = x4.clazz();
[scalac.plugin]                       if (p3.isInstanceOf[stasiak.karol.fimpp.VariableValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x5: stasiak.karol.fimpp.VariableValue = (p3.asInstanceOf[stasiak.karol.fimpp.VariableValue](): stasiak.karol.fimpp.VariableValue);
[scalac.plugin]                           if (x5.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: String = x5.ident();
[scalac.plugin]                               matchEnd19(JavaInterop.setField(context, scala.`package`.Left().apply[Class[_0], Nothing](cl), scala.`package`.Right().apply[Nothing, String](n), v))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case21()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case21()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case21()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case21()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case21()
[scalac.plugin]         };
[scalac.plugin]         case21(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p6: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p7: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p6.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]                 {
[scalac.plugin]                   val x8: stasiak.karol.fimpp.RuntimeClass = (p6.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]                   if (x8.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val cl: Class[_] = x8.clazz();
[scalac.plugin]                       if (p7.isInstanceOf[stasiak.karol.fimpp.NumberValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x9: stasiak.karol.fimpp.NumberValue = (p7.asInstanceOf[stasiak.karol.fimpp.NumberValue](): stasiak.karol.fimpp.NumberValue);
[scalac.plugin]                           if (x9.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: Long = x9.value();
[scalac.plugin]                               matchEnd19(JavaInterop.setField(context, scala.`package`.Left().apply[Class[_0], Nothing](cl), scala.`package`.Left().apply[Int, Nothing](n.toInt()), v))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case22()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case22()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case22()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case22()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case22()
[scalac.plugin]         };
[scalac.plugin]         case22(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p10: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p11: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p10.isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]())
[scalac.plugin]                 {
[scalac.plugin]                   val x12: stasiak.karol.fimpp.RuntimeJavaObject = (p10.asInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject](): stasiak.karol.fimpp.RuntimeJavaObject);
[scalac.plugin]                   if (x12.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val w: Any = x12.obj();
[scalac.plugin]                       if (p11.isInstanceOf[stasiak.karol.fimpp.VariableValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x13: stasiak.karol.fimpp.VariableValue = (p11.asInstanceOf[stasiak.karol.fimpp.VariableValue](): stasiak.karol.fimpp.VariableValue);
[scalac.plugin]                           if (x13.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: String = x13.ident();
[scalac.plugin]                               matchEnd19(JavaInterop.setField(context, scala.`package`.Right().apply[Nothing, Any](w), scala.`package`.Right().apply[Nothing, String](n), v))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case23()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case23()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case23()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case23()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case23()
[scalac.plugin]         };
[scalac.plugin]         case23(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p14: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p15: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p14.isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]())
[scalac.plugin]                 {
[scalac.plugin]                   val x16: stasiak.karol.fimpp.RuntimeJavaObject = (p14.asInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject](): stasiak.karol.fimpp.RuntimeJavaObject);
[scalac.plugin]                   if (x16.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val w: Any = x16.obj();
[scalac.plugin]                       if (p15.isInstanceOf[stasiak.karol.fimpp.NumberValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x17: stasiak.karol.fimpp.NumberValue = (p15.asInstanceOf[stasiak.karol.fimpp.NumberValue](): stasiak.karol.fimpp.NumberValue);
[scalac.plugin]                           if (x17.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: Long = x17.value();
[scalac.plugin]                               matchEnd19(JavaInterop.setField(context, scala.`package`.Right().apply[Nothing, Any](w), scala.`package`.Left().apply[Int, Nothing](n.toInt()), v))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case24()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case24()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case24()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case24()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case24()
[scalac.plugin]         };
[scalac.plugin]         case24(){
[scalac.plugin]           matchEnd19(throw new stasiak.karol.fimpp.FimException("TODO"))
[scalac.plugin]         };
[scalac.plugin]         matchEnd19(x: Unit){
[scalac.plugin]           x
[scalac.plugin]         }
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 111) <synthetic> def copy(objClass: String, field: stasiak.karol.fimpp.Expr, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.FieldAssignment = new stasiak.karol.fimpp.FieldAssignment(objClass, field, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 112) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = FieldAssignment.this.objClass();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 113) <synthetic> def copy$default$2(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = FieldAssignment.this.field();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 114) <synthetic> def copy$default$3(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = FieldAssignment.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 115) override <synthetic> def productPrefix(): String = "FieldAssignment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 116) <synthetic> def productArity(): Int = 3;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 117) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => FieldAssignment.this.objClass()
[scalac.plugin]         case 1 => FieldAssignment.this.field()
[scalac.plugin]         case 2 => FieldAssignment.this.value()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 118) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](FieldAssignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 119) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.FieldAssignment]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 120) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(FieldAssignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 121) override <synthetic> def toString(): String = ScalaRunTime.this._toString(FieldAssignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 122) override <synthetic> def equals(x$1: Any): Boolean = FieldAssignment.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.FieldAssignment]().&&({
[scalac.plugin]       <synthetic> val FieldAssignment$1: stasiak.karol.fimpp.FieldAssignment = x$1.asInstanceOf[stasiak.karol.fimpp.FieldAssignment]();
[scalac.plugin]       FieldAssignment.this.objClass().==(FieldAssignment$1.objClass()).&&(FieldAssignment.this.field().==(FieldAssignment$1.field())).&&(FieldAssignment.this.value().==(FieldAssignment$1.value())).&&(FieldAssignment$1.canEqual(FieldAssignment.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object FieldAssignment extends scala.runtime.AbstractFunction3[String,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.FieldAssignment] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 123) def <init>(): stasiak.karol.fimpp.FieldAssignment.type = {
[scalac.plugin]       FieldAssignment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 124) final override def toString(): String = "FieldAssignment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 125) case <synthetic> def apply(objClass: String, field: stasiak.karol.fimpp.Expr, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.FieldAssignment = new stasiak.karol.fimpp.FieldAssignment(objClass, field, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 126) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.FieldAssignment): Option[(String, stasiak.karol.fimpp.Expr, stasiak.karol.fimpp.Expr)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, stasiak.karol.fimpp.Expr, stasiak.karol.fimpp.Expr)](new (String, stasiak.karol.fimpp.Expr, stasiak.karol.fimpp.Expr)(x$0.objClass(), x$0.field(), x$0.value()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 127) <synthetic> private def readResolve(): Object = fimpp.this.FieldAssignment
[scalac.plugin]   };
[scalac.plugin]   case class FieldRetrieval extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val objClass: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 128) <stable> <caseaccessor> <accessor> <paramaccessor> def objClass(): String = FieldRetrieval.this.objClass;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val field: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 129) <stable> <caseaccessor> <accessor> <paramaccessor> def field(): stasiak.karol.fimpp.Expr = FieldRetrieval.this.field;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val otherVar: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 130) <stable> <caseaccessor> <accessor> <paramaccessor> def otherVar(): String = FieldRetrieval.this.otherVar;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 131) def <init>(objClass: String, field: stasiak.karol.fimpp.Expr, otherVar: String): stasiak.karol.fimpp.FieldRetrieval = {
[scalac.plugin]       FieldRetrieval.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 132) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       val oc: stasiak.karol.fimpp.RuntimeValue = context.get(FieldRetrieval.this.objClass());
[scalac.plugin]       val result: stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]         case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, stasiak.karol.fimpp.Expr) = new (stasiak.karol.fimpp.RuntimeValue, stasiak.karol.fimpp.Expr)(oc, FieldRetrieval.this.field());
[scalac.plugin]         case44(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p3: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]                 {
[scalac.plugin]                   val x4: stasiak.karol.fimpp.RuntimeClass = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]                   if (x4.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val cl: Class[_] = x4.clazz();
[scalac.plugin]                       if (p3.isInstanceOf[stasiak.karol.fimpp.VariableValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x5: stasiak.karol.fimpp.VariableValue = (p3.asInstanceOf[stasiak.karol.fimpp.VariableValue](): stasiak.karol.fimpp.VariableValue);
[scalac.plugin]                           if (x5.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: String = x5.ident();
[scalac.plugin]                               matchEnd43(JavaInterop.getField(scala.`package`.Left().apply[Class[_0], Nothing](cl), scala.`package`.Right().apply[Nothing, String](n)))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case45()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case45()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case45()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case45()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case45()
[scalac.plugin]         };
[scalac.plugin]         case45(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p6: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p7: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p6.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]                 {
[scalac.plugin]                   val x8: stasiak.karol.fimpp.RuntimeClass = (p6.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]                   if (x8.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val cl: Class[_] = x8.clazz();
[scalac.plugin]                       if (p7.isInstanceOf[stasiak.karol.fimpp.StringValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x9: stasiak.karol.fimpp.StringValue = (p7.asInstanceOf[stasiak.karol.fimpp.StringValue](): stasiak.karol.fimpp.StringValue);
[scalac.plugin]                           if (x9.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: String = x9.value();
[scalac.plugin]                               matchEnd43(JavaInterop.getField(scala.`package`.Left().apply[Class[_0], Nothing](cl), scala.`package`.Right().apply[Nothing, String](n)))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case46()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case46()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case46()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case46()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case46()
[scalac.plugin]         };
[scalac.plugin]         case46(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p10: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p11: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p10.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]                 {
[scalac.plugin]                   val x12: stasiak.karol.fimpp.RuntimeClass = (p10.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]                   if (x12.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val cl: Class[_] = x12.clazz();
[scalac.plugin]                       if (p11.isInstanceOf[stasiak.karol.fimpp.Concatenation]())
[scalac.plugin]                         {
[scalac.plugin]                           val x14: stasiak.karol.fimpp.Concatenation = (p11.asInstanceOf[stasiak.karol.fimpp.Concatenation](): stasiak.karol.fimpp.Concatenation);
[scalac.plugin]                           if (x14.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val p13: List[stasiak.karol.fimpp.Expr] = x14.exprs();
[scalac.plugin]                               {
[scalac.plugin]                                 val o48: Option[List[stasiak.karol.fimpp.Expr]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.Expr](p13);
[scalac.plugin]                                 if (o48.isEmpty().unary_!())
[scalac.plugin]                                   if (o48.get().!=(null).&&(o48.get().lengthCompare(1).==(0)))
[scalac.plugin]                                     {
[scalac.plugin]                                       val p15: stasiak.karol.fimpp.Expr = o48.get().apply(0);
[scalac.plugin]                                       if (p15.isInstanceOf[stasiak.karol.fimpp.StringValue]())
[scalac.plugin]                                         {
[scalac.plugin]                                           val x17: stasiak.karol.fimpp.StringValue = (p15.asInstanceOf[stasiak.karol.fimpp.StringValue](): stasiak.karol.fimpp.StringValue);
[scalac.plugin]                                           if (x17.ne(null))
[scalac.plugin]                                             {
[scalac.plugin]                                               val n: String = x17.value();
[scalac.plugin]                                               matchEnd43(JavaInterop.getField(scala.`package`.Left().apply[Class[_0], Nothing](cl), scala.`package`.Right().apply[Nothing, String](n)))
[scalac.plugin]                                             }
[scalac.plugin]                                           else
[scalac.plugin]                                             case47()
[scalac.plugin]                                         }
[scalac.plugin]                                       else
[scalac.plugin]                                         case47()
[scalac.plugin]                                     }
[scalac.plugin]                                   else
[scalac.plugin]                                     case47()
[scalac.plugin]                                 else
[scalac.plugin]                                   case47()
[scalac.plugin]                               }
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case47()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case47()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case47()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case47()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case47()
[scalac.plugin]         };
[scalac.plugin]         case47(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p18: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p19: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p18.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]())
[scalac.plugin]                 {
[scalac.plugin]                   val x20: stasiak.karol.fimpp.RuntimeClass = (p18.asInstanceOf[stasiak.karol.fimpp.RuntimeClass](): stasiak.karol.fimpp.RuntimeClass);
[scalac.plugin]                   if (x20.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val cl: Class[_] = x20.clazz();
[scalac.plugin]                       if (p19.isInstanceOf[stasiak.karol.fimpp.NumberValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x21: stasiak.karol.fimpp.NumberValue = (p19.asInstanceOf[stasiak.karol.fimpp.NumberValue](): stasiak.karol.fimpp.NumberValue);
[scalac.plugin]                           if (x21.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: Long = x21.value();
[scalac.plugin]                               matchEnd43(JavaInterop.getField(scala.`package`.Left().apply[Class[_0], Nothing](cl), scala.`package`.Left().apply[Int, Nothing](n.toInt())))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case49()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case49()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case49()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case49()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case49()
[scalac.plugin]         };
[scalac.plugin]         case49(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p22: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p23: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p22.isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]())
[scalac.plugin]                 {
[scalac.plugin]                   val x24: stasiak.karol.fimpp.RuntimeJavaObject = (p22.asInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject](): stasiak.karol.fimpp.RuntimeJavaObject);
[scalac.plugin]                   if (x24.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val v: Any = x24.obj();
[scalac.plugin]                       if (p23.isInstanceOf[stasiak.karol.fimpp.VariableValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x25: stasiak.karol.fimpp.VariableValue = (p23.asInstanceOf[stasiak.karol.fimpp.VariableValue](): stasiak.karol.fimpp.VariableValue);
[scalac.plugin]                           if (x25.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: String = x25.ident();
[scalac.plugin]                               matchEnd43(JavaInterop.getField(scala.`package`.Right().apply[Nothing, Any](v), scala.`package`.Right().apply[Nothing, String](n)))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case50()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case50()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case50()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case50()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case50()
[scalac.plugin]         };
[scalac.plugin]         case50(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p26: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p27: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p26.isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]())
[scalac.plugin]                 {
[scalac.plugin]                   val x28: stasiak.karol.fimpp.RuntimeJavaObject = (p26.asInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject](): stasiak.karol.fimpp.RuntimeJavaObject);
[scalac.plugin]                   if (x28.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val v: Any = x28.obj();
[scalac.plugin]                       if (p27.isInstanceOf[stasiak.karol.fimpp.StringValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x29: stasiak.karol.fimpp.StringValue = (p27.asInstanceOf[stasiak.karol.fimpp.StringValue](): stasiak.karol.fimpp.StringValue);
[scalac.plugin]                           if (x29.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: String = x29.value();
[scalac.plugin]                               matchEnd43(JavaInterop.getField(scala.`package`.Right().apply[Nothing, Any](v), scala.`package`.Right().apply[Nothing, String](n)))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case51()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case51()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case51()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case51()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case51()
[scalac.plugin]         };
[scalac.plugin]         case51(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p30: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p31: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p30.isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]())
[scalac.plugin]                 {
[scalac.plugin]                   val x32: stasiak.karol.fimpp.RuntimeJavaObject = (p30.asInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject](): stasiak.karol.fimpp.RuntimeJavaObject);
[scalac.plugin]                   if (x32.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val v: Any = x32.obj();
[scalac.plugin]                       if (p31.isInstanceOf[stasiak.karol.fimpp.Concatenation]())
[scalac.plugin]                         {
[scalac.plugin]                           val x34: stasiak.karol.fimpp.Concatenation = (p31.asInstanceOf[stasiak.karol.fimpp.Concatenation](): stasiak.karol.fimpp.Concatenation);
[scalac.plugin]                           if (x34.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val p33: List[stasiak.karol.fimpp.Expr] = x34.exprs();
[scalac.plugin]                               {
[scalac.plugin]                                 val o53: Option[List[stasiak.karol.fimpp.Expr]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.Expr](p33);
[scalac.plugin]                                 if (o53.isEmpty().unary_!())
[scalac.plugin]                                   if (o53.get().!=(null).&&(o53.get().lengthCompare(1).==(0)))
[scalac.plugin]                                     {
[scalac.plugin]                                       val p35: stasiak.karol.fimpp.Expr = o53.get().apply(0);
[scalac.plugin]                                       if (p35.isInstanceOf[stasiak.karol.fimpp.StringValue]())
[scalac.plugin]                                         {
[scalac.plugin]                                           val x37: stasiak.karol.fimpp.StringValue = (p35.asInstanceOf[stasiak.karol.fimpp.StringValue](): stasiak.karol.fimpp.StringValue);
[scalac.plugin]                                           if (x37.ne(null))
[scalac.plugin]                                             {
[scalac.plugin]                                               val n: String = x37.value();
[scalac.plugin]                                               matchEnd43(JavaInterop.getField(scala.`package`.Right().apply[Nothing, Any](v), scala.`package`.Right().apply[Nothing, String](n)))
[scalac.plugin]                                             }
[scalac.plugin]                                           else
[scalac.plugin]                                             case52()
[scalac.plugin]                                         }
[scalac.plugin]                                       else
[scalac.plugin]                                         case52()
[scalac.plugin]                                     }
[scalac.plugin]                                   else
[scalac.plugin]                                     case52()
[scalac.plugin]                                 else
[scalac.plugin]                                   case52()
[scalac.plugin]                               }
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case52()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case52()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case52()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case52()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case52()
[scalac.plugin]         };
[scalac.plugin]         case52(){
[scalac.plugin]           if (x1.ne(null))
[scalac.plugin]             {
[scalac.plugin]               val p38: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]               val p39: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]               if (p38.isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]())
[scalac.plugin]                 {
[scalac.plugin]                   val x40: stasiak.karol.fimpp.RuntimeJavaObject = (p38.asInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject](): stasiak.karol.fimpp.RuntimeJavaObject);
[scalac.plugin]                   if (x40.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val v: Any = x40.obj();
[scalac.plugin]                       if (p39.isInstanceOf[stasiak.karol.fimpp.NumberValue]())
[scalac.plugin]                         {
[scalac.plugin]                           val x41: stasiak.karol.fimpp.NumberValue = (p39.asInstanceOf[stasiak.karol.fimpp.NumberValue](): stasiak.karol.fimpp.NumberValue);
[scalac.plugin]                           if (x41.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val n: Long = x41.value();
[scalac.plugin]                               matchEnd43(JavaInterop.getField(scala.`package`.Right().apply[Nothing, Any](v), scala.`package`.Left().apply[Int, Nothing](n.toInt())))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case54()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case54()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case54()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case54()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case54()
[scalac.plugin]         };
[scalac.plugin]         case54(){
[scalac.plugin]           matchEnd43(throw new stasiak.karol.fimpp.FimException("TODO: ".+(oc).+(" ").+(FieldRetrieval.this.field())))
[scalac.plugin]         };
[scalac.plugin]         matchEnd43(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]           x
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       context.set(FieldRetrieval.this.otherVar(), result)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 133) <synthetic> def copy(objClass: String, field: stasiak.karol.fimpp.Expr, otherVar: String): stasiak.karol.fimpp.FieldRetrieval = new stasiak.karol.fimpp.FieldRetrieval(objClass, field, otherVar);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 134) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = FieldRetrieval.this.objClass();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 135) <synthetic> def copy$default$2(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = FieldRetrieval.this.field();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 136) <synthetic> def copy$default$3(): String @scala.annotation.unchecked.uncheckedVariance = FieldRetrieval.this.otherVar();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 137) override <synthetic> def productPrefix(): String = "FieldRetrieval";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 138) <synthetic> def productArity(): Int = 3;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 139) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => FieldRetrieval.this.objClass()
[scalac.plugin]         case 1 => FieldRetrieval.this.field()
[scalac.plugin]         case 2 => FieldRetrieval.this.otherVar()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 140) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](FieldRetrieval.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 141) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.FieldRetrieval]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 142) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(FieldRetrieval.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 143) override <synthetic> def toString(): String = ScalaRunTime.this._toString(FieldRetrieval.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 144) override <synthetic> def equals(x$1: Any): Boolean = FieldRetrieval.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.FieldRetrieval]().&&({
[scalac.plugin]       <synthetic> val FieldRetrieval$1: stasiak.karol.fimpp.FieldRetrieval = x$1.asInstanceOf[stasiak.karol.fimpp.FieldRetrieval]();
[scalac.plugin]       FieldRetrieval.this.objClass().==(FieldRetrieval$1.objClass()).&&(FieldRetrieval.this.field().==(FieldRetrieval$1.field())).&&(FieldRetrieval.this.otherVar().==(FieldRetrieval$1.otherVar())).&&(FieldRetrieval$1.canEqual(FieldRetrieval.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object FieldRetrieval extends scala.runtime.AbstractFunction3[String,stasiak.karol.fimpp.Expr,String,stasiak.karol.fimpp.FieldRetrieval] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 145) def <init>(): stasiak.karol.fimpp.FieldRetrieval.type = {
[scalac.plugin]       FieldRetrieval.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 146) final override def toString(): String = "FieldRetrieval";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 147) case <synthetic> def apply(objClass: String, field: stasiak.karol.fimpp.Expr, otherVar: String): stasiak.karol.fimpp.FieldRetrieval = new stasiak.karol.fimpp.FieldRetrieval(objClass, field, otherVar);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 148) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.FieldRetrieval): Option[(String, stasiak.karol.fimpp.Expr, String)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, stasiak.karol.fimpp.Expr, String)](new (String, stasiak.karol.fimpp.Expr, String)(x$0.objClass(), x$0.field(), x$0.otherVar()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 149) <synthetic> private def readResolve(): Object = fimpp.this.FieldRetrieval
[scalac.plugin]   };
[scalac.plugin]   case class Assignment extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val variable: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 150) <stable> <caseaccessor> <accessor> <paramaccessor> def variable(): String = Assignment.this.variable;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val value: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 151) <stable> <caseaccessor> <accessor> <paramaccessor> def value(): stasiak.karol.fimpp.Expr = Assignment.this.value;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 152) def <init>(variable: String, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Assignment = {
[scalac.plugin]       Assignment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 153) def interpret(context: stasiak.karol.fimpp.Context): Unit = context.set(Assignment.this.variable(), Assignment.this.value().eval(context));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 154) <synthetic> def copy(variable: String, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Assignment = new stasiak.karol.fimpp.Assignment(variable, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 155) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = Assignment.this.variable();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 156) <synthetic> def copy$default$2(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = Assignment.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 157) override <synthetic> def productPrefix(): String = "Assignment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 158) <synthetic> def productArity(): Int = 2;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 159) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Assignment.this.variable()
[scalac.plugin]         case 1 => Assignment.this.value()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 160) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Assignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 161) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Assignment]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 162) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Assignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 163) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Assignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 164) override <synthetic> def equals(x$1: Any): Boolean = Assignment.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Assignment]().&&({
[scalac.plugin]       <synthetic> val Assignment$1: stasiak.karol.fimpp.Assignment = x$1.asInstanceOf[stasiak.karol.fimpp.Assignment]();
[scalac.plugin]       Assignment.this.variable().==(Assignment$1.variable()).&&(Assignment.this.value().==(Assignment$1.value())).&&(Assignment$1.canEqual(Assignment.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Assignment extends scala.runtime.AbstractFunction2[String,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Assignment] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 165) def <init>(): stasiak.karol.fimpp.Assignment.type = {
[scalac.plugin]       Assignment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 166) final override def toString(): String = "Assignment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 167) case <synthetic> def apply(variable: String, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Assignment = new stasiak.karol.fimpp.Assignment(variable, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 168) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Assignment): Option[(String, stasiak.karol.fimpp.Expr)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, stasiak.karol.fimpp.Expr)](new (String, stasiak.karol.fimpp.Expr)(x$0.variable(), x$0.value()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 169) <synthetic> private def readResolve(): Object = fimpp.this.Assignment
[scalac.plugin]   };
[scalac.plugin]   case class ArrayAssignment extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val arrayVariable: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 170) <stable> <caseaccessor> <accessor> <paramaccessor> def arrayVariable(): String = ArrayAssignment.this.arrayVariable;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val index: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 171) <stable> <caseaccessor> <accessor> <paramaccessor> def index(): stasiak.karol.fimpp.Expr = ArrayAssignment.this.index;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val value: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 172) <stable> <caseaccessor> <accessor> <paramaccessor> def value(): stasiak.karol.fimpp.Expr = ArrayAssignment.this.value;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 173) def <init>(arrayVariable: String, index: stasiak.karol.fimpp.Expr, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.ArrayAssignment = {
[scalac.plugin]       ArrayAssignment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 174) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = context.get(ArrayAssignment.this.arrayVariable());
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeArray]())
[scalac.plugin]           {
[scalac.plugin]             val x2: stasiak.karol.fimpp.RuntimeArray = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeArray](): stasiak.karol.fimpp.RuntimeArray);
[scalac.plugin]             matchEnd4({
[scalac.plugin]               case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = ArrayAssignment.this.index().eval(context);
[scalac.plugin]               case5(){
[scalac.plugin]                 if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                   {
[scalac.plugin]                     val x2: stasiak.karol.fimpp.RuntimeNumber = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                     if (x2.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val i: Long = x2.num();
[scalac.plugin]                         matchEnd4(x2.set(i, ArrayAssignment.this.value().eval(context)))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case6()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               };
[scalac.plugin]               case6(){
[scalac.plugin]                 matchEnd4(throw new stasiak.karol.fimpp.FimException("This is not a page number"))
[scalac.plugin]               };
[scalac.plugin]               matchEnd4(x: Unit){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             })
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         matchEnd4(throw new stasiak.karol.fimpp.FimException(ArrayAssignment.this.arrayVariable().+(" is not a book")))
[scalac.plugin]       };
[scalac.plugin]       matchEnd4(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 175) <synthetic> def copy(arrayVariable: String, index: stasiak.karol.fimpp.Expr, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.ArrayAssignment = new stasiak.karol.fimpp.ArrayAssignment(arrayVariable, index, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 176) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = ArrayAssignment.this.arrayVariable();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 177) <synthetic> def copy$default$2(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = ArrayAssignment.this.index();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 178) <synthetic> def copy$default$3(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = ArrayAssignment.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 179) override <synthetic> def productPrefix(): String = "ArrayAssignment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 180) <synthetic> def productArity(): Int = 3;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 181) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => ArrayAssignment.this.arrayVariable()
[scalac.plugin]         case 1 => ArrayAssignment.this.index()
[scalac.plugin]         case 2 => ArrayAssignment.this.value()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 182) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](ArrayAssignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 183) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.ArrayAssignment]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 184) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(ArrayAssignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 185) override <synthetic> def toString(): String = ScalaRunTime.this._toString(ArrayAssignment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 186) override <synthetic> def equals(x$1: Any): Boolean = ArrayAssignment.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.ArrayAssignment]().&&({
[scalac.plugin]       <synthetic> val ArrayAssignment$1: stasiak.karol.fimpp.ArrayAssignment = x$1.asInstanceOf[stasiak.karol.fimpp.ArrayAssignment]();
[scalac.plugin]       ArrayAssignment.this.arrayVariable().==(ArrayAssignment$1.arrayVariable()).&&(ArrayAssignment.this.index().==(ArrayAssignment$1.index())).&&(ArrayAssignment.this.value().==(ArrayAssignment$1.value())).&&(ArrayAssignment$1.canEqual(ArrayAssignment.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object ArrayAssignment extends scala.runtime.AbstractFunction3[String,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.ArrayAssignment] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 187) def <init>(): stasiak.karol.fimpp.ArrayAssignment.type = {
[scalac.plugin]       ArrayAssignment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 188) final override def toString(): String = "ArrayAssignment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 189) case <synthetic> def apply(arrayVariable: String, index: stasiak.karol.fimpp.Expr, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.ArrayAssignment = new stasiak.karol.fimpp.ArrayAssignment(arrayVariable, index, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 190) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.ArrayAssignment): Option[(String, stasiak.karol.fimpp.Expr, stasiak.karol.fimpp.Expr)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, stasiak.karol.fimpp.Expr, stasiak.karol.fimpp.Expr)](new (String, stasiak.karol.fimpp.Expr, stasiak.karol.fimpp.Expr)(x$0.arrayVariable(), x$0.index(), x$0.value()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 191) <synthetic> private def readResolve(): Object = fimpp.this.ArrayAssignment
[scalac.plugin]   };
[scalac.plugin]   case class ArrayRetrieval extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val arrayVariable: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 192) <stable> <caseaccessor> <accessor> <paramaccessor> def arrayVariable(): String = ArrayRetrieval.this.arrayVariable;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val index: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 193) <stable> <caseaccessor> <accessor> <paramaccessor> def index(): stasiak.karol.fimpp.Expr = ArrayRetrieval.this.index;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val otherVariable: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 194) <stable> <caseaccessor> <accessor> <paramaccessor> def otherVariable(): String = ArrayRetrieval.this.otherVariable;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 195) def <init>(arrayVariable: String, index: stasiak.karol.fimpp.Expr, otherVariable: String): stasiak.karol.fimpp.ArrayRetrieval = {
[scalac.plugin]       ArrayRetrieval.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 196) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = context.get(ArrayRetrieval.this.arrayVariable());
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeArray]())
[scalac.plugin]           {
[scalac.plugin]             val x2: stasiak.karol.fimpp.RuntimeArray = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeArray](): stasiak.karol.fimpp.RuntimeArray);
[scalac.plugin]             matchEnd4({
[scalac.plugin]               case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = ArrayRetrieval.this.index().eval(context);
[scalac.plugin]               case5(){
[scalac.plugin]                 if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                   {
[scalac.plugin]                     val x2: stasiak.karol.fimpp.RuntimeNumber = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                     if (x2.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val i: Long = x2.num();
[scalac.plugin]                         matchEnd4(context.set(ArrayRetrieval.this.otherVariable(), x2.get(i)))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case6()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               };
[scalac.plugin]               case6(){
[scalac.plugin]                 matchEnd4(throw new stasiak.karol.fimpp.FimException("This is not a page number"))
[scalac.plugin]               };
[scalac.plugin]               matchEnd4(x: Unit){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             })
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         matchEnd4(throw new stasiak.karol.fimpp.FimException(ArrayRetrieval.this.arrayVariable().+(" is not a book")))
[scalac.plugin]       };
[scalac.plugin]       matchEnd4(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 197) <synthetic> def copy(arrayVariable: String, index: stasiak.karol.fimpp.Expr, otherVariable: String): stasiak.karol.fimpp.ArrayRetrieval = new stasiak.karol.fimpp.ArrayRetrieval(arrayVariable, index, otherVariable);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 198) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = ArrayRetrieval.this.arrayVariable();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 199) <synthetic> def copy$default$2(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = ArrayRetrieval.this.index();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 200) <synthetic> def copy$default$3(): String @scala.annotation.unchecked.uncheckedVariance = ArrayRetrieval.this.otherVariable();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 201) override <synthetic> def productPrefix(): String = "ArrayRetrieval";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 202) <synthetic> def productArity(): Int = 3;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 203) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => ArrayRetrieval.this.arrayVariable()
[scalac.plugin]         case 1 => ArrayRetrieval.this.index()
[scalac.plugin]         case 2 => ArrayRetrieval.this.otherVariable()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 204) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](ArrayRetrieval.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 205) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.ArrayRetrieval]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 206) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(ArrayRetrieval.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 207) override <synthetic> def toString(): String = ScalaRunTime.this._toString(ArrayRetrieval.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 208) override <synthetic> def equals(x$1: Any): Boolean = ArrayRetrieval.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.ArrayRetrieval]().&&({
[scalac.plugin]       <synthetic> val ArrayRetrieval$1: stasiak.karol.fimpp.ArrayRetrieval = x$1.asInstanceOf[stasiak.karol.fimpp.ArrayRetrieval]();
[scalac.plugin]       ArrayRetrieval.this.arrayVariable().==(ArrayRetrieval$1.arrayVariable()).&&(ArrayRetrieval.this.index().==(ArrayRetrieval$1.index())).&&(ArrayRetrieval.this.otherVariable().==(ArrayRetrieval$1.otherVariable())).&&(ArrayRetrieval$1.canEqual(ArrayRetrieval.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object ArrayRetrieval extends scala.runtime.AbstractFunction3[String,stasiak.karol.fimpp.Expr,String,stasiak.karol.fimpp.ArrayRetrieval] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 209) def <init>(): stasiak.karol.fimpp.ArrayRetrieval.type = {
[scalac.plugin]       ArrayRetrieval.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 210) final override def toString(): String = "ArrayRetrieval";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 211) case <synthetic> def apply(arrayVariable: String, index: stasiak.karol.fimpp.Expr, otherVariable: String): stasiak.karol.fimpp.ArrayRetrieval = new stasiak.karol.fimpp.ArrayRetrieval(arrayVariable, index, otherVariable);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 212) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.ArrayRetrieval): Option[(String, stasiak.karol.fimpp.Expr, String)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, stasiak.karol.fimpp.Expr, String)](new (String, stasiak.karol.fimpp.Expr, String)(x$0.arrayVariable(), x$0.index(), x$0.otherVariable()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 213) <synthetic> private def readResolve(): Object = fimpp.this.ArrayRetrieval
[scalac.plugin]   };
[scalac.plugin]   case class ArrayInit extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val arrayVariable: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 214) <stable> <caseaccessor> <accessor> <paramaccessor> def arrayVariable(): String = ArrayInit.this.arrayVariable;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 215) def <init>(arrayVariable: String): stasiak.karol.fimpp.ArrayInit = {
[scalac.plugin]       ArrayInit.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 216) def interpret(context: stasiak.karol.fimpp.Context): Unit = context.set(ArrayInit.this.arrayVariable(), new stasiak.karol.fimpp.RuntimeArray(RuntimeArray.apply$default$1()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 217) <synthetic> def copy(arrayVariable: String): stasiak.karol.fimpp.ArrayInit = new stasiak.karol.fimpp.ArrayInit(arrayVariable);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 218) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = ArrayInit.this.arrayVariable();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 219) override <synthetic> def productPrefix(): String = "ArrayInit";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 220) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 221) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => ArrayInit.this.arrayVariable()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 222) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](ArrayInit.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 223) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.ArrayInit]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 224) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(ArrayInit.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 225) override <synthetic> def toString(): String = ScalaRunTime.this._toString(ArrayInit.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 226) override <synthetic> def equals(x$1: Any): Boolean = ArrayInit.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.ArrayInit]().&&({
[scalac.plugin]       <synthetic> val ArrayInit$1: stasiak.karol.fimpp.ArrayInit = x$1.asInstanceOf[stasiak.karol.fimpp.ArrayInit]();
[scalac.plugin]       ArrayInit.this.arrayVariable().==(ArrayInit$1.arrayVariable()).&&(ArrayInit$1.canEqual(ArrayInit.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object ArrayInit extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.ArrayInit] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 227) def <init>(): stasiak.karol.fimpp.ArrayInit.type = {
[scalac.plugin]       ArrayInit.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 228) final override def toString(): String = "ArrayInit";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 229) case <synthetic> def apply(arrayVariable: String): stasiak.karol.fimpp.ArrayInit = new stasiak.karol.fimpp.ArrayInit(arrayVariable);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 230) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.ArrayInit): Option[String] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[String](x$0.arrayVariable());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 231) <synthetic> private def readResolve(): Object = fimpp.this.ArrayInit
[scalac.plugin]   };
[scalac.plugin]   case class ExprStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val e: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 232) <stable> <caseaccessor> <accessor> <paramaccessor> def e(): stasiak.karol.fimpp.Expr = ExprStat.this.e;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 233) def <init>(e: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.ExprStat = {
[scalac.plugin]       ExprStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 234) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       ExprStat.this.e().eval(context);
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 235) <synthetic> def copy(e: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.ExprStat = new stasiak.karol.fimpp.ExprStat(e);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 236) <synthetic> def copy$default$1(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = ExprStat.this.e();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 237) override <synthetic> def productPrefix(): String = "ExprStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 238) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 239) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => ExprStat.this.e()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 240) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](ExprStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 241) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.ExprStat]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 242) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(ExprStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 243) override <synthetic> def toString(): String = ScalaRunTime.this._toString(ExprStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 244) override <synthetic> def equals(x$1: Any): Boolean = ExprStat.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.ExprStat]().&&({
[scalac.plugin]       <synthetic> val ExprStat$1: stasiak.karol.fimpp.ExprStat = x$1.asInstanceOf[stasiak.karol.fimpp.ExprStat]();
[scalac.plugin]       ExprStat.this.e().==(ExprStat$1.e()).&&(ExprStat$1.canEqual(ExprStat.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object ExprStat extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.ExprStat] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 245) def <init>(): stasiak.karol.fimpp.ExprStat.type = {
[scalac.plugin]       ExprStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 246) final override def toString(): String = "ExprStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 247) case <synthetic> def apply(e: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.ExprStat = new stasiak.karol.fimpp.ExprStat(e);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 248) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.ExprStat): Option[stasiak.karol.fimpp.Expr] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[stasiak.karol.fimpp.Expr](x$0.e());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 249) <synthetic> private def readResolve(): Object = fimpp.this.ExprStat
[scalac.plugin]   };
[scalac.plugin]   case object NopStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 250) def <init>(): stasiak.karol.fimpp.NopStat.type = {
[scalac.plugin]       NopStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 251) def interpret(context: stasiak.karol.fimpp.Context): Unit = ();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 252) override <synthetic> def productPrefix(): String = "NopStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 253) <synthetic> def productArity(): Int = 0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 254) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       case4(){
[scalac.plugin]         matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 255) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](NopStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 256) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.NopStat.type]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 257) override <synthetic> def hashCode(): Int = -505299549;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 258) override <synthetic> def toString(): String = "NopStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 259) <synthetic> private def readResolve(): Object = fimpp.this.NopStat
[scalac.plugin]   };
[scalac.plugin]   case class Increment extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val variable: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 260) <stable> <caseaccessor> <accessor> <paramaccessor> def variable(): String = Increment.this.variable;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val value: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 261) <stable> <caseaccessor> <accessor> <paramaccessor> def value(): stasiak.karol.fimpp.Expr = Increment.this.value;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 262) def <init>(variable: String, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Increment = {
[scalac.plugin]       Increment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 263) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, stasiak.karol.fimpp.RuntimeValue) = new (stasiak.karol.fimpp.RuntimeValue, stasiak.karol.fimpp.RuntimeValue)(context.get(Increment.this.variable()), Increment.this.value().eval(context));
[scalac.plugin]       case8(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p3: stasiak.karol.fimpp.RuntimeValue = x1._2();
[scalac.plugin]             if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]               {
[scalac.plugin]                 val x4: stasiak.karol.fimpp.RuntimeNumber = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                 if (x4.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val x: Long = x4.num();
[scalac.plugin]                     if (p3.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                       {
[scalac.plugin]                         val x5: stasiak.karol.fimpp.RuntimeNumber = (p3.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                         if (x5.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val y: Long = x5.num();
[scalac.plugin]                             matchEnd7(context.set(Increment.this.variable(), new stasiak.karol.fimpp.RuntimeNumber(x.+(y))))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case9()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case9()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case9()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case9()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         matchEnd7(throw new stasiak.karol.fimpp.FimException("Cannot increment"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd7(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 264) <synthetic> def copy(variable: String, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Increment = new stasiak.karol.fimpp.Increment(variable, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 265) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = Increment.this.variable();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 266) <synthetic> def copy$default$2(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = Increment.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 267) override <synthetic> def productPrefix(): String = "Increment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 268) <synthetic> def productArity(): Int = 2;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 269) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Increment.this.variable()
[scalac.plugin]         case 1 => Increment.this.value()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 270) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Increment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 271) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Increment]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 272) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Increment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 273) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Increment.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 274) override <synthetic> def equals(x$1: Any): Boolean = Increment.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Increment]().&&({
[scalac.plugin]       <synthetic> val Increment$1: stasiak.karol.fimpp.Increment = x$1.asInstanceOf[stasiak.karol.fimpp.Increment]();
[scalac.plugin]       Increment.this.variable().==(Increment$1.variable()).&&(Increment.this.value().==(Increment$1.value())).&&(Increment$1.canEqual(Increment.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Increment extends scala.runtime.AbstractFunction2[String,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Increment] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 275) def <init>(): stasiak.karol.fimpp.Increment.type = {
[scalac.plugin]       Increment.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 276) final override def toString(): String = "Increment";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 277) case <synthetic> def apply(variable: String, value: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Increment = new stasiak.karol.fimpp.Increment(variable, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 278) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Increment): Option[(String, stasiak.karol.fimpp.Expr)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, stasiak.karol.fimpp.Expr)](new (String, stasiak.karol.fimpp.Expr)(x$0.variable(), x$0.value()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 279) <synthetic> private def readResolve(): Object = fimpp.this.Increment
[scalac.plugin]   };
[scalac.plugin]   case class IfStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val cond: stasiak.karol.fimpp.Condition = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 280) <stable> <caseaccessor> <accessor> <paramaccessor> def cond(): stasiak.karol.fimpp.Condition = IfStat.this.cond;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val body: List[stasiak.karol.fimpp.Statement] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 281) <stable> <caseaccessor> <accessor> <paramaccessor> def body(): List[stasiak.karol.fimpp.Statement] = IfStat.this.body;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val body2: List[stasiak.karol.fimpp.Statement] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 282) <stable> <caseaccessor> <accessor> <paramaccessor> def body2(): List[stasiak.karol.fimpp.Statement] = IfStat.this.body2;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 283) def <init>(cond: stasiak.karol.fimpp.Condition, body: List[stasiak.karol.fimpp.Statement], body2: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.IfStat = {
[scalac.plugin]       IfStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 284) def interpret(context: stasiak.karol.fimpp.Context): Unit = if (IfStat.this.cond().eval(context))
[scalac.plugin]       IfStat.this.body().foreach[Unit]({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 285) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 286) final def apply(x$8: stasiak.karol.fimpp.Statement): Unit = x$8.interpret(context)
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]       })
[scalac.plugin]     else
[scalac.plugin]       IfStat.this.body2().foreach[Unit]({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 287) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 288) final def apply(x$9: stasiak.karol.fimpp.Statement): Unit = x$9.interpret(context)
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]       });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 289) <synthetic> def copy(cond: stasiak.karol.fimpp.Condition, body: List[stasiak.karol.fimpp.Statement], body2: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.IfStat = new stasiak.karol.fimpp.IfStat(cond, body, body2);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 290) <synthetic> def copy$default$1(): stasiak.karol.fimpp.Condition @scala.annotation.unchecked.uncheckedVariance = IfStat.this.cond();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 291) <synthetic> def copy$default$2(): List[stasiak.karol.fimpp.Statement] @scala.annotation.unchecked.uncheckedVariance = IfStat.this.body();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 292) <synthetic> def copy$default$3(): List[stasiak.karol.fimpp.Statement] @scala.annotation.unchecked.uncheckedVariance = IfStat.this.body2();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 293) override <synthetic> def productPrefix(): String = "IfStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 294) <synthetic> def productArity(): Int = 3;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 295) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => IfStat.this.cond()
[scalac.plugin]         case 1 => IfStat.this.body()
[scalac.plugin]         case 2 => IfStat.this.body2()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 296) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](IfStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 297) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.IfStat]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 298) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(IfStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 299) override <synthetic> def toString(): String = ScalaRunTime.this._toString(IfStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 300) override <synthetic> def equals(x$1: Any): Boolean = IfStat.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.IfStat]().&&({
[scalac.plugin]       <synthetic> val IfStat$1: stasiak.karol.fimpp.IfStat = x$1.asInstanceOf[stasiak.karol.fimpp.IfStat]();
[scalac.plugin]       IfStat.this.cond().==(IfStat$1.cond()).&&(IfStat.this.body().==(IfStat$1.body())).&&(IfStat.this.body2().==(IfStat$1.body2())).&&(IfStat$1.canEqual(IfStat.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object IfStat extends scala.runtime.AbstractFunction3[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement],List[stasiak.karol.fimpp.Statement],stasiak.karol.fimpp.IfStat] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 301) def <init>(): stasiak.karol.fimpp.IfStat.type = {
[scalac.plugin]       IfStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 302) final override def toString(): String = "IfStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 303) case <synthetic> def apply(cond: stasiak.karol.fimpp.Condition, body: List[stasiak.karol.fimpp.Statement], body2: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.IfStat = new stasiak.karol.fimpp.IfStat(cond, body, body2);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 304) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.IfStat): Option[(stasiak.karol.fimpp.Condition, List[stasiak.karol.fimpp.Statement], List[stasiak.karol.fimpp.Statement])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(stasiak.karol.fimpp.Condition, List[stasiak.karol.fimpp.Statement], List[stasiak.karol.fimpp.Statement])](new (stasiak.karol.fimpp.Condition, List[stasiak.karol.fimpp.Statement], List[stasiak.karol.fimpp.Statement])(x$0.cond(), x$0.body(), x$0.body2()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 305) <synthetic> private def readResolve(): Object = fimpp.this.IfStat
[scalac.plugin]   };
[scalac.plugin]   case class WhileStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val cond: stasiak.karol.fimpp.Condition = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 306) <stable> <caseaccessor> <accessor> <paramaccessor> def cond(): stasiak.karol.fimpp.Condition = WhileStat.this.cond;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val body: List[stasiak.karol.fimpp.Statement] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 307) <stable> <caseaccessor> <accessor> <paramaccessor> def body(): List[stasiak.karol.fimpp.Statement] = WhileStat.this.body;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val catchBody: Option[List[stasiak.karol.fimpp.Statement]] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 308) <stable> <caseaccessor> <accessor> <paramaccessor> def catchBody(): Option[List[stasiak.karol.fimpp.Statement]] = WhileStat.this.catchBody;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val finallyBody: List[stasiak.karol.fimpp.Statement] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 309) <stable> <caseaccessor> <accessor> <paramaccessor> def finallyBody(): List[stasiak.karol.fimpp.Statement] = WhileStat.this.finallyBody;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 310) def <init>(cond: stasiak.karol.fimpp.Condition, body: List[stasiak.karol.fimpp.Statement], catchBody: Option[List[stasiak.karol.fimpp.Statement]], finallyBody: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.WhileStat = {
[scalac.plugin]       WhileStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 311) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       case <synthetic> val x1: Option[List[stasiak.karol.fimpp.Statement]] = WhileStat.this.catchBody();
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.isInstanceOf[Some[List[stasiak.karol.fimpp.Statement]]]())
[scalac.plugin]           {
[scalac.plugin]             val x2: Some[List[stasiak.karol.fimpp.Statement]] = (x1.asInstanceOf[Some[List[stasiak.karol.fimpp.Statement]]](): Some[List[stasiak.karol.fimpp.Statement]]);
[scalac.plugin]             if (x2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val cBody: List[stasiak.karol.fimpp.Statement] = x2.x();
[scalac.plugin]                 matchEnd5({
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 312) def liftedTree1(): Unit = try {
[scalac.plugin]                     while$1(){
[scalac.plugin]                       if (WhileStat.this.cond().eval(context))
[scalac.plugin]                         {
[scalac.plugin]                           WhileStat.this.body().foreach[Unit]({
[scalac.plugin]                             @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                               @callgraph.annotation.targetmethod(value = 313) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                 $anonfun.super.<init>();
[scalac.plugin]                                 ()
[scalac.plugin]                               };
[scalac.plugin]                               @callgraph.annotation.targetmethod(value = 314) final def apply(x$10: stasiak.karol.fimpp.Statement): Unit = x$10.interpret(context)
[scalac.plugin]                             };
[scalac.plugin]                             (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                           });
[scalac.plugin]                           while$1()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         ()
[scalac.plugin]                     }
[scalac.plugin]                   } catch {
[scalac.plugin]                     case (e @ (_: stasiak.karol.fimpp.FimException)) => cBody.foreach[Unit]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 315) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 316) final def apply(x$11: stasiak.karol.fimpp.Statement): Unit = x$11.interpret(context)
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                     })
[scalac.plugin]                   } finally WhileStat.this.finallyBody().foreach[Unit]({
[scalac.plugin]                     @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 317) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                         $anonfun.super.<init>();
[scalac.plugin]                         ()
[scalac.plugin]                       };
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 318) final def apply(x$12: stasiak.karol.fimpp.Statement): Unit = x$12.interpret(context)
[scalac.plugin]                     };
[scalac.plugin]                     (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                   });
[scalac.plugin]                   liftedTree1()
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (scala.None.==(x1))
[scalac.plugin]           {
[scalac.plugin]             val x3: Option[List[stasiak.karol.fimpp.Statement]] = x1;
[scalac.plugin]             matchEnd5(try {
[scalac.plugin]               while$2(){
[scalac.plugin]                 if (WhileStat.this.cond().eval(context))
[scalac.plugin]                   {
[scalac.plugin]                     WhileStat.this.body().foreach[Unit]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 319) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 320) final def apply(x$13: stasiak.karol.fimpp.Statement): Unit = x$13.interpret(context)
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                     });
[scalac.plugin]                     while$2()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   ()
[scalac.plugin]               }
[scalac.plugin]             } finally WhileStat.this.finallyBody().foreach[Unit]({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 321) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 322) final def apply(x$14: stasiak.karol.fimpp.Statement): Unit = x$14.interpret(context)
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]             }))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd5(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 323) <synthetic> def copy(cond: stasiak.karol.fimpp.Condition, body: List[stasiak.karol.fimpp.Statement], catchBody: Option[List[stasiak.karol.fimpp.Statement]], finallyBody: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.WhileStat = new stasiak.karol.fimpp.WhileStat(cond, body, catchBody, finallyBody);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 324) <synthetic> def copy$default$1(): stasiak.karol.fimpp.Condition @scala.annotation.unchecked.uncheckedVariance = WhileStat.this.cond();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 325) <synthetic> def copy$default$2(): List[stasiak.karol.fimpp.Statement] @scala.annotation.unchecked.uncheckedVariance = WhileStat.this.body();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 326) <synthetic> def copy$default$3(): Option[List[stasiak.karol.fimpp.Statement]] @scala.annotation.unchecked.uncheckedVariance = WhileStat.this.catchBody();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 327) <synthetic> def copy$default$4(): List[stasiak.karol.fimpp.Statement] @scala.annotation.unchecked.uncheckedVariance = WhileStat.this.finallyBody();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 328) override <synthetic> def productPrefix(): String = "WhileStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 329) <synthetic> def productArity(): Int = 4;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 330) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => WhileStat.this.cond()
[scalac.plugin]         case 1 => WhileStat.this.body()
[scalac.plugin]         case 2 => WhileStat.this.catchBody()
[scalac.plugin]         case 3 => WhileStat.this.finallyBody()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 331) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](WhileStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 332) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.WhileStat]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 333) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(WhileStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 334) override <synthetic> def toString(): String = ScalaRunTime.this._toString(WhileStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 335) override <synthetic> def equals(x$1: Any): Boolean = WhileStat.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.WhileStat]().&&({
[scalac.plugin]       <synthetic> val WhileStat$1: stasiak.karol.fimpp.WhileStat = x$1.asInstanceOf[stasiak.karol.fimpp.WhileStat]();
[scalac.plugin]       WhileStat.this.cond().==(WhileStat$1.cond()).&&(WhileStat.this.body().==(WhileStat$1.body())).&&(WhileStat.this.catchBody().==(WhileStat$1.catchBody())).&&(WhileStat.this.finallyBody().==(WhileStat$1.finallyBody())).&&(WhileStat$1.canEqual(WhileStat.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object WhileStat extends scala.runtime.AbstractFunction4[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement],Option[List[stasiak.karol.fimpp.Statement]],List[stasiak.karol.fimpp.Statement],stasiak.karol.fimpp.WhileStat] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 336) def <init>(): stasiak.karol.fimpp.WhileStat.type = {
[scalac.plugin]       WhileStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 337) final override def toString(): String = "WhileStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 338) case <synthetic> def apply(cond: stasiak.karol.fimpp.Condition, body: List[stasiak.karol.fimpp.Statement], catchBody: Option[List[stasiak.karol.fimpp.Statement]], finallyBody: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.WhileStat = new stasiak.karol.fimpp.WhileStat(cond, body, catchBody, finallyBody);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 339) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.WhileStat): Option[(stasiak.karol.fimpp.Condition, List[stasiak.karol.fimpp.Statement], Option[List[stasiak.karol.fimpp.Statement]], List[stasiak.karol.fimpp.Statement])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(stasiak.karol.fimpp.Condition, List[stasiak.karol.fimpp.Statement], Option[List[stasiak.karol.fimpp.Statement]], List[stasiak.karol.fimpp.Statement])](new (stasiak.karol.fimpp.Condition, List[stasiak.karol.fimpp.Statement], Option[List[stasiak.karol.fimpp.Statement]], List[stasiak.karol.fimpp.Statement])(x$0.cond(), x$0.body(), x$0.catchBody(), x$0.finallyBody()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 340) <synthetic> private def readResolve(): Object = fimpp.this.WhileStat
[scalac.plugin]   };
[scalac.plugin]   case class GlobalDeclStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val id: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 341) <stable> <caseaccessor> <accessor> <paramaccessor> def id(): String = GlobalDeclStat.this.id;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 342) def <init>(id: String): stasiak.karol.fimpp.GlobalDeclStat = {
[scalac.plugin]       GlobalDeclStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 343) def interpret(context: stasiak.karol.fimpp.Context): Unit = context.treatAsGlobal(GlobalDeclStat.this.id());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 344) <synthetic> def copy(id: String): stasiak.karol.fimpp.GlobalDeclStat = new stasiak.karol.fimpp.GlobalDeclStat(id);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 345) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = GlobalDeclStat.this.id();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 346) override <synthetic> def productPrefix(): String = "GlobalDeclStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 347) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 348) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => GlobalDeclStat.this.id()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 349) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](GlobalDeclStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 350) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.GlobalDeclStat]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 351) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(GlobalDeclStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 352) override <synthetic> def toString(): String = ScalaRunTime.this._toString(GlobalDeclStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 353) override <synthetic> def equals(x$1: Any): Boolean = GlobalDeclStat.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.GlobalDeclStat]().&&({
[scalac.plugin]       <synthetic> val GlobalDeclStat$1: stasiak.karol.fimpp.GlobalDeclStat = x$1.asInstanceOf[stasiak.karol.fimpp.GlobalDeclStat]();
[scalac.plugin]       GlobalDeclStat.this.id().==(GlobalDeclStat$1.id()).&&(GlobalDeclStat$1.canEqual(GlobalDeclStat.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object GlobalDeclStat extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.GlobalDeclStat] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 354) def <init>(): stasiak.karol.fimpp.GlobalDeclStat.type = {
[scalac.plugin]       GlobalDeclStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 355) final override def toString(): String = "GlobalDeclStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 356) case <synthetic> def apply(id: String): stasiak.karol.fimpp.GlobalDeclStat = new stasiak.karol.fimpp.GlobalDeclStat(id);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 357) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.GlobalDeclStat): Option[String] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[String](x$0.id());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 358) <synthetic> private def readResolve(): Object = fimpp.this.GlobalDeclStat
[scalac.plugin]   };
[scalac.plugin]   case class RepeatStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val times: Long = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 359) <stable> <caseaccessor> <accessor> <paramaccessor> def times(): Long = RepeatStat.this.times;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val body: List[stasiak.karol.fimpp.Statement] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 360) <stable> <caseaccessor> <accessor> <paramaccessor> def body(): List[stasiak.karol.fimpp.Statement] = RepeatStat.this.body;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val catchBody: Option[List[stasiak.karol.fimpp.Statement]] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 361) <stable> <caseaccessor> <accessor> <paramaccessor> def catchBody(): Option[List[stasiak.karol.fimpp.Statement]] = RepeatStat.this.catchBody;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val finallyBody: List[stasiak.karol.fimpp.Statement] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 362) <stable> <caseaccessor> <accessor> <paramaccessor> def finallyBody(): List[stasiak.karol.fimpp.Statement] = RepeatStat.this.finallyBody;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 363) def <init>(times: Long, body: List[stasiak.karol.fimpp.Statement], catchBody: Option[List[stasiak.karol.fimpp.Statement]], finallyBody: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.RepeatStat = {
[scalac.plugin]       RepeatStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 364) def interpret(context: stasiak.karol.fimpp.Context): Unit = {
[scalac.plugin]       case <synthetic> val x1: Option[List[stasiak.karol.fimpp.Statement]] = RepeatStat.this.catchBody();
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.isInstanceOf[Some[List[stasiak.karol.fimpp.Statement]]]())
[scalac.plugin]           {
[scalac.plugin]             val x2: Some[List[stasiak.karol.fimpp.Statement]] = (x1.asInstanceOf[Some[List[stasiak.karol.fimpp.Statement]]](): Some[List[stasiak.karol.fimpp.Statement]]);
[scalac.plugin]             if (x2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val cBody: List[stasiak.karol.fimpp.Statement] = x2.x();
[scalac.plugin]                 matchEnd5({
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 365) def liftedTree2(): Unit = try {
[scalac.plugin]                     scala.this.Predef.longWrapper(0L).until(RepeatStat.this.times()).foreach[Unit]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1$mcVJ$sp with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 366) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 367) final def apply(_: Long): Unit = $anonfun.this.apply$mcVJ$sp(_);
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 368) <specialized> def apply$mcVJ$sp(v1: Long): Unit = RepeatStat.this.body().foreach[Unit]({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 369) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 370) final def apply(x$15: stasiak.karol.fimpp.Statement): Unit = x$15.interpret(context)
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                         })
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): Long => Unit)
[scalac.plugin]                     })
[scalac.plugin]                   } catch {
[scalac.plugin]                     case (e @ (_: stasiak.karol.fimpp.FimException)) => cBody.foreach[Unit]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 371) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 372) final def apply(x$16: stasiak.karol.fimpp.Statement): Unit = x$16.interpret(context)
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                     })
[scalac.plugin]                   } finally RepeatStat.this.finallyBody().foreach[Unit]({
[scalac.plugin]                     @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 373) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                         $anonfun.super.<init>();
[scalac.plugin]                         ()
[scalac.plugin]                       };
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 374) final def apply(x$17: stasiak.karol.fimpp.Statement): Unit = x$17.interpret(context)
[scalac.plugin]                     };
[scalac.plugin]                     (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                   });
[scalac.plugin]                   liftedTree2()
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (scala.None.==(x1))
[scalac.plugin]           {
[scalac.plugin]             val x3: Option[List[stasiak.karol.fimpp.Statement]] = x1;
[scalac.plugin]             matchEnd5(try {
[scalac.plugin]               scala.this.Predef.longWrapper(0L).until(RepeatStat.this.times()).foreach[Unit]({
[scalac.plugin]                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1$mcVJ$sp with Serializable {
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 375) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                     $anonfun.super.<init>();
[scalac.plugin]                     ()
[scalac.plugin]                   };
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 376) final def apply(_: Long): Unit = $anonfun.this.apply$mcVJ$sp(_);
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 377) <specialized> def apply$mcVJ$sp(v1: Long): Unit = RepeatStat.this.body().foreach[Unit]({
[scalac.plugin]                     @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 378) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                         $anonfun.super.<init>();
[scalac.plugin]                         ()
[scalac.plugin]                       };
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 379) final def apply(x$18: stasiak.karol.fimpp.Statement): Unit = x$18.interpret(context)
[scalac.plugin]                     };
[scalac.plugin]                     (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]                   })
[scalac.plugin]                 };
[scalac.plugin]                 (new anonymous class $anonfun(): Long => Unit)
[scalac.plugin]               })
[scalac.plugin]             } finally RepeatStat.this.finallyBody().foreach[Unit]({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Statement,Unit] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 380) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 381) final def apply(x$19: stasiak.karol.fimpp.Statement): Unit = x$19.interpret(context)
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): stasiak.karol.fimpp.Statement => Unit)
[scalac.plugin]             }))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd5(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 382) <synthetic> def copy(times: Long, body: List[stasiak.karol.fimpp.Statement], catchBody: Option[List[stasiak.karol.fimpp.Statement]], finallyBody: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.RepeatStat = new stasiak.karol.fimpp.RepeatStat(times, body, catchBody, finallyBody);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 383) <synthetic> def copy$default$1(): Long @scala.annotation.unchecked.uncheckedVariance = RepeatStat.this.times();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 384) <synthetic> def copy$default$2(): List[stasiak.karol.fimpp.Statement] @scala.annotation.unchecked.uncheckedVariance = RepeatStat.this.body();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 385) <synthetic> def copy$default$3(): Option[List[stasiak.karol.fimpp.Statement]] @scala.annotation.unchecked.uncheckedVariance = RepeatStat.this.catchBody();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 386) <synthetic> def copy$default$4(): List[stasiak.karol.fimpp.Statement] @scala.annotation.unchecked.uncheckedVariance = RepeatStat.this.finallyBody();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 387) override <synthetic> def productPrefix(): String = "RepeatStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 388) <synthetic> def productArity(): Int = 4;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 389) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RepeatStat.this.times()
[scalac.plugin]         case 1 => RepeatStat.this.body()
[scalac.plugin]         case 2 => RepeatStat.this.catchBody()
[scalac.plugin]         case 3 => RepeatStat.this.finallyBody()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 390) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RepeatStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 391) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RepeatStat]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 392) override <synthetic> def hashCode(): Int = {
[scalac.plugin]       <synthetic> var acc: Int = -889275714;
[scalac.plugin]       acc = Statics.this.mix(acc, Statics.this.longHash(times()));
[scalac.plugin]       acc = Statics.this.mix(acc, Statics.this.anyHash(body()));
[scalac.plugin]       acc = Statics.this.mix(acc, Statics.this.anyHash(catchBody()));
[scalac.plugin]       acc = Statics.this.mix(acc, Statics.this.anyHash(finallyBody()));
[scalac.plugin]       Statics.this.finalizeHash(acc, 4)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 393) override <synthetic> def toString(): String = ScalaRunTime.this._toString(RepeatStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 394) override <synthetic> def equals(x$1: Any): Boolean = RepeatStat.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RepeatStat]().&&({
[scalac.plugin]       <synthetic> val RepeatStat$1: stasiak.karol.fimpp.RepeatStat = x$1.asInstanceOf[stasiak.karol.fimpp.RepeatStat]();
[scalac.plugin]       RepeatStat.this.times().==(RepeatStat$1.times()).&&(RepeatStat.this.body().==(RepeatStat$1.body())).&&(RepeatStat.this.catchBody().==(RepeatStat$1.catchBody())).&&(RepeatStat.this.finallyBody().==(RepeatStat$1.finallyBody())).&&(RepeatStat$1.canEqual(RepeatStat.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RepeatStat extends scala.runtime.AbstractFunction4[Long,List[stasiak.karol.fimpp.Statement],Option[List[stasiak.karol.fimpp.Statement]],List[stasiak.karol.fimpp.Statement],stasiak.karol.fimpp.RepeatStat] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 395) def <init>(): stasiak.karol.fimpp.RepeatStat.type = {
[scalac.plugin]       RepeatStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 396) final override def toString(): String = "RepeatStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 397) case <synthetic> def apply(times: Long, body: List[stasiak.karol.fimpp.Statement], catchBody: Option[List[stasiak.karol.fimpp.Statement]], finallyBody: List[stasiak.karol.fimpp.Statement]): stasiak.karol.fimpp.RepeatStat = new stasiak.karol.fimpp.RepeatStat(times, body, catchBody, finallyBody);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 398) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RepeatStat): Option[(Long, List[stasiak.karol.fimpp.Statement], Option[List[stasiak.karol.fimpp.Statement]], List[stasiak.karol.fimpp.Statement])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(Long, List[stasiak.karol.fimpp.Statement], Option[List[stasiak.karol.fimpp.Statement]], List[stasiak.karol.fimpp.Statement])](new (Long, List[stasiak.karol.fimpp.Statement], Option[List[stasiak.karol.fimpp.Statement]], List[stasiak.karol.fimpp.Statement])(x$0.times(), x$0.body(), x$0.catchBody(), x$0.finallyBody()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 399) <synthetic> private def readResolve(): Object = fimpp.this.RepeatStat
[scalac.plugin]   };
[scalac.plugin]   case class PrintStat extends Object with stasiak.karol.fimpp.Statement with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val expr: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 400) <stable> <caseaccessor> <accessor> <paramaccessor> def expr(): stasiak.karol.fimpp.Expr = PrintStat.this.expr;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 401) def <init>(expr: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.PrintStat = {
[scalac.plugin]       PrintStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 402) def interpret(context: stasiak.karol.fimpp.Context): Unit = scala.this.Predef.print(PrintStat.this.expr().eval(context).toString());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 403) <synthetic> def copy(expr: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.PrintStat = new stasiak.karol.fimpp.PrintStat(expr);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 404) <synthetic> def copy$default$1(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = PrintStat.this.expr();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 405) override <synthetic> def productPrefix(): String = "PrintStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 406) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 407) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => PrintStat.this.expr()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 408) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](PrintStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 409) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.PrintStat]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 410) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(PrintStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 411) override <synthetic> def toString(): String = ScalaRunTime.this._toString(PrintStat.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 412) override <synthetic> def equals(x$1: Any): Boolean = PrintStat.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.PrintStat]().&&({
[scalac.plugin]       <synthetic> val PrintStat$1: stasiak.karol.fimpp.PrintStat = x$1.asInstanceOf[stasiak.karol.fimpp.PrintStat]();
[scalac.plugin]       PrintStat.this.expr().==(PrintStat$1.expr()).&&(PrintStat$1.canEqual(PrintStat.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object PrintStat extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.PrintStat] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 413) def <init>(): stasiak.karol.fimpp.PrintStat.type = {
[scalac.plugin]       PrintStat.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 414) final override def toString(): String = "PrintStat";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 415) case <synthetic> def apply(expr: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.PrintStat = new stasiak.karol.fimpp.PrintStat(expr);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 416) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.PrintStat): Option[stasiak.karol.fimpp.Expr] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[stasiak.karol.fimpp.Expr](x$0.expr());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 417) <synthetic> private def readResolve(): Object = fimpp.this.PrintStat
[scalac.plugin]   };
[scalac.plugin]   case class Module extends Object with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val name: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 418) <stable> <caseaccessor> <accessor> <paramaccessor> def name(): String = Module.this.name;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val functions: List[stasiak.karol.fimpp.Function] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 419) <stable> <caseaccessor> <accessor> <paramaccessor> def functions(): List[stasiak.karol.fimpp.Function] = Module.this.functions;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 420) def <init>(name: String, functions: List[stasiak.karol.fimpp.Function]): stasiak.karol.fimpp.Module = {
[scalac.plugin]       Module.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 421) def run(): stasiak.karol.fimpp.RuntimeValue = Module.this.functions().head().call(new stasiak.karol.fimpp.Context(this), immutable.this.Nil);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 422) <synthetic> def copy(name: String, functions: List[stasiak.karol.fimpp.Function]): stasiak.karol.fimpp.Module = new stasiak.karol.fimpp.Module(name, functions);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 423) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = Module.this.name();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 424) <synthetic> def copy$default$2(): List[stasiak.karol.fimpp.Function] @scala.annotation.unchecked.uncheckedVariance = Module.this.functions();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 425) override <synthetic> def productPrefix(): String = "Module";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 426) <synthetic> def productArity(): Int = 2;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 427) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Module.this.name()
[scalac.plugin]         case 1 => Module.this.functions()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 428) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Module.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 429) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Module]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 430) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Module.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 431) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Module.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 432) override <synthetic> def equals(x$1: Any): Boolean = Module.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Module]().&&({
[scalac.plugin]       <synthetic> val Module$1: stasiak.karol.fimpp.Module = x$1.asInstanceOf[stasiak.karol.fimpp.Module]();
[scalac.plugin]       Module.this.name().==(Module$1.name()).&&(Module.this.functions().==(Module$1.functions())).&&(Module$1.canEqual(Module.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Module extends scala.runtime.AbstractFunction2[String,List[stasiak.karol.fimpp.Function],stasiak.karol.fimpp.Module] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 433) def <init>(): stasiak.karol.fimpp.Module.type = {
[scalac.plugin]       Module.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 434) final override def toString(): String = "Module";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 435) case <synthetic> def apply(name: String, functions: List[stasiak.karol.fimpp.Function]): stasiak.karol.fimpp.Module = new stasiak.karol.fimpp.Module(name, functions);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 436) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Module): Option[(String, List[stasiak.karol.fimpp.Function])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, List[stasiak.karol.fimpp.Function])](new (String, List[stasiak.karol.fimpp.Function])(x$0.name(), x$0.functions()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 437) <synthetic> private def readResolve(): Object = fimpp.this.Module
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // BuiltInConstants.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   object BuiltInConstants extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 438) def <init>(): stasiak.karol.fimpp.BuiltInConstants.type = {
[scalac.plugin]       BuiltInConstants.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 439) def apply(targetMap: scala.collection.mutable.Map[String,stasiak.karol.fimpp.RuntimeValue]): Unit = {
[scalac.plugin]       targetMap.++=(scala.this.Predef.Map().apply[String, Product with Serializable with stasiak.karol.fimpp.RuntimeValue](scala.this.Predef.wrapRefArray[(String, Product with Serializable with stasiak.karol.fimpp.RuntimeValue)](Array[(String, Product with Serializable with stasiak.karol.fimpp.RuntimeValue)]{scala.this.Predef.any2ArrowAssoc[String]("new line").->[stasiak.karol.fimpp.RuntimeString](new stasiak.karol.fimpp.RuntimeString("\n")), scala.this.Predef.any2ArrowAssoc[String]("apostrophe").->[stasiak.karol.fimpp.RuntimeString](new stasiak.karol.fimpp.RuntimeString("\'")), scala.this.Predef.any2ArrowAssoc[String]("quote").->[stasiak.karol.fimpp.RuntimeString](new stasiak.karol.fimpp.RuntimeString("\"")), scala.this.Predef.any2ArrowAssoc[String]("tabulation").->[stasiak.karol.fimpp.RuntimeString](new stasiak.karol.fimpp.RuntimeString("\t")), scala.this.Predef.any2ArrowAssoc[String]("nothing").->[stasiak.karol.fimpp.RuntimeNull.type](RuntimeNull), scala.this.Predef.any2ArrowAssoc[String]("harmony").->[stasiak.karol.fimpp.RuntimeBoolean](new stasiak.karol.fimpp.RuntimeBoolean(true)), scala.this.Predef.any2ArrowAssoc[String]("chaos").->[stasiak.karol.fimpp.RuntimeBoolean](new stasiak.karol.fimpp.RuntimeBoolean(false))})));
[scalac.plugin]       ()
[scalac.plugin]     }
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // BuiltInFunctions.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   object BuiltInFunctions extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 440) def <init>(): stasiak.karol.fimpp.BuiltInFunctions.type = {
[scalac.plugin]       BuiltInFunctions.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 441) def apply(targetMap: scala.collection.mutable.Map[String,stasiak.karol.fimpp.RuntimeValue]): Unit = {
[scalac.plugin]       targetMap.++=(scala.this.Predef.Map().apply[String, stasiak.karol.fimpp.RuntimeBuiltin](scala.this.Predef.wrapRefArray[(String, stasiak.karol.fimpp.RuntimeBuiltin)](Array[(String, stasiak.karol.fimpp.RuntimeBuiltin)]{scala.this.Predef.any2ArrowAssoc[String]("sum").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeNumber] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 442) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 443) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = BuiltInFunctions.this.sum(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeNumber)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("difference").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeNumber] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 444) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 445) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = BuiltInFunctions.this.difference(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeNumber)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("product").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeNumber] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 446) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 447) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = BuiltInFunctions.this.product(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeNumber)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("quotient").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeNumber] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 448) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 449) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = BuiltInFunctions.this.quotient(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeNumber)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("remainder").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeNumber] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 450) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 451) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = BuiltInFunctions.this.remainder(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeNumber)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("dictionary").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeArray] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 452) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 453) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeArray = BuiltInFunctions.this.dictionary(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeArray)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("letters").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeArray] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 454) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 455) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeArray = BuiltInFunctions.this.letters(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeArray)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("first").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeValue] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 456) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 457) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeValue = BuiltInFunctions.this.first(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue)
[scalac.plugin]         }
[scalac.plugin]       })), scala.this.Predef.any2ArrowAssoc[String]("character by code").->[stasiak.karol.fimpp.RuntimeBuiltin](new stasiak.karol.fimpp.RuntimeBuiltin({
[scalac.plugin]         {
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeString] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 458) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 459) final def apply(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeString = BuiltInFunctions.this.characterByCode(args)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeString)
[scalac.plugin]         }
[scalac.plugin]       }))})));
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 460) def sum(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = new stasiak.karol.fimpp.RuntimeNumber(args.foldLeft[Long](0L, {
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Long,stasiak.karol.fimpp.RuntimeValue,Long] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 461) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 462) final def apply(acc: Long, value: stasiak.karol.fimpp.RuntimeValue): Long = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = value;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]               {
[scalac.plugin]                 val x2: stasiak.karol.fimpp.RuntimeNumber = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                 if (x2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val v: Long = x2.num();
[scalac.plugin]                     matchEnd4(acc.+(v))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new stasiak.karol.fimpp.FimException("Trying to add not a number"))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: Long){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): (Long, stasiak.karol.fimpp.RuntimeValue) => Long)
[scalac.plugin]     }));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 463) def product(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = new stasiak.karol.fimpp.RuntimeNumber(args.foldLeft[Long](1L, {
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Long,stasiak.karol.fimpp.RuntimeValue,Long] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 464) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 465) final def apply(acc: Long, value: stasiak.karol.fimpp.RuntimeValue): Long = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = value;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]               {
[scalac.plugin]                 val x2: stasiak.karol.fimpp.RuntimeNumber = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                 if (x2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val v: Long = x2.num();
[scalac.plugin]                     matchEnd4(acc.*(v))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new stasiak.karol.fimpp.FimException("Trying to multiply not a number"))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: Long){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): (Long, stasiak.karol.fimpp.RuntimeValue) => Long)
[scalac.plugin]     }));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 466) def difference(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = {
[scalac.plugin]       case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = args;
[scalac.plugin]       case9(){
[scalac.plugin]         val o11: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o11.isEmpty().unary_!())
[scalac.plugin]           if (o11.get().!=(null).&&(o11.get().lengthCompare(2).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = o11.get().apply(0);
[scalac.plugin]               val p3: stasiak.karol.fimpp.RuntimeValue = o11.get().apply(1);
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                 {
[scalac.plugin]                   val x5: stasiak.karol.fimpp.RuntimeNumber = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                   if (x5.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val a1: Long = x5.num();
[scalac.plugin]                       if (p3.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                         {
[scalac.plugin]                           val x6: stasiak.karol.fimpp.RuntimeNumber = (p3.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                           if (x6.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val a2: Long = x6.num();
[scalac.plugin]                               matchEnd8(new stasiak.karol.fimpp.RuntimeNumber(a1.-(a2)))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case10()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case10()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case10()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case10()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case10()
[scalac.plugin]         else
[scalac.plugin]           case10()
[scalac.plugin]       };
[scalac.plugin]       case10(){
[scalac.plugin]         matchEnd8(throw new stasiak.karol.fimpp.FimException("Trying to subtract something weird"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd8(x: stasiak.karol.fimpp.RuntimeNumber){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 467) def remainder(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = {
[scalac.plugin]       case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = args;
[scalac.plugin]       case9(){
[scalac.plugin]         val o11: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o11.isEmpty().unary_!())
[scalac.plugin]           if (o11.get().!=(null).&&(o11.get().lengthCompare(2).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = o11.get().apply(0);
[scalac.plugin]               val p3: stasiak.karol.fimpp.RuntimeValue = o11.get().apply(1);
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                 {
[scalac.plugin]                   val x5: stasiak.karol.fimpp.RuntimeNumber = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                   if (x5.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val a1: Long = x5.num();
[scalac.plugin]                       if (p3.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                         {
[scalac.plugin]                           val x6: stasiak.karol.fimpp.RuntimeNumber = (p3.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                           if (x6.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val a2: Long = x6.num();
[scalac.plugin]                               matchEnd8(new stasiak.karol.fimpp.RuntimeNumber(a1.%(a2)))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case10()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case10()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case10()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case10()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case10()
[scalac.plugin]         else
[scalac.plugin]           case10()
[scalac.plugin]       };
[scalac.plugin]       case10(){
[scalac.plugin]         matchEnd8(throw new stasiak.karol.fimpp.FimException("Trying to divide something weird"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd8(x: stasiak.karol.fimpp.RuntimeNumber){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 468) def quotient(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeNumber = {
[scalac.plugin]       case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = args;
[scalac.plugin]       case9(){
[scalac.plugin]         val o11: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o11.isEmpty().unary_!())
[scalac.plugin]           if (o11.get().!=(null).&&(o11.get().lengthCompare(2).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = o11.get().apply(0);
[scalac.plugin]               val p3: stasiak.karol.fimpp.RuntimeValue = o11.get().apply(1);
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                 {
[scalac.plugin]                   val x5: stasiak.karol.fimpp.RuntimeNumber = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                   if (x5.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val a1: Long = x5.num();
[scalac.plugin]                       if (p3.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                         {
[scalac.plugin]                           val x6: stasiak.karol.fimpp.RuntimeNumber = (p3.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                           if (x6.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val a2: Long = x6.num();
[scalac.plugin]                               matchEnd8(new stasiak.karol.fimpp.RuntimeNumber(a1./(a2)))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case10()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case10()
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case10()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case10()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case10()
[scalac.plugin]         else
[scalac.plugin]           case10()
[scalac.plugin]       };
[scalac.plugin]       case10(){
[scalac.plugin]         matchEnd8(throw new stasiak.karol.fimpp.FimException("Trying to divide something weird"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd8(x: stasiak.karol.fimpp.RuntimeNumber){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 469) def dictionary(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeArray = {
[scalac.plugin]       case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = args;
[scalac.plugin]       case7(){
[scalac.plugin]         val o9: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o9.isEmpty().unary_!())
[scalac.plugin]           if (o9.get().!=(null).&&(o9.get().lengthCompare(1).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = o9.get().apply(0);
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]                 {
[scalac.plugin]                   val x4: stasiak.karol.fimpp.RuntimeList = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                   if (x4.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val l: List[stasiak.karol.fimpp.RuntimeValue] = x4.elems();
[scalac.plugin]                       matchEnd6(new stasiak.karol.fimpp.RuntimeArray(new scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]().++(l)))
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case8()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case8()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case8()
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd6(throw new stasiak.karol.fimpp.FimException("This is not a list"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd6(x: stasiak.karol.fimpp.RuntimeArray){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 470) def first(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = args;
[scalac.plugin]       case9(){
[scalac.plugin]         val o11: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o11.isEmpty().unary_!())
[scalac.plugin]           if (o11.get().!=(null).&&(o11.get().lengthCompare(1).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = o11.get().apply(0);
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]                 {
[scalac.plugin]                   val x4: stasiak.karol.fimpp.RuntimeList = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                   if (x4.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val l: List[stasiak.karol.fimpp.RuntimeValue] = x4.elems();
[scalac.plugin]                       matchEnd8({
[scalac.plugin]                         case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = l;
[scalac.plugin]                         case7(){
[scalac.plugin]                           if (x1.isInstanceOf[scala.collection.immutable.::[stasiak.karol.fimpp.RuntimeValue]]())
[scalac.plugin]                             {
[scalac.plugin]                               val x3: scala.collection.immutable.::[stasiak.karol.fimpp.RuntimeValue] = (x1.asInstanceOf[scala.collection.immutable.::[stasiak.karol.fimpp.RuntimeValue]](): scala.collection.immutable.::[stasiak.karol.fimpp.RuntimeValue]);
[scalac.plugin]                               if (x3.ne(null))
[scalac.plugin]                                 {
[scalac.plugin]                                   val x: stasiak.karol.fimpp.RuntimeValue = x3.hd$1();
[scalac.plugin]                                   val p2: List[stasiak.karol.fimpp.RuntimeValue] = x3.tl$1();
[scalac.plugin]                                   matchEnd6(x)
[scalac.plugin]                                 }
[scalac.plugin]                               else
[scalac.plugin]                                 case8()
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case8()
[scalac.plugin]                         };
[scalac.plugin]                         case8(){
[scalac.plugin]                           if (immutable.this.Nil.==(x1))
[scalac.plugin]                             {
[scalac.plugin]                               val x4: List[stasiak.karol.fimpp.RuntimeValue] = x1;
[scalac.plugin]                               matchEnd6(throw new stasiak.karol.fimpp.FimException("This list is empty"))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case9()
[scalac.plugin]                         };
[scalac.plugin]                         case9(){
[scalac.plugin]                           matchEnd6(throw new MatchError(x1))
[scalac.plugin]                         };
[scalac.plugin]                         matchEnd6(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]                           x
[scalac.plugin]                         }
[scalac.plugin]                       })
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case10()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case10()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case10()
[scalac.plugin]         else
[scalac.plugin]           case10()
[scalac.plugin]       };
[scalac.plugin]       case10(){
[scalac.plugin]         val o13: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o13.isEmpty().unary_!())
[scalac.plugin]           if (o13.get().!=(null).&&(o13.get().lengthCompare(1).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val array: stasiak.karol.fimpp.RuntimeValue = o13.get().apply(0);
[scalac.plugin]               if (array.isInstanceOf[stasiak.karol.fimpp.RuntimeArray]())
[scalac.plugin]                 {
[scalac.plugin]                   val x6: stasiak.karol.fimpp.RuntimeArray = (array.asInstanceOf[stasiak.karol.fimpp.RuntimeArray](): stasiak.karol.fimpp.RuntimeArray);
[scalac.plugin]                   matchEnd8(x6.get(1L))
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case12()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case12()
[scalac.plugin]         else
[scalac.plugin]           case12()
[scalac.plugin]       };
[scalac.plugin]       case12(){
[scalac.plugin]         matchEnd8(throw new stasiak.karol.fimpp.FimException("Trying to get a first element from something that is neither list nor book"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd8(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 471) def letters(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeArray = {
[scalac.plugin]       case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = args;
[scalac.plugin]       case7(){
[scalac.plugin]         val o9: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o9.isEmpty().unary_!())
[scalac.plugin]           if (o9.get().!=(null).&&(o9.get().lengthCompare(1).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = o9.get().apply(0);
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeString]())
[scalac.plugin]                 {
[scalac.plugin]                   val x4: stasiak.karol.fimpp.RuntimeString = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeString](): stasiak.karol.fimpp.RuntimeString);
[scalac.plugin]                   if (x4.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val l: String = x4.str();
[scalac.plugin]                       matchEnd6({
[scalac.plugin]                         val result: stasiak.karol.fimpp.RuntimeArray = new stasiak.karol.fimpp.RuntimeArray(RuntimeArray.apply$default$1());
[scalac.plugin]                         scala.this.Predef.augmentString(l).foreach[scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]]({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Char,result.array.type] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 472) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 473) final def apply(x: Char): scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] = result.array().+=(new stasiak.karol.fimpp.RuntimeString(x.toString()))
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): Char => result.array.type)
[scalac.plugin]                         });
[scalac.plugin]                         result
[scalac.plugin]                       })
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case8()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case8()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case8()
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd6(throw new stasiak.karol.fimpp.FimException("You can extract letters from only one string"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd6(x: stasiak.karol.fimpp.RuntimeArray){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 474) def characterByCode(args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeString = {
[scalac.plugin]       case <synthetic> val x1: List[stasiak.karol.fimpp.RuntimeValue] = args;
[scalac.plugin]       case7(){
[scalac.plugin]         val o9: Option[List[stasiak.karol.fimpp.RuntimeValue]] = immutable.this.List.unapplySeq[stasiak.karol.fimpp.RuntimeValue](x1);
[scalac.plugin]         if (o9.isEmpty().unary_!())
[scalac.plugin]           if (o9.get().!=(null).&&(o9.get().lengthCompare(1).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val p2: stasiak.karol.fimpp.RuntimeValue = o9.get().apply(0);
[scalac.plugin]               if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                 {
[scalac.plugin]                   val x4: stasiak.karol.fimpp.RuntimeNumber = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                   if (x4.ne(null))
[scalac.plugin]                     {
[scalac.plugin]                       val l: Long = x4.num();
[scalac.plugin]                       matchEnd6(new stasiak.karol.fimpp.RuntimeString(l.toChar().toString()))
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case8()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case8()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case8()
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd6(throw new stasiak.karol.fimpp.FimException("This is not a code of any character"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd6(x: stasiak.karol.fimpp.RuntimeString){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // Context.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   object RuntimeValue extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 475) def <init>(): stasiak.karol.fimpp.RuntimeValue.type = {
[scalac.plugin]       RuntimeValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 476) def fromJava(jObj: Any): Product with Serializable with stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       case <synthetic> val x1: Any = jObj;
[scalac.plugin]       case11(){
[scalac.plugin]         if (null.==(x1))
[scalac.plugin]           {
[scalac.plugin]             val x2: Any = x1;
[scalac.plugin]             matchEnd10(RuntimeNull)
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case12()
[scalac.plugin]       };
[scalac.plugin]       case12(){
[scalac.plugin]         if (x1.isInstanceOf[Int]())
[scalac.plugin]           {
[scalac.plugin]             val x3: Int = (x1.asInstanceOf[Int](): Int);
[scalac.plugin]             matchEnd10(new stasiak.karol.fimpp.RuntimeNumber(x3.toLong()))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case13()
[scalac.plugin]       };
[scalac.plugin]       case13(){
[scalac.plugin]         if (x1.isInstanceOf[Short]())
[scalac.plugin]           {
[scalac.plugin]             val x4: Short = (x1.asInstanceOf[Short](): Short);
[scalac.plugin]             matchEnd10(new stasiak.karol.fimpp.RuntimeNumber(x4.toLong()))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case14()
[scalac.plugin]       };
[scalac.plugin]       case14(){
[scalac.plugin]         if (x1.isInstanceOf[Byte]())
[scalac.plugin]           {
[scalac.plugin]             val x5: Byte = (x1.asInstanceOf[Byte](): Byte);
[scalac.plugin]             matchEnd10(new stasiak.karol.fimpp.RuntimeNumber(x5.toLong()))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case15()
[scalac.plugin]       };
[scalac.plugin]       case15(){
[scalac.plugin]         if (x1.isInstanceOf[Long]())
[scalac.plugin]           {
[scalac.plugin]             val x6: Long = (x1.asInstanceOf[Long](): Long);
[scalac.plugin]             matchEnd10(new stasiak.karol.fimpp.RuntimeNumber(x6))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case16()
[scalac.plugin]       };
[scalac.plugin]       case16(){
[scalac.plugin]         if (x1.isInstanceOf[Char]())
[scalac.plugin]           {
[scalac.plugin]             val x7: Char = (x1.asInstanceOf[Char](): Char);
[scalac.plugin]             matchEnd10(new stasiak.karol.fimpp.RuntimeString(x7.toString()))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case17()
[scalac.plugin]       };
[scalac.plugin]       case17(){
[scalac.plugin]         if (x1.isInstanceOf[String]())
[scalac.plugin]           {
[scalac.plugin]             val x8: String = (x1.asInstanceOf[String](): String);
[scalac.plugin]             matchEnd10(new stasiak.karol.fimpp.RuntimeString(x8))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case18()
[scalac.plugin]       };
[scalac.plugin]       case18(){
[scalac.plugin]         matchEnd10(new stasiak.karol.fimpp.RuntimeJavaObject(jObj))
[scalac.plugin]       };
[scalac.plugin]       matchEnd10(x: Product with Serializable with stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   sealed abstract trait RuntimeValue extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 477) def matches(clazz: Class[_]): Double;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 478) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Any;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 479) def toJava(): Any
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeString extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val str: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 480) <stable> <caseaccessor> <accessor> <paramaccessor> def str(): String = RuntimeString.this.str;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 481) def <init>(str: String): stasiak.karol.fimpp.RuntimeString = {
[scalac.plugin]       RuntimeString.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 482) override def toString(): String = RuntimeString.this.str();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 483) def matches(clazz: Class[_]): Double = {
[scalac.plugin]       case <synthetic> val x1: Class[_$3] = clazz;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.==(classOf[scala.Char]))
[scalac.plugin]           matchEnd3(if (RuntimeString.this.str().length().==(1))
[scalac.plugin]             1.0
[scalac.plugin]           else
[scalac.plugin]             0.0)
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Character]))
[scalac.plugin]           matchEnd3(if (RuntimeString.this.str().length().==(1))
[scalac.plugin]             1.0
[scalac.plugin]           else
[scalac.plugin]             0.0)
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.==(classOf[java.lang.String]))
[scalac.plugin]           matchEnd3(1.0)
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Object]))
[scalac.plugin]           matchEnd3(0.5)
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd3(0.0)
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Double){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 484) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Any = {
[scalac.plugin]       case <synthetic> val x1: Class[_$4] = clazz;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.==(classOf[scala.Char]))
[scalac.plugin]           matchEnd3(scala.this.Predef.augmentString(RuntimeString.this.str()).apply(0))
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Character]))
[scalac.plugin]           matchEnd3(scala.this.Predef.augmentString(RuntimeString.this.str()).apply(0))
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.==(classOf[java.lang.String]))
[scalac.plugin]           matchEnd3(RuntimeString.this.str())
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Object]))
[scalac.plugin]           matchEnd3(RuntimeString.this.str())
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd3(null)
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 485) def toJava(): String = RuntimeString.this.str();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 486) <synthetic> def copy(str: String): stasiak.karol.fimpp.RuntimeString = new stasiak.karol.fimpp.RuntimeString(str);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 487) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = RuntimeString.this.str();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 488) override <synthetic> def productPrefix(): String = "RuntimeString";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 489) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 490) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeString.this.str()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 491) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeString.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 492) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeString]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 493) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(RuntimeString.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 494) override <synthetic> def equals(x$1: Any): Boolean = RuntimeString.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeString]().&&({
[scalac.plugin]       <synthetic> val RuntimeString$1: stasiak.karol.fimpp.RuntimeString = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeString]();
[scalac.plugin]       RuntimeString.this.str().==(RuntimeString$1.str()).&&(RuntimeString$1.canEqual(RuntimeString.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeString extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.RuntimeString] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 495) def <init>(): stasiak.karol.fimpp.RuntimeString.type = {
[scalac.plugin]       RuntimeString.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 496) final override def toString(): String = "RuntimeString";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 497) case <synthetic> def apply(str: String): stasiak.karol.fimpp.RuntimeString = new stasiak.karol.fimpp.RuntimeString(str);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 498) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeString): Option[String] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[String](x$0.str());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 499) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeString
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeNumber extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val num: Long = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 500) <stable> <caseaccessor> <accessor> <paramaccessor> def num(): Long = RuntimeNumber.this.num;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 501) def <init>(num: Long): stasiak.karol.fimpp.RuntimeNumber = {
[scalac.plugin]       RuntimeNumber.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 502) override def toString(): String = RuntimeNumber.this.num().toString();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 503) def matches(clazz: Class[_]): Double = {
[scalac.plugin]       case <synthetic> val x1: Class[_$5] = clazz;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.==(classOf[scala.Long]).||(x1.==(classOf[java.lang.Long])))
[scalac.plugin]           matchEnd3(1.0)
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.==(classOf[scala.Int]).||(x1.==(classOf[java.lang.Integer])))
[scalac.plugin]           matchEnd3(1.0)
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Object]))
[scalac.plugin]           matchEnd3(0.3)
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         matchEnd3(0.0)
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Double){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 504) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Any = {
[scalac.plugin]       case <synthetic> val x1: Class[_$6] = clazz;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Integer]))
[scalac.plugin]           matchEnd3(RuntimeNumber.this.num().toInt())
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.==(classOf[scala.Int]))
[scalac.plugin]           matchEnd3(RuntimeNumber.this.num().toInt())
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Object]))
[scalac.plugin]           matchEnd3(RuntimeNumber.this.num().toInt())
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Long]))
[scalac.plugin]           matchEnd3(RuntimeNumber.this.num())
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         if (x1.==(classOf[scala.Long]))
[scalac.plugin]           matchEnd3(RuntimeNumber.this.num())
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         matchEnd3(null)
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 505) def toJava(): Int = RuntimeNumber.this.num().toInt();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 506) <synthetic> def copy(num: Long): stasiak.karol.fimpp.RuntimeNumber = new stasiak.karol.fimpp.RuntimeNumber(num);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 507) <synthetic> def copy$default$1(): Long @scala.annotation.unchecked.uncheckedVariance = RuntimeNumber.this.num();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 508) override <synthetic> def productPrefix(): String = "RuntimeNumber";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 509) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 510) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeNumber.this.num()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 511) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeNumber.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 512) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 513) override <synthetic> def hashCode(): Int = {
[scalac.plugin]       <synthetic> var acc: Int = -889275714;
[scalac.plugin]       acc = Statics.this.mix(acc, Statics.this.longHash(num()));
[scalac.plugin]       Statics.this.finalizeHash(acc, 1)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 514) override <synthetic> def equals(x$1: Any): Boolean = RuntimeNumber.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]().&&({
[scalac.plugin]       <synthetic> val RuntimeNumber$1: stasiak.karol.fimpp.RuntimeNumber = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber]();
[scalac.plugin]       RuntimeNumber.this.num().==(RuntimeNumber$1.num()).&&(RuntimeNumber$1.canEqual(RuntimeNumber.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeNumber extends scala.runtime.AbstractFunction1[Long,stasiak.karol.fimpp.RuntimeNumber] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 515) def <init>(): stasiak.karol.fimpp.RuntimeNumber.type = {
[scalac.plugin]       RuntimeNumber.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 516) final override def toString(): String = "RuntimeNumber";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 517) case <synthetic> def apply(num: Long): stasiak.karol.fimpp.RuntimeNumber = new stasiak.karol.fimpp.RuntimeNumber(num);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 518) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeNumber): Option[Long] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[Long](x$0.num());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 519) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeNumber
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeBoolean extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val truth: Boolean = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 520) <stable> <caseaccessor> <accessor> <paramaccessor> def truth(): Boolean = RuntimeBoolean.this.truth;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 521) def <init>(truth: Boolean): stasiak.karol.fimpp.RuntimeBoolean = {
[scalac.plugin]       RuntimeBoolean.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 522) override def toString(): String = if (RuntimeBoolean.this.truth())
[scalac.plugin]       "harmony"
[scalac.plugin]     else
[scalac.plugin]       "chaos";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 523) def matches(clazz: Class[_]): Double = {
[scalac.plugin]       case <synthetic> val x1: Class[_$7] = clazz;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Boolean]))
[scalac.plugin]           matchEnd3(1.0)
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.==(classOf[scala.Boolean]))
[scalac.plugin]           matchEnd3(1.0)
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.==(classOf[java.lang.Object]))
[scalac.plugin]           matchEnd3(0.3)
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         matchEnd3(0.0)
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Double){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 524) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Boolean = java.lang.Boolean.valueOf(RuntimeBoolean.this.truth());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 525) def toJava(): Boolean = RuntimeBoolean.this.truth();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 526) <synthetic> def copy(truth: Boolean): stasiak.karol.fimpp.RuntimeBoolean = new stasiak.karol.fimpp.RuntimeBoolean(truth);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 527) <synthetic> def copy$default$1(): Boolean @scala.annotation.unchecked.uncheckedVariance = RuntimeBoolean.this.truth();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 528) override <synthetic> def productPrefix(): String = "RuntimeBoolean";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 529) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 530) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeBoolean.this.truth()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 531) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeBoolean.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 532) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeBoolean]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 533) override <synthetic> def hashCode(): Int = {
[scalac.plugin]       <synthetic> var acc: Int = -889275714;
[scalac.plugin]       acc = Statics.this.mix(acc, if (truth())
[scalac.plugin]         1231
[scalac.plugin]       else
[scalac.plugin]         1237);
[scalac.plugin]       Statics.this.finalizeHash(acc, 1)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 534) override <synthetic> def equals(x$1: Any): Boolean = RuntimeBoolean.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeBoolean]().&&({
[scalac.plugin]       <synthetic> val RuntimeBoolean$1: stasiak.karol.fimpp.RuntimeBoolean = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeBoolean]();
[scalac.plugin]       RuntimeBoolean.this.truth().==(RuntimeBoolean$1.truth()).&&(RuntimeBoolean$1.canEqual(RuntimeBoolean.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeBoolean extends scala.runtime.AbstractFunction1[Boolean,stasiak.karol.fimpp.RuntimeBoolean] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 535) def <init>(): stasiak.karol.fimpp.RuntimeBoolean.type = {
[scalac.plugin]       RuntimeBoolean.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 536) final override def toString(): String = "RuntimeBoolean";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 537) case <synthetic> def apply(truth: Boolean): stasiak.karol.fimpp.RuntimeBoolean = new stasiak.karol.fimpp.RuntimeBoolean(truth);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 538) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeBoolean): Option[Boolean] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[Boolean](x$0.truth());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 539) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeBoolean
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeList extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val elems: List[stasiak.karol.fimpp.RuntimeValue] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 540) <stable> <caseaccessor> <accessor> <paramaccessor> def elems(): List[stasiak.karol.fimpp.RuntimeValue] = RuntimeList.this.elems;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 541) def <init>(elems: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeList = {
[scalac.plugin]       RuntimeList.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 542) override def toString(): String = if (RuntimeList.this.elems().isEmpty())
[scalac.plugin]       "nothing"
[scalac.plugin]     else
[scalac.plugin]       RuntimeList.this.elems().mkString(", ");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 543) def matches(clazz: Class[_]): Double = 0.0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 544) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Nothing = throw new stasiak.karol.fimpp.FimException("TODO");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 545) def toJava(): Nothing = throw new stasiak.karol.fimpp.FimException("TODO");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 546) <synthetic> def copy(elems: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeList = new stasiak.karol.fimpp.RuntimeList(elems);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 547) <synthetic> def copy$default$1(): List[stasiak.karol.fimpp.RuntimeValue] @scala.annotation.unchecked.uncheckedVariance = RuntimeList.this.elems();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 548) override <synthetic> def productPrefix(): String = "RuntimeList";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 549) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 550) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeList.this.elems()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 551) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeList.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 552) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeList]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 553) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(RuntimeList.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 554) override <synthetic> def equals(x$1: Any): Boolean = RuntimeList.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeList]().&&({
[scalac.plugin]       <synthetic> val RuntimeList$1: stasiak.karol.fimpp.RuntimeList = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeList]();
[scalac.plugin]       RuntimeList.this.elems().==(RuntimeList$1.elems()).&&(RuntimeList$1.canEqual(RuntimeList.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeList extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeList] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 555) def <init>(): stasiak.karol.fimpp.RuntimeList.type = {
[scalac.plugin]       RuntimeList.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 556) final override def toString(): String = "RuntimeList";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 557) case <synthetic> def apply(elems: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeList = new stasiak.karol.fimpp.RuntimeList(elems);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 558) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeList): Option[List[stasiak.karol.fimpp.RuntimeValue]] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[List[stasiak.karol.fimpp.RuntimeValue]](x$0.elems());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 559) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeList
[scalac.plugin]   };
[scalac.plugin]   case object RuntimeNull extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 560) def <init>(): stasiak.karol.fimpp.RuntimeNull.type = {
[scalac.plugin]       RuntimeNull.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 561) override def toString(): String = "nothing";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 562) def matches(clazz: Class[_]): Double = 0.8;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 563) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Null = null;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 564) def toJava(): Null = null;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 565) override <synthetic> def productPrefix(): String = "RuntimeNull";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 566) <synthetic> def productArity(): Int = 0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 567) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       case4(){
[scalac.plugin]         matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 568) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeNull.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 569) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeNull.type]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 570) override <synthetic> def hashCode(): Int = -1872427681;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 571) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeNull
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeFunction extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val function: stasiak.karol.fimpp.Function = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 572) <stable> <caseaccessor> <accessor> <paramaccessor> def function(): stasiak.karol.fimpp.Function = RuntimeFunction.this.function;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 573) def <init>(function: stasiak.karol.fimpp.Function): stasiak.karol.fimpp.RuntimeFunction = {
[scalac.plugin]       RuntimeFunction.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 574) override def toString(): String = "<function ".+(scala.this.Predef.augmentString(RuntimeFunction.this.function().name()).capitalize()).+(">");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 575) def matches(clazz: Class[_]): Double = {
[scalac.plugin]       case <synthetic> val x1: Class[_$13] = clazz;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.==(classOf[java.awt.event.ActionListener]))
[scalac.plugin]           matchEnd3(0.5)
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(0.0)
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Double){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 576) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Any = {
[scalac.plugin]       case <synthetic> val x1: Class[_$14] = clazz;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.==(classOf[java.awt.event.ActionListener]))
[scalac.plugin]           matchEnd3({
[scalac.plugin]             final class $anon extends Object with java.awt.event.ActionListener {
[scalac.plugin]               @callgraph.annotation.targetmethod(value = 577) def <init>(): anonymous class $anon = {
[scalac.plugin]                 $anon.super.<init>();
[scalac.plugin]                 ()
[scalac.plugin]               };
[scalac.plugin]               @callgraph.annotation.targetmethod(value = 578) def actionPerformed(p1: java.awt.event.ActionEvent): Unit = {
[scalac.plugin]                 RuntimeFunction.this.function().call(context, immutable.this.Nil);
[scalac.plugin]                 ()
[scalac.plugin]               }
[scalac.plugin]             };
[scalac.plugin]             new anonymous class $anon()
[scalac.plugin]           })
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(throw new stasiak.karol.fimpp.FimException("TODO"))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 579) def toJava(): Nothing = throw new stasiak.karol.fimpp.FimException("TODO");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 580) <synthetic> def copy(function: stasiak.karol.fimpp.Function): stasiak.karol.fimpp.RuntimeFunction = new stasiak.karol.fimpp.RuntimeFunction(function);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 581) <synthetic> def copy$default$1(): stasiak.karol.fimpp.Function @scala.annotation.unchecked.uncheckedVariance = RuntimeFunction.this.function();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 582) override <synthetic> def productPrefix(): String = "RuntimeFunction";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 583) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 584) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeFunction.this.function()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 585) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeFunction.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 586) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeFunction]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 587) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(RuntimeFunction.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 588) override <synthetic> def equals(x$1: Any): Boolean = RuntimeFunction.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeFunction]().&&({
[scalac.plugin]       <synthetic> val RuntimeFunction$1: stasiak.karol.fimpp.RuntimeFunction = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeFunction]();
[scalac.plugin]       RuntimeFunction.this.function().==(RuntimeFunction$1.function()).&&(RuntimeFunction$1.canEqual(RuntimeFunction.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeFunction extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Function,stasiak.karol.fimpp.RuntimeFunction] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 589) def <init>(): stasiak.karol.fimpp.RuntimeFunction.type = {
[scalac.plugin]       RuntimeFunction.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 590) final override def toString(): String = "RuntimeFunction";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 591) case <synthetic> def apply(function: stasiak.karol.fimpp.Function): stasiak.karol.fimpp.RuntimeFunction = new stasiak.karol.fimpp.RuntimeFunction(function);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 592) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeFunction): Option[stasiak.karol.fimpp.Function] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[stasiak.karol.fimpp.Function](x$0.function());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 593) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeFunction
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeBuiltin extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val function: List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 594) <stable> <caseaccessor> <accessor> <paramaccessor> def function(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue = RuntimeBuiltin.this.function;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 595) def <init>(function: List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue): stasiak.karol.fimpp.RuntimeBuiltin = {
[scalac.plugin]       RuntimeBuiltin.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 596) override def toString(): String = "<builtin function>";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 597) def matches(clazz: Class[_]): Double = 0.0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 598) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Nothing = throw new stasiak.karol.fimpp.FimException("TODO");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 599) def toJava(): Nothing = throw new stasiak.karol.fimpp.FimException("TODO");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 600) <synthetic> def copy(function: List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue): stasiak.karol.fimpp.RuntimeBuiltin = new stasiak.karol.fimpp.RuntimeBuiltin(function);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 601) <synthetic> def copy$default$1(): List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue @scala.annotation.unchecked.uncheckedVariance = RuntimeBuiltin.this.function();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 602) override <synthetic> def productPrefix(): String = "RuntimeBuiltin";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 603) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 604) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeBuiltin.this.function()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 605) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeBuiltin.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 606) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeBuiltin]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 607) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(RuntimeBuiltin.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 608) override <synthetic> def equals(x$1: Any): Boolean = RuntimeBuiltin.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeBuiltin]().&&({
[scalac.plugin]       <synthetic> val RuntimeBuiltin$1: stasiak.karol.fimpp.RuntimeBuiltin = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeBuiltin]();
[scalac.plugin]       RuntimeBuiltin.this.function().==(RuntimeBuiltin$1.function()).&&(RuntimeBuiltin$1.canEqual(RuntimeBuiltin.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeBuiltin extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue,stasiak.karol.fimpp.RuntimeBuiltin] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 609) def <init>(): stasiak.karol.fimpp.RuntimeBuiltin.type = {
[scalac.plugin]       RuntimeBuiltin.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 610) final override def toString(): String = "RuntimeBuiltin";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 611) case <synthetic> def apply(function: List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue): stasiak.karol.fimpp.RuntimeBuiltin = new stasiak.karol.fimpp.RuntimeBuiltin(function);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 612) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeBuiltin): Option[List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue](x$0.function());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 613) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeBuiltin
[scalac.plugin]   };
[scalac.plugin]   case object RuntimeGlobalReference extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 614) def <init>(): stasiak.karol.fimpp.RuntimeGlobalReference.type = {
[scalac.plugin]       RuntimeGlobalReference.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 615) override def toString(): String = "<function>";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 616) def matches(clazz: Class[_]): Nothing = throw new stasiak.karol.fimpp.FimException("I don\'t know what went wrong");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 617) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Nothing = throw new stasiak.karol.fimpp.FimException("I don\'t know what went wrong");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 618) def toJava(): Nothing = throw new stasiak.karol.fimpp.FimException("I don\'t know what went wrong");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 619) override <synthetic> def productPrefix(): String = "RuntimeGlobalReference";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 620) <synthetic> def productArity(): Int = 0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 621) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       case4(){
[scalac.plugin]         matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 622) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeGlobalReference.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 623) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeGlobalReference.type]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 624) override <synthetic> def hashCode(): Int = -731927536;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 625) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeGlobalReference
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeArray extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val array: scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 626) <stable> <caseaccessor> <accessor> <paramaccessor> def array(): scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] = RuntimeArray.this.array;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 627) def <init>(array: scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeArray = {
[scalac.plugin]       RuntimeArray.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 628) override def toString(): String = RuntimeArray.this.array().mkString(", ");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 629) def get(index: Long): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       if (index.<=(0))
[scalac.plugin]         throw new stasiak.karol.fimpp.FimException("Negative page")
[scalac.plugin]       else
[scalac.plugin]         ();
[scalac.plugin]       if (index.>(RuntimeArray.this.array().size()))
[scalac.plugin]         RuntimeNull
[scalac.plugin]       else
[scalac.plugin]         ();
[scalac.plugin]       RuntimeArray.this.array().apply(index.toInt().-(1))
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 630) def set(index: Long, value: stasiak.karol.fimpp.RuntimeValue): Unit = {
[scalac.plugin]       while$1(){
[scalac.plugin]         if (RuntimeArray.this.array().size().<(index))
[scalac.plugin]           {
[scalac.plugin]             RuntimeArray.this.array().+=(RuntimeNull);
[scalac.plugin]             while$1()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           ()
[scalac.plugin]       };
[scalac.plugin]       RuntimeArray.this.array().update(index.toInt().-(1), value)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 631) def size(): Int = RuntimeArray.this.array().size();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 632) def matches(clazz: Class[_]): Double = 0.0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 633) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Nothing = throw new stasiak.karol.fimpp.FimException("TODO");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 634) def toJava(): Nothing = throw new stasiak.karol.fimpp.FimException("TODO");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 635) <synthetic> def copy(array: scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeArray = new stasiak.karol.fimpp.RuntimeArray(array);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 636) <synthetic> def copy$default$1(): scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] @scala.annotation.unchecked.uncheckedVariance = RuntimeArray.this.array();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 637) override <synthetic> def productPrefix(): String = "RuntimeArray";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 638) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 639) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeArray.this.array()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 640) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeArray.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 641) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeArray]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 642) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(RuntimeArray.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 643) override <synthetic> def equals(x$1: Any): Boolean = RuntimeArray.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeArray]().&&({
[scalac.plugin]       <synthetic> val RuntimeArray$1: stasiak.karol.fimpp.RuntimeArray = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeArray]();
[scalac.plugin]       RuntimeArray.this.array().==(RuntimeArray$1.array()).&&(RuntimeArray$1.canEqual(RuntimeArray.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeArray extends scala.runtime.AbstractFunction1[scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue],stasiak.karol.fimpp.RuntimeArray] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 644) def <init>(): stasiak.karol.fimpp.RuntimeArray.type = {
[scalac.plugin]       RuntimeArray.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 645) final override def toString(): String = "RuntimeArray";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 646) case <synthetic> def apply(array: scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeArray = new stasiak.karol.fimpp.RuntimeArray(array);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 647) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeArray): Option[scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]](x$0.array());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 648) <synthetic> def apply$default$1(): scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] @scala.annotation.unchecked.uncheckedVariance = new scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 649) <synthetic> def <init>$default$1(): scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] @scala.annotation.unchecked.uncheckedVariance = new scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 650) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeArray
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeJavaObject extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val obj: Any = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 651) <stable> <caseaccessor> <accessor> <paramaccessor> def obj(): Any = RuntimeJavaObject.this.obj;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 652) def <init>(obj: Any): stasiak.karol.fimpp.RuntimeJavaObject = {
[scalac.plugin]       RuntimeJavaObject.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 653) override def toString(): String = "alien thing called ‘".+(RuntimeJavaObject.this.obj()).+("’");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 654) def matches(clazz: Class[_]): Double = if (clazz.isAssignableFrom(RuntimeJavaObject.this.obj().getClass()))
[scalac.plugin]       1.0
[scalac.plugin]     else
[scalac.plugin]       0.0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 655) def convertTo(context: stasiak.karol.fimpp.Context, clazz: Class[_]): Any = RuntimeJavaObject.this.obj();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 656) def toJava(): Any = RuntimeJavaObject.this.obj();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 657) <synthetic> def copy(obj: Any): stasiak.karol.fimpp.RuntimeJavaObject = new stasiak.karol.fimpp.RuntimeJavaObject(obj);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 658) <synthetic> def copy$default$1(): Any @scala.annotation.unchecked.uncheckedVariance = RuntimeJavaObject.this.obj();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 659) override <synthetic> def productPrefix(): String = "RuntimeJavaObject";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 660) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 661) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeJavaObject.this.obj()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 662) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeJavaObject.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 663) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 664) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(RuntimeJavaObject.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 665) override <synthetic> def equals(x$1: Any): Boolean = RuntimeJavaObject.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]().&&({
[scalac.plugin]       <synthetic> val RuntimeJavaObject$1: stasiak.karol.fimpp.RuntimeJavaObject = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeJavaObject]();
[scalac.plugin]       RuntimeJavaObject.this.obj().==(RuntimeJavaObject$1.obj()).&&(RuntimeJavaObject$1.canEqual(RuntimeJavaObject.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeJavaObject extends scala.runtime.AbstractFunction1[Any,stasiak.karol.fimpp.RuntimeJavaObject] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 666) def <init>(): stasiak.karol.fimpp.RuntimeJavaObject.type = {
[scalac.plugin]       RuntimeJavaObject.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 667) final override def toString(): String = "RuntimeJavaObject";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 668) case <synthetic> def apply(obj: Any): stasiak.karol.fimpp.RuntimeJavaObject = new stasiak.karol.fimpp.RuntimeJavaObject(obj);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 669) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeJavaObject): Option[Any] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[Any](x$0.obj());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 670) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeJavaObject
[scalac.plugin]   };
[scalac.plugin]   case class RuntimeClass extends Object with stasiak.karol.fimpp.RuntimeValue with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val clazz: Class[_] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 671) <stable> <caseaccessor> <accessor> <paramaccessor> def clazz(): Class[_] = RuntimeClass.this.clazz;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 672) def <init>(clazz: Class[_]): stasiak.karol.fimpp.RuntimeClass = {
[scalac.plugin]       RuntimeClass.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 673) override def toString(): String = "<class ".+(RuntimeClass.this.clazz().getCanonicalName()).+(">");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 674) def matches(clazz2: Class[_]): Double = if (clazz2.isAssignableFrom(classOf[java.lang.Class]))
[scalac.plugin]       1.0
[scalac.plugin]     else
[scalac.plugin]       0.0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 675) def convertTo(context: stasiak.karol.fimpp.Context, clazz2: Class[_]): Class[_] = RuntimeClass.this.clazz();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 676) def toJava(): Class[_] = RuntimeClass.this.clazz();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 677) <synthetic> def copy(clazz: Class[_]): stasiak.karol.fimpp.RuntimeClass = new stasiak.karol.fimpp.RuntimeClass(clazz);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 678) <synthetic> def copy$default$1(): Class[_$23] @scala.annotation.unchecked.uncheckedVariance forSome { type _$23 } = RuntimeClass.this.clazz();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 679) override <synthetic> def productPrefix(): String = "RuntimeClass";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 680) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 681) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => RuntimeClass.this.clazz()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 682) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](RuntimeClass.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 683) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.RuntimeClass]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 684) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(RuntimeClass.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 685) override <synthetic> def equals(x$1: Any): Boolean = RuntimeClass.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.RuntimeClass]().&&({
[scalac.plugin]       <synthetic> val RuntimeClass$1: stasiak.karol.fimpp.RuntimeClass = x$1.asInstanceOf[stasiak.karol.fimpp.RuntimeClass]();
[scalac.plugin]       RuntimeClass.this.clazz().==(RuntimeClass$1.clazz()).&&(RuntimeClass$1.canEqual(RuntimeClass.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object RuntimeClass extends scala.runtime.AbstractFunction1[Class[_],stasiak.karol.fimpp.RuntimeClass] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 686) def <init>(): stasiak.karol.fimpp.RuntimeClass.type = {
[scalac.plugin]       RuntimeClass.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 687) final override def toString(): String = "RuntimeClass";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 688) case <synthetic> def apply(clazz: Class[_]): stasiak.karol.fimpp.RuntimeClass = new stasiak.karol.fimpp.RuntimeClass(clazz);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 689) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.RuntimeClass): Option[Class[_$23]] forSome { type _$23 } = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[Class[_$23]](x$0.clazz());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 690) <synthetic> private def readResolve(): Object = fimpp.this.RuntimeClass
[scalac.plugin]   };
[scalac.plugin]   class Context extends Object {
[scalac.plugin]     <paramaccessor> private[this] val map: scala.collection.mutable.Map[String,stasiak.karol.fimpp.RuntimeValue] = _;
[scalac.plugin]     <paramaccessor> private[this] val globalMap: scala.collection.mutable.Map[String,stasiak.karol.fimpp.RuntimeValue] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 691) private def <init>(map: scala.collection.mutable.Map[String,stasiak.karol.fimpp.RuntimeValue], globalMap: scala.collection.mutable.Map[String,stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.Context = {
[scalac.plugin]       Context.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 692) def <init>(module: stasiak.karol.fimpp.Module): stasiak.karol.fimpp.Context = {
[scalac.plugin]       Context.this.<init>(scala.collection.mutable.Map.apply[String, stasiak.karol.fimpp.RuntimeValue](immutable.this.Nil), scala.collection.mutable.Map.apply[String, stasiak.karol.fimpp.RuntimeValue](immutable.this.Nil));
[scalac.plugin]       BuiltInConstants.apply(Context.this.globalMap);
[scalac.plugin]       BuiltInFunctions.apply(Context.this.globalMap);
[scalac.plugin]       module.functions().foreach[Unit]({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Function,Unit] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 693) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 694) final def apply(f: stasiak.karol.fimpp.Function): Unit = if (f.!=(null))
[scalac.plugin]             Context.this.globalMap.update(f.name(), new stasiak.karol.fimpp.RuntimeFunction(f))
[scalac.plugin]           else
[scalac.plugin]             ()
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): stasiak.karol.fimpp.Function => Unit)
[scalac.plugin]       });
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 695) def getLocal(name: String): stasiak.karol.fimpp.RuntimeValue = Context.this.map.get(name).getOrElse[stasiak.karol.fimpp.RuntimeValue]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.RuntimeString] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 696) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 697) final def apply(): stasiak.karol.fimpp.RuntimeString = new stasiak.karol.fimpp.RuntimeString(scala.this.Predef.augmentString(name).capitalize())
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.RuntimeString)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 698) def getGlobal(name: String): stasiak.karol.fimpp.RuntimeValue = Context.this.globalMap.get(name).getOrElse[stasiak.karol.fimpp.RuntimeValue]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.RuntimeString] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 699) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 700) final def apply(): stasiak.karol.fimpp.RuntimeString = new stasiak.karol.fimpp.RuntimeString(scala.this.Predef.augmentString(name).capitalize())
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.RuntimeString)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 701) def get(name: String): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       var rc8: Boolean = false;
[scalac.plugin]       var x3: Some[stasiak.karol.fimpp.RuntimeValue] = null.asInstanceOf[Some[stasiak.karol.fimpp.RuntimeValue]]();
[scalac.plugin]       {
[scalac.plugin]         case <synthetic> val x1: Option[stasiak.karol.fimpp.RuntimeValue] = Context.this.map.get(name);
[scalac.plugin]         case10(){
[scalac.plugin]           if (scala.None.==(x1))
[scalac.plugin]             {
[scalac.plugin]               val x5: Option[stasiak.karol.fimpp.RuntimeValue] = x1;
[scalac.plugin]               matchEnd9(Context.this.getGlobal(name))
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case11()
[scalac.plugin]         };
[scalac.plugin]         case11(){
[scalac.plugin]           if (x1.isInstanceOf[Some[stasiak.karol.fimpp.RuntimeValue]]())
[scalac.plugin]             {
[scalac.plugin]               rc8 = true;
[scalac.plugin]               x3 = (x1.asInstanceOf[Some[stasiak.karol.fimpp.RuntimeValue]](): Some[stasiak.karol.fimpp.RuntimeValue]);
[scalac.plugin]               if (x3.ne(null))
[scalac.plugin]                 {
[scalac.plugin]                   val p2: stasiak.karol.fimpp.RuntimeValue = x3.x();
[scalac.plugin]                   if (RuntimeGlobalReference.==(p2))
[scalac.plugin]                     {
[scalac.plugin]                       val x6: stasiak.karol.fimpp.RuntimeValue = p2;
[scalac.plugin]                       matchEnd9(Context.this.getGlobal(name))
[scalac.plugin]                     }
[scalac.plugin]                   else
[scalac.plugin]                     case12()
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case12()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case12()
[scalac.plugin]         };
[scalac.plugin]         case12(){
[scalac.plugin]           if (rc8)
[scalac.plugin]             if (x3.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val x: stasiak.karol.fimpp.RuntimeValue = x3.x();
[scalac.plugin]                 matchEnd9(x)
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case13()
[scalac.plugin]           else
[scalac.plugin]             case13()
[scalac.plugin]         };
[scalac.plugin]         case13(){
[scalac.plugin]           matchEnd9(throw new MatchError(x1))
[scalac.plugin]         };
[scalac.plugin]         matchEnd9(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]           x
[scalac.plugin]         }
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 702) def set(name: String, value: stasiak.karol.fimpp.RuntimeValue): Unit = if (Context.this.map.get(name).==(new Some[stasiak.karol.fimpp.RuntimeGlobalReference.type](RuntimeGlobalReference)))
[scalac.plugin]       Context.this.globalMap.update(name, value)
[scalac.plugin]     else
[scalac.plugin]       Context.this.map.update(name, value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 703) def treatAsGlobal(name: String): Unit = Context.this.map.update(name, RuntimeGlobalReference);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 704) def forFunctionCall(f: stasiak.karol.fimpp.Function, args: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.Context = new stasiak.karol.fimpp.Context(scala.collection.mutable.Map.apply[String, stasiak.karol.fimpp.RuntimeValue](f.argNames().zip[String, stasiak.karol.fimpp.RuntimeValue, List[(String, stasiak.karol.fimpp.RuntimeValue)]](args, immutable.this.List.canBuildFrom[(String, stasiak.karol.fimpp.RuntimeValue)]())), Context.this.globalMap)
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // ErrorMessageProvider.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   abstract trait ErrorMessageProvider extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 705) def syntaxError(functionName: String): String;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 706) def invalidIdentifier(id: String): String;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 707) def mismatchedFunctionNameInFooter(expected: String, found: String): String;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 708) def unknownError(): String
[scalac.plugin]   };
[scalac.plugin]   object Trollestia extends Object with stasiak.karol.fimpp.ErrorMessageProvider {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 709) def <init>(): stasiak.karol.fimpp.Trollestia.type = {
[scalac.plugin]       Trollestia.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 710) def syntaxError(functionName: String): String = "Now say, do you like mmm-syntax errors? You have one in function ‘".+(functionName).+("’ after all. No? So let me get it straight: you\'re a mmm-biatch that does not like syntax errors. ").+("That\'s good, because there are no syntax errors... ON THE MOOOON!");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 711) def mismatchedFunctionNameInFooter(expected: String, found: String): String = "This function is a changeling! At the beginning it was named ‘".+(expected).+("’, and now it\'s ‘").+(found).+("’!");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 712) def unknownError(): String = "To the moon with that code!";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 713) def invalidIdentifier(id: String): String = "‘".+(scala.this.Predef.augmentString(id).capitalize()).+("’ ain\'t no pony I\'ve heard of. Do they have tea parties with ‘").+(scala.this.Predef.augmentString(id).capitalize()).+("’?")
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // Expr.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   sealed abstract trait Expr extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 714) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeValue
[scalac.plugin]   };
[scalac.plugin]   case object EmptyExpr extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 715) def <init>(): stasiak.karol.fimpp.EmptyExpr.type = {
[scalac.plugin]       EmptyExpr.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 716) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeNull.type = RuntimeNull;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 717) override <synthetic> def productPrefix(): String = "EmptyExpr";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 718) <synthetic> def productArity(): Int = 0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 719) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       case4(){
[scalac.plugin]         matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 720) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](EmptyExpr.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 721) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.EmptyExpr.type]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 722) override <synthetic> def hashCode(): Int = 583558338;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 723) override <synthetic> def toString(): String = "EmptyExpr";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 724) <synthetic> private def readResolve(): Object = fimpp.this.EmptyExpr
[scalac.plugin]   };
[scalac.plugin]   case class NumberValue extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val value: Long = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 725) <stable> <caseaccessor> <accessor> <paramaccessor> def value(): Long = NumberValue.this.value;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 726) def <init>(value: Long): stasiak.karol.fimpp.NumberValue = {
[scalac.plugin]       NumberValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 727) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeNumber = new stasiak.karol.fimpp.RuntimeNumber(NumberValue.this.value());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 728) <synthetic> def copy(value: Long): stasiak.karol.fimpp.NumberValue = new stasiak.karol.fimpp.NumberValue(value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 729) <synthetic> def copy$default$1(): Long @scala.annotation.unchecked.uncheckedVariance = NumberValue.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 730) override <synthetic> def productPrefix(): String = "NumberValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 731) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 732) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => NumberValue.this.value()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 733) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](NumberValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 734) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.NumberValue]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 735) override <synthetic> def hashCode(): Int = {
[scalac.plugin]       <synthetic> var acc: Int = -889275714;
[scalac.plugin]       acc = Statics.this.mix(acc, Statics.this.longHash(value()));
[scalac.plugin]       Statics.this.finalizeHash(acc, 1)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 736) override <synthetic> def toString(): String = ScalaRunTime.this._toString(NumberValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 737) override <synthetic> def equals(x$1: Any): Boolean = NumberValue.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.NumberValue]().&&({
[scalac.plugin]       <synthetic> val NumberValue$1: stasiak.karol.fimpp.NumberValue = x$1.asInstanceOf[stasiak.karol.fimpp.NumberValue]();
[scalac.plugin]       NumberValue.this.value().==(NumberValue$1.value()).&&(NumberValue$1.canEqual(NumberValue.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object NumberValue extends scala.runtime.AbstractFunction1[Long,stasiak.karol.fimpp.NumberValue] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 738) def <init>(): stasiak.karol.fimpp.NumberValue.type = {
[scalac.plugin]       NumberValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 739) final override def toString(): String = "NumberValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 740) case <synthetic> def apply(value: Long): stasiak.karol.fimpp.NumberValue = new stasiak.karol.fimpp.NumberValue(value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 741) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.NumberValue): Option[Long] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[Long](x$0.value());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 742) <synthetic> private def readResolve(): Object = fimpp.this.NumberValue
[scalac.plugin]   };
[scalac.plugin]   case class StringValue extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val value: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 743) <stable> <caseaccessor> <accessor> <paramaccessor> def value(): String = StringValue.this.value;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 744) def <init>(value: String): stasiak.karol.fimpp.StringValue = {
[scalac.plugin]       StringValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 745) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeString = new stasiak.karol.fimpp.RuntimeString(StringValue.this.value());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 746) <synthetic> def copy(value: String): stasiak.karol.fimpp.StringValue = new stasiak.karol.fimpp.StringValue(value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 747) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = StringValue.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 748) override <synthetic> def productPrefix(): String = "StringValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 749) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 750) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => StringValue.this.value()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 751) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](StringValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 752) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.StringValue]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 753) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(StringValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 754) override <synthetic> def toString(): String = ScalaRunTime.this._toString(StringValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 755) override <synthetic> def equals(x$1: Any): Boolean = StringValue.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.StringValue]().&&({
[scalac.plugin]       <synthetic> val StringValue$1: stasiak.karol.fimpp.StringValue = x$1.asInstanceOf[stasiak.karol.fimpp.StringValue]();
[scalac.plugin]       StringValue.this.value().==(StringValue$1.value()).&&(StringValue$1.canEqual(StringValue.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object StringValue extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.StringValue] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 756) def <init>(): stasiak.karol.fimpp.StringValue.type = {
[scalac.plugin]       StringValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 757) final override def toString(): String = "StringValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 758) case <synthetic> def apply(value: String): stasiak.karol.fimpp.StringValue = new stasiak.karol.fimpp.StringValue(value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 759) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.StringValue): Option[String] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[String](x$0.value());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 760) <synthetic> private def readResolve(): Object = fimpp.this.StringValue
[scalac.plugin]   };
[scalac.plugin]   case class BooleanValue extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val b: Boolean = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 761) <stable> <caseaccessor> <accessor> <paramaccessor> def b(): Boolean = BooleanValue.this.b;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 762) def <init>(b: Boolean): stasiak.karol.fimpp.BooleanValue = {
[scalac.plugin]       BooleanValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 763) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeBoolean = new stasiak.karol.fimpp.RuntimeBoolean(BooleanValue.this.b());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 764) <synthetic> def copy(b: Boolean): stasiak.karol.fimpp.BooleanValue = new stasiak.karol.fimpp.BooleanValue(b);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 765) <synthetic> def copy$default$1(): Boolean @scala.annotation.unchecked.uncheckedVariance = BooleanValue.this.b();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 766) override <synthetic> def productPrefix(): String = "BooleanValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 767) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 768) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => BooleanValue.this.b()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 769) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](BooleanValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 770) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.BooleanValue]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 771) override <synthetic> def hashCode(): Int = {
[scalac.plugin]       <synthetic> var acc: Int = -889275714;
[scalac.plugin]       acc = Statics.this.mix(acc, if (b())
[scalac.plugin]         1231
[scalac.plugin]       else
[scalac.plugin]         1237);
[scalac.plugin]       Statics.this.finalizeHash(acc, 1)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 772) override <synthetic> def toString(): String = ScalaRunTime.this._toString(BooleanValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 773) override <synthetic> def equals(x$1: Any): Boolean = BooleanValue.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.BooleanValue]().&&({
[scalac.plugin]       <synthetic> val BooleanValue$1: stasiak.karol.fimpp.BooleanValue = x$1.asInstanceOf[stasiak.karol.fimpp.BooleanValue]();
[scalac.plugin]       BooleanValue.this.b().==(BooleanValue$1.b()).&&(BooleanValue$1.canEqual(BooleanValue.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object BooleanValue extends scala.runtime.AbstractFunction1[Boolean,stasiak.karol.fimpp.BooleanValue] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 774) def <init>(): stasiak.karol.fimpp.BooleanValue.type = {
[scalac.plugin]       BooleanValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 775) final override def toString(): String = "BooleanValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 776) case <synthetic> def apply(b: Boolean): stasiak.karol.fimpp.BooleanValue = new stasiak.karol.fimpp.BooleanValue(b);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 777) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.BooleanValue): Option[Boolean] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[Boolean](x$0.b());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 778) <synthetic> private def readResolve(): Object = fimpp.this.BooleanValue
[scalac.plugin]   };
[scalac.plugin]   case class Concatenation extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val exprs: List[stasiak.karol.fimpp.Expr] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 779) <stable> <caseaccessor> <accessor> <paramaccessor> def exprs(): List[stasiak.karol.fimpp.Expr] = Concatenation.this.exprs;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 780) def <init>(exprs: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Concatenation = {
[scalac.plugin]       Concatenation.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 781) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeString = new stasiak.karol.fimpp.RuntimeString(Concatenation.this.exprs().map[String, List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,String] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 782) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 783) final def apply(x$1: stasiak.karol.fimpp.Expr): String = x$1.eval(context).toString()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => String)
[scalac.plugin] }, immutable.this.List.canBuildFrom[String]()).mkString(""));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 784) <synthetic> def copy(exprs: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Concatenation = new stasiak.karol.fimpp.Concatenation(exprs);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 785) <synthetic> def copy$default$1(): List[stasiak.karol.fimpp.Expr] @scala.annotation.unchecked.uncheckedVariance = Concatenation.this.exprs();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 786) override <synthetic> def productPrefix(): String = "Concatenation";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 787) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 788) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Concatenation.this.exprs()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 789) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Concatenation.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 790) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Concatenation]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 791) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Concatenation.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 792) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Concatenation.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 793) override <synthetic> def equals(x$1: Any): Boolean = Concatenation.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Concatenation]().&&({
[scalac.plugin]       <synthetic> val Concatenation$1: stasiak.karol.fimpp.Concatenation = x$1.asInstanceOf[stasiak.karol.fimpp.Concatenation]();
[scalac.plugin]       Concatenation.this.exprs().==(Concatenation$1.exprs()).&&(Concatenation$1.canEqual(Concatenation.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Concatenation extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.Concatenation] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 794) def <init>(): stasiak.karol.fimpp.Concatenation.type = {
[scalac.plugin]       Concatenation.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 795) final override def toString(): String = "Concatenation";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 796) case <synthetic> def apply(exprs: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Concatenation = new stasiak.karol.fimpp.Concatenation(exprs);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 797) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Concatenation): Option[List[stasiak.karol.fimpp.Expr]] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[List[stasiak.karol.fimpp.Expr]](x$0.exprs());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 798) <synthetic> private def readResolve(): Object = fimpp.this.Concatenation
[scalac.plugin]   };
[scalac.plugin]   case class ListExpression extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val elems: List[stasiak.karol.fimpp.Expr] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 799) <stable> <caseaccessor> <accessor> <paramaccessor> def elems(): List[stasiak.karol.fimpp.Expr] = ListExpression.this.elems;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 800) def <init>(elems: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ListExpression = {
[scalac.plugin]       ListExpression.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 801) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeList = new stasiak.karol.fimpp.RuntimeList(ListExpression.this.elems().map[stasiak.karol.fimpp.RuntimeValue, List[stasiak.karol.fimpp.RuntimeValue]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.RuntimeValue] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 802) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 803) final def apply(x$2: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.RuntimeValue = x$2.eval(context)
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.RuntimeValue)
[scalac.plugin]     }, immutable.this.List.canBuildFrom[stasiak.karol.fimpp.RuntimeValue]()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 804) <synthetic> def copy(elems: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ListExpression = new stasiak.karol.fimpp.ListExpression(elems);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 805) <synthetic> def copy$default$1(): List[stasiak.karol.fimpp.Expr] @scala.annotation.unchecked.uncheckedVariance = ListExpression.this.elems();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 806) override <synthetic> def productPrefix(): String = "ListExpression";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 807) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 808) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => ListExpression.this.elems()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 809) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](ListExpression.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 810) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.ListExpression]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 811) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(ListExpression.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 812) override <synthetic> def toString(): String = ScalaRunTime.this._toString(ListExpression.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 813) override <synthetic> def equals(x$1: Any): Boolean = ListExpression.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.ListExpression]().&&({
[scalac.plugin]       <synthetic> val ListExpression$1: stasiak.karol.fimpp.ListExpression = x$1.asInstanceOf[stasiak.karol.fimpp.ListExpression]();
[scalac.plugin]       ListExpression.this.elems().==(ListExpression$1.elems()).&&(ListExpression$1.canEqual(ListExpression.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object ListExpression extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.ListExpression] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 814) def <init>(): stasiak.karol.fimpp.ListExpression.type = {
[scalac.plugin]       ListExpression.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 815) final override def toString(): String = "ListExpression";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 816) case <synthetic> def apply(elems: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ListExpression = new stasiak.karol.fimpp.ListExpression(elems);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 817) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.ListExpression): Option[List[stasiak.karol.fimpp.Expr]] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[List[stasiak.karol.fimpp.Expr]](x$0.elems());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 818) <synthetic> private def readResolve(): Object = fimpp.this.ListExpression
[scalac.plugin]   };
[scalac.plugin]   case class VariableValue extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val ident: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 819) <stable> <caseaccessor> <accessor> <paramaccessor> def ident(): String = VariableValue.this.ident;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 820) def <init>(ident: String): stasiak.karol.fimpp.VariableValue = {
[scalac.plugin]       VariableValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 821) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeValue = context.get(VariableValue.this.ident());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 822) <synthetic> def copy(ident: String): stasiak.karol.fimpp.VariableValue = new stasiak.karol.fimpp.VariableValue(ident);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 823) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = VariableValue.this.ident();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 824) override <synthetic> def productPrefix(): String = "VariableValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 825) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 826) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => VariableValue.this.ident()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 827) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](VariableValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 828) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.VariableValue]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 829) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(VariableValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 830) override <synthetic> def toString(): String = ScalaRunTime.this._toString(VariableValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 831) override <synthetic> def equals(x$1: Any): Boolean = VariableValue.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.VariableValue]().&&({
[scalac.plugin]       <synthetic> val VariableValue$1: stasiak.karol.fimpp.VariableValue = x$1.asInstanceOf[stasiak.karol.fimpp.VariableValue]();
[scalac.plugin]       VariableValue.this.ident().==(VariableValue$1.ident()).&&(VariableValue$1.canEqual(VariableValue.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object VariableValue extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.VariableValue] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 832) def <init>(): stasiak.karol.fimpp.VariableValue.type = {
[scalac.plugin]       VariableValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 833) final override def toString(): String = "VariableValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 834) case <synthetic> def apply(ident: String): stasiak.karol.fimpp.VariableValue = new stasiak.karol.fimpp.VariableValue(ident);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 835) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.VariableValue): Option[String] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[String](x$0.ident());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 836) <synthetic> private def readResolve(): Object = fimpp.this.VariableValue
[scalac.plugin]   };
[scalac.plugin]   case object NullValue extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 837) def <init>(): stasiak.karol.fimpp.NullValue.type = {
[scalac.plugin]       NullValue.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 838) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeNull.type = RuntimeNull;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 839) override <synthetic> def productPrefix(): String = "NullValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 840) <synthetic> def productArity(): Int = 0;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 841) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       case4(){
[scalac.plugin]         matchEnd3(throw new IndexOutOfBoundsException(x$1.toString()))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 842) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](NullValue.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 843) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.NullValue.type]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 844) override <synthetic> def hashCode(): Int = -1256630262;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 845) override <synthetic> def toString(): String = "NullValue";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 846) <synthetic> private def readResolve(): Object = fimpp.this.NullValue
[scalac.plugin]   };
[scalac.plugin]   case class FunctionCall extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val function: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 847) <stable> <caseaccessor> <accessor> <paramaccessor> def function(): String = FunctionCall.this.function;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val args: List[stasiak.karol.fimpp.Expr] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 848) <stable> <caseaccessor> <accessor> <paramaccessor> def args(): List[stasiak.karol.fimpp.Expr] = FunctionCall.this.args;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 849) def <init>(function: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.FunctionCall = {
[scalac.plugin]       FunctionCall.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 850) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = context.get(FunctionCall.this.function());
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeFunction]())
[scalac.plugin]           {
[scalac.plugin]             val x2: stasiak.karol.fimpp.RuntimeFunction = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeFunction](): stasiak.karol.fimpp.RuntimeFunction);
[scalac.plugin]             if (x2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val f: stasiak.karol.fimpp.Function = x2.function();
[scalac.plugin]                 matchEnd5(f.call(context, FunctionCall.this.args().map[stasiak.karol.fimpp.RuntimeValue, List[stasiak.karol.fimpp.RuntimeValue]]({
[scalac.plugin]                   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.RuntimeValue] with Serializable {
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 851) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                       $anonfun.super.<init>();
[scalac.plugin]                       ()
[scalac.plugin]                     };
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 852) final def apply(x$3: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.RuntimeValue = x$3.eval(context)
[scalac.plugin]                   };
[scalac.plugin]                   (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.RuntimeValue)
[scalac.plugin]                 }, immutable.this.List.canBuildFrom[stasiak.karol.fimpp.RuntimeValue]())))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeBuiltin]())
[scalac.plugin]           {
[scalac.plugin]             val x3: stasiak.karol.fimpp.RuntimeBuiltin = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeBuiltin](): stasiak.karol.fimpp.RuntimeBuiltin);
[scalac.plugin]             if (x3.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val f: List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue = x3.function();
[scalac.plugin]                 matchEnd5(f.apply(FunctionCall.this.args().map[stasiak.karol.fimpp.RuntimeValue, List[stasiak.karol.fimpp.RuntimeValue]]({
[scalac.plugin]                   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.RuntimeValue] with Serializable {
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 853) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                       $anonfun.super.<init>();
[scalac.plugin]                       ()
[scalac.plugin]                     };
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 854) final def apply(x$4: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.RuntimeValue = x$4.eval(context)
[scalac.plugin]                   };
[scalac.plugin]                   (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.RuntimeValue)
[scalac.plugin]                 }, immutable.this.List.canBuildFrom[stasiak.karol.fimpp.RuntimeValue]())))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case8()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd5(throw new stasiak.karol.fimpp.FimException("Cannot call ".+(x1)))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 855) <synthetic> def copy(function: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.FunctionCall = new stasiak.karol.fimpp.FunctionCall(function, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 856) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = FunctionCall.this.function();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 857) <synthetic> def copy$default$2(): List[stasiak.karol.fimpp.Expr] @scala.annotation.unchecked.uncheckedVariance = FunctionCall.this.args();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 858) override <synthetic> def productPrefix(): String = "FunctionCall";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 859) <synthetic> def productArity(): Int = 2;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 860) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => FunctionCall.this.function()
[scalac.plugin]         case 1 => FunctionCall.this.args()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 861) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](FunctionCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 862) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.FunctionCall]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 863) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(FunctionCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 864) override <synthetic> def toString(): String = ScalaRunTime.this._toString(FunctionCall.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 865) override <synthetic> def equals(x$1: Any): Boolean = FunctionCall.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.FunctionCall]().&&({
[scalac.plugin]       <synthetic> val FunctionCall$1: stasiak.karol.fimpp.FunctionCall = x$1.asInstanceOf[stasiak.karol.fimpp.FunctionCall]();
[scalac.plugin]       FunctionCall.this.function().==(FunctionCall$1.function()).&&(FunctionCall.this.args().==(FunctionCall$1.args())).&&(FunctionCall$1.canEqual(FunctionCall.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object FunctionCall extends scala.runtime.AbstractFunction2[String,List[stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.FunctionCall] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 866) def <init>(): stasiak.karol.fimpp.FunctionCall.type = {
[scalac.plugin]       FunctionCall.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 867) final override def toString(): String = "FunctionCall";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 868) case <synthetic> def apply(function: String, args: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.FunctionCall = new stasiak.karol.fimpp.FunctionCall(function, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 869) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.FunctionCall): Option[(String, List[stasiak.karol.fimpp.Expr])] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, List[stasiak.karol.fimpp.Expr])](new (String, List[stasiak.karol.fimpp.Expr])(x$0.function(), x$0.args()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 870) <synthetic> private def readResolve(): Object = fimpp.this.FunctionCall
[scalac.plugin]   };
[scalac.plugin]   case class FunctionCallEach extends Object with stasiak.karol.fimpp.Expr with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val function: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 871) <stable> <caseaccessor> <accessor> <paramaccessor> def function(): String = FunctionCallEach.this.function;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val args: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 872) <stable> <caseaccessor> <accessor> <paramaccessor> def args(): stasiak.karol.fimpp.Expr = FunctionCallEach.this.args;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 873) def <init>(function: String, args: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.FunctionCallEach = {
[scalac.plugin]       FunctionCallEach.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 874) def eval(context: stasiak.karol.fimpp.Context): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = context.get(FunctionCallEach.this.function());
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeFunction]())
[scalac.plugin]           {
[scalac.plugin]             val x2: stasiak.karol.fimpp.RuntimeFunction = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeFunction](): stasiak.karol.fimpp.RuntimeFunction);
[scalac.plugin]             if (x2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val f: stasiak.karol.fimpp.Function = x2.function();
[scalac.plugin]                 matchEnd5({
[scalac.plugin]                   val e: stasiak.karol.fimpp.RuntimeValue = FunctionCallEach.this.args().eval(context);
[scalac.plugin]                   {
[scalac.plugin]                     case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = e;
[scalac.plugin]                     case6(){
[scalac.plugin]                       if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]                         {
[scalac.plugin]                           val x2: stasiak.karol.fimpp.RuntimeList = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                           if (x2.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val es: List[stasiak.karol.fimpp.RuntimeValue] = x2.elems();
[scalac.plugin]                               matchEnd5(f.call(context, es))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case7()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case7()
[scalac.plugin]                     };
[scalac.plugin]                     case7(){
[scalac.plugin]                       if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeArray]())
[scalac.plugin]                         {
[scalac.plugin]                           val x3: stasiak.karol.fimpp.RuntimeArray = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeArray](): stasiak.karol.fimpp.RuntimeArray);
[scalac.plugin]                           if (x3.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val es: scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] = x3.array();
[scalac.plugin]                               matchEnd5(f.call(context, es.toList()))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case8()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case8()
[scalac.plugin]                     };
[scalac.plugin]                     case8(){
[scalac.plugin]                       matchEnd5(throw new stasiak.karol.fimpp.FimException("This are not multiple arguments"))
[scalac.plugin]                     };
[scalac.plugin]                     matchEnd5(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]                       x
[scalac.plugin]                     }
[scalac.plugin]                   }
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeBuiltin]())
[scalac.plugin]           {
[scalac.plugin]             val x3: stasiak.karol.fimpp.RuntimeBuiltin = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeBuiltin](): stasiak.karol.fimpp.RuntimeBuiltin);
[scalac.plugin]             if (x3.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val f: List[stasiak.karol.fimpp.RuntimeValue] => stasiak.karol.fimpp.RuntimeValue = x3.function();
[scalac.plugin]                 matchEnd5({
[scalac.plugin]                   val e: stasiak.karol.fimpp.RuntimeValue = FunctionCallEach.this.args().eval(context);
[scalac.plugin]                   {
[scalac.plugin]                     case <synthetic> val x1: stasiak.karol.fimpp.RuntimeValue = e;
[scalac.plugin]                     case6(){
[scalac.plugin]                       if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]                         {
[scalac.plugin]                           val x2: stasiak.karol.fimpp.RuntimeList = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                           if (x2.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val es: List[stasiak.karol.fimpp.RuntimeValue] = x2.elems();
[scalac.plugin]                               matchEnd5(f.apply(es))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case7()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case7()
[scalac.plugin]                     };
[scalac.plugin]                     case7(){
[scalac.plugin]                       if (x1.isInstanceOf[stasiak.karol.fimpp.RuntimeArray]())
[scalac.plugin]                         {
[scalac.plugin]                           val x3: stasiak.karol.fimpp.RuntimeArray = (x1.asInstanceOf[stasiak.karol.fimpp.RuntimeArray](): stasiak.karol.fimpp.RuntimeArray);
[scalac.plugin]                           if (x3.ne(null))
[scalac.plugin]                             {
[scalac.plugin]                               val es: scala.collection.mutable.ListBuffer[stasiak.karol.fimpp.RuntimeValue] = x3.array();
[scalac.plugin]                               matchEnd5(f.apply(es.toList()))
[scalac.plugin]                             }
[scalac.plugin]                           else
[scalac.plugin]                             case8()
[scalac.plugin]                         }
[scalac.plugin]                       else
[scalac.plugin]                         case8()
[scalac.plugin]                     };
[scalac.plugin]                     case8(){
[scalac.plugin]                       matchEnd5(throw new stasiak.karol.fimpp.FimException("This are not multiple arguments"))
[scalac.plugin]                     };
[scalac.plugin]                     matchEnd5(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]                       x
[scalac.plugin]                     }
[scalac.plugin]                   }
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case8()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case8()
[scalac.plugin]       };
[scalac.plugin]       case8(){
[scalac.plugin]         matchEnd5(throw new stasiak.karol.fimpp.FimException("Cannot call ".+(x1)))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: stasiak.karol.fimpp.RuntimeValue){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 875) <synthetic> def copy(function: String, args: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.FunctionCallEach = new stasiak.karol.fimpp.FunctionCallEach(function, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 876) <synthetic> def copy$default$1(): String @scala.annotation.unchecked.uncheckedVariance = FunctionCallEach.this.function();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 877) <synthetic> def copy$default$2(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = FunctionCallEach.this.args();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 878) override <synthetic> def productPrefix(): String = "FunctionCallEach";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 879) <synthetic> def productArity(): Int = 2;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 880) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => FunctionCallEach.this.function()
[scalac.plugin]         case 1 => FunctionCallEach.this.args()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 881) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](FunctionCallEach.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 882) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.FunctionCallEach]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 883) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(FunctionCallEach.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 884) override <synthetic> def toString(): String = ScalaRunTime.this._toString(FunctionCallEach.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 885) override <synthetic> def equals(x$1: Any): Boolean = FunctionCallEach.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.FunctionCallEach]().&&({
[scalac.plugin]       <synthetic> val FunctionCallEach$1: stasiak.karol.fimpp.FunctionCallEach = x$1.asInstanceOf[stasiak.karol.fimpp.FunctionCallEach]();
[scalac.plugin]       FunctionCallEach.this.function().==(FunctionCallEach$1.function()).&&(FunctionCallEach.this.args().==(FunctionCallEach$1.args())).&&(FunctionCallEach$1.canEqual(FunctionCallEach.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object FunctionCallEach extends scala.runtime.AbstractFunction2[String,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.FunctionCallEach] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 886) def <init>(): stasiak.karol.fimpp.FunctionCallEach.type = {
[scalac.plugin]       FunctionCallEach.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 887) final override def toString(): String = "FunctionCallEach";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 888) case <synthetic> def apply(function: String, args: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.FunctionCallEach = new stasiak.karol.fimpp.FunctionCallEach(function, args);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 889) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.FunctionCallEach): Option[(String, stasiak.karol.fimpp.Expr)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(String, stasiak.karol.fimpp.Expr)](new (String, stasiak.karol.fimpp.Expr)(x$0.function(), x$0.args()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 890) <synthetic> private def readResolve(): Object = fimpp.this.FunctionCallEach
[scalac.plugin]   };
[scalac.plugin]   sealed abstract trait Condition extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 891) def eval(context: stasiak.karol.fimpp.Context): Boolean
[scalac.plugin]   };
[scalac.plugin]   case class Conjunction extends Object with stasiak.karol.fimpp.Condition with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val conds: List[stasiak.karol.fimpp.Condition] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 892) <stable> <caseaccessor> <accessor> <paramaccessor> def conds(): List[stasiak.karol.fimpp.Condition] = Conjunction.this.conds;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 893) def <init>(conds: List[stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Conjunction = {
[scalac.plugin]       Conjunction.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 894) def eval(context: stasiak.karol.fimpp.Context): Boolean = Conjunction.this.conds().forall({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Condition,Boolean] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 895) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 896) final def apply(x$5: stasiak.karol.fimpp.Condition): Boolean = x$5.eval(context)
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.Condition => Boolean)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 897) <synthetic> def copy(conds: List[stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Conjunction = new stasiak.karol.fimpp.Conjunction(conds);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 898) <synthetic> def copy$default$1(): List[stasiak.karol.fimpp.Condition] @scala.annotation.unchecked.uncheckedVariance = Conjunction.this.conds();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 899) override <synthetic> def productPrefix(): String = "Conjunction";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 900) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 901) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Conjunction.this.conds()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 902) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Conjunction.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 903) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Conjunction]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 904) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Conjunction.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 905) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Conjunction.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 906) override <synthetic> def equals(x$1: Any): Boolean = Conjunction.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Conjunction]().&&({
[scalac.plugin]       <synthetic> val Conjunction$1: stasiak.karol.fimpp.Conjunction = x$1.asInstanceOf[stasiak.karol.fimpp.Conjunction]();
[scalac.plugin]       Conjunction.this.conds().==(Conjunction$1.conds()).&&(Conjunction$1.canEqual(Conjunction.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Conjunction extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.Condition],stasiak.karol.fimpp.Conjunction] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 907) def <init>(): stasiak.karol.fimpp.Conjunction.type = {
[scalac.plugin]       Conjunction.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 908) final override def toString(): String = "Conjunction";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 909) case <synthetic> def apply(conds: List[stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Conjunction = new stasiak.karol.fimpp.Conjunction(conds);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 910) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Conjunction): Option[List[stasiak.karol.fimpp.Condition]] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[List[stasiak.karol.fimpp.Condition]](x$0.conds());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 911) <synthetic> private def readResolve(): Object = fimpp.this.Conjunction
[scalac.plugin]   };
[scalac.plugin]   case class Alternative extends Object with stasiak.karol.fimpp.Condition with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val conds: List[stasiak.karol.fimpp.Condition] = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 912) <stable> <caseaccessor> <accessor> <paramaccessor> def conds(): List[stasiak.karol.fimpp.Condition] = Alternative.this.conds;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 913) def <init>(conds: List[stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Alternative = {
[scalac.plugin]       Alternative.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 914) def eval(context: stasiak.karol.fimpp.Context): Boolean = Alternative.this.conds().exists({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Condition,Boolean] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 915) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 916) final def apply(x$6: stasiak.karol.fimpp.Condition): Boolean = x$6.eval(context)
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.Condition => Boolean)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 917) <synthetic> def copy(conds: List[stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Alternative = new stasiak.karol.fimpp.Alternative(conds);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 918) <synthetic> def copy$default$1(): List[stasiak.karol.fimpp.Condition] @scala.annotation.unchecked.uncheckedVariance = Alternative.this.conds();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 919) override <synthetic> def productPrefix(): String = "Alternative";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 920) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 921) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Alternative.this.conds()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 922) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Alternative.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 923) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Alternative]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 924) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Alternative.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 925) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Alternative.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 926) override <synthetic> def equals(x$1: Any): Boolean = Alternative.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Alternative]().&&({
[scalac.plugin]       <synthetic> val Alternative$1: stasiak.karol.fimpp.Alternative = x$1.asInstanceOf[stasiak.karol.fimpp.Alternative]();
[scalac.plugin]       Alternative.this.conds().==(Alternative$1.conds()).&&(Alternative$1.canEqual(Alternative.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Alternative extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.Condition],stasiak.karol.fimpp.Alternative] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 927) def <init>(): stasiak.karol.fimpp.Alternative.type = {
[scalac.plugin]       Alternative.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 928) final override def toString(): String = "Alternative";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 929) case <synthetic> def apply(conds: List[stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Alternative = new stasiak.karol.fimpp.Alternative(conds);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 930) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Alternative): Option[List[stasiak.karol.fimpp.Condition]] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[List[stasiak.karol.fimpp.Condition]](x$0.conds());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 931) <synthetic> private def readResolve(): Object = fimpp.this.Alternative
[scalac.plugin]   };
[scalac.plugin]   case class Relational extends Object with stasiak.karol.fimpp.Condition with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val left: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 932) <stable> <caseaccessor> <accessor> <paramaccessor> def left(): stasiak.karol.fimpp.Expr = Relational.this.left;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val op: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 933) <stable> <caseaccessor> <accessor> <paramaccessor> def op(): String = Relational.this.op;
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val right: stasiak.karol.fimpp.Expr = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 934) <stable> <caseaccessor> <accessor> <paramaccessor> def right(): stasiak.karol.fimpp.Expr = Relational.this.right;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 935) def <init>(left: stasiak.karol.fimpp.Expr, op: String, right: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Relational = {
[scalac.plugin]       Relational.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 936) def helper(e1: stasiak.karol.fimpp.RuntimeValue, op: String, e2: stasiak.karol.fimpp.RuntimeValue): Boolean = {
[scalac.plugin]       case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, String, stasiak.karol.fimpp.RuntimeValue) = new (stasiak.karol.fimpp.RuntimeValue, String, stasiak.karol.fimpp.RuntimeValue)(e1, op, e2);
[scalac.plugin]       case50(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p3: String = x1._2();
[scalac.plugin]             val p4: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p2.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]               {
[scalac.plugin]                 val x5: stasiak.karol.fimpp.RuntimeNumber = (p2.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                 if (x5.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val x: Long = x5.num();
[scalac.plugin]                     if (">".==(p3))
[scalac.plugin]                       {
[scalac.plugin]                         val x37: String = p3;
[scalac.plugin]                         if (p4.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                           {
[scalac.plugin]                             val x6: stasiak.karol.fimpp.RuntimeNumber = (p4.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                             if (x6.ne(null))
[scalac.plugin]                               {
[scalac.plugin]                                 val y: Long = x6.num();
[scalac.plugin]                                 matchEnd49(x.>(y))
[scalac.plugin]                               }
[scalac.plugin]                             else
[scalac.plugin]                               case51()
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case51()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case51()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case51()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case51()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case51()
[scalac.plugin]       };
[scalac.plugin]       case51(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p7: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p8: String = x1._2();
[scalac.plugin]             val p9: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p7.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]               {
[scalac.plugin]                 val x10: stasiak.karol.fimpp.RuntimeNumber = (p7.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                 if (x10.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val x: Long = x10.num();
[scalac.plugin]                     if ("<".==(p8))
[scalac.plugin]                       {
[scalac.plugin]                         val x38: String = p8;
[scalac.plugin]                         if (p9.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                           {
[scalac.plugin]                             val x11: stasiak.karol.fimpp.RuntimeNumber = (p9.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                             if (x11.ne(null))
[scalac.plugin]                               {
[scalac.plugin]                                 val y: Long = x11.num();
[scalac.plugin]                                 matchEnd49(x.<(y))
[scalac.plugin]                               }
[scalac.plugin]                             else
[scalac.plugin]                               case52()
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case52()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case52()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case52()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case52()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case52()
[scalac.plugin]       };
[scalac.plugin]       case52(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p12: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p13: String = x1._2();
[scalac.plugin]             val p14: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p12.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]               {
[scalac.plugin]                 val x15: stasiak.karol.fimpp.RuntimeNumber = (p12.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                 if (x15.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val x: Long = x15.num();
[scalac.plugin]                     if (">=".==(p13))
[scalac.plugin]                       {
[scalac.plugin]                         val x39: String = p13;
[scalac.plugin]                         if (p14.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                           {
[scalac.plugin]                             val x16: stasiak.karol.fimpp.RuntimeNumber = (p14.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                             if (x16.ne(null))
[scalac.plugin]                               {
[scalac.plugin]                                 val y: Long = x16.num();
[scalac.plugin]                                 matchEnd49(x.>=(y))
[scalac.plugin]                               }
[scalac.plugin]                             else
[scalac.plugin]                               case53()
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case53()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case53()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case53()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case53()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case53()
[scalac.plugin]       };
[scalac.plugin]       case53(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p17: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p18: String = x1._2();
[scalac.plugin]             val p19: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p17.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]               {
[scalac.plugin]                 val x20: stasiak.karol.fimpp.RuntimeNumber = (p17.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                 if (x20.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val x: Long = x20.num();
[scalac.plugin]                     if ("<=".==(p18))
[scalac.plugin]                       {
[scalac.plugin]                         val x40: String = p18;
[scalac.plugin]                         if (p19.isInstanceOf[stasiak.karol.fimpp.RuntimeNumber]())
[scalac.plugin]                           {
[scalac.plugin]                             val x21: stasiak.karol.fimpp.RuntimeNumber = (p19.asInstanceOf[stasiak.karol.fimpp.RuntimeNumber](): stasiak.karol.fimpp.RuntimeNumber);
[scalac.plugin]                             if (x21.ne(null))
[scalac.plugin]                               {
[scalac.plugin]                                 val y: Long = x21.num();
[scalac.plugin]                                 matchEnd49(x.<=(y))
[scalac.plugin]                               }
[scalac.plugin]                             else
[scalac.plugin]                               case54()
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case54()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case54()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case54()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case54()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case54()
[scalac.plugin]       };
[scalac.plugin]       case54(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val x: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p22: String = x1._2();
[scalac.plugin]             val y: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if ("==".==(p22))
[scalac.plugin]               {
[scalac.plugin]                 val x41: String = p22;
[scalac.plugin]                 matchEnd49(x.==(y))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case55()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case55()
[scalac.plugin]       };
[scalac.plugin]       case55(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val x: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p23: String = x1._2();
[scalac.plugin]             val y: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if ("=".==(p23))
[scalac.plugin]               {
[scalac.plugin]                 val x42: String = p23;
[scalac.plugin]                 matchEnd49(x.==(y))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case56()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case56()
[scalac.plugin]       };
[scalac.plugin]       case56(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val x: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p24: String = x1._2();
[scalac.plugin]             val y: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if ("!=".==(p24))
[scalac.plugin]               {
[scalac.plugin]                 val x43: String = p24;
[scalac.plugin]                 matchEnd49(x.!=(y))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case57()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case57()
[scalac.plugin]       };
[scalac.plugin]       case57(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p25: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p26: String = x1._2();
[scalac.plugin]             val y: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p25.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]               {
[scalac.plugin]                 val x27: stasiak.karol.fimpp.RuntimeList = (p25.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                 if (x27.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val xs: List[stasiak.karol.fimpp.RuntimeValue] = x27.elems();
[scalac.plugin]                     if ("all>".==(p26))
[scalac.plugin]                       {
[scalac.plugin]                         val x44: String = p26;
[scalac.plugin]                         matchEnd49(xs.forall({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.RuntimeValue,Boolean] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 937) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 938) final def apply(x: stasiak.karol.fimpp.RuntimeValue): Boolean = Relational.this.helper(x, ">", y)
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): stasiak.karol.fimpp.RuntimeValue => Boolean)
[scalac.plugin]                         }))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case58()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case58()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case58()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case58()
[scalac.plugin]       };
[scalac.plugin]       case58(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p28: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p29: String = x1._2();
[scalac.plugin]             val y: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p28.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]               {
[scalac.plugin]                 val x30: stasiak.karol.fimpp.RuntimeList = (p28.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                 if (x30.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val xs: List[stasiak.karol.fimpp.RuntimeValue] = x30.elems();
[scalac.plugin]                     if ("all<".==(p29))
[scalac.plugin]                       {
[scalac.plugin]                         val x45: String = p29;
[scalac.plugin]                         matchEnd49(xs.forall({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.RuntimeValue,Boolean] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 939) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 940) final def apply(x: stasiak.karol.fimpp.RuntimeValue): Boolean = Relational.this.helper(x, "<", y)
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): stasiak.karol.fimpp.RuntimeValue => Boolean)
[scalac.plugin]                         }))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case59()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case59()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case59()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case59()
[scalac.plugin]       };
[scalac.plugin]       case59(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p31: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p32: String = x1._2();
[scalac.plugin]             val y: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p31.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]               {
[scalac.plugin]                 val x33: stasiak.karol.fimpp.RuntimeList = (p31.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                 if (x33.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val xs: List[stasiak.karol.fimpp.RuntimeValue] = x33.elems();
[scalac.plugin]                     if ("any>".==(p32))
[scalac.plugin]                       {
[scalac.plugin]                         val x46: String = p32;
[scalac.plugin]                         matchEnd49(xs.exists({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.RuntimeValue,Boolean] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 941) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 942) final def apply(x: stasiak.karol.fimpp.RuntimeValue): Boolean = Relational.this.helper(x, ">", y)
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): stasiak.karol.fimpp.RuntimeValue => Boolean)
[scalac.plugin]                         }))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case60()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case60()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case60()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case60()
[scalac.plugin]       };
[scalac.plugin]       case60(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p34: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val p35: String = x1._2();
[scalac.plugin]             val y: stasiak.karol.fimpp.RuntimeValue = x1._3();
[scalac.plugin]             if (p34.isInstanceOf[stasiak.karol.fimpp.RuntimeList]())
[scalac.plugin]               {
[scalac.plugin]                 val x36: stasiak.karol.fimpp.RuntimeList = (p34.asInstanceOf[stasiak.karol.fimpp.RuntimeList](): stasiak.karol.fimpp.RuntimeList);
[scalac.plugin]                 if (x36.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val xs: List[stasiak.karol.fimpp.RuntimeValue] = x36.elems();
[scalac.plugin]                     if ("any<".==(p35))
[scalac.plugin]                       {
[scalac.plugin]                         val x47: String = p35;
[scalac.plugin]                         matchEnd49(xs.exists({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.RuntimeValue,Boolean] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 943) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 944) final def apply(x: stasiak.karol.fimpp.RuntimeValue): Boolean = Relational.this.helper(x, "<", y)
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): stasiak.karol.fimpp.RuntimeValue => Boolean)
[scalac.plugin]                         }))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case61()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case61()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case61()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case61()
[scalac.plugin]       };
[scalac.plugin]       case61(){
[scalac.plugin]         matchEnd49(throw new stasiak.karol.fimpp.FimException("Unsupported comparison between ".+(e1).+(" and ").+(e1).+(" using ‘").+(op).+("’")))
[scalac.plugin]       };
[scalac.plugin]       matchEnd49(x: Boolean){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 945) def eval(context: stasiak.karol.fimpp.Context): Boolean = {
[scalac.plugin]       val e1: stasiak.karol.fimpp.RuntimeValue = Relational.this.left().eval(context);
[scalac.plugin]       val e2: stasiak.karol.fimpp.RuntimeValue = Relational.this.right().eval(context);
[scalac.plugin]       Relational.this.helper(e1, Relational.this.op(), e2)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 946) <synthetic> def copy(left: stasiak.karol.fimpp.Expr, op: String, right: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Relational = new stasiak.karol.fimpp.Relational(left, op, right);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 947) <synthetic> def copy$default$1(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = Relational.this.left();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 948) <synthetic> def copy$default$2(): String @scala.annotation.unchecked.uncheckedVariance = Relational.this.op();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 949) <synthetic> def copy$default$3(): stasiak.karol.fimpp.Expr @scala.annotation.unchecked.uncheckedVariance = Relational.this.right();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 950) override <synthetic> def productPrefix(): String = "Relational";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 951) <synthetic> def productArity(): Int = 3;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 952) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => Relational.this.left()
[scalac.plugin]         case 1 => Relational.this.op()
[scalac.plugin]         case 2 => Relational.this.right()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 953) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](Relational.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 954) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.Relational]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 955) override <synthetic> def hashCode(): Int = ScalaRunTime.this._hashCode(Relational.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 956) override <synthetic> def toString(): String = ScalaRunTime.this._toString(Relational.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 957) override <synthetic> def equals(x$1: Any): Boolean = Relational.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.Relational]().&&({
[scalac.plugin]       <synthetic> val Relational$1: stasiak.karol.fimpp.Relational = x$1.asInstanceOf[stasiak.karol.fimpp.Relational]();
[scalac.plugin]       Relational.this.left().==(Relational$1.left()).&&(Relational.this.op().==(Relational$1.op())).&&(Relational.this.right().==(Relational$1.right())).&&(Relational$1.canEqual(Relational.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object Relational extends scala.runtime.AbstractFunction3[stasiak.karol.fimpp.Expr,String,stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Relational] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 958) def <init>(): stasiak.karol.fimpp.Relational.type = {
[scalac.plugin]       Relational.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 959) final override def toString(): String = "Relational";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 960) case <synthetic> def apply(left: stasiak.karol.fimpp.Expr, op: String, right: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Relational = new stasiak.karol.fimpp.Relational(left, op, right);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 961) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.Relational): Option[(stasiak.karol.fimpp.Expr, String, stasiak.karol.fimpp.Expr)] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[(stasiak.karol.fimpp.Expr, String, stasiak.karol.fimpp.Expr)](new (stasiak.karol.fimpp.Expr, String, stasiak.karol.fimpp.Expr)(x$0.left(), x$0.op(), x$0.right()));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 962) <synthetic> private def readResolve(): Object = fimpp.this.Relational
[scalac.plugin]   };
[scalac.plugin]   case class TrivialCondition extends Object with stasiak.karol.fimpp.Condition with Product with Serializable {
[scalac.plugin]     <caseaccessor> <paramaccessor> private[this] val value: Boolean = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 963) <stable> <caseaccessor> <accessor> <paramaccessor> def value(): Boolean = TrivialCondition.this.value;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 964) def <init>(value: Boolean): stasiak.karol.fimpp.TrivialCondition = {
[scalac.plugin]       TrivialCondition.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 965) def eval(context: stasiak.karol.fimpp.Context): Boolean = TrivialCondition.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 966) <synthetic> def copy(value: Boolean): stasiak.karol.fimpp.TrivialCondition = new stasiak.karol.fimpp.TrivialCondition(value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 967) <synthetic> def copy$default$1(): Boolean @scala.annotation.unchecked.uncheckedVariance = TrivialCondition.this.value();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 968) override <synthetic> def productPrefix(): String = "TrivialCondition";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 969) <synthetic> def productArity(): Int = 1;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 970) <synthetic> def productElement(x$1: Int): Any = {
[scalac.plugin]       case <synthetic> val x1: Int = x$1;
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => TrivialCondition.this.value()
[scalac.plugin]         case _ => throw new IndexOutOfBoundsException(x$1.toString())
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 971) override <synthetic> def productIterator(): Iterator[Any] = runtime.this.ScalaRunTime.typedProductIterator[Any](TrivialCondition.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 972) <synthetic> def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[stasiak.karol.fimpp.TrivialCondition]();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 973) override <synthetic> def hashCode(): Int = {
[scalac.plugin]       <synthetic> var acc: Int = -889275714;
[scalac.plugin]       acc = Statics.this.mix(acc, if (value())
[scalac.plugin]         1231
[scalac.plugin]       else
[scalac.plugin]         1237);
[scalac.plugin]       Statics.this.finalizeHash(acc, 1)
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 974) override <synthetic> def toString(): String = ScalaRunTime.this._toString(TrivialCondition.this);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 975) override <synthetic> def equals(x$1: Any): Boolean = TrivialCondition.this.eq(x$1.asInstanceOf[Object]()).||(x$1.isInstanceOf[stasiak.karol.fimpp.TrivialCondition]().&&({
[scalac.plugin]       <synthetic> val TrivialCondition$1: stasiak.karol.fimpp.TrivialCondition = x$1.asInstanceOf[stasiak.karol.fimpp.TrivialCondition]();
[scalac.plugin]       TrivialCondition.this.value().==(TrivialCondition$1.value()).&&(TrivialCondition$1.canEqual(TrivialCondition.this))
[scalac.plugin]     }))
[scalac.plugin]   };
[scalac.plugin]   <synthetic> object TrivialCondition extends scala.runtime.AbstractFunction1[Boolean,stasiak.karol.fimpp.TrivialCondition] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 976) def <init>(): stasiak.karol.fimpp.TrivialCondition.type = {
[scalac.plugin]       TrivialCondition.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 977) final override def toString(): String = "TrivialCondition";
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 978) case <synthetic> def apply(value: Boolean): stasiak.karol.fimpp.TrivialCondition = new stasiak.karol.fimpp.TrivialCondition(value);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 979) case <synthetic> def unapply(x$0: stasiak.karol.fimpp.TrivialCondition): Option[Boolean] = if (x$0.==(null))
[scalac.plugin]       scala.this.None
[scalac.plugin]     else
[scalac.plugin]       new Some[Boolean](x$0.value());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 980) <synthetic> private def readResolve(): Object = fimpp.this.TrivialCondition
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // FimException.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   object FimException extends Object with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 981) def <init>(): stasiak.karol.fimpp.FimException.type = {
[scalac.plugin]       FimException.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 982) <synthetic> private def readResolve(): Object = fimpp.this.FimException
[scalac.plugin]   };
[scalac.plugin]   class FimException extends Exception {
[scalac.plugin]     <paramaccessor> private[this] val msg: String = _;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 983) def <init>(msg: String): stasiak.karol.fimpp.FimException = {
[scalac.plugin]       FimException.super.<init>(msg);
[scalac.plugin]       ()
[scalac.plugin]     }
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // FimppParser.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   object FimppParser extends Object with scala.util.parsing.combinator.RegexParsers {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 984) def <init>(): stasiak.karol.fimpp.FimppParser.type = {
[scalac.plugin]       FimppParser.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     private[this] var ERRORS: stasiak.karol.fimpp.ErrorMessageProvider = Trollestia;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 985) <accessor> def ERRORS(): stasiak.karol.fimpp.ErrorMessageProvider = FimppParser.this.ERRORS;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 986) <accessor> def ERRORS_=(x$1: stasiak.karol.fimpp.ErrorMessageProvider): Unit = FimppParser.this.ERRORS = x$1;
[scalac.plugin]     private[this] val keywords: scala.collection.immutable.Set[String] = scala.this.Predef.Set().apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{"yes", "and", "got", "i", "my", "me", "with", "about", "I", "either", "or", "has", "is", "have", "are", "likes", "did", "only", "what", "like", "when", "had", "was", "were", "in", "of", "on", "today", "made", "if"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 987) <stable> <accessor> def keywords(): scala.collection.immutable.Set[String] = FimppParser.this.keywords;
[scalac.plugin]     private[this] val numbers: List[String] = immutable.this.List.apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 988) <stable> <accessor> def numbers(): List[String] = FimppParser.this.numbers;
[scalac.plugin]     private[this] val ordinals: List[String] = immutable.this.List.apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{null, "first", "second", "third", "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth", "eleventh", "twelfth"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 989) <stable> <accessor> def ordinals(): List[String] = FimppParser.this.ordinals;
[scalac.plugin]     private[this] val articles: scala.collection.immutable.Set[String] = scala.this.Predef.Set().apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{"a", "an", "the"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 990) <stable> <accessor> def articles(): scala.collection.immutable.Set[String] = FimppParser.this.articles;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 991) def fullStop(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.opt[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 992) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 993) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]] = FimppParser.this.comma().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 994) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 995) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"because"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 996) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 997) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.commentContent()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 998) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 999) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal(".")
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1000) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1001) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1002) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1003) def headerEnd(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.opt[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1004) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1005) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]] = FimppParser.this.comma().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1006) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1007) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"because"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1008) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1009) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.commentContent()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1010) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1011) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal(".").|[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1012) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1013) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal(":")
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1014) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1015) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1016) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1017) def sentenceEnd(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.opt[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1018) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1019) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]] = FimppParser.this.comma().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1020) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1021) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"because"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1022) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1023) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.commentContent()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1024) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1025) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal(".").|[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1026) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1027) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal("!")
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1028) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1029) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1030) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1031) def questionEnd(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.opt[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1032) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1033) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]] = FimppParser.this.comma().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1034) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1035) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"because"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1036) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1037) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.commentContent()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit],Unit]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1038) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1039) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal("?")
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1040) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1041) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1042) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1043) def comma(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.literal(",").^^^[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1044) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1045) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1046) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1047) def commentContent(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.regex(scala.this.Predef.augmentString("[^\\.\\?!]*").r()).^^^[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1048) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1049) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1050) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1051) def kw(strs: Seq[String]): stasiak.karol.fimpp.FimppParser.Parser[Unit] = {
[scalac.plugin]       case <synthetic> val x1: Seq[String] = strs;
[scalac.plugin]       case6(){
[scalac.plugin]         val o8: Option[Seq[String]] = collection.this.Seq.unapplySeq[String](x1);
[scalac.plugin]         if (o8.isEmpty().unary_!())
[scalac.plugin]           if (o8.get().!=(null).&&(o8.get().lengthCompare(0).==(0)))
[scalac.plugin]             matchEnd5(FimppParser.this.failure(FimppParser.this.ERRORS().unknownError()))
[scalac.plugin]           else
[scalac.plugin]             case7()
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         val o10: Option[Seq[String]] = collection.this.Seq.unapplySeq[String](x1);
[scalac.plugin]         if (o10.isEmpty().unary_!())
[scalac.plugin]           if (o10.get().!=(null).&&(o10.get().lengthCompare(1).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val str: String = o10.get().apply(0);
[scalac.plugin]               matchEnd5(if (str.length().>(1).&&(str.charAt(str.length().-(1)).==('?')))
[scalac.plugin]                 FimppParser.this.opt[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1052) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1053) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{str.substring(0, str.length().-(1))}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]                   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 1054) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                       $anonfun.super.<init>();
[scalac.plugin]                       ()
[scalac.plugin]                     };
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 1055) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 1056) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]                   };
[scalac.plugin]                   (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]                 })
[scalac.plugin]               else
[scalac.plugin]                 if (str.length().>(1).&&(str.charAt(str.length().-(1)).==('*')))
[scalac.plugin]                   FimppParser.this.rep[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1057) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1058) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{str.substring(0, str.length().-(1))}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]                     @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 1059) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                         $anonfun.super.<init>();
[scalac.plugin]                         ()
[scalac.plugin]                       };
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 1060) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 1061) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]                     };
[scalac.plugin]                     (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]                   })
[scalac.plugin]                 else
[scalac.plugin]                   if (str.length().>(1).&&(str.charAt(str.length().-(1)).==('+')))
[scalac.plugin]                     FimppParser.this.rep1[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1062) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1063) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{str.substring(0, str.length().-(1))}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1064) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1065) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1066) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]                     })
[scalac.plugin]                   else
[scalac.plugin]                     FimppParser.this.regex(scala.this.Predef.augmentString("(?i)\\b\\Q".+(str).+("\\E\\b")).r()).^^^[Unit]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1067) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1068) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1069) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]                     }))
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case9()
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         matchEnd5(FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{strs.head()})).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1070) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1071) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(strs.tail())
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1072) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1073) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1074) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]         }))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: stasiak.karol.fimpp.FimppParser.Parser[Unit]){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1075) def altkw(strs: Seq[String]): stasiak.karol.fimpp.FimppParser.Parser[Unit] = {
[scalac.plugin]       case <synthetic> val x1: Seq[String] = strs;
[scalac.plugin]       case6(){
[scalac.plugin]         val o8: Option[Seq[String]] = collection.this.Seq.unapplySeq[String](x1);
[scalac.plugin]         if (o8.isEmpty().unary_!())
[scalac.plugin]           if (o8.get().!=(null).&&(o8.get().lengthCompare(0).==(0)))
[scalac.plugin]             matchEnd5(FimppParser.this.failure(FimppParser.this.ERRORS().unknownError()).asInstanceOf[stasiak.karol.fimpp.FimppParser.Parser[Unit]]())
[scalac.plugin]           else
[scalac.plugin]             case7()
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         val o10: Option[Seq[String]] = collection.this.Seq.unapplySeq[String](x1);
[scalac.plugin]         if (o10.isEmpty().unary_!())
[scalac.plugin]           if (o10.get().!=(null).&&(o10.get().lengthCompare(1).==(0)))
[scalac.plugin]             {
[scalac.plugin]               val str: String = o10.get().apply(0);
[scalac.plugin]               matchEnd5(FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{str})).^^^[Unit]({
[scalac.plugin]                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 1076) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                     $anonfun.super.<init>();
[scalac.plugin]                     ()
[scalac.plugin]                   };
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 1077) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]                   @callgraph.annotation.targetmethod(value = 1078) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]                 };
[scalac.plugin]                 (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]               }))
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case9()
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         matchEnd5(FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{strs.head()})).|[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1079) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1080) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(strs.tail())
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[Unit]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcV$sp with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1081) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1082) final def apply(): Unit = $anonfun.this.apply$mcV$sp();
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1083) <specialized> def apply$mcV$sp(): Unit = ()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => Unit)
[scalac.plugin]         }))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: stasiak.karol.fimpp.FimppParser.Parser[Unit]){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1084) def rawWord(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.regex(scala.this.Predef.augmentString("[A-Za-z]+(-[A-Za-z]+)*(\'[A-Za-z]+(-[A-Za-z]+)*)?").r());
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1085) def word(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawWord().^?[String](({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[String,String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1086) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1087) final override def applyOrElse[A1 >: Nothing <: String, B1 >: String <: Any](x$1: A1, default: A1 => B1): B1 = {
[scalac.plugin]           case <synthetic> val x1: A1 = (x$1: A1 @unchecked);
[scalac.plugin]           case4(){
[scalac.plugin]             if (FimppParser.this.keywords().contains(x1).unary_!())
[scalac.plugin]               matchEnd3(if (x1.toLowerCase().==("friendship"))
[scalac.plugin]                 "magic"
[scalac.plugin]               else
[scalac.plugin]                 x1.toLowerCase())
[scalac.plugin]             else
[scalac.plugin]               case5()
[scalac.plugin]           };
[scalac.plugin]           case5(){
[scalac.plugin]             matchEnd3(default.apply(x$1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd3(x: B1){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1088) final def isDefinedAt(x$1: String): Boolean = {
[scalac.plugin]           case <synthetic> val x1: String = (x$1: String @unchecked);
[scalac.plugin]           case4(){
[scalac.plugin]             if (FimppParser.this.keywords().contains(x1).unary_!())
[scalac.plugin]               matchEnd3(true)
[scalac.plugin]             else
[scalac.plugin]               case5()
[scalac.plugin]           };
[scalac.plugin]           case5(){
[scalac.plugin]             matchEnd3(false)
[scalac.plugin]           };
[scalac.plugin]           matchEnd3(x: Boolean){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       new anonymous class $anonfun()
[scalac.plugin]     }: PartialFunction[String,String]), {
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1089) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1090) final def apply(x0$1: String): String = {
[scalac.plugin]           case <synthetic> val x1: String = x0$1;
[scalac.plugin]           case4(){
[scalac.plugin]             matchEnd3(FimppParser.this.ERRORS().invalidIdentifier(x1.toLowerCase()))
[scalac.plugin]           };
[scalac.plugin]           matchEnd3(x: String){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): String => String)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1091) def rawIdentifier(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rep1[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1092) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1093) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawWord()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[String],String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1094) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1095) final def apply(l: List[String]): String = l.mkString(" ")
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): List[String] => String)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1096) def identifier(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rep1[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1097) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1098) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.word()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[String],String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1099) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1100) final def apply(l: List[String]): String = l.filterNot({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,Boolean] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1101) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1102) final def apply(x$1: String): Boolean = FimppParser.this.articles().contains(x$1)
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): String => Boolean)
[scalac.plugin] }).mkString(" ")
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): List[String] => String)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1103) def listOfIdentifiers(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.identifier().~[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1104) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1105) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1106) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1107) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1108) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1109) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.and()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1110) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1111) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[Unit]],Unit],String],List[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1112) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1113) final def apply(x0$2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[Unit]],Unit],String]): List[String] = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[Unit]],Unit],String] = x0$2;
[scalac.plugin]       case8(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[Unit]],Unit] = x1._1();
[scalac.plugin]             val b: String = x1._2();
[scalac.plugin]             if (p2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p3: stasiak.karol.fimpp.FimppParser.~[String,Option[Unit]] = p2._1();
[scalac.plugin]                 val p4: Unit = p2._2();
[scalac.plugin]                 if (p3.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val a: String = p3._1();
[scalac.plugin]                     val p5: Option[Unit] = p3._2();
[scalac.plugin]                     matchEnd7(immutable.this.List.apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{a, b})))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case9()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case9()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         matchEnd7(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd7(x: List[String]){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[Unit]],Unit],String] => List[String])
[scalac.plugin] }).|[List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1114) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1115) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.identifier().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1116) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1117) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1118) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1119) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.listOfIdentifiers()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[String]])
[scalac.plugin] }).^^[List[String]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],List[String]],List[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1120) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1121) final def apply(x0$3: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],List[String]]): List[String] = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],List[String]] = x0$3;
[scalac.plugin]           case6(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,Unit] = x1._1();
[scalac.plugin]                 val bs: List[String] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val a: String = p2._1();
[scalac.plugin]                     val p3: Unit = p2._2();
[scalac.plugin]                     matchEnd5({
[scalac.plugin]                       <synthetic> val x$2: String = a;
[scalac.plugin]                       bs.::[String](x$2)
[scalac.plugin]                     })
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case7()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           };
[scalac.plugin]           case7(){
[scalac.plugin]             matchEnd5(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd5(x: List[String]){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],List[String]] => List[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[String]])
[scalac.plugin] }).|[List[String]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[String]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1122) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1123) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.identifier().^^[List[String]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,List[String]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1124) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1125) final def apply(x: String): List[String] = immutable.this.List.apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{x}))
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): String => List[String])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[String]])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1126) def and(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"and"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1127) def or(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"or"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1128) def number(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.opt[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1129) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1130) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"the?", "number"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1131) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1132) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.regex(scala.this.Predef.augmentString("[0-9]+").r())
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[Long]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,Long] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1133) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1134) final def apply(s: String): Long = scala.this.Predef.augmentString(s).toLong()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): String => Long)
[scalac.plugin] }).|[Long]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Long]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1135) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1136) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.opt[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1137) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1138) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"the?", "number"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1139) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1140) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.word()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^?[Long](({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction$mcJL$sp[String] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1141) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1142) final override def applyOrElse[A1 >: Nothing <: String, B1 >: Long <: Any](x$1: A1, default: A1 => B1): B1 = {
[scalac.plugin]               case <synthetic> val x1: A1 = (x$1: A1 @unchecked);
[scalac.plugin]               case4(){
[scalac.plugin]                 if (FimppParser.this.numbers().contains(x1))
[scalac.plugin]                   matchEnd3(FimppParser.this.numbers().indexOf[String](x1).toLong())
[scalac.plugin]                 else
[scalac.plugin]                   case5()
[scalac.plugin]               };
[scalac.plugin]               case5(){
[scalac.plugin]                 matchEnd3(default.apply(x$1))
[scalac.plugin]               };
[scalac.plugin]               matchEnd3(x: B1){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1143) final def isDefinedAt(x$1: String): Boolean = {
[scalac.plugin]               case <synthetic> val x1: String = (x$1: String @unchecked);
[scalac.plugin]               case4(){
[scalac.plugin]                 if (FimppParser.this.numbers().contains(x1))
[scalac.plugin]                   matchEnd3(true)
[scalac.plugin]                 else
[scalac.plugin]                   case5()
[scalac.plugin]               };
[scalac.plugin]               case5(){
[scalac.plugin]                 matchEnd3(false)
[scalac.plugin]               };
[scalac.plugin]               matchEnd3(x: Boolean){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             }
[scalac.plugin]           };
[scalac.plugin]           new anonymous class $anonfun()
[scalac.plugin]         }: PartialFunction[String,Long]))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Long])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1144) def ordinalLiteral(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"the?"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1145) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1146) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.regex(scala.this.Predef.augmentString("[0-9]+").r())
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1147) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1148) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.regex(scala.this.Predef.augmentString("(?i)(st|th|nd|rd)\\b").r())
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[Long]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,Long] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1149) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1150) final def apply(s: String): Long = scala.this.Predef.augmentString(s).toLong()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): String => Long)
[scalac.plugin] }).|[Long]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Long]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1151) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1152) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"the?"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1153) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1154) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.word()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^?[Long](({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction$mcJL$sp[String] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1155) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1156) final override def applyOrElse[A1 >: Nothing <: String, B1 >: Long <: Any](x$1: A1, default: A1 => B1): B1 = {
[scalac.plugin]               case <synthetic> val x1: A1 = (x$1: A1 @unchecked);
[scalac.plugin]               case4(){
[scalac.plugin]                 if (FimppParser.this.ordinals().contains(x1))
[scalac.plugin]                   matchEnd3(FimppParser.this.ordinals().indexOf[String](x1).toLong())
[scalac.plugin]                 else
[scalac.plugin]                   case5()
[scalac.plugin]               };
[scalac.plugin]               case5(){
[scalac.plugin]                 matchEnd3(default.apply(x$1))
[scalac.plugin]               };
[scalac.plugin]               matchEnd3(x: B1){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1157) final def isDefinedAt(x$1: String): Boolean = {
[scalac.plugin]               case <synthetic> val x1: String = (x$1: String @unchecked);
[scalac.plugin]               case4(){
[scalac.plugin]                 if (FimppParser.this.ordinals().contains(x1))
[scalac.plugin]                   matchEnd3(true)
[scalac.plugin]                 else
[scalac.plugin]                   case5()
[scalac.plugin]               };
[scalac.plugin]               case5(){
[scalac.plugin]                 matchEnd3(false)
[scalac.plugin]               };
[scalac.plugin]               matchEnd3(x: Boolean){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             }
[scalac.plugin]           };
[scalac.plugin]           new anonymous class $anonfun()
[scalac.plugin]         }: PartialFunction[String,Long]))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Long])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1158) def stringLiteral(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.regex(scala.this.Predef.augmentString("\"[^\"]*\"").r()).^^[stasiak.karol.fimpp.Concatenation]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.Concatenation] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1159) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1160) final def apply(sl: String): stasiak.karol.fimpp.Concatenation = StringInnardsParser.parseAll[stasiak.karol.fimpp.Concatenation](StringInnardsParser.stringInnards(), scala.this.Predef.augmentString(scala.this.Predef.augmentString(sl).stripPrefix("\"")).stripSuffix("\"")).get()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): String => stasiak.karol.fimpp.Concatenation)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1161) def literal(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.stringLiteral().|[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.NumberValue]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1162) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1163) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.NumberValue] = FimppParser.this.number().^^[stasiak.karol.fimpp.NumberValue]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Long,stasiak.karol.fimpp.NumberValue] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1164) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1165) final def apply(v: Long): stasiak.karol.fimpp.NumberValue = new stasiak.karol.fimpp.NumberValue(v)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): Long => stasiak.karol.fimpp.NumberValue)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.NumberValue])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1166) def listExpression(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression] = FimppParser.this.simpleExpression().~[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1167) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1168) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1169) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1170) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1171) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1172) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.and()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1173) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1174) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.simpleExpression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ListExpression]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.ListExpression] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1175) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1176) final def apply(x0$4: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ListExpression = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr] = x0$4;
[scalac.plugin]       case8(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit] = x1._1();
[scalac.plugin]             val b: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]             if (p2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p3: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]] = p2._1();
[scalac.plugin]                 val p4: Unit = p2._2();
[scalac.plugin]                 if (p3.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val a: stasiak.karol.fimpp.Expr = p3._1();
[scalac.plugin]                     val p5: Option[Unit] = p3._2();
[scalac.plugin]                     matchEnd7(new stasiak.karol.fimpp.ListExpression(immutable.this.List.apply[stasiak.karol.fimpp.Expr](scala.this.Predef.wrapRefArray[stasiak.karol.fimpp.Expr](Array[stasiak.karol.fimpp.Expr]{a, b}))))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case9()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case9()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         matchEnd7(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd7(x: stasiak.karol.fimpp.ListExpression){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.ListExpression)
[scalac.plugin] }).|[stasiak.karol.fimpp.ListExpression]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1177) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1178) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression] = FimppParser.this.simpleExpression().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1179) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1180) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.ListExpression]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1181) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1182) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression] = FimppParser.this.listExpression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ListExpression]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],stasiak.karol.fimpp.ListExpression],stasiak.karol.fimpp.ListExpression] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1183) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1184) final def apply(x0$5: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],stasiak.karol.fimpp.ListExpression]): stasiak.karol.fimpp.ListExpression = {
[scalac.plugin]               case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],stasiak.karol.fimpp.ListExpression] = x0$5;
[scalac.plugin]               case7(){
[scalac.plugin]                 if (x1.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit] = x1._1();
[scalac.plugin]                     val p3: stasiak.karol.fimpp.ListExpression = x1._2();
[scalac.plugin]                     if (p2.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val a: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                         val p4: Unit = p2._2();
[scalac.plugin]                         if (p3.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val bs: List[stasiak.karol.fimpp.Expr] = p3.elems();
[scalac.plugin]                             matchEnd6(new stasiak.karol.fimpp.ListExpression({
[scalac.plugin]                               <synthetic> val x$3: stasiak.karol.fimpp.Expr = a;
[scalac.plugin]                               bs.::[stasiak.karol.fimpp.Expr](x$3)
[scalac.plugin]                             }))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case8()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case8()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case8()
[scalac.plugin]               };
[scalac.plugin]               case8(){
[scalac.plugin]                 matchEnd6(throw new MatchError(x1))
[scalac.plugin]               };
[scalac.plugin]               matchEnd6(x: stasiak.karol.fimpp.ListExpression){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             }
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],stasiak.karol.fimpp.ListExpression] => stasiak.karol.fimpp.ListExpression)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1185) def arglist(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.simpleExpression().~[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1186) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1187) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1188) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1189) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1190) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1191) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.and()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1192) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1193) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.simpleExpression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr],List[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1194) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1195) final def apply(x0$6: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr]): List[stasiak.karol.fimpp.Expr] = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr] = x0$6;
[scalac.plugin]       case8(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit] = x1._1();
[scalac.plugin]             val b: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]             if (p2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p3: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]] = p2._1();
[scalac.plugin]                 val p4: Unit = p2._2();
[scalac.plugin]                 if (p3.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val a: stasiak.karol.fimpp.Expr = p3._1();
[scalac.plugin]                     val p5: Option[Unit] = p3._2();
[scalac.plugin]                     matchEnd7(immutable.this.List.apply[stasiak.karol.fimpp.Expr](scala.this.Predef.wrapRefArray[stasiak.karol.fimpp.Expr](Array[stasiak.karol.fimpp.Expr]{a, b})))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case9()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case9()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         matchEnd7(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd7(x: List[stasiak.karol.fimpp.Expr]){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Option[Unit]],Unit],stasiak.karol.fimpp.Expr] => List[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).|[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1196) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1197) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.simpleExpression().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1198) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1199) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1200) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1201) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.arglist()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin] }).^^[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],List[stasiak.karol.fimpp.Expr]],List[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1202) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1203) final def apply(x0$7: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],List[stasiak.karol.fimpp.Expr]]): List[stasiak.karol.fimpp.Expr] = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],List[stasiak.karol.fimpp.Expr]] = x0$7;
[scalac.plugin]           case6(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit] = x1._1();
[scalac.plugin]                 val bs: List[stasiak.karol.fimpp.Expr] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val a: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                     val p3: Unit = p2._2();
[scalac.plugin]                     matchEnd5({
[scalac.plugin]                       <synthetic> val x$4: stasiak.karol.fimpp.Expr = a;
[scalac.plugin]                       bs.::[stasiak.karol.fimpp.Expr](x$4)
[scalac.plugin]                     })
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case7()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           };
[scalac.plugin]           case7(){
[scalac.plugin]             matchEnd5(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd5(x: List[stasiak.karol.fimpp.Expr]){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,Unit],List[stasiak.karol.fimpp.Expr]] => List[stasiak.karol.fimpp.Expr])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin] }).|[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1204) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1205) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.simpleExpression().^^[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,List[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1206) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1207) final def apply(e: stasiak.karol.fimpp.Expr): List[stasiak.karol.fimpp.Expr] = immutable.this.List.apply[stasiak.karol.fimpp.Expr](scala.this.Predef.wrapRefArray[stasiak.karol.fimpp.Expr](Array[stasiak.karol.fimpp.Expr]{e}))
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => List[stasiak.karol.fimpp.Expr])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1208) def expression(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.listExpression().|[stasiak.karol.fimpp.ListExpression]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1209) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1210) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"only"})).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1211) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1212) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.simpleExpression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ListExpression]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.ListExpression] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1213) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1214) final def apply(e: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.ListExpression = new stasiak.karol.fimpp.ListExpression(immutable.this.List.apply[stasiak.karol.fimpp.Expr](scala.this.Predef.wrapRefArray[stasiak.karol.fimpp.Expr](Array[stasiak.karol.fimpp.Expr]{e})))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.ListExpression)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ListExpression])
[scalac.plugin] }).|[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1215) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1216) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.simpleExpression()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1217) def simpleExpression(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.literal().|[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.VariableValue]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1218) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1219) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.VariableValue] = FimppParser.this.identifier().^^[stasiak.karol.fimpp.VariableValue]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.VariableValue] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1220) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1221) final def apply(id: String): stasiak.karol.fimpp.VariableValue = new stasiak.karol.fimpp.VariableValue(id)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): String => stasiak.karol.fimpp.VariableValue)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.VariableValue])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1222) def ordinalExpression(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.ordinalLiteral().<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1223) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1224) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"page"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.NumberValue]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Long,stasiak.karol.fimpp.NumberValue] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1225) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1226) final def apply(v: Long): stasiak.karol.fimpp.NumberValue = new stasiak.karol.fimpp.NumberValue(v)
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): Long => stasiak.karol.fimpp.NumberValue)
[scalac.plugin] }).|[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1227) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1228) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"the?", "page", "numbered", "by"})).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1229) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1230) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.simpleExpression()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1231) def condition(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.andCondition().|[Product with Serializable with stasiak.karol.fimpp.Condition]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1232) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1233) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative] = FimppParser.this.orCondition()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative])
[scalac.plugin] }).|[stasiak.karol.fimpp.Condition]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1234) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1235) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.simpleCondition()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1236) def simpleCondition(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.relationalCondition();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1237) def andCondition(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Conjunction] = FimppParser.this.simpleCondition().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1238) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1239) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.and()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Condition]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1240) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1241) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.simpleCondition()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Conjunction]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition],stasiak.karol.fimpp.Conjunction] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1242) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1243) final def apply(x0$8: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Conjunction = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition] = x0$8;
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit] = x1._1();
[scalac.plugin]             val c2: stasiak.karol.fimpp.Condition = x1._2();
[scalac.plugin]             if (p2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val c1: stasiak.karol.fimpp.Condition = p2._1();
[scalac.plugin]                 val p3: Unit = p2._2();
[scalac.plugin]                 matchEnd5(new stasiak.karol.fimpp.Conjunction(immutable.this.List.apply[stasiak.karol.fimpp.Condition](scala.this.Predef.wrapRefArray[stasiak.karol.fimpp.Condition](Array[stasiak.karol.fimpp.Condition]{c1, c2}))))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         matchEnd5(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: stasiak.karol.fimpp.Conjunction){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition] => stasiak.karol.fimpp.Conjunction)
[scalac.plugin] }).|[stasiak.karol.fimpp.Conjunction]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Conjunction]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1244) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1245) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Conjunction] = FimppParser.this.simpleCondition().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1246) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1247) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Conjunction]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Conjunction]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1248) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1249) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Conjunction] = FimppParser.this.andCondition()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Conjunction])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Conjunction]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Conjunction],stasiak.karol.fimpp.Conjunction] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1250) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1251) final def apply(x0$9: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Conjunction]): stasiak.karol.fimpp.Conjunction = {
[scalac.plugin]               case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Conjunction] = x0$9;
[scalac.plugin]               case7(){
[scalac.plugin]                 if (x1.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit] = x1._1();
[scalac.plugin]                     val p3: stasiak.karol.fimpp.Conjunction = x1._2();
[scalac.plugin]                     if (p2.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val c1: stasiak.karol.fimpp.Condition = p2._1();
[scalac.plugin]                         val p4: Unit = p2._2();
[scalac.plugin]                         if (p3.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val cs: List[stasiak.karol.fimpp.Condition] = p3.conds();
[scalac.plugin]                             matchEnd6(new stasiak.karol.fimpp.Conjunction({
[scalac.plugin]                               <synthetic> val x$5: stasiak.karol.fimpp.Condition = c1;
[scalac.plugin]                               cs.::[stasiak.karol.fimpp.Condition](x$5)
[scalac.plugin]                             }))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case8()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case8()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case8()
[scalac.plugin]               };
[scalac.plugin]               case8(){
[scalac.plugin]                 matchEnd6(throw new MatchError(x1))
[scalac.plugin]               };
[scalac.plugin]               matchEnd6(x: stasiak.karol.fimpp.Conjunction){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             }
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Conjunction] => stasiak.karol.fimpp.Conjunction)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Conjunction])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1252) def orCondition(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"either?"})).~>[stasiak.karol.fimpp.Alternative]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1253) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1254) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative] = FimppParser.this.eitherLessOrCondition()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1255) def eitherLessOrCondition(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative] = FimppParser.this.simpleCondition().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1256) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1257) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.or()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Condition]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1258) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1259) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.simpleCondition()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Alternative]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition],stasiak.karol.fimpp.Alternative] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1260) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1261) final def apply(x0$10: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition]): stasiak.karol.fimpp.Alternative = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition] = x0$10;
[scalac.plugin]       case6(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit] = x1._1();
[scalac.plugin]             val c2: stasiak.karol.fimpp.Condition = x1._2();
[scalac.plugin]             if (p2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val c1: stasiak.karol.fimpp.Condition = p2._1();
[scalac.plugin]                 val p3: Unit = p2._2();
[scalac.plugin]                 matchEnd5(new stasiak.karol.fimpp.Alternative(immutable.this.List.apply[stasiak.karol.fimpp.Condition](scala.this.Predef.wrapRefArray[stasiak.karol.fimpp.Condition](Array[stasiak.karol.fimpp.Condition]{c1, c2}))))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case7()
[scalac.plugin]       };
[scalac.plugin]       case7(){
[scalac.plugin]         matchEnd5(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd5(x: stasiak.karol.fimpp.Alternative){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Condition] => stasiak.karol.fimpp.Alternative)
[scalac.plugin] }).|[stasiak.karol.fimpp.Alternative]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1262) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1263) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative] = FimppParser.this.simpleCondition().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1264) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1265) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Alternative]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1266) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1267) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative] = FimppParser.this.eitherLessOrCondition()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Alternative]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Alternative],stasiak.karol.fimpp.Alternative] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1268) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1269) final def apply(x0$11: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Alternative]): stasiak.karol.fimpp.Alternative = {
[scalac.plugin]               case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Alternative] = x0$11;
[scalac.plugin]               case7(){
[scalac.plugin]                 if (x1.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit] = x1._1();
[scalac.plugin]                     val p3: stasiak.karol.fimpp.Alternative = x1._2();
[scalac.plugin]                     if (p2.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val c1: stasiak.karol.fimpp.Condition = p2._1();
[scalac.plugin]                         val p4: Unit = p2._2();
[scalac.plugin]                         if (p3.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val cs: List[stasiak.karol.fimpp.Condition] = p3.conds();
[scalac.plugin]                             matchEnd6(new stasiak.karol.fimpp.Alternative({
[scalac.plugin]                               <synthetic> val x$6: stasiak.karol.fimpp.Condition = c1;
[scalac.plugin]                               cs.::[stasiak.karol.fimpp.Condition](x$6)
[scalac.plugin]                             }))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case8()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case8()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case8()
[scalac.plugin]               };
[scalac.plugin]               case8(){
[scalac.plugin]                 matchEnd6(throw new MatchError(x1))
[scalac.plugin]               };
[scalac.plugin]               matchEnd6(x: stasiak.karol.fimpp.Alternative){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             }
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Alternative] => stasiak.karol.fimpp.Alternative)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Alternative])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1270) def relationalCondition(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.expression().~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1271) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1272) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.condOperator()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1273) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1274) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Relational]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.Relational] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1275) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1276) final def apply(x0$12: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Relational = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] = x0$12;
[scalac.plugin]       case5(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String] = x1._1();
[scalac.plugin]             val e2: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]             if (p2.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val e1: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                 val op: String = p2._2();
[scalac.plugin]                 matchEnd4(new stasiak.karol.fimpp.Relational(e1, op, e2))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case6()
[scalac.plugin]       };
[scalac.plugin]       case6(){
[scalac.plugin]         matchEnd4(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd4(x: stasiak.karol.fimpp.Relational){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.Relational)
[scalac.plugin] }).|[stasiak.karol.fimpp.Relational]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1277) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1278) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"everything", "everypony"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1279) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1280) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"in"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1281) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1282) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1283) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1284) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.condOperator()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1285) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1286) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Relational]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.Relational] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1287) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1288) final def apply(x0$13: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Relational = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] = x0$13;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String] = x1._1();
[scalac.plugin]                 val e2: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val e1: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                     val op: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.Relational(e1, "all".+(op), e2))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Relational){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.Relational)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational])
[scalac.plugin] }).|[stasiak.karol.fimpp.Relational]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1289) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1290) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"anything", "anypony"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1291) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1292) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"in"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1293) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1294) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1295) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1296) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.condOperator()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1297) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1298) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Relational]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.Relational] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1299) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1300) final def apply(x0$14: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Relational = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] = x0$14;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String] = x1._1();
[scalac.plugin]                 val e2: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val e1: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                     val op: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.Relational(e1, "any".+(op), e2))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Relational){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.Relational)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational])
[scalac.plugin] }).|[stasiak.karol.fimpp.Relational]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1301) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1302) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational] = FimppParser.this.expression().<~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1303) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1304) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]] = FimppParser.this.isOrAre().~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1305) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1306) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"nothing", "nopony"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Relational]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Relational] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1307) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1308) final def apply(e: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Relational = new stasiak.karol.fimpp.Relational(e, "=", NullValue)
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.Relational)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational])
[scalac.plugin] }).|[stasiak.karol.fimpp.Relational]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1309) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1310) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational] = FimppParser.this.expression().<~[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1311) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1312) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]] = FimppParser.this.isOrAre().~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1313) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1314) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"something", "somepony"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[Unit,Unit]])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Relational]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Relational] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1315) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1316) final def apply(e: stasiak.karol.fimpp.Expr): stasiak.karol.fimpp.Relational = new stasiak.karol.fimpp.Relational(e, "!=", NullValue)
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): stasiak.karol.fimpp.Expr => stasiak.karol.fimpp.Relational)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Relational])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1317) def hasOrHave(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"has", "have", "had"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1318) def isOrAre(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"is", "are", "was", "were"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1319) def condOperator(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.hasOrHave().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1320) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1321) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"less", "than"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1322) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1323) final def apply(): String = "<"
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => String)
[scalac.plugin] }).|[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1324) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1325) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.hasOrHave().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1326) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1327) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"more", "than"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1328) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1329) final def apply(): String = ">"
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => String)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).|[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1330) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1331) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.hasOrHave().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1332) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1333) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"not", "less", "than"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1334) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1335) final def apply(): String = ">="
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => String)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).|[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1336) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1337) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.hasOrHave().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1338) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1339) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"not", "more", "than"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1340) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1341) final def apply(): String = "<="
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => String)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).|[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1342) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1343) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.isOrAre().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1344) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1345) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"equal", "to"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1346) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1347) final def apply(): String = "="
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => String)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).|[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1348) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1349) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.isOrAre().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1350) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1351) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"not", "equal", "to"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1352) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1353) final def apply(): String = "!="
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => String)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).|[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1354) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1355) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.isOrAre().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1356) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1357) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"an?", "element"})).|[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1358) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1359) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"elements"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1360) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1361) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1362) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1363) final def apply(): String = "="
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => String)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).|[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1364) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1365) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.isOrAre().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1366) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1367) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"not"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1368) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1369) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"an?", "element"})).|[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1370) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1371) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"elements"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1372) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1373) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[String]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1374) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1375) final def apply(): String = "!="
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => String)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1376) def increment(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Increment] = FimppParser.this.identifier().~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1377) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1378) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"got"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Long]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Long]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1379) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1380) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.number()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Long])
[scalac.plugin] }).~[Int]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Int]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1381) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1382) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Int] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"less"})).^^^[Int]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcI$sp with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1383) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1384) final def apply(): Int = $anonfun.this.apply$mcI$sp();
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1385) <specialized> def apply$mcI$sp(): Int = -1
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => Int)
[scalac.plugin] }).|[Int]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Int]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1386) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1387) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Int] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"fewer"})).^^^[Int]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcI$sp with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1388) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1389) final def apply(): Int = $anonfun.this.apply$mcI$sp();
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1390) <specialized> def apply$mcI$sp(): Int = -1
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => Int)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Int])
[scalac.plugin] }).|[Int]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Int]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1391) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1392) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Int] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"more"})).^^^[Int]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcI$sp with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1393) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1394) final def apply(): Int = $anonfun.this.apply$mcI$sp();
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1395) <specialized> def apply$mcI$sp(): Int = 1
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => Int)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Int])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Int])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1396) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1397) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Increment]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],Long],Int],stasiak.karol.fimpp.Increment] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1398) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1399) final def apply(x0$15: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],Long],Int]): stasiak.karol.fimpp.Increment = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],Long],Int] = x0$15;
[scalac.plugin]           case7(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],Long] = x1._1();
[scalac.plugin]                 val dir: Int = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p3: stasiak.karol.fimpp.FimppParser.~[String,Unit] = p2._1();
[scalac.plugin]                     val n: Long = p2._2();
[scalac.plugin]                     if (p3.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val i: String = p3._1();
[scalac.plugin]                         val p4: Unit = p3._2();
[scalac.plugin]                         matchEnd6(new stasiak.karol.fimpp.Increment(i, new stasiak.karol.fimpp.NumberValue(n.*(dir))))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case8()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case8()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case8()
[scalac.plugin]           };
[scalac.plugin]           case8(){
[scalac.plugin]             matchEnd6(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd6(x: stasiak.karol.fimpp.Increment){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],Long],Int] => stasiak.karol.fimpp.Increment)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1400) def assignment(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"did", "you", "know", "that?"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1401) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1402) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1403) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1404) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"likes", "is", "like", "are"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1405) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1406) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1407) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1408) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.questionEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Assignment]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.Assignment] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1409) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1410) final def apply(x0$16: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Assignment = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr] = x0$16;
[scalac.plugin]           case6(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,Unit] = x1._1();
[scalac.plugin]                 val e: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val i: String = p2._1();
[scalac.plugin]                     val p3: Unit = p2._2();
[scalac.plugin]                     matchEnd5(new stasiak.karol.fimpp.Assignment(i, e))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case7()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           };
[scalac.plugin]           case7(){
[scalac.plugin]             matchEnd5(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd5(x: stasiak.karol.fimpp.Assignment){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.Assignment)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1411) def ifStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.IfStat] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"when"})).~>[stasiak.karol.fimpp.Condition]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1412) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1413) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.condition()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1414) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1415) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1416) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1417) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1418) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1419) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Statement]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1420) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1421) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1422) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1423) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"in", "the", "end"})).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1424) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1425) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1426) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1427) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "did", "this", "instead"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1428) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1429) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1430) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1431) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1432) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1433) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]             })
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1434) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1435) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"that\'s", "what", "i", "did"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1436) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1437) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.IfStat]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],stasiak.karol.fimpp.IfStat] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1438) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1439) final def apply(x0$17: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]]): stasiak.karol.fimpp.IfStat = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]] = x0$17;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]] = x1._1();
[scalac.plugin]                 val eBody: Option[List[stasiak.karol.fimpp.Statement]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val cond: stasiak.karol.fimpp.Condition = p2._1();
[scalac.plugin]                     val body1: List[stasiak.karol.fimpp.Statement] = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.IfStat(cond, body1, eBody.getOrElse[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1440) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1441) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin]                     })))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.IfStat){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]] => stasiak.karol.fimpp.IfStat)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1442) def whileStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.WhileStat] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "did", "this", "while"})).~>[stasiak.karol.fimpp.Condition]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1443) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1444) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition] = FimppParser.this.condition()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Condition])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1445) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1446) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1447) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1448) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1449) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1450) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Statement]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1451) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1452) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1453) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1454) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"it", "didn\'t", "work"})).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1455) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1456) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1457) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1458) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"but", "i", "knew", "why"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1459) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1460) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1461) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1462) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1463) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1464) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]             })
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Statement]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1465) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1466) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1467) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1468) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"in", "the", "end"})).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1469) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1470) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1471) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1472) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "did", "this", "instead"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1473) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1474) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1475) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1476) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1477) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1478) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]             })
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1479) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1480) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"that\'s", "what", "i", "did"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1481) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1482) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.WhileStat]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]],stasiak.karol.fimpp.WhileStat] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1483) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1484) final def apply(x0$18: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]]): stasiak.karol.fimpp.WhileStat = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]] = x0$18;
[scalac.plugin]           case6(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]] = x1._1();
[scalac.plugin]                 val fBody: Option[List[stasiak.karol.fimpp.Statement]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p3: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]] = p2._1();
[scalac.plugin]                     val cBody: Option[List[stasiak.karol.fimpp.Statement]] = p2._2();
[scalac.plugin]                     if (p3.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val cond: stasiak.karol.fimpp.Condition = p3._1();
[scalac.plugin]                         val body1: List[stasiak.karol.fimpp.Statement] = p3._2();
[scalac.plugin]                         matchEnd5(new stasiak.karol.fimpp.WhileStat(cond, body1, cBody, fBody.getOrElse[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 1485) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 1486) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin]                         })))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case7()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case7()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           };
[scalac.plugin]           case7(){
[scalac.plugin]             matchEnd5(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd5(x: stasiak.karol.fimpp.WhileStat){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]] => stasiak.karol.fimpp.WhileStat)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1487) def repeatStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.RepeatStat] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "did", "this"})).~>[Long]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Long]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1488) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1489) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.opt[Long]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Long]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1490) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1491) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.number().<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1492) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1493) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"times"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).|[Long]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Long]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1494) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1495) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Long] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"once"})).^^^[Long]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcJ$sp with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1496) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1497) final def apply(): Long = $anonfun.this.apply$mcJ$sp();
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1498) <specialized> def apply$mcJ$sp(): Long = 1L
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => Long)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Long])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Long])
[scalac.plugin] }).^^[Long]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Option[Long],Long] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1499) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1500) final def apply(ot: Option[Long]): Long = ot.getOrElse[Long]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0$mcJ$sp with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1501) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1502) final def apply(): Long = $anonfun.this.apply$mcJ$sp();
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1503) <specialized> def apply$mcJ$sp(): Long = 1L
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => Long)
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): Option[Long] => Long)
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Long])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1504) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1505) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1506) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1507) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1508) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1509) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Statement]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1510) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1511) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1512) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1513) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"it", "didn\'t", "work"})).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1514) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1515) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1516) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1517) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"but", "i", "knew", "why"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1518) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1519) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1520) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1521) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1522) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1523) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]             })
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Statement]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1524) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1525) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1526) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1527) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"in", "the", "end"})).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1528) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1529) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1530) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1531) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "did", "this", "instead"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1532) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1533) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1534) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1535) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1536) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1537) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]             })
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Statement]]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1538) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1539) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"that\'s", "what", "i", "did"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1540) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1541) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.RepeatStat]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Long,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]],stasiak.karol.fimpp.RepeatStat] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1542) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1543) final def apply(x0$19: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Long,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]]): stasiak.karol.fimpp.RepeatStat = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Long,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]] = x0$19;
[scalac.plugin]           case6(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Long,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]] = x1._1();
[scalac.plugin]                 val fBody: Option[List[stasiak.karol.fimpp.Statement]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p3: stasiak.karol.fimpp.FimppParser.~[Long,List[stasiak.karol.fimpp.Statement]] = p2._1();
[scalac.plugin]                     val cBody: Option[List[stasiak.karol.fimpp.Statement]] = p2._2();
[scalac.plugin]                     if (p3.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val t: Long = p3._1();
[scalac.plugin]                         val body1: List[stasiak.karol.fimpp.Statement] = p3._2();
[scalac.plugin]                         matchEnd5(new stasiak.karol.fimpp.RepeatStat(t, body1, cBody, fBody.getOrElse[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 1544) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 1545) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin]                         })))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case7()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case7()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           };
[scalac.plugin]           case7(){
[scalac.plugin]             matchEnd5(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd5(x: stasiak.karol.fimpp.RepeatStat){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Long,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]],Option[List[stasiak.karol.fimpp.Statement]]] => stasiak.karol.fimpp.RepeatStat)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1546) def globalDeclStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.GlobalDeclStat] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"yes"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1547) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1548) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1549) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1550) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1551) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1552) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "mean"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1553) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1554) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"that"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1555) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1556) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1557) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1558) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.GlobalDeclStat]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.GlobalDeclStat] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1559) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1560) final def apply(i: String): stasiak.karol.fimpp.GlobalDeclStat = new stasiak.karol.fimpp.GlobalDeclStat(i)
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): String => stasiak.karol.fimpp.GlobalDeclStat)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1561) def callFunctionStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "also?"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1562) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1563) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"did", "made", "caused"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1564) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1565) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Expr]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1566) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1567) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1568) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1569) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of"})).~>[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1570) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1571) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.arglist()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1572) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1573) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ExprStat]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]],stasiak.karol.fimpp.ExprStat] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1574) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1575) final def apply(x0$20: stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]]): stasiak.karol.fimpp.ExprStat = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]] = x0$20;
[scalac.plugin]           case4(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val id: String = x1._1();
[scalac.plugin]                 val lArgs: Option[List[stasiak.karol.fimpp.Expr]] = x1._2();
[scalac.plugin]                 matchEnd3(new stasiak.karol.fimpp.ExprStat(new stasiak.karol.fimpp.FunctionCall(id, lArgs.getOrElse[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]                   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 1576) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                       $anonfun.super.<init>();
[scalac.plugin]                       ()
[scalac.plugin]                     };
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 1577) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]                   };
[scalac.plugin]                   (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin]                 }))))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case5()
[scalac.plugin]           };
[scalac.plugin]           case5(){
[scalac.plugin]             matchEnd3(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd3(x: stasiak.karol.fimpp.ExprStat){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]] => stasiak.karol.fimpp.ExprStat)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1578) def callFunctionEachStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "also?"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1579) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1580) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"did", "made", "caused"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1581) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1582) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1583) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1584) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of", "each", "of?"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1585) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1586) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1587) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1588) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ExprStat]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.ExprStat] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1589) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1590) final def apply(x0$21: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ExprStat = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr] = x0$21;
[scalac.plugin]           case6(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,Unit] = x1._1();
[scalac.plugin]                 val lArgs: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val id: String = p2._1();
[scalac.plugin]                     val p3: Unit = p2._2();
[scalac.plugin]                     matchEnd5(new stasiak.karol.fimpp.ExprStat(new stasiak.karol.fimpp.FunctionCallEach(id, lArgs)))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case7()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           };
[scalac.plugin]           case7(){
[scalac.plugin]             matchEnd5(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd5(x: stasiak.karol.fimpp.ExprStat){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.ExprStat)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1591) def functionCallAssign(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment] = FimppParser.this.identifier().~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1592) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1593) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"did", "made"})).~>[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1594) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1595) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1596) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1597) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"a", "an", "the"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1598) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1599) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Expr]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1600) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1601) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1602) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1603) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of"})).~>[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1604) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1605) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.arglist()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1606) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1607) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Assignment]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]],stasiak.karol.fimpp.Assignment] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1608) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1609) final def apply(x0$22: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]]): stasiak.karol.fimpp.Assignment = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]] = x0$22;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,String] = x1._1();
[scalac.plugin]                 val args: Option[List[stasiak.karol.fimpp.Expr]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val who: String = p2._1();
[scalac.plugin]                     val function: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.Assignment(who, new stasiak.karol.fimpp.FunctionCall(function, args.getOrElse[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1610) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1611) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin]                     }))))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Assignment){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]] => stasiak.karol.fimpp.Assignment)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1612) def functionCallEachAssign(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment] = FimppParser.this.identifier().~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1613) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1614) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"did", "made"})).~>[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1615) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1616) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1617) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1618) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"a", "an", "the"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1619) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1620) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1621) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1622) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of", "each", "of?"})).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1623) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1624) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1625) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1626) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Assignment]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.Assignment] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1627) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1628) final def apply(x0$23: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Assignment = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],stasiak.karol.fimpp.Expr] = x0$23;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,String] = x1._1();
[scalac.plugin]                 val args: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val who: String = p2._1();
[scalac.plugin]                     val function: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.Assignment(who, new stasiak.karol.fimpp.FunctionCallEach(function, args)))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Assignment){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.Assignment)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1629) def classImportStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "enchanted"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1630) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1631) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1632) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1633) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"with"})).~>[List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1634) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1635) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.rep[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1636) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1637) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawWord()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[String]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1638) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1639) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[String]])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[String,List[String]],stasiak.karol.fimpp.Statement] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1640) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1641) final def apply(x0$24: stasiak.karol.fimpp.FimppParser.~[String,List[String]]): stasiak.karol.fimpp.Statement = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[String,List[String]] = x0$24;
[scalac.plugin]           case4(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val id: String = x1._1();
[scalac.plugin]                 val cl: List[String] = x1._2();
[scalac.plugin]                 matchEnd3(new stasiak.karol.fimpp.ClassImportStat(id, cl))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case5()
[scalac.plugin]           };
[scalac.plugin]           case5(){
[scalac.plugin]             matchEnd3(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd3(x: stasiak.karol.fimpp.Statement){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[String,List[String]] => stasiak.karol.fimpp.Statement)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1642) def constructorCall(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "woke", "up"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1643) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1644) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1645) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1646) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"with"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1647) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1648) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Expr]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1649) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1650) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1651) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1652) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"and"})).~>[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1653) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1654) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.arglist()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1655) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1656) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]],stasiak.karol.fimpp.Statement] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1657) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1658) final def apply(x0$25: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]]): stasiak.karol.fimpp.Statement = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]] = x0$25;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,String] = x1._1();
[scalac.plugin]                 val args: Option[List[stasiak.karol.fimpp.Expr]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val variable: String = p2._1();
[scalac.plugin]                     val clazz: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.ConstructorCall(new Some[String](variable), clazz, args.getOrElse[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1659) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1660) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin]                     })))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Statement){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],Option[List[stasiak.karol.fimpp.Expr]]] => stasiak.karol.fimpp.Statement)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1661) def methodCallBranches(): stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"about"})).~>[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1662) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1663) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.arglist()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1664) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1665) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"so", "what", "when", "if"})).~>[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1666) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1667) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1668) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1669) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"they", "she", "he", "it"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1670) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1671) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawIdentifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[List[stasiak.karol.fimpp.Expr],String],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1672) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1673) final def apply(x0$26: stasiak.karol.fimpp.FimppParser.~[List[stasiak.karol.fimpp.Expr],String]): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[List[stasiak.karol.fimpp.Expr],String] = x0$26;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val args: List[stasiak.karol.fimpp.Expr] = x1._1();
[scalac.plugin]             val method: String = x1._2();
[scalac.plugin]             matchEnd3({
[scalac.plugin]               @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Option[String],Option[String],stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1674) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                   $anonfun.super.<init>();
[scalac.plugin]                   ()
[scalac.plugin]                 };
[scalac.plugin]                 @callgraph.annotation.targetmethod(value = 1675) final def apply(a: Option[String], b: Option[String]): stasiak.karol.fimpp.MethodCall = new stasiak.karol.fimpp.MethodCall(a, b, method, args)
[scalac.plugin]               };
[scalac.plugin]               (new anonymous class $anonfun(): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall)
[scalac.plugin]             })
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[List[stasiak.karol.fimpp.Expr],String] => ((Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall))
[scalac.plugin] }).|[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1676) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1677) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"about"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1678) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1679) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1680) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1681) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"made"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1682) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1683) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawIdentifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[String,String],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1684) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1685) final def apply(x0$27: stasiak.karol.fimpp.FimppParser.~[String,String]): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[String,String] = x0$27;
[scalac.plugin]           case4(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val arg: String = x1._1();
[scalac.plugin]                 val method: String = x1._2();
[scalac.plugin]                 matchEnd3({
[scalac.plugin]                   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Option[String],Option[String],stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 1686) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                       $anonfun.super.<init>();
[scalac.plugin]                       ()
[scalac.plugin]                     };
[scalac.plugin]                     @callgraph.annotation.targetmethod(value = 1687) final def apply(a: Option[String], b: Option[String]): stasiak.karol.fimpp.MethodCall = new stasiak.karol.fimpp.MethodCall(a, b, "set ".+(method), immutable.this.List.apply[Product with Serializable with stasiak.karol.fimpp.Expr](scala.this.Predef.wrapRefArray[Product with Serializable with stasiak.karol.fimpp.Expr](Array[Product with Serializable with stasiak.karol.fimpp.Expr]{new stasiak.karol.fimpp.VariableValue(arg), new stasiak.karol.fimpp.BooleanValue(true)})))
[scalac.plugin]                   };
[scalac.plugin]                   (new anonymous class $anonfun(): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall)
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case5()
[scalac.plugin]           };
[scalac.plugin]           case5(){
[scalac.plugin]             matchEnd3(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd3(x: (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[String,String] => ((Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall))
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall])
[scalac.plugin] }).|[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1688) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1689) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"about"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1690) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1691) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1692) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1693) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"with"})).~>[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1694) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1695) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.arglist()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1696) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1697) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1698) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1699) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawIdentifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Expr]],String],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1700) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1701) final def apply(x0$28: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Expr]],String]): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Expr]],String] = x0$28;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Expr]] = x1._1();
[scalac.plugin]                 val method: String = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val arg: String = p2._1();
[scalac.plugin]                     val args: List[stasiak.karol.fimpp.Expr] = p2._2();
[scalac.plugin]                     matchEnd4({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Option[String],Option[String],stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1702) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1703) final def apply(a: Option[String], b: Option[String]): stasiak.karol.fimpp.MethodCall = new stasiak.karol.fimpp.MethodCall(a, b, "set ".+(method), {
[scalac.plugin]                           <synthetic> val x$7: stasiak.karol.fimpp.VariableValue = new stasiak.karol.fimpp.VariableValue(arg);
[scalac.plugin]                           args.::[stasiak.karol.fimpp.Expr](x$7)
[scalac.plugin]                         })
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall)
[scalac.plugin]                     })
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Expr]],String] => ((Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall))
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall])
[scalac.plugin] }).|[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1704) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1705) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"what", "if"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1706) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1707) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Option[List[stasiak.karol.fimpp.Expr]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1708) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1709) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]] = FimppParser.this.opt[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1710) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1711) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"with"})).~>[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1712) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1713) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]] = FimppParser.this.arglist()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Expr]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[stasiak.karol.fimpp.Expr]]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1714) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1715) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.isOrAre().|[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1716) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1717) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.hasOrHave()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1718) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1719) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawIdentifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]],String],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1720) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1721) final def apply(x0$29: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]],String]): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall = {
[scalac.plugin]               case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]],String] = x0$29;
[scalac.plugin]               case5(){
[scalac.plugin]                 if (x1.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p2: stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]] = x1._1();
[scalac.plugin]                     val method: String = x1._2();
[scalac.plugin]                     if (p2.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val arg: String = p2._1();
[scalac.plugin]                         val args: Option[List[stasiak.karol.fimpp.Expr]] = p2._2();
[scalac.plugin]                         matchEnd4({
[scalac.plugin]                           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction2[Option[String],Option[String],stasiak.karol.fimpp.MethodCall] with Serializable {
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 1722) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                               $anonfun.super.<init>();
[scalac.plugin]                               ()
[scalac.plugin]                             };
[scalac.plugin]                             @callgraph.annotation.targetmethod(value = 1723) final def apply(a: Option[String], b: Option[String]): stasiak.karol.fimpp.MethodCall = new stasiak.karol.fimpp.MethodCall(a, b, "? ".+(method), {
[scalac.plugin]                               <synthetic> val x$8: stasiak.karol.fimpp.VariableValue = new stasiak.karol.fimpp.VariableValue(arg);
[scalac.plugin]                               args.getOrElse[List[stasiak.karol.fimpp.Expr]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1724) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1725) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin] }).::[stasiak.karol.fimpp.Expr](x$8)
[scalac.plugin]                             })
[scalac.plugin]                           };
[scalac.plugin]                           (new anonymous class $anonfun(): (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall)
[scalac.plugin]                         })
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case6()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               };
[scalac.plugin]               case6(){
[scalac.plugin]                 matchEnd4(throw new MatchError(x1))
[scalac.plugin]               };
[scalac.plugin]               matchEnd4(x: (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall){
[scalac.plugin]                 x
[scalac.plugin]               }
[scalac.plugin]             }
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[stasiak.karol.fimpp.Expr]]],String] => ((Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall))
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1726) def methodCall(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.opt[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1727) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1728) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "told"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1729) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1730) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Option[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1731) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1732) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[String]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "asked"})).~>[Option[String]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[String]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1733) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1734) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[String]] = FimppParser.this.opt[String]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1735) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1736) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[String]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[String]])
[scalac.plugin] }).~[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1737) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1738) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] = FimppParser.this.methodCallBranches()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1739) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1740) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],Option[String]],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall],stasiak.karol.fimpp.Statement] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1741) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1742) final def apply(x0$30: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],Option[String]],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall]): stasiak.karol.fimpp.Statement = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],Option[String]],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] = x0$30;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[Option[String],Option[String]] = x1._1();
[scalac.plugin]                 val f: (Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val ret: Option[String] = p2._1();
[scalac.plugin]                     val cl: Option[String] = p2._2();
[scalac.plugin]                     matchEnd4(f.apply(ret, cl))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Statement){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],Option[String]],(Option[String], Option[String]) => stasiak.karol.fimpp.MethodCall] => stasiak.karol.fimpp.Statement)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1743) def fieldSetStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1744) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1745) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"gave", "sold"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1746) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1747) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1748) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1749) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"to"})).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1750) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1751) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.simpleExpression()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1752) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1753) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1754) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1755) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1756) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1757) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Expr],String],stasiak.karol.fimpp.Statement] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1758) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1759) final def apply(x0$31: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Expr],String]): stasiak.karol.fimpp.Statement = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Expr],String] = x0$31;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Expr] = x1._1();
[scalac.plugin]                 val obj: String = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val value: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                     val field: stasiak.karol.fimpp.Expr = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.FieldAssignment(obj, field, value))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Statement){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,stasiak.karol.fimpp.Expr],String] => stasiak.karol.fimpp.Statement)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1760) def fieldGetStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1761) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1762) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"took", "got", "stole"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1763) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1764) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.simpleExpression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1765) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1766) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1767) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1768) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1769) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1770) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"and", "i?", "gave"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1771) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1772) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"it", "them", "her", "him"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1773) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1774) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"to"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1775) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1776) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1777) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1778) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String],stasiak.karol.fimpp.Statement] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1779) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1780) final def apply(x0$32: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String]): stasiak.karol.fimpp.Statement = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String] = x0$32;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String] = x1._1();
[scalac.plugin]                 val otherVar: String = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val field: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                     val obj: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.FieldRetrieval(obj, field, otherVar))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Statement){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String] => stasiak.karol.fimpp.Statement)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1781) def printStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.PrintStat] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i"})).~>[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1782) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1783) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1784) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1785) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"quickly"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1786) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1787) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"sang", "wrote", "said"})).~>[Option[Any]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Any]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1788) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1789) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Any]] = FimppParser.this.opt[Any]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Any]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1790) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1791) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Any] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"that"})).|[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1792) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1793) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).|[Any]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1794) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1795) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal(":")
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Any])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Any]])
[scalac.plugin] }).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1796) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1797) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1798) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1799) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.PrintStat]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[Option[Unit],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.PrintStat] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1800) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1801) final def apply(x0$33: stasiak.karol.fimpp.FimppParser.~[Option[Unit],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.PrintStat = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[Option[Unit],stasiak.karol.fimpp.Expr] = x0$33;
[scalac.plugin]           case9(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: Option[Unit] = x1._1();
[scalac.plugin]                 val e: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (p2.isInstanceOf[Some[Unit]]())
[scalac.plugin]                   {
[scalac.plugin]                     val x4: Some[Unit] = (p2.asInstanceOf[Some[Unit]](): Some[Unit]);
[scalac.plugin]                     if (x4.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val p3: Unit = x4.x();
[scalac.plugin]                         matchEnd8(new stasiak.karol.fimpp.PrintStat(e))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case10()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case10()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case10()
[scalac.plugin]           };
[scalac.plugin]           case10(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p5: Option[Unit] = x1._1();
[scalac.plugin]                 val e: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (scala.None.==(p5))
[scalac.plugin]                   {
[scalac.plugin]                     val x6: Option[Unit] = p5;
[scalac.plugin]                     matchEnd8(new stasiak.karol.fimpp.PrintStat(new stasiak.karol.fimpp.Concatenation(immutable.this.List.apply[stasiak.karol.fimpp.Expr](scala.this.Predef.wrapRefArray[stasiak.karol.fimpp.Expr](Array[stasiak.karol.fimpp.Expr]{e, new stasiak.karol.fimpp.StringValue("\n")})))))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case11()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case11()
[scalac.plugin]           };
[scalac.plugin]           case11(){
[scalac.plugin]             matchEnd8(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd8(x: stasiak.karol.fimpp.PrintStat){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[Option[Unit],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.PrintStat)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1802) def commentStat(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"by the way"})).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1803) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1804) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.commentContent()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1805) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1806) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^^[stasiak.karol.fimpp.NopStat.type]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.NopStat.type] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1807) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1808) final def apply(): stasiak.karol.fimpp.NopStat.type = NopStat
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.NopStat.type)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1809) def arrayAssignment(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayAssignment] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"on"})).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1810) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1811) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.ordinalExpression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1812) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1813) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of", "the?", "book?"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1814) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1815) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1816) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1817) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1818) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1819) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.altkw(scala.this.Predef.wrapRefArray[String](Array[String]{"wrote", "scribbled", "noted"}))
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1820) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1821) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1822) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1823) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"what", "i", "knew", "about"})).|[Unit]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1824) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1825) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"about"}))
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1826) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1827) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.expression()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1828) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1829) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ArrayAssignment]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.ArrayAssignment] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1830) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1831) final def apply(x0$34: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.ArrayAssignment = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] = x0$34;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String] = x1._1();
[scalac.plugin]                 val e: stasiak.karol.fimpp.Expr = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val ord: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                     val book: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.ArrayAssignment(book, ord, e))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.ArrayAssignment){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.ArrayAssignment)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1832) def arrayRetrieval(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayRetrieval] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"on"})).~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1833) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1834) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr] = FimppParser.this.ordinalExpression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1835) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1836) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"of", "the?", "book?"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1837) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1838) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1839) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1840) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "read", "about"})).~>[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1841) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1842) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1843) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1844) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ArrayRetrieval]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String],stasiak.karol.fimpp.ArrayRetrieval] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1845) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1846) final def apply(x0$35: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String]): stasiak.karol.fimpp.ArrayRetrieval = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String] = x0$35;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String] = x1._1();
[scalac.plugin]                 val varName: String = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val ord: stasiak.karol.fimpp.Expr = p2._1();
[scalac.plugin]                     val book: String = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.ArrayRetrieval(book, ord, varName))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.ArrayRetrieval){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Expr,String],String] => stasiak.karol.fimpp.ArrayRetrieval)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1847) def arrayInit(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayInit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"today?", "i", "found", "a", "book"})).~>[Option[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1848) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1849) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[String]] = FimppParser.this.opt[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1850) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1851) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal("named").|[String]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1852) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1853) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal("titled")
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[String]])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1854) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1855) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Option[Unit]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1856) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1857) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1858) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1859) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"today"}))
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1860) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1861) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).^^[stasiak.karol.fimpp.ArrayInit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.ArrayInit] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1862) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1863) final def apply(id: String): stasiak.karol.fimpp.ArrayInit = new stasiak.karol.fimpp.ArrayInit(id)
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): String => stasiak.karol.fimpp.ArrayInit)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1864) def statement(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.assignment().|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayAssignment]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1865) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1866) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayAssignment] = FimppParser.this.arrayAssignment()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayAssignment])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1867) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1868) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat] = FimppParser.this.callFunctionStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1869) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1870) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat] = FimppParser.this.callFunctionEachStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ExprStat])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.IfStat]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1871) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1872) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.IfStat] = FimppParser.this.ifStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.IfStat])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.WhileStat]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1873) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1874) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.WhileStat] = FimppParser.this.whileStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.WhileStat])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.RepeatStat]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1875) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1876) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.RepeatStat] = FimppParser.this.repeatStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.RepeatStat])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.PrintStat]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1877) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1878) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.PrintStat] = FimppParser.this.printStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.PrintStat])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.GlobalDeclStat]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1879) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1880) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.GlobalDeclStat] = FimppParser.this.globalDeclStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.GlobalDeclStat])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayInit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1881) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1882) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayInit] = FimppParser.this.arrayInit()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayInit])
[scalac.plugin] }).|[Product with Serializable with stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayRetrieval]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1883) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1884) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayRetrieval] = FimppParser.this.arrayRetrieval()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.ArrayRetrieval])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1885) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1886) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.commentStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1887) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1888) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.classImportStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1889) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1890) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.methodCall()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1891) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1892) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.constructorCall()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1893) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1894) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.fieldGetStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1895) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1896) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.fieldSetStat()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1897) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1898) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment] = FimppParser.this.functionCallAssign()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1899) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1900) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment] = FimppParser.this.functionCallEachAssign()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Assignment])
[scalac.plugin] }).|[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Increment]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1901) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1902) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Increment] = FimppParser.this.increment()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Increment])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1903) def function(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"i", "learned", "about?"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1904) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1905) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Option[List[String]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[List[String]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1906) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1907) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[List[String]]] = FimppParser.this.opt[List[String]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[String]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1908) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1909) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"with"})).~>[List[String]]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[String]]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1910) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1911) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[String]] = FimppParser.this.listOfIdentifiers()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[String]])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[String]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[List[String]]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1912) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1913) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1914) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1915) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1916) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1917) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin] }).~[stasiak.karol.fimpp.FimppParser.~[String,Option[String]]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[String,Option[String]]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1918) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1919) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[String,Option[String]]] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"that\'s", "about"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1920) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1921) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[Option[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1922) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1923) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[String]] = FimppParser.this.opt[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1924) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1925) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"with"})).~>[String]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1926) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1927) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[String]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1928) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1929) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.FimppParser.~[String,Option[String]]])
[scalac.plugin] }).^?[stasiak.karol.fimpp.Function](({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractPartialFunction[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]],stasiak.karol.fimpp.Function] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1930) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1931) final override def applyOrElse[A1 >: Nothing <: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]], B1 >: stasiak.karol.fimpp.Function <: Any](x$1: A1, default: A1 => B1): B1 = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]] = (x$1: A1 @unchecked);
[scalac.plugin]           case7(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]] = x1._1();
[scalac.plugin]                 val p3: stasiak.karol.fimpp.FimppParser.~[String,Option[String]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p4: stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]] = p2._1();
[scalac.plugin]                     val stats: List[stasiak.karol.fimpp.Statement] = p2._2();
[scalac.plugin]                     if (p4.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val fName: String = p4._1();
[scalac.plugin]                         val args: Option[List[String]] = p4._2();
[scalac.plugin]                         if (p3.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val fName2: String = p3._1();
[scalac.plugin]                             val retArg: Option[String] = p3._2();
[scalac.plugin]                             if (fName.==(fName2))
[scalac.plugin]                               matchEnd6(new stasiak.karol.fimpp.Function(fName, args.getOrElse[List[String]]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[scala.collection.immutable.Nil.type] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 1932) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 1933) final def apply(): scala.collection.immutable.Nil.type = immutable.this.Nil
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): () => scala.collection.immutable.Nil.type)
[scalac.plugin]                               }), stats, retArg.getOrElse[String]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 1934) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 1935) final def apply(): String = fName
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): () => String)
[scalac.plugin]                               })))
[scalac.plugin]                             else
[scalac.plugin]                               case8()
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case8()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case8()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case8()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case8()
[scalac.plugin]           };
[scalac.plugin]           case8(){
[scalac.plugin]             matchEnd6(default.apply(x$1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd6(x: B1){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1936) final def isDefinedAt(x$1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]]): Boolean = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]] = (x$1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]] @unchecked);
[scalac.plugin]           case7(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]] = x1._1();
[scalac.plugin]                 val p3: stasiak.karol.fimpp.FimppParser.~[String,Option[String]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p4: stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]] = p2._1();
[scalac.plugin]                     val stats: List[stasiak.karol.fimpp.Statement] = p2._2();
[scalac.plugin]                     if (p4.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val fName: String = p4._1();
[scalac.plugin]                         val args: Option[List[String]] = p4._2();
[scalac.plugin]                         if (p3.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val fName2: String = p3._1();
[scalac.plugin]                             val retArg: Option[String] = p3._2();
[scalac.plugin]                             if (fName.==(fName2))
[scalac.plugin]                               matchEnd6(true)
[scalac.plugin]                             else
[scalac.plugin]                               case8()
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case8()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case8()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case8()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case8()
[scalac.plugin]           };
[scalac.plugin]           case8(){
[scalac.plugin]             matchEnd6(false)
[scalac.plugin]           };
[scalac.plugin]           matchEnd6(x: Boolean){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       new anonymous class $anonfun()
[scalac.plugin]     }: PartialFunction[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]],stasiak.karol.fimpp.Function]), {
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]],String] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1937) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1938) final def apply(x0$36: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]]): String = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]] = x0$36;
[scalac.plugin]           case7(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]] = x1._1();
[scalac.plugin]                 val p3: stasiak.karol.fimpp.FimppParser.~[String,Option[String]] = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p4: stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]] = p2._1();
[scalac.plugin]                     val stats: List[stasiak.karol.fimpp.Statement] = p2._2();
[scalac.plugin]                     if (p4.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val fName: String = p4._1();
[scalac.plugin]                         val args: Option[List[String]] = p4._2();
[scalac.plugin]                         if (p3.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val fName2: String = p3._1();
[scalac.plugin]                             val retArg: Option[String] = p3._2();
[scalac.plugin]                             matchEnd6(FimppParser.this.ERRORS().mismatchedFunctionNameInFooter(fName, fName2))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case8()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case8()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case8()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case8()
[scalac.plugin]           };
[scalac.plugin]           case8(){
[scalac.plugin]             matchEnd6(FimppParser.this.ERRORS().unknownError())
[scalac.plugin]           };
[scalac.plugin]           matchEnd6(x: String){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]] => String)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1939) def mainFunction(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"today", "i", "learned", "about?"})).~>[Option[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[String]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1940) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1941) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[String]] = FimppParser.this.opt[String]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1942) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1943) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[String]])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1944) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1945) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Statement]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1946) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1947) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]] = FimppParser.this.rep[stasiak.karol.fimpp.Statement]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1948) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1949) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement] = FimppParser.this.statement()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Statement])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Statement]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1950) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1951) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"your", "faithful", "student"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1952) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1953) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1954) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1955) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Option[Unit]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1956) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1957) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1958) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1959) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Function]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],List[stasiak.karol.fimpp.Statement]],String],stasiak.karol.fimpp.Function] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1960) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1961) final def apply(x0$37: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],List[stasiak.karol.fimpp.Statement]],String]): stasiak.karol.fimpp.Function = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],List[stasiak.karol.fimpp.Statement]],String] = x0$37;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[Option[String],List[stasiak.karol.fimpp.Statement]] = x1._1();
[scalac.plugin]                 val retArg: String = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val fName: Option[String] = p2._1();
[scalac.plugin]                     val stats: List[stasiak.karol.fimpp.Statement] = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.Function(fName.getOrElse[String]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[String] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1962) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 1963) final def apply(): String = "<main>"
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): () => String)
[scalac.plugin]                     }), immutable.this.Nil, stats, retArg))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Function){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[Option[String],List[stasiak.karol.fimpp.Statement]],String] => stasiak.karol.fimpp.Function)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1964) def wrappedModule(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Module] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"dear", "princess", "celestia"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1965) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1966) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal(":")
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1967) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1968) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawIdentifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1969) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1970) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1971) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1972) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"today", "i", "learned", "about?"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1973) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1974) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1975) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1976) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Function]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Function]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1977) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1978) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Function]] = FimppParser.this.rep[stasiak.karol.fimpp.Function]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1979) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1980) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function] = FimppParser.this.function()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Function]])
[scalac.plugin] }).~[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1981) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1982) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"your", "faithful", "student"})).~>[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1983) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1984) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.comma()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1985) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1986) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.identifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Option[Unit]]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1987) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1988) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]] = FimppParser.this.opt[Unit]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1989) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 1990) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.sentenceEnd()
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Option[Unit]])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Module]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],List[stasiak.karol.fimpp.Function]],String],stasiak.karol.fimpp.Module] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1991) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 1992) final def apply(x0$38: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],List[stasiak.karol.fimpp.Function]],String]): stasiak.karol.fimpp.Module = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],List[stasiak.karol.fimpp.Function]],String] = x0$38;
[scalac.plugin]           case6(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],List[stasiak.karol.fimpp.Function]] = x1._1();
[scalac.plugin]                 val retArg: String = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val p3: stasiak.karol.fimpp.FimppParser.~[String,String] = p2._1();
[scalac.plugin]                     val functions: List[stasiak.karol.fimpp.Function] = p2._2();
[scalac.plugin]                     if (p3.ne(null))
[scalac.plugin]                       {
[scalac.plugin]                         val name: String = p3._1();
[scalac.plugin]                         val main: String = p3._2();
[scalac.plugin]                         matchEnd5(new stasiak.karol.fimpp.Module(name, {
[scalac.plugin]                           <synthetic> val x$10: stasiak.karol.fimpp.Function = new stasiak.karol.fimpp.Function("letter to celestia", immutable.this.Nil, {
[scalac.plugin]                             <synthetic> val x$9: stasiak.karol.fimpp.ExprStat = new stasiak.karol.fimpp.ExprStat(new stasiak.karol.fimpp.FunctionCall(main, immutable.this.Nil));
[scalac.plugin]                             immutable.this.Nil.::[stasiak.karol.fimpp.ExprStat](x$9)
[scalac.plugin]                           }, retArg);
[scalac.plugin]                           functions.::[stasiak.karol.fimpp.Function](x$10)
[scalac.plugin]                         }))
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case7()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case7()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case7()
[scalac.plugin]           };
[scalac.plugin]           case7(){
[scalac.plugin]             matchEnd5(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd5(x: stasiak.karol.fimpp.Module){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,String],List[stasiak.karol.fimpp.Function]],String] => stasiak.karol.fimpp.Module)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1993) def c_likeModule(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Module] = FimppParser.this.kw(scala.this.Predef.wrapRefArray[String](Array[String]{"dear", "princess", "celestia"})).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1994) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1995) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.literal(":")
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).~>[String]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[String]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1996) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1997) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[String] = FimppParser.this.rawIdentifier()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[String])
[scalac.plugin] }).<~[Unit]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[Unit]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1998) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 1999) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[Unit] = FimppParser.this.headerEnd()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[Unit])
[scalac.plugin] }).~[List[stasiak.karol.fimpp.Function]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Function]]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2000) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2001) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Function]] = FimppParser.this.rep[stasiak.karol.fimpp.Function]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2002) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2003) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function] = FimppParser.this.function()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[List[stasiak.karol.fimpp.Function]])
[scalac.plugin] }).~[stasiak.karol.fimpp.Function]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2004) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2005) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function] = FimppParser.this.mainFunction()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Function])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Module]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Function]],stasiak.karol.fimpp.Function],stasiak.karol.fimpp.Module] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2006) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2007) final def apply(x0$39: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Function]],stasiak.karol.fimpp.Function]): stasiak.karol.fimpp.Module = {
[scalac.plugin]           case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Function]],stasiak.karol.fimpp.Function] = x0$39;
[scalac.plugin]           case5(){
[scalac.plugin]             if (x1.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val p2: stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Function]] = x1._1();
[scalac.plugin]                 val m: stasiak.karol.fimpp.Function = x1._2();
[scalac.plugin]                 if (p2.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val name: String = p2._1();
[scalac.plugin]                     val functions: List[stasiak.karol.fimpp.Function] = p2._2();
[scalac.plugin]                     matchEnd4(new stasiak.karol.fimpp.Module(name, {
[scalac.plugin]                       <synthetic> val x$11: stasiak.karol.fimpp.Function = m;
[scalac.plugin]                       functions.::[stasiak.karol.fimpp.Function](x$11)
[scalac.plugin]                     }))
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case6()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case6()
[scalac.plugin]           };
[scalac.plugin]           case6(){
[scalac.plugin]             matchEnd4(throw new MatchError(x1))
[scalac.plugin]           };
[scalac.plugin]           matchEnd4(x: stasiak.karol.fimpp.Module){
[scalac.plugin]             x
[scalac.plugin]           }
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Function]],stasiak.karol.fimpp.Function] => stasiak.karol.fimpp.Module)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2008) def module(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Module] = FimppParser.this.wrappedModule().|[stasiak.karol.fimpp.Module]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Module]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2009) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2010) final def apply(): stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Module] = FimppParser.this.c_likeModule()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.FimppParser.Parser[stasiak.karol.fimpp.Module])
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2011) def parseFim(s: String): Option[stasiak.karol.fimpp.Module] = {
[scalac.plugin]       case <synthetic> val x1: stasiak.karol.fimpp.FimppParser.ParseResult[stasiak.karol.fimpp.Module] = FimppParser.this.parseAll[stasiak.karol.fimpp.Module](FimppParser.this.module(), s);
[scalac.plugin]       case8(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.FimppParser.Success[stasiak.karol.fimpp.Module]]())
[scalac.plugin]           {
[scalac.plugin]             val x3: stasiak.karol.fimpp.FimppParser.Success[stasiak.karol.fimpp.Module] = (x1.asInstanceOf[stasiak.karol.fimpp.FimppParser.Success[stasiak.karol.fimpp.Module]](): stasiak.karol.fimpp.FimppParser.Success[stasiak.karol.fimpp.Module]);
[scalac.plugin]             if (x3.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val fimModule: stasiak.karol.fimpp.Module = x3.result();
[scalac.plugin]                 val p2: scala.util.parsing.input.Reader[Char] = x3.next();
[scalac.plugin]                 matchEnd7(new Some[stasiak.karol.fimpp.Module](fimModule))
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case9()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case9()
[scalac.plugin]       };
[scalac.plugin]       case9(){
[scalac.plugin]         if (x1.isInstanceOf[stasiak.karol.fimpp.FimppParser.Failure]())
[scalac.plugin]           {
[scalac.plugin]             val x5: stasiak.karol.fimpp.FimppParser.Failure = (x1.asInstanceOf[stasiak.karol.fimpp.FimppParser.Failure](): stasiak.karol.fimpp.FimppParser.Failure);
[scalac.plugin]             if (x5.ne(null))
[scalac.plugin]               {
[scalac.plugin]                 val errorMsg: String = x5.msg();
[scalac.plugin]                 val p4: scala.util.parsing.input.Reader[Char] = x5.next();
[scalac.plugin]                 matchEnd7({
[scalac.plugin]                   scala.this.Predef.println(errorMsg);
[scalac.plugin]                   scala.None
[scalac.plugin]                 })
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case10()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case10()
[scalac.plugin]       };
[scalac.plugin]       case10(){
[scalac.plugin]         matchEnd7(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd7(x: Option[stasiak.karol.fimpp.Module]){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   object StringInnardsParser extends Object with scala.util.parsing.combinator.RegexParsers {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2012) def <init>(): stasiak.karol.fimpp.StringInnardsParser.type = {
[scalac.plugin]       StringInnardsParser.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     private[this] val skipWhitespace: Boolean = false;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2013) override <stable> <accessor> def skipWhitespace(): Boolean = StringInnardsParser.this.skipWhitespace;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2014) def expression(): stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr] = StringInnardsParser.this.regex(scala.this.Predef.augmentString("[^\"\']+").r()).^^[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.Expr] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2015) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2016) final def apply(e: String): stasiak.karol.fimpp.Expr = FimppParser.parseAll[stasiak.karol.fimpp.Expr](FimppParser.expression(), e).get()
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): String => stasiak.karol.fimpp.Expr)
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2017) def stringInnards(): stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Concatenation] = StringInnardsParser.this.rep[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2018) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2019) final def apply(): stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr] = StringInnardsParser.this.regex(scala.this.Predef.augmentString("[^\"\']+").r()).^^[stasiak.karol.fimpp.StringValue]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,stasiak.karol.fimpp.StringValue] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2020) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2021) final def apply(s: String): stasiak.karol.fimpp.StringValue = new stasiak.karol.fimpp.StringValue(s)
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): String => stasiak.karol.fimpp.StringValue)
[scalac.plugin] }).|[stasiak.karol.fimpp.Expr]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2022) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2023) final def apply(): stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr] = StringInnardsParser.this.literal("\'").~>[stasiak.karol.fimpp.Expr]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr]] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2024) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2025) final def apply(): stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr] = StringInnardsParser.this.expression()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).<~[String]({
[scalac.plugin]           @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[stasiak.karol.fimpp.StringInnardsParser.Parser[String]] with Serializable {
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 2026) def <init>(): anonymous class $anonfun = {
[scalac.plugin]               $anonfun.super.<init>();
[scalac.plugin]               ()
[scalac.plugin]             };
[scalac.plugin]             @callgraph.annotation.targetmethod(value = 2027) final def apply(): stasiak.karol.fimpp.StringInnardsParser.Parser[String] = StringInnardsParser.this.literal("\'")
[scalac.plugin]           };
[scalac.plugin]           (new anonymous class $anonfun(): () => stasiak.karol.fimpp.StringInnardsParser.Parser[String])
[scalac.plugin]         })
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): () => stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin]     })
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): () => stasiak.karol.fimpp.StringInnardsParser.Parser[stasiak.karol.fimpp.Expr])
[scalac.plugin] }).^^[stasiak.karol.fimpp.Concatenation]({
[scalac.plugin]       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[List[stasiak.karol.fimpp.Expr],stasiak.karol.fimpp.Concatenation] with Serializable {
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2028) def <init>(): anonymous class $anonfun = {
[scalac.plugin]           $anonfun.super.<init>();
[scalac.plugin]           ()
[scalac.plugin]         };
[scalac.plugin]         @callgraph.annotation.targetmethod(value = 2029) final def apply(l: List[stasiak.karol.fimpp.Expr]): stasiak.karol.fimpp.Concatenation = new stasiak.karol.fimpp.Concatenation(l)
[scalac.plugin]       };
[scalac.plugin]       (new anonymous class $anonfun(): List[stasiak.karol.fimpp.Expr] => stasiak.karol.fimpp.Concatenation)
[scalac.plugin]     })
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // JavaInterop.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   object JavaInterop extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2030) def <init>(): stasiak.karol.fimpp.JavaInterop.type = {
[scalac.plugin]       JavaInterop.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2031) def normalizeFromFim(str: String): String = str.toLowerCase().replaceAll(" ", "").replaceAll("\'", "").replaceAll("-", "");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2032) def normalizeFromJava(str: String): String = str.toLowerCase().replaceAll("_", "").replaceAll("0", "zero").replaceAll("1", "one").replaceAll("2", "two").replaceAll("3", "three").replaceAll("4", "four").replaceAll("5", "five").replaceAll("6", "six").replaceAll("7", "seven").replaceAll("8", "eight").replaceAll("9", "nine");
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2033) def normalizedMatch(fromFimNormalized: String, fromJavaNormalized: String): Boolean = if (fromFimNormalized.charAt(0).==('?'))
[scalac.plugin]       "is".+(fromFimNormalized.substring(1)).==(fromJavaNormalized).||("get".+(fromFimNormalized.substring(1)).==(fromJavaNormalized))
[scalac.plugin]     else
[scalac.plugin]       fromFimNormalized.==(fromJavaNormalized);
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2034) def isPrivate(flags: Int): Boolean = 0.!=(flags.&(2));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2035) def isStatic(flags: Int): Boolean = 0.!=(flags.&(8));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2036) def callMethod(context: stasiak.karol.fimpp.Context, clazz: Class[_], methodName: String, methodParams: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       val n1: String = JavaInterop.this.normalizeFromFim(methodName);
[scalac.plugin]       var best: java.lang.reflect.Method = null;
[scalac.plugin]       var bestScore: Double = 0.001;
[scalac.plugin]       scala.this.Predef.refArrayOps[java.lang.reflect.Method](clazz.getMethods()).foreach[Unit]({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[java.lang.reflect.Method,Unit] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2037) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2038) final def apply(method: java.lang.reflect.Method): Unit = {
[scalac.plugin]             val n2: String = JavaInterop.this.normalizeFromJava(method.getName());
[scalac.plugin]             if (JavaInterop.this.isPrivate(method.getModifiers()).unary_!().&&(JavaInterop.this.normalizedMatch(n1, n2)).&&(scala.this.Predef.refArrayOps[Class[_]](method.getParameterTypes()).size().==(if (JavaInterop.this.isStatic(method.getModifiers()))
[scalac.plugin]               methodParams.size()
[scalac.plugin]             else
[scalac.plugin]               methodParams.size().-(1))))
[scalac.plugin]               {
[scalac.plugin]                 val score: Double = if (JavaInterop.this.isStatic(method.getModifiers()))
[scalac.plugin]   methodParams
[scalac.plugin] else
[scalac.plugin]   methodParams.tail().zip[stasiak.karol.fimpp.RuntimeValue, Class[_], List[(stasiak.karol.fimpp.RuntimeValue, Class[_])]](scala.this.Predef.wrapRefArray[Class[_]](method.getParameterTypes()), immutable.this.List.canBuildFrom[(stasiak.karol.fimpp.RuntimeValue, Class[_])]()).map[Double, List[Double]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[(stasiak.karol.fimpp.RuntimeValue, Class[_]),Double] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2039) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2040) final def apply(x0$1: (stasiak.karol.fimpp.RuntimeValue, Class[_])): Double = {
[scalac.plugin]       case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, Class[_]) = x0$1;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val rv: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val cl: Class[_] = x1._2();
[scalac.plugin]             matchEnd3(rv.matches(cl))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Double){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): ((stasiak.karol.fimpp.RuntimeValue, Class[_])) => Double)
[scalac.plugin] }, immutable.this.List.canBuildFrom[Double]()).product[Double](math.this.Numeric.DoubleIsFractional).*(if (JavaInterop.this.isStatic(method.getModifiers()))
[scalac.plugin]                   1.0
[scalac.plugin]                 else
[scalac.plugin]                   methodParams.head().matches(clazz));
[scalac.plugin]                 if (score.>(bestScore))
[scalac.plugin]                   {
[scalac.plugin]                     bestScore = score;
[scalac.plugin]                     best = method
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   ()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               ()
[scalac.plugin]           }
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): java.lang.reflect.Method => Unit)
[scalac.plugin]       });
[scalac.plugin]       if (best.eq(null))
[scalac.plugin]         throw new stasiak.karol.fimpp.FimException("Method ‘".+(methodName).+("’ not found"))
[scalac.plugin]       else
[scalac.plugin]         ();
[scalac.plugin]       if (JavaInterop.this.isStatic(best.getModifiers()))
[scalac.plugin]         {
[scalac.plugin]           val args: Seq[Object] = methodParams.zip[stasiak.karol.fimpp.RuntimeValue, Class[_], List[(stasiak.karol.fimpp.RuntimeValue, Class[_])]](scala.this.Predef.wrapRefArray[Class[_]](best.getParameterTypes()), immutable.this.List.canBuildFrom[(stasiak.karol.fimpp.RuntimeValue, Class[_])]()).map[Any, List[Any]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[(stasiak.karol.fimpp.RuntimeValue, Class[_]),Any] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2041) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2042) final def apply(x0$2: (stasiak.karol.fimpp.RuntimeValue, Class[_])): Any = {
[scalac.plugin]       case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, Class[_]) = x0$2;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val rv: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val cl: Class[_] = x1._2();
[scalac.plugin]             matchEnd3(rv.convertTo(context, cl))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): ((stasiak.karol.fimpp.RuntimeValue, Class[_])) => Any)
[scalac.plugin] }, immutable.this.List.canBuildFrom[Any]()).toSeq().asInstanceOf[Seq[Object]]();
[scalac.plugin]           RuntimeValue.fromJava(best.invoke(null, args.toArray[Object](ClassTag.Object())))
[scalac.plugin]         }
[scalac.plugin]       else
[scalac.plugin]         {
[scalac.plugin]           val args: Seq[Object] = methodParams.tail().zip[stasiak.karol.fimpp.RuntimeValue, Class[_], List[(stasiak.karol.fimpp.RuntimeValue, Class[_])]](scala.this.Predef.wrapRefArray[Class[_]](best.getParameterTypes()), immutable.this.List.canBuildFrom[(stasiak.karol.fimpp.RuntimeValue, Class[_])]()).map[Any, List[Any]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[(stasiak.karol.fimpp.RuntimeValue, Class[_]),Any] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2043) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2044) final def apply(x0$3: (stasiak.karol.fimpp.RuntimeValue, Class[_])): Any = {
[scalac.plugin]       case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, Class[_]) = x0$3;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val rv: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val cl: Class[_] = x1._2();
[scalac.plugin]             matchEnd3(rv.convertTo(context, cl))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): ((stasiak.karol.fimpp.RuntimeValue, Class[_])) => Any)
[scalac.plugin] }, immutable.this.List.canBuildFrom[Any]()).toSeq().asInstanceOf[Seq[Object]]();
[scalac.plugin]           RuntimeValue.fromJava(best.invoke(methodParams.head().convertTo(context, clazz), args.toArray[Object](ClassTag.Object())))
[scalac.plugin]         }
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2045) def callConstructor(context: stasiak.karol.fimpp.Context, clazz: Class[_], constructorParams: List[stasiak.karol.fimpp.RuntimeValue]): stasiak.karol.fimpp.RuntimeValue = {
[scalac.plugin]       var best: java.lang.reflect.Constructor[_] = null;
[scalac.plugin]       var bestScore: Double = 0.001;
[scalac.plugin]       scala.this.Predef.refArrayOps[java.lang.reflect.Constructor[_]](clazz.getConstructors()).foreach[Unit]({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[java.lang.reflect.Constructor[_],Unit] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2046) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2047) final def apply(constructor: java.lang.reflect.Constructor[_]): Unit = if (JavaInterop.this.isPrivate(constructor.getModifiers()).unary_!().&&(scala.this.Predef.refArrayOps[Class[_]](constructor.getParameterTypes()).size().==(constructorParams.size())))
[scalac.plugin]             {
[scalac.plugin]               val score: Double = constructorParams.zip[stasiak.karol.fimpp.RuntimeValue, Class[_], List[(stasiak.karol.fimpp.RuntimeValue, Class[_])]](scala.this.Predef.wrapRefArray[Class[_]](constructor.getParameterTypes()), immutable.this.List.canBuildFrom[(stasiak.karol.fimpp.RuntimeValue, Class[_])]()).map[Double, List[Double]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[(stasiak.karol.fimpp.RuntimeValue, Class[_]),Double] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2048) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2049) final def apply(x0$4: (stasiak.karol.fimpp.RuntimeValue, Class[_])): Double = {
[scalac.plugin]       case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, Class[_]) = x0$4;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val rv: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val cl: Class[_] = x1._2();
[scalac.plugin]             matchEnd3(rv.matches(cl))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Double){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): ((stasiak.karol.fimpp.RuntimeValue, Class[_])) => Double)
[scalac.plugin] }, immutable.this.List.canBuildFrom[Double]()).product[Double](math.this.Numeric.DoubleIsFractional);
[scalac.plugin]               if (score.>(bestScore))
[scalac.plugin]                 {
[scalac.plugin]                   bestScore = score;
[scalac.plugin]                   best = constructor
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 ()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             ()
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): java.lang.reflect.Constructor[_] => Unit)
[scalac.plugin]       });
[scalac.plugin]       if (best.eq(null))
[scalac.plugin]         throw new stasiak.karol.fimpp.FimException("Couldn\'t wake up")
[scalac.plugin]       else
[scalac.plugin]         ();
[scalac.plugin]       val args: Seq[Object] = constructorParams.zip[stasiak.karol.fimpp.RuntimeValue, Class[_], List[(stasiak.karol.fimpp.RuntimeValue, Class[_])]](scala.this.Predef.wrapRefArray[Class[_]](best.getParameterTypes()), immutable.this.List.canBuildFrom[(stasiak.karol.fimpp.RuntimeValue, Class[_])]()).map[Any, List[Any]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[(stasiak.karol.fimpp.RuntimeValue, Class[_]),Any] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2050) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2051) final def apply(x0$5: (stasiak.karol.fimpp.RuntimeValue, Class[_])): Any = {
[scalac.plugin]       case <synthetic> val x1: (stasiak.karol.fimpp.RuntimeValue, Class[_]) = x0$5;
[scalac.plugin]       case4(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val rv: stasiak.karol.fimpp.RuntimeValue = x1._1();
[scalac.plugin]             val cl: Class[_] = x1._2();
[scalac.plugin]             matchEnd3(rv.convertTo(context, cl))
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case5()
[scalac.plugin]       };
[scalac.plugin]       case5(){
[scalac.plugin]         matchEnd3(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd3(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): ((stasiak.karol.fimpp.RuntimeValue, Class[_])) => Any)
[scalac.plugin] }, immutable.this.List.canBuildFrom[Any]()).toSeq().asInstanceOf[Seq[Object]]();
[scalac.plugin]       RuntimeValue.fromJava(best.newInstance(args.toArray[Object](ClassTag.Object())))
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2052) def getField(objClass: scala.util.Either[Class[_],Any], field: scala.util.Either[Int,String]): stasiak.karol.fimpp.RuntimeValue = RuntimeValue.fromJava({
[scalac.plugin]       case <synthetic> val x1: (scala.util.Either[Class[_],Any], scala.util.Either[Int,String]) = new (scala.util.Either[Class[_],Any], scala.util.Either[Int,String])(objClass, field);
[scalac.plugin]       case20(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p3: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p2.isInstanceOf[scala.util.Left[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x4: scala.util.Left[Class[_],Any] = (p2.asInstanceOf[scala.util.Left[Class[_],Any]](): scala.util.Left[Class[_],Any]);
[scalac.plugin]                 if (x4.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val clazz: Class[_] = x4.a();
[scalac.plugin]                     if (p3.isInstanceOf[scala.util.Left[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x5: scala.util.Left[Int,String] = (p3.asInstanceOf[scala.util.Left[Int,String]](): scala.util.Left[Int,String]);
[scalac.plugin]                         if (x5.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val i: Int = x5.a();
[scalac.plugin]                             matchEnd19(throw new stasiak.karol.fimpp.FimException("Classes are not indexable"))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case21()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case21()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case21()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case21()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case21()
[scalac.plugin]       };
[scalac.plugin]       case21(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p6: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p7: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p6.isInstanceOf[scala.util.Right[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x8: scala.util.Right[Class[_],Any] = (p6.asInstanceOf[scala.util.Right[Class[_],Any]](): scala.util.Right[Class[_],Any]);
[scalac.plugin]                 if (x8.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val obj: Any = x8.b();
[scalac.plugin]                     if (p7.isInstanceOf[scala.util.Left[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x9: scala.util.Left[Int,String] = (p7.asInstanceOf[scala.util.Left[Int,String]](): scala.util.Left[Int,String]);
[scalac.plugin]                         if (x9.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val i: Int = x9.a();
[scalac.plugin]                             matchEnd19(throw new stasiak.karol.fimpp.FimException("TODO"))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case22()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case22()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case22()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case22()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case22()
[scalac.plugin]       };
[scalac.plugin]       case22(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p10: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p11: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p10.isInstanceOf[scala.util.Left[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x12: scala.util.Left[Class[_],Any] = (p10.asInstanceOf[scala.util.Left[Class[_],Any]](): scala.util.Left[Class[_],Any]);
[scalac.plugin]                 if (x12.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val clazz: Class[_] = x12.a();
[scalac.plugin]                     if (p11.isInstanceOf[scala.util.Right[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x13: scala.util.Right[Int,String] = (p11.asInstanceOf[scala.util.Right[Int,String]](): scala.util.Right[Int,String]);
[scalac.plugin]                         if (x13.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val fn: String = x13.b();
[scalac.plugin]                             matchEnd19({
[scalac.plugin]                               val n1: String = JavaInterop.this.normalizeFromFim(fn);
[scalac.plugin]                               var field: java.lang.reflect.Field = null;
[scalac.plugin]                               scala.this.Predef.refArrayOps[java.lang.reflect.Field](clazz.getFields()).foreach[Unit]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[java.lang.reflect.Field,Unit] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2053) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2054) final def apply(f: java.lang.reflect.Field): Unit = {
[scalac.plugin]                                     val n2: String = JavaInterop.this.normalizeFromJava(f.getName());
[scalac.plugin]                                     if (JavaInterop.this.isStatic(f.getModifiers()).&&(n1.==(n2)))
[scalac.plugin]                                       field = f
[scalac.plugin]                                     else
[scalac.plugin]                                       ()
[scalac.plugin]                                   }
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): java.lang.reflect.Field => Unit)
[scalac.plugin]                               });
[scalac.plugin]                               if (field.!=(null))
[scalac.plugin]                                 field.get(null)
[scalac.plugin]                               else
[scalac.plugin]                                 throw new stasiak.karol.fimpp.FimException("Not a  static field")
[scalac.plugin]                             })
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case23()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case23()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case23()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case23()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case23()
[scalac.plugin]       };
[scalac.plugin]       case23(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p14: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p15: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p14.isInstanceOf[scala.util.Right[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x16: scala.util.Right[Class[_],Any] = (p14.asInstanceOf[scala.util.Right[Class[_],Any]](): scala.util.Right[Class[_],Any]);
[scalac.plugin]                 if (x16.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val obj: Any = x16.b();
[scalac.plugin]                     if (p15.isInstanceOf[scala.util.Right[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x17: scala.util.Right[Int,String] = (p15.asInstanceOf[scala.util.Right[Int,String]](): scala.util.Right[Int,String]);
[scalac.plugin]                         if (x17.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val fn: String = x17.b();
[scalac.plugin]                             matchEnd19({
[scalac.plugin]                               val n1: String = JavaInterop.this.normalizeFromFim(fn);
[scalac.plugin]                               var field: java.lang.reflect.Field = null;
[scalac.plugin]                               scala.this.Predef.refArrayOps[java.lang.reflect.Field](obj.getClass().getFields()).foreach[Unit]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[java.lang.reflect.Field,Unit] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2055) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2056) final def apply(f: java.lang.reflect.Field): Unit = {
[scalac.plugin]                                     val n2: String = JavaInterop.this.normalizeFromJava(f.getName());
[scalac.plugin]                                     if (JavaInterop.this.isStatic(f.getModifiers()).unary_!().&&(n1.==(n2)))
[scalac.plugin]                                       field = f
[scalac.plugin]                                     else
[scalac.plugin]                                       ()
[scalac.plugin]                                   }
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): java.lang.reflect.Field => Unit)
[scalac.plugin]                               });
[scalac.plugin]                               if (field.!=(null))
[scalac.plugin]                                 field.get(obj)
[scalac.plugin]                               else
[scalac.plugin]                                 throw new stasiak.karol.fimpp.FimException("Not a field")
[scalac.plugin]                             })
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case24()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case24()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case24()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case24()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case24()
[scalac.plugin]       };
[scalac.plugin]       case24(){
[scalac.plugin]         matchEnd19(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd19(x: Any){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     });
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2057) def setField(context: stasiak.karol.fimpp.Context, objClass: scala.util.Either[Class[_],Any], field: scala.util.Either[Int,String], v: stasiak.karol.fimpp.RuntimeValue): Unit = {
[scalac.plugin]       case <synthetic> val x1: (scala.util.Either[Class[_],Any], scala.util.Either[Int,String]) = new (scala.util.Either[Class[_],Any], scala.util.Either[Int,String])(objClass, field);
[scalac.plugin]       case20(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p2: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p3: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p2.isInstanceOf[scala.util.Left[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x4: scala.util.Left[Class[_],Any] = (p2.asInstanceOf[scala.util.Left[Class[_],Any]](): scala.util.Left[Class[_],Any]);
[scalac.plugin]                 if (x4.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val clazz: Class[_] = x4.a();
[scalac.plugin]                     if (p3.isInstanceOf[scala.util.Left[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x5: scala.util.Left[Int,String] = (p3.asInstanceOf[scala.util.Left[Int,String]](): scala.util.Left[Int,String]);
[scalac.plugin]                         if (x5.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val i: Int = x5.a();
[scalac.plugin]                             matchEnd19(throw new stasiak.karol.fimpp.FimException("Classes are not indexable"))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case21()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case21()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case21()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case21()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case21()
[scalac.plugin]       };
[scalac.plugin]       case21(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p6: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p7: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p6.isInstanceOf[scala.util.Right[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x8: scala.util.Right[Class[_],Any] = (p6.asInstanceOf[scala.util.Right[Class[_],Any]](): scala.util.Right[Class[_],Any]);
[scalac.plugin]                 if (x8.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val obj: Any = x8.b();
[scalac.plugin]                     if (p7.isInstanceOf[scala.util.Left[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x9: scala.util.Left[Int,String] = (p7.asInstanceOf[scala.util.Left[Int,String]](): scala.util.Left[Int,String]);
[scalac.plugin]                         if (x9.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val i: Int = x9.a();
[scalac.plugin]                             matchEnd19(throw new stasiak.karol.fimpp.FimException("TODO"))
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case22()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case22()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case22()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case22()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case22()
[scalac.plugin]       };
[scalac.plugin]       case22(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p10: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p11: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p10.isInstanceOf[scala.util.Left[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x12: scala.util.Left[Class[_],Any] = (p10.asInstanceOf[scala.util.Left[Class[_],Any]](): scala.util.Left[Class[_],Any]);
[scalac.plugin]                 if (x12.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val clazz: Class[_] = x12.a();
[scalac.plugin]                     if (p11.isInstanceOf[scala.util.Right[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x13: scala.util.Right[Int,String] = (p11.asInstanceOf[scala.util.Right[Int,String]](): scala.util.Right[Int,String]);
[scalac.plugin]                         if (x13.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val fn: String = x13.b();
[scalac.plugin]                             matchEnd19({
[scalac.plugin]                               val n1: String = JavaInterop.this.normalizeFromFim(fn);
[scalac.plugin]                               var field: java.lang.reflect.Field = null;
[scalac.plugin]                               scala.this.Predef.refArrayOps[java.lang.reflect.Field](clazz.getFields()).foreach[Unit]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[java.lang.reflect.Field,Unit] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2058) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2059) final def apply(f: java.lang.reflect.Field): Unit = {
[scalac.plugin]                                     val n2: String = JavaInterop.this.normalizeFromJava(f.getName());
[scalac.plugin]                                     if (JavaInterop.this.isStatic(f.getModifiers()).&&(n1.==(n2)))
[scalac.plugin]                                       field = f
[scalac.plugin]                                     else
[scalac.plugin]                                       ()
[scalac.plugin]                                   }
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): java.lang.reflect.Field => Unit)
[scalac.plugin]                               });
[scalac.plugin]                               if (field.!=(null))
[scalac.plugin]                                 field.set(null, v.convertTo(context, field.getType()))
[scalac.plugin]                               else
[scalac.plugin]                                 throw new stasiak.karol.fimpp.FimException("Not a  static field")
[scalac.plugin]                             })
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case23()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case23()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case23()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case23()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case23()
[scalac.plugin]       };
[scalac.plugin]       case23(){
[scalac.plugin]         if (x1.ne(null))
[scalac.plugin]           {
[scalac.plugin]             val p14: scala.util.Either[Class[_],Any] = x1._1();
[scalac.plugin]             val p15: scala.util.Either[Int,String] = x1._2();
[scalac.plugin]             if (p14.isInstanceOf[scala.util.Right[Class[_],Any]]())
[scalac.plugin]               {
[scalac.plugin]                 val x16: scala.util.Right[Class[_],Any] = (p14.asInstanceOf[scala.util.Right[Class[_],Any]](): scala.util.Right[Class[_],Any]);
[scalac.plugin]                 if (x16.ne(null))
[scalac.plugin]                   {
[scalac.plugin]                     val obj: Any = x16.b();
[scalac.plugin]                     if (p15.isInstanceOf[scala.util.Right[Int,String]]())
[scalac.plugin]                       {
[scalac.plugin]                         val x17: scala.util.Right[Int,String] = (p15.asInstanceOf[scala.util.Right[Int,String]](): scala.util.Right[Int,String]);
[scalac.plugin]                         if (x17.ne(null))
[scalac.plugin]                           {
[scalac.plugin]                             val fn: String = x17.b();
[scalac.plugin]                             matchEnd19({
[scalac.plugin]                               val n1: String = JavaInterop.this.normalizeFromFim(fn);
[scalac.plugin]                               var field: java.lang.reflect.Field = null;
[scalac.plugin]                               scala.this.Predef.refArrayOps[java.lang.reflect.Field](obj.getClass().getFields()).foreach[Unit]({
[scalac.plugin]                                 @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[java.lang.reflect.Field,Unit] with Serializable {
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2060) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                                     $anonfun.super.<init>();
[scalac.plugin]                                     ()
[scalac.plugin]                                   };
[scalac.plugin]                                   @callgraph.annotation.targetmethod(value = 2061) final def apply(f: java.lang.reflect.Field): Unit = {
[scalac.plugin]                                     val n2: String = JavaInterop.this.normalizeFromJava(f.getName());
[scalac.plugin]                                     if (JavaInterop.this.isStatic(f.getModifiers()).unary_!().&&(n1.==(n2)))
[scalac.plugin]                                       field = f
[scalac.plugin]                                     else
[scalac.plugin]                                       ()
[scalac.plugin]                                   }
[scalac.plugin]                                 };
[scalac.plugin]                                 (new anonymous class $anonfun(): java.lang.reflect.Field => Unit)
[scalac.plugin]                               });
[scalac.plugin]                               if (field.!=(null))
[scalac.plugin]                                 field.set(obj, v.convertTo(context, field.getType()))
[scalac.plugin]                               else
[scalac.plugin]                                 throw new stasiak.karol.fimpp.FimException("Not a field")
[scalac.plugin]                             })
[scalac.plugin]                           }
[scalac.plugin]                         else
[scalac.plugin]                           case24()
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       case24()
[scalac.plugin]                   }
[scalac.plugin]                 else
[scalac.plugin]                   case24()
[scalac.plugin]               }
[scalac.plugin]             else
[scalac.plugin]               case24()
[scalac.plugin]           }
[scalac.plugin]         else
[scalac.plugin]           case24()
[scalac.plugin]       };
[scalac.plugin]       case24(){
[scalac.plugin]         matchEnd19(throw new MatchError(x1))
[scalac.plugin]       };
[scalac.plugin]       matchEnd19(x: Unit){
[scalac.plugin]         x
[scalac.plugin]       }
[scalac.plugin]     };
[scalac.plugin]     private[this] val digits: List[String] = immutable.this.List.apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}));
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2062) <stable> <accessor> def digits(): List[String] = JavaInterop.this.digits;
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2063) def loadClass(id: List[String]): Class[_] = {
[scalac.plugin]       val possibleClassNames: scala.collection.mutable.ListBuffer[String] = new scala.collection.mutable.ListBuffer[String]();
[scalac.plugin]       @callgraph.annotation.targetmethod(value = 2064) def allPossibleShortClassNames(a: List[String]): List[String] = {
[scalac.plugin]         case <synthetic> val x1: List[String] = a;
[scalac.plugin]         case6(){
[scalac.plugin]           if (immutable.this.Nil.==(x1))
[scalac.plugin]             {
[scalac.plugin]               val x3: List[String] = x1;
[scalac.plugin]               matchEnd5(immutable.this.List.apply[String](scala.this.Predef.wrapRefArray[String](Array[String]{""})))
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case7()
[scalac.plugin]         };
[scalac.plugin]         case7(){
[scalac.plugin]           if (x1.isInstanceOf[scala.collection.immutable.::[String]]())
[scalac.plugin]             {
[scalac.plugin]               val x2: scala.collection.immutable.::[String] = (x1.asInstanceOf[scala.collection.immutable.::[String]](): scala.collection.immutable.::[String]);
[scalac.plugin]               if (x2.ne(null))
[scalac.plugin]                 {
[scalac.plugin]                   val x: String = x2.hd$1();
[scalac.plugin]                   val xs: List[String] = x2.tl$1();
[scalac.plugin]                   matchEnd5({
[scalac.plugin]                     val shorter: List[String] = allPossibleShortClassNames(xs);
[scalac.plugin]                     val xl: String = x.toLowerCase().replaceAll("-", "_").replaceAll("\'", "");
[scalac.plugin]                     var tmp: List[String] = shorter.map[String, List[String]]({
[scalac.plugin]                       @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,String] with Serializable {
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 2065) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                           $anonfun.super.<init>();
[scalac.plugin]                           ()
[scalac.plugin]                         };
[scalac.plugin]                         @callgraph.annotation.targetmethod(value = 2066) final def apply(x$1: String): String = scala.this.Predef.augmentString(xl).capitalize().+(x$1)
[scalac.plugin]                       };
[scalac.plugin]                       (new anonymous class $anonfun(): String => String)
[scalac.plugin]                     }, immutable.this.List.canBuildFrom[String]());
[scalac.plugin]                     if (x.length().>(1).&&(x.length().<(3)))
[scalac.plugin]                       {
[scalac.plugin]                         <synthetic> val x$3: List[String] = tmp;
[scalac.plugin]                         shorter.map[String, List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,String] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2067) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2068) final def apply(x$2: String): String = x.toUpperCase().+(x$2)
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): String => String)
[scalac.plugin] }, immutable.this.List.canBuildFrom[String]()).reverse_:::[String](x$3)
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       ();
[scalac.plugin]                     if (JavaInterop.this.digits().contains(xl))
[scalac.plugin]                       {
[scalac.plugin]                         <synthetic> val x$5: List[String] = tmp;
[scalac.plugin]                         shorter.map[String, List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,String] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2069) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2070) final def apply(x$4: String): String = JavaInterop.this.digits().indexOf[String](xl).+(x$4)
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): String => String)
[scalac.plugin] }, immutable.this.List.canBuildFrom[String]()).reverse_:::[String](x$5)
[scalac.plugin]                       }
[scalac.plugin]                     else
[scalac.plugin]                       ();
[scalac.plugin]                     tmp
[scalac.plugin]                   })
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case8()
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             case8()
[scalac.plugin]         };
[scalac.plugin]         case8(){
[scalac.plugin]           matchEnd5(throw new MatchError(x1))
[scalac.plugin]         };
[scalac.plugin]         matchEnd5(x: List[String]){
[scalac.plugin]           x
[scalac.plugin]         }
[scalac.plugin]       };
[scalac.plugin]       val allPossibleClasses: scala.collection.immutable.IndexedSeq[String] = scala.this.Predef.intWrapper(1).until(id.length()).map[(Int, String), scala.collection.immutable.IndexedSeq[(Int, String)]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[Int,(Int, String)] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2071) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2072) final def apply(packageLength: Int): (Int, String) = {
[scalac.plugin]       val pack: String = id.take(packageLength).map[String, List[String]]({
[scalac.plugin]   @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,String] with Serializable {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2073) def <init>(): anonymous class $anonfun = {
[scalac.plugin]       $anonfun.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2074) final def apply(x$6: String): String = x$6.toLowerCase()
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): String => String)
[scalac.plugin] }, immutable.this.List.canBuildFrom[String]()).mkString(".");
[scalac.plugin]       new (Int, String)(packageLength, pack)
[scalac.plugin]     }
[scalac.plugin]   };
[scalac.plugin]   (new anonymous class $anonfun(): Int => (Int, String))
[scalac.plugin] }, immutable.this.IndexedSeq.canBuildFrom[(Int, String)]()).flatMap[String, scala.collection.immutable.IndexedSeq[String]]({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[(Int, String),List[String]] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2075) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2076) final def apply(x$7: (Int, String)): List[String] = {
[scalac.plugin]             case <synthetic> val x1: (Int, String) = (x$7: (Int, String) @unchecked);
[scalac.plugin]             case4(){
[scalac.plugin]               if (x1.ne(null))
[scalac.plugin]                 {
[scalac.plugin]                   val packageLength: Int = x1._1$mcI$sp();
[scalac.plugin]                   val pack: String = x1._2();
[scalac.plugin]                   matchEnd3(allPossibleShortClassNames(id.drop(packageLength)).map[String, List[String]]({
[scalac.plugin]                     @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,String] with Serializable {
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 2077) def <init>(): anonymous class $anonfun = {
[scalac.plugin]                         $anonfun.super.<init>();
[scalac.plugin]                         ()
[scalac.plugin]                       };
[scalac.plugin]                       @callgraph.annotation.targetmethod(value = 2078) final def apply(cn: String): String = pack.+(".").+(cn)
[scalac.plugin]                     };
[scalac.plugin]                     (new anonymous class $anonfun(): String => String)
[scalac.plugin]                   }, immutable.this.List.canBuildFrom[String]()))
[scalac.plugin]                 }
[scalac.plugin]               else
[scalac.plugin]                 case5()
[scalac.plugin]             };
[scalac.plugin]             case5(){
[scalac.plugin]               matchEnd3(throw new MatchError(x1))
[scalac.plugin]             };
[scalac.plugin]             matchEnd3(x: List[String]){
[scalac.plugin]               x
[scalac.plugin]             }
[scalac.plugin]           }
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): ((Int, String)) => List[String])
[scalac.plugin]       }, immutable.this.IndexedSeq.canBuildFrom[String]());
[scalac.plugin]       val classes: scala.collection.immutable.IndexedSeq[String] = allPossibleClasses.filter({
[scalac.plugin]         @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction1[String,Boolean] with Serializable {
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2079) def <init>(): anonymous class $anonfun = {
[scalac.plugin]             $anonfun.super.<init>();
[scalac.plugin]             ()
[scalac.plugin]           };
[scalac.plugin]           @callgraph.annotation.targetmethod(value = 2080) final def apply(className: String): Boolean = try {
[scalac.plugin]             java.this.lang.Class.forName(className);
[scalac.plugin]             true
[scalac.plugin]           } catch {
[scalac.plugin]             case (_: Exception) => false
[scalac.plugin]           }
[scalac.plugin]         };
[scalac.plugin]         (new anonymous class $anonfun(): String => Boolean)
[scalac.plugin]       });
[scalac.plugin]       if (classes.length().==(0))
[scalac.plugin]         throw new stasiak.karol.fimpp.FimException("Couldn\'t find class ".+(id.mkString(" ")))
[scalac.plugin]       else
[scalac.plugin]         ();
[scalac.plugin]       if (classes.length().>(1))
[scalac.plugin]         throw new stasiak.karol.fimpp.FimException("Couldn\'t find class ".+(id.mkString(" ")).+("\nPossible candidates:\n\t").+(classes.mkString("\n\t")))
[scalac.plugin]       else
[scalac.plugin]         ();
[scalac.plugin]       java.this.lang.Class.forName(classes.head())
[scalac.plugin]     }
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin]  // Main.scala
[scalac.plugin] package stasiak.karol.fimpp {
[scalac.plugin]   object Main extends Object {
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2081) def <init>(): stasiak.karol.fimpp.Main.type = {
[scalac.plugin]       Main.super.<init>();
[scalac.plugin]       ()
[scalac.plugin]     };
[scalac.plugin]     @callgraph.annotation.targetmethod(value = 2082) def main(args: Array[String]): Unit = {
[scalac.plugin]       case <synthetic> val x1: Int = args.length();
[scalac.plugin]       x1 match {
[scalac.plugin]         case 0 => scala.this.Predef.println("To run a FIM++ program, pass it as the first argument to this program.")
[scalac.plugin]         case 1 => {
[scalac.plugin]           scala.this.Predef.println("parsing: ".+(args.apply(0)));
[scalac.plugin]           val program: String = scala.io.Source.fromFile(args.apply(0), io.this.Codec.fallbackSystemCodec()).getLines().mkString("\n");
[scalac.plugin]           val parsed: stasiak.karol.fimpp.FimppParser.ParseResult[stasiak.karol.fimpp.Module] = FimppParser.parseAll[stasiak.karol.fimpp.Module](FimppParser.module(), program);
[scalac.plugin]           if (parsed.successful())
[scalac.plugin]             {
[scalac.plugin]               scala.this.Predef.println("interpreting: ".+(args.apply(0)));
[scalac.plugin]               {
[scalac.plugin]                 parsed.get().run();
[scalac.plugin]                 ()
[scalac.plugin]               }
[scalac.plugin]             }
[scalac.plugin]           else
[scalac.plugin]             scala.this.Predef.println(parsed)
[scalac.plugin]         }
[scalac.plugin]         case _ => scala.this.Predef.println("Hold your horses! One file at a time, please!")
[scalac.plugin]       }
[scalac.plugin]     }
[scalac.plugin]   }
[scalac.plugin] }
[scalac.plugin] 
[scalac.plugin] Items in work list: 1
[scalac.plugin] 	Found 174 new call sites
[scalac.plugin] 	Found 40 new instantiated types
[scalac.plugin] Items in work list: 66
[scalac.plugin] 	Found 1181 new call sites
[scalac.plugin] 	Found 2 new instantiated types
[scalac.plugin] Items in work list: 97
[scalac.plugin] 	Found 45 new call sites
[scalac.plugin] 	Found 9 new instantiated types
[scalac.plugin] Items in work list: 22
[scalac.plugin] 	Found 286 new call sites
[scalac.plugin] 	Found 31 new instantiated types
[scalac.plugin] Items in work list: 88
[scalac.plugin] 	Found 643 new call sites
[scalac.plugin] 	Found 23 new instantiated types
[scalac.plugin] Items in work list: 95
[scalac.plugin] 	Found 786 new call sites
[scalac.plugin] 	Found 51 new instantiated types
[scalac.plugin] Items in work list: 116
[scalac.plugin] 	Found 561 new call sites
[scalac.plugin] 	Found 29 new instantiated types
[scalac.plugin] Items in work list: 77
[scalac.plugin] 	Found 188 new call sites
[scalac.plugin] 	Found 12 new instantiated types
[scalac.plugin] Items in work list: 21
[scalac.plugin] 	Found 106 new call sites
[scalac.plugin] 	Found 20 new instantiated types
[scalac.plugin] Items in work list: 27
[scalac.plugin] 	Found 85 new call sites
[scalac.plugin] 	Found 11 new instantiated types
[scalac.plugin] Items in work list: 30
[scalac.plugin] 	Found 397 new call sites
[scalac.plugin] 	Found 102 new instantiated types
[scalac.plugin] Items in work list: 106
[scalac.plugin] 	Found 609 new call sites
[scalac.plugin] 	Found 62 new instantiated types
[scalac.plugin] Items in work list: 69
[scalac.plugin] 	Found 331 new call sites
[scalac.plugin] 	Found 60 new instantiated types
[scalac.plugin] Items in work list: 64
[scalac.plugin] 	Found 301 new call sites
[scalac.plugin] 	Found 41 new instantiated types
[scalac.plugin] Items in work list: 49
[scalac.plugin] 	Found 216 new call sites
[scalac.plugin] 	Found 24 new instantiated types
[scalac.plugin] Items in work list: 32
[scalac.plugin] 	Found 151 new call sites
[scalac.plugin] 	Found 14 new instantiated types
[scalac.plugin] Items in work list: 20
[scalac.plugin] 	Found 113 new call sites
[scalac.plugin] 	Found 20 new instantiated types
[scalac.plugin] Items in work list: 21
[scalac.plugin] 	Found 122 new call sites
[scalac.plugin] 	Found 16 new instantiated types
[scalac.plugin] Items in work list: 17
[scalac.plugin] 	Found 108 new call sites
[scalac.plugin] 	Found 19 new instantiated types
[scalac.plugin] Items in work list: 19
[scalac.plugin] 	Found 57 new call sites
[scalac.plugin] 	Found 2 new instantiated types
[scalac.plugin] Items in work list: 3
[scalac.plugin] 	Found 14 new call sites
[scalac.plugin] 	Found 1 new instantiated types
[scalac.plugin] Items in work list: 1
[scalac.plugin] 	Found 5 new call sites
[scalac.plugin] It took: 53.371
      [jar] Building jar: /u/karim/workspace/scalabench/dist/fimpp/fimpp-plugin.jar
     [move] Moving 4 files to /u/karim/workspace/scalabench/dist/fimpp

BUILD SUCCESSFUL
Total time: 1 minute 11 seconds
