===========================================================================
Missing call edges in local/dist/tca-this-super/see/wala-callgraph.gxl.gzip:
===========================================================================
0.0 see.values.Scalar: toString() ===> seealues.Real: v()
0.047619047619047616 see.nodes.CatchBlock.Catcher: evalIn(s: see.Scope) ===> see.nodes.Fnode: evalIn(s: see.Scope)
0.04988662131519272 see.nodes.Fcall: evalIn(s: see.Scope) ===> see.nodes.Defined: evalIn(s: see.Scope)
0.09984449874291727 see.Scope: exec(node: see.INode) ===> see.nodes.Local: evalIn(s: see.Scope)
0.1222584115114357 see.nodes.Prefix: evalIn(s: see.Scope) ===> see.nodes.CatchBlock: evalIn(s: see.Scope)
0.14285714285714285 see.Binary: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.operations.ExactEqual: apply(lhs: see.values.Val,rhs: see.values.Val)
0.16666666666666666 see.nodes.Indirection: evalIn(s: see.Scope) ===> see.operations.Version: apply(s: see.Scope,v: see.values.Val)
0.19444444444444448 see.values.BuiltinFunc: call(callerScope: see.Scope,args: see.values.Val) ===> see.operations.Length: apply(s: see.Scope,v: see.values.Val)
0.2 see.nodes.Branch: insert(parent: see.nodes.Branch,proto: see.nodes.Proto) ===> see.nodes.MatcherP: finish(n: see.nodes.Node)
0.24000000000000002 see.nodes.Leaf: insert(parent: see.nodes.Branch,proto: see.nodes.Proto) ===> see.nodes.ReflectP: finish(n: see.nodes.Node)
0.25 see.values.Container: call(s: see.Scope,args: see.values.Val) ===> see.values.Assoc: map(mapf: see.values.Val => see.values.Val)
0.32000000000000006 see.values.Container: call(s: see.Scope,args: see.values.Val) ===> see.values.ValMap: map(mapf: see.values.Val => see.values.Val)
0.3968716802462835 see.values.BuiltinFunc: call(callerScope: see.Scope,args: see.values.Val) ===> see.operations.VarType: apply(s: see.Scope,v: see.values.Val)
0.4648624836179771 see.Unary.$anonfun: apply(x$1: see.values.Val) ===> see.operations.ToTable: apply(s: see.Scope,v: see.values.Val)
0.4927216640000001 see.parser.Program: stmtOpd(nf: see.nodes.Factory) ===> see.nodes.Operation.$anon: apply(operand: see.nodes.Node)
0.5 see.values.Number: -(rhs: see.values.Number) ===> see.values.Lint: sub_(rhs: see.values.Number)
0.506822879712207 see.values.Container: coerce() ===> see.values.Table: map(mapf: see.values.Val => see.values.Val)
0.5416666666666666 see.operations.Concat: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.values.ValMap: addLeft(v: see.values.Val)
0.75 see.values.Number: **(rhs: see.values.Number) ===> see.values.Real: pwr_(rhs: see.values.Number)
0.7989187598240772 see.nodes.Fcall: evalIn(s: see.Scope) ===> see.operations.ToMap: apply(s: see.Scope,v: see.values.Val)
0.830415578032539 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Closure: toJava()
0.8419537067176773 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.BigR: toJava()
0.8489850373271087 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Assoc: toJava()
0.8539973699025503 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.SymVal: toJava()
0.875 see.values.IntLike: |(rhs: see.values.IntLike) ===> see.values.Lint: or_(rhs: see.values.IntLike)
0.8812951467274135 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Native: toJava()
0.9144715999478777 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Str: toJava()
0.9196276037309443 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Bool: toJava()
0.9219229682509563 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.AnyVal: toJava()
0.9292048945962895 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.ValMap: toJava()
0.9316011904415532 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Rexp: toJava()
0.9351407972780121 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Table: toJava()
0.9375 see.values.Native.$anonfun: apply(x$1: Int) ===> see.values.BigR: fits(destType: Class[_])
1.0625 see.values.Number: *(rhs: see.values.Number) ===> see.values.BigI: mul_(rhs: see.values.Number)
1.1458333333333333 see.operations.Concat: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.values.ValMap: addRight(v: see.values.Val)
1.4592248508701136 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.BigI: toJava()
1.541231177124656 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Real: toJava()
1.6508157257973939 see.operations.Concat: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.values.Table: addLeft(v: see.values.Val)
1.659930970818161 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Lint: toJava()
1.7711181640625 see.values.IntLike: >>(rhs: see.values.IntLike) ===> see.values.BigI: rsh_(rhs: see.values.IntLike)
1.9685678631067276 see.values.Number: +(rhs: see.values.Number) ===> see.values.Lint: add_(rhs: see.values.Number)
1.9973021580501609 see.values.Number: *(rhs: see.values.Number) ===> see.values.Lint: mul_(rhs: see.values.Number)
2.4768253693759785 see.values.IntLike: <<(rhs: see.values.IntLike) ===> see.values.Lint: lsh_(rhs: see.values.IntLike)
2.498859602452868 see.operations.Concat: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.values.Table: addRight(v: see.values.Val)
2.5180948393014537 see.values.IntLike: >>(rhs: see.values.IntLike) ===> see.values.Lint: rsh_(rhs: see.values.IntLike)
2.9961730291793702 see.parser.Expressions.$anonfun: apply(x$1: scala.util.parsing.input.Reader[Char]) ===> see.parser.Expressions.PrefixGen: apply()
2.9965873124080185 see.parser.Expressions.$anonfun: apply(x$1: scala.util.parsing.input.Reader[Char]) ===> see.parser.Expressions.$anon: apply()
3.51583986623485 see.values.Vector.$anonfun: apply(x$1: Int) ===> see.values.Anonym: toJava()
===========================================================================
Number of reachable methods missing in local/dist/tca-this-super/see/wala-callgraph.gxl.gzip: 130
===========================================================================
