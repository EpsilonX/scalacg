===========================================================================
Missing entry points in local/dist/tca-this-super/see/callgraph.gxl.gzip:
===========================================================================
0.026197232103700452 see.nodes.StableDef: toString()
0.026215744867379213 see.values.Table.Empty: toString()
0.02623886120070673 see.values.Vector.Empty: toString()
0.026256529064943024 see.values.ValMap.Empty: toString()
0.026273728783006465 see.nodes.StableFnode: toString()
===========================================================================
Missing call edges in local/dist/tca-this-super/see/callgraph.gxl.gzip:
===========================================================================
0.0 see.nodes.Matcher: toString() ===> scala.collection.mutable.StringBuilder: <init>()
0.010700688026572517 see.nodes.FieldReflector: getField(cls: Class[_],inst: Object) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
0.012576728238611041 see.nodes.Constant: equals(x$1: Any) ===> java.lang.Object: equals(Ljava/lang/Object;)
0.023312124222692732 see.Binary.$anonfun: apply(x$1: see.values.Val, see.values.Val) ===> see.values.VoidVal: coerce()
0.02564102564102564 see.values.BigR: productElement(x$1: Int) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
0.025927854973350328 see.SelParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.values.NullVal: toString()
0.025972317343666864 see.DivisionByZero: productElement(x$1: Int) ===> see.nodes.EmptyNode: toString()
0.026010251002476704 see.values.BigI: productElement(x$1: Int) ===> see.nodes.Return: toString()
0.0261363013351007 see.values.AnyVal: productElement(x$1: Int) ===> see.nodes.Assertion: toString()
0.026170889293974417 see.values.AnyVal: productElement(x$1: Int) ===> see.nodes.Assign: toString()
0.026197232103700452 see.nodes.Constant: productElement(x$1: Int) ===> see.nodes.StableDef: toString()
0.026208677175799618 see.nodes.Vnode: productElement(x$1: Int) ===> see.StableParent: toString()
0.026215744867379213 see.SelParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.values.Table.Empty: toString()
0.02623886120070673 see.SelParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.values.Vector.Empty: toString()
0.026246928528682066 see.values.Val: toStr() ===> see.NoParent: toString()
0.026256529064943024 see.parser.Literals.$anon: apply(in: scala.util.parsing.input.Reader[Char]) ===> see.values.ValMap.Empty: toString()
0.026273728783006465 see.values.AnyVal: productElement(x$1: Int) ===> see.nodes.StableFnode: toString()
0.026589881726491585 see.values.Real: productElement(x$1: Int) ===> see.nodes.Association: toString()
0.026606557974979007 see.values.Rexp: selType() ===> scala.Symbol$: apply(Ljava/lang/String;)
0.026667532344252988 see.Unresolved: productElement(x$1: Int) ===> see.StableScope: toString()
0.026692908661841437 see.values.Assoc: productElement(x$1: Int) ===> see.values.VoidVal: toString()
0.0287272677369114 see.values.Vector: fits(destType: Class[_]) ===> see.ResultException: equals(x$1: Any)
0.03571428571428571 see.values.AnyVal: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
0.03601706100899881 see.parser.Program.$anonfun: apply(x$1: Option[List[see.nodes.Node]]) ===> scala.MatchError: <init>(Ljava/lang/Object;)
0.03698354989081673 see.operations.StrongContainment: apply(lhs: see.values.Val,rhs: see.values.Val) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
0.03698979591836736 see.values.Bool: <init>(v: Boolean) ===> scala.Product$class: $init$(Lscala/Product;)
0.038492286373592255 see.operations.At: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.OuterScope: toString()
0.03910836804038608 see.nodes.Variable: equals(x$1: Any) ===> see.Unsupported: equals(x$1: Any)
0.04048777353171073 see.operations.BoolOr: isDefinedFor(s: see.Scope,lhs: see.nodes.Node,rhs: see.nodes.Node) ===> see.nodes.Association: evalIn(Lsee/Scope;)
0.04158068735888041 see.operations.Fold.$anonfun: apply(x$1: see.values.Val) ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
0.041599999999999984 see.values.Table: hashCode() ===> scala.runtime.ScalaRunTime$: _hashCode(Lscala/Product;)
0.04305444856971018 see.nodes.Matcher: evalIn(s: see.Scope) ===> see.nodes.Fundef: evalIn(Lsee/Scope;)
0.04330364148741639 see.nodes.Operation: evalIn(s: see.Scope) ===> see.nodes.StableFnode: evalIn(Lsee/Scope;)
0.04340277777777779 see.nodes.Variable.$anonfun: <init>() ===> java.lang.NullPointerException: <init>()
0.04354372188414077 see.nodes.FieldReflector: setIn(s: see.Scope,value: see.values.Val) ===> see.nodes.Local: evalIn(Lsee/Scope;)
0.04377300873846638 see.values.Anonym: coerce() ===> see.nodes.StableDef: evalIn(Lsee/Scope;)
0.0440115883960964 see.nodes.Nodes: productElement(x$1: Int) ===> see.nodes.Loop: toString()
0.044513670356552466 see.nodes.Variable: productElement(x$1: Int) ===> see.nodes.Condition: toString()
0.04571945759501639 see.values.Str: toNumber() ===> see.nodes.Defined: evalIn(Lsee/Scope;)
0.04596469938182769 see.nodes.CatchBlock.Catcher: evalIn(s: see.Scope) ===> see.nodes.Block: evalIn(Lsee/Scope;)
0.04612033375628295 see.Scope: coerce(node: see.INode) ===> see.nodes.Vnode: evalIn(Lsee/Scope;)
0.046268556584309825 see.operations.Converter: apply(s: see.Scope,v: see.values.Val) ===> see.nodes.EmptyNode$: evalIn(Lsee/Scope;)
0.0468677782002228 see.operations.Rep.$anonfun: apply() ===> see.values.NullVal: coerce()
0.049502817678424335 see.nodes.Vnode.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.CatchBlock: evalIn(Lsee/Scope;)
0.04951746092117828 see.nodes.Indirection: evalIn(s: see.Scope) ===> see.nodes.Fnode: evalIn(Lsee/Scope;)
0.0495571658606671 see.nodes.MethReflector: evalIn(s: see.Scope) ===> see.nodes.Assign: evalIn(s: see.Scope)
0.049634378314941836 see.values.Anonym: coerce() ===> see.nodes.EmptyNodes$: evalIn(Lsee/Scope;)
0.05 see.operations.ToStr: apply(s: see.Scope,v: see.values.Val) ===> see.values.VoidVal: toStr()
0.051233055653085044 see.nodes.Block: isDefinedIn(s: see.Scope) ===> see.nodes.StableDef: isDefinedIn(s: see.Scope)
0.05149944529648936 see.values.UserFunc: isDefinedIn(s: see.Scope) ===> see.nodes.StableFnode: isDefinedIn(s: see.Scope)
0.05478917109235046 see.nodes.Prefix: isDefinedIn(s: see.Scope) ===> see.nodes.EmptyNodes: isDefinedIn(s: see.Scope)
0.0571962431705197 see.Scope: parseLocal(expression: String) ===> scala.Some: <init>(Ljava/lang/Object;)
0.05863085550318884 see.parser.Expressions.$anonfun: apply(x$1: scala.util.parsing.input.Reader[Char]) ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
0.05864197530864196 see.parser.Program: patternmatch() ===> scala.util.parsing.combinator.Parsers$Parser: $up$up(Lscala/Function1;)
0.06036703607946523 see.values.Val: convertToPrimitive(destType: Class[_]) ===> see.values.Vector.Empty: toBool()
0.0625 see.values.Assoc: deepCmp(rhs: see.values.Val) ===> see.values.NullVal: isEqualTo(other: see.values.Val)
0.06269184076576687 see.nodes.Matcher.$anonfun: apply(x$1: see.nodes.Alternative) ===> see.nodes.Return: isDefinedIn(s: see.Scope)
0.06657991945437934 see.operations.At: apply(lhs: see.values.Val,rhs: see.values.Val) ===> scala.Predef$: augmentString(Ljava/lang/String;)
0.06660499552741038 see.operations.At: apply(lhs: see.values.Val,rhs: see.values.Val) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
0.066650390625 see.operations.Equal: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.values.VoidVal: isEqualTo(other: see.values.Val)
0.07030683746614878 see.operations.Ge: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.values.Table.Empty: toBool()
0.07040930221800258 see.operations.BoolOr: needsRhs(lhs: see.values.Val) ===> see.values.Table.Empty: toBool()
0.07068212190973494 see.values.Val: convertToObject(destType: Class[_]) ===> see.values.ValMap.Empty: toBool()
0.07368930857182976 see.nodes.Alternative: take(sel: see.values.Val,s: see.Scope) ===> see.nodes.Loop: evalIn(s: see.Scope)
0.07388877197454743 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Association: isDefinedIn(s: see.Scope)
0.07653061224489797 see.values.Table: deepCmp(rhs: see.values.Val) ===> scala.collection.immutable.List$: canBuildFrom()
0.07655443000847686 see.nodes.Block: isDefinedIn(s: see.Scope) ===> see.nodes.Assertion: isDefinedIn(s: see.Scope)
0.07665970526780827 see.nodes.Fnode: toString() ===> scala.collection.Seq$: canBuildFrom()
0.07689504373177844 see.values.ValMap: assoc(key: see.values.Val,value: see.values.Val) ===> scala.collection.TraversableLike: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
0.0831786947064148 see.operations.BoolOr: isDefinedFor(s: see.Scope,lhs: see.nodes.Node,rhs: see.nodes.Node) ===> see.nodes.Condition: evalIn(s: see.Scope)
0.08333333333333333 see.operations.SetIntersection: apply(lhs: see.values.Val,rhs: see.values.Val) ===> scala.Predef$ArrowAssoc$: $minus$greater$extension(Ljava/lang/Object;Ljava/lang/Object;)
0.08349501572041747 see.nodes.MethReflector: evalIn(s: see.Scope) ===> see.nodes.Assertion: evalIn(s: see.Scope)
0.09085648148148147 see.operations.SetDifference: apply(lhs: see.values.Val,rhs: see.values.Val) ===> scala.Predef$: any2ArrowAssoc(Ljava/lang/Object;)
0.09687316875676437 see.nodes.Matcher.$anonfun: apply(x$1: see.nodes.Alternative) ===> see.nodes.Condition: isDefinedIn(s: see.Scope)
0.09732248600050604 see.Binary.$anonfun: apply(x$1: see.values.Val) ===> scala.collection.Seq: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
0.09989354083667357 see.values.Rexp: ~~(rhs: see.values.Val) ===> scala.LowPriorityImplicits: intWrapper(I)
0.09992486851990981 see.operations.Log10: check(arg: Double) ===> scala.runtime.BoxesRunTime: boxToDouble(D)
0.1 see.values.Native: select(ms: Array[java.lang.reflect.Method],args: Array[see.values.Val]) ===> scala.Predef$: refArrayOps([Ljava/lang/Object;)
0.10861347403182645 see.nodes.Vnode.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.EmptyNodes$: simplifyIn(Lsee/Scope;)
0.11100000000000002 see.values.Real: toBig() ===> scala.package$: BigDecimal()
0.1111111111111111 see.values.ValMap: apply(init: see.values.Val) ===> scala.Predef$: Map()
0.11438069398153426 see.operations.Fold: fold(folder: see.values.Callable,vs: Seq[see.values.Val]) ===> scala.collection.Seq: foreach(Lscala/Function1;)
0.1154136583695648 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Local: simplifyIn(s: see.Scope)
0.11670243606238674 see.nodes.Fcall: isDefinedIn(s: see.Scope) ===> see.nodes.Loop: isDefinedIn(s: see.Scope)
0.12482853223593962 see.parser.Program: <init>() ===> scala.collection.generic.GenMapFactory: apply(Lscala/collection/Seq;)
0.125 see.parser.Program: statements() ===> scala.util.parsing.combinator.Parsers$Parser: $tilde$greater(Lscala/Function0;)
0.1299617859759036 see.operations.Slice: vslice([T]v: Seq[T],s: see.values.Number,e: see.values.Number) ===> scala.collection.Seq: size()
0.140625 see.operations.Fold: apply(s: see.Scope,args: see.values.Val) ===> scala.collection.generic.SeqFactory: unapplySeq(Lscala/collection/Seq;)
0.14183344968262301 see.operations.At: apply(lhs: see.values.Val,rhs: see.values.Val) ===> scala.collection.Seq: isEmpty()
0.142578125 see.Regex: matches(tgt: String) ===> java.util.regex.Pattern: matcher(Ljava/lang/CharSequence;)
0.14285714285714285 see.nodes.Indirection: evalIn(s: see.Scope) ===> see.operations.ToStr$: apply(Lsee/Scope;Lsee/values/Val;)
0.1434768088419464 see.nodes.Vnode.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Assertion: simplifyIn(Lsee/Scope;)
0.14607086866327273 see.ConstParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Node: simplifyIn(s: see.Scope)
0.15386228036490088 see.nodes.CatchBlock.Catcher: evalIn(s: see.Scope) ===> see.nodes.Return: evalIn(s: see.Scope)
0.15534876845936607 see.nodes.Matcher.$anonfun: apply(x$1: see.nodes.Alternative) ===> see.nodes.Return: simplifyIn(Lsee/Scope;)
0.163265306122449 see.operations.Pad: apply(s: see.Scope,args: see.values.Val) ===> scala.runtime.RichInt$: until$extension0(II)
0.16618075801749274 see.parser.Literals.$anonfun: apply(x$1: String) ===> scala.runtime.BoxesRunTime: boxToCharacter(C)
0.16659725114535615 see.nodes.Fcall: evalIn(s: see.Scope) ===> see.operations.UnaryNot: apply(s: see.Scope,v: see.values.Val)
0.16666666666666666 see.parser.Expressions.G: operandParser(e: see.parser.Expressions) ===> see.parser.Program$$anonfun$4$$anonfun$apply$2: apply(Ljava/lang/Object;)
0.1676185877787616 see.ConstParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Vnode: simplifyIn(s: see.Scope)
0.17181055675047613 see.operations.Zip: merge(vects: Seq[see.values.Vector]) ===> scala.collection.Seq: head()
0.19444444444444448 see.parser.Program.G: operandParser(e: see.parser.Expressions) ===> see.operations.Symbolize$$anonfun$apply$1: apply(Ljava/lang/Object;)
0.1990740740740741 see.parser.Program.G: operandParser(e: see.parser.Expressions) ===> see.operations.Cos$$anonfun$$init$$5: apply(Ljava/lang/Object;)
0.1998456790123457 see.values.Assoc: map(mapf: see.values.Val => see.values.Val) ===> see.parser.Expressions$$anonfun$see$parser$Expressions$$prefixed$1: apply(Ljava/lang/Object;)
0.2 see.values.ValMap: deepCmp(rhs: see.values.Val) ===> scala.runtime.NonLocalReturnControl: value$mcZ$sp()
0.24000000000000002 see.parser.Literals: eatws(in: scala.util.parsing.input.Reader[Char]) ===> scala.util.parsing.input.Reader: drop(I)
0.24800000000000003 see.values.Native: bestMatch(typeLists: Array[Array[Class[_]]],args: Array[see.values.Val]) ===> scala.collection.immutable.Range: foreach$mVc$sp(Lscala/Function1;)
0.24960000000000002 see.parser.Program.$anonfun: apply(x$1: Program.this.~[see.nodes.Node,Option[see.nodes.Node]]) ===> scala.util.parsing.combinator.Parsers$$tilde: _1()
0.24992 see.values.Container: toLong() ===> see.values.VoidVal: size()
0.25 see.values.Vector: addLeft(v: see.values.Val) ===> scala.collection.immutable.List: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
0.2538763209692037 see.Scope: eval(node: see.INode) ===> see.ResultException: result()
0.25468717948717956 see.values.Val: toLong() ===> see.values.VoidVal: selType()
0.2547771674508517 see.values.Val: toBig() ===> see.values.NullVal: selType()
0.2783809138737885 see.parser.Expressions: insert(proto: see.nodes.Proto) ===> see.nodes.LoopP: precedence()
0.3125 see.BinNumOp: apply(lhs: see.values.Val,rhs: see.values.Val) ===> see.operations.Max$$anonfun$$init$$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
0.318762763058364 see.parser.Expressions: node(nf: see.nodes.Factory) ===> see.nodes.ConditionP: precedence()
0.32088094536477424 see.parser.Expressions: node(nf: see.nodes.Factory) ===> see.nodes.AssocP: precedence()
0.328125 see.operations.ReduceOp.$anonfun: apply(x$1: see.values.Number,x$2: see.values.Val) ===> see.operations.ReduceOp$$anonfun$apply$1: apply(Ljava/lang/Object;Ljava/lang/Object;)
0.3299507240946963 see.Scope: getVar(name: String) ===> scala.Option: orElse(Lscala/Function0;)
0.33037859569504546 see.values.Rexp: ~*(rhs: see.values.Val) ===> scala.runtime.RichInt$: to$extension0(II)
0.33203125 see.values.Real: hashCode() ===> scala.runtime.Statics: mix(II)
0.3330078125 see.Scope: getResult() ===> scala.Option: getOrElse(Lscala/Function0;)
0.3333333333333333 see.values.Val: convertToObject(destType: Class[_]) ===> scala.runtime.BoxesRunTime: boxToShort(S)
0.3892519818815927 see.nodes.Matcher.$anonfun: apply(x$1: see.nodes.Alternative) ===> see.nodes.Variable: simplifyIn(s: see.Scope)
0.39817514681033206 see.nodes.Branch: insert(parent: see.nodes.Branch,proto: see.nodes.Proto) ===> see.nodes.ReturnP: precedence()
0.39893550230602703 see.parser.Expressions: insert(proto: see.nodes.Proto) ===> see.nodes.AssertionP: precedence()
0.4015823785268038 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Defined: simplifyIn(s: see.Scope)
0.41311083742983484 see.nodes.Matcher.$anonfun: apply(x$1: see.nodes.Alternative) ===> see.nodes.Nodes: simplifyIn(s: see.Scope)
0.4290480170984239 see.nodes.Matcher.$anonfun: apply(x$1: see.nodes.Alternative) ===> see.nodes.FieldReflector: simplifyIn(s: see.Scope)
0.4444444444444445 see.values.ValMap.$anonfun: apply(x$1: see.values.Val) ===> scala.collection.mutable.Builder: $plus$plus$eq(Lscala/collection/TraversableOnce;)
0.4472177393541173 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Matcher: simplifyIn(s: see.Scope)
0.4639635515325726 see.nodes.Branch: insert(parent: see.nodes.Branch,proto: see.nodes.Proto) ===> see.nodes.AssignP: finish(n: see.nodes.Node)
0.46876481802289083 see.Scope: getVar(name: String) ===> scala.collection.mutable.Map: get(Ljava/lang/Object;)
0.4814814814814815 see.values.Table: forall(pred: see.values.Val => Boolean) ===> scala.collection.LinearSeqOptimized: forall(Lscala/Function1;)
0.4870865073598806 see.ConstParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Condition: simplifyIn(s: see.Scope)
0.48813824395890876 see.ConstParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Assign: simplifyIn(s: see.Scope)
0.4922373227828214 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.MethReflector: simplifyIn(s: see.Scope)
0.4938271604938272 see.nodes.Matcher.$anonfun.$anonfun: apply(x$1: see.nodes.Node) ===> scala.runtime.NonLocalReturnControl: <init>(Ljava/lang/Object;Ljava/lang/Object;)
0.49507579839266874 see.nodes.Vnode.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Loop: simplifyIn(s: see.Scope)
0.49794238683127573 see.values.Assoc: forall(pred: see.values.Val => Boolean) ===> scala.runtime.BoxesRunTime: unboxToBoolean(Ljava/lang/Object;)
0.49842861806899297 see.ConstParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Fundef: simplifyIn(s: see.Scope)
0.49886994577352006 see.Unary.$anonfun: apply(x$1: see.values.Val) ===> see.operations.UnaryInv: apply(s: see.Scope,v: see.values.Val)
0.4993141289437586 see.parser.Literals.$anonfun: liftedTree1() ===> scala.math.BigDecimal$: apply(Ljava/lang/String;)
0.5 see.values.Number: **(rhs: see.values.Number) ===> see.values.Real: pwr_(Lsee/values/Number;)
0.5008099404075337 see.ConstParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Association: simplifyIn(s: see.Scope)
0.5103462864386565 see.SelParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Prefix: simplifyIn(s: see.Scope)
0.5683647531064147 see.SelParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.ReAssign: simplifyIn(s: see.Scope)
0.6037912273951787 see.nodes.Vnode.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Indirection: simplifyIn(s: see.Scope)
0.645290094976134 see.ConstParser: parse(input: java.io.Reader,scope: see.Scope) ===> see.nodes.Fnode: simplifyIn(s: see.Scope)
0.6537872573722914 see.nodes.Vnode.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Operation: simplifyIn(s: see.Scope)
0.7075008161265319 see.parser.Expressions: insert(proto: see.nodes.Proto) ===> see.nodes.AssocP: finish(n: see.nodes.Node)
0.75 see.operations.Round: apply(s: see.Scope,v: see.values.Val) ===> scala.math.package$: round(D)
0.752544087946806 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Fcall: simplifyIn(s: see.Scope)
0.875 see.values.Val: convertToObject(destType: Class[_]) ===> see.values.NullVal: toBigI()
0.909796170019128 see.values.AnyVal: equals(x$1: Any) ===> scala.runtime.BoxesRunTime: equals(Ljava/lang/Object;Ljava/lang/Object;)
0.9375 see.values.BigR: pwr_(rhs: see.values.Number) ===> scala.math.BigDecimal: $greater(Lscala/math/BigDecimal;)
0.9621942008663472 see.Scope.$anonfun: apply() ===> see.OuterScope: getVar(name: String)
0.96875 see.parser.Expressions.$anonfun: apply() ===> see.parser.Expressions: repsep(Lscala/Function0;Lscala/Function0;)
0.9780964285640275 see.Scope: contains(name: String) ===> see.OuterScope: contains(name: String)
0.984375 see.values.Vector: diff(rhs: see.values.Val) ===> scala.collection.TraversableLike: filterNot(Lscala/Function1;)
0.9921875 see.nodes.CatchBlock.Catcher: evalIn(s: see.Scope) ===> see.nodes.CatchBlock$Catcher: see$nodes$CatchBlock$Catcher$$$outer()
0.995609818581227 see.values.Rexp.$anonfun: apply(x$1: Int) ===> java.util.regex.Matcher: group(I)
0.99609375 see.values.BigR: pwr_(rhs: see.values.Number) ===> scala.math.BigDecimal: pow(I)
0.9961066468594273 see.Scope: shallow() ===> see.StableParent: shallow()
0.998046875 see.Scope.$anonfun: apply() ===> see.NoParent$: getConst(Ljava/lang/String;)
0.9990234375 see.values.Lint: abs() ===> scala.runtime.BoxesRunTime: unboxToLong(Ljava/lang/Object;)
1.003254208570391 see.Scope: iset(name: String,v: see.values.Val) ===> see.StableParent: set(name: String,v: see.values.Val)
1.0649005509261587 see.Scope: createInner() ===> see.nodes.ArgInterceptor.Detector: inner(s: see.Scope)
1.0792482661140463 see.Scope: shallow() ===> see.OuterScope: shallow()
1.1382578106411096 see.Scope.$anonfun: apply() ===> see.StableParent: getConst(name: String)
1.1575467802559125 see.Scope.$anonfun: apply() ===> see.StableParent: getVar(name: String)
1.1577664121446862 see.Scope.$anonfun: apply() ===> see.OuterScope: getConst(name: String)
1.161590966178076 see.Unary.$anonfun: apply(x$1: see.values.Val) ===> see.operations.UnaryMinus: apply(s: see.Scope,v: see.values.Val)
1.1918474036802365 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.Block: simplifyIn(s: see.Scope)
1.2601165569279746 see.nodes.Nodes.$anonfun: apply(x$1: see.nodes.Node) ===> see.nodes.CatchBlock: simplifyIn(s: see.Scope)
1.5690547531124401 see.Scope: iset(name: String,v: see.values.Val) ===> see.OuterScope: set(name: String,v: see.values.Val)
1.9815752514678604 see.Scope: createInner() ===> see.StableCheck: inner(s: see.Scope)
2.284595097026753 see.Scope.$anonfun: apply() ===> see.nodes.ArgInterceptor.Detector: getVar(name: String)
2.3124453041485165 see.Scope: createInner() ===> see.StableParent: inner(s: see.Scope)
2.4823612078278825 see.Scope: contains(name: String) ===> see.nodes.ArgInterceptor.Detector: contains(name: String)
2.5267260890351078 see.Scope: createInner() ===> see.StableScope: inner(s: see.Scope)
2.6980399560212023 see.Scope: iset(name: String,v: see.values.Val) ===> see.nodes.ArgInterceptor.Detector: set(name: String,v: see.values.Val)
2.698879685379219 see.Scope.$anonfun: apply() ===> see.nodes.ArgInterceptor.Detector: getConst(name: String)
3.7318134075615395 see.Scope: createInner() ===> see.Parent: inner(s: see.Scope)
===========================================================================
Number of reachable methods missing in local/dist/tca-this-super/see/callgraph.gxl.gzip: 772
===========================================================================
