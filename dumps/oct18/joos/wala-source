===========================================================================
Missing call edges in local/dist/tca-this-super/joos/callgraph.gxl.gzip:
===========================================================================
0.0 Names.$anonfun.$anonfun.$anonfun.$anonfun: apply(x$1: List[String]) ===> Parser.Node: equals(x$1: Any)
0.0052630136235300795 Names.Env: doResolveClass(name: Ast.Name) ===> java.lang.Object: equals(Ljava/lang/Object;)
0.006493236212278865 Ast: ast_Type(tree: Parser.Tree) ===> scala.MatchError: <init>(Ljava/lang/Object;)
0.007812030527011586 Ast: ast_MultiplicativeExpression(tree: Parser.Tree) ===> scala.Predef$: assert(Z)
0.008402777777777787 Ast: ast_ExtendsInterfacesopt(tree: Parser.Tree) ===> scala.collection.generic.SeqFactory: unapplySeq(Lscala/collection/Seq;)
0.01204648526077099 CodeGen.$anonfun.$anonfun.generators: swapStack(i: Int) ===> scala.collection.mutable.StringBuilder: <init>()
0.020824656393169494 CodeGen.$anon: <init>() ===> scala.collection.immutable.List$: canBuildFrom()
0.021267361111111095 Ast.InstanceOfExpr: children() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
0.022716049382716038 Ast.NullType: productElement(x$1: Int) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
0.023796646836127623 Parser: parse(in: Seq[Scanner.Token]) ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
0.025624999999999988 CodeGen: classFrameImpl(cd: Ast.ClassDecl) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
0.0322265625 Parser.Reduce: productElement(x$1: Int) ===> Util$Memoize: toString()
0.03448148148148149 Ast: ast_InterfaceDeclaration(tree: Parser.Tree) ===> scala.collection.immutable.Set: contains(Ljava/lang/Object;)
0.03571282135388906 CodeGen.interfaceInvoke.$anonfun.$anonfun.$anonfun: <init>() ===> java.lang.NullPointerException: <init>()
0.038459584412945204 Names.MethodSig: productIterator() ===> scala.runtime.ScalaRunTime$: typedProductIterator(Lscala/Product;)
0.043475115740740755 Names.$anonfun.$anonfun.$anonfun: apply(x$1: Ast.MethodDecl) ===> scala.collection.TraversableLike: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
0.04536862003780721 Types: disMethod(name: Ast.Name,env: Names.Env) ===> scala.Tuple2: <init>(Ljava/lang/Object;Ljava/lang/Object;)
0.05263157894736842 CodeGen.$anonfun.$anonfun.$anonfun: apply(x$1: String, String) ===> java.io.PrintStream: println(Ljava/lang/String;)
0.05554745589736116 CodeGen.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun.$anonfun: apply(x$1: Ast.FieldDecl) ===> scala.Option: foreach(Lscala/Function1;)
0.05881344307270231 StaticAnal.$anonfun.$anonfun: apply(x$1: Scanner.Token) ===> scala.Predef$: println(Ljava/lang/Object;)
0.058823529411764705 Names.MethodSig.$anonfun: apply(x$1: Ast.TypeSpec, String) ===> Ast$ArraySpec: typ()
0.0624872786484836 Names.ConstrSig.$anonfun: apply(x$1: Ast.TypeSpec, String) ===> Ast$VoidSpec: typ()
0.07689504373177844 Parser.Reduce: <init>(rule: Parser.Production) ===> scala.Product$class: $init$(Lscala/Product;)
0.08329540282203006 CodeGen.interfaceInvoke.$anonfun: apply(x$1: Names.MethodSig) ===> scala.collection.TraversableLike: withFilter(Lscala/Function1;)
0.09027777777777776 Parser.$anon: <init>() ===> scala.collection.generic.GenericCompanion: apply(Lscala/collection/Seq;)
0.09085648148148147 Ast: ast_VariableDeclarator(tree: Parser.Tree) ===> scala.Some: <init>(Ljava/lang/Object;)
0.09992486851990981 Ast.ImportClass: toString() ===> scala.runtime.ScalaRunTime$: _toString(Lscala/Product;)
0.11110000000000002 Ast: ast_FormalParameterList(tree: Parser.Tree) ===> scala.collection.SeqLike: $colon$plus(Ljava/lang/Object;Lscala/collection/generic/CanBuildFrom;)
0.1111111111111111 Names.MethodCheck: declare(t: Ast.ClassDecl) ===> scala.collection.TraversableLike: filter(Lscala/Function1;)
0.1249809480262155 Ast.Name: toString() ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;)
0.142822265625 Ast: main(args: Array[String]) ===> scala.collection.Seq: foreach(Lscala/Function1;)
0.14285714285714285 Parser.$anon.$anonfun: apply(x$1: String) ===> scala.Predef$: refArrayOps([Ljava/lang/Object;)
0.16659725114535615 Ast: ast_LocalVariableDeclaration(tree: Parser.Tree) ===> scala.runtime.BoxesRunTime: boxToBoolean(Z)
0.16666666666666666 Ast: dfs(n: Ast.AstNode,action: Ast.AstNode => Unit) ===> CodeGen$$anonfun$codeGen$1$$anonfun$apply$5$generators$1$$anonfun$genStmt$3: apply(Ljava/lang/Object;)
0.19444444444444448 CodeGen.$anonfun.$anonfun.generators: genStmt(s: Ast.Stmt) ===> CodeGen$$anonfun$codeGen$1$$anonfun$apply$5$generators$1: CodeGen$$anonfun$$anonfun$generators$$$outer()
0.1990740740740741 Ast: dfs(n: Ast.AstNode,action: Ast.AstNode => Unit) ===> Names$$anonfun$checkInterfaceFields$1$1$$anonfun$apply$26: apply(Ljava/lang/Object;)
0.1998456790123457 Scanner: maximalmunch(in: Seq[Char]) ===> Ast$$anonfun$main$1: apply(Ljava/lang/Object;)
0.24000000000000002 CodeGen.interfaceInvoke: add(m: Names.MethodSig) ===> scala.collection.mutable.Map: contains(Ljava/lang/Object;)
0.24800000000000003 Types: disMethod(name: Ast.Name,env: Names.Env) ===> scala.LowPriorityImplicits: intWrapper(I)
0.24960000000000002 Ast.FieldDecl: children() ===> scala.collection.immutable.List: $plus$plus(Lscala/collection/GenTraversableOnce;Lscala/collection/generic/CanBuildFrom;)
0.24992 CodeGen.$anonfun: apply(x$1: Ast.AstNode) ===> scala.collection.mutable.ListBuffer: $plus$eq(Ljava/lang/Object;)
0.25 Names: dfs(cd: Ast.ClassDecl,exploring: scala.collection.immutable.Set[Ast.ClassDecl]) ===> scala.collection.mutable.Set: contains(Ljava/lang/Object;)
0.3125 CodeGen.$anonfun.$anonfun.generators: genExpr(e: Ast.Expr) ===> CodeGen$$anon$4: apply(LAst$AstNode;)
0.328125 Ast: ast_VariableDeclarator(tree: Parser.Tree) ===> scala.Tuple2: _2$mcZ$sp()
0.33203125 Names.$anonfun.$anonfun.$anonfun.$anonfun: apply(x$1: Ast.TypeSpec, String) ===> Ast$BooleanType$: spec()
0.3330078125 Parser.$anon: <init>() ===> scala.collection.Seq: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
0.3333333333333333 Names.Env: doResolveClass(name: Ast.Name) ===> scala.Option: orElse(Lscala/Function0;)
0.4444444444444445 Names.Env.$anonfun: apply(x$1: Ast.Name) ===> scala.package$: Left()
0.4938271604938272 Names.Env: toString() ===> scala.collection.mutable.Map: keys()
0.49794238683127573 Ast: expandEscapes(s: String) ===> scala.collection.TraversableOnce: toArray(Lscala/reflect/ClassTag;)
0.4993141289437586 Parser.Leaf: asNode() ===> scala.Predef$: error(Ljava/lang/String;)
0.49960817917952016 CodeGen.$anon: apply(ms: Names.MethodSig) ===> CodeGen: subtypeTests()
0.49977137631458624 Types: disMethod(name: Ast.Name,env: Names.Env) ===> scala.runtime.RichInt$: to$extension0(II)
0.5 Ast: ast_Literal(tree: Parser.Tree) ===> java.math.BigInteger: compareTo(Ljava/math/BigInteger;)
0.6646534622486797 CodeGen.$anon.$anonfun: apply(x$1: Ast.AstNode, Int) ===> CodeGen: interfaceInvoke()
0.75 CodeGen.interfaceInvoke: code(fos: java.io.PrintStream,cd: Ast.ClassDecl,externcd: Ast.ClassDecl) ===> scala.collection.mutable.ResizableArray: foreach(Lscala/Function1;)
0.875 Ast: ast_Literal(tree: Parser.Tree) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
0.9375 MakeAst: main(args: Array[String]) ===> scala.collection.immutable.Set: foreach(Lscala/Function1;)
0.96875 Util.$anonfun: apply(x$1: scala.collection.immutable.Set[A]) ===> scala.collection.immutable.Set: $plus$plus(Lscala/collection/GenTraversableOnce;)
0.984375 CodeGen.subtypeTests: code(typ: Ast.Type) ===> scala.reflect.ClassTag$: apply(Ljava/lang/Class;)
0.9921875 Parser.Shift: hashCode() ===> scala.runtime.Statics: finalizeHash(II)
0.99609375 Parser.$anon.$anonfun: apply(x$1: String) ===> scala.collection.immutable.List: drop(I)
0.998046875 Scanner: maximalmunch(in: Seq[Char]) ===> Parser$Production$: apply(Ljava/lang/Object;Ljava/lang/Object;)
0.9990234375 Ast.FieldDecl: toString() ===> scala.collection.immutable.Set: toString()
===========================================================================
Number of reachable methods missing in local/dist/tca-this-super/joos/callgraph.gxl.gzip: 508
===========================================================================
