===========================================================================
Missing call edges in local/dist/tca-this-super/fimpp/callgraph.gxl.gzip:
===========================================================================
0.0 stasiak.karol.fimpp.NumberValue: productElement(x$1: Int) ===> stasiak.karol.fimpp.RuntimeFunction: toString()
0.01851239669421487 stasiak.karol.fimpp.WhileStat: equals(x$1: Any) ===> java.lang.Object: equals(Ljava/lang/Object;)
0.021267361111111095 stasiak.karol.fimpp.FimppParser: ifStat() ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
0.02221172022684311 stasiak.karol.fimpp.FunctionCall: productElement(x$1: Int) ===> stasiak.karol.fimpp.NopStat: toString()
0.023243801652892575 stasiak.karol.fimpp.Module: productElement(x$1: Int) ===> scala.runtime.BoxesRunTime: boxToInteger(I)
0.02437641723356007 stasiak.karol.fimpp.FimppParser.$anonfun.$anonfun: apply(x$1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,List[stasiak.karol.fimpp.Expr]],String]) ===> scala.MatchError: <init>(Ljava/lang/Object;)
0.025 stasiak.karol.fimpp.Alternative: productElement(x$1: Int) ===> java.lang.IndexOutOfBoundsException: <init>(Ljava/lang/String;)
0.025624999999999988 stasiak.karol.fimpp.FimppParser: stringLiteral() ===> scala.util.parsing.combinator.Parsers$Parser: $up$up(Lscala/Function1;)
0.02629848783694936 stasiak.karol.fimpp.StringValue: <init>(value: String) ===> scala.Product$class: $init$(Lscala/Product;)
0.027757487216946704 stasiak.karol.fimpp.FimppParser: wrappedModule() ===> scala.util.parsing.combinator.Parsers$Parser: $tilde(Lscala/Function0;)
0.030276816608996532 stasiak.karol.fimpp.FimppParser.$anonfun: apply(x$1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,List[stasiak.karol.fimpp.Statement]],Option[List[stasiak.karol.fimpp.Statement]]]) ===> scala.util.parsing.combinator.Parsers$$tilde: _2()
0.03448148148148149 stasiak.karol.fimpp.NumberValue: toString() ===> scala.runtime.ScalaRunTime$: _toString(Lscala/Product;)
0.03698979591836736 stasiak.karol.fimpp.FimppParser: wrappedModule() ===> scala.util.parsing.combinator.Parsers$Parser: $tilde$greater(Lscala/Function0;)
0.04 stasiak.karol.fimpp.FimppParser: function() ===> scala.util.parsing.combinator.Parsers$Parser: $less$tilde(Lscala/Function0;)
0.045450809566861206 stasiak.karol.fimpp.FimppParser: simpleExpression() ===> scala.util.parsing.combinator.Parsers$Parser: $bar(Lscala/Function0;)
0.04722260402496547 stasiak.karol.fimpp.FimppParser: kw(strs: Seq[String]) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
0.04990889469272101 stasiak.karol.fimpp.JavaInterop: normalizedMatch(fromFimNormalized: String,fromJavaNormalized: String) ===> scala.collection.mutable.StringBuilder: <init>()
0.04999460101500915 stasiak.karol.fimpp.JavaInterop: callMethod(context: stasiak.karol.fimpp.Context,clazz: Class[_],methodName: String,methodParams: List[stasiak.karol.fimpp.RuntimeValue]) ===> scala.collection.mutable.StringBuilder: toString()
0.06666666666666667 stasiak.karol.fimpp.FieldAssignment: interpret(context: stasiak.karol.fimpp.Context) ===> stasiak.karol.fimpp.ListExpression: eval(Lstasiak/karol/fimpp/Context;)
0.07140740740740742 stasiak.karol.fimpp.ExprStat: interpret(context: stasiak.karol.fimpp.Context) ===> stasiak.karol.fimpp.NullValue$: eval(Lstasiak/karol/fimpp/Context;)
0.07318567678460236 stasiak.karol.fimpp.FimppParser: stringLiteral() ===> scala.Predef$: augmentString(Ljava/lang/String;)
0.07689504373177844 stasiak.karol.fimpp.JavaInterop.$anonfun: apply(x$1: Int, String) ===> scala.collection.TraversableLike: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
0.08012526261940464 stasiak.karol.fimpp.FimppParser: stringLiteral() ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
0.08329540282203006 stasiak.karol.fimpp.FimppParser.$anonfun: apply() ===> scala.util.parsing.combinator.Parsers$Parser: $up$up$up(Lscala/Function0;)
0.09992486851990981 stasiak.karol.fimpp.FimppParser.$anonfun.$anonfun.$anonfun: apply(x$1: Option[String],x$2: Option[String]) ===> scala.Option: getOrElse(Lscala/Function0;)
0.1111111111111111 stasiak.karol.fimpp.FimppParser: number() ===> scala.util.parsing.combinator.Parsers: opt(Lscala/Function0;)
0.12482853223593962 stasiak.karol.fimpp.FimppParser.$anonfun: apply() ===> stasiak.karol.fimpp.FimppParser$: opt(Lscala/Function0;)
0.1249809480262155 stasiak.karol.fimpp.FimppParser.$anonfun.$anonfun: apply(x$1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.Condition,Unit],stasiak.karol.fimpp.Alternative]) ===> scala.collection.immutable.List: $colon$colon(Ljava/lang/Object;)
0.125 stasiak.karol.fimpp.FimppParser: stringLiteral() ===> stasiak.karol.fimpp.StringInnardsParser$: regex(Lscala/util/matching/Regex;)
0.142578125 stasiak.karol.fimpp.Context: <init>(module: stasiak.karol.fimpp.Module) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
0.142822265625 stasiak.karol.fimpp.FimppParser: rawWord() ===> stasiak.karol.fimpp.FimppParser$: regex(Lscala/util/matching/Regex;)
0.16618075801749274 stasiak.karol.fimpp.FimppParser.$anonfun: apply(x$1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Unit],Long],Int]) ===> scala.runtime.BoxesRunTime: unboxToLong(Ljava/lang/Object;)
0.16659725114535615 stasiak.karol.fimpp.JavaInterop: setField(context: stasiak.karol.fimpp.Context,objClass: scala.util.Either[Class[_],Any],field: scala.util.Either[Int,String],v: stasiak.karol.fimpp.RuntimeValue) ===> scala.Predef$: refArrayOps([Ljava/lang/Object;)
0.16666666666666666 stasiak.karol.fimpp.FunctionCall: eval(context: stasiak.karol.fimpp.Context) ===> stasiak.karol.fimpp.FimppParser$$anonfun$ordinalExpression$2: apply(Ljava/lang/Object;)
0.19444444444444448 stasiak.karol.fimpp.FimppParser.$anonfun: applyOrElse([A1 <: String, B1 >: String]x$1: A1,default: A1 => B1) ===> stasiak.karol.fimpp.RepeatStat$$anonfun$interpret$1$$anonfun$apply$mcVJ$sp$2: apply(Ljava/lang/Object;)
0.1990740740740741 stasiak.karol.fimpp.FimppParser.$anonfun: applyOrElse([A1 <: String, B1 >: String]x$1: A1,default: A1 => B1) ===> stasiak.karol.fimpp.BuiltInFunctions$$anonfun$apply$2: apply(Ljava/lang/Object;)
0.1998456790123457 stasiak.karol.fimpp.FunctionCall: eval(context: stasiak.karol.fimpp.Context) ===> stasiak.karol.fimpp.RepeatStat$$anonfun$liftedTree2$1$2: apply(Ljava/lang/Object;)
0.24000000000000002 stasiak.karol.fimpp.RuntimeValue: fromJava(jObj: Any) ===> scala.runtime.BoxesRunTime: unboxToInt(Ljava/lang/Object;)
0.24800000000000003 stasiak.karol.fimpp.JavaInterop: callConstructor(context: stasiak.karol.fimpp.Context,clazz: Class[_],constructorParams: List[stasiak.karol.fimpp.RuntimeValue]) ===> scala.runtime.ObjectRef: <init>(Ljava/lang/Object;)
0.24960000000000002 stasiak.karol.fimpp.Context: forFunctionCall(f: stasiak.karol.fimpp.Function,args: List[stasiak.karol.fimpp.RuntimeValue]) ===> scala.collection.generic.GenMapFactory: apply(Lscala/collection/Seq;)
0.25 stasiak.karol.fimpp.JavaInterop: setField(context: stasiak.karol.fimpp.Context,objClass: scala.util.Either[Class[_],Any],field: scala.util.Either[Int,String],v: stasiak.karol.fimpp.RuntimeValue) ===> stasiak.karol.fimpp.RuntimeList: convertTo(Lstasiak/karol/fimpp/Context;Ljava/lang/Class;)
0.328125 stasiak.karol.fimpp.StringInnardsParser.$anonfun: apply(x$1: String) ===> scala.util.parsing.combinator.Parsers$ParseResult: get()
0.33203125 stasiak.karol.fimpp.Context: getGlobal(name: String) ===> scala.collection.mutable.Map: get(Ljava/lang/Object;)
0.3330078125 stasiak.karol.fimpp.JavaInterop.$anonfun: apply(x$1: stasiak.karol.fimpp.RuntimeValue, Class[_]) ===> stasiak.karol.fimpp.RuntimeArray: convertTo(Lstasiak/karol/fimpp/Context;Ljava/lang/Class;)
0.3333333333333333 stasiak.karol.fimpp.RepeatStat: liftedTree2() ===> scala.LowPriorityImplicits: longWrapper(J)
0.4444444444444445 stasiak.karol.fimpp.FimppParser: kw(strs: Seq[String]) ===> stasiak.karol.fimpp.FimppParser$: failure(Ljava/lang/String;)
0.4938271604938272 stasiak.karol.fimpp.RepeatStat: interpret(context: stasiak.karol.fimpp.Context) ===> scala.collection.immutable.NumericRange: foreach(Lscala/Function1;)
0.49794238683127573 stasiak.karol.fimpp.FimppParser: kw(strs: Seq[String]) ===> scala.collection.SeqLike: lengthCompare(I)
0.4993141289437586 stasiak.karol.fimpp.FieldAssignment: interpret(context: stasiak.karol.fimpp.Context) ===> scala.package$: Left()
0.49977137631458624 stasiak.karol.fimpp.FimppParser.$anonfun.$anonfun.$anonfun: <init>() ===> scala.runtime.AbstractFunction0$mcI$sp: <init>()
0.5 stasiak.karol.fimpp.RuntimeValue: fromJava(jObj: Any) ===> scala.runtime.BoxesRunTime: unboxToShort(Ljava/lang/Object;)
0.75 stasiak.karol.fimpp.RuntimeString: convertTo(context: stasiak.karol.fimpp.Context,clazz: Class[_]) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
0.96875 stasiak.karol.fimpp.FimppParser.$anonfun: apply(x$1: List[String]) ===> scala.collection.TraversableLike: filterNot(Lscala/Function1;)
0.984375 stasiak.karol.fimpp.RepeatStat.$anonfun: apply(x$1: Long) ===> stasiak.karol.fimpp.RepeatStat$$anonfun$liftedTree2$1$1: apply$mcVJ$sp(J)
0.9921875 stasiak.karol.fimpp.FimppParser.$anonfun: apply(x$1: String) ===> scala.collection.immutable.StringLike: stripSuffix(Ljava/lang/String;)
0.99609375 stasiak.karol.fimpp.Main: main(args: Array[String]) ===> scala.util.parsing.combinator.Parsers$ParseResult: successful()
0.998046875 stasiak.karol.fimpp.RepeatStat.$anonfun: apply(x$1: Long) ===> stasiak.karol.fimpp.RepeatStat$$anonfun$interpret$1: apply$mcVJ$sp(J)
0.9990234375 stasiak.karol.fimpp.FimppParser.$anonfun: apply() ===> stasiak.karol.fimpp.FimppParser$$anonfun$questionEnd$1: apply$mcV$sp()
1.0207932831322157 stasiak.karol.fimpp.FimppParser.$anonfun: apply(x$1: stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[stasiak.karol.fimpp.FimppParser.~[String,Option[List[String]]],List[stasiak.karol.fimpp.Statement]],stasiak.karol.fimpp.FimppParser.~[String,Option[String]]]) ===> stasiak.karol.fimpp.Trollestia: mismatchedFunctionNameInFooter(expected: String,found: String)
1.1188755377034854 stasiak.karol.fimpp.FimppParser.$anonfun: apply(x$1: String) ===> stasiak.karol.fimpp.Trollestia: invalidIdentifier(id: String)
===========================================================================
Number of reachable methods missing in local/dist/tca-this-super/fimpp/callgraph.gxl.gzip: 324
===========================================================================