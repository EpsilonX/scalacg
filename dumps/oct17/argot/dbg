===========================================================================
Missing call edges in local/dist/tca-this-super/argot/callgraph.gxl.gzip:
===========================================================================
0.0 org.clapper.argot.ArgotParser: checkForMultiParam(param: org.clapper.argot.Parameter[_]) ===> org.clapper.argot.Parameter: name()
0.04536862003780721 org.clapper.argot.ArgotParser.$anonfun: apply() ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/Object;)
0.09085648148148147 org.clapper.argot.ArgotParser.$anonfun: apply(x$1: String) ===> scala.Predef$: augmentString(Ljava/lang/String;)
0.10176076172041522 org.clapper.argot.FlagOption: wellDefined() ===> java.lang.Object: equals(Ljava/lang/Object;)
0.12345679012345677 org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.immutable.StringOps: <init>(Ljava/lang/String;)
0.125 org.clapper.argot.ArgotParser: handleOneOption(key: String) ===> scala.collection.LinearSeqOptimized: apply(I)
0.142822265625 org.clapper.argot.ArgotParser: multiOption([T]names: List[String],valueName: String,description: String,implicit convert: String, org.clapper.argot.MultiValueOption[T]) ===> scala.collection.immutable.List: foreach(Lscala/Function1;)
0.163265306122449 org.clapper.argot.ArgotParser.$anonfun: apply(x$1: org.clapper.argot.Parameter[_]) ===> scala.MatchError: <init>(Ljava/lang/Object;)
0.16666666666666666 org.clapper.argot.Parameter: $init$() ===> scala.Predef$: require(Z)
0.1990740740740741 org.clapper.argot.ArgotParser.$anonfun: apply(x$1: String) ===> scala.collection.mutable.StringBuilder: append(Ljava/lang/String;)
0.2 org.clapper.argot.FlagOption: <init>(parent: org.clapper.argot.ArgotParser,namesOn: List[String],namesOff: List[String],description: String,convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.TraversableLike: filter(Lscala/Function1;)
0.21239457991353516 org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.Predef$: assert(Z)
0.24000000000000002 org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.immutable.StringOps$: apply$extension(Ljava/lang/String;I)
0.24960000000000002 org.clapper.argot.ArgotParser: parseShortOpt(a: List[String]) ===> scala.collection.immutable.List: take(I)
0.24992 org.clapper.argot.FlagOption: <init>(parent: org.clapper.argot.ArgotParser,namesOn: List[String],namesOff: List[String],description: String,convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.immutable.List: $colon$colon$colon(Lscala/collection/immutable/List;)
0.25 org.clapper.argot.ArgotParser.$anonfun: apply(x$1: String) ===> grizzled.string.WordWrapper: wrap(Ljava/lang/String;)
0.3125 org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> grizzled.string.WordWrapper: <init>(IILjava/lang/String;C)
0.328125 org.clapper.argot.ArgotParser: parseRegularShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.mutable.Map: getOrElse(Ljava/lang/Object;Lscala/Function0;)
0.33203125 org.clapper.argot.ArgotParser.$anonfun.$anonfun: <init>() ===> java.lang.NullPointerException: <init>()
0.3330078125 org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.collection.IndexedSeqOptimized: drop(I)
0.3333333333333333 org.clapper.argot.ArgotParser.$anonfun: apply(x$1: String) ===> scala.Predef$: any2ArrowAssoc(Ljava/lang/Object;)
0.4444444444444445 org.clapper.argot.ArgotParser: handleOneParameter(p: org.clapper.argot.Parameter[_],maxNameLen: Int) ===> scala.collection.immutable.StringLike: $times(I)
0.4906182665990655 org.clapper.argot.ArgotTest: <init>() ===> scala.Some: <init>(Ljava/lang/Object;)
0.49175740975945115 org.clapper.argot.ArgotTest: <init>() ===> scala.collection.immutable.List$: apply(Lscala/collection/Seq;)
0.49794238683127573 org.clapper.argot.ArgotParser: replaceOption(opt: org.clapper.argot.CommandLineOption[_]) ===> scala.Predef$ArrowAssoc$: $minus$greater$extension(Ljava/lang/Object;Ljava/lang/Object;)
0.4993141289437586 org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> scala.LowPriorityImplicits: wrapRefArray([Ljava/lang/Object;)
0.5 org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueParameter: org$clapper$argot$SingleValueArg$_setter_$supportsMultipleValues_$eq(Z)
0.75 org.clapper.argot.FlagOption: <init>(parent: org.clapper.argot.ArgotParser,namesOn: List[String],namesOff: List[String],description: String,convert: Boolean, org.clapper.argot.FlagOption[T]) ===> scala.collection.TraversableOnce: toSet()
0.7530864197530864 org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.FlagOption: value()
0.7875159349205344 org.clapper.argot.MultiValueOption: <init>(parent: org.clapper.argot.ArgotParser,names: List[String],valueName: String,description: String,convert: String, org.clapper.argot.MultiValueOption[T]) ===> org.clapper.argot.CommandLineArgument: equals(o: Any)
0.875 org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.Iterable$: canBuildFrom()
0.9375 org.clapper.argot.ArgotParser: optString(name: String,opt: org.clapper.argot.CommandLineOption[_]) ===> org.clapper.argot.SingleValueOption: valueName()
0.96875 org.clapper.argot.ArgotParser: <init>(programName: String,compactUsage: Boolean,outputWidth: Int,preUsage: Option[String],postUsage: Option[String],sortUsage: Boolean) ===> scala.collection.mutable.Map$: empty()
0.9813669125371484 org.clapper.argot.ArgotParser: checkMissing(paramSpecs: List[org.clapper.argot.Parameter[_]]) ===> scala.collection.TraversableOnce: mkString(Ljava/lang/String;)
0.984375 org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueParameter: org$clapper$argot$MultiValueArg$_setter_$supportsMultipleValues_$eq(Z)
0.9914410993120991 org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueArg: optValue_=(x$1: Seq[T])
0.9921875 org.clapper.argot.ArgotParser: usageString(message: Option[String]) ===> scala.collection.SetLike: map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)
0.9955945916930278 org.clapper.argot.SingleValueArg: $init$() ===> org.clapper.argot.SingleValueArg: optValue_=(x$1: Option[T])
0.99609375 org.clapper.argot.MultiValueArg: $init$() ===> org.clapper.argot.MultiValueOption: org$clapper$argot$MultiValueArg$_setter_$supportsMultipleValues_$eq(Z)
0.998046875 org.clapper.argot.ArgotTest.$anonfun: apply(x$1: Boolean,x$2: org.clapper.argot.FlagOption[Boolean]) ===> org.clapper.argot.ArgotConverters: convertFlag([Boolean]onOff: Boolean,opt: org.clapper.argot.FlagOption[Boolean])
0.9990234375 org.clapper.argot.ArgotTest: main(args: Array[String]) ===> scala.Predef$: println(Ljava/lang/Object;)
1.7371972767804753 org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.MultiValueArg: value()
1.9840874806977808 org.clapper.argot.ArgotTest: main(args: Array[String]) ===> org.clapper.argot.SingleValueArg: value()
3.5167447566280403 org.clapper.argot.ArgotParser: parseLongOpt(a: List[String]) ===> org.clapper.argot.FlagOption: setByName(name: String)
3.9657376063302863 org.clapper.argot.ArgotParser: parseCompressedShortOpt(optString: String,optName: String,a: List[String]) ===> org.clapper.argot.HasValue: setFromString(s: String)
10.951059780073905 org.clapper.argot.ArgotTest.$anonfun: apply(x$1: String,x$2: org.clapper.argot.CommandLineArgument[Int]) ===> org.clapper.argot.ArgotConverters: convertInt(s: String,opt: org.clapper.argot.CommandLineArgument[Int])