8199 ===> org.kiama.example.obr.RISCTree.RISCProg.toString(): String
3745 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productArity: Int
857 ===> org.kiama.example.RISC.RISCISA.AND.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.AND
2030 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L0.NameAnalyser.env: org.kiama.attribution.Decorators.Chain[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
8943 ===> org.kiama.example.obr.SPARCTree.CmpneW.productIterator: Iterator[Any]
10081 ===> org.kiama.example.prolog.PrologTree.Integer.productElement(x$1: Int): Any
6298 ===> org.kiama.example.oberon0.L2.Parser.keywordStrings: List[String]
6498 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.toString(): String
8170 ===> org.kiama.example.obr.RISCTransformation.code: org.kiama.example.obr.ObrTree.ObrInt => org.kiama.example.obr.RISCTree.RISCProg
8669 ===> org.kiama.example.obr.RISCTree.Label.toString(): String
5803 ===> org.kiama.example.oberon0.L0.source.Assignment.productPrefix: String
3948 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productIterator: Iterator[Any]
10302 ===> org.kiama.example.repmin.Leaf.productIterator: Iterator[Any]
8916 ===> org.kiama.example.obr.SPARCTree.CmpeqW.r: org.kiama.example.obr.SPARCTree.Datum
9578 ===> org.kiama.example.oneohonecompanies.Depth.depth(c: org.kiama.example.oneohonecompanies.Company.Company): Int
4872 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3202 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productPrefix: String
4608 ===> org.kiama.example.lambda2.AST.Let.e1: org.kiama.example.lambda2.AST.Exp
12539 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productElement(x$1: Int): Any
1241 ===> org.kiama.example.RISC.RISCISA.BLE.apply(label: Int): org.kiama.example.RISC.RISCISA.BLE
5729 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productArity: Int
2671 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productIterator: Iterator[Any]
1622 ===> org.kiama.example.imperative.AST.Neg.productElement(x$1: Int): Any
0 ===> org.kiama.example.oberon0.L3.Parser.optvar: Parser.this.Parser[Product with Serializable with org.kiama.example.oberon0.L3.source.Mode]
4029 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productPrefix: String
1200 ===> org.kiama.example.RISC.RISCISA.BLT.productPrefix: String
11394 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productPrefix: String
7861 ===> org.kiama.example.obr.ObrTree.EqualExp.productElement(x$1: Int): Any
4389 ===> org.kiama.example.lambda.AST.Num.i: Int
5637 ===> org.kiama.example.oberon0.L0.c.CModExp.toString(): String
9455 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productIterator: Iterator[Any]
2242 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.toString(): String
0 ===> scala.Array.<init>(_length: Int): Array[T]
0 ===> org.kiama.example.lambda3.Parser.factor: Parser.this.PackratParser[org.kiama.example.lambda3.AST.Exp]
10168 ===> org.kiama.example.prolog.SymbolTable.Predicate.productElement(x$1: Int): Any
11972 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2815 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productPrefix: String
1281 ===> org.kiama.example.RISC.RISCISA.BSR.productArity: Int
11050 ===> org.kiama.output.PrettyPrinterBase.any(a: Any): PrettyPrinterBase.this.Doc
5790 ===> org.kiama.example.oberon0.L0.source.NamedType.toString(): String
2357 ===> org.kiama.example.iswim.compiler.Syntax.Let.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
9576 ===> org.kiama.example.oneohonecompanies.Cut.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4663 ===> org.kiama.example.lambda2.AST.Bind.toString(): String
4929 ===> org.kiama.example.lambda2.PrettyPrinter.showtype(t: org.kiama.example.lambda2.AST.Type): org.kiama.example.lambda2.PrettyPrinter.Doc
678 ===> org.kiama.example.RISC.RISCISA.MULI.b: org.kiama.example.RISC.RISCISA.RegNo
4562 ===> org.kiama.example.lambda2.AST.Lam.toString(): String
5722 ===> org.kiama.example.oberon0.L0.source.ConstDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
7731 ===> org.kiama.example.obr.ObrTree.WhileStmt.productPrefix: String
10614 ===> org.kiama.example.til.AST.Add.l: org.kiama.example.til.AST.Exp
11282 ===> org.kiama.rewriting.NominalAST.Bind.productPrefix: String
5179 ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3263 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productPrefix: String
11612 ===> org.kiama.rewriting.Rewriter.$anon.cache: scala.collection.mutable.HashMap[Rewriter.this.Term,Option[Rewriter.this.Term]]
5063 ===> org.kiama.example.lambda3.AST.EvalQuery.productIterator: Iterator[Any]
7619 ===> org.kiama.example.obr.ObrTree.AssignStmt.productPrefix: String
1573 ===> org.kiama.example.imperative.AST.Num.<init>(d: Double): org.kiama.example.imperative.AST.Num
1163 ===> org.kiama.example.RISC.RISCISA.Branch.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
0 ===> org.kiama.example.oberon0.L1.c.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
6973 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productElement(x$1: Int): Any
10024 ===> org.kiama.example.prolog.PrologTree.Fact.productPrefix: String
5429 ===> org.kiama.example.oberon0.L0.c.CNeExp.productArity: Int
1138 ===> org.kiama.example.RISC.RISCISA.WRH.toString(): String
9044 ===> org.kiama.example.obr.SPARCTree.MulW.l: org.kiama.example.obr.SPARCTree.Datum
4713 ===> org.kiama.example.lambda2.AST.NoType.toString(): String
2391 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.toString(): String
1776 ===> org.kiama.example.imperative.AST.While.b: org.kiama.example.imperative.AST.Stmt
5454 ===> org.kiama.example.oberon0.L0.c.CLtExp.toString(): String
11523 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
6198 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productPrefix: String
1335 ===> org.kiama.example.RISC.RISCISA.Comment.productIterator: Iterator[Any]
9460 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.toString(): String
2839 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.toString(): String
12196 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8789 ===> org.kiama.example.obr.SPARCTree.LabelDef.lab: org.kiama.example.obr.SPARCTree.Label
10652 ===> org.kiama.example.til.AST.Eq.l: org.kiama.example.til.AST.Exp
2907 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.toString(): String
7356 ===> org.kiama.example.oberon0.base.source.IdnUse.toString(): String
5388 ===> org.kiama.example.oberon0.L0.c.CAssignment.productIterator: Iterator[Any]
4819 ===> org.kiama.example.lambda2.Lambda.Command.unapply(line: String): Option[Array[String]]
150 ===> org.kiama.attribution.AttributionTests.Pair.productPrefix: String
8142 ===> org.kiama.example.obr.ObrTree.StarExp.toString(): String
0 ===> org.kiama.example.oberon0.L4.NameAnalyser.super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
5942 ===> org.kiama.example.oberon0.L0.source.AddExp.left: org.kiama.example.oberon0.L0.source.Expression
11456 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionedRewriter.Term): Boolean
10397 ===> org.kiama.example.til.AST.IfThen.productPrefix: String
8265 ===> org.kiama.example.obr.RISCTree.LabelDef.productElement(x$1: Int): Any
8934 ===> org.kiama.example.obr.SPARCTree.CmpneW.l: org.kiama.example.obr.SPARCTree.Datum
156 ===> org.kiama.attribution.AttributionTests.Pair.toString(): String
1327 ===> org.kiama.example.RISC.RISCISA.Comment.text: String
5844 ===> org.kiama.example.oberon0.L0.source.NeExp.right: org.kiama.example.oberon0.L0.source.Expression
3384 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.hashCode(): Int
11879 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12602 ===> org.kiama.util.REPLBase.setup(args: Array[String]): Boolean
0 ===> org.kiama.example.lambda2.ParLazyUpdate.s: org.kiama.rewriting.Rewriter.Strategy
773 ===> org.kiama.example.RISC.RISCISA.MODI.productIterator: Iterator[Any]
4059 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toDoc: SECDBase.this.Doc
6889 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.toString(): String
8013 ===> org.kiama.example.obr.ObrTree.ModExp.toString(): String
2579 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productElement(x$1: Int): Any
11061 ===> org.kiama.output.PrettyPrinterBase.lsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
2470 ===> org.kiama.example.iswim.compiler.Syntax.Return.productArity: Int
3284 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productElement(x$1: Int): Any
9285 ===> org.kiama.example.obr.SymbolTable.Multiple.toString(): String
6773 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productElement(x$1: Int): Any
10479 ===> org.kiama.example.til.AST.Read.productElement(x$1: Int): Any
6754 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productPrefix: String
397 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productArity: Int
7936 ===> org.kiama.example.obr.ObrTree.IndexExp.productIterator: Iterator[Any]
3476 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productArity: Int
2012 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productElement(x$1: Int): Any
11191 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productArity: Int
9267 ===> org.kiama.example.obr.SymbolTable.Unknown.toString(): String
5969 ===> org.kiama.example.oberon0.L0.source.SubExp.productElement(x$1: Int): Any
3299 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.n: Int
4828 ===> org.kiama.example.lambda2.LambdaTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9804 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.Name: String
12462 ===> org.kiama.util.ParserUtilitiesTests.Tup2.n1: ParserUtilitiesTests.this.Node
9828 ===> org.kiama.example.picojava.Main.process(program: org.kiama.example.picojava.AbstractSyntax.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
9464 ===> org.kiama.example.obr.SyntaxAnalysis.withPos(op: SyntaxAnalysis.this.Parser[String]): SyntaxAnalysis.this.Parser[SyntaxAnalysis.this.Pos]
6393 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productElement(x$1: Int): Any
3418 ===> org.kiama.example.iswim.secd.SECDBase.ByteCodeBase.<init>(): org.kiama.example.iswim.secd.SECDBase.ByteCodeBase
955 ===> org.kiama.example.RISC.RISCISA.XORI.productElement(x$1: Int): Any
7230 ===> org.kiama.example.oberon0.base.c.CReturn.productArity: Int
4095 ===> org.kiama.example.iswim.secd.StackOps.Dup.productArity: Int
3730 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productArity: Int
2952 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productArity: Int
0 ===> org.kiama.example.picojava.Parser.boolean_literal: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.BooleanLiteral]
11507 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.toString(): String
2490 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productElement(x$1: Int): Any
6813 ===> org.kiama.example.oberon0.L4.TypeAnalyser.fieldListsToFields(fls: List[org.kiama.example.oberon0.L4.source.FieldList]): List[TypeAnalyser.this.Field]
12312 ===> org.kiama.util.Environments.Entity.<init>(): Environments.this.Entity
3001 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productElement(x$1: Int): Any
3886 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productArity: Int
10894 ===> org.kiama.machine.Machine.paramUpdaterToU[T, U, V >: U](up: Machine.this.ParamUpdater[T,U]): V
4839 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7333 ===> org.kiama.example.oberon0.base.source.IdnDef.productIterator: Iterator[Any]
2436 ===> org.kiama.example.iswim.compiler.Syntax.Import.productIterator: Iterator[Any]
2256 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productIterator: Iterator[Any]
10074 ===> org.kiama.example.prolog.PrologTree.Integer.v: Int
6610 ===> org.kiama.example.oberon0.L3.c.CAddrExp.toString(): String
561 ===> org.kiama.example.RISC.RISCISA.MVNI.productArity: Int
11118 ===> org.kiama.output.PrettyPrinter.text(t: String): PrettyPrinter.this.Doc
7712 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productPrefix: String
9149 ===> org.kiama.example.obr.SPARCTree.Local.toString(): String
9483 ===> org.kiama.example.oneohonecompanies.Company.Company.productArity: Int
9731 ===> org.kiama.example.picojava.AbstractSyntax.Access.<init>(): org.kiama.example.picojava.AbstractSyntax.Access
6841 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productElement(x$1: Int): Any
3976 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.c: org.kiama.example.iswim.secd.SECDBase.Code
6155 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean): PrettyPrinter.this.Doc
11415 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
2180 ===> org.kiama.example.iswim.compiler.Syntax.Less.productArity: Int
6097 ===> org.kiama.example.oberon0.L0.source.NegExp.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.whileexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
2144 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productIterator: Iterator[Any]
2036 ===> org.kiama.example.iswim.compiler.Syntax.Negate.toString(): String
5051 ===> org.kiama.example.lambda3.AST.EquivQuery.toString(): String
7038 ===> org.kiama.example.oberon0.base.TranslatingDriver.resetflags(): Unit
3870 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productPrefix: String
12402 ===> org.kiama.util.Messaging.Record.toString(): String
9154 ===> org.kiama.example.obr.SPARCTree.Indexed.offset: org.kiama.example.obr.SPARCTree.Datum
6328 ===> org.kiama.example.oberon0.L2.source.CaseStatement.cases: List[org.kiama.example.oberon0.L2.source.Case]
10432 ===> org.kiama.example.til.AST.While.b: Seq[org.kiama.example.til.AST.Stat]
0 ===> org.kiama.example.obr.SyntaxAnalysis.program: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.ObrInt]
9401 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productArity: Int
9276 ===> org.kiama.example.obr.SymbolTable.Multiple.productPrefix: String
5568 ===> org.kiama.example.oberon0.L0.c.COrExp.productPrefix: String
1847 ===> org.kiama.example.imperative.ASTNonCase.Var.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
762 ===> org.kiama.example.RISC.RISCISA.MODI.b: org.kiama.example.RISC.RISCISA.RegNo
4586 ===> org.kiama.example.lambda2.AST.Opn.o: org.kiama.example.lambda2.AST.Op
687 ===> org.kiama.example.RISC.RISCISA.MULI.productArity: Int
10332 ===> org.kiama.example.til.ParsingMain.process(reader: java.io.Reader): Any
1906 ===> org.kiama.example.imperative.Generator.arbStmt: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Stmt]
4231 ===> org.kiama.example.json.JSONTree.JValue.<init>(): org.kiama.example.json.JSONTree.JValue
1995 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productElement(x$1: Int): Any
4887 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
6955 ===> org.kiama.example.oberon0.L4.source.FieldExp.productArity: Int
2851 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productElement(x$1: Int): Any
1764 ===> org.kiama.example.imperative.AST.Asgn.productElement(x$1: Int): Any
3738 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.toString(): String
2957 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.toString(): String
8942 ===> org.kiama.example.obr.SPARCTree.CmpneW.productElement(x$1: Int): Any
12411 ===> org.kiama.util.Messaging.report(emitter: org.kiama.util.Emitter): Unit
0 ===> org.kiama.example.lambda3.Parser.query: Parser.this.PackratParser[org.kiama.example.lambda3.AST.Query]
9003 ===> org.kiama.example.obr.SPARCTree.DivW.toString(): String
3683 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L3.NameAnalyser.level: org.kiama.example.oberon0.base.source.SourceASTNode => Int
5195 ===> org.kiama.example.oberon0.L0.Parser.declarationsDef: Parser.this.PackratParser[List[org.kiama.example.oberon0.base.source.Declaration]]
238 ===> org.kiama.attribution.AttributionTests.SetTree.productIterator: Iterator[Any]
11442 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
0 ===> org.kiama.example.lambda2.Parser.ttype: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Type]
2936 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.hashCode(): Int
6489 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productPrefix: String
0 ===> org.kiama.example.lambda2.Reduce.arithop: org.kiama.rewriting.Rewriter.Strategy
7984 ===> org.kiama.example.obr.ObrTree.MinusExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.MinusExp
2188 ===> org.kiama.example.iswim.compiler.Syntax.Less.toString(): String
8284 ===> org.kiama.example.obr.RISCTree.Ret.toString(): String
186 ===> org.kiama.attribution.AttributionTests.Unused.productElement(x$1: Int): Any
3394 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.toString(): String
7017 ===> org.kiama.example.oberon0.base.Driver.processast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): org.kiama.example.oberon0.base.source.ModuleDecl
10803 ===> org.kiama.example.transform.AST.BinExp.op: String
5228 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productIterator: Iterator[Any]
4115 ===> org.kiama.example.iswim.secd.StackOps.Swap.productElement(x$1: Int): Any
2974 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.h: ExceptionHandler.this.Handler
4524 ===> org.kiama.example.lambda2.AST.Num.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.matchexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
0 ===> org.kiama.example.oberon0.L4.NameAnalyser.super$isLvalue(l: org.kiama.example.oberon0.L0.source.Expression): Boolean
3382 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productIterator: Iterator[Any]
3790 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productArity: Int
7428 ===> org.kiama.example.obr.ObrTree.ObrInt.decls: List[org.kiama.example.obr.ObrTree.Declaration]
4502 ===> org.kiama.example.lambda.Generator.genLeafExp: org.scalacheck.Gen[org.kiama.example.lambda.AST.Exp with Product with Serializable]
0 ===> scala.util.parsing.combinator.Parsers.Failure.<init>(msg: String,next: Parsers.this.Input): Parsers.this.Failure
8500 ===> org.kiama.example.obr.RISCTree.LdW.productArity: Int
5469 ===> org.kiama.example.oberon0.L0.c.CLeExp.productArity: Int
9106 ===> org.kiama.example.obr.SPARCTree.RemW.productIterator: Iterator[Any]
4932 ===> org.kiama.example.lambda2.Reduce.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2455 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productIterator: Iterator[Any]
7605 ===> org.kiama.example.obr.ObrTree.ExnConst.toString(): String
1737 ===> org.kiama.example.imperative.AST.Seqn.ss: Seq[org.kiama.example.imperative.AST.Stmt]
6233 ===> org.kiama.example.oberon0.L1.source.IfStatement.block: org.kiama.example.oberon0.base.source.Block
8119 ===> org.kiama.example.obr.ObrTree.SlashExp.productElement(x$1: Int): Any
3252 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.hashCode(): Int
2658 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.toString(): String
6842 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productIterator: Iterator[Any]
9112 ===> org.kiama.example.obr.SPARCTree.RemW.toString(): String
10162 ===> org.kiama.example.prolog.SymbolTable.Predicate.argtypes: List[org.kiama.example.prolog.SymbolTable.Type]
3306 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productIterator: Iterator[Any]
4103 ===> org.kiama.example.iswim.secd.StackOps.Dup.toString(): String
3689 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.toString(): String
4778 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
409 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.value: Int
4185 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.toString(): String
5850 ===> org.kiama.example.oberon0.L0.source.NeExp.productArity: Int
3602 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productArity: Int
3434 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productPrefix: String
6126 ===> org.kiama.example.oberon0.L0.source.IntExp.productElement(x$1: Int): Any
2699 ===> org.kiama.example.iswim.compiler.Syntax.Val.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Val
10585 ===> org.kiama.example.til.AST.Mul.productIterator: Iterator[Any]
6784 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.tipe: SymbolTable.this.Type
8743 ===> org.kiama.example.obr.SPARCTree.Beq.productIterator: Iterator[Any]
10223 ===> org.kiama.example.prolog.SymbolTable.IntegerType.toString(): String
8778 ===> org.kiama.example.obr.SPARCTree.Jmp.productElement(x$1: Int): Any
4424 ===> org.kiama.example.lambda.AST.Lam.e: org.kiama.example.lambda.AST.Exp
3163 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.toString(): String
432 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productElement(x$1: Int): Any
12048 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3712 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productElement(x$1: Int): Any
3838 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.message: String
8390 ===> org.kiama.example.obr.RISCTree.CmpeqW.productArity: Int
8850 ===> org.kiama.example.obr.SPARCTree.StW.toString(): String
11297 ===> org.kiama.rewriting.NominalAST.GenName.counter: Int
0 ===> org.kiama.example.picojava.Parser.program: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.Program]
8248 ===> org.kiama.example.obr.RISCTree.Jmp.productElement(x$1: Int): Any
7767 ===> org.kiama.example.obr.ObrTree.TryStmt.productPrefix: String
9495 ===> org.kiama.example.oneohonecompanies.Company.Dept.n: org.kiama.example.oneohonecompanies.Company.Name
3312 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.toString(): String
5753 ===> org.kiama.example.oberon0.L0.source.VarDecl.toString(): String
0 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.super$toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
8162 ===> org.kiama.example.obr.RISCEncoder.exitlab_$eq(x$1: Int): Unit
2326 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productArity: Int
3711 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productArity: Int
2616 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productIterator: Iterator[Any]
8574 ===> org.kiama.example.obr.RISCTree.RemW.productIterator: Iterator[Any]
4574 ===> org.kiama.example.lambda2.AST.App.productElement(x$1: Int): Any
144 ===> org.kiama.attribution.AttributionTests.Pair.left: AttributionTests.this.Tree
10595 ===> org.kiama.example.til.AST.Div.l: org.kiama.example.til.AST.Exp
11364 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.toString(): String
7754 ===> org.kiama.example.obr.ObrTree.RaiseStmt.toString(): String
1040 ===> org.kiama.example.RISC.RISCISA.STW.productIterator: Iterator[Any]
519 ===> org.kiama.example.RISC.RISCISA.MOVI.productArity: Int
5896 ===> org.kiama.example.oberon0.L0.source.LeExp.toString(): String
9347 ===> org.kiama.example.obr.SymbolTable.RecordType.toString(): String
2358 ===> org.kiama.example.iswim.compiler.Syntax.Let.body: org.kiama.example.iswim.compiler.Syntax.Expr
10355 ===> org.kiama.example.til.AST.Decl.i: org.kiama.example.til.AST.Id
11169 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productArity: Int
8665 ===> org.kiama.example.obr.RISCTree.Label.productElement(x$1: Int): Any
5630 ===> org.kiama.example.oberon0.L0.c.CModExp.productElement(x$1: Int): Any
12299 ===> org.kiama.util.Emitter.emitln: Unit
3442 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.apply(bs: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase*): org.kiama.example.iswim.secd.SECDBase.CodeSegment
2452 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productPrefix: String
0 ===> org.kiama.example.iswim.compiler.Parser.pattern: Parser.this.PackratParser[(Parser.this.Pos, List[org.kiama.example.iswim.compiler.Syntax.Variable])]
5069 ===> org.kiama.example.lambda3.AST.EvalQuery.toString(): String
3321 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productIterator: Iterator[Any]
12409 ===> org.kiama.util.Messaging.message(value: org.kiama.util.Positioned,message: String): Unit
382 ===> org.kiama.attribution.Decorators.chain[T <: org.kiama.attribution.Attributable, U](inupdate: (T => U) => org.kiama.==>[T,U],outupdate: (T => U) => org.kiama.==>[T,U]): org.kiama.attribution.Decorators.Chain[T,U]
6029 ===> org.kiama.example.oberon0.L0.source.DivExp.productArity: Int
8137 ===> org.kiama.example.obr.ObrTree.StarExp.productArity: Int
6548 ===> org.kiama.example.oberon0.L3.c.CAddrType.productElement(x$1: Int): Any
10633 ===> org.kiama.example.til.AST.Sub.l: org.kiama.example.til.AST.Exp
1710 ===> org.kiama.example.imperative.AST.Div.productIterator: Iterator[Any]
7171 ===> org.kiama.example.oberon0.base.c.CIntType.toString(): String
6902 ===> org.kiama.example.oberon0.L4.source.IndexExp.productIterator: Iterator[Any]
8092 ===> org.kiama.example.obr.ObrTree.PlusExp.left: org.kiama.example.obr.ObrTree.Expression
1231 ===> org.kiama.example.RISC.RISCISA.BLE.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
0 ===> scala.util.parsing.combinator.JavaTokenParsers.stringLiteral: JavaTokenParsers.this.Parser[String]
4763 ===> org.kiama.example.lambda2.AST.Let(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy,s3: => org.kiama.rewriting.Rewriter.Strategy,s4: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
12537 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productPrefix: String
9045 ===> org.kiama.example.obr.SPARCTree.MulW.r: org.kiama.example.obr.SPARCTree.Datum
1196 ===> org.kiama.example.RISC.RISCISA.BLT.label: Int
2682 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MkRef
5133 ===> org.kiama.example.lambda3.AST.SwapQuery.tr: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name)
1171 ===> org.kiama.example.RISC.RISCISA.BEQ.productIterator: Iterator[Any]
4508 ===> org.kiama.example.lambda.LambdaGen.generator: org.scalacheck.Arbitrary[org.kiama.example.lambda.AST.Exp]
0 ===> org.kiama.example.oberon0.L3.Parser.optformalParameters: Parser.this.PackratParser[List[org.kiama.example.oberon0.L3.source.FPSection]]
6212 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.stmt: org.kiama.example.oberon0.base.c.CStatement
9922 ===> org.kiama.example.prolog.Interpreter.TermGoal.<init>(term: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.TermGoal
8061 ===> org.kiama.example.obr.ObrTree.NotExp.productArity: Int
0 ===> scala.util.parsing.combinator.RegexParsers.regex(r: scala.util.matching.Regex): RegexParsers.this.Parser[String]
0 ===> org.kiama.example.iswim.secd.RecordOps.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
10118 ===> org.kiama.example.prolog.PrologTree.Pred.productElement(x$1: Int): Any
1398 ===> org.kiama.example.dataflow.DataflowAST.While.toString(): String
9306 ===> org.kiama.example.obr.SymbolTable.IntType.toString(): String
3112 ===> org.kiama.example.iswim.secd.IOOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
8629 ===> org.kiama.example.obr.RISCTree.Local.productElement(x$1: Int): Any
1032 ===> org.kiama.example.RISC.RISCISA.STW.toString(): String
1007 ===> org.kiama.example.RISC.RISCISA.POP.a: org.kiama.example.RISC.RISCISA.RegNo
10813 ===> org.kiama.example.transform.AST.BinExp.productIterator: Iterator[Any]
7862 ===> org.kiama.example.obr.ObrTree.EqualExp.productIterator: Iterator[Any]
20 ===> org.kiama.attribution.Attributable._children: scala.collection.mutable.ListBuffer[org.kiama.attribution.Attributable]
6808 ===> org.kiama.example.oberon0.L4.TypeAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
4556 ===> org.kiama.example.lambda2.AST.Lam.productIterator: Iterator[Any]
0 ===> scala.util.parsing.combinator.Parsers.guard[T](p: => Parsers.this.Parser[T]): Parsers.this.Parser[T]
9808 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productPrefix: String
3587 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productArity: Int
6629 ===> org.kiama.example.oberon0.L3.c.CDerefExp.toString(): String
4578 ===> org.kiama.example.lambda2.AST.App.toString(): String
0 ===> org.kiama.example.oberon0.L0.Parser.vardeclsection: Parser.this.Parser[List[org.kiama.example.oberon0.L0.source.VarDecl]]
8123 ===> org.kiama.example.obr.ObrTree.SlashExp.toString(): String
2960 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.toString(): String
12387 ===> org.kiama.util.Messaging.Record.pos: scala.util.parsing.input.Position
3933 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productIterator: Iterator[Any]
7635 ===> org.kiama.example.obr.ObrTree.ExitStmt.productArity: Int
7546 ===> org.kiama.example.obr.ObrTree.EnumVar.productPrefix: String
1924 ===> org.kiama.example.iswim.compiler.Parser.reserved: scala.collection.immutable.HashSet[String]
11305 ===> org.kiama.rewriting.NominalRewriter.$anonfun.isDefinedAt(x$1: NominalRewriter.this.Term): Boolean
6750 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.toString(): String
8230 ===> org.kiama.example.obr.RISCTree.Bne.productArity: Int
6996 ===> org.kiama.example.oberon0.base.Driver.helpFlag: Boolean
4014 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productIterator: Iterator[Any]
2800 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productPrefix: String
10777 ===> org.kiama.example.transform.AST.BinExpR.toString(): String
1930 ===> org.kiama.example.iswim.compiler.Parser.Pos.productArity: Int
5877 ===> org.kiama.example.oberon0.L0.source.LtExp.toString(): String
0 ===> org.kiama.example.imperative.ASTNonCase.Sub.l: org.kiama.example.imperative.ASTNonCase.Exp
6297 ===> org.kiama.example.oberon0.L2.Parser.statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
9565 ===> org.kiama.example.oneohonecompanies.Company.DU.toString(): String
6648 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productArity: Int
4478 ===> org.kiama.example.lambda.AST.Sub.toString(): String
3571 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productPrefix: String
10596 ===> org.kiama.example.til.AST.Div.r: org.kiama.example.til.AST.Exp
4775 ===> org.kiama.example.lambda2.AST.Bind(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
0 ===> org.kiama.example.prolog.SyntaxAnalysis.clause: SyntaxAnalysis.this.Parser[org.kiama.example.prolog.PrologTree.Clause with Serializable]
10285 ===> org.kiama.example.repmin.Fork.productIterator: Iterator[Any]
0 ===> scala.util.parsing.combinator.PackratParsers.phrase[T](p: PackratParsers.this.Parser[T]): PackratParsers.this.PackratParser[T]
0 ===> org.kiama.example.obr.SyntaxAnalysis.signed: SyntaxAnalysis.this.PackratParser[Int]
2865 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productArity: Int
8440 ===> org.kiama.example.obr.RISCTree.CmpltW.l: org.kiama.example.obr.RISCTree.Datum
0 ===> org.kiama.example.oberon0.L2.Parser.super$keywordStrings: List[String]
11027 ===> org.kiama.output.PrettyPrinterBase.$anon.toDoc: PrettyPrinterBase.this.Doc
965 ===> org.kiama.example.RISC.RISCISA.LDW.a: org.kiama.example.RISC.RISCISA.RegNo
5081 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productIterator: Iterator[Any]
3357 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.toString(): String
11598 ===> org.kiama.rewriting.Rewriter.some(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
12287 ===> org.kiama.util.Console.readInt(prompt: String): Int
12611 ===> org.kiama.util.GeneratingREPLBase.setup(args: Array[String]): Boolean
12477 ===> org.kiama.util.ParserUtilitiesTests.Tup2.toString(): String
12338 ===> org.kiama.util.Environments.UnknownEntity.<init>(): Environments.this.UnknownEntity
0 ===> org.kiama.example.obr.SyntaxAnalysis.integer: SyntaxAnalysis.this.PackratParser[Int]
5786 ===> org.kiama.example.oberon0.L0.source.NamedType.productElement(x$1: Int): Any
1716 ===> org.kiama.example.imperative.AST.Div.toString(): String
1976 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productPrefix: String
0 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.super$declsection(d: org.kiama.example.oberon0.base.source.Declaration): String
2836 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.toString(): String
12597 ===> org.kiama.util.WhitespacePositionedParserUtilities.handleWhiteSpace(in: WhitespacePositionedParserUtilities.this.Input): Int
11909 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.iswim.secd.SECDBase.control: SECDBase.this.State[org.kiama.example.iswim.secd.SECDBase.Code]{def toDoc: SECDBase.this.Doc}
8204 ===> org.kiama.example.obr.RISCTree.Beq.cond: org.kiama.example.obr.RISCTree.Datum
2934 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productIterator: Iterator[Any]
6248 ===> org.kiama.example.oberon0.L1.source.IfStatement.toString(): String
3429 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.<init>(code: org.kiama.example.iswim.secd.SECDBase.Code): org.kiama.example.iswim.secd.SECDBase.CodeSegment
0 ===> org.kiama.example.iswim.compiler.Parser.blockexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
0 ===> org.kiama.example.iswim.secd.HeapOps.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
8799 ===> org.kiama.example.obr.SPARCTree.LabelDef.toString(): String
10680 ===> org.kiama.example.til.AST.Ne.productIterator: Iterator[Any]
8373 ===> org.kiama.example.obr.RISCTree.Cond.productIterator: Iterator[Any]
10183 ===> org.kiama.example.prolog.SymbolTable.Variable.productPrefix: String
9449 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.toString(): String
9123 ===> org.kiama.example.obr.SPARCTree.SubW.productArity: Int
11882 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
616 ===> org.kiama.example.RISC.RISCISA.SUB.c: org.kiama.example.RISC.RISCISA.RegNo
8164 ===> org.kiama.example.obr.RISCEncoder.encode(i: org.kiama.example.obr.RISCTree.Item): Unit
4595 ===> org.kiama.example.lambda2.AST.Opn.productElement(x$1: Int): Any
1667 ===> org.kiama.example.imperative.AST.Sub.productArity: Int
323 ===> org.kiama.attribution.AttributionTests.QuadTree.productIterator: Iterator[Any]
723 ===> org.kiama.example.RISC.RISCISA.DIVI.toString(): String
9780 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.toString(): String
2931 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productPrefix: String
5431 ===> org.kiama.example.oberon0.L0.c.CNeExp.productIterator: Iterator[Any]
497 ===> org.kiama.example.RISC.RISCISA.MOV.productPrefix: String
8409 ===> org.kiama.example.obr.RISCTree.CmpneW.productArity: Int
3798 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.toString(): String
12259 ===> org.kiama.util.CompilerBase.checkargs(args: Array[String],emitter: org.kiama.util.Emitter): Array[String]
10184 ===> org.kiama.example.prolog.SymbolTable.Variable.productArity: Int
3806 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productElement(x$1: Int): Any
1929 ===> org.kiama.example.iswim.compiler.Parser.Pos.productPrefix: String
10938 ===> org.kiama.output.LeftAssoc.productElement(x$1: Int): Any
3625 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.toString(): String
8428 ===> org.kiama.example.obr.RISCTree.CmpgtW.productArity: Int
11681 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
12377 ===> org.kiama.util.IO.FileNotFoundException.toString(): String
0 ===> org.kiama.example.oberon0.L4.Parser.super$typedefDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.TypeDef]
3283 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productArity: Int
518 ===> org.kiama.example.RISC.RISCISA.MOVI.productPrefix: String
9687 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.toString(): String
5123 ===> org.kiama.example.lambda3.AST.SubstQuery.productIterator: Iterator[Any]
5641 ===> org.kiama.example.oberon0.L0.c.CAndExp.left: org.kiama.example.oberon0.base.c.CExpression
10664 ===> org.kiama.example.til.AST.Eq.toString(): String
10886 ===> org.kiama.machine.Machine.ParamUpdater.toString(): String
3953 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.toString(): String
6082 ===> org.kiama.example.oberon0.L0.source.NegExp.exp: org.kiama.example.oberon0.L0.source.Expression
5920 ===> org.kiama.example.oberon0.L0.source.GeExp.right: org.kiama.example.oberon0.L0.source.Expression
4782 ===> org.kiama.example.lambda2.Analysis.tipe: org.kiama.example.lambda2.AST.Exp => org.kiama.example.lambda2.AST.Type
4857 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8098 ===> org.kiama.example.obr.ObrTree.PlusExp.productPrefix: String
3843 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productIterator: Iterator[Any]
4806 ===> org.kiama.example.lambda2.Evaluators.setEvaluator(mech: String): Boolean
8759 ===> org.kiama.example.obr.SPARCTree.Bne.productPrefix: String
1850 ===> org.kiama.example.imperative.ASTNonCase.Neg.<init>(e: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Neg
4237 ===> org.kiama.example.json.JSONTree.JObject.productArity: Int
6882 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productElement(x$1: Int): Any
7701 ===> org.kiama.example.obr.ObrTree.LoopStmt.toString(): String
4413 ===> org.kiama.example.lambda.AST.Var.productElement(x$1: Int): Any
6574 ===> org.kiama.example.oberon0.L3.c.CCall.toString(): String
11490 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.toString(): String
1611 ===> org.kiama.example.imperative.AST.Neg.e: org.kiama.example.imperative.AST.Exp
11553 ===> org.kiama.rewriting.Rewriter.query[T](f: org.kiama.==>[Rewriter.this.Term,T]): Rewriter.this.Strategy
2122 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productPrefix: String
0 ===> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
7402 ===> org.kiama.example.obr.Driver.spillRISCAssemFlag: Boolean
5246 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productIterator: Iterator[Any]
6171 ===> org.kiama.example.oberon0.L1.c.CIfStatement.cond: org.kiama.example.oberon0.base.c.CExpression
7521 ===> org.kiama.example.obr.ObrTree.RecordVar.idn: org.kiama.example.obr.ObrTree.Identifier
11766 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4078 ===> org.kiama.example.iswim.secd.StackOps.Pop.productArity: Int
2806 ===> org.kiama.example.iswim.secd.BooleanOps.Test.toString(): String
11775 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9800 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.toString(): String
12100 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3681 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productArity: Int
2563 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productIterator: Iterator[Any]
5017 ===> org.kiama.example.lambda3.AST.Lam.<init>(b: org.kiama.rewriting.NominalAST.Bind): org.kiama.example.lambda3.AST.Lam
0 ===> org.kiama.example.oberon0.L3.Parser.procedureCall: Parser.this.Parser[org.kiama.example.oberon0.L3.source.Call]
11324 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
2098 ===> org.kiama.example.iswim.compiler.Syntax.Divide.r: org.kiama.example.iswim.compiler.Syntax.Expr
7075 ===> org.kiama.example.oberon0.base.c.CProgram.toString(): String
4189 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productArity: Int
2663 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.c: org.kiama.example.iswim.compiler.Syntax.Expr
3350 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productElement(x$1: Int): Any
5830 ===> org.kiama.example.oberon0.L0.source.EqExp.productPrefix: String
1439 ===> org.kiama.example.dataflow.DataflowAST.Block.toString(): String
8618 ===> org.kiama.example.obr.RISCTree.SequenceDatum.toString(): String
8471 ===> org.kiama.example.obr.RISCTree.DivW.toString(): String
10811 ===> org.kiama.example.transform.AST.BinExp.productArity: Int
1955 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.bds: List[org.kiama.example.iswim.compiler.Syntax.Stmt]
1646 ===> org.kiama.example.imperative.AST.Add.productPrefix: String
6822 ===> org.kiama.example.oberon0.L4.c.CRecordType.productElement(x$1: Int): Any
7032 ===> org.kiama.example.oberon0.base.TranslatingDriver.printcastFlag: Boolean
1724 ===> org.kiama.example.imperative.AST.Null.productPrefix: String
11212 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productPrefix: String
8768 ===> org.kiama.example.obr.SPARCTree.Bne.toString(): String
10350 ===> org.kiama.example.til.AST.Program.toString(): String
153 ===> org.kiama.attribution.AttributionTests.Pair.productIterator: Iterator[Any]
12154 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1782 ===> org.kiama.example.imperative.AST.While.productPrefix: String
7823 ===> org.kiama.example.obr.ObrTree.AndExp.productPrefix: String
9981 ===> org.kiama.example.prolog.Interpreter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
0 ===> scala.Any.asInstanceOf[T0]: T0
10901 ===> org.kiama.machine.Machine.ScalarUpdate.key: AnyRef
12112 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6985 ===> org.kiama.example.oberon0.L4.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
3447 ===> org.kiama.example.iswim.secd.SECDBase.toCodeSegment(bcb: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase): org.kiama.example.iswim.secd.SECDBase.CodeSegment
6235 ===> org.kiama.example.oberon0.L1.source.IfStatement.optelse: Option[org.kiama.example.oberon0.base.source.Block]
6708 ===> org.kiama.example.oberon0.L3.source.FPSection.toString(): String
0 ===> org.kiama.example.til.TIL1_1.string: TIL1_1.this.Parser[org.kiama.example.til.AST.Str]
3287 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.hashCode(): Int
0 ===> scala.util.parsing.combinator.Parsers.Parser.toString(): String
8997 ===> org.kiama.example.obr.SPARCTree.DivW.productPrefix: String
9076 ===> org.kiama.example.obr.SPARCTree.NegW.toString(): String
1566 ===> org.kiama.example.imperative.AST.Exp.<init>(): org.kiama.example.imperative.AST.Exp
3218 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productArity: Int
11894 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6283 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
474 ===> org.kiama.example.RISC.RISC.Z: RISC.this.State[Boolean]
2999 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productPrefix: String
8430 ===> org.kiama.example.obr.RISCTree.CmpgtW.productIterator: Iterator[Any]
2691 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.toString(): String
2922 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.toString(): String
8242 ===> org.kiama.example.obr.RISCTree.Jmp.dest: org.kiama.example.obr.RISCTree.Label
11429 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
3153 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.n: Int
2366 ===> org.kiama.example.iswim.compiler.Syntax.Let.productIterator: Iterator[Any]
6963 ===> org.kiama.example.oberon0.L4.source.FieldExp.toString(): String
1414 ===> org.kiama.example.dataflow.DataflowAST.If.productArity: Int
9497 ===> org.kiama.example.oneohonecompanies.Company.Dept.su: List[org.kiama.example.oneohonecompanies.Company.SubUnit]
2939 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.toString(): String
1070 ===> org.kiama.example.RISC.RISCISA.PSH.a: org.kiama.example.RISC.RISCISA.RegNo
3268 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.hashCode(): Int
0 ===> org.kiama.example.oberon0.L0.NameAnalyser.rootconstexp: org.kiama.example.oberon0.L0.source.Expression => Boolean
9753 ===> org.kiama.example.picojava.AbstractSyntax.Dot.<init>(ObjectReference: org.kiama.example.picojava.AbstractSyntax.Access,IdnUse: org.kiama.example.picojava.AbstractSyntax.IdnUse): org.kiama.example.picojava.AbstractSyntax.Dot
6056 ===> org.kiama.example.oberon0.L0.source.ModExp.toString(): String
4877 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> java.util.AbstractMap.toString(): String
11628 ===> org.kiama.rewriting.Rewriter.attempt(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2131 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.toString(): String
11960 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5143 ===> org.kiama.example.lambda3.AST.SwapQuery.productIterator: Iterator[Any]
11138 ===> org.kiama.output.PrettyPrinterTests.Val.productElement(x$1: Int): Any
6701 ===> org.kiama.example.oberon0.L3.source.FPSection.productElement(x$1: Int): Any
9070 ===> org.kiama.example.obr.SPARCTree.NegW.productIterator: Iterator[Any]
3380 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productArity: Int
10228 ===> org.kiama.example.prolog.SymbolTable.ListType.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.throwtoexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
11123 ===> org.kiama.output.PrettyPrinter.empty: PrettyPrinter.this.Doc
5949 ===> org.kiama.example.oberon0.L0.source.AddExp.productArity: Int
8132 ===> org.kiama.example.obr.ObrTree.StarExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.StarExp
3618 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productElement(x$1: Int): Any
9938 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.left: org.kiama.example.prolog.PrologTree.Term
2232 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.GreaterEq
6141 ===> org.kiama.example.oberon0.L0.source.IdnExp.productPrefix: String
5043 ===> org.kiama.example.lambda3.AST.EquivQuery.productArity: Int
1709 ===> org.kiama.example.imperative.AST.Div.productElement(x$1: Int): Any
9332 ===> org.kiama.example.obr.SymbolTable.ArrayType.productPrefix: String
5824 ===> org.kiama.example.oberon0.L0.source.EqExp.left: org.kiama.example.oberon0.L0.source.Expression
8333 ===> org.kiama.example.obr.RISCTree.Read.productIterator: Iterator[Any]
532 ===> org.kiama.example.RISC.RISCISA.MVN.c: org.kiama.example.RISC.RISCISA.RegNo
9488 ===> org.kiama.example.oneohonecompanies.Company.Company.toString(): String
4334 ===> org.kiama.example.json.JSONTree.JFalse.productPrefix: String
2900 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productElement(x$1: Int): Any
2914 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productArity: Int
11232 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productIterator: Iterator[Any]
12424 ===> org.kiama.util.ParserUtilities.parseResultToTuple3[A, B, C](p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C]]): ParserUtilities.this.PackratParser[(A, B, C)]
1306 ===> org.kiama.example.RISC.RISCISA.RET.apply(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RET
5951 ===> org.kiama.example.oberon0.L0.source.AddExp.productIterator: Iterator[Any]
0 ===> org.kiama.example.json.SyntaxAnalysis.jfalse: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JFalse]
8726 ===> org.kiama.example.obr.SPARCTree.SPARC.toString(): String
5988 ===> org.kiama.example.oberon0.L0.source.OrExp.productElement(x$1: Int): Any
537 ===> org.kiama.example.RISC.RISCISA.MVN.toString(): String
1060 ===> org.kiama.example.RISC.RISCISA.STB.productElement(x$1: Int): Any
426 ===> org.kiama.attribution.DynamicAttributionTests.Unused.b: Boolean
12518 ===> org.kiama.util.ParserUtilitiesTests.Tup4.toString(): String
6378 ===> org.kiama.example.oberon0.L2.source.ValCond.toString(): String
7749 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productArity: Int
4355 ===> org.kiama.example.json.JSONTree.JNull.toString(): String
7548 ===> org.kiama.example.obr.ObrTree.EnumVar.productElement(x$1: Int): Any
3424 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.toCodeSegment: org.kiama.example.iswim.secd.SECDBase.CodeSegment
2758 ===> org.kiama.example.iswim.driver.SECD.<init>(code: org.kiama.example.iswim.secd.SECDBase.CodeTree): org.kiama.example.iswim.driver.SECD
0 ===> org.kiama.example.lambda2.Par.subsLam: org.kiama.rewriting.Rewriter.Strategy
7708 ===> org.kiama.example.obr.ObrTree.ReturnStmt.value: org.kiama.example.obr.ObrTree.Expression
8186 ===> org.kiama.example.obr.RISCTree.RISCProg.insns: List[org.kiama.example.obr.RISCTree.Item]
7024 ===> org.kiama.example.oberon0.base.TransformingDriver.pprintiastFlag_$eq(x$1: Boolean): Unit
5323 ===> org.kiama.example.oberon0.L0.TypeAnalyser.idntypeDef: org.kiama.example.oberon0.base.source.IdnUse => TypeAnalyser.this.Type
7429 ===> org.kiama.example.obr.ObrTree.ObrInt.stmts: List[org.kiama.example.obr.ObrTree.Statement]
10610 ===> org.kiama.example.til.AST.Div.toString(): String
4238 ===> org.kiama.example.json.JSONTree.JObject.productElement(x$1: Int): Any
6304 ===> org.kiama.example.oberon0.L2.source.ForStatement.upper: org.kiama.example.oberon0.L0.source.Expression
8882 ===> org.kiama.example.obr.SPARCTree.AddW.productArity: Int
5157 ===> org.kiama.example.lambda3.Lambda.setup(args: Array[String]): Boolean
7115 ===> org.kiama.example.oberon0.base.c.CVarDecl.toString(): String
0 ===> org.kiama.example.oberon0.L4.Parser.super$keywordStrings: List[String]
0 ===> org.kiama.example.oberon0.base.Parser.block: Parser.this.Parser[org.kiama.example.oberon0.base.source.Block]
7350 ===> org.kiama.example.oberon0.base.source.IdnUse.productIterator: Iterator[Any]
6200 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productElement(x$1: Int): Any
2150 ===> org.kiama.example.iswim.compiler.Syntax.Equal.toString(): String
185 ===> org.kiama.attribution.AttributionTests.Unused.productArity: Int
11312 ===> org.kiama.rewriting.NominalRewriter.subst[T](n: org.kiama.rewriting.NominalAST.Name,t1: NominalRewriter.this.Term): T => T
9998 ===> org.kiama.example.prolog.PrologTree.SourceNode.<init>(): org.kiama.example.prolog.PrologTree.SourceNode
7563 ===> org.kiama.example.obr.ObrTree.EnumConst.productPrefix: String
4319 ===> org.kiama.example.json.JSONTree.JTrue.productPrefix: String
7565 ===> org.kiama.example.obr.ObrTree.EnumConst.productElement(x$1: Int): Any
5023 ===> org.kiama.example.lambda3.AST.Lam.productElement(x$1: Int): Any
5402 ===> org.kiama.example.oberon0.L0.c.CEqExp.right: org.kiama.example.oberon0.base.c.CExpression
6125 ===> org.kiama.example.oberon0.L0.source.IntExp.productArity: Int
10308 ===> org.kiama.example.repmin.Leaf.toString(): String
4555 ===> org.kiama.example.lambda2.AST.Lam.productElement(x$1: Int): Any
10196 ===> org.kiama.example.prolog.SymbolTable.Type.<init>(): org.kiama.example.prolog.SymbolTable.Type
945 ===> org.kiama.example.RISC.RISCISA.XORI.b: org.kiama.example.RISC.RISCISA.RegNo
12011 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10277 ===> org.kiama.example.repmin.Fork.right: org.kiama.example.repmin.Tree
747 ===> org.kiama.example.RISC.RISCISA.MOD.toString(): String
6833 ===> org.kiama.example.oberon0.L4.c.CIndexExp.array: org.kiama.example.oberon0.base.c.CExpression
0 ===> org.kiama.example.iswim.secd.ExceptionHandler.handler: ExceptionHandler.this.State[ExceptionHandler.this.Handler]
5642 ===> org.kiama.example.oberon0.L0.c.CAndExp.right: org.kiama.example.oberon0.base.c.CExpression
11852 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
469 ===> org.kiama.example.RISC.RISC.PC: RISC.this.ParamUpdater[org.kiama.example.RISC.RISCISA.RegNo,Int]
2603 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.toString(): String
602 ===> org.kiama.example.RISC.RISCISA.ADDI.productPrefix: String
4443 ===> org.kiama.example.lambda.AST.App.r: org.kiama.example.lambda.AST.Exp
7439 ===> org.kiama.example.obr.ObrTree.ObrInt.productElement(x$1: Int): Any
5126 ===> org.kiama.example.lambda3.AST.SubstQuery.toString(): String
5007 ===> org.kiama.example.lambda3.AST.App.productIterator: Iterator[Any]
4607 ===> org.kiama.example.lambda2.AST.Let.t: org.kiama.example.lambda2.AST.Type
9040 ===> org.kiama.example.obr.SPARCTree.LdW.toString(): String
2236 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productPrefix: String
6066 ===> org.kiama.example.oberon0.L0.source.AndExp.productPrefix: String
0 ===> scala.collection.mutable.StringBuilder.toString(): String
940 ===> org.kiama.example.RISC.RISCISA.XOR.toString(): String
7793 ===> org.kiama.example.obr.ObrTree.TryBody.toString(): String
904 ===> org.kiama.example.RISC.RISCISA.ORI.im: org.kiama.example.RISC.RISCISA.Imm
11157 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.prio: Int
1340 ===> org.kiama.example.RISC.RISCISA.Comment.toString(): String
4471 ===> org.kiama.example.lambda.AST.Sub.productElement(x$1: Int): Any
4935 ===> org.kiama.example.lambda2.Reduce.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12060 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3484 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.toString(): String
495 ===> org.kiama.example.RISC.RISCISA.MOV.toString(): String
935 ===> org.kiama.example.RISC.RISCISA.XOR.productIterator: Iterator[Any]
3775 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productArity: Int
11825 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5336 ===> org.kiama.example.oberon0.L0.c.CNamedType.toString(): String
5471 ===> org.kiama.example.oberon0.L0.c.CLeExp.productIterator: Iterator[Any]
12317 ===> org.kiama.util.Environments.Named.resetCount: Unit
8344 ===> org.kiama.example.obr.RISCTree.AddW.r: org.kiama.example.obr.RISCTree.Datum
6971 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productPrefix: String
4000 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.envir: SECDBase.this.Environment
0 ===> scala.util.parsing.combinator.Parsers.Parser.<init>(): Parsers.this.Parser[T]
11936 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2608 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.e: org.kiama.example.iswim.compiler.Syntax.Expr
1557 ===> org.kiama.example.dataflow.Optimise.run(t: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.Stm
9246 ===> org.kiama.example.obr.SymbolTable.Constant.productPrefix: String
10620 ===> org.kiama.example.til.AST.Add.productPrefix: String
7495 ===> org.kiama.example.obr.ObrTree.BoolVar.toString(): String
1755 ===> org.kiama.example.imperative.AST.Asgn.v: org.kiama.example.imperative.AST.Var
10834 ===> org.kiama.example.transform.AST.Num.toString(): String
10273 ===> org.kiama.example.prolog.Unifier.unify(t1: org.kiama.example.prolog.PrologTree.Term,t2: org.kiama.example.prolog.PrologTree.Term): Option[org.kiama.example.prolog.Subst]
2478 ===> org.kiama.example.iswim.compiler.Syntax.Return.toString(): String
2987 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.toString(): String
4512 ===> org.kiama.example.lambda2.AST.Num.<init>(n: Int): org.kiama.example.lambda2.AST.Num
6423 ===> org.kiama.example.oberon0.L3.NameAnalyser.checkNonLocalVarAccess(u: org.kiama.example.oberon0.base.source.IdnUse): Unit
9740 ===> org.kiama.example.picojava.AbstractSyntax.Use.productElement(x$1: Int): Any
2378 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LetRec
1127 ===> org.kiama.example.RISC.RISCISA.WRH.<init>(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRH
4596 ===> org.kiama.example.lambda2.AST.Opn.productIterator: Iterator[Any]
3450 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.bdy: org.kiama.example.iswim.secd.SECDBase.CodeSegment
8112 ===> org.kiama.example.obr.ObrTree.SlashExp.right: org.kiama.example.obr.ObrTree.Expression
4276 ===> org.kiama.example.json.JSONTree.JArray.toString(): String
10910 ===> org.kiama.machine.Machine.updates_$eq(x$1: List[Machine.this.Update]): Unit
7951 ===> org.kiama.example.obr.ObrTree.IntExp.productArity: Int
4504 ===> org.kiama.example.lambda.Generator.genAppExp(sz: Int): org.scalacheck.Gen[org.kiama.example.lambda.AST.App]
6805 ===> org.kiama.example.oberon0.L4.SymbolTable.isNotRecord(e: SymbolTable.this.Entity): Boolean
0 ===> org.kiama.example.oberon0.L2.Desugarer.desugarFor: org.kiama.rewriting.Rewriter.Strategy
12293 ===> org.kiama.util.ReaderConsole.readLine(prompt: String): String
5220 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.decl: org.kiama.example.oberon0.L0.source.ConstDecl
2117 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.r: org.kiama.example.iswim.compiler.Syntax.Expr
6917 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productArity: Int
5694 ===> org.kiama.example.oberon0.L0.c.CNotExp.toString(): String
8915 ===> org.kiama.example.obr.SPARCTree.CmpeqW.l: org.kiama.example.obr.SPARCTree.Datum
872 ===> org.kiama.example.RISC.RISCISA.ANDI.productIterator: Iterator[Any]
6713 ===> org.kiama.example.oberon0.L3.source.Call.params: List[org.kiama.example.oberon0.L0.source.Expression]
11547 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
11739 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> scala.util.parsing.combinator.Parsers.repsep[T](p: => Parsers.this.Parser[T],q: => Parsers.this.Parser[Any]): Parsers.this.Parser[List[T]]
3490 ===> org.kiama.example.iswim.secd.SECDBase.App.productPrefix: String
1756 ===> org.kiama.example.imperative.AST.Asgn.e: org.kiama.example.imperative.AST.Exp
12600 ===> org.kiama.util.REPLBase.ignoreWhitespaceLines: Boolean
11608 ===> org.kiama.rewriting.Rewriter.$anon.congruenceProduct(p: Product,ss: Rewriter.this.Strategy*): Option[Rewriter.this.Term]
0 ===> org.kiama.example.picojava.Parser.stmt: Parser.this.PackratParser[org.kiama.example.picojava.AbstractSyntax.Stmt]
10025 ===> org.kiama.example.prolog.PrologTree.Fact.productArity: Int
6443 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.ident: String
5730 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productElement(x$1: Int): Any
1806 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5142 ===> org.kiama.example.lambda3.AST.SwapQuery.productElement(x$1: Int): Any
6531 ===> org.kiama.example.oberon0.L3.c.CVoidType.productElement(x$1: Int): Any
2973 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.d: ExceptionHandler.this.Dump
6680 ===> org.kiama.example.oberon0.L3.source.ValMode.productElement(x$1: Int): Any
5688 ===> org.kiama.example.oberon0.L0.c.CNotExp.productPrefix: String
10810 ===> org.kiama.example.transform.AST.BinExp.productPrefix: String
7036 ===> org.kiama.example.oberon0.base.TranslatingDriver.printcastFlagDefault: Boolean
6812 ===> org.kiama.example.oberon0.L4.TypeAnalyser.deftypeDef: org.kiama.example.oberon0.L0.source.TypeDef => TypeAnalyser.this.Type
1580 ===> org.kiama.example.imperative.AST.Num.productElement(x$1: Int): Any
8269 ===> org.kiama.example.obr.RISCTree.LabelDef.toString(): String
3044 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productPrefix: String
0 ===> java.io.BufferedReader.<init>(x$1: java.io.Reader): java.io.BufferedReader
2434 ===> org.kiama.example.iswim.compiler.Syntax.Import.productArity: Int
6602 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productArity: Int
1080 ===> org.kiama.example.RISC.RISCISA.PSH.productArity: Int
5226 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productArity: Int
4499 ===> org.kiama.example.lambda.Generator.genIdn: org.scalacheck.Gen[String]
10621 ===> org.kiama.example.til.AST.Add.productArity: Int
990 ===> org.kiama.example.RISC.RISCISA.LDB.toString(): String
666 ===> org.kiama.example.RISC.RISCISA.MUL.productArity: Int
1621 ===> org.kiama.example.imperative.AST.Neg.productArity: Int
2006 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.i: Int
4325 ===> org.kiama.example.json.JSONTree.JTrue.toString(): String
7809 ===> org.kiama.example.obr.ObrTree.Catch.toString(): String
3320 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productElement(x$1: Int): Any
3821 ===> org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue.toString(): String
656 ===> org.kiama.example.RISC.RISCISA.MUL.a: org.kiama.example.RISC.RISCISA.RegNo
1599 ===> org.kiama.example.imperative.AST.Var.productPrefix: String
414 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productArity: Int
2546 ===> org.kiama.example.iswim.compiler.Syntax.Block.productArity: Int
2218 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productArity: Int
8641 ===> org.kiama.example.obr.RISCTree.Indexed.offset: org.kiama.example.obr.RISCTree.Datum
10419 ===> org.kiama.example.til.AST.IfElse.productArity: Int
11702 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6183 ===> org.kiama.example.oberon0.L1.c.CIfStatement.toString(): String
2768 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productIterator: Iterator[Any]
187 ===> org.kiama.attribution.AttributionTests.Unused.productIterator: Iterator[Any]
6433 ===> org.kiama.example.oberon0.L3.NameAnalyser.envoutl(out: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
4964 ===> org.kiama.example.lambda3.AST.Num.<init>(i: Int): org.kiama.example.lambda3.AST.Num
5780 ===> org.kiama.example.oberon0.L0.source.NamedType.idnuse: org.kiama.example.oberon0.base.source.IdnUse
4069 ===> org.kiama.example.iswim.secd.SECDBase.execSrcPos_$eq(x$1: scala.util.parsing.input.Position): Unit
7733 ===> org.kiama.example.obr.ObrTree.WhileStmt.productElement(x$1: Int): Any
10957 ===> org.kiama.output.NonAssoc.productIterator: Iterator[Any]
10038 ===> org.kiama.example.prolog.PrologTree.Rule.bdy: List[org.kiama.example.prolog.PrologTree.Term]
5490 ===> org.kiama.example.oberon0.L0.c.CGtExp.productElement(x$1: Int): Any
8429 ===> org.kiama.example.obr.RISCTree.CmpgtW.productElement(x$1: Int): Any
7547 ===> org.kiama.example.obr.ObrTree.EnumVar.productArity: Int
12410 ===> org.kiama.util.Messaging.messagecount: Int
0 ===> org.kiama.example.iswim.compiler.Parser.lambdaexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
709 ===> org.kiama.example.RISC.RISCISA.DIV.productElement(x$1: Int): Any
6422 ===> org.kiama.example.oberon0.L3.NameAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
0 ===> org.kiama.example.lambda.Parser.variable: Parser.this.Parser[org.kiama.example.lambda.AST.Var]
1905 ===> org.kiama.example.imperative.Generator.genStmt(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Stmt]
10824 ===> org.kiama.example.transform.AST.Num.value: Int
10900 ===> org.kiama.machine.Machine.ScalarUpdate.perform: Unit
9783 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.toString(): String
11593 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
1276 ===> org.kiama.example.RISC.RISCISA.BSR.label: Int
0 ===> java.lang.Throwable.getMessage(): String
2677 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.toString(): String
6626 ===> org.kiama.example.oberon0.L3.c.CDerefExp.toString(): String
7330 ===> org.kiama.example.oberon0.base.source.IdnDef.productPrefix: String
2220 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productIterator: Iterator[Any]
10080 ===> org.kiama.example.prolog.PrologTree.Integer.productArity: Int
8765 ===> org.kiama.example.obr.SPARCTree.Bne.toString(): String
7648 ===> org.kiama.example.obr.ObrTree.ForStmt.min: org.kiama.example.obr.ObrTree.Expression
2904 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.toString(): String
2405 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.toString(): String
1097 ===> org.kiama.example.RISC.RISCISA.RD.productArity: Int
8224 ===> org.kiama.example.obr.RISCTree.Bne.dest: org.kiama.example.obr.RISCTree.Label
4707 ===> org.kiama.example.lambda2.AST.NoType.productIterator: Iterator[Any]
8079 ===> org.kiama.example.obr.ObrTree.OrExp.productPrefix: String
1376 ===> org.kiama.example.dataflow.DataflowAST.Assign.productIterator: Iterator[Any]
10503 ===> org.kiama.example.til.AST.Write.toString(): String
7583 ===> org.kiama.example.obr.ObrTree.IntConst.productArity: Int
3572 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productArity: Int
12440 ===> org.kiama.util.WhitespaceParser.parseWhitespace(in: WhitespaceParser.this.Input): WhitespaceParser.this.ParseResult[Any]
4506 ===> org.kiama.example.lambda.Generator.arbExp: org.scalacheck.Arbitrary[org.kiama.example.lambda.AST.Exp]
0 ===> org.kiama.example.imperative.Parser.integer: Parser.this.Parser[org.kiama.example.imperative.AST.Num]
7326 ===> org.kiama.example.oberon0.base.source.IdnDef.ident: String
7819 ===> org.kiama.example.obr.ObrTree.AndExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AndExp
3266 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productIterator: Iterator[Any]
3166 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.toString(): String
11481 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productPrefix: String
3160 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productIterator: Iterator[Any]
0 ===> org.kiama.example.obr.SyntaxAnalysis.statement: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.Statement]
11660 ===> org.kiama.rewriting.Rewriter.reduce(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
6802 ===> org.kiama.example.oberon0.L4.SymbolTable.isArray(e: SymbolTable.this.Entity): Boolean
4618 ===> org.kiama.example.lambda2.AST.Let.productElement(x$1: Int): Any
12106 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7824 ===> org.kiama.example.obr.ObrTree.AndExp.productArity: Int
7584 ===> org.kiama.example.obr.ObrTree.IntConst.productElement(x$1: Int): Any
10566 ===> org.kiama.example.til.AST.Str.productElement(x$1: Int): Any
8266 ===> org.kiama.example.obr.RISCTree.LabelDef.productIterator: Iterator[Any]
8238 ===> org.kiama.example.obr.RISCTree.Bne.toString(): String
4083 ===> org.kiama.example.iswim.secd.StackOps.Pop.toString(): String
2454 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productElement(x$1: Int): Any
8905 ===> org.kiama.example.obr.SPARCTree.Cond.productIterator: Iterator[Any]
8392 ===> org.kiama.example.obr.RISCTree.CmpeqW.productIterator: Iterator[Any]
2488 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productPrefix: String
10588 ===> org.kiama.example.til.AST.Mul.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.term4: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
466 ===> org.kiama.example.RISC.RISC.<init>(code: org.kiama.example.RISC.RISCISA.Code,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): org.kiama.example.RISC.RISC
8358 ===> org.kiama.example.obr.RISCTree.AddW.toString(): String
6360 ===> org.kiama.example.oberon0.L2.source.Case.toString(): String
5590 ===> org.kiama.example.oberon0.L0.c.CMulExp.productElement(x$1: Int): Any
11367 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.toString(): String
1950 ===> org.kiama.example.iswim.compiler.SemanticAnalysis.isSemanticallyCorrect: org.kiama.example.iswim.compiler.Syntax.Iswim => Boolean
1266 ===> org.kiama.example.RISC.RISCISA.BR.productElement(x$1: Int): Any
1845 ===> org.kiama.example.imperative.ASTNonCase.Var.arity: Int
9809 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productArity: Int
604 ===> org.kiama.example.RISC.RISCISA.ADDI.productElement(x$1: Int): Any
1332 ===> org.kiama.example.RISC.RISCISA.Comment.productPrefix: String
1788 ===> org.kiama.example.imperative.AST.While.toString(): String
9734 ===> org.kiama.example.picojava.AbstractSyntax.Use.Name: String
925 ===> org.kiama.example.RISC.RISCISA.XOR.c: org.kiama.example.RISC.RISCISA.RegNo
8460 ===> org.kiama.example.obr.RISCTree.DivW.r: org.kiama.example.obr.RISCTree.Datum
6440 ===> org.kiama.example.oberon0.L3.Parser.statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
2849 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productPrefix: String
0 ===> org.kiama.example.oberon0.L0.TypeAnalyser.typebasetype: TypeAnalyser.this.Type => TypeAnalyser.this.Type
6053 ===> org.kiama.example.oberon0.L0.source.ModExp.toString(): String
12615 ===> org.kiama.util.GeneratingREPLBase.process(t: T): Unit
12261 ===> org.kiama.util.CompilerBase.driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
3211 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.toString(): String
2359 ===> org.kiama.example.iswim.compiler.Syntax.Let.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Let
3333 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productPrefix: String
0 ===> org.kiama.example.lambda2.ParEagerSubst.f: org.kiama.rewriting.Rewriter.Strategy
11380 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productIterator: Iterator[Any]
5005 ===> org.kiama.example.lambda3.AST.App.productArity: Int
657 ===> org.kiama.example.RISC.RISCISA.MUL.b: org.kiama.example.RISC.RISCISA.RegNo
3622 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.toString(): String
7029 ===> org.kiama.example.oberon0.base.TransformingDriver.processast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): org.kiama.example.oberon0.base.source.ModuleDecl
6691 ===> org.kiama.example.oberon0.L3.source.FPSection.mode: org.kiama.example.oberon0.L3.source.Mode
8104 ===> org.kiama.example.obr.ObrTree.PlusExp.toString(): String
10763 ===> org.kiama.example.transform.AST.BinExpR.left: org.kiama.example.transform.AST.Exp
7424 ===> org.kiama.example.obr.TreeTestDriver.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9335 ===> org.kiama.example.obr.SymbolTable.ArrayType.productIterator: Iterator[Any]
4167 ===> org.kiama.example.iswim.secd.StringOps.StringValue.toString(): String
0 ===> org.kiama.example.oberon0.base.Parser.whitespaceParser: Parser.this.PackratParser[Any]
6245 ===> org.kiama.example.oberon0.L1.source.IfStatement.productIterator: Iterator[Any]
5614 ===> org.kiama.example.oberon0.L0.c.CDivExp.toString(): String
5812 ===> org.kiama.example.oberon0.L0.source.Assignment.toString(): String
1942 ===> org.kiama.example.iswim.compiler.Parser.name(msg: String): Parser.this.Parser[org.kiama.example.iswim.compiler.Syntax.Variable]
3038 ===> org.kiama.example.iswim.secd.HeapOps.Put.toString(): String
0 ===> org.kiama.example.lambda2.Parser.exp1: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Exp]
10100 ===> org.kiama.example.prolog.PrologTree.Atom.productIterator: Iterator[Any]
2793 ===> org.kiama.example.iswim.secd.BooleanOps.Test.ct: org.kiama.example.iswim.secd.SECDBase.CodeSegment
5707 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productElement(x$1: Int): Any
5839 ===> org.kiama.example.oberon0.L0.source.EqExp.toString(): String
479 ===> org.kiama.example.RISC.RISC.execute(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
0 ===> org.kiama.example.prolog.SyntaxAnalysis.varr: SyntaxAnalysis.this.Parser[String]
887 ===> org.kiama.example.RISC.RISCISA.OR.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.OR
1996 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productIterator: Iterator[Any]
4283 ===> org.kiama.example.json.JSONTree.JString.value: String
1554 ===> org.kiama.example.dataflow.Driver.process(ast: org.kiama.example.dataflow.DataflowAST.Stm,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
10291 ===> org.kiama.example.repmin.Fork.toString(): String
11945 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11074 ===> org.kiama.output.PrettyPrinterBase.braces(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
0 ===> scala.Tuple5.toString(): String
10398 ===> org.kiama.example.til.AST.IfThen.productArity: Int
5317 ===> org.kiama.example.oberon0.L0.SymbolTable.isInteger(e: SymbolTable.this.Type): Boolean
9367 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productArity: Int
8235 ===> org.kiama.example.obr.RISCTree.Bne.toString(): String
6790 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productPrefix: String
0 ===> scala.Some.x: A
11969 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11517 ===> org.kiama.rewriting.Rewritable.illegalArgs(desc: String,argtypes: String,args: Array[org.kiama.rewriting.Rewriter.Term]): Nothing
4987 ===> org.kiama.example.lambda3.AST.Var.productElement(x$1: Int): Any
9424 ===> org.kiama.example.obr.SymbolTable.ExnType.toString(): String
8961 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productElement(x$1: Int): Any
6226 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.toString(): String
5350 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productArity: Int
6860 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productElement(x$1: Int): Any
3217 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productPrefix: String
899 ===> org.kiama.example.RISC.RISCISA.OR.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.OR
11544 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
12505 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n4: ParserUtilitiesTests.this.Node
10052 ===> org.kiama.example.prolog.PrologTree.Rule.toString(): String
8946 ===> org.kiama.example.obr.SPARCTree.CmpneW.toString(): String
0 ===> org.kiama.example.lambda2.ParLazy.subsVar: org.kiama.rewriting.Rewriter.Strategy
3556 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productElement(x$1: Int): Any
8056 ===> org.kiama.example.obr.ObrTree.NotExp.exp: org.kiama.example.obr.ObrTree.Expression
1868 ===> org.kiama.example.imperative.ASTNonCase.Mul.toString(): String
1373 ===> org.kiama.example.dataflow.DataflowAST.Assign.productPrefix: String
10218 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productIterator: Iterator[Any]
12334 ===> org.kiama.util.Environments.MultipleEntity.toString(): String
7666 ===> org.kiama.example.obr.ObrTree.ForStmt.toString(): String
9228 ===> org.kiama.example.obr.SymbolTable.Variable.productIterator: Iterator[Any]
2002 ===> org.kiama.example.iswim.compiler.Syntax.Variable.toString(): String
0 ===> java.io.FileReader.<init>(x$1: String): java.io.FileReader
5482 ===> org.kiama.example.oberon0.L0.c.CGtExp.right: org.kiama.example.oberon0.base.c.CExpression
8813 ===> org.kiama.example.obr.SPARCTree.Read.productIterator: Iterator[Any]
10902 ===> org.kiama.machine.Machine.ScalarUpdate.value: Any
10642 ===> org.kiama.example.til.AST.Sub.productIterator: Iterator[Any]
7004 ===> org.kiama.example.oberon0.base.Driver.input: Option[String]
4411 ===> org.kiama.example.lambda.AST.Var.productPrefix: String
3235 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productIterator: Iterator[Any]
5409 ===> org.kiama.example.oberon0.L0.c.CEqExp.productArity: Int
0 ===> org.kiama.example.til.TIL1_1.declaration: TIL1_1.this.Parser[org.kiama.example.til.AST.Decl]
3697 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productElement(x$1: Int): Any
1316 ===> org.kiama.example.RISC.RISCISA.Target.productArity: Int
0 ===> org.kiama.example.oberon0.L0.Parser.super$statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
1295 ===> org.kiama.example.RISC.RISCISA.RET.toString(): String
12305 ===> org.kiama.util.StringEmitter.emitln(any: Any): Unit
7695 ===> org.kiama.example.obr.ObrTree.LoopStmt.productPrefix: String
9140 ===> org.kiama.example.obr.SPARCTree.Local.productPrefix: String
7671 ===> org.kiama.example.obr.ObrTree.IfStmt.thens: List[org.kiama.example.obr.ObrTree.Statement]
0 ===> org.kiama.example.oberon0.L4.TypeAnalyser.super$deftypeDef: org.kiama.example.oberon0.L0.source.TypeDef => TypeAnalyser.this.Type
9378 ===> org.kiama.example.obr.SymbolTable.EnumType.ident: org.kiama.example.obr.ObrTree.Identifier
0 ===> org.kiama.example.oberon0.L0.Parser.idndeflist: Parser.this.Parser[List[org.kiama.example.oberon0.base.source.IdnDef]]
480 ===> org.kiama.example.RISC.RISC.arithmetic(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
5948 ===> org.kiama.example.oberon0.L0.source.AddExp.productPrefix: String
3990 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productElement(x$1: Int): Any
11075 ===> org.kiama.output.PrettyPrinterBase.parens(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
11487 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.toString(): String
11526 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
8088 ===> org.kiama.example.obr.ObrTree.OrExp.toString(): String
10496 ===> org.kiama.example.til.AST.Write.productElement(x$1: Int): Any
4968 ===> org.kiama.example.lambda3.AST.Num.productPrefix: String
2596 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productElement(x$1: Int): Any
10870 ===> org.kiama.machine.Machine.State.<init>(sname: String): Machine.this.State[T]
5915 ===> org.kiama.example.oberon0.L0.source.GtExp.toString(): String
9707 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.toString(): String
1130 ===> org.kiama.example.RISC.RISCISA.WRH.productPrefix: String
11840 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11464 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productElement(x$1: Int): Any
4928 ===> org.kiama.example.lambda2.PrettyPrinter.showtypedecl(t: org.kiama.example.lambda2.AST.Type): org.kiama.example.lambda2.PrettyPrinter.Doc
10265 ===> org.kiama.example.prolog.Subst.$anon.<init>(): org.kiama.example.prolog.Subst{}
0 ===> org.kiama.example.oberon0.base.TransformingDriver.super$resetflags(): Unit
9653 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.Body: org.kiama.example.picojava.AbstractSyntax.Block
3563 ===> org.kiama.example.iswim.secd.SECDBase.Exit.toString(): String
11291 ===> org.kiama.rewriting.NominalAST.Bind.toString(): String
2325 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productPrefix: String
0 ===> org.kiama.example.prolog.SyntaxAnalysis.parser: SyntaxAnalysis.this.PackratParser[org.kiama.example.prolog.PrologTree.Program]
3099 ===> org.kiama.example.iswim.secd.IOOps.Read.productArity: Int
7698 ===> org.kiama.example.obr.ObrTree.LoopStmt.productIterator: Iterator[Any]
10495 ===> org.kiama.example.til.AST.Write.productArity: Int
7409 ===> org.kiama.example.obr.Driver.checkFlag(arg: String): Boolean
12093 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2328 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productIterator: Iterator[Any]
70 ===> org.kiama.attribution.Attribution.CachedAttribute.<init>(f: T => U): Attribution.this.CachedAttribute[T,U]
1382 ===> org.kiama.example.dataflow.DataflowAST.Assign.toString(): String
3364 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productArity: Int
10907 ===> org.kiama.machine.Machine.ParamUpdate.value: Any
1935 ===> org.kiama.example.iswim.compiler.Parser.Pos.toString(): String
7591 ===> org.kiama.example.obr.ObrTree.IntConst.toString(): String
3857 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productElement(x$1: Int): Any
5868 ===> org.kiama.example.oberon0.L0.source.LtExp.productPrefix: String
5663 ===> org.kiama.example.oberon0.L0.c.CNegExp.exp: org.kiama.example.oberon0.base.c.CExpression
2638 ===> org.kiama.example.iswim.compiler.Syntax.Match.toString(): String
1675 ===> org.kiama.example.imperative.AST.Sub.toString(): String
8599 ===> org.kiama.example.obr.RISCTree.SubW.toString(): String
0 ===> org.kiama.example.picojava.Parser.parser: Parser.this.PackratParser[org.kiama.example.picojava.AbstractSyntax.Program]
12395 ===> org.kiama.util.Messaging.Record.productArity: Int
1900 ===> org.kiama.example.imperative.Generator.genAsgn(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Asgn]
12014 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5012 ===> org.kiama.example.lambda3.AST.App.toString(): String
9085 ===> org.kiama.example.obr.SPARCTree.Not.productArity: Int
10438 ===> org.kiama.example.til.AST.While.productArity: Int
5470 ===> org.kiama.example.oberon0.L0.c.CLeExp.productElement(x$1: Int): Any
5155 ===> org.kiama.example.lambda3.Evaluator.cbn_eval(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.Exp
3764 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.hashCode(): Int
10973 ===> org.kiama.output.Postfix.productPrefix: String
7213 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productArity: Int
0 ===> org.kiama.example.til.TIL1_1.while_statement: TIL1_1.this.Parser[org.kiama.example.til.AST.While]
7473 ===> org.kiama.example.obr.ObrTree.IntParam.productArity: Int
8553 ===> org.kiama.example.obr.RISCTree.Not.productArity: Int
2223 ===> org.kiama.example.iswim.compiler.Syntax.Greater.toString(): String
9432 ===> org.kiama.example.obr.SymbolTable.UnknownType.productArity: Int
770 ===> org.kiama.example.RISC.RISCISA.MODI.productPrefix: String
6766 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.fields: List[SymbolTable.this.Field]
2402 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productIterator: Iterator[Any]
5888 ===> org.kiama.example.oberon0.L0.source.LeExp.productArity: Int
7431 ===> org.kiama.example.obr.ObrTree.ObrInt.<init>(idn1: org.kiama.example.obr.ObrTree.Identifier,decls: List[org.kiama.example.obr.ObrTree.Declaration],stmts: List[org.kiama.example.obr.ObrTree.Statement],idn2: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.ObrInt
0 ===> org.kiama.example.iswim.compiler.Parser.variable: Parser.this.Parser[org.kiama.example.iswim.compiler.Syntax.Variable]
9403 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productIterator: Iterator[Any]
2510 ===> org.kiama.example.iswim.compiler.Syntax.If.productArity: Int
170 ===> org.kiama.attribution.AttributionTests.Leaf.productIterator: Iterator[Any]
0 ===> org.kiama.example.obr.SyntaxAnalysis.conditional: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.IfStmt]
8030 ===> org.kiama.example.obr.ObrTree.NegExp.toString(): String
8094 ===> org.kiama.example.obr.ObrTree.PlusExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.PlusExp
4030 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productArity: Int
850 ===> org.kiama.example.RISC.RISCISA.AND.productElement(x$1: Int): Any
468 ===> org.kiama.example.RISC.RISC.R: RISC.this.ParamState[org.kiama.example.RISC.RISCISA.RegNo,Int]
4609 ===> org.kiama.example.lambda2.AST.Let.e2: org.kiama.example.lambda2.AST.Exp
0 ===> org.kiama.example.oberon0.L2.NameAnalyser.super$rootconstexpDef: org.kiama.example.oberon0.L0.source.Expression => Boolean
10451 ===> org.kiama.example.til.AST.For.f: org.kiama.example.til.AST.Exp
1051 ===> org.kiama.example.RISC.RISCISA.STB.im: org.kiama.example.RISC.RISCISA.Imm
5609 ===> org.kiama.example.oberon0.L0.c.CDivExp.productArity: Int
10440 ===> org.kiama.example.til.AST.While.productIterator: Iterator[Any]
778 ===> org.kiama.example.RISC.RISCISA.MODI.toString(): String
11142 ===> org.kiama.output.PrettyPrinterTests.Val.toString(): String
8007 ===> org.kiama.example.obr.ObrTree.ModExp.productPrefix: String
0 ===> org.kiama.example.imperative.Parser.factor: Parser.this.PackratParser[org.kiama.example.imperative.AST.Exp]
6323 ===> org.kiama.example.oberon0.L2.source.ForStatement.toString(): String
6929 ===> org.kiama.example.oberon0.L4.source.FieldList.idndefs: List[String]
0 ===> org.kiama.example.oberon0.L4.c.PrettyPrinter.super$toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
3348 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productPrefix: String
0 ===> org.kiama.example.json.SyntaxAnalysis.jobject: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JObject]
4774 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1449 ===> org.kiama.example.dataflow.DataflowAST.Return.productElement(x$1: Int): Any
2833 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productIterator: Iterator[Any]
11218 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.toString(): String
626 ===> org.kiama.example.RISC.RISCISA.SUB.productIterator: Iterator[Any]
6745 ===> org.kiama.example.oberon0.L4.Parser.keywordStrings: List[String]
4419 ===> org.kiama.example.lambda.AST.Var.toString(): String
4505 ===> org.kiama.example.lambda.Generator.genExp(sz: Int): org.scalacheck.Gen[org.kiama.example.lambda.AST.Exp]
3249 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productElement(x$1: Int): Any
3113 ===> org.kiama.example.iswim.secd.IOOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
3098 ===> org.kiama.example.iswim.secd.IOOps.Read.productPrefix: String
3548 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.toString(): String
0 ===> jline.ConsoleReader.setBellEnabled(x$1: Boolean): Unit
579 ===> org.kiama.example.RISC.RISCISA.ADD.toString(): String
8196 ===> org.kiama.example.obr.RISCTree.RISCProg.toString(): String
6918 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productElement(x$1: Int): Any
6341 ===> org.kiama.example.oberon0.L2.source.CaseStatement.toString(): String
9417 ===> org.kiama.example.obr.SymbolTable.ExnType.productArity: Int
8278 ===> org.kiama.example.obr.RISCTree.Ret.productPrefix: String
583 ===> org.kiama.example.RISC.RISCISA.ADD.productElement(x$1: Int): Any
10213 ===> org.kiama.example.prolog.SymbolTable.IntegerType.toString(): String
11810 ===> org.kiama.rewriting.RewriterTests.Same.toString(): String
8593 ===> org.kiama.example.obr.RISCTree.SubW.productIterator: Iterator[Any]
8904 ===> org.kiama.example.obr.SPARCTree.Cond.productElement(x$1: Int): Any
4638 ===> org.kiama.example.lambda2.AST.Letp.productIterator: Iterator[Any]
0 ===> org.scalacheck.Gen.Params.productElement(x$1: Int): Any
4152 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productArity: Int
12468 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productPrefix: String
4538 ===> org.kiama.example.lambda2.AST.Var.toString(): String
11963 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
662 ===> org.kiama.example.RISC.RISCISA.MUL.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MUL
742 ===> org.kiama.example.RISC.RISCISA.MOD.c: org.kiama.example.RISC.RISCISA.RegNo
173 ===> org.kiama.attribution.AttributionTests.Leaf.toString(): String
10725 ===> org.kiama.example.transform.AST.Program.vars: List[org.kiama.example.transform.AST.VarDecl]
7663 ===> org.kiama.example.obr.ObrTree.ForStmt.toString(): String
10848 ===> org.kiama.example.transform.AST.Var.productIterator: Iterator[Any]
3633 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productElement(x$1: Int): Any
7278 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productElement(x$1: Int): Any
6948 ===> org.kiama.example.oberon0.L4.source.FieldExp.base: org.kiama.example.oberon0.L0.source.Expression
6578 ===> org.kiama.example.oberon0.L3.c.CStrExp.s: String
1318 ===> org.kiama.example.RISC.RISCISA.Target.productIterator: Iterator[Any]
6998 ===> org.kiama.example.oberon0.base.Driver.printastFlag: Boolean
11626 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
2173 ===> org.kiama.example.iswim.compiler.Syntax.Less.l: org.kiama.example.iswim.compiler.Syntax.Expr
11333 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
0 ===> org.kiama.example.lambda2.Par.subsNum: org.kiama.rewriting.Rewriter.Strategy
7426 ===> org.kiama.example.obr.ObrTree.ObrNode.<init>(): org.kiama.example.obr.ObrTree.ObrNode
0 ===> org.kiama.example.lambda2.Reduce.beta: org.kiama.rewriting.Rewriter.Strategy
108 ===> org.kiama.attribution.Attribution.paramAttr[A, T <: AnyRef, U](f: A => (T => U)): Attribution.this.CachedParamAttribute[A,T,U]
5315 ===> org.kiama.example.oberon0.L0.SymbolTable.isType(e: SymbolTable.this.Entity): Boolean
3525 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productIterator: Iterator[Any]
5689 ===> org.kiama.example.oberon0.L0.c.CNotExp.productArity: Int
8812 ===> org.kiama.example.obr.SPARCTree.Read.productElement(x$1: Int): Any
10716 ===> org.kiama.example.til.TIL2_3.transform(ast: org.kiama.example.til.AST.Program): org.kiama.example.til.AST.Program
10591 ===> org.kiama.example.til.AST.Mul.toString(): String
5129 ===> org.kiama.example.lambda3.AST.SubstQuery.toString(): String
8519 ===> org.kiama.example.obr.RISCTree.MulW.productArity: Int
4943 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5874 ===> org.kiama.example.oberon0.L0.source.LtExp.toString(): String
203 ===> org.kiama.attribution.AttributionTests.EitherTree.productElement(x$1: Int): Any
7000 ===> org.kiama.example.oberon0.base.Driver.pprintastFlag: Boolean
7270 ===> org.kiama.example.oberon0.base.source.ModuleDecl.idnuse: org.kiama.example.oberon0.base.source.IdnUse
11377 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productPrefix: String
1246 ===> org.kiama.example.RISC.RISCISA.BGT.toString(): String
10116 ===> org.kiama.example.prolog.PrologTree.Pred.productPrefix: String
9964 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productArity: Int
1202 ===> org.kiama.example.RISC.RISCISA.BLT.productElement(x$1: Int): Any
6880 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productPrefix: String
8612 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productIterator: Iterator[Any]
3747 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L0.Parser.typedef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.TypeDef]
6180 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productIterator: Iterator[Any]
12260 ===> org.kiama.util.CompilerBase.encoding: String
4802 ===> org.kiama.example.lambda2.Evaluators.mechanism: String
5449 ===> org.kiama.example.oberon0.L0.c.CLtExp.productArity: Int
0 ===> scala.util.parsing.combinator.RegexParsers.literal(s: String): RegexParsers.this.Parser[String]
0 ===> org.kiama.example.dataflow.Parser.returnStm: Parser.this.Parser[org.kiama.example.dataflow.DataflowAST.Return]
4654 ===> org.kiama.example.lambda2.AST.Bind.productPrefix: String
982 ===> org.kiama.example.RISC.RISCISA.LDW.toString(): String
12005 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5140 ===> org.kiama.example.lambda3.AST.SwapQuery.productPrefix: String
8063 ===> org.kiama.example.obr.ObrTree.NotExp.productIterator: Iterator[Any]
1299 ===> org.kiama.example.RISC.RISCISA.RET.productElement(x$1: Int): Any
98 ===> org.kiama.attribution.Attribution.attr[T <: AnyRef, U](f: T => U): Attribution.this.CachedAttribute[T,U]
11562 ===> org.kiama.rewriting.Rewriter.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
3086 ===> org.kiama.example.iswim.secd.IOOps.Write.productIterator: Iterator[Any]
828 ===> org.kiama.example.RISC.RISCISA.CHKI.productArity: Int
275 ===> org.kiama.attribution.AttributionTests.MapTree.toString(): String
391 ===> org.kiama.attribution.DynamicAttributionTests.Pair.right: DynamicAttributionTests.this.Tree
3900 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productPrefix: String
6428 ===> org.kiama.example.oberon0.L3.NameAnalyser.envinl(in: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
10658 ===> org.kiama.example.til.AST.Eq.productPrefix: String
224 ===> org.kiama.attribution.AttributionTests.ListTree.toString(): String
6011 ===> org.kiama.example.oberon0.L0.source.MulExp.productElement(x$1: Int): Any
526 ===> org.kiama.example.RISC.RISCISA.MOVI.toString(): String
4532 ===> org.kiama.example.lambda2.AST.Var.productPrefix: String
1893 ===> org.kiama.example.imperative.Generator.genDiv(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Div]
11536 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
6190 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.cond: org.kiama.example.oberon0.base.c.CExpression
11060 ===> org.kiama.output.PrettyPrinterBase.ssep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
2435 ===> org.kiama.example.iswim.compiler.Syntax.Import.productElement(x$1: Int): Any
5264 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productElement(x$1: Int): Any
0 ===> org.kiama.example.oberon0.L3.Parser.super$keywordStrings: List[String]
3119 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productPrefix: String
11575 ===> org.kiama.rewriting.Rewriter.constrcache: scala.collection.mutable.WeakHashMap[Class[_],java.lang.reflect.Constructor[_]]
11942 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> scala.util.parsing.combinator.PackratParsers.parser2packrat[T](p: => PackratParsers.this.Parser[T]): PackratParsers.this.PackratParser[T]
231 ===> org.kiama.attribution.AttributionTests.SetTree.s: Set[AttributionTests.this.Tree]
6244 ===> org.kiama.example.oberon0.L1.source.IfStatement.productElement(x$1: Int): Any
4893 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9087 ===> org.kiama.example.obr.SPARCTree.Not.productIterator: Iterator[Any]
4056 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toDoc: SECDBase.this.Doc
10854 ===> org.kiama.example.transform.AST.Var.toString(): String
2475 ===> org.kiama.example.iswim.compiler.Syntax.Return.toString(): String
9659 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productPrefix: String
3365 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productElement(x$1: Int): Any
3128 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.toString(): String
8754 ===> org.kiama.example.obr.SPARCTree.Bne.dest: org.kiama.example.obr.SPARCTree.Label
8408 ===> org.kiama.example.obr.RISCTree.CmpneW.productPrefix: String
12439 ===> org.kiama.util.WhitespaceParser.parsingWhitespace_$eq(x$1: Boolean): Unit
521 ===> org.kiama.example.RISC.RISCISA.MOVI.productIterator: Iterator[Any]
7528 ===> org.kiama.example.obr.ObrTree.RecordVar.productArity: Int
11132 ===> org.kiama.output.PrettyPrinterTests.Val.i: Int
1280 ===> org.kiama.example.RISC.RISCISA.BSR.productPrefix: String
8100 ===> org.kiama.example.obr.ObrTree.PlusExp.productElement(x$1: Int): Any
6944 ===> org.kiama.example.oberon0.L4.source.FieldList.toString(): String
2298 ===> org.kiama.example.iswim.compiler.Syntax.And.toString(): String
8521 ===> org.kiama.example.obr.RISCTree.MulW.productIterator: Iterator[Any]
12118 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12583 ===> org.kiama.util.Positioned.setStart(p: scala.util.parsing.input.Position): Positioned.this.type
3458 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productArity: Int
728 ===> org.kiama.example.RISC.RISCISA.DIVI.productPrefix: String
10004 ===> org.kiama.example.prolog.PrologTree.Program.productArity: Int
7198 ===> org.kiama.example.oberon0.base.c.CArrayType.productElement(x$1: Int): Any
10819 ===> org.kiama.example.transform.AST.BinExp.toString(): String
6481 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.mode: org.kiama.example.oberon0.L3.source.Mode
6972 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productArity: Int
3935 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.hashCode(): Int
0 ===> jline.ConsoleReader.<init>(): jline.ConsoleReader
932 ===> org.kiama.example.RISC.RISCISA.XOR.productPrefix: String
0 ===> org.kiama.example.json.SyntaxAnalysis.jnull: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JNull]
7585 ===> org.kiama.example.obr.ObrTree.IntConst.productIterator: Iterator[Any]
9202 ===> org.kiama.example.obr.SemanticAnalysis.envout: org.kiama.example.obr.ObrTree.ObrNode => org.kiama.example.obr.SymbolTable.Environment
1234 ===> org.kiama.example.RISC.RISCISA.BLE.productElement(x$1: Int): Any
2254 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productArity: Int
10667 ===> org.kiama.example.til.AST.Eq.toString(): String
8572 ===> org.kiama.example.obr.RISCTree.RemW.productArity: Int
8777 ===> org.kiama.example.obr.SPARCTree.Jmp.productArity: Int
3950 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.hashCode(): Int
10019 ===> org.kiama.example.prolog.PrologTree.Fact.hd: org.kiama.example.prolog.PrologTree.Term
10750 ===> org.kiama.example.transform.AST.VarDecl.productArity: Int
9992 ===> org.kiama.example.prolog.Main.processprogram(tree: org.kiama.example.prolog.PrologTree.Program): Boolean
3050 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.toString(): String
11999 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8911 ===> org.kiama.example.obr.SPARCTree.Cond.toString(): String
8436 ===> org.kiama.example.obr.RISCTree.CmpgtW.toString(): String
9794 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productIterator: Iterator[Any]
8923 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productElement(x$1: Int): Any
5120 ===> org.kiama.example.lambda3.AST.SubstQuery.productPrefix: String
0 ===> org.kiama.example.lambda.Parser.start: Parser.this.PackratParser[org.kiama.example.lambda.AST.Exp]
5121 ===> org.kiama.example.lambda3.AST.SubstQuery.productArity: Int
1601 ===> org.kiama.example.imperative.AST.Var.productElement(x$1: Int): Any
6374 ===> org.kiama.example.oberon0.L2.source.ValCond.productElement(x$1: Int): Any
5489 ===> org.kiama.example.oberon0.L0.c.CGtExp.productArity: Int
1183 ===> org.kiama.example.RISC.RISCISA.BNE.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
4692 ===> org.kiama.example.lambda2.AST.FunType.productIterator: Iterator[Any]
4304 ===> org.kiama.example.json.JSONTree.JNumber.productPrefix: String
11531 ===> org.kiama.rewriting.Rewriter.PlusStrategy.<init>(p: => Rewriter.this.Strategy,q: => Rewriter.this.Strategy): Rewriter.this.PlusStrategy
180 ===> org.kiama.attribution.AttributionTests.Unused.b: Boolean
632 ===> org.kiama.example.RISC.RISCISA.SUB.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.SUB
2754 ===> org.kiama.example.iswim.driver.Main.processArgs(args: List[String]): Boolean
0 ===> org.kiama.example.picojava.Parser.class_decl: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.ClassDecl]
6042 ===> org.kiama.example.oberon0.L0.source.ModExp.right: org.kiama.example.oberon0.L0.source.Expression
8609 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productPrefix: String
9928 ===> org.kiama.example.prolog.Interpreter.TermGoal.productIterator: Iterator[Any]
8548 ===> org.kiama.example.obr.RISCTree.Not.d: org.kiama.example.obr.RISCTree.Datum
4423 ===> org.kiama.example.lambda.AST.Lam.x: org.kiama.example.lambda.AST.Idn
5562 ===> org.kiama.example.oberon0.L0.c.COrExp.right: org.kiama.example.oberon0.base.c.CExpression
5889 ===> org.kiama.example.oberon0.L0.source.LeExp.productElement(x$1: Int): Any
0 ===> org.kiama.example.oberon0.L4.TypeAnalyser.super$entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): TypeAnalyser.this.Entity
1666 ===> org.kiama.example.imperative.AST.Sub.productPrefix: String
10497 ===> org.kiama.example.til.AST.Write.productIterator: Iterator[Any]
2491 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productIterator: Iterator[Any]
10525 ===> org.kiama.example.til.AST.Var.i: org.kiama.example.til.AST.Id
4867 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
0 ===> org.kiama.example.iswim.secd.SECDBase.stack: SECDBase.this.State[SECDBase.this.Stack]{def toDoc: SECDBase.this.Doc}
11721 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3617 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productArity: Int
3779 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.hashCode(): Int
31 ===> org.kiama.attribution.Attributable.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4070 ===> org.kiama.example.iswim.secd.SECDBase.main(): Unit
5181 ===> org.kiama.example.oberon0.L0.NameAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
10521 ===> org.kiama.example.til.AST.Id.toString(): String
4800 ===> org.kiama.example.lambda2.Evaluators.evalmap: scala.collection.immutable.Map[String,org.kiama.example.lambda2.Reduce]
12521 ===> org.kiama.util.ParserUtilitiesTests.Tup4.toString(): String
761 ===> org.kiama.example.RISC.RISCISA.MODI.a: org.kiama.example.RISC.RISCISA.RegNo
7339 ===> org.kiama.example.oberon0.base.source.IdnDef.toString(): String
6130 ===> org.kiama.example.oberon0.L0.source.IntExp.toString(): String
3588 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productElement(x$1: Int): Any
12303 ===> org.kiama.util.StringEmitter.b: StringBuilder
7408 ===> org.kiama.example.obr.Driver.checkargs(args: Array[String],emitter: org.kiama.util.Emitter): Array[String]
10203 ===> org.kiama.example.prolog.SymbolTable.AtomType.productIterator: Iterator[Any]
6653 ===> org.kiama.example.oberon0.L3.source.ProcDecl.toString(): String
8499 ===> org.kiama.example.obr.RISCTree.LdW.productPrefix: String
4998 ===> org.kiama.example.lambda3.AST.App.e2: org.kiama.example.lambda3.AST.Exp
8249 ===> org.kiama.example.obr.RISCTree.Jmp.productIterator: Iterator[Any]
6023 ===> org.kiama.example.oberon0.L0.source.DivExp.right: org.kiama.example.oberon0.L0.source.Expression
624 ===> org.kiama.example.RISC.RISCISA.SUB.productArity: Int
69 ===> org.kiama.attribution.Attribution.resetMemo(): Unit
8965 ===> org.kiama.example.obr.SPARCTree.CmpgtW.toString(): String
6954 ===> org.kiama.example.oberon0.L4.source.FieldExp.productPrefix: String
3511 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.toString(): String
3890 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.hashCode(): Int
11867 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6621 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productArity: Int
11263 ===> org.kiama.rewriting.NominalAST.Name.productArity: Int
6546 ===> org.kiama.example.oberon0.L3.c.CAddrType.productPrefix: String
2369 ===> org.kiama.example.iswim.compiler.Syntax.Let.toString(): String
1260 ===> org.kiama.example.RISC.RISCISA.BR.label: Int
12546 ===> org.kiama.util.ParserUtilitiesTests.Tup5.toString(): String
2685 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productPrefix: String
4969 ===> org.kiama.example.lambda3.AST.Num.productArity: Int
10711 ===> org.kiama.example.til.TIL2_2.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.til.TIL1_1.if_statement: TIL1_1.this.Parser[org.kiama.example.til.AST.Stat with Product with Serializable]
3047 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productIterator: Iterator[Any]
1193 ===> org.kiama.example.RISC.RISCISA.BNE.apply(label: Int): org.kiama.example.RISC.RISCISA.BNE
5251 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.toString(): String
3983 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.hashCode(): Int
0 ===> org.kiama.example.iswim.compiler.Parser.matchclause: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.MatchClause]
1431 ===> org.kiama.example.dataflow.DataflowAST.Block.productArity: Int
3174 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productElement(x$1: Int): Any
1810 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10145 ===> org.kiama.example.prolog.SemanticAnalysis.checktype(n: org.kiama.example.prolog.PrologTree.Term): Unit
8729 ===> org.kiama.example.obr.SPARCTree.SPARC.toString(): String
0 ===> scala.util.parsing.combinator.Parsers.Success.productIterator: Iterator[Any]
5428 ===> org.kiama.example.oberon0.L0.c.CNeExp.productPrefix: String
439 ===> org.kiama.attribution.DynamicAttributionTests.Unused.toString(): String
8069 ===> org.kiama.example.obr.ObrTree.NotExp.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.mkrefexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
3893 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.toString(): String
11843 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8279 ===> org.kiama.example.obr.RISCTree.Ret.productArity: Int
7410 ===> org.kiama.example.obr.Driver.process(ast: org.kiama.example.obr.ObrTree.ObrInt,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
1187 ===> org.kiama.example.RISC.RISCISA.BNE.productIterator: Iterator[Any]
0 ===> org.kiama.example.lambda2.Parser.exp0: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Exp]
413 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productPrefix: String
12109 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5529 ===> org.kiama.example.oberon0.L0.c.CAddExp.productArity: Int
11025 ===> org.kiama.output.PrettyPrinterBase.anyToPrettyPrintable(a: Any): PrettyPrinterBase.this.PrettyPrintable
9437 ===> org.kiama.example.obr.SymbolTable.UnknownType.toString(): String
7564 ===> org.kiama.example.obr.ObrTree.EnumConst.productArity: Int
7183 ===> org.kiama.example.oberon0.base.c.CStrType.toString(): String
4402 ===> org.kiama.example.lambda.AST.Num.toString(): String
3436 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productElement(x$1: Int): Any
9314 ===> org.kiama.example.obr.SymbolTable.BoolType.productPrefix: String
8922 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productArity: Int
11044 ===> org.kiama.output.PrettyPrinterBase.list$default$5[T]: (Seq[PrettyPrinterBase.this.Doc], PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
801 ===> org.kiama.example.RISC.RISCISA.CMPI.b: org.kiama.example.RISC.RISCISA.RegNo
665 ===> org.kiama.example.RISC.RISCISA.MUL.productPrefix: String
6858 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productPrefix: String
7314 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productIterator: Iterator[Any]
145 ===> org.kiama.attribution.AttributionTests.Pair.right: AttributionTests.this.Tree
10373 ===> org.kiama.example.til.AST.Assign.e: org.kiama.example.til.AST.Exp
11121 ===> org.kiama.output.PrettyPrinter.linebreak: PrettyPrinter.this.Doc
3068 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productElement(x$1: Int): Any
12423 ===> org.kiama.util.ParserUtilities.parseResultToTuple2[A, B](p: ParserUtilities.this.Parser[ParserUtilities.this.~[A,B]]): ParserUtilities.this.PackratParser[(A, B)]
3573 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productElement(x$1: Int): Any
3241 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.toString(): String
1328 ===> org.kiama.example.RISC.RISCISA.Comment.<init>(text: String): org.kiama.example.RISC.RISCISA.Comment
8231 ===> org.kiama.example.obr.RISCTree.Bne.productElement(x$1: Int): Any
11145 ===> org.kiama.output.PrettyPrinterTests.Val.toString(): String
2511 ===> org.kiama.example.iswim.compiler.Syntax.If.productElement(x$1: Int): Any
1031 ===> org.kiama.example.RISC.RISCISA.STW.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.STW
4289 ===> org.kiama.example.json.JSONTree.JString.productElement(x$1: Int): Any
12529 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n5: ParserUtilitiesTests.this.Node
2292 ===> org.kiama.example.iswim.compiler.Syntax.And.productIterator: Iterator[Any]
7684 ===> org.kiama.example.obr.ObrTree.IfStmt.toString(): String
11097 ===> org.kiama.output.PrettyPrinterBase.lbracket: PrettyPrinterBase.this.Doc
6901 ===> org.kiama.example.oberon0.L4.source.IndexExp.productElement(x$1: Int): Any
12178 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9385 ===> org.kiama.example.obr.SymbolTable.EnumType.productArity: Int
12127 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8721 ===> org.kiama.example.obr.SPARCTree.SPARC.productArity: Int
9278 ===> org.kiama.example.obr.SymbolTable.Multiple.productElement(x$1: Int): Any
8118 ===> org.kiama.example.obr.ObrTree.SlashExp.productArity: Int
4976 ===> org.kiama.example.lambda3.AST.Num.toString(): String
7566 ===> org.kiama.example.obr.ObrTree.EnumConst.productIterator: Iterator[Any]
7842 ===> org.kiama.example.obr.ObrTree.BoolExp.productElement(x$1: Int): Any
4923 ===> org.kiama.example.lambda2.Parser.itype: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Type]
7311 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productPrefix: String
3833 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.toString(): String
0 ===> org.kiama.example.oberon0.L0.Parser.constdecl: Parser.this.Parser[org.kiama.example.oberon0.L0.source.ConstDecl]
1652 ===> org.kiama.example.imperative.AST.Add.toString(): String
10724 ===> org.kiama.example.transform.AST.Program.ops: List[(String, Int)]
11276 ===> org.kiama.rewriting.NominalAST.Bind.name: org.kiama.rewriting.NominalAST.Name
5831 ===> org.kiama.example.oberon0.L0.source.EqExp.productArity: Int
6348 ===> org.kiama.example.oberon0.L2.source.Case.conds: List[org.kiama.example.oberon0.L2.source.Condition]
1843 ===> org.kiama.example.imperative.ASTNonCase.Var.s: org.kiama.example.imperative.ASTNonCase.Idn
1681 ===> org.kiama.example.imperative.AST.Mul.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Mul
3918 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productIterator: Iterator[Any]
7982 ===> org.kiama.example.obr.ObrTree.MinusExp.left: org.kiama.example.obr.ObrTree.Expression
5099 ===> org.kiama.example.lambda3.AST.FreshQuery.productArity: Int
9482 ===> org.kiama.example.oneohonecompanies.Company.Company.productPrefix: String
0 ===> scala.Product3.productElement(n: Int): Any
5401 ===> org.kiama.example.oberon0.L0.c.CEqExp.left: org.kiama.example.oberon0.base.c.CExpression
12187 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4683 ===> org.kiama.example.lambda2.AST.FunType.t1: org.kiama.example.lambda2.AST.Type
2609 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.<init>(p: org.kiama.example.iswim.compiler.Syntax.Pattern,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MatchClause
5301 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productIterator: Iterator[Any]
0 ===> scala.util.parsing.input.Positional.pos: scala.util.parsing.input.Position
10477 ===> org.kiama.example.til.AST.Read.productPrefix: String
0 ===> org.kiama.example.prolog.SyntaxAnalysis.listterms: SyntaxAnalysis.this.PackratParser[org.kiama.example.prolog.PrologTree.Literal]
11288 ===> org.kiama.rewriting.NominalAST.Bind.toString(): String
11349 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionalRewriter.Term): Boolean
3610 ===> org.kiama.example.iswim.secd.SECDBase.Resume.toString(): String
4043 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productArity: Int
5931 ===> org.kiama.example.oberon0.L0.source.GeExp.toString(): String
11500 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productElement(x$1: Int): Any
2862 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.toString(): String
8795 ===> org.kiama.example.obr.SPARCTree.LabelDef.productElement(x$1: Int): Any
0 ===> org.kiama.example.iswim.secd.IntComparisonOps.super$evalInst: PartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
5349 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productPrefix: String
7715 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productIterator: Iterator[Any]
12396 ===> org.kiama.util.Messaging.Record.productElement(x$1: Int): Any
11070 ===> org.kiama.output.PrettyPrinterBase.surround(d: PrettyPrinterBase.this.Doc,b: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
0 ===> org.kiama.example.iswim.compiler.Parser.expr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
6408 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.casesToDoc(l: List[org.kiama.example.oberon0.L2.source.Case]): PrettyPrinter.this.Doc
731 ===> org.kiama.example.RISC.RISCISA.DIVI.productIterator: Iterator[Any]
5731 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productIterator: Iterator[Any]
0 ===> scala.util.parsing.combinator.Parsers.opt[T](p: => Parsers.this.Parser[T]): Parsers.this.Parser[Option[T]]
3107 ===> org.kiama.example.iswim.secd.IOOps.Read.toString(): String
3226 ===> org.kiama.example.iswim.secd.IntegerOps.Div.toString(): String
2780 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productPrefix: String
8652 ===> org.kiama.example.obr.RISCTree.Indexed.toString(): String
0 ===> org.kiama.example.dataflow.Optimise.elimEmpties: org.kiama.rewriting.Rewriter.Strategy
10260 ===> org.kiama.example.prolog.Subst.apply[T <: org.kiama.rewriting.Rewriter.Term](t: T): T
6264 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productIterator: Iterator[Any]
4242 ===> org.kiama.example.json.JSONTree.JObject.toString(): String
1277 ===> org.kiama.example.RISC.RISCISA.BSR.<init>(label: Int): org.kiama.example.RISC.RISCISA.BSR
2289 ===> org.kiama.example.iswim.compiler.Syntax.And.productPrefix: String
7400 ===> org.kiama.example.obr.Driver.spillTargetTreeFlag: Boolean
12172 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6314 ===> org.kiama.example.oberon0.L2.source.ForStatement.productPrefix: String
6806 ===> org.kiama.example.oberon0.L4.SymbolTable.hasField(t: SymbolTable.this.Type,f: String): Boolean
3472 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
0 ===> scala.collection.mutable.HashMap.<init>(): scala.collection.mutable.HashMap[A,B]
12251 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.genAdd(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Add]
1743 ===> org.kiama.example.imperative.AST.Seqn.productArity: Int
7456 ===> org.kiama.example.obr.ObrTree.IntVar.productArity: Int
11573 ===> org.kiama.rewriting.Rewriter.Term.unapply(t: Any): Option[(Any, Seq[Any])]
7128 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productArity: Int
10567 ===> org.kiama.example.til.AST.Str.productIterator: Iterator[Any]
10697 ===> org.kiama.example.til.TIL2_1.transform(ast: org.kiama.example.til.AST.Program): org.kiama.example.til.AST.Program
2028 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productArity: Int
10133 ===> org.kiama.example.prolog.PrologTree.Cut.productElement(x$1: Int): Any
11588 ===> org.kiama.rewriting.Rewriter.$anon.allRewritable(r: org.kiama.rewriting.Rewritable): Option[Rewriter.this.Term]
3481 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.toString(): String
3774 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productPrefix: String
8555 ===> org.kiama.example.obr.RISCTree.Not.productIterator: Iterator[Any]
11022 ===> org.kiama.output.PrettyPrinterBase.pretty_any(a: Any): PrettyPrinterBase.this.Layout
9165 ===> org.kiama.example.obr.SPARCTree.Indexed.toString(): String
2528 ===> org.kiama.example.iswim.compiler.Syntax.While.productPrefix: String
11309 ===> org.kiama.rewriting.NominalRewriter.HasVar.unapply(t: Product): Option[org.kiama.rewriting.NominalAST.Name]
9248 ===> org.kiama.example.obr.SymbolTable.Constant.productElement(x$1: Int): Any
12017 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6744 ===> org.kiama.example.oberon0.L4.Parser.lhsDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
4914 ===> org.kiama.example.lambda2.ParLazyUpdate.update(eval: org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
10343 ===> org.kiama.example.til.AST.Program.productElement(x$1: Int): Any
6893 ===> org.kiama.example.oberon0.L4.source.IndexExp.base: org.kiama.example.oberon0.L0.source.Expression
10882 ===> org.kiama.machine.Machine.ParamUpdater.t: T
2388 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.toString(): String
6967 ===> org.kiama.example.oberon0.L4.source.FieldIdn.ident: String
9344 ===> org.kiama.example.obr.SymbolTable.RecordType.fields: List[org.kiama.example.obr.ObrTree.Identifier]
8343 ===> org.kiama.example.obr.RISCTree.AddW.l: org.kiama.example.obr.RISCTree.Datum
1849 ===> org.kiama.example.imperative.ASTNonCase.Neg.e: org.kiama.example.imperative.ASTNonCase.Exp
4698 ===> org.kiama.example.lambda2.AST.FunType.toString(): String
11718 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2471 ===> org.kiama.example.iswim.compiler.Syntax.Return.productElement(x$1: Int): Any
0 ===> org.kiama.example.oberon0.L4.Parser.fldidn: Parser.this.Parser[org.kiama.example.oberon0.L4.source.FieldIdn]
5927 ===> org.kiama.example.oberon0.L0.source.GeExp.productElement(x$1: Int): Any
3067 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productArity: Int
10154 ===> org.kiama.example.prolog.SemanticAnalysis.tipe: org.kiama.example.prolog.PrologTree.Term => org.kiama.example.prolog.SymbolTable.Type
9105 ===> org.kiama.example.obr.SPARCTree.RemW.productElement(x$1: Int): Any
8272 ===> org.kiama.example.obr.RISCTree.LabelDef.toString(): String
4025 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.toString(): String
3459 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productElement(x$1: Int): Any
2816 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productArity: Int
3827 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productElement(x$1: Int): Any
7478 ===> org.kiama.example.obr.ObrTree.IntParam.toString(): String
4262 ===> org.kiama.example.json.JSONTree.JName.toString(): String
1139 ===> org.kiama.example.RISC.RISCISA.WRH.apply(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRH
9509 ===> org.kiama.example.oneohonecompanies.Company.Dept.toString(): String
3172 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productPrefix: String
7008 ===> org.kiama.example.oberon0.base.Driver.pprintastFlagDefault: Boolean
8853 ===> org.kiama.example.obr.SPARCTree.StW.toString(): String
2023 ===> org.kiama.example.iswim.compiler.Syntax.Negate.e: org.kiama.example.iswim.compiler.Syntax.Expr
10189 ===> org.kiama.example.prolog.SymbolTable.Variable.toString(): String
1105 ===> org.kiama.example.RISC.RISCISA.RD.apply(a: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RD
378 ===> org.kiama.attribution.Decorators.idf[T, U]: (T => U) => org.kiama.==>[T,U]
3732 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productIterator: Iterator[Any]
10538 ===> org.kiama.example.til.AST.Var.toString(): String
6373 ===> org.kiama.example.oberon0.L2.source.ValCond.productArity: Int
8161 ===> org.kiama.example.obr.RISCEncoder.exitlab: Int
4817 ===> org.kiama.example.lambda2.Lambda.processline(line: String): Unit
8163 ===> org.kiama.example.obr.RISCEncoder.encode(p: org.kiama.example.obr.RISCTree.RISCProg): Unit
0 ===> org.kiama.example.iswim.secd.SECDBase.envir: SECDBase.this.State[SECDBase.this.Environment]{def toDoc: SECDBase.this.Doc}
4572 ===> org.kiama.example.lambda2.AST.App.productPrefix: String
7152 ===> org.kiama.example.oberon0.base.c.CBlock.toString(): String
1513 ===> org.kiama.example.dataflow.For.productArity: Int
6191 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.tstmt: org.kiama.example.oberon0.base.c.CStatement
0 ===> org.kiama.example.transform.Parser.factor: Parser.this.Parser[org.kiama.example.transform.AST.PrimExp with Serializable]
1003 ===> org.kiama.example.RISC.RISCISA.LDB.toString(): String
6031 ===> org.kiama.example.oberon0.L0.source.DivExp.productIterator: Iterator[Any]
1978 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productElement(x$1: Int): Any
6702 ===> org.kiama.example.oberon0.L3.source.FPSection.productIterator: Iterator[Any]
12038 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1863 ===> org.kiama.example.imperative.ASTNonCase.Sub.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Sub
7164 ===> org.kiama.example.oberon0.base.c.CIntType.productElement(x$1: Int): Any
8941 ===> org.kiama.example.obr.SPARCTree.CmpneW.productArity: Int
3335 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productElement(x$1: Int): Any
10139 ===> org.kiama.example.prolog.PrologTree.Cut.toString(): String
7989 ===> org.kiama.example.obr.ObrTree.MinusExp.productArity: Int
7343 ===> org.kiama.example.oberon0.base.source.IdnUse.ident: String
9446 ===> org.kiama.example.obr.SyntaxAnalysis.reservedWords: scala.collection.immutable.HashSet[String]
7621 ===> org.kiama.example.obr.ObrTree.AssignStmt.productElement(x$1: Int): Any
2372 ===> org.kiama.example.iswim.compiler.Syntax.Let.toString(): String
4438 ===> org.kiama.example.lambda.AST.Lam.toString(): String
8219 ===> org.kiama.example.obr.RISCTree.Beq.toString(): String
1091 ===> org.kiama.example.RISC.RISCISA.RD.a: org.kiama.example.RISC.RISCISA.RegNo
431 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productArity: Int
12538 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productArity: Int
8351 ===> org.kiama.example.obr.RISCTree.AddW.productElement(x$1: Int): Any
5225 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productPrefix: String
1329 ===> org.kiama.example.RISC.RISCISA.Comment.toString(): String
9080 ===> org.kiama.example.obr.SPARCTree.Not.d: org.kiama.example.obr.SPARCTree.Datum
4442 ===> org.kiama.example.lambda.AST.App.l: org.kiama.example.lambda.AST.Exp
482 ===> org.kiama.example.RISC.RISC.control(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
2065 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productPrefix: String
8535 ===> org.kiama.example.obr.RISCTree.NegW.productPrefix: String
811 ===> org.kiama.example.RISC.RISCISA.CMPI.productIterator: Iterator[Any]
1720 ===> org.kiama.example.imperative.AST.Stmt.<init>(): org.kiama.example.imperative.AST.Stmt
1464 ===> org.kiama.example.dataflow.DataflowAST.Empty.productElement(x$1: Int): Any
5608 ===> org.kiama.example.oberon0.L0.c.CDivExp.productPrefix: String
783 ===> org.kiama.example.RISC.RISCISA.CMP.c: org.kiama.example.RISC.RISCISA.RegNo
1125 ===> org.kiama.example.RISC.RISCISA.WRH.c: org.kiama.example.RISC.RISCISA.RegNo
6798 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.toString(): String
1218 ===> org.kiama.example.RISC.RISCISA.BGE.productElement(x$1: Int): Any
6267 ===> org.kiama.example.oberon0.L1.source.WhileStatement.toString(): String
0 ===> scala.collection.TraversableLike.map[B, That](f: A => B)(implicit bf: scala.collection.generic.CanBuildFrom[Repr,B,That]): That
6588 ===> org.kiama.example.oberon0.L3.c.CStrExp.toString(): String
4090 ===> org.kiama.example.iswim.secd.StackOps.Dup.n: Int
9822 ===> org.kiama.example.picojava.ErrorCheck.errors: org.kiama.example.picojava.AbstractSyntax.Program => Seq[String]
11026 ===> org.kiama.output.PrettyPrinterBase.$anon.<init>(): PrettyPrinterBase.this.PrettyPrintable
2739 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productArity: Int
33 ===> org.kiama.attribution.AttributionBase.Attribute.<init>(): AttributionBase.this.Attribute[T,U]
10185 ===> org.kiama.example.prolog.SymbolTable.Variable.productElement(x$1: Int): Any
0 ===> scala.collection.mutable.ResizableArray.apply(idx: Int): A
5714 ===> org.kiama.example.oberon0.L0.c.CIdnExp.toString(): String
4463 ===> org.kiama.example.lambda.AST.Sub.n: org.kiama.example.lambda.AST.Exp
9993 ===> org.kiama.example.prolog.Main.start: org.kiama.example.prolog.Main.Parser[org.kiama.example.prolog.PrologTree.Literal]
6859 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productArity: Int
8659 ===> org.kiama.example.obr.RISCTree.Label.num: Int
4581 ===> org.kiama.example.lambda2.AST.App.toString(): String
10640 ===> org.kiama.example.til.AST.Sub.productArity: Int
10880 ===> org.kiama.machine.Machine.stateTToT[T, U >: T](t: Machine.this.State[T]): U
5004 ===> org.kiama.example.lambda3.AST.App.productPrefix: String
4930 ===> org.kiama.example.lambda2.PrettyPrinter.showbin(l: org.kiama.example.lambda2.AST.Exp,op: String,r: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.PrettyPrinter.Doc
510 ===> org.kiama.example.RISC.RISCISA.MOVI.b: org.kiama.example.RISC.RISCISA.RegNo
5893 ===> org.kiama.example.oberon0.L0.source.LeExp.toString(): String
10098 ===> org.kiama.example.prolog.PrologTree.Atom.productArity: Int
11323 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
10749 ===> org.kiama.example.transform.AST.VarDecl.productPrefix: String
12612 ===> org.kiama.util.GeneratingREPLBase.prompt: String
0 ===> org.kiama.example.iswim.compiler.Parser.letrecexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
1282 ===> org.kiama.example.RISC.RISCISA.BSR.productElement(x$1: Int): Any
8794 ===> org.kiama.example.obr.SPARCTree.LabelDef.productArity: Int
6158 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.declsection(d: org.kiama.example.oberon0.base.source.Declaration): String
11798 ===> org.kiama.rewriting.RewriterTests.Equal.productIterator: Iterator[Any]
6306 ===> org.kiama.example.oberon0.L2.source.ForStatement.block: org.kiama.example.oberon0.base.source.Block
3193 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.toString(): String
0 ===> org.kiama.example.dataflow.Optimise.rules: org.kiama.rewriting.Rewriter.Strategy
7489 ===> org.kiama.example.obr.ObrTree.BoolVar.productPrefix: String
5333 ===> org.kiama.example.oberon0.L0.c.CNamedType.productIterator: Iterator[Any]
12160 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10607 ===> org.kiama.example.til.AST.Div.toString(): String
11069 ===> org.kiama.output.PrettyPrinterBase.value(v: Any): PrettyPrinterBase.this.Doc
9020 ===> org.kiama.example.obr.SPARCTree.IntDatum.toString(): String
8935 ===> org.kiama.example.obr.SPARCTree.CmpneW.r: org.kiama.example.obr.SPARCTree.Datum
11120 ===> org.kiama.output.PrettyPrinter.line: PrettyPrinter.this.Doc
11361 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productIterator: Iterator[Any]
644 ===> org.kiama.example.RISC.RISCISA.SUBI.productPrefix: String
8672 ===> org.kiama.example.obr.RISCTree.Label.toString(): String
7020 ===> org.kiama.example.oberon0.base.TransformingDriver.usageMessage: String
10604 ===> org.kiama.example.til.AST.Div.productIterator: Iterator[Any]
3035 ===> org.kiama.example.iswim.secd.HeapOps.Put.toString(): String
9109 ===> org.kiama.example.obr.SPARCTree.RemW.toString(): String
4288 ===> org.kiama.example.json.JSONTree.JString.productArity: Int
0 ===> org.kiama.example.oberon0.L0.Parser.super$keywordStrings: List[String]
9741 ===> org.kiama.example.picojava.AbstractSyntax.Use.productIterator: Iterator[Any]
8520 ===> org.kiama.example.obr.RISCTree.MulW.productElement(x$1: Int): Any
4332 ===> org.kiama.example.json.JSONTree.JFalse.<init>(): org.kiama.example.json.JSONTree.JFalse
10583 ===> org.kiama.example.til.AST.Mul.productArity: Int
6678 ===> org.kiama.example.oberon0.L3.source.ValMode.productPrefix: String
1096 ===> org.kiama.example.RISC.RISCISA.RD.productPrefix: String
6186 ===> org.kiama.example.oberon0.L1.c.CIfStatement.toString(): String
1164 ===> org.kiama.example.RISC.RISCISA.BEQ.label: Int
3964 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productElement(x$1: Int): Any
10172 ===> org.kiama.example.prolog.SymbolTable.Predicate.toString(): String
5554 ===> org.kiama.example.oberon0.L0.c.CSubExp.toString(): String
5691 ===> org.kiama.example.oberon0.L0.c.CNotExp.productIterator: Iterator[Any]
2433 ===> org.kiama.example.iswim.compiler.Syntax.Import.productPrefix: String
5634 ===> org.kiama.example.oberon0.L0.c.CModExp.toString(): String
5550 ===> org.kiama.example.oberon0.L0.c.CSubExp.productElement(x$1: Int): Any
5245 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productElement(x$1: Int): Any
3449 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.pn: org.kiama.example.iswim.secd.SECDBase.Name
369 ===> org.kiama.attribution.Decorators.Chain.productIterator: Iterator[Any]
3083 ===> org.kiama.example.iswim.secd.IOOps.Write.productPrefix: String
151 ===> org.kiama.attribution.AttributionTests.Pair.productArity: Int
6161 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.idlistToDoc(ids: List[org.kiama.example.oberon0.base.source.IdnDef]): PrettyPrinter.this.Doc
2650 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productArity: Int
2522 ===> org.kiama.example.iswim.compiler.Syntax.While.ctrl: org.kiama.example.iswim.compiler.Syntax.Expr
7552 ===> org.kiama.example.obr.ObrTree.EnumVar.toString(): String
0 ===> org.kiama.example.oberon0.L4.TypeAnalyser.super$tipeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
2154 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.l: org.kiama.example.iswim.compiler.Syntax.Expr
476 ===> org.kiama.example.RISC.RISC.halt: RISC.this.State[Boolean]
9527 ===> org.kiama.example.oneohonecompanies.Company.Employee.productIterator: Iterator[Any]
2573 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.fields: List[org.kiama.example.iswim.compiler.Syntax.Expr]
7266 ===> org.kiama.example.oberon0.base.source.SourceASTNode.<init>(): org.kiama.example.oberon0.base.source.SourceASTNode
8746 ===> org.kiama.example.obr.SPARCTree.Beq.toString(): String
7305 ===> org.kiama.example.oberon0.base.source.Block.toString(): String
9277 ===> org.kiama.example.obr.SymbolTable.Multiple.productArity: Int
7514 ===> org.kiama.example.obr.ObrTree.ArrayVar.toString(): String
8482 ===> org.kiama.example.obr.RISCTree.IntDatum.productPrefix: String
0 ===> scala.runtime.AbstractPartialFunction.<init>(): scala.runtime.AbstractPartialFunction[T1,R]
1509 ===> org.kiama.example.dataflow.For.body: org.kiama.example.dataflow.DataflowAST.Stm
6217 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productPrefix: String
2310 ===> org.kiama.example.iswim.compiler.Syntax.Or.productElement(x$1: Int): Any
8166 ===> org.kiama.example.obr.RISCEncoder.arith(op: (org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo) => org.kiama.example.RISC.RISCISA.Instr,l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum,d: org.kiama.example.obr.RISCTree.Datum): Unit
11127 ===> org.kiama.output.PrettyPrinter.pretty$default$2: PrettyPrinter.this.Width @scala.annotation.unchecked.uncheckedVariance
9562 ===> org.kiama.example.oneohonecompanies.Company.DU.productIterator: Iterator[Any]
4503 ===> org.kiama.example.lambda.Generator.genLamExp(sz: Int): org.scalacheck.Gen[org.kiama.example.lambda.AST.Lam]
1686 ===> org.kiama.example.imperative.AST.Mul.productPrefix: String
2885 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productElement(x$1: Int): Any
6956 ===> org.kiama.example.oberon0.L4.source.FieldExp.productElement(x$1: Int): Any
5448 ===> org.kiama.example.oberon0.L0.c.CLtExp.productPrefix: String
9757 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productPrefix: String
5256 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.ident: String
11484 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productIterator: Iterator[Any]
8417 ===> org.kiama.example.obr.RISCTree.CmpneW.toString(): String
6349 ===> org.kiama.example.oberon0.L2.source.Case.block: org.kiama.example.oberon0.base.source.Block
7012 ===> org.kiama.example.oberon0.base.Driver.checkargs(args: Array[String],emitter: org.kiama.util.Emitter): Array[String]
3219 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productElement(x$1: Int): Any
12032 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7536 ===> org.kiama.example.obr.ObrTree.RecordVar.toString(): String
7997 ===> org.kiama.example.obr.ObrTree.MinusExp.toString(): String
0 ===> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
1931 ===> org.kiama.example.iswim.compiler.Parser.Pos.productElement(x$1: Int): Any
10439 ===> org.kiama.example.til.AST.While.productElement(x$1: Int): Any
707 ===> org.kiama.example.RISC.RISCISA.DIV.productPrefix: String
8151 ===> org.kiama.example.obr.RISCEncoder.emit(instr: org.kiama.example.RISC.RISCISA.Assembler): Unit
8117 ===> org.kiama.example.obr.ObrTree.SlashExp.productPrefix: String
1853 ===> org.kiama.example.imperative.ASTNonCase.Neg.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
1508 ===> org.kiama.example.dataflow.For.inc: org.kiama.example.dataflow.DataflowAST.Stm
6133 ===> org.kiama.example.oberon0.L0.source.IntExp.toString(): String
1962 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productIterator: Iterator[Any]
0 ===> org.kiama.util.JLineConsole.reader: jline.ConsoleReader
4249 ===> org.kiama.example.json.JSONTree.JName.s: String
9159 ===> org.kiama.example.obr.SPARCTree.Indexed.productPrefix: String
7950 ===> org.kiama.example.obr.ObrTree.IntExp.productPrefix: String
11742 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5263 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productArity: Int
2238 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productElement(x$1: Int): Any
11576 ===> org.kiama.rewriting.Rewriter.dup[T <: Product](t: T,children: Array[AnyRef]): T
1257 ===> org.kiama.example.RISC.RISCISA.BGT.apply(label: Int): org.kiama.example.RISC.RISCISA.BGT
9944 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productPrefix: String
9665 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.toString(): String
419 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.toString(): String
2541 ===> org.kiama.example.iswim.compiler.Syntax.Block.es: List[org.kiama.example.iswim.compiler.Syntax.Expr]
1633 ===> org.kiama.example.imperative.AST.Binary.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Binary
7533 ===> org.kiama.example.obr.ObrTree.RecordVar.toString(): String
3682 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productElement(x$1: Int): Any
1994 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productArity: Int
1278 ===> org.kiama.example.RISC.RISCISA.BSR.toString(): String
0 ===> org.kiama.example.oberon0.base.Parser.parser: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.ModuleDecl]
0 ===> org.kiama.example.oberon0.L4.source.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
5981 ===> org.kiama.example.oberon0.L0.source.OrExp.right: org.kiama.example.oberon0.L0.source.Expression
0 ===> org.kiama.example.oberon0.L0.c.PrettyPrinter.super$toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
0 ===> scala.Tuple4.productPrefix: String
9239 ===> org.kiama.example.obr.SymbolTable.Constant.value: Int
1323 ===> org.kiama.example.RISC.RISCISA.Target.toString(): String
0 ===> org.kiama.example.lambda2.Parser.exp: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Exp]
8834 ===> org.kiama.example.obr.SPARCTree.Ret.toString(): String
0 ===> org.scalacheck.Gen.Params.toString(): String
0 ===> org.kiama.example.prolog.SyntaxAnalysis.integer: SyntaxAnalysis.this.Parser[org.kiama.example.prolog.PrologTree.Integer]
5750 ===> org.kiama.example.oberon0.L0.source.VarDecl.productIterator: Iterator[Any]
9174 ===> org.kiama.example.obr.SPARCTree.Label.toString(): String
9760 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productIterator: Iterator[Any]
10947 ===> org.kiama.output.RightAssoc.productElement(x$1: Int): Any
1426 ===> org.kiama.example.dataflow.DataflowAST.Block.stms: List[org.kiama.example.dataflow.DataflowAST.Stm]
9966 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productIterator: Iterator[Any]
9384 ===> org.kiama.example.obr.SymbolTable.EnumType.productPrefix: String
68 ===> org.kiama.attribution.Attribution.MemoState.MEMO_VERSION_$eq(x$1: Int): Unit
3704 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.toString(): String
6663 ===> org.kiama.example.oberon0.L3.source.VarMode.productPrefix: String
8649 ===> org.kiama.example.obr.RISCTree.Indexed.productIterator: Iterator[Any]
6285 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8003 ===> org.kiama.example.obr.ObrTree.ModExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.ModExp
0 ===> java.io.FileInputStream.<init>(x$1: String): java.io.FileInputStream
8255 ===> org.kiama.example.obr.RISCTree.Jmp.toString(): String
7640 ===> org.kiama.example.obr.ObrTree.ExitStmt.toString(): String
5358 ===> org.kiama.example.oberon0.L0.c.CInitDecl.toString(): String
10410 ===> org.kiama.example.til.AST.IfElse.e: org.kiama.example.til.AST.Exp
2590 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.ns: List[org.kiama.example.iswim.compiler.Syntax.Variable]
0 ===> org.kiama.example.oberon0.L3.SymbolTable.super$isVariable(e: SymbolTable.this.Entity): Boolean
5986 ===> org.kiama.example.oberon0.L0.source.OrExp.productPrefix: String
11462 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productPrefix: String
3387 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.toString(): String
7680 ===> org.kiama.example.obr.ObrTree.IfStmt.productElement(x$1: Int): Any
494 ===> org.kiama.example.RISC.RISCISA.MOV.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOV
1413 ===> org.kiama.example.dataflow.DataflowAST.If.productPrefix: String
10443 ===> org.kiama.example.til.AST.While.toString(): String
11182 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.prio: Int
5339 ===> org.kiama.example.oberon0.L0.c.CNamedType.toString(): String
8611 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productElement(x$1: Int): Any
9914 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.toString(): String
5258 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.<init>(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDecl): SymbolTable.this.UserType
7691 ===> org.kiama.example.obr.ObrTree.LoopStmt.body: List[org.kiama.example.obr.ObrTree.Statement]
12296 ===> org.kiama.util.Emitter.<init>(): org.kiama.util.Emitter
6524 ===> org.kiama.example.oberon0.L3.TypeAnalyser.parammode(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int): org.kiama.example.oberon0.L3.source.Mode
4165 ===> org.kiama.example.iswim.secd.StringOps.StringValue.s: String
7165 ===> org.kiama.example.oberon0.base.c.CIntType.productIterator: Iterator[Any]
10372 ===> org.kiama.example.til.AST.Assign.i: org.kiama.example.til.AST.Id
1215 ===> org.kiama.example.RISC.RISCISA.BGE.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
552 ===> org.kiama.example.RISC.RISCISA.MVNI.b: org.kiama.example.RISC.RISCISA.RegNo
3761 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productElement(x$1: Int): Any
12513 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productArity: Int
4767 ===> org.kiama.example.lambda2.AST.Opn(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy,s3: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
8376 ===> org.kiama.example.obr.RISCTree.Cond.toString(): String
2156 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.NotEqual
12441 ===> org.kiama.util.WhitespaceParser.literal(s: String): WhitespaceParser.this.Parser[String]
3002 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productIterator: Iterator[Any]
4575 ===> org.kiama.example.lambda2.AST.App.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L3.c.PrettyPrinter.super$toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
5326 ===> org.kiama.example.oberon0.L0.c.CNamedType.ident: String
8362 ===> org.kiama.example.obr.RISCTree.Cond.cond: org.kiama.example.obr.RISCTree.Datum
7430 ===> org.kiama.example.obr.ObrTree.ObrInt.idn2: org.kiama.example.obr.ObrTree.Identifier
6656 ===> org.kiama.example.oberon0.L3.source.ProcDecl.toString(): String
8455 ===> org.kiama.example.obr.RISCTree.CmpltW.toString(): String
5367 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productArity: Int
8484 ===> org.kiama.example.obr.RISCTree.IntDatum.productElement(x$1: Int): Any
3507 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productElement(x$1: Int): Any
6681 ===> org.kiama.example.oberon0.L3.source.ValMode.productIterator: Iterator[Any]
6724 ===> org.kiama.example.oberon0.L3.source.Call.toString(): String
6179 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productElement(x$1: Int): Any
7199 ===> org.kiama.example.oberon0.base.c.CArrayType.productIterator: Iterator[Any]
235 ===> org.kiama.attribution.AttributionTests.SetTree.productPrefix: String
7490 ===> org.kiama.example.obr.ObrTree.BoolVar.productArity: Int
765 ===> org.kiama.example.RISC.RISCISA.MODI.toString(): String
11102 ===> org.kiama.output.PrettyPrinterBase.semi: PrettyPrinterBase.this.Doc
3334 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productArity: Int
10027 ===> org.kiama.example.prolog.PrologTree.Fact.productIterator: Iterator[Any]
8139 ===> org.kiama.example.obr.ObrTree.StarExp.productIterator: Iterator[Any]
2291 ===> org.kiama.example.iswim.compiler.Syntax.And.productElement(x$1: Int): Any
5989 ===> org.kiama.example.oberon0.L0.source.OrExp.productIterator: Iterator[Any]
8038 ===> org.kiama.example.obr.ObrTree.NotEqualExp.right: org.kiama.example.obr.ObrTree.Expression
3855 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productPrefix: String
6774 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productIterator: Iterator[Any]
0 ===> org.kiama.example.prolog.SyntaxAnalysis.literals: SyntaxAnalysis.this.Parser[List[org.kiama.example.prolog.PrologTree.Literal]]
5767 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productArity: Int
10452 ===> org.kiama.example.til.AST.For.t: org.kiama.example.til.AST.Exp
786 ===> org.kiama.example.RISC.RISCISA.CMP.<init>(b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.CMP
9619 ===> org.kiama.example.picojava.AbstractSyntax.Program.productElement(x$1: Int): Any
5387 ===> org.kiama.example.oberon0.L0.c.CAssignment.productElement(x$1: Int): Any
12525 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n1: ParserUtilitiesTests.this.Node
2832 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productElement(x$1: Int): Any
11043 ===> org.kiama.output.PrettyPrinterBase.list$default$4[T]: PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
5372 ===> org.kiama.example.oberon0.L0.c.CTypeDef.toString(): String
2090 ===> org.kiama.example.iswim.compiler.Syntax.Times.toString(): String
7353 ===> org.kiama.example.oberon0.base.source.IdnUse.toString(): String
597 ===> org.kiama.example.RISC.RISCISA.ADDI.toString(): String
1024 ===> org.kiama.example.RISC.RISCISA.POP.toString(): String
7910 ===> org.kiama.example.obr.ObrTree.IdnExp.idn: org.kiama.example.obr.ObrTree.Identifier
1049 ===> org.kiama.example.RISC.RISCISA.STB.a: org.kiama.example.RISC.RISCISA.RegNo
2569 ===> org.kiama.example.iswim.compiler.Syntax.Empty.toString(): String
9555 ===> org.kiama.example.oneohonecompanies.Company.DU.d: org.kiama.example.oneohonecompanies.Company.Dept
6295 ===> org.kiama.example.oberon0.L2.NameAnalyser.rootconstexpDef: org.kiama.example.oberon0.L0.source.Expression => Boolean
6300 ===> org.kiama.example.oberon0.L2.TypeAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
9945 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productArity: Int
4139 ===> org.kiama.example.iswim.secd.StringOps.PushString.productIterator: Iterator[Any]
2662 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.e: org.kiama.example.iswim.compiler.Syntax.Expr
1148 ===> org.kiama.example.RISC.RISCISA.WRL.productIterator: Iterator[Any]
9681 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productIterator: Iterator[Any]
10337 ===> org.kiama.example.til.AST.Program.ss: Seq[org.kiama.example.til.AST.Stat]
6584 ===> org.kiama.example.oberon0.L3.c.CStrExp.productElement(x$1: Int): Any
2339 ===> org.kiama.example.iswim.compiler.Syntax.Binding.e: org.kiama.example.iswim.compiler.Syntax.Expr
0 ===> java.io.InputStreamReader.<init>(x$1: java.io.InputStream,x$2: String): java.io.InputStreamReader
1113 ===> org.kiama.example.RISC.RISCISA.WRD.productPrefix: String
10648 ===> org.kiama.example.til.AST.Sub.toString(): String
700 ===> org.kiama.example.RISC.RISCISA.DIV.c: org.kiama.example.RISC.RISCISA.RegNo
4388 ===> org.kiama.example.lambda.AST.Exp.<init>(): org.kiama.example.lambda.AST.Exp
3696 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productArity: Int
4491 ===> org.kiama.example.lambda.Lambda.setup(args: Array[String]): Boolean
12241 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10615 ===> org.kiama.example.til.AST.Add.r: org.kiama.example.til.AST.Exp
3710 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productPrefix: String
9496 ===> org.kiama.example.oneohonecompanies.Company.Dept.m: org.kiama.example.oneohonecompanies.Company.Manager
3282 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productPrefix: String
8537 ===> org.kiama.example.obr.RISCTree.NegW.productElement(x$1: Int): Any
7106 ===> org.kiama.example.oberon0.base.c.CVarDecl.productPrefix: String
10816 ===> org.kiama.example.transform.AST.BinExp.toString(): String
7202 ===> org.kiama.example.oberon0.base.c.CArrayType.toString(): String
3140 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.toString(): String
5734 ===> org.kiama.example.oberon0.L0.source.ConstDecl.toString(): String
295 ===> org.kiama.attribution.AttributionTests.PairTree.toString(): String
12481 ===> org.kiama.util.ParserUtilitiesTests.Tup3.n1: ParserUtilitiesTests.this.Node
9797 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.toString(): String
0 ===> org.kiama.example.oberon0.L3.TypeAnalyser.parameters: org.kiama.example.oberon0.base.source.Identifier => Option[List[TypeAnalyser.this.ParamInfo]]
0 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.super$blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean): PrettyPrinter.this.Doc
0 ===> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
1374 ===> org.kiama.example.dataflow.DataflowAST.Assign.productArity: Int
7401 ===> org.kiama.example.obr.Driver.spillTargetTreeFlag_$eq(x$1: Boolean): Unit
2135 ===> org.kiama.example.iswim.compiler.Syntax.Equal.l: org.kiama.example.iswim.compiler.Syntax.Expr
10881 ===> org.kiama.machine.Machine.ParamUpdater.state: Machine.this.ParamState[T,U]
289 ===> org.kiama.attribution.AttributionTests.PairTree.productIterator: Iterator[Any]
10045 ===> org.kiama.example.prolog.PrologTree.Rule.productElement(x$1: Int): Any
1110 ===> org.kiama.example.RISC.RISCISA.WRD.<init>(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRD
10175 ===> org.kiama.example.prolog.SymbolTable.Predicate.toString(): String
3776 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productElement(x$1: Int): Any
4239 ===> org.kiama.example.json.JSONTree.JObject.productIterator: Iterator[Any]
2580 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productIterator: Iterator[Any]
10063 ===> org.kiama.example.prolog.PrologTree.Var.productArity: Int
11077 ===> org.kiama.output.PrettyPrinterBase.brackets(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
4849 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
6251 ===> org.kiama.example.oberon0.L1.source.IfStatement.toString(): String
8561 ===> org.kiama.example.obr.RISCTree.Not.toString(): String
9979 ===> org.kiama.example.prolog.Interpreter.renamecount_$eq(x$1: Int): Unit
12555 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n6: ParserUtilitiesTests.this.Node
2213 ===> org.kiama.example.iswim.compiler.Syntax.Greater.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Greater
4546 ===> org.kiama.example.lambda2.AST.Lam.t: org.kiama.example.lambda2.AST.Type
7121 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.body: org.kiama.example.oberon0.base.c.CBlock
3603 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productElement(x$1: Int): Any
2852 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productIterator: Iterator[Any]
2283 ===> org.kiama.example.iswim.compiler.Syntax.And.l: org.kiama.example.iswim.compiler.Syntax.Expr
366 ===> org.kiama.attribution.Decorators.Chain.productPrefix: String
12369 ===> org.kiama.util.IO.FileNotFoundException.productPrefix: String
2192 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.l: org.kiama.example.iswim.compiler.Syntax.Expr
0 ===> org.kiama.example.oberon0.L0.SymbolTable.unknownType: SymbolTable.this.BuiltinType
4814 ===> org.kiama.example.lambda2.Lambda.typecheck: Boolean
0 ===> scala.util.parsing.combinator.Parsers.not[T](p: => Parsers.this.Parser[T]): Parsers.this.Parser[Unit]
11948 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8049 ===> org.kiama.example.obr.ObrTree.NotEqualExp.toString(): String
5481 ===> org.kiama.example.oberon0.L0.c.CGtExp.left: org.kiama.example.oberon0.base.c.CExpression
0 ===> org.kiama.example.oberon0.L3.TypeAnalyser.super$idntypeDef: org.kiama.example.oberon0.base.source.IdnUse => TypeAnalyser.this.Type
6120 ===> org.kiama.example.oberon0.L0.source.IntExp.v: Int
636 ===> org.kiama.example.RISC.RISCISA.SUBI.b: org.kiama.example.RISC.RISCISA.RegNo
905 ===> org.kiama.example.RISC.RISCISA.ORI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ORI
914 ===> org.kiama.example.RISC.RISCISA.ORI.productIterator: Iterator[Any]
2118 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Remainder
3943 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.message: String
4919 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3631 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productPrefix: String
7336 ===> org.kiama.example.oberon0.base.source.IdnDef.toString(): String
823 ===> org.kiama.example.RISC.RISCISA.CHKI.toString(): String
1859 ===> org.kiama.example.imperative.ASTNonCase.Binary.deconstruct: List[org.kiama.example.imperative.ASTNonCase.Exp]
8867 ===> org.kiama.example.obr.SPARCTree.Write.toString(): String
10879 ===> org.kiama.machine.Machine.State.toString(): String
2109 ===> org.kiama.example.iswim.compiler.Syntax.Divide.toString(): String
2497 ===> org.kiama.example.iswim.compiler.Syntax.Apply.toString(): String
1405 ===> org.kiama.example.dataflow.DataflowAST.If.cond: org.kiama.example.dataflow.DataflowAST.Var
7541 ===> org.kiama.example.obr.ObrTree.EnumVar.consts: List[org.kiama.example.obr.ObrTree.EnumConst]
4191 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productIterator: Iterator[Any]
11040 ===> org.kiama.output.PrettyPrinterBase.list[T](l: List[T],prefix: String,elemToDoc: T => PrettyPrinterBase.this.Doc,sep: PrettyPrinterBase.this.Doc,sepfn: (Seq[PrettyPrinterBase.this.Doc], PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
3514 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.toString(): String
10242 ===> org.kiama.example.prolog.SymbolTable.UnknownType.<init>(): org.kiama.example.prolog.SymbolTable.UnknownType
8025 ===> org.kiama.example.obr.ObrTree.NegExp.productArity: Int
10012 ===> org.kiama.example.prolog.PrologTree.Program.toString(): String
7290 ===> org.kiama.example.oberon0.base.source.Block.decls: List[org.kiama.example.oberon0.base.source.Declaration]
0 ===> org.kiama.example.dataflow.Parser.keyword: Parser.this.Parser[String]
8666 ===> org.kiama.example.obr.RISCTree.Label.productIterator: Iterator[Any]
5749 ===> org.kiama.example.oberon0.L0.source.VarDecl.productElement(x$1: Int): Any
2854 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.hashCode(): Int
5029 ===> org.kiama.example.lambda3.AST.Lam.toString(): String
689 ===> org.kiama.example.RISC.RISCISA.MULI.productIterator: Iterator[Any]
0 ===> scala.util.parsing.combinator.Parsers.Error.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L0.SymbolTable.integerType: SymbolTable.this.BuiltinType
2583 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.toString(): String
10976 ===> org.kiama.output.Postfix.productIterator: Iterator[Any]
10974 ===> org.kiama.output.Postfix.productArity: Int
1581 ===> org.kiama.example.imperative.AST.Num.productIterator: Iterator[Any]
2666 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr,c: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.ThrowTo
9161 ===> org.kiama.example.obr.SPARCTree.Indexed.productElement(x$1: Int): Any
10276 ===> org.kiama.example.repmin.Fork.left: org.kiama.example.repmin.Tree
1867 ===> org.kiama.example.imperative.ASTNonCase.Mul.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
3173 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productArity: Int
0 ===> org.kiama.example.oberon0.L3.Parser.procedureDeclaration: Parser.this.Parser[org.kiama.example.oberon0.L3.source.ProcDecl]
0 ===> org.kiama.example.iswim.compiler.Parser.whitespaceParser: Parser.this.PackratParser[Any]
11397 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productIterator: Iterator[Any]
7018 ===> org.kiama.example.oberon0.base.Driver.consumeast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
0 ===> org.kiama.attribution.Decorators.outfunc: org.kiama.==>[T,U]
11448 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionedRewriter.Term): Boolean
3234 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productElement(x$1: Int): Any
0 ===> scala.util.parsing.input.Position.toString(): String
5629 ===> org.kiama.example.oberon0.L0.c.CModExp.productArity: Int
8427 ===> org.kiama.example.obr.RISCTree.CmpgtW.productPrefix: String
0 ===> org.kiama.attribution.Decorators.dattr: org.kiama.attribution.Attribution.CachedAttribute[T,U]
10584 ===> org.kiama.example.til.AST.Mul.productElement(x$1: Int): Any
2136 ===> org.kiama.example.iswim.compiler.Syntax.Equal.r: org.kiama.example.iswim.compiler.Syntax.Expr
6699 ===> org.kiama.example.oberon0.L3.source.FPSection.productPrefix: String
2237 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productArity: Int
4157 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.toString(): String
2730 ===> org.kiama.example.iswim.compiler.Syntax.Assign.toString(): String
10559 ===> org.kiama.example.til.AST.Str.s: String
0 ===> org.kiama.example.picojava.Parser.assign_stmt: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.AssignStmt]
6755 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productArity: Int
12451 ===> org.kiama.util.ParserUtilitiesTests.Node.productElement(x$1: Int): Any
7965 ===> org.kiama.example.obr.ObrTree.LessExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.LessExp
11421 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
0 ===> org.kiama.example.lambda2.Par.lambda: org.kiama.rewriting.Rewriter.PlusStrategy
7763 ===> org.kiama.example.obr.ObrTree.TryStmt.<init>(body: org.kiama.example.obr.ObrTree.TryBody,catches: List[org.kiama.example.obr.ObrTree.Catch]): org.kiama.example.obr.ObrTree.TryStmt
6509 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productArity: Int
7248 ===> org.kiama.example.oberon0.base.c.CIntExp.productArity: Int
2106 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L3.source.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
106 ===> org.kiama.attribution.Attribution.$anon.<init>(): Attribution.this.CachedParamAttribute[A,T,U]{}
12566 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productElement(x$1: Int): Any
6508 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productPrefix: String
7854 ===> org.kiama.example.obr.ObrTree.EqualExp.right: org.kiama.example.obr.ObrTree.Expression
9613 ===> org.kiama.example.picojava.AbstractSyntax.Program.Block: org.kiama.example.picojava.AbstractSyntax.Block
10909 ===> org.kiama.machine.Machine.updates: List[Machine.this.Update]
4710 ===> org.kiama.example.lambda2.AST.NoType.toString(): String
3999 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.bdy: org.kiama.example.iswim.secd.SECDBase.Code
6157 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.declsToDoc(ds: List[org.kiama.example.oberon0.base.source.Declaration]): PrettyPrinter.this.Doc
8075 ===> org.kiama.example.obr.ObrTree.OrExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.OrExp
9124 ===> org.kiama.example.obr.SPARCTree.SubW.productElement(x$1: Int): Any
9972 ===> org.kiama.example.prolog.Interpreter.MatchGoal.toString(): String
2200 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productElement(x$1: Int): Any
269 ===> org.kiama.attribution.AttributionTests.MapTree.productPrefix: String
12550 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n1: ParserUtilitiesTests.this.Node
6552 ===> org.kiama.example.oberon0.L3.c.CAddrType.toString(): String
6484 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.<init>(mode: org.kiama.example.oberon0.L3.source.Mode,ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.ParamInfo
1165 ===> org.kiama.example.RISC.RISCISA.BEQ.<init>(label: Int): org.kiama.example.RISC.RISCISA.BEQ
1147 ===> org.kiama.example.RISC.RISCISA.WRL.productElement(x$1: Int): Any
8577 ===> org.kiama.example.obr.RISCTree.RemW.toString(): String
7713 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productArity: Int
2482 ===> org.kiama.example.iswim.compiler.Syntax.Apply.f: org.kiama.example.iswim.compiler.Syntax.Expr
3965 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productIterator: Iterator[Any]
8339 ===> org.kiama.example.obr.RISCTree.Read.toString(): String
9056 ===> org.kiama.example.obr.SPARCTree.MulW.toString(): String
3661 ===> org.kiama.example.iswim.secd.SECDBase.PushType.ty: org.kiama.example.iswim.secd.SECDBase.TypeValue
560 ===> org.kiama.example.RISC.RISCISA.MVNI.productPrefix: String
10406 ===> org.kiama.example.til.AST.IfThen.toString(): String
8565 ===> org.kiama.example.obr.RISCTree.RemW.l: org.kiama.example.obr.RISCTree.Datum
3066 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productPrefix: String
2687 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productElement(x$1: Int): Any
10500 ===> org.kiama.example.til.AST.Write.toString(): String
4310 ===> org.kiama.example.json.JSONTree.JNumber.toString(): String
10866 ===> org.kiama.machine.Machine.name: String
10516 ===> org.kiama.example.til.AST.Id.productIterator: Iterator[Any]
5508 ===> org.kiama.example.oberon0.L0.c.CGeExp.productPrefix: String
8972 ===> org.kiama.example.obr.SPARCTree.CmpltW.l: org.kiama.example.obr.SPARCTree.Datum
12327 ===> org.kiama.util.Environments.MultipleEntity.productElement(x$1: Int): Any
4858 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2272 ===> org.kiama.example.iswim.compiler.Syntax.Not.productElement(x$1: Int): Any
7816 ===> org.kiama.example.obr.ObrTree.Expression.<init>(): org.kiama.example.obr.ObrTree.Expression
4368 ===> org.kiama.example.json.PrettyPrinting.defaultIndent: Int
12430 ===> org.kiama.util.ParserUtilities.constToTupleFunction4[A, B, C, D, R](r: (A, B, C, D) => R): ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D] => R
1145 ===> org.kiama.example.RISC.RISCISA.WRL.productPrefix: String
1989 ===> org.kiama.example.iswim.compiler.Syntax.Variable.s: String
6022 ===> org.kiama.example.oberon0.L0.source.DivExp.left: org.kiama.example.oberon0.L0.source.Expression
0 ===> org.kiama.example.lambda2.ReduceSubst.s: org.kiama.rewriting.Rewriter.Strategy
6293 ===> org.kiama.example.oberon0.L2.Lifter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10561 ===> org.kiama.example.til.AST.Str.toString(): String
12169 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.imperative.Parser.idn: Parser.this.Parser[String]
12213 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.lambda3.Parser.name: Parser.this.Parser[org.kiama.rewriting.NominalAST.Name]
9630 ===> org.kiama.example.picojava.AbstractSyntax.Block.BlockStmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]
7109 ===> org.kiama.example.oberon0.base.c.CVarDecl.productIterator: Iterator[Any]
10006 ===> org.kiama.example.prolog.PrologTree.Program.productIterator: Iterator[Any]
6585 ===> org.kiama.example.oberon0.L3.c.CStrExp.productIterator: Iterator[Any]
12230 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5862 ===> org.kiama.example.oberon0.L0.source.LtExp.left: org.kiama.example.oberon0.L0.source.Expression
0 ===> org.kiama.example.oberon0.L0.Parser.expression: Parser.this.Parser[org.kiama.example.oberon0.L0.source.Expression]
9128 ===> org.kiama.example.obr.SPARCTree.SubW.toString(): String
8045 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productElement(x$1: Int): Any
0 ===> org.kiama.example.lambda2.ReduceSubst.subsOpn: org.kiama.rewriting.Rewriter.Strategy
1344 ===> org.kiama.example.RISC.RISCISA.prettyprint(emitter: org.kiama.util.Emitter,code: org.kiama.example.RISC.RISCISA.AssemCode): Unit
6977 ===> org.kiama.example.oberon0.L4.source.FieldIdn.toString(): String
7250 ===> org.kiama.example.oberon0.base.c.CIntExp.productIterator: Iterator[Any]
9485 ===> org.kiama.example.oneohonecompanies.Company.Company.productIterator: Iterator[Any]
8630 ===> org.kiama.example.obr.RISCTree.Local.productIterator: Iterator[Any]
0 ===> org.kiama.example.obr.SyntaxAnalysis.ident: SyntaxAnalysis.this.PackratParser[org.kiama.example.obr.ObrTree.Identifier]
8190 ===> org.kiama.example.obr.RISCTree.RISCProg.productPrefix: String
2377 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.body: org.kiama.example.iswim.compiler.Syntax.Expr
2494 ===> org.kiama.example.iswim.compiler.Syntax.Apply.toString(): String
6094 ===> org.kiama.example.oberon0.L0.source.NegExp.toString(): String
5809 ===> org.kiama.example.oberon0.L0.source.Assignment.toString(): String
0 ===> org.kiama.example.iswim.secd.StringOps.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
1116 ===> org.kiama.example.RISC.RISCISA.WRD.productIterator: Iterator[Any]
6639 ===> org.kiama.example.oberon0.L3.source.ProcDecl.body: org.kiama.example.oberon0.base.source.Block
4982 ===> org.kiama.example.lambda3.AST.Var.toString(): String
9433 ===> org.kiama.example.obr.SymbolTable.UnknownType.productElement(x$1: Int): Any
11535 ===> org.kiama.rewriting.Rewriter.strategyf(f: Rewriter.this.Term => Option[Rewriter.this.Term]): Rewriter.this.Strategy
4290 ===> org.kiama.example.json.JSONTree.JString.productIterator: Iterator[Any]
835 ===> org.kiama.example.RISC.RISCISA.CHKI.toString(): String
11804 ===> org.kiama.rewriting.RewriterTests.Same.productPrefix: String
3875 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.hashCode(): Int
12554 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n5: ParserUtilitiesTests.this.Node
8761 ===> org.kiama.example.obr.SPARCTree.Bne.productElement(x$1: Int): Any
7405 ===> org.kiama.example.obr.Driver.spillEnvirFlag_$eq(x$1: Boolean): Unit
12463 ===> org.kiama.util.ParserUtilitiesTests.Tup2.n2: ParserUtilitiesTests.this.Node
3753 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.toString(): String
1695 ===> org.kiama.example.imperative.AST.Mul.toString(): String
5375 ===> org.kiama.example.oberon0.L0.c.CTypeDef.toString(): String
10453 ===> org.kiama.example.til.AST.For.b: Seq[org.kiama.example.til.AST.Stat]
5417 ===> org.kiama.example.oberon0.L0.c.CEqExp.toString(): String
6282 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10908 ===> org.kiama.machine.Machine.ParamUpdate.toString(): String
0 ===> scala.util.parsing.combinator.Parsers.success[T](v: T): Parsers.this.Parser[T]
10037 ===> org.kiama.example.prolog.PrologTree.Rule.hd: org.kiama.example.prolog.PrologTree.Term
593 ===> org.kiama.example.RISC.RISCISA.ADDI.a: org.kiama.example.RISC.RISCISA.RegNo
11126 ===> org.kiama.output.PrettyPrinter.pretty(d: PrettyPrinter.this.Doc,w: PrettyPrinter.this.Width): PrettyPrinter.this.Layout
1762 ===> org.kiama.example.imperative.AST.Asgn.productPrefix: String
3271 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.toString(): String
4317 ===> org.kiama.example.json.JSONTree.JTrue.<init>(): org.kiama.example.json.JSONTree.JTrue
2047 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productArity: Int
10549 ===> org.kiama.example.til.AST.Num.productIterator: Iterator[Any]
3863 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.toString(): String
758 ===> org.kiama.example.RISC.RISCISA.MOD.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOD
8953 ===> org.kiama.example.obr.SPARCTree.CmpgtW.l: org.kiama.example.obr.SPARCTree.Datum
7023 ===> org.kiama.example.oberon0.base.TransformingDriver.pprintiastFlag: Boolean
6826 ===> org.kiama.example.oberon0.L4.c.CRecordType.toString(): String
3903 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productIterator: Iterator[Any]
0 ===> org.kiama.example.obr.SyntaxAnalysis.optelseend: SyntaxAnalysis.this.Parser[List[org.kiama.example.obr.ObrTree.Statement]]
11303 ===> org.kiama.rewriting.NominalRewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[NominalRewriter.this.Term,NominalRewriter.this.Term] with Serializable
8280 ===> org.kiama.example.obr.RISCTree.Ret.productElement(x$1: Int): Any
10686 ===> org.kiama.example.til.AST.Ne.toString(): String
12340 ===> org.kiama.util.Environments.UnknownEntity.productPrefix: String
6261 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productPrefix: String
1176 ===> org.kiama.example.RISC.RISCISA.BEQ.toString(): String
870 ===> org.kiama.example.RISC.RISCISA.ANDI.productArity: Int
0 ===> org.kiama.example.oberon0.base.Parser.statement: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
3848 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.toString(): String
6820 ===> org.kiama.example.oberon0.L4.c.CRecordType.productPrefix: String
11360 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productElement(x$1: Int): Any
2338 ===> org.kiama.example.iswim.compiler.Syntax.Binding.v: org.kiama.example.iswim.compiler.Syntax.Variable
0 ===> scala.Product5.productArity: Int
7022 ===> org.kiama.example.oberon0.base.TransformingDriver.printiastFlag_$eq(x$1: Boolean): Unit
4637 ===> org.kiama.example.lambda2.AST.Letp.productElement(x$1: Int): Any
7898 ===> org.kiama.example.obr.ObrTree.GreaterExp.productArity: Int
11689 ===> org.kiama.rewriting.Rewriter.everywheretd(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
5300 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productElement(x$1: Int): Any
4860 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4425 ===> org.kiama.example.lambda.AST.Lam.<init>(x: org.kiama.example.lambda.AST.Idn,e: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.Lam
5851 ===> org.kiama.example.oberon0.L0.source.NeExp.productElement(x$1: Int): Any
2607 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.p: org.kiama.example.iswim.compiler.Syntax.Pattern
0 ===> org.kiama.example.oberon0.base.Parser.statements: Parser.this.Parser[org.kiama.example.oberon0.base.source.Block]
864 ===> org.kiama.example.RISC.RISCISA.ANDI.toString(): String
2561 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productArity: Int
9299 ===> org.kiama.example.obr.SymbolTable.IntType.productArity: Int
7313 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productElement(x$1: Int): Any
4554 ===> org.kiama.example.lambda2.AST.Lam.productArity: Int
10629 ===> org.kiama.example.til.AST.Add.toString(): String
10758 ===> org.kiama.example.transform.AST.VarDecl.toString(): String
6211 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.cond: org.kiama.example.oberon0.base.c.CExpression
481 ===> org.kiama.example.RISC.RISC.memory(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
11378 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productArity: Int
2027 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productPrefix: String
4042 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productPrefix: String
0 ===> org.kiama.example.lambda3.Parser.variable: Parser.this.Parser[org.kiama.example.lambda3.AST.Var]
1273 ===> org.kiama.example.RISC.RISCISA.BR.apply(label: Int): org.kiama.example.RISC.RISCISA.BR
0 ===> scala.Tuple2._2: T2
7540 ===> org.kiama.example.obr.ObrTree.EnumVar.idn: org.kiama.example.obr.ObrTree.Identifier
12130 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10623 ===> org.kiama.example.til.AST.Add.productIterator: Iterator[Any]
4985 ===> org.kiama.example.lambda3.AST.Var.productPrefix: String
8008 ===> org.kiama.example.obr.ObrTree.ModExp.productArity: Int
5621 ===> org.kiama.example.oberon0.L0.c.CModExp.left: org.kiama.example.oberon0.base.c.CExpression
1999 ===> org.kiama.example.iswim.compiler.Syntax.Variable.toString(): String
0 ===> org.kiama.example.oberon0.L3.TypeAnalyser.numparams: org.kiama.example.oberon0.base.source.IdnUse => Option[Int]
5462 ===> org.kiama.example.oberon0.L0.c.CLeExp.right: org.kiama.example.oberon0.base.c.CExpression
10700 ===> org.kiama.example.til.TIL2_1.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10542 ===> org.kiama.example.til.AST.Num.n: Int
4461 ===> org.kiama.example.lambda.AST.Sub.m: org.kiama.example.lambda.AST.Exp
7880 ===> org.kiama.example.obr.ObrTree.FieldExp.productElement(x$1: Int): Any
1289 ===> org.kiama.example.RISC.RISCISA.BSR.apply(label: Int): org.kiama.example.RISC.RISCISA.BSR
9034 ===> org.kiama.example.obr.SPARCTree.LdW.productIterator: Iterator[Any]
2230 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.l: org.kiama.example.iswim.compiler.Syntax.Expr
11116 ===> org.kiama.output.PrettyPrinter.Doc.apply(iw: (PrettyPrinter.this.Indent, PrettyPrinter.this.Width)): ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout)
679 ===> org.kiama.example.RISC.RISCISA.MULI.im: org.kiama.example.RISC.RISCISA.Imm
9590 ===> org.kiama.example.oneohonecompanies.Precedence.precedence(c: org.kiama.example.oneohonecompanies.Company.Company): Boolean
2418 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productElement(x$1: Int): Any
1993 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productPrefix: String
0 ===> org.kiama.example.oberon0.L4.TypeAnalyser.super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
0 ===> scala.Tuple3.toString(): String
603 ===> org.kiama.example.RISC.RISCISA.ADDI.productArity: Int
9234 ===> org.kiama.example.obr.SymbolTable.Variable.toString(): String
7657 ===> org.kiama.example.obr.ObrTree.ForStmt.productPrefix: String
5313 ===> org.kiama.example.oberon0.L0.SymbolTable.isModule(e: SymbolTable.this.Entity): Boolean
540 ===> org.kiama.example.RISC.RISCISA.MVN.productArity: Int
4273 ===> org.kiama.example.json.JSONTree.JArray.productIterator: Iterator[Any]
12323 ===> org.kiama.util.Environments.MultipleEntity.<init>(): Environments.this.MultipleEntity
0 ===> org.kiama.example.lambda2.ParLazy.letLift: org.kiama.rewriting.Rewriter.Strategy
5312 ===> org.kiama.example.oberon0.L0.SymbolTable.isError(e: SymbolTable.this.Entity): Boolean
9453 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productArity: Int
0 ===> org.kiama.example.iswim.secd.IOOps.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
9934 ===> org.kiama.example.prolog.Interpreter.TermGoal.toString(): String
2439 ===> org.kiama.example.iswim.compiler.Syntax.Import.toString(): String
5737 ===> org.kiama.example.oberon0.L0.source.ConstDecl.toString(): String
9279 ===> org.kiama.example.obr.SymbolTable.Multiple.productIterator: Iterator[Any]
3657 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.toString(): String
871 ===> org.kiama.example.RISC.RISCISA.ANDI.productElement(x$1: Int): Any
3189 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productElement(x$1: Int): Any
1212 ===> org.kiama.example.RISC.RISCISA.BGE.label: Int
5035 ===> org.kiama.example.lambda3.AST.EquivQuery.e1: org.kiama.example.lambda3.AST.Exp
4915 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
6669 ===> org.kiama.example.oberon0.L3.source.VarMode.toString(): String
11644 ===> org.kiama.rewriting.Rewriter.topdown(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
5352 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productIterator: Iterator[Any]
8894 ===> org.kiama.example.obr.SPARCTree.Cond.cond: org.kiama.example.obr.SPARCTree.Datum
10802 ===> org.kiama.example.transform.AST.BinExp.left: org.kiama.example.transform.AST.Exp
797 ===> org.kiama.example.RISC.RISCISA.CMP.toString(): String
9660 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productArity: Int
11221 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.toString(): String
3994 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.toString(): String
3518 ===> org.kiama.example.iswim.secd.SECDBase.Enter.nms: List[org.kiama.example.iswim.secd.SECDBase.Name]
3595 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.toString(): String
402 ===> org.kiama.attribution.DynamicAttributionTests.Pair.toString(): String
4816 ===> org.kiama.example.lambda2.Lambda.help: Unit
4670 ===> org.kiama.example.lambda2.AST.IntType.productPrefix: String
10062 ===> org.kiama.example.prolog.PrologTree.Var.productPrefix: String
5849 ===> org.kiama.example.oberon0.L0.source.NeExp.productPrefix: String
12139 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10009 ===> org.kiama.example.prolog.PrologTree.Program.toString(): String
0 ===> org.kiama.example.til.TIL1_1.program: TIL1_1.this.Parser[org.kiama.example.til.AST.Program]
6503 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.params: List[SymbolTable.this.ParamInfo]
7485 ===> org.kiama.example.obr.ObrTree.BoolVar.idn: org.kiama.example.obr.ObrTree.Identifier
7508 ===> org.kiama.example.obr.ObrTree.ArrayVar.productPrefix: String
12221 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.genDiv(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Div]
11358 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productPrefix: String
7625 ===> org.kiama.example.obr.ObrTree.AssignStmt.toString(): String
0 ===> org.kiama.example.obr.SyntaxAnalysis.variabledecls: SyntaxAnalysis.this.Parser[List[org.kiama.example.obr.ObrTree.Declaration]]
10198 ===> org.kiama.example.prolog.SymbolTable.AtomType.toString(): String
9751 ===> org.kiama.example.picojava.AbstractSyntax.Dot.ObjectReference: org.kiama.example.picojava.AbstractSyntax.Access
0 ===> scala.Any.$eq$eq(x$1: Any): Boolean
2103 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productPrefix: String
4511 ===> org.kiama.example.lambda2.AST.Num.n: Int
5591 ===> org.kiama.example.oberon0.L0.c.CMulExp.productIterator: Iterator[Any]
3523 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productArity: Int
2347 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productIterator: Iterator[Any]
976 ===> org.kiama.example.RISC.RISCISA.LDW.productElement(x$1: Int): Any
9560 ===> org.kiama.example.oneohonecompanies.Company.DU.productArity: Int
2705 ===> org.kiama.example.iswim.compiler.Syntax.Val.productIterator: Iterator[Any]
891 ===> org.kiama.example.RISC.RISCISA.OR.productArity: Int
10110 ===> org.kiama.example.prolog.PrologTree.Pred.ts: List[org.kiama.example.prolog.PrologTree.Term]
9995 ===> org.kiama.example.prolog.Main.process(querytree: org.kiama.example.prolog.PrologTree.Literal): Unit
3531 ===> org.kiama.example.iswim.secd.SECDBase.Enter.toString(): String
2818 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productIterator: Iterator[Any]
11858 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6821 ===> org.kiama.example.oberon0.L4.c.CRecordType.productArity: Int
0 ===> org.kiama.example.lambda.Parser.factor: Parser.this.PackratParser[org.kiama.example.lambda.AST.Exp]
12614 ===> org.kiama.util.GeneratingREPLBase.processline(line: String): Unit
6411 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.singleCaseToDoc(kase: org.kiama.example.oberon0.L2.source.Case): PrettyPrinter.this.Doc
6159 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.optSectionToDoc(section: String,optds: Option[List[org.kiama.example.oberon0.base.source.Declaration]]): PrettyPrinter.this.Doc
9400 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productPrefix: String
0 ===> org.kiama.example.oberon0.L0.Parser.intexp: Parser.this.Parser[org.kiama.example.oberon0.L0.source.IntExp]
7939 ===> org.kiama.example.obr.ObrTree.IndexExp.toString(): String
0 ===> org.kiama.example.lambda2.Par.subsOpn: org.kiama.rewriting.Rewriter.Strategy
1898 ===> org.kiama.example.imperative.Generator.genSeqn(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Seqn]
12289 ===> org.kiama.util.JLineConsole.terminal: jline.Terminal
6409 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.condToDoc(cond: org.kiama.example.oberon0.L2.source.Condition): PrettyPrinter.this.Doc
0 ===> scala.collection.SeqLike.toString(): String
0 ===> org.kiama.example.lambda2.ParLazy.letDrop: org.kiama.rewriting.Rewriter.Strategy
2803 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productIterator: Iterator[Any]
1432 ===> org.kiama.example.dataflow.DataflowAST.Block.productElement(x$1: Int): Any
3963 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productArity: Int
3762 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productIterator: Iterator[Any]
478 ===> org.kiama.example.RISC.RISC.main: Unit
845 ===> org.kiama.example.RISC.RISCISA.AND.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.AND
6127 ===> org.kiama.example.oberon0.L0.source.IntExp.productIterator: Iterator[Any]
383 ===> org.kiama.attribution.Decorators.error(t: T): Nothing
10661 ===> org.kiama.example.til.AST.Eq.productIterator: Iterator[Any]
8383 ===> org.kiama.example.obr.RISCTree.CmpeqW.l: org.kiama.example.obr.RISCTree.Datum
5706 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productArity: Int
9431 ===> org.kiama.example.obr.SymbolTable.UnknownType.productPrefix: String
4232 ===> org.kiama.example.json.JSONTree.JObject.fields: List[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)]
1363 ===> org.kiama.example.dataflow.LivenessImpl.out: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
563 ===> org.kiama.example.RISC.RISCISA.MVNI.productIterator: Iterator[Any]
6511 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productIterator: Iterator[Any]
12429 ===> org.kiama.util.ParserUtilities.constToTupleFunction3[A, B, C, R](r: (A, B, C) => R): ParserUtilities.this.~[ParserUtilities.this.~[A,B],C] => R
840 ===> org.kiama.example.RISC.RISCISA.AND.b: org.kiama.example.RISC.RISCISA.RegNo
4279 ===> org.kiama.example.json.JSONTree.JArray.toString(): String
4547 ===> org.kiama.example.lambda2.AST.Lam.e: org.kiama.example.lambda2.AST.Exp
8991 ===> org.kiama.example.obr.SPARCTree.DivW.l: org.kiama.example.obr.SPARCTree.Datum
7010 ===> org.kiama.example.oberon0.base.Driver.resetflags(): Unit
11465 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productIterator: Iterator[Any]
6783 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.ident: String
9086 ===> org.kiama.example.obr.SPARCTree.Not.productElement(x$1: Int): Any
1561 ===> org.kiama.example.dataflow.Optimise.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1578 ===> org.kiama.example.imperative.AST.Num.productPrefix: String
3998 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.pn: org.kiama.example.iswim.secd.SECDBase.Name
9775 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productArity: Int
8508 ===> org.kiama.example.obr.RISCTree.LdW.toString(): String
3716 ===> org.kiama.example.iswim.secd.SECDBase.GetType.toString(): String
11527 ===> org.kiama.rewriting.Rewriter.Strategy.$plus(q: => Rewriter.this.Strategy): Rewriter.this.PlusStrategy
0 ===> org.kiama.example.transform.Parser.exp: Parser.this.PackratParser[org.kiama.example.transform.AST.ExpR]
10986 ===> org.kiama.output.Infix.productArity: Int
3928 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.message: String
9300 ===> org.kiama.example.obr.SymbolTable.IntType.productElement(x$1: Int): Any
7517 ===> org.kiama.example.obr.ObrTree.ArrayVar.toString(): String
3349 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productArity: Int
11196 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.toString(): String
2614 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productArity: Int
10916 ===> org.kiama.machine.Machine.step: Boolean
7634 ===> org.kiama.example.obr.ObrTree.ExitStmt.productPrefix: String
2245 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.toString(): String
1839 ===> org.kiama.example.imperative.ASTNonCase.Num.arity: Int
10991 ===> org.kiama.output.Infix.toString(): String
7001 ===> org.kiama.example.oberon0.base.Driver.pprintastFlag_$eq(x$1: Boolean): Unit
1784 ===> org.kiama.example.imperative.AST.While.productElement(x$1: Int): Any
3713 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productIterator: Iterator[Any]
7855 ===> org.kiama.example.obr.ObrTree.EqualExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.EqualExp
5530 ===> org.kiama.example.oberon0.L0.c.CAddExp.productElement(x$1: Int): Any
6437 ===> org.kiama.example.oberon0.L3.NameAnalyser.envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
4254 ===> org.kiama.example.json.JSONTree.JName.productArity: Int
4196 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.toString(): String
4305 ===> org.kiama.example.json.JSONTree.JNumber.productArity: Int
8883 ===> org.kiama.example.obr.SPARCTree.AddW.productElement(x$1: Int): Any
4776 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
2674 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.toString(): String
10981 ===> org.kiama.output.Infix.side: org.kiama.output.Side
5775 ===> org.kiama.example.oberon0.L0.source.TypeDecl.toString(): String
7332 ===> org.kiama.example.oberon0.base.source.IdnDef.productElement(x$1: Int): Any
4138 ===> org.kiama.example.iswim.secd.StringOps.PushString.productElement(x$1: Int): Any
7670 ===> org.kiama.example.obr.ObrTree.IfStmt.cond: org.kiama.example.obr.ObrTree.Expression
12591 ===> org.kiama.util.PositionedParserUtilities.$anon.<init>(): PositionedParserUtilities.this.Parser[T]
1099 ===> org.kiama.example.RISC.RISCISA.RD.productIterator: Iterator[Any]
6256 ===> org.kiama.example.oberon0.L1.source.WhileStatement.block: org.kiama.example.oberon0.base.source.Block
2099 ===> org.kiama.example.iswim.compiler.Syntax.Divide.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Divide
9525 ===> org.kiama.example.oneohonecompanies.Company.Employee.productArity: Int
8826 ===> org.kiama.example.obr.SPARCTree.Ret.productArity: Int
12181 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12206 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4414 ===> org.kiama.example.lambda.AST.Var.productIterator: Iterator[Any]
934 ===> org.kiama.example.RISC.RISCISA.XOR.productElement(x$1: Int): Any
2524 ===> org.kiama.example.iswim.compiler.Syntax.While.<init>(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.While
1798 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
594 ===> org.kiama.example.RISC.RISCISA.ADDI.b: org.kiama.example.RISC.RISCISA.RegNo
5408 ===> org.kiama.example.oberon0.L0.c.CEqExp.productPrefix: String
3729 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productPrefix: String
741 ===> org.kiama.example.RISC.RISCISA.MOD.b: org.kiama.example.RISC.RISCISA.RegNo
0 ===> org.kiama.example.iswim.compiler.Parser.factor: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
3398 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productPrefix: String
2182 ===> org.kiama.example.iswim.compiler.Syntax.Less.productIterator: Iterator[Any]
9212 ===> org.kiama.example.obr.SymbolTable.reset(): Unit
8501 ===> org.kiama.example.obr.RISCTree.LdW.productElement(x$1: Int): Any
1727 ===> org.kiama.example.imperative.AST.Null.productIterator: Iterator[Any]
12298 ===> org.kiama.util.Emitter.emitln(any: Any): Unit
8466 ===> org.kiama.example.obr.RISCTree.DivW.productArity: Int
10514 ===> org.kiama.example.til.AST.Id.productArity: Int
2547 ===> org.kiama.example.iswim.compiler.Syntax.Block.productElement(x$1: Int): Any
11933 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.oberon0.L1.Parser.super$statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
1394 ===> org.kiama.example.dataflow.DataflowAST.While.productElement(x$1: Int): Any
1448 ===> org.kiama.example.dataflow.DataflowAST.Return.productArity: Int
5769 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productIterator: Iterator[Any]
6900 ===> org.kiama.example.oberon0.L4.source.IndexExp.productArity: Int
9312 ===> org.kiama.example.obr.SymbolTable.BoolType.toString(): String
4236 ===> org.kiama.example.json.JSONTree.JObject.productPrefix: String
2574 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.<init>(fields: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Tuple
8861 ===> org.kiama.example.obr.SPARCTree.Write.productPrefix: String
5045 ===> org.kiama.example.lambda3.AST.EquivQuery.productIterator: Iterator[Any]
5184 ===> org.kiama.example.oberon0.L0.NameAnalyser.entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): NameAnalyser.this.Entity
0 ===> scala.Product2.productElement(n: Int): Any
2901 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productIterator: Iterator[Any]
6434 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
11125 ===> org.kiama.output.PrettyPrinter.nest$default$2: PrettyPrinter.this.Indent @scala.annotation.unchecked.uncheckedVariance
1265 ===> org.kiama.example.RISC.RISCISA.BR.productArity: Int
4852 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4655 ===> org.kiama.example.lambda2.AST.Bind.productArity: Int
7797 ===> org.kiama.example.obr.ObrTree.Catch.idn: org.kiama.example.obr.ObrTree.Identifier
6049 ===> org.kiama.example.oberon0.L0.source.ModExp.productElement(x$1: Int): Any
8446 ===> org.kiama.example.obr.RISCTree.CmpltW.productPrefix: String
8536 ===> org.kiama.example.obr.RISCTree.NegW.productArity: Int
804 ===> org.kiama.example.RISC.RISCISA.CMPI.toString(): String
4851 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7781 ===> org.kiama.example.obr.ObrTree.TryBody.<init>(stmts: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.TryBody
5061 ===> org.kiama.example.lambda3.AST.EvalQuery.productArity: Int
12449 ===> org.kiama.util.ParserUtilitiesTests.Node.productPrefix: String
4908 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8037 ===> org.kiama.example.obr.ObrTree.NotEqualExp.left: org.kiama.example.obr.ObrTree.Expression
6491 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productElement(x$1: Int): Any
6757 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productIterator: Iterator[Any]
6905 ===> org.kiama.example.oberon0.L4.source.IndexExp.toString(): String
6640 ===> org.kiama.example.oberon0.L3.source.ProcDecl.idnuse: org.kiama.example.oberon0.base.source.IdnUse
8465 ===> org.kiama.example.obr.RISCTree.DivW.productPrefix: String
8847 ===> org.kiama.example.obr.SPARCTree.StW.productIterator: Iterator[Any]
1864 ===> org.kiama.example.imperative.ASTNonCase.Sub.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
7289 ===> org.kiama.example.oberon0.base.source.Statement.<init>(): org.kiama.example.oberon0.base.source.Statement
0 ===> org.kiama.example.oberon0.L0.NameAnalyser.value: org.kiama.example.oberon0.L0.source.Expression => Int
5080 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productElement(x$1: Int): Any
8411 ===> org.kiama.example.obr.RISCTree.CmpneW.productIterator: Iterator[Any]
5934 ===> org.kiama.example.oberon0.L0.source.GeExp.toString(): String
0 ===> org.kiama.example.til.TIL1_1.factor: TIL1_1.this.PackratParser[org.kiama.example.til.AST.Exp]
9957 ===> org.kiama.example.prolog.Interpreter.MatchGoal.left: org.kiama.example.prolog.PrologTree.Term
11754 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7892 ===> org.kiama.example.obr.ObrTree.GreaterExp.right: org.kiama.example.obr.ObrTree.Expression
7011 ===> org.kiama.example.oberon0.base.Driver.processargs(args: List[String]): Boolean
7632 ===> org.kiama.example.obr.ObrTree.ExitStmt.<init>(): org.kiama.example.obr.ObrTree.ExitStmt
7613 ===> org.kiama.example.obr.ObrTree.AssignStmt.left: org.kiama.example.obr.ObrTree.AssignNode
7582 ===> org.kiama.example.obr.ObrTree.IntConst.productPrefix: String
8793 ===> org.kiama.example.obr.SPARCTree.LabelDef.productPrefix: String
4668 ===> org.kiama.example.lambda2.AST.IntType.<init>(): org.kiama.example.lambda2.AST.IntType
5675 ===> org.kiama.example.oberon0.L0.c.CNegExp.toString(): String
7768 ===> org.kiama.example.obr.ObrTree.TryStmt.productArity: Int
8623 ===> org.kiama.example.obr.RISCTree.Local.offset: Int
8205 ===> org.kiama.example.obr.RISCTree.Beq.dest: org.kiama.example.obr.RISCTree.Label
9994 ===> org.kiama.example.prolog.Main.prompt: String
505 ===> org.kiama.example.RISC.RISCISA.MOV.toString(): String
11024 ===> org.kiama.output.PrettyPrinterBase.PrettyPrintable.toDoc: PrettyPrinterBase.this.Doc
8960 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productArity: Int
9766 ===> org.kiama.example.picojava.AbstractSyntax.Dot.toString(): String
11787 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10400 ===> org.kiama.example.til.AST.IfThen.productIterator: Iterator[Any]
6532 ===> org.kiama.example.oberon0.L3.c.CVoidType.productIterator: Iterator[Any]
11087 ===> org.kiama.output.PrettyPrinterBase.lparen: PrettyPrinterBase.this.Doc
5651 ===> org.kiama.example.oberon0.L0.c.CAndExp.productIterator: Iterator[Any]
7572 ===> org.kiama.example.obr.ObrTree.EnumConst.toString(): String
8987 ===> org.kiama.example.obr.SPARCTree.CmpltW.toString(): String
0 ===> org.kiama.example.lambda2.Parser.number: Parser.this.Parser[org.kiama.example.lambda2.AST.Num]
11199 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.toString(): String
1922 ===> org.kiama.example.iswim.compiler.CodeGenerator.code: org.kiama.example.iswim.compiler.Syntax.Iswim => org.kiama.example.iswim.secd.SECDBase.CodeTree
1416 ===> org.kiama.example.dataflow.DataflowAST.If.productIterator: Iterator[Any]
0 ===> scala.Tuple2.productPrefix: String
12564 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productPrefix: String
4349 ===> org.kiama.example.json.JSONTree.JNull.productPrefix: String
10461 ===> org.kiama.example.til.AST.For.productArity: Int
207 ===> org.kiama.attribution.AttributionTests.EitherTree.toString(): String
8001 ===> org.kiama.example.obr.ObrTree.ModExp.left: org.kiama.example.obr.ObrTree.Expression
9263 ===> org.kiama.example.obr.SymbolTable.Unknown.productElement(x$1: Int): Any
10917 ===> org.kiama.machine.Machine.steps: Unit
2978 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.toString(): String
7542 ===> org.kiama.example.obr.ObrTree.EnumVar.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,consts: List[org.kiama.example.obr.ObrTree.EnumConst]): org.kiama.example.obr.ObrTree.EnumVar
3100 ===> org.kiama.example.iswim.secd.IOOps.Read.productElement(x$1: Int): Any
12237 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
710 ===> org.kiama.example.RISC.RISCISA.DIV.productIterator: Iterator[Any]
12385 ===> org.kiama.util.IO.stringreader(string: String): java.io.BufferedReader
862 ===> org.kiama.example.RISC.RISCISA.ANDI.im: org.kiama.example.RISC.RISCISA.Imm
1722 ===> org.kiama.example.imperative.AST.Null.<init>(): org.kiama.example.imperative.AST.Null
4988 ===> org.kiama.example.lambda3.AST.Var.productIterator: Iterator[Any]
3238 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.toString(): String
8715 ===> org.kiama.example.obr.SPARCTree.SPARC.memsize: Int
2688 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.base.TranslatingDriver.super$usageMessage: String
3016 ===> org.kiama.example.iswim.secd.HeapOps.Get.productElement(x$1: Int): Any
12026 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7620 ===> org.kiama.example.obr.ObrTree.AssignStmt.productArity: Int
1401 ===> org.kiama.example.dataflow.DataflowAST.While.toString(): String
12490 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productArity: Int
1660 ===> org.kiama.example.imperative.AST.Sub.r: org.kiama.example.imperative.AST.Exp
0 ===> org.kiama.example.transform.Parser.ident: Parser.this.Parser[String]
8839 ===> org.kiama.example.obr.SPARCTree.StW.d: org.kiama.example.obr.SPARCTree.Datum
3253 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.toString(): String
0 ===> org.kiama.example.oberon0.L0.TypeAnalyser.basetype: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
8890 ===> org.kiama.example.obr.SPARCTree.AddW.toString(): String
3746 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productElement(x$1: Int): Any
12326 ===> org.kiama.util.Environments.MultipleEntity.productArity: Int
4855 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5497 ===> org.kiama.example.oberon0.L0.c.CGtExp.toString(): String
6445 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.<init>(ident: String,decl: org.kiama.example.oberon0.L3.source.ProcDecl): SymbolTable.this.Procedure
8981 ===> org.kiama.example.obr.SPARCTree.CmpltW.productIterator: Iterator[Any]
1860 ===> org.kiama.example.imperative.ASTNonCase.Add.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Add
11540 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
6538 ===> org.kiama.example.oberon0.L3.c.CVoidType.toString(): String
9580 ===> org.kiama.example.oneohonecompanies.Main.main(args: Array[String]): Unit
3898 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.message: String
10359 ===> org.kiama.example.til.AST.Decl.productPrefix: String
3666 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productArity: Int
6672 ===> org.kiama.example.oberon0.L3.source.VarMode.toString(): String
367 ===> org.kiama.attribution.Decorators.Chain.productArity: Int
3830 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.hashCode(): Int
9909 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productArity: Int
10300 ===> org.kiama.example.repmin.Leaf.productArity: Int
2976 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.hashCode(): Int
1607 ===> org.kiama.example.imperative.AST.Var.toString(): String
0 ===> org.kiama.example.obr.SyntaxAnalysis.expression: SyntaxAnalysis.this.PackratParser[org.kiama.example.obr.ObrTree.Expression]
542 ===> org.kiama.example.RISC.RISCISA.MVN.productIterator: Iterator[Any]
8640 ===> org.kiama.example.obr.RISCTree.Indexed.base: org.kiama.example.obr.RISCTree.Local
8145 ===> org.kiama.example.obr.ObrTree.StarExp.toString(): String
0 ===> org.kiama.util.WhitespaceParser.super$regex(r: scala.util.matching.Regex): WhitespaceParser.this.Parser[String]
0 ===> org.kiama.example.json.SyntaxAnalysis.jtrue: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JTrue]
6405 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
8379 ===> org.kiama.example.obr.RISCTree.Cond.toString(): String
7455 ===> org.kiama.example.obr.ObrTree.IntVar.productPrefix: String
0 ===> org.kiama.example.lambda2.EagerSubst.s: org.kiama.rewriting.Rewriter.Strategy
11476 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.r: org.kiama.rewriting.SupportPositionedRewriterTests.Node
3324 ===> org.kiama.example.iswim.secd.RecordOps.Fields.toString(): String
3342 ===> org.kiama.example.iswim.secd.RecordOps.GetField.toString(): String
10420 ===> org.kiama.example.til.AST.IfElse.productElement(x$1: Int): Any
0 ===> org.kiama.example.imperative.ASTNonCase.Div.l: org.kiama.example.imperative.ASTNonCase.Exp
2967 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.c: org.kiama.example.iswim.secd.SECDBase.Code
1186 ===> org.kiama.example.RISC.RISCISA.BNE.productElement(x$1: Int): Any
12514 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productElement(x$1: Int): Any
10965 ===> org.kiama.output.Prefix.productArity: Int
5723 ===> org.kiama.example.oberon0.L0.source.ConstDecl.exp: org.kiama.example.oberon0.L0.source.Expression
1037 ===> org.kiama.example.RISC.RISCISA.STW.productPrefix: String
7064 ===> org.kiama.example.oberon0.base.c.CProgram.decls: List[org.kiama.example.oberon0.base.c.CDeclaration]
1244 ===> org.kiama.example.RISC.RISCISA.BGT.label: Int
3567 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.nm: org.kiama.example.iswim.secd.SECDBase.Name
12579 ===> org.kiama.util.Patterns.HasParent.unapply[T <: org.kiama.attribution.Attributable](x: T): Some[(T, org.kiama.attribution.Attributable)]
2883 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productPrefix: String
0 ===> org.kiama.example.lambda2.Parser.idn: scala.util.matching.Regex
12008 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7503 ===> org.kiama.example.obr.ObrTree.ArrayVar.size: Int
5042 ===> org.kiama.example.lambda3.AST.EquivQuery.productPrefix: String
12363 ===> org.kiama.util.Environments.lookup$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
10572 ===> org.kiama.example.til.AST.Str.toString(): String
1822 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7035 ===> org.kiama.example.oberon0.base.TranslatingDriver.pprintcastFlag_$eq(x$1: Boolean): Unit
0 ===> scala.collection.TraversableOnce.mkString(sep: String): String
0 ===> org.kiama.example.oberon0.base.Parser.ident: Parser.this.Parser[String]
5369 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productIterator: Iterator[Any]
2698 ===> org.kiama.example.iswim.compiler.Syntax.Val.e: org.kiama.example.iswim.compiler.Syntax.Expr
2984 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productIterator: Iterator[Any]
0 ===> org.kiama.example.prolog.SyntaxAnalysis.cut: SyntaxAnalysis.this.Parser[org.kiama.example.prolog.PrologTree.Cut]
8604 ===> org.kiama.example.obr.RISCTree.SequenceDatum.d: org.kiama.example.obr.RISCTree.Datum
11255 ===> org.kiama.rewriting.NominalAST.Name.base: String
2755 ===> org.kiama.example.iswim.driver.Main.$anon.<init>(): org.kiama.example.iswim.driver.SECD
1730 ===> org.kiama.example.imperative.AST.Null.toString(): String
3017 ===> org.kiama.example.iswim.secd.HeapOps.Get.productIterator: Iterator[Any]
1310 ===> org.kiama.example.RISC.RISCISA.Target.label: Int
2830 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productPrefix: String
5185 ===> org.kiama.example.oberon0.L0.NameAnalyser.envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
7732 ===> org.kiama.example.obr.ObrTree.WhileStmt.productArity: Int
7647 ===> org.kiama.example.obr.ObrTree.ForStmt.idn: org.kiama.example.obr.ObrTree.Identifier
986 ===> org.kiama.example.RISC.RISCISA.LDB.a: org.kiama.example.RISC.RISCISA.RegNo
2185 ===> org.kiama.example.iswim.compiler.Syntax.Less.toString(): String
9544 ===> org.kiama.example.oneohonecompanies.Company.PU.productElement(x$1: Int): Any
1871 ===> org.kiama.example.imperative.ASTNonCase.Div.toString(): String
7649 ===> org.kiama.example.obr.ObrTree.ForStmt.max: org.kiama.example.obr.ObrTree.Expression
10726 ===> org.kiama.example.transform.AST.Program.expr: org.kiama.example.transform.AST.ExpR
0 ===> org.kiama.example.dataflow.Parser.parser: Parser.this.PackratParser[org.kiama.example.dataflow.DataflowAST.Stm]
11600 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
4617 ===> org.kiama.example.lambda2.AST.Let.productArity: Int
7527 ===> org.kiama.example.obr.ObrTree.RecordVar.productPrefix: String
10335 ===> org.kiama.example.til.TransformingMain.process(reader: java.io.Reader): Any
11113 ===> org.kiama.output.PrettyPrinter.prune(c: (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout): (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout
2166 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.toString(): String
5044 ===> org.kiama.example.lambda3.AST.EquivQuery.productElement(x$1: Int): Any
9238 ===> org.kiama.example.obr.SymbolTable.Constant.tipe: org.kiama.example.obr.SymbolTable.Type
1679 ===> org.kiama.example.imperative.AST.Mul.l: org.kiama.example.imperative.AST.Exp
10129 ===> org.kiama.example.prolog.PrologTree.Cut.toString(): String
3648 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productPrefix: String
7218 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.toString(): String
6357 ===> org.kiama.example.oberon0.L2.source.Case.productIterator: Iterator[Any]
2408 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.toString(): String
1305 ===> org.kiama.example.RISC.RISCISA.RET.toString(): String
2537 ===> org.kiama.example.iswim.compiler.Syntax.While.toString(): String
995 ===> org.kiama.example.RISC.RISCISA.LDB.productPrefix: String
3542 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productIterator: Iterator[Any]
0 ===> org.kiama.example.iswim.compiler.Parser.exprstmt: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Stmt]
12420 ===> org.kiama.util.ParserUtilities.handleWhiteSpace(in: ParserUtilities.this.Input): Int
4880 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
3813 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.toString(): String
1061 ===> org.kiama.example.RISC.RISCISA.STB.productIterator: Iterator[Any]
6834 ===> org.kiama.example.oberon0.L4.c.CIndexExp.index: org.kiama.example.oberon0.base.c.CExpression
4599 ===> org.kiama.example.lambda2.AST.Opn.toString(): String
12553 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n4: ParserUtilitiesTests.this.Node
9747 ===> org.kiama.example.picojava.AbstractSyntax.Use.toString(): String
11482 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productArity: Int
9051 ===> org.kiama.example.obr.SPARCTree.MulW.productArity: Int
2722 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productArity: Int
9255 ===> org.kiama.example.obr.SymbolTable.Constant.toString(): String
4861 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3403 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.hashCode(): Int
0 ===> org.kiama.example.transform.Parser.parser: Parser.this.PackratParser[org.kiama.example.transform.AST.Program]
5787 ===> org.kiama.example.oberon0.L0.source.NamedType.productIterator: Iterator[Any]
12163 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12290 ===> org.kiama.util.JLineConsole.readLine(prompt: String): String
11316 ===> org.kiama.rewriting.PositionalRewriter.rewriting[T <: PositionalRewriter.this.Term](oldTerm: T,newTerm: T): T
9090 ===> org.kiama.example.obr.SPARCTree.Not.toString(): String
7687 ===> org.kiama.example.obr.ObrTree.IfStmt.toString(): String
10732 ===> org.kiama.example.transform.AST.Program.productPrefix: String
11587 ===> org.kiama.rewriting.Rewriter.$anon.allProduct(p: Product): Option[Rewriter.this.Term]
1560 ===> org.kiama.example.dataflow.Optimise.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1672 ===> org.kiama.example.imperative.AST.Sub.toString(): String
0 ===> org.kiama.example.oberon0.L0.Parser.typedeclsection: Parser.this.Parser[List[org.kiama.example.oberon0.L0.source.TypeDecl]]
2824 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.toString(): String
0 ===> org.kiama.example.oberon0.base.TransformingDriver.super$usageMessage: String
6916 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productPrefix: String
1379 ===> org.kiama.example.dataflow.DataflowAST.Assign.toString(): String
8101 ===> org.kiama.example.obr.ObrTree.PlusExp.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L2.Lifter.super$transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
6864 ===> org.kiama.example.oberon0.L4.c.CFieldExp.toString(): String
1433 ===> org.kiama.example.dataflow.DataflowAST.Block.productIterator: Iterator[Any]
2193 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.r: org.kiama.example.iswim.compiler.Syntax.Expr
3265 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productElement(x$1: Int): Any
2271 ===> org.kiama.example.iswim.compiler.Syntax.Not.productArity: Int
10837 ===> org.kiama.example.transform.AST.Num.toString(): String
1053 ===> org.kiama.example.RISC.RISCISA.STB.toString(): String
3309 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.toString(): String
6899 ===> org.kiama.example.oberon0.L4.source.IndexExp.productPrefix: String
10167 ===> org.kiama.example.prolog.SymbolTable.Predicate.productArity: Int
6327 ===> org.kiama.example.oberon0.L2.source.CaseStatement.exp: org.kiama.example.oberon0.L0.source.Expression
639 ===> org.kiama.example.RISC.RISCISA.SUBI.toString(): String
11265 ===> org.kiama.rewriting.NominalAST.Name.productIterator: Iterator[Any]
9225 ===> org.kiama.example.obr.SymbolTable.Variable.productPrefix: String
9908 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productPrefix: String
1169 ===> org.kiama.example.RISC.RISCISA.BEQ.productArity: Int
8538 ===> org.kiama.example.obr.RISCTree.NegW.productIterator: Iterator[Any]
1771 ===> org.kiama.example.imperative.AST.Asgn.toString(): String
11230 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productArity: Int
12581 ===> org.kiama.util.Positioned.start: scala.util.parsing.input.Position
2534 ===> org.kiama.example.iswim.compiler.Syntax.While.toString(): String
9050 ===> org.kiama.example.obr.SPARCTree.MulW.productPrefix: String
11430 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
2143 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productElement(x$1: Int): Any
11781 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4406 ===> org.kiama.example.lambda.AST.Var.x: org.kiama.example.lambda.AST.Idn
8402 ===> org.kiama.example.obr.RISCTree.CmpneW.l: org.kiama.example.obr.RISCTree.Datum
3233 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productArity: Int
9620 ===> org.kiama.example.picojava.AbstractSyntax.Program.productIterator: Iterator[Any]
1620 ===> org.kiama.example.imperative.AST.Neg.productPrefix: String
5852 ===> org.kiama.example.oberon0.L0.source.NeExp.productIterator: Iterator[Any]
0 ===> org.kiama.example.picojava.Parser.exp: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.Exp]
8722 ===> org.kiama.example.obr.SPARCTree.SPARC.productElement(x$1: Int): Any
6582 ===> org.kiama.example.oberon0.L3.c.CStrExp.productPrefix: String
0 ===> org.kiama.example.lambda2.Parser.ttype0: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Type]
6941 ===> org.kiama.example.oberon0.L4.source.FieldList.toString(): String
0 ===> org.kiama.example.oberon0.base.c.PrettyPrinter.super$toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
12433 ===> org.kiama.util.ParserUtilities.stringToInt(s: String): Either[Int,String]
1197 ===> org.kiama.example.RISC.RISCISA.BLT.<init>(label: Int): org.kiama.example.RISC.RISCISA.BLT
2502 ===> org.kiama.example.iswim.compiler.Syntax.If.thn: org.kiama.example.iswim.compiler.Syntax.Expr
1475 ===> org.kiama.example.dataflow.Foreach.cond: org.kiama.example.dataflow.DataflowAST.Var
11615 ===> org.kiama.rewriting.Rewriter.collectl[T](f: org.kiama.==>[Rewriter.this.Term,T]): Rewriter.this.Term => List[T]
6457 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.toString(): String
5980 ===> org.kiama.example.oberon0.L0.source.OrExp.left: org.kiama.example.oberon0.L0.source.Expression
10341 ===> org.kiama.example.til.AST.Program.productPrefix: String
8223 ===> org.kiama.example.obr.RISCTree.Bne.cond: org.kiama.example.obr.RISCTree.Datum
4648 ===> org.kiama.example.lambda2.AST.Bind.i: org.kiama.example.lambda2.AST.Idn
923 ===> org.kiama.example.RISC.RISCISA.XOR.a: org.kiama.example.RISC.RISCISA.RegNo
2068 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productIterator: Iterator[Any]
11918 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.iswim.secd.IntegerOps.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
0 ===> org.kiama.example.obr.SyntaxAnalysis.fielddecl: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.Identifier]
11966 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5091 ===> org.kiama.example.lambda3.AST.FreshQuery.n: org.kiama.rewriting.NominalAST.Name
9905 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.<init>(ps: Set[(String, org.kiama.example.prolog.PrologTree.Term)]): org.kiama.example.prolog.Interpreter.DisplayGoal
11504 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.toString(): String
4335 ===> org.kiama.example.json.JSONTree.JFalse.productArity: Int
9652 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.Superclass: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse]
0 ===> org.kiama.example.til.TIL1_1.primary: TIL1_1.this.PackratParser[org.kiama.example.til.AST.Exp]
7492 ===> org.kiama.example.obr.ObrTree.BoolVar.productIterator: Iterator[Any]
288 ===> org.kiama.attribution.AttributionTests.PairTree.productElement(x$1: Int): Any
1870 ===> org.kiama.example.imperative.ASTNonCase.Div.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
11114 ===> org.kiama.output.PrettyPrinter.leave(c: (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout): (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout
9946 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productElement(x$1: Int): Any
1214 ===> org.kiama.example.RISC.RISCISA.BGE.toString(): String
10246 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productElement(x$1: Int): Any
11828 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3535 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.nms: List[org.kiama.example.iswim.secd.SECDBase.Name]
7836 ===> org.kiama.example.obr.ObrTree.BoolExp.value: Boolean
12573 ===> org.kiama.util.ParserUtilitiesTests.Tup6.toString(): String
7988 ===> org.kiama.example.obr.ObrTree.MinusExp.productPrefix: String
2635 ===> org.kiama.example.iswim.compiler.Syntax.Match.productIterator: Iterator[Any]
2016 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.toString(): String
11306 ===> org.kiama.rewriting.NominalRewriter.fresh(a: org.kiama.rewriting.NominalAST.Name)(t: NominalRewriter.this.Term): Boolean
3577 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.toString(): String
7365 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
7790 ===> org.kiama.example.obr.ObrTree.TryBody.toString(): String
562 ===> org.kiama.example.RISC.RISCISA.MVNI.productElement(x$1: Int): Any
8024 ===> org.kiama.example.obr.ObrTree.NegExp.productPrefix: String
5111 ===> org.kiama.example.lambda3.AST.SubstQuery.n: org.kiama.rewriting.NominalAST.Name
7101 ===> org.kiama.example.oberon0.base.c.CVarDecl.tipe: org.kiama.example.oberon0.base.c.CType
720 ===> org.kiama.example.RISC.RISCISA.DIVI.b: org.kiama.example.RISC.RISCISA.RegNo
1515 ===> org.kiama.example.dataflow.For.productIterator: Iterator[Any]
10645 ===> org.kiama.example.til.AST.Sub.toString(): String
0 ===> org.kiama.example.obr.SyntaxAnalysis.catchclause: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.Catch]
5654 ===> org.kiama.example.oberon0.L0.c.CAndExp.toString(): String
4801 ===> org.kiama.example.lambda2.Evaluators.mechanisms: scala.collection.immutable.Set[String]
11471 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.toString(): String
974 ===> org.kiama.example.RISC.RISCISA.LDW.productPrefix: String
5299 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productArity: Int
7510 ===> org.kiama.example.obr.ObrTree.ArrayVar.productElement(x$1: Int): Any
6931 ===> org.kiama.example.oberon0.L4.source.FieldList.<init>(idndefs: List[String],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L4.source.FieldList
694 ===> org.kiama.example.RISC.RISCISA.MULI.toString(): String
6853 ===> org.kiama.example.oberon0.L4.c.CFieldExp.field: String
10338 ===> org.kiama.example.til.AST.Program.<init>(ss: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.Program
6394 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productIterator: Iterator[Any]
4815 ===> org.kiama.example.lambda2.Lambda.typecheck_$eq(x$1: Boolean): Unit
7457 ===> org.kiama.example.obr.ObrTree.IntVar.productElement(x$1: Int): Any
2892 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.toString(): String
5084 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.toString(): String
430 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productPrefix: String
8259 ===> org.kiama.example.obr.RISCTree.LabelDef.lab: org.kiama.example.obr.RISCTree.Label
4044 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productElement(x$1: Int): Any
4156 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.hashCode(): Int
4369 ===> org.kiama.example.json.PrettyPrinting.pretty(t: org.kiama.example.json.JSONTree.JValue): String
9261 ===> org.kiama.example.obr.SymbolTable.Unknown.productPrefix: String
9264 ===> org.kiama.example.obr.SymbolTable.Unknown.productIterator: Iterator[Any]
176 ===> org.kiama.attribution.AttributionTests.Leaf.toString(): String
6567 ===> org.kiama.example.oberon0.L3.c.CCall.productElement(x$1: Int): Any
8502 ===> org.kiama.example.obr.RISCTree.LdW.productIterator: Iterator[Any]
7798 ===> org.kiama.example.obr.ObrTree.Catch.stmts: List[org.kiama.example.obr.ObrTree.Statement]
10301 ===> org.kiama.example.repmin.Leaf.productElement(x$1: Int): Any
12406 ===> org.kiama.util.Messaging.messages: scala.collection.mutable.ListBuffer[org.kiama.util.Messaging.Record]
6999 ===> org.kiama.example.oberon0.base.Driver.printastFlag_$eq(x$1: Boolean): Unit
4684 ===> org.kiama.example.lambda2.AST.FunType.t2: org.kiama.example.lambda2.AST.Type
5410 ===> org.kiama.example.oberon0.L0.c.CEqExp.productElement(x$1: Int): Any
252 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productPrefix: String
12124 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4585 ===> org.kiama.example.lambda2.AST.Opn.e1: org.kiama.example.lambda2.AST.Exp
5909 ===> org.kiama.example.oberon0.L0.source.GtExp.productIterator: Iterator[Any]
5785 ===> org.kiama.example.oberon0.L0.source.NamedType.productArity: Int
4518 ===> org.kiama.example.lambda2.AST.Num.productIterator: Iterator[Any]
1071 ===> org.kiama.example.RISC.RISCISA.PSH.b: org.kiama.example.RISC.RISCISA.RegNo
7317 ===> org.kiama.example.oberon0.base.source.EmptyStmt.toString(): String
6452 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productIterator: Iterator[Any]
9282 ===> org.kiama.example.obr.SymbolTable.Multiple.toString(): String
3878 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.toString(): String
5104 ===> org.kiama.example.lambda3.AST.FreshQuery.toString(): String
0 ===> scala.MatchError.<init>(obj: Any): MatchError
9533 ===> org.kiama.example.oneohonecompanies.Company.Employee.toString(): String
7212 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productPrefix: String
10532 ===> org.kiama.example.til.AST.Var.productIterator: Iterator[Any]
1518 ===> org.kiama.example.dataflow.For.toString(): String
4728 ===> org.kiama.example.lambda2.AST.AddOp.toString(): String
2529 ===> org.kiama.example.iswim.compiler.Syntax.While.productArity: Int
4171 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productPrefix: String
8924 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productIterator: Iterator[Any]
9340 ===> org.kiama.example.obr.SymbolTable.ArrayType.toString(): String
1294 ===> org.kiama.example.RISC.RISCISA.RET.<init>(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RET
1661 ===> org.kiama.example.imperative.AST.Sub.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Sub
12565 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productArity: Int
11604 ===> org.kiama.rewriting.Rewriter.$anon.someMap[CC[V, W] <: Map[V,W]](t: CC[Rewriter.this.Term,Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term,Rewriter.this.Term],(Rewriter.this.Term, Rewriter.this.Term),CC[Rewriter.this.Term,Rewriter.this.Term]]): Option[CC[Rewriter.this.Term,Rewriter.this.Term]]
1039 ===> org.kiama.example.RISC.RISCISA.STW.productElement(x$1: Int): Any
8052 ===> org.kiama.example.obr.ObrTree.NotEqualExp.toString(): String
0 ===> org.kiama.example.oberon0.L0.NameAnalyser.entity: org.kiama.example.oberon0.base.source.Identifier => NameAnalyser.this.Entity
7148 ===> org.kiama.example.oberon0.base.c.CBlock.productElement(x$1: Int): Any
6875 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.tipe: org.kiama.example.oberon0.L0.source.TypeDef
6109 ===> org.kiama.example.oberon0.L0.source.NotExp.productElement(x$1: Int): Any
2385 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productIterator: Iterator[Any]
3264 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productArity: Int
1707 ===> org.kiama.example.imperative.AST.Div.productPrefix: String
0 ===> org.scalacheck.Gen.Params.productArity: Int
2646 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.CallCC
10752 ===> org.kiama.example.transform.AST.VarDecl.productIterator: Iterator[Any]
11819 ===> org.kiama.rewriting.RewriterTests.NotSame.toString(): String
2211 ===> org.kiama.example.iswim.compiler.Syntax.Greater.l: org.kiama.example.iswim.compiler.Syntax.Expr
8740 ===> org.kiama.example.obr.SPARCTree.Beq.productPrefix: String
10463 ===> org.kiama.example.til.AST.For.productIterator: Iterator[Any]
7969 ===> org.kiama.example.obr.ObrTree.LessExp.productPrefix: String
10712 ===> org.kiama.example.til.TIL2_2.fortowhile: org.kiama.rewriting.Rewriter.Strategy
5697 ===> org.kiama.example.oberon0.L0.c.CNotExp.toString(): String
3541 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productElement(x$1: Int): Any
1422 ===> org.kiama.example.dataflow.DataflowAST.If.toString(): String
6219 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productElement(x$1: Int): Any
4739 ===> org.kiama.example.lambda2.AST.SubOp.productArity: Int
11627 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
253 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productArity: Int
12438 ===> org.kiama.util.WhitespaceParser.parsingWhitespace: Boolean
1726 ===> org.kiama.example.imperative.AST.Null.productElement(x$1: Int): Any
2738 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productPrefix: String
8558 ===> org.kiama.example.obr.RISCTree.Not.toString(): String
1713 ===> org.kiama.example.imperative.AST.Div.toString(): String
0 ===> org.kiama.attribution.Decorators.out: org.kiama.attribution.Attribution.CachedAttribute[T,U]
4062 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toDoc: SECDBase.this.Doc
3780 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.toString(): String
2965 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.s: ExceptionHandler.this.Stack
0 ===> scala.collection.convert.Wrappers.JMapWrapper.productPrefix: String
6894 ===> org.kiama.example.oberon0.L4.source.IndexExp.exp: org.kiama.example.oberon0.L0.source.Expression
5708 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productIterator: Iterator[Any]
1640 ===> org.kiama.example.imperative.AST.Add.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Add
2052 ===> org.kiama.example.iswim.compiler.Syntax.Plus.toString(): String
10202 ===> org.kiama.example.prolog.SymbolTable.AtomType.productElement(x$1: Int): Any
0 ===> org.kiama.example.oberon0.L0.Parser.typedecl: Parser.this.Parser[org.kiama.example.oberon0.L0.source.TypeDecl]
1184 ===> org.kiama.example.RISC.RISCISA.BNE.productPrefix: String
0 ===> scala.util.parsing.combinator.RegexParsers.parseAll[T](p: RegexParsers.this.Parser[T],in: java.io.Reader): RegexParsers.this.ParseResult[T]
5870 ===> org.kiama.example.oberon0.L0.source.LtExp.productElement(x$1: Int): Any
8350 ===> org.kiama.example.obr.RISCTree.AddW.productArity: Int
4017 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.toString(): String
8317 ===> org.kiama.example.obr.RISCTree.Write.productIterator: Iterator[Any]
8628 ===> org.kiama.example.obr.RISCTree.Local.productArity: Int
299 ===> org.kiama.attribution.AttributionTests.TripleTree.p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)
8887 ===> org.kiama.example.obr.SPARCTree.AddW.toString(): String
11235 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.toString(): String
2898 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productPrefix: String
10250 ===> org.kiama.example.prolog.SymbolTable.UnknownType.toString(): String
740 ===> org.kiama.example.RISC.RISCISA.MOD.a: org.kiama.example.RISC.RISCISA.RegNo
1852 ===> org.kiama.example.imperative.ASTNonCase.Neg.deconstruct: List[org.kiama.example.imperative.ASTNonCase.Exp]
11108 ===> org.kiama.output.PrettyPrinterBase.dot: PrettyPrinterBase.this.Doc
3339 ===> org.kiama.example.iswim.secd.RecordOps.GetField.toString(): String
11379 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productElement(x$1: Int): Any
1846 ===> org.kiama.example.imperative.ASTNonCase.Var.deconstruct: List[org.kiama.example.imperative.ASTNonCase.Idn]
6110 ===> org.kiama.example.oberon0.L0.source.NotExp.productIterator: Iterator[Any]
3406 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.toString(): String
5351 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productElement(x$1: Int): Any
5784 ===> org.kiama.example.oberon0.L0.source.NamedType.productPrefix: String
1192 ===> org.kiama.example.RISC.RISCISA.BNE.toString(): String
5198 ===> org.kiama.example.oberon0.L0.Parser.lhsDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
1292 ===> org.kiama.example.RISC.RISCISA.RET.c: org.kiama.example.RISC.RISCISA.RegNo
8895 ===> org.kiama.example.obr.SPARCTree.Cond.t: org.kiama.example.obr.SPARCTree.Datum
4210 ===> org.kiama.example.iswim.tests.SECDTests.SECD.program: org.kiama.example.iswim.secd.SECDBase.CodeSegment
10059 ===> org.kiama.example.prolog.PrologTree.Var.toString(): String
6048 ===> org.kiama.example.oberon0.L0.source.ModExp.productArity: Int
2850 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productArity: Int
6372 ===> org.kiama.example.oberon0.L2.source.ValCond.productPrefix: String
2515 ===> org.kiama.example.iswim.compiler.Syntax.If.toString(): String
6565 ===> org.kiama.example.oberon0.L3.c.CCall.productPrefix: String
3871 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productArity: Int
3392 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.flds: List[org.kiama.example.iswim.secd.SECDBase.Value]
2212 ===> org.kiama.example.iswim.compiler.Syntax.Greater.r: org.kiama.example.iswim.compiler.Syntax.Expr
4031 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productElement(x$1: Int): Any
12133 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7595 ===> org.kiama.example.obr.ObrTree.ExnConst.idn: org.kiama.example.obr.ObrTree.Identifier
9322 ===> org.kiama.example.obr.SymbolTable.BoolType.toString(): String
2162 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productElement(x$1: Int): Any
1952 ===> org.kiama.example.iswim.compiler.Syntax.Iswim.<init>(): org.kiama.example.iswim.compiler.Syntax.Iswim
11204 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.prio: Int
5748 ===> org.kiama.example.oberon0.L0.source.VarDecl.productArity: Int
4535 ===> org.kiama.example.lambda2.AST.Var.productIterator: Iterator[Any]
11438 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
8940 ===> org.kiama.example.obr.SPARCTree.CmpneW.productPrefix: String
2013 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productIterator: Iterator[Any]
7744 ===> org.kiama.example.obr.ObrTree.RaiseStmt.idn: org.kiama.example.obr.ObrTree.Identifier
0 ===> org.kiama.example.json.SyntaxAnalysis.string: SyntaxAnalysis.this.Parser[String]
11439 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
4451 ===> org.kiama.example.lambda.AST.App.productElement(x$1: Int): Any
368 ===> org.kiama.attribution.Decorators.Chain.productElement(x$1: Int): Any
8627 ===> org.kiama.example.obr.RISCTree.Local.productPrefix: String
10079 ===> org.kiama.example.prolog.PrologTree.Integer.productPrefix: String
8212 ===> org.kiama.example.obr.RISCTree.Beq.productElement(x$1: Int): Any
7530 ===> org.kiama.example.obr.ObrTree.RecordVar.productIterator: Iterator[Any]
5331 ===> org.kiama.example.oberon0.L0.c.CNamedType.productArity: Int
12413 ===> org.kiama.util.Messaging.resetmessages(): Unit
2595 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productArity: Int
4545 ===> org.kiama.example.lambda2.AST.Lam.i: org.kiama.example.lambda2.AST.Idn
2124 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productElement(x$1: Int): Any
4340 ===> org.kiama.example.json.JSONTree.JFalse.toString(): String
11229 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productPrefix: String
10772 ===> org.kiama.example.transform.AST.BinExpR.productArity: Int
2951 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productPrefix: String
6263 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productElement(x$1: Int): Any
7013 ===> org.kiama.example.oberon0.base.Driver.section(emitter: org.kiama.util.Emitter,name: String): Unit
7461 ===> org.kiama.example.obr.ObrTree.IntVar.toString(): String
2782 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productElement(x$1: Int): Any
2531 ===> org.kiama.example.iswim.compiler.Syntax.While.productIterator: Iterator[Any]
1487 ===> org.kiama.example.dataflow.Foreach.toString(): String
2766 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productArity: Int
772 ===> org.kiama.example.RISC.RISCISA.MODI.productElement(x$1: Int): Any
12203 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
568 ===> org.kiama.example.RISC.RISCISA.MVNI.toString(): String
7970 ===> org.kiama.example.obr.ObrTree.LessExp.productArity: Int
11772 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10738 ===> org.kiama.example.transform.AST.Program.toString(): String
1748 ===> org.kiama.example.imperative.AST.Seqn.toString(): String
6650 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productIterator: Iterator[Any]
2721 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productPrefix: String
3181 ===> org.kiama.example.iswim.secd.IntegerOps.Add.toString(): String
1208 ===> org.kiama.example.RISC.RISCISA.BLT.toString(): String
11014 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$plus$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
8999 ===> org.kiama.example.obr.SPARCTree.DivW.productElement(x$1: Int): Any
9227 ===> org.kiama.example.obr.SymbolTable.Variable.productElement(x$1: Int): Any
9950 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.toString(): String
4142 ===> org.kiama.example.iswim.secd.StringOps.PushString.toString(): String
0 ===> org.kiama.example.json.PrettyPrinting.super$pretty(d: PrettyPrinting.this.Doc,w: PrettyPrinting.this.Width): PrettyPrinting.this.Layout
11372 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.r: org.kiama.rewriting.SupportPositionalRewriterTests.Node
5207 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productPrefix: String
12304 ===> org.kiama.util.StringEmitter.emit(any: Any): Unit
5219 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.ident: String
3853 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.message: String
5060 ===> org.kiama.example.lambda3.AST.EvalQuery.productPrefix: String
10582 ===> org.kiama.example.til.AST.Mul.productPrefix: String
2262 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.toString(): String
3840 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productPrefix: String
5422 ===> org.kiama.example.oberon0.L0.c.CNeExp.right: org.kiama.example.oberon0.base.c.CExpression
1177 ===> org.kiama.example.RISC.RISCISA.BEQ.apply(label: Int): org.kiama.example.RISC.RISCISA.BEQ
5622 ===> org.kiama.example.oberon0.L0.c.CModExp.right: org.kiama.example.oberon0.base.c.CExpression
0 ===> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
12407 ===> org.kiama.util.Messaging.sortedmessages: Seq[org.kiama.util.Messaging.Record]
1029 ===> org.kiama.example.RISC.RISCISA.STW.b: org.kiama.example.RISC.RISCISA.RegNo
8433 ===> org.kiama.example.obr.RISCTree.CmpgtW.toString(): String
9991 ===> org.kiama.example.prolog.Main.programtree_$eq(x$1: org.kiama.example.prolog.PrologTree.Program): Unit
306 ===> org.kiama.attribution.AttributionTests.TripleTree.productIterator: Iterator[Any]
3804 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productPrefix: String
10948 ===> org.kiama.output.RightAssoc.productIterator: Iterator[Any]
10005 ===> org.kiama.example.prolog.PrologTree.Program.productElement(x$1: Int): Any
11846 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6172 ===> org.kiama.example.oberon0.L1.c.CIfStatement.tstmt: org.kiama.example.oberon0.base.c.CStatement
0 ===> org.kiama.example.iswim.compiler.Parser.term1: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
9301 ===> org.kiama.example.obr.SymbolTable.IntType.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L4.TypeAnalyser.super$rootconstexpDef: org.kiama.example.oberon0.L0.source.Expression => Boolean
8930 ===> org.kiama.example.obr.SPARCTree.CmpeqW.toString(): String
7229 ===> org.kiama.example.oberon0.base.c.CReturn.productPrefix: String
541 ===> org.kiama.example.RISC.RISCISA.MVN.productElement(x$1: Int): Any
3061 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.toString(): String
3794 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.hashCode(): Int
10964 ===> org.kiama.output.Prefix.productPrefix: String
7559 ===> org.kiama.example.obr.ObrTree.EnumConst.idn: org.kiama.example.obr.ObrTree.Identifier
9680 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productElement(x$1: Int): Any
9635 ===> org.kiama.example.picojava.AbstractSyntax.Block.productArity: Int
6733 ===> org.kiama.example.oberon0.L3.source.PrettyPrinter.paramsToDoc(ds: List[PrettyPrinter.this.Doc],sep: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
8760 ===> org.kiama.example.obr.SPARCTree.Bne.productArity: Int
1143 ===> org.kiama.example.RISC.RISCISA.WRL.toString(): String
10065 ===> org.kiama.example.prolog.PrologTree.Var.productIterator: Iterator[Any]
8131 ===> org.kiama.example.obr.ObrTree.StarExp.right: org.kiama.example.obr.ObrTree.Expression
2919 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.toString(): String
5113 ===> org.kiama.example.lambda3.AST.SubstQuery.e2: org.kiama.example.lambda3.AST.Exp
11107 ===> org.kiama.output.PrettyPrinterBase.comma: PrettyPrinterBase.this.Doc
11790 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4097 ===> org.kiama.example.iswim.secd.StackOps.Dup.productIterator: Iterator[Any]
790 ===> org.kiama.example.RISC.RISCISA.CMP.productArity: Int
6720 ===> org.kiama.example.oberon0.L3.source.Call.productElement(x$1: Int): Any
7959 ===> org.kiama.example.obr.ObrTree.IntExp.toString(): String
7588 ===> org.kiama.example.obr.ObrTree.IntConst.toString(): String
2466 ===> org.kiama.example.iswim.compiler.Syntax.Return.<init>(res: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Return
11248 ===> org.kiama.rewriting.CallbackRewriter.$anon.apply(t: CallbackRewriter.this.Term): Option[CallbackRewriter.this.Term]
2542 ===> org.kiama.example.iswim.compiler.Syntax.Block.<init>(es: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Block
10186 ===> org.kiama.example.prolog.SymbolTable.Variable.productIterator: Iterator[Any]
7660 ===> org.kiama.example.obr.ObrTree.ForStmt.productIterator: Iterator[Any]
2007 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.<init>(i: Int): org.kiama.example.iswim.compiler.Syntax.NumVal
3092 ===> org.kiama.example.iswim.secd.IOOps.Write.toString(): String
379 ===> org.kiama.attribution.Decorators.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[T,U] with Serializable
7014 ===> org.kiama.example.oberon0.base.Driver.driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
9333 ===> org.kiama.example.obr.SymbolTable.ArrayType.productArity: Int
1247 ===> org.kiama.example.RISC.RISCISA.BGT.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
7472 ===> org.kiama.example.obr.ObrTree.IntParam.productPrefix: String
4999 ===> org.kiama.example.lambda3.AST.App.<init>(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.App
8467 ===> org.kiama.example.obr.RISCTree.DivW.productElement(x$1: Int): Any
11354 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.a: org.kiama.rewriting.SupportPositionalRewriterTests.Node
6960 ===> org.kiama.example.oberon0.L4.source.FieldExp.toString(): String
3632 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productArity: Int
645 ===> org.kiama.example.RISC.RISCISA.SUBI.productArity: Int
3452 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
5006 ===> org.kiama.example.lambda3.AST.App.productElement(x$1: Int): Any
9366 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productPrefix: String
715 ===> org.kiama.example.RISC.RISCISA.DIV.toString(): String
1647 ===> org.kiama.example.imperative.AST.Add.productArity: Int
12115 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2741 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productIterator: Iterator[Any]
7555 ===> org.kiama.example.obr.ObrTree.EnumVar.toString(): String
4758 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10745 ===> org.kiama.example.transform.AST.VarDecl.name: String
0 ===> java.io.StringReader.<init>(x$1: String): java.io.StringReader
5597 ===> org.kiama.example.oberon0.L0.c.CMulExp.toString(): String
3208 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.toString(): String
7920 ===> org.kiama.example.obr.ObrTree.IdnExp.toString(): String
913 ===> org.kiama.example.RISC.RISCISA.ORI.productElement(x$1: Int): Any
8421 ===> org.kiama.example.obr.RISCTree.CmpgtW.l: org.kiama.example.obr.RISCTree.Datum
5747 ===> org.kiama.example.oberon0.L0.source.VarDecl.productPrefix: String
4365 ===> org.kiama.example.json.Driver.process(ast: org.kiama.example.json.JSONTree.JValue,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
1926 ===> org.kiama.example.iswim.compiler.Parser.Pos.<init>(s: String): Parser.this.Pos
0 ===> scala.Tuple5.productPrefix: String
5617 ===> org.kiama.example.oberon0.L0.c.CDivExp.toString(): String
10427 ===> org.kiama.example.til.AST.IfElse.toString(): String
6661 ===> org.kiama.example.oberon0.L3.source.VarMode.<init>(): org.kiama.example.oberon0.L3.source.VarMode
11801 ===> org.kiama.rewriting.RewriterTests.Equal.toString(): String
396 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productPrefix: String
2255 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productElement(x$1: Int): Any
3005 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.toString(): String
2181 ===> org.kiama.example.iswim.compiler.Syntax.Less.productElement(x$1: Int): Any
0 ===> org.kiama.example.lambda2.ParLazyShare.s: org.kiama.rewriting.Rewriter.Strategy
946 ===> org.kiama.example.RISC.RISCISA.XORI.im: org.kiama.example.RISC.RISCISA.Imm
5742 ===> org.kiama.example.oberon0.L0.source.VarDecl.tipe: org.kiama.example.oberon0.L0.source.TypeDef
1132 ===> org.kiama.example.RISC.RISCISA.WRH.productElement(x$1: Int): Any
6101 ===> org.kiama.example.oberon0.L0.source.NotExp.exp: org.kiama.example.oberon0.L0.source.Expression
7601 ===> org.kiama.example.obr.ObrTree.ExnConst.productElement(x$1: Int): Any
10741 ===> org.kiama.example.transform.AST.Program.toString(): String
2295 ===> org.kiama.example.iswim.compiler.Syntax.And.toString(): String
0 ===> org.kiama.example.til.TIL1_1.expression: TIL1_1.this.PackratParser[org.kiama.example.til.AST.Exp]
0 ===> scala.util.parsing.combinator.Parsers.Failure.toString(): String
12422 ===> org.kiama.util.ParserUtilities.regexnows(r: scala.util.matching.Regex): ParserUtilities.this.Parser[String]
9673 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.Name: String
572 ===> org.kiama.example.RISC.RISCISA.ADD.a: org.kiama.example.RISC.RISCISA.RegNo
8782 ===> org.kiama.example.obr.SPARCTree.Jmp.toString(): String
8213 ===> org.kiama.example.obr.RISCTree.Beq.productIterator: Iterator[Any]
498 ===> org.kiama.example.RISC.RISCISA.MOV.productArity: Int
3178 ===> org.kiama.example.iswim.secd.IntegerOps.Add.toString(): String
2651 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productElement(x$1: Int): Any
10942 ===> org.kiama.output.LeftAssoc.toString(): String
4094 ===> org.kiama.example.iswim.secd.StackOps.Dup.productPrefix: String
1468 ===> org.kiama.example.dataflow.DataflowAST.Empty.toString(): String
0 ===> org.kiama.example.oberon0.base.Parser.keyword: Parser.this.Parser[String]
1757 ===> org.kiama.example.imperative.AST.Asgn.<init>(v: org.kiama.example.imperative.AST.Var,e: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Asgn
5855 ===> org.kiama.example.oberon0.L0.source.NeExp.toString(): String
912 ===> org.kiama.example.RISC.RISCISA.ORI.productArity: Int
0 ===> org.scalacheck.Gen.Params.productPrefix: String
12610 ===> org.kiama.util.GeneratingREPLBase.ignoreWhitespaceLines: Boolean
1775 ===> org.kiama.example.imperative.AST.While.e: org.kiama.example.imperative.AST.Exp
2267 ===> org.kiama.example.iswim.compiler.Syntax.Not.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Not
856 ===> org.kiama.example.RISC.RISCISA.AND.toString(): String
1160 ===> org.kiama.example.RISC.RISCISA.Branch.disp_$eq(x$1: org.kiama.example.RISC.RISCISA.Disp): Unit
11601 ===> org.kiama.rewriting.Rewriter.$anon.someProduct(p: Product): Option[Rewriter.this.Term]
2760 ===> org.kiama.example.iswim.driver.SECD.program: org.kiama.example.iswim.secd.SECDBase.CodeSegment
9963 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productPrefix: String
7734 ===> org.kiama.example.obr.ObrTree.WhileStmt.productIterator: Iterator[Any]
11584 ===> org.kiama.rewriting.Rewriter.all(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
10230 ===> org.kiama.example.prolog.SymbolTable.ListType.productPrefix: String
11256 ===> org.kiama.rewriting.NominalAST.Name.opti: Option[Int]
5021 ===> org.kiama.example.lambda3.AST.Lam.productPrefix: String
11190 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productPrefix: String
919 ===> org.kiama.example.RISC.RISCISA.ORI.toString(): String
5324 ===> org.kiama.example.oberon0.L0.TypeAnalyser.deftypeDef: org.kiama.example.oberon0.L0.source.TypeDef => TypeAnalyser.this.Type
3377 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.message: String
12381 ===> org.kiama.util.IO.filereader(name: String,encoding: String): java.io.BufferedReader
11769 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1019 ===> org.kiama.example.RISC.RISCISA.POP.productIterator: Iterator[Any]
4619 ===> org.kiama.example.lambda2.AST.Let.productIterator: Iterator[Any]
10380 ===> org.kiama.example.til.AST.Assign.productElement(x$1: Int): Any
7549 ===> org.kiama.example.obr.ObrTree.EnumVar.productIterator: Iterator[Any]
3989 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productArity: Int
3204 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productElement(x$1: Int): Any
667 ===> org.kiama.example.RISC.RISCISA.MUL.productElement(x$1: Int): Any
10828 ===> org.kiama.example.transform.AST.Num.productPrefix: String
0 ===> scala.Tuple2.productIterator: Iterator[Any]
3250 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productIterator: Iterator[Any]
9980 ===> org.kiama.example.prolog.Interpreter.rename[T <: org.kiama.example.prolog.PrologTree.SourceNode](t: T): T
7853 ===> org.kiama.example.obr.ObrTree.EqualExp.left: org.kiama.example.obr.ObrTree.Expression
2384 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productElement(x$1: Int): Any
751 ===> org.kiama.example.RISC.RISCISA.MOD.productElement(x$1: Int): Any
1483 ===> org.kiama.example.dataflow.Foreach.productElement(x$1: Int): Any
4032 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productIterator: Iterator[Any]
12491 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productElement(x$1: Int): Any
5928 ===> org.kiama.example.oberon0.L0.source.GeExp.productIterator: Iterator[Any]
8512 ===> org.kiama.example.obr.RISCTree.MulW.l: org.kiama.example.obr.RISCTree.Datum
2847 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.toString(): String
9559 ===> org.kiama.example.oneohonecompanies.Company.DU.productPrefix: String
5962 ===> org.kiama.example.oberon0.L0.source.SubExp.right: org.kiama.example.oberon0.L0.source.Expression
10659 ===> org.kiama.example.til.AST.Eq.productArity: Int
3477 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productElement(x$1: Int): Any
5561 ===> org.kiama.example.oberon0.L0.c.COrExp.left: org.kiama.example.oberon0.base.c.CExpression
7407 ===> org.kiama.example.obr.Driver.execFlag_$eq(x$1: Boolean): Unit
3768 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.toString(): String
8062 ===> org.kiama.example.obr.ObrTree.NotExp.productElement(x$1: Int): Any
7406 ===> org.kiama.example.obr.Driver.execFlag: Boolean
9177 ===> org.kiama.example.obr.SPARCTree.Label.productPrefix: String
3731 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productElement(x$1: Int): Any
7891 ===> org.kiama.example.obr.ObrTree.GreaterExp.left: org.kiama.example.obr.ObrTree.Expression
8633 ===> org.kiama.example.obr.RISCTree.Local.toString(): String
5286 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.toString(): String
5514 ===> org.kiama.example.oberon0.L0.c.CGeExp.toString(): String
4706 ===> org.kiama.example.lambda2.AST.NoType.productElement(x$1: Int): Any
11603 ===> org.kiama.rewriting.Rewriter.$anon.someTraversable[CC[U] <: Traversable[U]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
6381 ===> org.kiama.example.oberon0.L2.source.ValCond.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.tupleexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
9679 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productArity: Int
0 ===> org.kiama.example.lambda2.Par.beta: org.kiama.rewriting.Rewriter.Strategy
2715 ===> org.kiama.example.iswim.compiler.Syntax.Assign.r: org.kiama.example.iswim.compiler.Syntax.Expr
1081 ===> org.kiama.example.RISC.RISCISA.PSH.productElement(x$1: Int): Any
10282 ===> org.kiama.example.repmin.Fork.productPrefix: String
7136 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.toString(): String
699 ===> org.kiama.example.RISC.RISCISA.DIV.b: org.kiama.example.RISC.RISCISA.RegNo
11101 ===> org.kiama.output.PrettyPrinterBase.dquote: PrettyPrinterBase.this.Doc
0 ===> org.kiama.attribution.Decorators.in: org.kiama.attribution.Attribution.CachedAttribute[T,U]
10641 ===> org.kiama.example.til.AST.Sub.productElement(x$1: Int): Any
1235 ===> org.kiama.example.RISC.RISCISA.BLE.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L4.Parser.fieldlists: Parser.this.Parser[List[org.kiama.example.oberon0.L4.source.FieldList]]
2334 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.toString(): String
12328 ===> org.kiama.util.Environments.MultipleEntity.productIterator: Iterator[Any]
3908 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.toString(): String
10914 ===> org.kiama.machine.Machine.performUpdates: Boolean
11534 ===> org.kiama.rewriting.Rewriter.PlusStrategy.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
11258 ===> org.kiama.rewriting.NominalAST.Name.toString(): String
10094 ===> org.kiama.example.prolog.PrologTree.Atom.toString(): String
771 ===> org.kiama.example.RISC.RISCISA.MODI.productArity: Int
0 ===> scala.util.parsing.combinator.Parsers.Success.productElement(x$1: Int): Any
11888 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1791 ===> org.kiama.example.imperative.AST.While.toString(): String
6660 ===> org.kiama.example.oberon0.L3.source.Mode.<init>(): org.kiama.example.oberon0.L3.source.Mode
201 ===> org.kiama.attribution.AttributionTests.EitherTree.productPrefix: String
11192 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productElement(x$1: Int): Any
9738 ===> org.kiama.example.picojava.AbstractSyntax.Use.productPrefix: String
0 ===> scala.util.parsing.combinator.RegexParsers.handleWhiteSpace(source: CharSequence,offset: Int): Int
10270 ===> org.kiama.example.prolog.Subst.$anon.<init>(): org.kiama.example.prolog.Subst{}
4902 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5209 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productElement(x$1: Int): Any
5631 ===> org.kiama.example.oberon0.L0.c.CModExp.productIterator: Iterator[Any]
1375 ===> org.kiama.example.dataflow.DataflowAST.Assign.productElement(x$1: Int): Any
0 ===> org.kiama.example.json.SyntaxAnalysis.jname: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JName]
7147 ===> org.kiama.example.oberon0.base.c.CBlock.productArity: Int
6030 ===> org.kiama.example.oberon0.L0.source.DivExp.productElement(x$1: Int): Any
1655 ===> org.kiama.example.imperative.AST.Add.toString(): String
5582 ===> org.kiama.example.oberon0.L0.c.CMulExp.right: org.kiama.example.oberon0.base.c.CExpression
3868 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.message: String
7180 ===> org.kiama.example.oberon0.base.c.CStrType.productIterator: Iterator[Any]
530 ===> org.kiama.example.RISC.RISCISA.MVN.a: org.kiama.example.RISC.RISCISA.RegNo
3363 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productPrefix: String
11094 ===> org.kiama.output.PrettyPrinterBase.lbrace: PrettyPrinterBase.this.Doc
7773 ===> org.kiama.example.obr.ObrTree.TryStmt.toString(): String
0 ===> org.kiama.example.oberon0.L0.Parser.factor: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
8785 ===> org.kiama.example.obr.SPARCTree.Jmp.toString(): String
3276 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.n: Int
9352 ===> org.kiama.example.obr.SymbolTable.RecordType.productElement(x$1: Int): Any
0 ===> org.kiama.example.picojava.Parser.IDENTIFIER: scala.util.matching.Regex
8081 ===> org.kiama.example.obr.ObrTree.OrExp.productElement(x$1: Int): Any
9810 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productElement(x$1: Int): Any
6427 ===> org.kiama.example.oberon0.L3.NameAnalyser.entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): NameAnalyser.this.Entity
0 ===> org.kiama.example.obr.SyntaxAnalysis.declarations: SyntaxAnalysis.this.Parser[List[org.kiama.example.obr.ObrTree.Declaration]]
2982 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productArity: Int
2155 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.r: org.kiama.example.iswim.compiler.Syntax.Expr
8655 ===> org.kiama.example.obr.RISCTree.Indexed.toString(): String
5954 ===> org.kiama.example.oberon0.L0.source.AddExp.toString(): String
0 ===> org.kiama.example.oberon0.L2.Desugarer.desugarCase: org.kiama.rewriting.Rewriter.Strategy
3841 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productArity: Int
2161 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productArity: Int
8676 ===> org.kiama.example.obr.RISCTree.genlabel(): org.kiama.example.obr.RISCTree.Label
4676 ===> org.kiama.example.lambda2.AST.IntType.toString(): String
4370 ===> org.kiama.example.json.PrettyPrinting.show(t: org.kiama.example.json.JSONTree.JValue): PrettyPrinting.this.Doc
0 ===> scala.Some.productPrefix: String
5038 ===> org.kiama.example.lambda3.AST.EquivQuery.execute: EquivQuery.this.T
6566 ===> org.kiama.example.oberon0.L3.c.CCall.productArity: Int
1979 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productIterator: Iterator[Any]
1768 ===> org.kiama.example.imperative.AST.Asgn.toString(): String
11181 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.exp: ParenPrettyPrinterTests.this.Exp
9252 ===> org.kiama.example.obr.SymbolTable.Constant.toString(): String
9122 ===> org.kiama.example.obr.SPARCTree.SubW.productPrefix: String
7297 ===> org.kiama.example.oberon0.base.source.Block.productArity: Int
6771 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productPrefix: String
3981 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.d: SECDBase.this.Dump
7599 ===> org.kiama.example.obr.ObrTree.ExnConst.productPrefix: String
7832 ===> org.kiama.example.obr.ObrTree.AndExp.toString(): String
8844 ===> org.kiama.example.obr.SPARCTree.StW.productPrefix: String
7088 ===> org.kiama.example.oberon0.base.c.CInclude.productElement(x$1: Int): Any
6137 ===> org.kiama.example.oberon0.L0.source.IdnExp.idnuse: org.kiama.example.oberon0.base.source.IdnUse
10043 ===> org.kiama.example.prolog.PrologTree.Rule.productPrefix: String
977 ===> org.kiama.example.RISC.RISCISA.LDW.productIterator: Iterator[Any]
8591 ===> org.kiama.example.obr.RISCTree.SubW.productArity: Int
0 ===> org.kiama.example.lambda2.ParEagerSubst.e: org.kiama.rewriting.Rewriter.Strategy
12245 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1108 ===> org.kiama.example.RISC.RISCISA.WRD.c: org.kiama.example.RISC.RISCISA.RegNo
9763 ===> org.kiama.example.picojava.AbstractSyntax.Dot.toString(): String
0 ===> scala.Tuple4.productIterator: Iterator[Any]
8505 ===> org.kiama.example.obr.RISCTree.LdW.toString(): String
0 ===> scala.collection.mutable.StringBuilder.apply(index: Int): Char
7990 ===> org.kiama.example.obr.ObrTree.MinusExp.productElement(x$1: Int): Any
9999 ===> org.kiama.example.prolog.PrologTree.Program.cs: List[org.kiama.example.prolog.PrologTree.Clause]
2704 ===> org.kiama.example.iswim.compiler.Syntax.Val.productElement(x$1: Int): Any
0 ===> org.kiama.example.transform.Parser.program: Parser.this.Parser[org.kiama.example.transform.AST.Program]
3842 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productElement(x$1: Int): Any
5570 ===> org.kiama.example.oberon0.L0.c.COrExp.productElement(x$1: Int): Any
6786 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.toString(): String
1415 ===> org.kiama.example.dataflow.DataflowAST.If.productElement(x$1: Int): Any
6756 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productElement(x$1: Int): Any
1837 ===> org.kiama.example.imperative.ASTNonCase.Num.d: Double
7804 ===> org.kiama.example.obr.ObrTree.Catch.productArity: Int
184 ===> org.kiama.attribution.AttributionTests.Unused.productPrefix: String
2884 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productArity: Int
6305 ===> org.kiama.example.oberon0.L2.source.ForStatement.by: Option[org.kiama.example.oberon0.L0.source.Expression]
5594 ===> org.kiama.example.oberon0.L0.c.CMulExp.toString(): String
2314 ===> org.kiama.example.iswim.compiler.Syntax.Or.toString(): String
6516 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.toString(): String
1072 ===> org.kiama.example.RISC.RISCISA.PSH.im: org.kiama.example.RISC.RISCISA.Imm
1447 ===> org.kiama.example.dataflow.DataflowAST.Return.productPrefix: String
8314 ===> org.kiama.example.obr.RISCTree.Write.productPrefix: String
1587 ===> org.kiama.example.imperative.AST.Num.toString(): String
4567 ===> org.kiama.example.lambda2.AST.App.e2: org.kiama.example.lambda2.AST.Exp
961 ===> org.kiama.example.RISC.RISCISA.XORI.toString(): String
0 ===> scala.util.parsing.combinator.Parsers.Error.productPrefix: String
10660 ===> org.kiama.example.til.AST.Eq.productElement(x$1: Int): Any
2461 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.toString(): String
11112 ===> org.kiama.output.PrettyPrinter.scan(l: PrettyPrinter.this.Width,out: PrettyPrinter.this.Horizontal => ((PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => (PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout))): ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout)
3649 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productArity: Int
1626 ===> org.kiama.example.imperative.AST.Neg.toString(): String
2723 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productElement(x$1: Int): Any
11797 ===> org.kiama.rewriting.RewriterTests.Equal.productElement(x$1: Int): Any
0 ===> org.kiama.example.imperative.Parser.term: Parser.this.PackratParser[org.kiama.example.imperative.AST.Exp]
1943 ===> org.kiama.example.iswim.compiler.Parser.keyword(k: String): Parser.this.Parser[Parser.this.Pos]
1733 ===> org.kiama.example.imperative.AST.Null.toString(): String
6692 ===> org.kiama.example.oberon0.L3.source.FPSection.idndefs: List[org.kiama.example.oberon0.base.source.IdnDef]
9098 ===> org.kiama.example.obr.SPARCTree.RemW.r: org.kiama.example.obr.SPARCTree.Datum
8085 ===> org.kiama.example.obr.ObrTree.OrExp.toString(): String
11339 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
10132 ===> org.kiama.example.prolog.PrologTree.Cut.productArity: Int
1142 ===> org.kiama.example.RISC.RISCISA.WRL.<init>(): org.kiama.example.RISC.RISCISA.WRL
8002 ===> org.kiama.example.obr.ObrTree.ModExp.right: org.kiama.example.obr.ObrTree.Expression
7806 ===> org.kiama.example.obr.ObrTree.Catch.productIterator: Iterator[Any]
2915 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productElement(x$1: Int): Any
0 ===> scala.util.parsing.combinator.Parsers.Failure.productElement(x$1: Int): Any
1521 ===> org.kiama.example.dataflow.For.toString(): String
1368 ===> org.kiama.example.dataflow.DataflowAST.Assign.right: org.kiama.example.dataflow.DataflowAST.Var
578 ===> org.kiama.example.RISC.RISCISA.ADD.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.ADD
152 ===> org.kiama.attribution.AttributionTests.Pair.productElement(x$1: Int): Any
12057 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4493 ===> org.kiama.example.lambda.Lambda.process(e: org.kiama.example.lambda.AST.Exp): Unit
4625 ===> org.kiama.example.lambda2.AST.Let.toString(): String
7878 ===> org.kiama.example.obr.ObrTree.FieldExp.productPrefix: String
3220 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productIterator: Iterator[Any]
0 ===> org.kiama.example.imperative.Parser.variable: Parser.this.Parser[org.kiama.example.imperative.AST.Var]
8663 ===> org.kiama.example.obr.RISCTree.Label.productPrefix: String
6665 ===> org.kiama.example.oberon0.L3.source.VarMode.productElement(x$1: Int): Any
0 ===> scala.collection.IndexedSeqOptimized.lengthCompare(len: Int): Int
1648 ===> org.kiama.example.imperative.AST.Add.productElement(x$1: Int): Any
6839 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productPrefix: String
1256 ===> org.kiama.example.RISC.RISCISA.BGT.toString(): String
1407 ===> org.kiama.example.dataflow.DataflowAST.If.fls: org.kiama.example.dataflow.DataflowAST.Stm
3749 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.hashCode(): Int
11158 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.fix: org.kiama.output.Side
10049 ===> org.kiama.example.prolog.PrologTree.Rule.toString(): String
4266 ===> org.kiama.example.json.JSONTree.JArray.values: Vector[org.kiama.example.json.JSONTree.JValue]
7031 ===> org.kiama.example.oberon0.base.TranslatingDriver.usageMessage: String
3938 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.toString(): String
7614 ===> org.kiama.example.obr.ObrTree.AssignStmt.right: org.kiama.example.obr.ObrTree.Expression
8714 ===> org.kiama.example.obr.SPARCTree.SPARC.insns: List[org.kiama.example.obr.SPARCTree.Item]
227 ===> org.kiama.attribution.AttributionTests.ListTree.toString(): String
1315 ===> org.kiama.example.RISC.RISCISA.Target.productPrefix: String
8099 ===> org.kiama.example.obr.ObrTree.PlusExp.productArity: Int
10831 ===> org.kiama.example.transform.AST.Num.productIterator: Iterator[Any]
1512 ===> org.kiama.example.dataflow.For.productPrefix: String
5379 ===> org.kiama.example.oberon0.L0.c.CAssignment.desig: org.kiama.example.oberon0.base.c.CExpression
11253 ===> org.kiama.rewriting.CallbackRewriter.dup[T <: Product](t: T,children: Array[AnyRef]): T
5549 ===> org.kiama.example.oberon0.L0.c.CSubExp.productArity: Int
11156 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.right: ParenPrettyPrinterTests.this.Exp
2681 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.e: org.kiama.example.iswim.compiler.Syntax.Expr
906 ===> org.kiama.example.RISC.RISCISA.ORI.toString(): String
4450 ===> org.kiama.example.lambda.AST.App.productArity: Int
7721 ===> org.kiama.example.obr.ObrTree.ReturnStmt.toString(): String
3858 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productIterator: Iterator[Any]
5244 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productArity: Int
0 ===> org.kiama.example.iswim.compiler.Parser.liter: Parser.this.Parser[org.kiama.example.iswim.compiler.Syntax.Expr]
11571 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
11897 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
511 ===> org.kiama.example.RISC.RISCISA.MOVI.im: org.kiama.example.RISC.RISCISA.Imm
10911 ===> org.kiama.machine.Machine.init: Unit
8806 ===> org.kiama.example.obr.SPARCTree.Read.mem: org.kiama.example.obr.SPARCTree.Address
3888 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productIterator: Iterator[Any]
1945 ===> org.kiama.example.iswim.compiler.Parser.bindexpr(rhsexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]): Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Binding]
7040 ===> org.kiama.example.oberon0.base.TranslatingDriver.consumeast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
6303 ===> org.kiama.example.oberon0.L2.source.ForStatement.lower: org.kiama.example.oberon0.L0.source.Expression
4885 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7805 ===> org.kiama.example.obr.ObrTree.Catch.productElement(x$1: Int): Any
10925 ===> org.kiama.machine.MachineTests.M.debug: Boolean
787 ===> org.kiama.example.RISC.RISCISA.CMP.toString(): String
8126 ===> org.kiama.example.obr.ObrTree.SlashExp.toString(): String
17 ===> org.kiama.attribution.Attributable.hasChildren: Boolean
2632 ===> org.kiama.example.iswim.compiler.Syntax.Match.productPrefix: String
261 ===> org.kiama.attribution.AttributionTests.GenSeqTree.toString(): String
0 ===> org.kiama.example.obr.SyntaxAnalysis.trycatch: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.TryStmt]
8741 ===> org.kiama.example.obr.SPARCTree.Beq.productArity: Int
3654 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.toString(): String
11110 ===> org.kiama.output.PrettyPrinterBase.space: PrettyPrinterBase.this.Doc
5474 ===> org.kiama.example.oberon0.L0.c.CLeExp.toString(): String
3920 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.hashCode(): Int
5057 ===> org.kiama.example.lambda3.AST.EvalQuery.execute: EvalQuery.this.T
0 ===> org.kiama.example.oberon0.L0.Parser.namedtypedef: Parser.this.Parser[org.kiama.example.oberon0.L0.source.NamedType]
3381 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productElement(x$1: Int): Any
3319 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productArity: Int
7366 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.semisep$default$2: PrettyPrinter.this.Doc @scala.annotation.unchecked.uncheckedVariance
7133 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.toString(): String
3372 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.toString(): String
10437 ===> org.kiama.example.til.AST.While.productPrefix: String
6089 ===> org.kiama.example.oberon0.L0.source.NegExp.productArity: Int
7238 ===> org.kiama.example.oberon0.base.c.CReturn.toString(): String
5488 ===> org.kiama.example.oberon0.L0.c.CGtExp.productPrefix: String
8315 ===> org.kiama.example.obr.RISCTree.Write.productArity: Int
9172 ===> org.kiama.example.obr.SPARCTree.Label.num: Int
11073 ===> org.kiama.output.PrettyPrinterBase.enclose(l: PrettyPrinterBase.this.Doc,d: PrettyPrinterBase.this.Doc,r: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
8391 ===> org.kiama.example.obr.RISCTree.CmpeqW.productElement(x$1: Int): Any
2019 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.toString(): String
8677 ===> org.kiama.example.obr.RISCTree.lastlab: Int
2740 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productElement(x$1: Int): Any
8136 ===> org.kiama.example.obr.ObrTree.StarExp.productPrefix: String
4594 ===> org.kiama.example.lambda2.AST.Opn.productArity: Int
4660 ===> org.kiama.example.lambda2.AST.Bind.toString(): String
4245 ===> org.kiama.example.json.JSONTree.JObject.toString(): String
7873 ===> org.kiama.example.obr.ObrTree.FieldExp.field: org.kiama.example.obr.ObrTree.Identifier
4336 ===> org.kiama.example.json.JSONTree.JFalse.productElement(x$1: Int): Any
12219 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3923 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.toString(): String
10945 ===> org.kiama.output.RightAssoc.productPrefix: String
9194 ===> org.kiama.example.obr.SemanticAnalysis.errors: org.kiama.attribution.Attributable => Unit
248 ===> org.kiama.attribution.AttributionTests.GenSeqTree.v: scala.collection.GenSeq[AttributionTests.this.Tree]
7179 ===> org.kiama.example.oberon0.base.c.CStrType.productElement(x$1: Int): Any
10026 ===> org.kiama.example.prolog.PrologTree.Fact.productElement(x$1: Int): Any
7450 ===> org.kiama.example.obr.ObrTree.Declaration.<init>(): org.kiama.example.obr.ObrTree.Declaration
6721 ===> org.kiama.example.oberon0.L3.source.Call.productIterator: Iterator[Any]
7120 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.args: List[org.kiama.example.oberon0.base.c.CDeclaration]
7256 ===> org.kiama.example.oberon0.base.c.CIntExp.toString(): String
8449 ===> org.kiama.example.obr.RISCTree.CmpltW.productIterator: Iterator[Any]
11984 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5701 ===> org.kiama.example.oberon0.L0.c.CIdnExp.i: String
0 ===> org.kiama.example.lambda2.LazySubst.s: org.kiama.rewriting.Rewriter.Strategy
4114 ===> org.kiama.example.iswim.secd.StackOps.Swap.productArity: Int
10070 ===> org.kiama.example.prolog.PrologTree.Var.toString(): String
4854 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11629 ===> org.kiama.rewriting.Rewriter.repeat(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
4812 ===> org.kiama.example.lambda2.Lambda.setup(args: Array[String]): Boolean
5908 ===> org.kiama.example.oberon0.L0.source.GtExp.productElement(x$1: Int): Any
11522 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.<init>(): Rewriter.this.Strategy
0 ===> scala.Tuple5.productIterator: Iterator[Any]
11498 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productPrefix: String
7615 ===> org.kiama.example.obr.ObrTree.AssignStmt.<init>(left: org.kiama.example.obr.ObrTree.AssignNode,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AssignStmt
7928 ===> org.kiama.example.obr.ObrTree.IndexExp.indx: org.kiama.example.obr.ObrTree.Expression
11053 ===> org.kiama.output.PrettyPrinterBase.fold(ds: Seq[PrettyPrinterBase.this.Doc],f: (PrettyPrinterBase.this.Doc, PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
8992 ===> org.kiama.example.obr.SPARCTree.DivW.r: org.kiama.example.obr.SPARCTree.Datum
3303 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productPrefix: String
8753 ===> org.kiama.example.obr.SPARCTree.Bne.cond: org.kiama.example.obr.SPARCTree.Datum
4894 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5189 ===> org.kiama.example.oberon0.L0.NameAnalyser.envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
1763 ===> org.kiama.example.imperative.AST.Asgn.productArity: Int
5274 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.ident: String
7843 ===> org.kiama.example.obr.ObrTree.BoolExp.productIterator: Iterator[Any]
11463 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productArity: Int
5107 ===> org.kiama.example.lambda3.AST.FreshQuery.toString(): String
2929 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.message: String
2169 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.toString(): String
10075 ===> org.kiama.example.prolog.PrologTree.Integer.<init>(v: Int): org.kiama.example.prolog.PrologTree.Integer
7785 ===> org.kiama.example.obr.ObrTree.TryBody.productArity: Int
7787 ===> org.kiama.example.obr.ObrTree.TryBody.productIterator: Iterator[Any]
12349 ===> org.kiama.util.Environments.UnknownEntity.toString(): String
4553 ===> org.kiama.example.lambda2.AST.Lam.productPrefix: String
10576 ===> org.kiama.example.til.AST.Mul.l: org.kiama.example.til.AST.Exp
6482 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.ident: String
4063 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toString(): String
3135 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productArity: Int
6060 ===> org.kiama.example.oberon0.L0.source.AndExp.left: org.kiama.example.oberon0.L0.source.Expression
0 ===> org.kiama.example.imperative.ASTNonCase.Mul.r: org.kiama.example.imperative.ASTNonCase.Exp
3336 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productIterator: Iterator[Any]
7840 ===> org.kiama.example.obr.ObrTree.BoolExp.productPrefix: String
4176 ===> org.kiama.example.iswim.secd.StringOps.StringValue.hashCode(): Int
0 ===> org.kiama.example.lambda2.ReduceSubst.subsNum: org.kiama.rewriting.Rewriter.Strategy
4950 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11834 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4541 ===> org.kiama.example.lambda2.AST.Var.toString(): String
0 ===> scala.Tuple3.productIterator: Iterator[Any]
9093 ===> org.kiama.example.obr.SPARCTree.Not.toString(): String
6124 ===> org.kiama.example.oberon0.L0.source.IntExp.productPrefix: String
11609 ===> org.kiama.rewriting.Rewriter.rewrite[T](s: => Rewriter.this.Strategy)(t: T): T
3232 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productPrefix: String
0 ===> org.kiama.example.oberon0.L0.Parser.vardecl: Parser.this.Parser[org.kiama.example.oberon0.L0.source.VarDecl]
9452 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productPrefix: String
996 ===> org.kiama.example.RISC.RISCISA.LDB.productArity: Int
1481 ===> org.kiama.example.dataflow.Foreach.productPrefix: String
11900 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4452 ===> org.kiama.example.lambda.AST.App.productIterator: Iterator[Any]
11727 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11580 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
9363 ===> org.kiama.example.obr.SymbolTable.RecordTypes.toString(): String
11545 ===> org.kiama.rewriting.Rewriter.rulefs(f: org.kiama.==>[Rewriter.this.Term,Rewriter.this.Strategy]): Rewriter.this.Strategy
415 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productElement(x$1: Int): Any
4270 ===> org.kiama.example.json.JSONTree.JArray.productPrefix: String
10056 ===> org.kiama.example.prolog.PrologTree.Term.<init>(): org.kiama.example.prolog.PrologTree.Term
9068 ===> org.kiama.example.obr.SPARCTree.NegW.productArity: Int
8881 ===> org.kiama.example.obr.SPARCTree.AddW.productPrefix: String
0 ===> org.kiama.example.lambda2.Parser.start: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Exp]
1888 ===> org.kiama.example.imperative.Generator.genLeafExp: org.scalacheck.Gen[org.kiama.example.imperative.AST.Exp with Serializable]
0 ===> scala.collection.convert.Wrappers.JMapWrapper.productArity: Int
2786 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.toString(): String
4899 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4616 ===> org.kiama.example.lambda2.AST.Let.productPrefix: String
0 ===> org.kiama.example.iswim.compiler.Parser.callccexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
10399 ===> org.kiama.example.til.AST.IfThen.productElement(x$1: Int): Any
10233 ===> org.kiama.example.prolog.SymbolTable.ListType.productIterator: Iterator[Any]
0 ===> org.kiama.example.obr.SyntaxAnalysis.iteration: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.Statement]
0 ===> org.kiama.example.til.TIL1_1.statement: TIL1_1.this.PackratParser[org.kiama.example.til.AST.Stat]
7298 ===> org.kiama.example.oberon0.base.source.Block.productElement(x$1: Int): Any
7636 ===> org.kiama.example.obr.ObrTree.ExitStmt.productElement(x$1: Int): Any
7119 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.decl: org.kiama.example.oberon0.base.c.CVarDecl
11521 ===> org.kiama.rewriting.Rewriter.Strategy.$less$times(q: => Rewriter.this.Strategy): Rewriter.this.Strategy
997 ===> org.kiama.example.RISC.RISCISA.LDB.productElement(x$1: Int): Any
9503 ===> org.kiama.example.oneohonecompanies.Company.Dept.productPrefix: String
0 ===> org.kiama.example.til.TIL1_1.keyword: TIL1_1.this.Parser[String]
2801 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productArity: Int
5772 ===> org.kiama.example.oberon0.L0.source.TypeDecl.toString(): String
5728 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productPrefix: String
11733 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4397 ===> org.kiama.example.lambda.AST.Num.productIterator: Iterator[Any]
1914 ===> org.kiama.example.imperative.PrettyPrinter.showbin(l: org.kiama.example.imperative.AST.ImperativeNode,op: String,r: org.kiama.example.imperative.AST.ImperativeNode): org.kiama.example.imperative.PrettyPrinter.Doc
615 ===> org.kiama.example.RISC.RISCISA.SUB.b: org.kiama.example.RISC.RISCISA.RegNo
5542 ===> org.kiama.example.oberon0.L0.c.CSubExp.right: org.kiama.example.oberon0.base.c.CExpression
8153 ===> org.kiama.example.obr.RISCEncoder.resetcode(): Unit
6406 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.forToDoc(s: org.kiama.example.oberon0.L2.source.ForStatement): PrettyPrinter.this.Doc
2097 ===> org.kiama.example.iswim.compiler.Syntax.Divide.l: org.kiama.example.iswim.compiler.Syntax.Expr
9739 ===> org.kiama.example.picojava.AbstractSyntax.Use.productArity: Int
10155 ===> org.kiama.example.prolog.SemanticAnalysis.exptipe: org.kiama.example.prolog.PrologTree.Term => org.kiama.example.prolog.SymbolTable.Type
5890 ===> org.kiama.example.oberon0.L0.source.LeExp.productIterator: Iterator[Any]
7225 ===> org.kiama.example.oberon0.base.c.CReturn.e: org.kiama.example.oberon0.base.c.CExpression
6908 ===> org.kiama.example.oberon0.L4.source.IndexExp.toString(): String
1250 ===> org.kiama.example.RISC.RISCISA.BGT.productElement(x$1: Int): Any
10446 ===> org.kiama.example.til.AST.While.toString(): String
10751 ===> org.kiama.example.transform.AST.VarDecl.productElement(x$1: Int): Any
8192 ===> org.kiama.example.obr.RISCTree.RISCProg.productElement(x$1: Int): Any
7082 ===> org.kiama.example.oberon0.base.c.CInclude.s: String
3159 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productElement(x$1: Int): Any
7740 ===> org.kiama.example.obr.ObrTree.WhileStmt.toString(): String
10149 ===> org.kiama.example.prolog.SemanticAnalysis.entity: org.kiama.example.prolog.PrologTree.SourceNode => org.kiama.example.prolog.SymbolTable.Entity
6088 ===> org.kiama.example.oberon0.L0.source.NegExp.productPrefix: String
7481 ===> org.kiama.example.obr.ObrTree.IntParam.toString(): String
1944 ===> org.kiama.example.iswim.compiler.Parser.operator(op: String): Parser.this.Parser[Parser.this.Pos]
8263 ===> org.kiama.example.obr.RISCTree.LabelDef.productPrefix: String
8167 ===> org.kiama.example.obr.RISCEncoder.arith(op: (org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo) => org.kiama.example.RISC.RISCISA.Instr,e: org.kiama.example.obr.RISCTree.Datum,d: org.kiama.example.obr.RISCTree.Datum): Unit
3089 ===> org.kiama.example.iswim.secd.IOOps.Write.toString(): String
9168 ===> org.kiama.example.obr.SPARCTree.Indexed.toString(): String
11708 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4895 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4160 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.toString(): String
9814 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.toString(): String
9704 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.toString(): String
3845 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.hashCode(): Int
9712 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.Body: org.kiama.example.picojava.AbstractSyntax.Stmt
10988 ===> org.kiama.output.Infix.productIterator: Iterator[Any]
631 ===> org.kiama.example.RISC.RISCISA.SUB.toString(): String
0 ===> org.kiama.example.lambda2.ReduceSubst.subsVar: org.kiama.rewriting.Rewriter.Strategy
12148 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9350 ===> org.kiama.example.obr.SymbolTable.RecordType.productPrefix: String
1262 ===> org.kiama.example.RISC.RISCISA.BR.toString(): String
7784 ===> org.kiama.example.obr.ObrTree.TryBody.productPrefix: String
2365 ===> org.kiama.example.iswim.compiler.Syntax.Let.productElement(x$1: Int): Any
7177 ===> org.kiama.example.oberon0.base.c.CStrType.productPrefix: String
0 ===> java.lang.Object.eq(x$1: AnyRef): Boolean
9069 ===> org.kiama.example.obr.SPARCTree.NegW.productElement(x$1: Int): Any
647 ===> org.kiama.example.RISC.RISCISA.SUBI.productIterator: Iterator[Any]
4444 ===> org.kiama.example.lambda.AST.App.<init>(l: org.kiama.example.lambda.AST.Exp,r: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.App
6792 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productElement(x$1: Int): Any
4805 ===> org.kiama.example.lambda2.Evaluators.evaluator_$eq(x$1: org.kiama.example.lambda2.Reduce): Unit
385 ===> org.kiama.attribution.Decorators.outdflt(t: T): U
3959 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.toString(): String
0 ===> org.kiama.example.oberon0.L2.Parser.cases: Parser.this.Parser[List[org.kiama.example.oberon0.L2.source.Case]]
10092 ===> org.kiama.example.prolog.PrologTree.Atom.s: String
9023 ===> org.kiama.example.obr.SPARCTree.IntDatum.toString(): String
8355 ===> org.kiama.example.obr.RISCTree.AddW.toString(): String
2239 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productIterator: Iterator[Any]
10764 ===> org.kiama.example.transform.AST.BinExpR.op: String
4396 ===> org.kiama.example.lambda.AST.Num.productElement(x$1: Int): Any
2067 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productElement(x$1: Int): Any
0 ===> org.kiama.example.iswim.compiler.Parser.comment: Parser.this.PackratParser[Any]
1249 ===> org.kiama.example.RISC.RISCISA.BGT.productArity: Int
1298 ===> org.kiama.example.RISC.RISCISA.RET.productArity: Int
6386 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.maxvalue: org.kiama.example.oberon0.L0.source.Expression
304 ===> org.kiama.attribution.AttributionTests.TripleTree.productArity: Int
6220 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productIterator: Iterator[Any]
12035 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5901 ===> org.kiama.example.oberon0.L0.source.GtExp.right: org.kiama.example.oberon0.L0.source.Expression
10791 ===> org.kiama.example.transform.AST.Factor.productIterator: Iterator[Any]
1857 ===> org.kiama.example.imperative.ASTNonCase.Binary.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Binary
7927 ===> org.kiama.example.obr.ObrTree.IndexExp.idn: org.kiama.example.obr.ObrTree.Identifier
746 ===> org.kiama.example.RISC.RISCISA.MOD.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOD
6525 ===> org.kiama.example.oberon0.L3.TypeAnalyser.idntypeDef: org.kiama.example.oberon0.base.source.IdnUse => TypeAnalyser.this.Type
1777 ===> org.kiama.example.imperative.AST.While.<init>(e: org.kiama.example.imperative.AST.Exp,b: org.kiama.example.imperative.AST.Stmt): org.kiama.example.imperative.AST.While
7191 ===> org.kiama.example.oberon0.base.c.CArrayType.elemtype: org.kiama.example.oberon0.base.c.CType
2345 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productArity: Int
8232 ===> org.kiama.example.obr.RISCTree.Bne.productIterator: Iterator[Any]
988 ===> org.kiama.example.RISC.RISCISA.LDB.im: org.kiama.example.RISC.RISCISA.Imm
12526 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n2: ParserUtilitiesTests.this.Node
10064 ===> org.kiama.example.prolog.PrologTree.Var.productElement(x$1: Int): Any
4744 ===> org.kiama.example.lambda2.AST.SubOp.toString(): String
0 ===> org.kiama.example.json.PrettyPrinting.super$pretty$default$2: PrettyPrinting.this.Width
1133 ===> org.kiama.example.RISC.RISCISA.WRH.productIterator: Iterator[Any]
3744 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productPrefix: String
8252 ===> org.kiama.example.obr.RISCTree.Jmp.toString(): String
3437 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productIterator: Iterator[Any]
7897 ===> org.kiama.example.obr.ObrTree.GreaterExp.productPrefix: String
1838 ===> org.kiama.example.imperative.ASTNonCase.Num.<init>(d: Double): org.kiama.example.imperative.ASTNonCase.Num
8016 ===> org.kiama.example.obr.ObrTree.ModExp.toString(): String
11554 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
8211 ===> org.kiama.example.obr.RISCTree.Beq.productArity: Int
610 ===> org.kiama.example.RISC.RISCISA.ADDI.toString(): String
8395 ===> org.kiama.example.obr.RISCTree.CmpeqW.toString(): String
0 ===> org.kiama.example.lambda2.ReduceSubst.lambda: org.kiama.rewriting.Rewriter.PlusStrategy
1708 ===> org.kiama.example.imperative.AST.Div.productArity: Int
820 ===> org.kiama.example.RISC.RISCISA.CHKI.b: org.kiama.example.RISC.RISCISA.RegNo
4986 ===> org.kiama.example.lambda3.AST.Var.productArity: Int
9990 ===> org.kiama.example.prolog.Main.programtree: org.kiama.example.prolog.PrologTree.Program
305 ===> org.kiama.attribution.AttributionTests.TripleTree.productElement(x$1: Int): Any
8372 ===> org.kiama.example.obr.RISCTree.Cond.productElement(x$1: Int): Any
12471 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productIterator: Iterator[Any]
0 ===> scala.util.parsing.combinator.Parsers.rep1sep[T](p: => Parsers.this.Parser[T],q: => Parsers.this.Parser[Any]): Parsers.this.Parser[List[T]]
5298 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productPrefix: String
3932 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productElement(x$1: Int): Any
9701 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productIterator: Iterator[Any]
7072 ===> org.kiama.example.oberon0.base.c.CProgram.productIterator: Iterator[Any]
8320 ===> org.kiama.example.obr.RISCTree.Write.toString(): String
6601 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productPrefix: String
10956 ===> org.kiama.output.NonAssoc.productElement(x$1: Int): Any
3604 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productIterator: Iterator[Any]
6302 ===> org.kiama.example.oberon0.L2.source.ForStatement.idn: org.kiama.example.oberon0.L0.source.IdnExp
11298 ===> org.kiama.rewriting.NominalAST.GenName.counter_$eq(x$1: Int): Unit
2353 ===> org.kiama.example.iswim.compiler.Syntax.Binding.toString(): String
9931 ===> org.kiama.example.prolog.Interpreter.TermGoal.toString(): String
5912 ===> org.kiama.example.oberon0.L0.source.GtExp.toString(): String
4256 ===> org.kiama.example.json.JSONTree.JName.productIterator: Iterator[Any]
4952 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10789 ===> org.kiama.example.transform.AST.Factor.productArity: Int
11555 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
10192 ===> org.kiama.example.prolog.SymbolTable.Variable.toString(): String
851 ===> org.kiama.example.RISC.RISCISA.AND.productIterator: Iterator[Any]
6811 ===> org.kiama.example.oberon0.L4.TypeAnalyser.entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): TypeAnalyser.this.Entity
0 ===> scala.util.parsing.combinator.Parsers.Success.productPrefix: String
8292 ===> org.kiama.example.obr.RISCTree.StW.d: org.kiama.example.obr.RISCTree.Datum
2344 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productPrefix: String
167 ===> org.kiama.attribution.AttributionTests.Leaf.productPrefix: String
736 ===> org.kiama.example.RISC.RISCISA.DIVI.toString(): String
6223 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.toString(): String
0 ===> org.kiama.example.lambda2.ParEagerSubst.y: org.kiama.rewriting.Rewriter.Strategy
5577 ===> org.kiama.example.oberon0.L0.c.COrExp.toString(): String
4722 ===> org.kiama.example.lambda2.AST.AddOp.productPrefix: String
2886 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productIterator: Iterator[Any]
3327 ===> org.kiama.example.iswim.secd.RecordOps.Fields.toString(): String
2079 ===> org.kiama.example.iswim.compiler.Syntax.Times.r: org.kiama.example.iswim.compiler.Syntax.Expr
10269 ===> org.kiama.example.prolog.Subst.apply(l: (String, org.kiama.example.prolog.PrologTree.Term)*): org.kiama.example.prolog.Subst
0 ===> org.kiama.example.oberon0.L1.source.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
4492 ===> org.kiama.example.lambda.Lambda.prompt: String
621 ===> org.kiama.example.RISC.RISCISA.SUB.toString(): String
4023 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.hashCode(): Int
7231 ===> org.kiama.example.oberon0.base.c.CReturn.productElement(x$1: Int): Any
1890 ===> org.kiama.example.imperative.Generator.genAdd(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Add]
2207 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.toString(): String
473 ===> org.kiama.example.RISC.RISC.Mem: RISC.this.ParamState[Int,Int]
0 ===> org.kiama.example.lambda3.Parser.start: Parser.this.PackratParser[org.kiama.example.lambda3.AST.Query]
0 ===> scala.util.parsing.combinator.Parsers.Success.toString(): String
1891 ===> org.kiama.example.imperative.Generator.genSub(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Sub]
11864 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4755 ===> org.kiama.example.lambda2.AST.App(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
6463 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.<init>(mode: org.kiama.example.oberon0.L3.source.Mode,varr: SymbolTable.this.Variable): SymbolTable.this.Parameter
3059 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.hashCode(): Int
2066 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productArity: Int
3318 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productPrefix: String
4667 ===> org.kiama.example.lambda2.AST.Type.<init>(): org.kiama.example.lambda2.AST.Type
7757 ===> org.kiama.example.obr.ObrTree.RaiseStmt.toString(): String
5907 ===> org.kiama.example.oberon0.L0.source.GtExp.productArity: Int
719 ===> org.kiama.example.RISC.RISCISA.DIVI.a: org.kiama.example.RISC.RISCISA.RegNo
2226 ===> org.kiama.example.iswim.compiler.Syntax.Greater.toString(): String
7253 ===> org.kiama.example.oberon0.base.c.CIntExp.toString(): String
3285 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productIterator: Iterator[Any]
8968 ===> org.kiama.example.obr.SPARCTree.CmpgtW.toString(): String
214 ===> org.kiama.attribution.AttributionTests.ListTree.l: List[AttributionTests.this.Tree]
11712 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11307 ===> org.kiama.rewriting.NominalRewriter.alphaequiv(a1: NominalRewriter.this.Term,a2: NominalRewriter.this.Term): Boolean
7009 ===> org.kiama.example.oberon0.base.Driver.challengeFlagDefault: Boolean
5858 ===> org.kiama.example.oberon0.L0.source.NeExp.toString(): String
4925 ===> org.kiama.example.lambda2.PrettyPrinter.pretty(t: org.kiama.example.lambda2.AST.Exp): String
390 ===> org.kiama.attribution.DynamicAttributionTests.Pair.left: DynamicAttributionTests.this.Tree
6727 ===> org.kiama.example.oberon0.L3.source.Call.toString(): String
11594 ===> org.kiama.rewriting.Rewriter.$anon.oneProduct(p: Product): Option[Rewriter.this.Term]
11036 ===> org.kiama.output.PrettyPrinterBase.char(c: Char): PrettyPrinterBase.this.Doc
7235 ===> org.kiama.example.oberon0.base.c.CReturn.toString(): String
0 ===> org.kiama.example.oberon0.L4.Parser.fieldlist: Parser.this.Parser[Option[org.kiama.example.oberon0.L4.source.FieldList]]
7874 ===> org.kiama.example.obr.ObrTree.FieldExp.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,field: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.FieldExp
2558 ===> org.kiama.example.iswim.compiler.Syntax.Empty.<init>(): org.kiama.example.iswim.compiler.Syntax.Empty
7112 ===> org.kiama.example.oberon0.base.c.CVarDecl.toString(): String
6316 ===> org.kiama.example.oberon0.L2.source.ForStatement.productElement(x$1: Int): Any
3931 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productArity: Int
8287 ===> org.kiama.example.obr.RISCTree.Ret.toString(): String
2084 ===> org.kiama.example.iswim.compiler.Syntax.Times.productPrefix: String
12136 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.transform.Parser.op: Parser.this.Parser[String]
11566 ===> org.kiama.rewriting.Rewriter.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
6113 ===> org.kiama.example.oberon0.L0.source.NotExp.toString(): String
7679 ===> org.kiama.example.obr.ObrTree.IfStmt.productArity: Int
12121 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3667 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productElement(x$1: Int): Any
7643 ===> org.kiama.example.obr.ObrTree.ExitStmt.toString(): String
0 ===> org.kiama.example.dataflow.Parser.blockStm: Parser.this.Parser[org.kiama.example.dataflow.DataflowAST.Block]
8044 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productArity: Int
5073 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.e: org.kiama.example.lambda3.AST.Exp
0 ===> scala.util.parsing.combinator.Parsers.Failure.productPrefix: String
12503 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n2: ParserUtilitiesTests.this.Node
3668 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productIterator: Iterator[Any]
11596 ===> org.kiama.rewriting.Rewriter.$anon.oneTraversable[CC[U] <: Traversable[U]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
1217 ===> org.kiama.example.RISC.RISCISA.BGE.productArity: Int
0 ===> org.kiama.example.picojava.Parser.name: Parser.this.PackratParser[org.kiama.example.picojava.AbstractSyntax.Access]
2112 ===> org.kiama.example.iswim.compiler.Syntax.Divide.toString(): String
7296 ===> org.kiama.example.oberon0.base.source.Block.productPrefix: String
7971 ===> org.kiama.example.obr.ObrTree.LessExp.productElement(x$1: Int): Any
10217 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productElement(x$1: Int): Any
1209 ===> org.kiama.example.RISC.RISCISA.BLT.apply(label: Int): org.kiama.example.RISC.RISCISA.BLT
2284 ===> org.kiama.example.iswim.compiler.Syntax.And.r: org.kiama.example.iswim.compiler.Syntax.Expr
10552 ===> org.kiama.example.til.AST.Num.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.returnexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
4055 ===> org.kiama.example.iswim.secd.SECDBase.$anon.<init>(): SECDBase.this.State[SECDBase.this.Stack]{def toDoc: SECDBase.this.Doc}
637 ===> org.kiama.example.RISC.RISCISA.SUBI.im: org.kiama.example.RISC.RISCISA.Imm
10112 ===> org.kiama.example.prolog.PrologTree.Pred.toString(): String
3555 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productArity: Int
3134 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productPrefix: String
10913 ===> org.kiama.machine.Machine.finit: Unit
3049 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.hashCode(): Int
9125 ===> org.kiama.example.obr.SPARCTree.SubW.productIterator: Iterator[Any]
7464 ===> org.kiama.example.obr.ObrTree.IntVar.toString(): String
2954 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productIterator: Iterator[Any]
8857 ===> org.kiama.example.obr.SPARCTree.Write.d: org.kiama.example.obr.SPARCTree.Datum
6542 ===> org.kiama.example.oberon0.L3.c.CAddrType.basetype: org.kiama.example.oberon0.base.c.CType
5836 ===> org.kiama.example.oberon0.L0.source.EqExp.toString(): String
9010 ===> org.kiama.example.obr.SPARCTree.IntDatum.num: Int
9636 ===> org.kiama.example.picojava.AbstractSyntax.Block.productElement(x$1: Int): Any
10469 ===> org.kiama.example.til.AST.For.toString(): String
10859 ===> org.kiama.example.transform.Analysis.ast: org.kiama.example.transform.AST.ExpR => org.kiama.example.transform.AST.Exp
2198 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productPrefix: String
6873 ===> org.kiama.example.oberon0.L4.c.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
4768 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
6492 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productIterator: Iterator[Any]
2429 ===> org.kiama.example.iswim.compiler.Syntax.Import.fn: String
5669 ===> org.kiama.example.oberon0.L0.c.CNegExp.productPrefix: String
3719 ===> org.kiama.example.iswim.secd.SECDBase.GetType.toString(): String
8150 ===> org.kiama.example.obr.RISCEncoder.code: scala.collection.mutable.ArrayBuffer[org.kiama.example.RISC.RISCISA.Assembler]
2509 ===> org.kiama.example.iswim.compiler.Syntax.If.productPrefix: String
5906 ===> org.kiama.example.oberon0.L0.source.GtExp.productPrefix: String
197 ===> org.kiama.attribution.AttributionTests.EitherTree.e: Either[AttributionTests.this.Pair,AttributionTests.this.Leaf]
11338 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
0 ===> org.kiama.example.oberon0.L0.SymbolTable.booleanType: SymbolTable.this.BuiltinType
10918 ===> org.kiama.machine.Machine.run: Unit
5158 ===> org.kiama.example.lambda3.Lambda.prompt: String
4300 ===> org.kiama.example.json.JSONTree.JNumber.value: Double
7769 ===> org.kiama.example.obr.ObrTree.TryStmt.productElement(x$1: Int): Any
5678 ===> org.kiama.example.oberon0.L0.c.CNegExp.toString(): String
7726 ===> org.kiama.example.obr.ObrTree.WhileStmt.body: List[org.kiama.example.obr.ObrTree.Statement]
6679 ===> org.kiama.example.oberon0.L3.source.ValMode.productArity: Int
0 ===> org.kiama.example.iswim.secd.SECDBase.dump: SECDBase.this.State[SECDBase.this.Dump]
2179 ===> org.kiama.example.iswim.compiler.Syntax.Less.productPrefix: String
5332 ===> org.kiama.example.oberon0.L0.c.CNamedType.productElement(x$1: Int): Any
9593 ===> org.kiama.example.oneohonecompanies.Precedence.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1297 ===> org.kiama.example.RISC.RISCISA.RET.productPrefix: String
5610 ===> org.kiama.example.oberon0.L0.c.CDivExp.productElement(x$1: Int): Any
7865 ===> org.kiama.example.obr.ObrTree.EqualExp.toString(): String
10960 ===> org.kiama.output.NonAssoc.toString(): String
7963 ===> org.kiama.example.obr.ObrTree.LessExp.left: org.kiama.example.obr.ObrTree.Expression
4606 ===> org.kiama.example.lambda2.AST.Let.i: org.kiama.example.lambda2.AST.Idn
953 ===> org.kiama.example.RISC.RISCISA.XORI.productPrefix: String
7893 ===> org.kiama.example.obr.ObrTree.GreaterExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.GreaterExp
255 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productIterator: Iterator[Any]
12515 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productIterator: Iterator[Any]
483 ===> org.kiama.example.RISC.RISC.inputoutput(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
605 ===> org.kiama.example.RISC.RISCISA.ADDI.productIterator: Iterator[Any]
9185 ===> org.kiama.example.obr.SPARCTree.Label.toString(): String
892 ===> org.kiama.example.RISC.RISCISA.OR.productElement(x$1: Int): Any
3188 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productArity: Int
10384 ===> org.kiama.example.til.AST.Assign.toString(): String
7347 ===> org.kiama.example.oberon0.base.source.IdnUse.productPrefix: String
2046 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productPrefix: String
4870 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4965 ===> org.kiama.example.lambda3.AST.Num.toString(): String
911 ===> org.kiama.example.RISC.RISCISA.ORI.productPrefix: String
1744 ===> org.kiama.example.imperative.AST.Seqn.productElement(x$1: Int): Any
1224 ===> org.kiama.example.RISC.RISCISA.BGE.toString(): String
10734 ===> org.kiama.example.transform.AST.Program.productElement(x$1: Int): Any
5522 ===> org.kiama.example.oberon0.L0.c.CAddExp.right: org.kiama.example.oberon0.base.c.CExpression
9000 ===> org.kiama.example.obr.SPARCTree.DivW.productIterator: Iterator[Any]
9491 ===> org.kiama.example.oneohonecompanies.Company.Company.toString(): String
0 ===> org.kiama.example.imperative.ASTNonCase.Add.l: org.kiama.example.imperative.ASTNonCase.Exp
11412 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
9351 ===> org.kiama.example.obr.SymbolTable.RecordType.productArity: Int
2253 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productPrefix: String
7249 ===> org.kiama.example.oberon0.base.c.CIntExp.productElement(x$1: Int): Any
7608 ===> org.kiama.example.obr.ObrTree.ExnConst.toString(): String
9548 ===> org.kiama.example.oneohonecompanies.Company.PU.toString(): String
12074 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
553 ===> org.kiama.example.RISC.RISCISA.MVNI.im: org.kiama.example.RISC.RISCISA.Imm
5292 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.value: Int
8483 ===> org.kiama.example.obr.RISCTree.IntDatum.productArity: Int
1395 ===> org.kiama.example.dataflow.DataflowAST.While.productIterator: Iterator[Any]
3524 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productElement(x$1: Int): Any
1245 ===> org.kiama.example.RISC.RISCISA.BGT.<init>(label: Int): org.kiama.example.RISC.RISCISA.BGT
6529 ===> org.kiama.example.oberon0.L3.c.CVoidType.productPrefix: String
1017 ===> org.kiama.example.RISC.RISCISA.POP.productArity: Int
2049 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productIterator: Iterator[Any]
11115 ===> org.kiama.output.PrettyPrinter.Doc.<init>(f: ((PrettyPrinter.this.Indent, PrettyPrinter.this.Width)) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout)): PrettyPrinter.this.Doc
5521 ===> org.kiama.example.oberon0.L0.c.CAddExp.left: org.kiama.example.oberon0.base.c.CExpression
4510 ===> org.kiama.example.lambda2.AST.Exp.<init>(): org.kiama.example.lambda2.AST.Exp
3634 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productIterator: Iterator[Any]
11420 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
7659 ===> org.kiama.example.obr.ObrTree.ForStmt.productElement(x$1: Int): Any
219 ===> org.kiama.attribution.AttributionTests.ListTree.productArity: Int
1167 ===> org.kiama.example.RISC.RISCISA.BEQ.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
11533 ===> org.kiama.rewriting.Rewriter.PlusStrategy.rhs: Rewriter.this.Strategy
1074 ===> org.kiama.example.RISC.RISCISA.PSH.toString(): String
4174 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productIterator: Iterator[Any]
12249 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10450 ===> org.kiama.example.til.AST.For.i: org.kiama.example.til.AST.Id
6375 ===> org.kiama.example.oberon0.L2.source.ValCond.productIterator: Iterator[Any]
6335 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productPrefix: String
2399 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productPrefix: String
12482 ===> org.kiama.util.ParserUtilitiesTests.Tup3.n2: ParserUtilitiesTests.this.Node
204 ===> org.kiama.attribution.AttributionTests.EitherTree.productIterator: Iterator[Any]
1700 ===> org.kiama.example.imperative.AST.Div.r: org.kiama.example.imperative.AST.Exp
9623 ===> org.kiama.example.picojava.AbstractSyntax.Program.toString(): String
4116 ===> org.kiama.example.iswim.secd.StackOps.Swap.productIterator: Iterator[Any]
4320 ===> org.kiama.example.json.JSONTree.JTrue.productArity: Int
11501 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productIterator: Iterator[Any]
12322 ===> org.kiama.util.Environments.Named.toString(): String
2304 ===> org.kiama.example.iswim.compiler.Syntax.Or.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Or
0 ===> scala.util.parsing.input.Position.$less(that: scala.util.parsing.input.Position): Boolean
2586 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.toString(): String
2273 ===> org.kiama.example.iswim.compiler.Syntax.Not.productIterator: Iterator[Any]
5414 ===> org.kiama.example.oberon0.L0.c.CEqExp.toString(): String
6450 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productArity: Int
11813 ===> org.kiama.rewriting.RewriterTests.NotSame.productPrefix: String
2346 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productElement(x$1: Int): Any
2160 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productPrefix: String
5146 ===> org.kiama.example.lambda3.AST.SwapQuery.toString(): String
5571 ===> org.kiama.example.oberon0.L0.c.COrExp.productIterator: Iterator[Any]
0 ===> org.kiama.example.dataflow.Parser.stm: Parser.this.PackratParser[org.kiama.example.dataflow.DataflowAST.Stm]
5541 ===> org.kiama.example.oberon0.L0.c.CSubExp.left: org.kiama.example.oberon0.base.c.CExpression
6549 ===> org.kiama.example.oberon0.L3.c.CAddrType.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L2.Parser.step: Parser.this.Parser[Option[org.kiama.example.oberon0.L0.source.Expression]]
3589 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productIterator: Iterator[Any]
2080 ===> org.kiama.example.iswim.compiler.Syntax.Times.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Times
8828 ===> org.kiama.example.obr.SPARCTree.Ret.productIterator: Iterator[Any]
12064 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11278 ===> org.kiama.rewriting.NominalAST.Bind.<init>(name: org.kiama.rewriting.NominalAST.Name,term: Any): org.kiama.rewriting.NominalAST.Bind
9037 ===> org.kiama.example.obr.SPARCTree.LdW.toString(): String
0 ===> org.kiama.example.imperative.ASTNonCase.Div.r: org.kiama.example.imperative.ASTNonCase.Exp
10111 ===> org.kiama.example.prolog.PrologTree.Pred.<init>(s: String,ts: List[org.kiama.example.prolog.PrologTree.Term]): org.kiama.example.prolog.PrologTree.Pred
9568 ===> org.kiama.example.oneohonecompanies.Company.DU.toString(): String
0 ===> org.kiama.example.lambda3.Parser.exp: Parser.this.PackratParser[org.kiama.example.lambda3.AST.Exp]
8291 ===> org.kiama.example.obr.RISCTree.StW.mem: org.kiama.example.obr.RISCTree.Address
6666 ===> org.kiama.example.oberon0.L3.source.VarMode.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L3.CCodeGenerator.super$translate(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.c.CProgram
2983 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productElement(x$1: Int): Any
3136 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productElement(x$1: Int): Any
8120 ===> org.kiama.example.obr.ObrTree.SlashExp.productIterator: Iterator[Any]
485 ===> org.kiama.example.RISC.RISCISA.sayReg(reg: org.kiama.example.RISC.RISCISA.RegNo): String
8845 ===> org.kiama.example.obr.SPARCTree.StW.productArity: Int
10929 ===> org.kiama.machine.MachineTests.MM.debug: Boolean
2453 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productArity: Int
10679 ===> org.kiama.example.til.AST.Ne.productElement(x$1: Int): Any
11748 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8370 ===> org.kiama.example.obr.RISCTree.Cond.productPrefix: String
11483 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productElement(x$1: Int): Any
1104 ===> org.kiama.example.RISC.RISCISA.RD.toString(): String
3807 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productIterator: Iterator[Any]
0 ===> scala.Any.$bang$eq(x$1: Any): Boolean
0 ===> org.kiama.example.lambda2.ParLazySubst.s: org.kiama.rewriting.Rewriter.Strategy
11691 ===> org.kiama.rewriting.Rewriter.everything[T](v: T)(f: (T, T) => T)(g: org.kiama.==>[Rewriter.this.Term,T])(t: Rewriter.this.Term): T
2686 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productArity: Int
2641 ===> org.kiama.example.iswim.compiler.Syntax.Match.toString(): String
7704 ===> org.kiama.example.obr.ObrTree.LoopStmt.toString(): String
5316 ===> org.kiama.example.oberon0.L0.SymbolTable.isVariable(e: SymbolTable.this.Entity): Boolean
0 ===> org.kiama.example.imperative.Parser.whileStmt: Parser.this.Parser[org.kiama.example.imperative.AST.While]
10804 ===> org.kiama.example.transform.AST.BinExp.right: org.kiama.example.transform.AST.Exp
0 ===> org.kiama.example.oberon0.base.TranslatingDriver.super$processargs(args: List[String]): Boolean
5502 ===> org.kiama.example.oberon0.L0.c.CGeExp.right: org.kiama.example.oberon0.base.c.CExpression
4735 ===> org.kiama.example.lambda2.AST.SubOp.<init>(): org.kiama.example.lambda2.AST.SubOp
9179 ===> org.kiama.example.obr.SPARCTree.Label.productElement(x$1: Int): Any
3637 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.toString(): String
9698 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productPrefix: String
5078 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productPrefix: String
6980 ===> org.kiama.example.oberon0.L4.source.FieldIdn.toString(): String
2761 ===> org.kiama.example.iswim.driver.SECD.init(): Unit
1897 ===> org.kiama.example.imperative.Generator.genLeafStmt: org.scalacheck.Gen[org.kiama.example.imperative.AST.Null]
10717 ===> org.kiama.example.til.TIL2_3.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7021 ===> org.kiama.example.oberon0.base.TransformingDriver.printiastFlag: Boolean
3104 ===> org.kiama.example.iswim.secd.IOOps.Read.toString(): String
1745 ===> org.kiama.example.imperative.AST.Seqn.productIterator: Iterator[Any]
1912 ===> org.kiama.example.imperative.PrettyPrinter.pretty(t: org.kiama.example.imperative.AST.ImperativeNode): String
433 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productIterator: Iterator[Any]
7841 ===> org.kiama.example.obr.ObrTree.BoolExp.productArity: Int
7934 ===> org.kiama.example.obr.ObrTree.IndexExp.productArity: Int
11311 ===> org.kiama.rewriting.NominalRewriter.Binding.unapply(b: org.kiama.rewriting.NominalAST.Bind): Option[(org.kiama.rewriting.NominalAST.Name, NominalRewriter.this.Term)]
0 ===> org.kiama.util.ParserUtilities.constrainedInt: ParserUtilities.this.PackratParser[Int]
0 ===> scala.Tuple2.toString(): String
10117 ===> org.kiama.example.prolog.PrologTree.Pred.productArity: Int
2074 ===> org.kiama.example.iswim.compiler.Syntax.Minus.toString(): String
4702 ===> org.kiama.example.lambda2.AST.NoType.<init>(): org.kiama.example.lambda2.AST.NoType
8020 ===> org.kiama.example.obr.ObrTree.NegExp.exp: org.kiama.example.obr.ObrTree.Expression
0 ===> scala.Some.productIterator: Iterator[Any]
1199 ===> org.kiama.example.RISC.RISCISA.BLT.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
6861 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productIterator: Iterator[Any]
789 ===> org.kiama.example.RISC.RISCISA.CMP.productPrefix: String
9484 ===> org.kiama.example.oneohonecompanies.Company.Company.productElement(x$1: Int): Any
4690 ===> org.kiama.example.lambda2.AST.FunType.productArity: Int
1961 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productElement(x$1: Int): Any
6449 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productPrefix: String
5330 ===> org.kiama.example.oberon0.L0.c.CNamedType.productPrefix: String
3029 ===> org.kiama.example.iswim.secd.HeapOps.Put.productPrefix: String
7027 ===> org.kiama.example.oberon0.base.TransformingDriver.resetflags(): Unit
0 ===> scala.collection.mutable.StringBuilder.append(s: String): StringBuilder
956 ===> org.kiama.example.RISC.RISCISA.XORI.productIterator: Iterator[Any]
5900 ===> org.kiama.example.oberon0.L0.source.GtExp.left: org.kiama.example.oberon0.L0.source.Expression
11537 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
7750 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productElement(x$1: Int): Any
326 ===> org.kiama.attribution.AttributionTests.QuadTree.toString(): String
4644 ===> org.kiama.example.lambda2.AST.Letp.toString(): String
0 ===> org.kiama.example.dataflow.Optimise.elimDeadAssign: org.kiama.rewriting.Rewriter.Strategy
10845 ===> org.kiama.example.transform.AST.Var.productPrefix: String
7849 ===> org.kiama.example.obr.ObrTree.BoolExp.toString(): String
9965 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productElement(x$1: Int): Any
8459 ===> org.kiama.example.obr.RISCTree.DivW.l: org.kiama.example.obr.RISCTree.Datum
2981 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productPrefix: String
1725 ===> org.kiama.example.imperative.AST.Null.productArity: Int
4145 ===> org.kiama.example.iswim.secd.StringOps.PushString.toString(): String
9693 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.Value: org.kiama.example.picojava.AbstractSyntax.Exp
4863 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6144 ===> org.kiama.example.oberon0.L0.source.IdnExp.productIterator: Iterator[Any]
6480 ===> org.kiama.example.oberon0.L3.SymbolTable.isVariable(e: SymbolTable.this.Entity): Boolean
5501 ===> org.kiama.example.oberon0.L0.c.CGeExp.left: org.kiama.example.oberon0.base.c.CExpression
8043 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productPrefix: String
11095 ===> org.kiama.output.PrettyPrinterBase.rbrace: PrettyPrinterBase.this.Doc
3508 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productIterator: Iterator[Any]
4151 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productPrefix: String
1131 ===> org.kiama.example.RISC.RISCISA.WRH.productArity: Int
9369 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productIterator: Iterator[Any]
6391 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productPrefix: String
12528 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n4: ParserUtilitiesTests.this.Node
8156 ===> org.kiama.example.obr.RISCEncoder.gentarget(): Int
3574 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productIterator: Iterator[Any]
8384 ===> org.kiama.example.obr.RISCTree.CmpeqW.r: org.kiama.example.obr.RISCTree.Datum
3580 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.toString(): String
5682 ===> org.kiama.example.oberon0.L0.c.CNotExp.exp: org.kiama.example.oberon0.base.c.CExpression
4096 ===> org.kiama.example.iswim.secd.StackOps.Dup.productElement(x$1: Int): Any
6234 ===> org.kiama.example.oberon0.L1.source.IfStatement.elsifs: List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)]
320 ===> org.kiama.attribution.AttributionTests.QuadTree.productPrefix: String
6595 ===> org.kiama.example.oberon0.L3.c.CAddrExp.exp: org.kiama.example.oberon0.base.c.CExpression
0 ===> org.kiama.example.imperative.Parser.start: Parser.this.PackratParser[org.kiama.example.imperative.AST.Stmt]
8876 ===> org.kiama.example.obr.SPARCTree.AddW.r: org.kiama.example.obr.SPARCTree.Datum
0 ===> org.kiama.example.obr.SyntaxAnalysis.statementseq: SyntaxAnalysis.this.Parser[List[org.kiama.example.obr.ObrTree.Statement]]
3030 ===> org.kiama.example.iswim.secd.HeapOps.Put.productArity: Int
8316 ===> org.kiama.example.obr.RISCTree.Write.productElement(x$1: Int): Any
6647 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productPrefix: String
9733 ===> org.kiama.example.picojava.AbstractSyntax.IdnUse.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.IdnUse
9910 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productElement(x$1: Int): Any
2619 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.toString(): String
1689 ===> org.kiama.example.imperative.AST.Mul.productIterator: Iterator[Any]
4971 ===> org.kiama.example.lambda3.AST.Num.productIterator: Iterator[Any]
5202 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.decl: org.kiama.example.oberon0.base.source.ModuleDecl
11815 ===> org.kiama.rewriting.RewriterTests.NotSame.productElement(x$1: Int): Any
9758 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productArity: Int
839 ===> org.kiama.example.RISC.RISCISA.AND.a: org.kiama.example.RISC.RISCISA.RegNo
7678 ===> org.kiama.example.obr.ObrTree.IfStmt.productPrefix: String
4272 ===> org.kiama.example.json.JSONTree.JArray.productElement(x$1: Int): Any
10058 ===> org.kiama.example.prolog.PrologTree.Var.<init>(s: String): org.kiama.example.prolog.PrologTree.Var
10200 ===> org.kiama.example.prolog.SymbolTable.AtomType.productPrefix: String
10508 ===> org.kiama.example.til.AST.Id.s: String
321 ===> org.kiama.attribution.AttributionTests.QuadTree.productArity: Int
11543 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
12469 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productArity: Int
7826 ===> org.kiama.example.obr.ObrTree.AndExp.productIterator: Iterator[Any]
12382 ===> org.kiama.util.IO.filereader$default$2: String @scala.annotation.unchecked.uncheckedVariance
2615 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productElement(x$1: Int): Any
11891 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5062 ===> org.kiama.example.lambda3.AST.EvalQuery.productElement(x$1: Int): Any
12184 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5386 ===> org.kiama.example.oberon0.L0.c.CAssignment.productArity: Int
2071 ===> org.kiama.example.iswim.compiler.Syntax.Minus.toString(): String
7034 ===> org.kiama.example.oberon0.base.TranslatingDriver.pprintcastFlag: Boolean
5881 ===> org.kiama.example.oberon0.L0.source.LeExp.left: org.kiama.example.oberon0.L0.source.Expression
12054 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
954 ===> org.kiama.example.RISC.RISCISA.XORI.productArity: Int
2933 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productElement(x$1: Int): Any
1894 ===> org.kiama.example.imperative.Generator.genInternalExp(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Exp]
673 ===> org.kiama.example.RISC.RISCISA.MUL.toString(): String
0 ===> org.kiama.example.obr.SyntaxAnalysis.constantdecl: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.Declaration]
10288 ===> org.kiama.example.repmin.Fork.toString(): String
11903 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6279 ===> org.kiama.example.oberon0.L2.Desugarer.transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
6363 ===> org.kiama.example.oberon0.L2.source.Case.toString(): String
0 ===> org.kiama.example.obr.SyntaxAnalysis.parameterdecl: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.Declaration]
10847 ===> org.kiama.example.transform.AST.Var.productElement(x$1: Int): Any
3545 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.toString(): String
11262 ===> org.kiama.rewriting.NominalAST.Name.productPrefix: String
4672 ===> org.kiama.example.lambda2.AST.IntType.productElement(x$1: Int): Any
9574 ===> org.kiama.example.oneohonecompanies.Cut.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1873 ===> org.kiama.example.imperative.Imperative.setup(args: Array[String]): Boolean
1842 ===> org.kiama.example.imperative.ASTNonCase.Num.toString(): String
8332 ===> org.kiama.example.obr.RISCTree.Read.productElement(x$1: Int): Any
668 ===> org.kiama.example.RISC.RISCISA.MUL.productIterator: Iterator[Any]
11597 ===> org.kiama.rewriting.Rewriter.$anon.oneMap[CC[V, W] <: Map[V,W]](t: CC[Rewriter.this.Term,Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term,Rewriter.this.Term],(Rewriter.this.Term, Rewriter.this.Term),CC[Rewriter.this.Term,Rewriter.this.Term]]): Option[CC[Rewriter.this.Term,Rewriter.this.Term]]
10547 ===> org.kiama.example.til.AST.Num.productArity: Int
12512 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productPrefix: String
5201 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.ident: String
5671 ===> org.kiama.example.oberon0.L0.c.CNegExp.productElement(x$1: Int): Any
5344 ===> org.kiama.example.oberon0.L0.c.CInitDecl.e: org.kiama.example.oberon0.base.c.CExpression
11816 ===> org.kiama.rewriting.RewriterTests.NotSame.productIterator: Iterator[Any]
11625 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
4764 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
1701 ===> org.kiama.example.imperative.AST.Div.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Div
3423 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.<init>(bdy: List[org.kiama.example.iswim.secd.SECDBase.ByteCodeBase]): org.kiama.example.iswim.secd.SECDBase.CodeTree
5882 ===> org.kiama.example.oberon0.L0.source.LeExp.right: org.kiama.example.oberon0.L0.source.Expression
10299 ===> org.kiama.example.repmin.Leaf.productPrefix: String
11671 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
10733 ===> org.kiama.example.transform.AST.Program.productArity: Int
1985 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.toString(): String
0 ===> org.kiama.example.obr.SyntaxAnalysis.term: SyntaxAnalysis.this.PackratParser[org.kiama.example.obr.ObrTree.Expression]
9744 ===> org.kiama.example.picojava.AbstractSyntax.Use.toString(): String
10708 ===> org.kiama.example.til.TIL2_2.transform(ast: org.kiama.example.til.AST.Program): org.kiama.example.til.AST.Program
5066 ===> org.kiama.example.lambda3.AST.EvalQuery.toString(): String
8998 ===> org.kiama.example.obr.SPARCTree.DivW.productArity: Int
1201 ===> org.kiama.example.RISC.RISCISA.BLT.productArity: Int
3809 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.hashCode(): Int
11403 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.toString(): String
5992 ===> org.kiama.example.oberon0.L0.source.OrExp.toString(): String
539 ===> org.kiama.example.RISC.RISCISA.MVN.productPrefix: String
5243 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productPrefix: String
10672 ===> org.kiama.example.til.AST.Ne.r: org.kiama.example.til.AST.Exp
12455 ===> org.kiama.util.ParserUtilitiesTests.Node.toString(): String
5215 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.toString(): String
6280 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11395 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productArity: Int
2551 ===> org.kiama.example.iswim.compiler.Syntax.Block.toString(): String
4756 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
5024 ===> org.kiama.example.lambda3.AST.Lam.productIterator: Iterator[Any]
2279 ===> org.kiama.example.iswim.compiler.Syntax.Not.toString(): String
486 ===> org.kiama.example.RISC.RISCISA.Assembler.<init>(): org.kiama.example.RISC.RISCISA.Assembler
1264 ===> org.kiama.example.RISC.RISCISA.BR.productPrefix: String
10494 ===> org.kiama.example.til.AST.Write.productPrefix: String
11328 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
9334 ===> org.kiama.example.obr.SymbolTable.ArrayType.productElement(x$1: Int): Any
0 ===> scala.util.parsing.combinator.Parsers.Error.productElement(x$1: Int): Any
10735 ===> org.kiama.example.transform.AST.Program.productIterator: Iterator[Any]
5450 ===> org.kiama.example.oberon0.L0.c.CLtExp.productElement(x$1: Int): Any
8152 ===> org.kiama.example.obr.RISCEncoder.emitcomment(text: String): Unit
763 ===> org.kiama.example.RISC.RISCISA.MODI.im: org.kiama.example.RISC.RISCISA.Imm
4371 ===> org.kiama.example.json.PrettyPrinting.showPair(p: (org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)): PrettyPrinting.this.Doc
12590 ===> org.kiama.util.PositionedParserUtilities.Parser[T](f: PositionedParserUtilities.this.Input => PositionedParserUtilities.this.ParseResult[T]): PositionedParserUtilities.this.Parser[T]
4445 ===> org.kiama.example.lambda.AST.App.toString(): String
7095 ===> org.kiama.example.oberon0.base.c.CInclude.toString(): String
0 ===> scala.util.parsing.combinator.RegexParsers.parse[T](p: RegexParsers.this.Parser[T],in: java.io.Reader): RegexParsers.this.ParseResult[T]
10634 ===> org.kiama.example.til.AST.Sub.r: org.kiama.example.til.AST.Exp
5588 ===> org.kiama.example.oberon0.L0.c.CMulExp.productPrefix: String
4629 ===> org.kiama.example.lambda2.AST.Letp.bs: List[org.kiama.example.lambda2.AST.Bind]
2932 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productArity: Int
3020 ===> org.kiama.example.iswim.secd.HeapOps.Get.toString(): String
11319 ===> org.kiama.rewriting.PositionedRewriter.rewriting[T <: PositionedRewriter.this.Term](oldTerm: T,newTerm: T): T
11011 ===> org.kiama.output.PrettyPrinterBase.defaultWidth: Int
0 ===> org.kiama.example.prolog.SyntaxAnalysis.list: SyntaxAnalysis.this.Parser[org.kiama.example.prolog.PrologTree.Literal]
2744 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.toString(): String
1185 ===> org.kiama.example.RISC.RISCISA.BNE.productArity: Int
3651 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productIterator: Iterator[Any]
12166 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5804 ===> org.kiama.example.oberon0.L0.source.Assignment.productArity: Int
0 ===> org.kiama.example.oberon0.L0.TypeAnalyser.deftype: org.kiama.example.oberon0.L0.source.TypeDef => TypeAnalyser.this.Type
0 ===> org.kiama.example.json.SyntaxAnalysis.parser: SyntaxAnalysis.this.PackratParser[org.kiama.example.json.JSONTree.JValue]
6535 ===> org.kiama.example.oberon0.L3.c.CVoidType.toString(): String
2781 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productArity: Int
6441 ===> org.kiama.example.oberon0.L3.Parser.keywordStrings: List[String]
4040 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.toString(): String
3411 ===> org.kiama.example.iswim.secd.RecordOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
1443 ===> org.kiama.example.dataflow.DataflowAST.Return.ret: org.kiama.example.dataflow.DataflowAST.Var
9730 ===> org.kiama.example.picojava.AbstractSyntax.Exp.<init>(): org.kiama.example.picojava.AbstractSyntax.Exp
3962 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productPrefix: String
0 ===> org.kiama.example.oberon0.base.Parser.comment: Parser.this.PackratParser[Any]
258 ===> org.kiama.attribution.AttributionTests.GenSeqTree.toString(): String
7887 ===> org.kiama.example.obr.ObrTree.FieldExp.toString(): String
8647 ===> org.kiama.example.obr.RISCTree.Indexed.productArity: Int
5141 ===> org.kiama.example.lambda3.AST.SwapQuery.productArity: Int
8066 ===> org.kiama.example.obr.ObrTree.NotExp.toString(): String
77 ===> org.kiama.attribution.Attribution.CachedParamAttribute.<init>(f: A => (T => U)): Attribution.this.CachedParamAttribute[A,T,U]
0 ===> org.kiama.example.oberon0.L0.TypeAnalyser.idntype: org.kiama.example.oberon0.base.source.IdnUse => TypeAnalyser.this.Type
7786 ===> org.kiama.example.obr.ObrTree.TryBody.productElement(x$1: Int): Any
5434 ===> org.kiama.example.oberon0.L0.c.CNeExp.toString(): String
9608 ===> org.kiama.example.oneohonecompanies.Total.total(c: org.kiama.example.oneohonecompanies.Company.Company): Double
0 ===> scala.Some.productElement(x$1: Int): Any
3760 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productArity: Int
10543 ===> org.kiama.example.til.AST.Num.<init>(n: Int): org.kiama.example.til.AST.Num
9387 ===> org.kiama.example.obr.SymbolTable.EnumType.productIterator: Iterator[Any]
4878 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.oberon0.base.Parser.idnuse: Parser.this.Parser[org.kiama.example.oberon0.base.source.IdnUse]
1050 ===> org.kiama.example.RISC.RISCISA.STB.b: org.kiama.example.RISC.RISCISA.RegNo
3496 ===> org.kiama.example.iswim.secd.SECDBase.App.toString(): String
3505 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productPrefix: String
5995 ===> org.kiama.example.oberon0.L0.source.OrExp.toString(): String
0 ===> java.io.BufferedReader.readLine(): String
10790 ===> org.kiama.example.transform.AST.Factor.productElement(x$1: Int): Any
11088 ===> org.kiama.output.PrettyPrinterBase.rparen: PrettyPrinterBase.this.Doc
11583 ===> org.kiama.rewriting.Rewriter.same(v1: Any,v2: Any): Boolean
581 ===> org.kiama.example.RISC.RISCISA.ADD.productPrefix: String
9538 ===> org.kiama.example.oneohonecompanies.Company.PU.e: org.kiama.example.oneohonecompanies.Company.Employee
9817 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.toString(): String
9611 ===> org.kiama.example.oneohonecompanies.Total.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
975 ===> org.kiama.example.RISC.RISCISA.LDW.productArity: Int
944 ===> org.kiama.example.RISC.RISCISA.XORI.a: org.kiama.example.RISC.RISCISA.RegNo
0 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.flattened: List[org.kiama.example.iswim.secd.SECDBase.Instruction]
10283 ===> org.kiama.example.repmin.Fork.productArity: Int
7320 ===> org.kiama.example.oberon0.base.source.EmptyStmt.toString(): String
1181 ===> org.kiama.example.RISC.RISCISA.BNE.<init>(label: Int): org.kiama.example.RISC.RISCISA.BNE
4844 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> scala.Product6.productElement(n: Int): Any
752 ===> org.kiama.example.RISC.RISCISA.MOD.productIterator: Iterator[Any]
7975 ===> org.kiama.example.obr.ObrTree.LessExp.toString(): String
4630 ===> org.kiama.example.lambda2.AST.Letp.e: org.kiama.example.lambda2.AST.Exp
9530 ===> org.kiama.example.oneohonecompanies.Company.Employee.toString(): String
9711 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.Condition: org.kiama.example.picojava.AbstractSyntax.Exp
2501 ===> org.kiama.example.iswim.compiler.Syntax.If.e: org.kiama.example.iswim.compiler.Syntax.Expr
7612 ===> org.kiama.example.obr.ObrTree.Statement.<init>(): org.kiama.example.obr.ObrTree.Statement
4813 ===> org.kiama.example.lambda2.Lambda.prompt: String
12029 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1300 ===> org.kiama.example.RISC.RISCISA.RET.productIterator: Iterator[Any]
9927 ===> org.kiama.example.prolog.Interpreter.TermGoal.productElement(x$1: Int): Any
1122 ===> org.kiama.example.RISC.RISCISA.WRD.apply(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRD
5451 ===> org.kiama.example.oberon0.L0.c.CLtExp.productIterator: Iterator[Any]
10868 ===> org.kiama.machine.Machine.debug: Boolean
2899 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productArity: Int
309 ===> org.kiama.attribution.AttributionTests.TripleTree.toString(): String
3872 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productElement(x$1: Int): Any
9447 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.s: String
11614 ===> org.kiama.rewriting.Rewriter.collect[CC[U] <: Traversable[U], T](f: org.kiama.==>[Rewriter.this.Term,T])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[T],T,CC[T]]): Rewriter.this.Term => CC[T]
8720 ===> org.kiama.example.obr.SPARCTree.SPARC.productPrefix: String
10788 ===> org.kiama.example.transform.AST.Factor.productPrefix: String
798 ===> org.kiama.example.RISC.RISCISA.CMP.apply(b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.CMP
5943 ===> org.kiama.example.oberon0.L0.source.AddExp.right: org.kiama.example.oberon0.L0.source.Expression
12175 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.imperative.ASTNonCase.Mul.l: org.kiama.example.imperative.ASTNonCase.Exp
6116 ===> org.kiama.example.oberon0.L0.source.NotExp.toString(): String
3143 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.toString(): String
4636 ===> org.kiama.example.lambda2.AST.Letp.productArity: Int
10391 ===> org.kiama.example.til.AST.IfThen.e: org.kiama.example.til.AST.Exp
0 ===> scala.collection.convert.Wrappers.JMapWrapper.productElement(x$1: Int): Any
4351 ===> org.kiama.example.json.JSONTree.JNull.productElement(x$1: Int): Any
9015 ===> org.kiama.example.obr.SPARCTree.IntDatum.productArity: Int
8541 ===> org.kiama.example.obr.RISCTree.NegW.toString(): String
0 ===> scala.util.parsing.combinator.Parsers.Success.<init>(result: T,next: Parsers.this.Input): Parsers.this.Success[T]
7868 ===> org.kiama.example.obr.ObrTree.EqualExp.toString(): String
7906 ===> org.kiama.example.obr.ObrTree.GreaterExp.toString(): String
11416 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
0 ===> org.kiama.example.iswim.secd.ConversionOps.super$evalInst: PartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
6684 ===> org.kiama.example.oberon0.L3.source.ValMode.toString(): String
7475 ===> org.kiama.example.obr.ObrTree.IntParam.productIterator: Iterator[Any]
1406 ===> org.kiama.example.dataflow.DataflowAST.If.tru: org.kiama.example.dataflow.DataflowAST.Stm
8819 ===> org.kiama.example.obr.SPARCTree.Read.toString(): String
2916 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productIterator: Iterator[Any]
422 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.toString(): String
5797 ===> org.kiama.example.oberon0.L0.source.Assignment.desig: org.kiama.example.oberon0.L0.source.Expression
6424 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,Int] with Serializable
4108 ===> org.kiama.example.iswim.secd.StackOps.Swap.m: Int
2484 ===> org.kiama.example.iswim.compiler.Syntax.Apply.<init>(f: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Apply
2668 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productPrefix: String
848 ===> org.kiama.example.RISC.RISCISA.AND.productPrefix: String
6199 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productArity: Int
10987 ===> org.kiama.output.Infix.productElement(x$1: Int): Any
4573 ===> org.kiama.example.lambda2.AST.App.productArity: Int
2174 ===> org.kiama.example.iswim.compiler.Syntax.Less.r: org.kiama.example.iswim.compiler.Syntax.Expr
808 ===> org.kiama.example.RISC.RISCISA.CMPI.productPrefix: String
0 ===> scala.util.parsing.combinator.RegexParsers.whiteSpace: scala.util.matching.Regex
10755 ===> org.kiama.example.transform.AST.VarDecl.toString(): String
11602 ===> org.kiama.rewriting.Rewriter.$anon.someRewritable(r: org.kiama.rewriting.Rewritable): Option[Rewriter.this.Term]
0 ===> org.kiama.example.oberon0.L3.Parser.super$statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
1436 ===> org.kiama.example.dataflow.DataflowAST.Block.toString(): String
3560 ===> org.kiama.example.iswim.secd.SECDBase.Exit.toString(): String
9718 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productArity: Int
0 ===> org.kiama.example.oberon0.L3.c.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
11396 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productElement(x$1: Int): Any
10480 ===> org.kiama.example.til.AST.Read.productIterator: Iterator[Any]
2669 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productArity: Int
5016 ===> org.kiama.example.lambda3.AST.Lam.b: org.kiama.rewriting.NominalAST.Bind
2395 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
1157 ===> org.kiama.example.RISC.RISCISA.Branch.<init>(): org.kiama.example.RISC.RISCISA.Branch
2163 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productIterator: Iterator[Any]
890 ===> org.kiama.example.RISC.RISCISA.OR.productPrefix: String
0 ===> org.kiama.example.obr.SyntaxAnalysis.factor: SyntaxAnalysis.this.PackratParser[org.kiama.example.obr.ObrTree.Expression]
0 ===> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
7725 ===> org.kiama.example.obr.ObrTree.WhileStmt.cond: org.kiama.example.obr.ObrTree.Expression
0 ===> org.scalacheck.Gen.Params.productIterator: Iterator[Any]
10263 ===> org.kiama.example.prolog.Subst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6583 ===> org.kiama.example.oberon0.L3.c.CStrExp.productArity: Int
12586 ===> org.kiama.util.Positioned.setFinish(p: scala.util.parsing.input.Position): Positioned.this.type
11302 ===> org.kiama.rewriting.NominalRewriter.swap[T](tr: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name))(t: T): T
398 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productElement(x$1: Int): Any
4183 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.m: String
1596 ===> org.kiama.example.imperative.AST.Var.toString(): String
2061 ===> org.kiama.example.iswim.compiler.Syntax.Minus.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Minus
6009 ===> org.kiama.example.oberon0.L0.source.MulExp.productPrefix: String
6816 ===> org.kiama.example.oberon0.L4.c.CRecordType.fields: List[org.kiama.example.oberon0.base.c.CVarDecl]
374 ===> org.kiama.attribution.Decorators.Chain.toString(): String
0 ===> org.kiama.example.prolog.SyntaxAnalysis.program: SyntaxAnalysis.this.Parser[org.kiama.example.prolog.PrologTree.Program]
5112 ===> org.kiama.example.lambda3.AST.SubstQuery.e1: org.kiama.example.lambda3.AST.Exp
6143 ===> org.kiama.example.oberon0.L0.source.IdnExp.productElement(x$1: Int): Any
12362 ===> org.kiama.util.Environments.lookup(env: Environments.this.Environment,i: String,e: Environments.this.Entity,scope: Boolean): Environments.this.Entity
12450 ===> org.kiama.util.ParserUtilitiesTests.Node.productArity: Int
9084 ===> org.kiama.example.obr.SPARCTree.Not.productPrefix: String
9414 ===> org.kiama.example.obr.SymbolTable.ExnType.toString(): String
0 ===> scala.Product2.productArity: Int
4725 ===> org.kiama.example.lambda2.AST.AddOp.productIterator: Iterator[Any]
12495 ===> org.kiama.util.ParserUtilitiesTests.Tup3.toString(): String
2652 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L0.NameAnalyser.isconst: org.kiama.example.oberon0.L0.source.Expression => Boolean
0 ===> org.kiama.example.oberon0.L0.Parser.term: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
0 ===> org.kiama.example.lambda.Parser.integer: Parser.this.Parser[org.kiama.example.lambda.AST.Num]
9316 ===> org.kiama.example.obr.SymbolTable.BoolType.productElement(x$1: Int): Any
10360 ===> org.kiama.example.til.AST.Decl.productArity: Int
11861 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9053 ===> org.kiama.example.obr.SPARCTree.MulW.productIterator: Iterator[Any]
8596 ===> org.kiama.example.obr.RISCTree.SubW.toString(): String
4719 ===> org.kiama.example.lambda2.AST.AddOp.<init>(): org.kiama.example.lambda2.AST.AddOp
1232 ===> org.kiama.example.RISC.RISCISA.BLE.productPrefix: String
7291 ===> org.kiama.example.oberon0.base.source.Block.stmts: List[org.kiama.example.oberon0.base.source.Statement]
10266 ===> org.kiama.example.prolog.Subst.$anon.m: scala.collection.immutable.Map[String,org.kiama.example.prolog.PrologTree.Term]
272 ===> org.kiama.attribution.AttributionTests.MapTree.productIterator: Iterator[Any]
1146 ===> org.kiama.example.RISC.RISCISA.WRL.productArity: Int
7130 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productIterator: Iterator[Any]
674 ===> org.kiama.example.RISC.RISCISA.MUL.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MUL
6072 ===> org.kiama.example.oberon0.L0.source.AndExp.toString(): String
10424 ===> org.kiama.example.til.AST.IfElse.toString(): String
12388 ===> org.kiama.util.Messaging.Record.message: String
4955 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9958 ===> org.kiama.example.prolog.Interpreter.MatchGoal.right: org.kiama.example.prolog.PrologTree.Term
1333 ===> org.kiama.example.RISC.RISCISA.Comment.productArity: Int
11313 ===> org.kiama.rewriting.NominalRewriter.fv(t: NominalRewriter.this.Term): Set[org.kiama.rewriting.NominalAST.Name]
1629 ===> org.kiama.example.imperative.AST.Neg.toString(): String
6201 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productIterator: Iterator[Any]
5094 ===> org.kiama.example.lambda3.AST.FreshQuery.execute: FreshQuery.this.T
7065 ===> org.kiama.example.oberon0.base.c.CProgram.<init>(includes: List[org.kiama.example.oberon0.base.c.CInclude],decls: List[org.kiama.example.oberon0.base.c.CDeclaration]): org.kiama.example.oberon0.base.c.CProgram
11912 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8229 ===> org.kiama.example.obr.RISCTree.Bne.productPrefix: String
5122 ===> org.kiama.example.lambda3.AST.SubstQuery.productElement(x$1: Int): Any
11724 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3120 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productArity: Int
2448 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.<init>(par: org.kiama.example.iswim.compiler.Syntax.Variable,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Lambda
499 ===> org.kiama.example.RISC.RISCISA.MOV.productElement(x$1: Int): Any
10244 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productPrefix: String
7129 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productElement(x$1: Int): Any
0 ===> org.kiama.example.til.TIL1_1.term: TIL1_1.this.PackratParser[org.kiama.example.til.AST.Exp]
11806 ===> org.kiama.rewriting.RewriterTests.Same.productElement(x$1: Int): Any
11595 ===> org.kiama.rewriting.Rewriter.$anon.oneRewritable(r: org.kiama.rewriting.Rewritable): Option[Rewriter.this.Term]
2401 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productElement(x$1: Int): Any
792 ===> org.kiama.example.RISC.RISCISA.CMP.productIterator: Iterator[Any]
6793 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productIterator: Iterator[Any]
2966 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.e: ExceptionHandler.this.Environment
8862 ===> org.kiama.example.obr.SPARCTree.Write.productArity: Int
0 ===> org.kiama.example.til.TIL1_1.read_statement: TIL1_1.this.Parser[org.kiama.example.til.AST.Read]
7916 ===> org.kiama.example.obr.ObrTree.IdnExp.productElement(x$1: Int): Any
1213 ===> org.kiama.example.RISC.RISCISA.BGE.<init>(label: Int): org.kiama.example.RISC.RISCISA.BGE
2600 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.toString(): String
4741 ===> org.kiama.example.lambda2.AST.SubOp.productIterator: Iterator[Any]
3540 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productArity: Int
5186 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
11168 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productPrefix: String
3557 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productIterator: Iterator[Any]
4656 ===> org.kiama.example.lambda2.AST.Bind.productElement(x$1: Int): Any
5461 ===> org.kiama.example.oberon0.L0.c.CLeExp.left: org.kiama.example.oberon0.base.c.CExpression
4347 ===> org.kiama.example.json.JSONTree.JNull.<init>(): org.kiama.example.json.JSONTree.JNull
7279 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productIterator: Iterator[Any]
4307 ===> org.kiama.example.json.JSONTree.JNumber.productIterator: Iterator[Any]
6957 ===> org.kiama.example.oberon0.L4.source.FieldExp.productIterator: Iterator[Any]
4841 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11329 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
2771 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.toString(): String
10510 ===> org.kiama.example.til.AST.Id.toString(): String
6050 ===> org.kiama.example.oberon0.L0.source.ModExp.productIterator: Iterator[Any]
11996 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7039 ===> org.kiama.example.oberon0.base.TranslatingDriver.processargs(args: List[String]): Boolean
11951 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2 ===> org.kiama.attribution.Attributable.parent: org.kiama.attribution.Attributable
7037 ===> org.kiama.example.oberon0.base.TranslatingDriver.pprintcastFlagDefault: Boolean
2303 ===> org.kiama.example.iswim.compiler.Syntax.Or.r: org.kiama.example.iswim.compiler.Syntax.Expr
7872 ===> org.kiama.example.obr.ObrTree.FieldExp.idn: org.kiama.example.obr.ObrTree.Identifier
3410 ===> org.kiama.example.iswim.secd.RecordOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
8513 ===> org.kiama.example.obr.RISCTree.MulW.r: org.kiama.example.obr.RISCTree.Datum
12316 ===> org.kiama.util.Environments.Named.count_$eq(x$1: Int): Unit
7762 ===> org.kiama.example.obr.ObrTree.TryStmt.catches: List[org.kiama.example.obr.ObrTree.Catch]
11042 ===> org.kiama.output.PrettyPrinterBase.list$default$3[T]: T => PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
663 ===> org.kiama.example.RISC.RISCISA.MUL.toString(): String
9402 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productElement(x$1: Int): Any
9969 ===> org.kiama.example.prolog.Interpreter.MatchGoal.toString(): String
9985 ===> org.kiama.example.prolog.Interpreter.varsof(t: org.kiama.example.prolog.PrologTree.Term): Set[String]
7900 ===> org.kiama.example.obr.ObrTree.GreaterExp.productIterator: Iterator[Any]
1272 ===> org.kiama.example.RISC.RISCISA.BR.toString(): String
7952 ===> org.kiama.example.obr.ObrTree.IntExp.productElement(x$1: Int): Any
6937 ===> org.kiama.example.oberon0.L4.source.FieldList.productElement(x$1: Int): Any
2078 ===> org.kiama.example.iswim.compiler.Syntax.Times.l: org.kiama.example.iswim.compiler.Syntax.Expr
4003 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.hashCode(): Int
2364 ===> org.kiama.example.iswim.compiler.Syntax.Let.productArity: Int
9651 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.Name: String
1309 ===> org.kiama.example.RISC.RISCISA.Pseudo.<init>(): org.kiama.example.RISC.RISCISA.Pseudo
9386 ===> org.kiama.example.obr.SymbolTable.EnumType.productElement(x$1: Int): Any
6315 ===> org.kiama.example.oberon0.L2.source.ForStatement.productArity: Int
1909 ===> org.kiama.example.imperative.ImperativeGen.process(s: org.kiama.example.imperative.AST.Stmt): Unit
4635 ===> org.kiama.example.lambda2.AST.Letp.productPrefix: String
4869 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7086 ===> org.kiama.example.oberon0.base.c.CInclude.productPrefix: String
12267 ===> org.kiama.util.RegexCompiler.makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter): Either[T,String]
11957 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.lambda2.Parser.op: Parser.this.Parser[Product with Serializable with org.kiama.example.lambda2.AST.Op]
10653 ===> org.kiama.example.til.AST.Eq.r: org.kiama.example.til.AST.Exp
9723 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.toString(): String
8247 ===> org.kiama.example.obr.RISCTree.Jmp.productArity: Int
0 ===> org.kiama.example.oberon0.base.Parser.statementSequence: Parser.this.Parser[org.kiama.example.oberon0.base.source.Block]
4521 ===> org.kiama.example.lambda2.AST.Num.toString(): String
8566 ===> org.kiama.example.obr.RISCTree.RemW.r: org.kiama.example.obr.RISCTree.Datum
1009 ===> org.kiama.example.RISC.RISCISA.POP.im: org.kiama.example.RISC.RISCISA.Imm
2545 ===> org.kiama.example.iswim.compiler.Syntax.Block.productPrefix: String
520 ===> org.kiama.example.RISC.RISCISA.MOVI.productElement(x$1: Int): Any
7331 ===> org.kiama.example.oberon0.base.source.IdnDef.productArity: Int
6232 ===> org.kiama.example.oberon0.L1.source.IfStatement.cond: org.kiama.example.oberon0.L0.source.Expression
244 ===> org.kiama.attribution.AttributionTests.SetTree.toString(): String
5196 ===> org.kiama.example.oberon0.L0.Parser.typedefDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.TypeDef]
9059 ===> org.kiama.example.obr.SPARCTree.MulW.toString(): String
11784 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2194 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LessEq
7672 ===> org.kiama.example.obr.ObrTree.IfStmt.elses: List[org.kiama.example.obr.ObrTree.Statement]
0 ===> org.kiama.example.oberon0.L2.Parser.kase: Parser.this.Parser[org.kiama.example.oberon0.L2.source.Case]
9978 ===> org.kiama.example.prolog.Interpreter.renamecount: Int
7292 ===> org.kiama.example.oberon0.base.source.Block.<init>(decls: List[org.kiama.example.oberon0.base.source.Declaration],stmts: List[org.kiama.example.oberon0.base.source.Statement]): org.kiama.example.oberon0.base.source.Block
9180 ===> org.kiama.example.obr.SPARCTree.Label.productIterator: Iterator[Any]
10846 ===> org.kiama.example.transform.AST.Var.productArity: Int
7205 ===> org.kiama.example.oberon0.base.c.CArrayType.toString(): String
11676 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
509 ===> org.kiama.example.RISC.RISCISA.MOVI.a: org.kiama.example.RISC.RISCISA.RegNo
11283 ===> org.kiama.rewriting.NominalAST.Bind.productArity: Int
5210 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productIterator: Iterator[Any]
1953 ===> org.kiama.example.iswim.compiler.Syntax.Expr.<init>(): org.kiama.example.iswim.compiler.Syntax.Expr
6091 ===> org.kiama.example.oberon0.L0.source.NegExp.productIterator: Iterator[Any]
8297 ===> org.kiama.example.obr.RISCTree.StW.productPrefix: String
2702 ===> org.kiama.example.iswim.compiler.Syntax.Val.productPrefix: String
4941 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3435 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productArity: Int
6047 ===> org.kiama.example.oberon0.L0.source.ModExp.productPrefix: String
10951 ===> org.kiama.output.RightAssoc.toString(): String
7243 ===> org.kiama.example.oberon0.base.c.CIntExp.v: Int
4484 ===> org.kiama.example.lambda.Evaluator.fv(t: org.kiama.example.lambda.AST.Exp): Set[org.kiama.example.lambda.AST.Idn]
5314 ===> org.kiama.example.oberon0.L0.SymbolTable.isConstant(e: SymbolTable.this.Entity): Boolean
3695 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productPrefix: String
5833 ===> org.kiama.example.oberon0.L0.source.EqExp.productIterator: Iterator[Any]
9692 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.Variable: org.kiama.example.picojava.AbstractSyntax.Access
829 ===> org.kiama.example.RISC.RISCISA.CHKI.productElement(x$1: Int): Any
1128 ===> org.kiama.example.RISC.RISCISA.WRH.toString(): String
1818 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1649 ===> org.kiama.example.imperative.AST.Add.productIterator: Iterator[Any]
0 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
10267 ===> org.kiama.example.prolog.Subst.toString(): String
929 ===> org.kiama.example.RISC.RISCISA.XOR.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.XOR
8896 ===> org.kiama.example.obr.SPARCTree.Cond.f: org.kiama.example.obr.SPARCTree.Datum
6530 ===> org.kiama.example.oberon0.L3.c.CVoidType.productArity: Int
1669 ===> org.kiama.example.imperative.AST.Sub.productIterator: Iterator[Any]
7162 ===> org.kiama.example.oberon0.base.c.CIntType.productPrefix: String
2048 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productElement(x$1: Int): Any
9097 ===> org.kiama.example.obr.SPARCTree.RemW.l: org.kiama.example.obr.SPARCTree.Datum
11238 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.toString(): String
6320 ===> org.kiama.example.oberon0.L2.source.ForStatement.toString(): String
7881 ===> org.kiama.example.obr.ObrTree.FieldExp.productIterator: Iterator[Any]
8160 ===> org.kiama.example.obr.RISCEncoder.reg: org.kiama.example.obr.RISCTree.RISCNode => org.kiama.example.RISC.RISCISA.RegNo
1263 ===> org.kiama.example.RISC.RISCISA.BR.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
7269 ===> org.kiama.example.oberon0.base.source.ModuleDecl.block: org.kiama.example.oberon0.base.source.Block
5976 ===> org.kiama.example.oberon0.L0.source.SubExp.toString(): String
3290 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.toString(): String
11100 ===> org.kiama.output.PrettyPrinterBase.colon: PrettyPrinterBase.this.Doc
168 ===> org.kiama.attribution.AttributionTests.Leaf.productArity: Int
5760 ===> org.kiama.example.oberon0.L0.source.TypeDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
5574 ===> org.kiama.example.oberon0.L0.c.COrExp.toString(): String
4920 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.oberon0.L4.Parser.idnlist: Parser.this.Parser[List[String]]
8573 ===> org.kiama.example.obr.RISCTree.RemW.productElement(x$1: Int): Any
2259 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.toString(): String
5134 ===> org.kiama.example.lambda3.AST.SwapQuery.e: org.kiama.example.lambda3.AST.Exp
0 ===> org.kiama.example.lambda2.ParEagerSubst.s: org.kiama.rewriting.Rewriter.Strategy
0 ===> org.kiama.example.picojava.Parser.while_stmt: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.WhileStmt]
8571 ===> org.kiama.example.obr.RISCTree.RemW.productPrefix: String
9249 ===> org.kiama.example.obr.SymbolTable.Constant.productIterator: Iterator[Any]
6676 ===> org.kiama.example.oberon0.L3.source.ValMode.<init>(): org.kiama.example.oberon0.L3.source.ValMode
8468 ===> org.kiama.example.obr.RISCTree.DivW.productIterator: Iterator[Any]
6804 ===> org.kiama.example.oberon0.L4.SymbolTable.isRecord(e: SymbolTable.this.Entity): Boolean
7403 ===> org.kiama.example.obr.Driver.spillRISCAssemFlag_$eq(x$1: Boolean): Unit
2597 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productIterator: Iterator[Any]
7178 ===> org.kiama.example.oberon0.base.c.CStrType.productArity: Int
8646 ===> org.kiama.example.obr.RISCTree.Indexed.productPrefix: String
11906 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8168 ===> org.kiama.example.obr.RISCEncoder.encode(d: org.kiama.example.obr.RISCTree.Datum): Unit
11174 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.toString(): String
12498 ===> org.kiama.util.ParserUtilitiesTests.Tup3.toString(): String
3187 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productPrefix: String
4337 ===> org.kiama.example.json.JSONTree.JFalse.productIterator: Iterator[Any]
0 ===> org.kiama.example.imperative.Parser.sequence: Parser.this.Parser[org.kiama.example.imperative.AST.Seqn]
5756 ===> org.kiama.example.oberon0.L0.source.VarDecl.toString(): String
8973 ===> org.kiama.example.obr.SPARCTree.CmpltW.r: org.kiama.example.obr.SPARCTree.Datum
7577 ===> org.kiama.example.obr.ObrTree.IntConst.value: Int
7026 ===> org.kiama.example.oberon0.base.TransformingDriver.pprintiastFlagDefault: Boolean
1830 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4970 ===> org.kiama.example.lambda3.AST.Num.productElement(x$1: Int): Any
5255 ===> org.kiama.example.oberon0.L0.SymbolTable.Type.<init>(): SymbolTable.this.Type
4515 ===> org.kiama.example.lambda2.AST.Num.productPrefix: String
12570 ===> org.kiama.util.ParserUtilitiesTests.Tup6.toString(): String
11344 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionalRewriter.Term): Boolean
5437 ===> org.kiama.example.oberon0.L0.c.CNeExp.toString(): String
7983 ===> org.kiama.example.obr.ObrTree.MinusExp.right: org.kiama.example.obr.ObrTree.Expression
1279 ===> org.kiama.example.RISC.RISCISA.BSR.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
3032 ===> org.kiama.example.iswim.secd.HeapOps.Put.productIterator: Iterator[Any]
11532 ===> org.kiama.rewriting.Rewriter.PlusStrategy.lhs: Rewriter.this.Strategy
2290 ===> org.kiama.example.iswim.compiler.Syntax.And.productArity: Int
10937 ===> org.kiama.output.LeftAssoc.productArity: Int
7994 ===> org.kiama.example.obr.ObrTree.MinusExp.toString(): String
3947 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productElement(x$1: Int): Any
2503 ===> org.kiama.example.iswim.compiler.Syntax.If.els: org.kiama.example.iswim.compiler.Syntax.Expr
6204 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.toString(): String
3137 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productIterator: Iterator[Any]
9368 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productElement(x$1: Int): Any
6468 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productPrefix: String
8927 ===> org.kiama.example.obr.SPARCTree.CmpeqW.toString(): String
4641 ===> org.kiama.example.lambda2.AST.Letp.toString(): String
3366 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productIterator: Iterator[Any]
4489 ===> org.kiama.example.lambda.Evaluator.normal: org.kiama.rewriting.Rewriter.Strategy
802 ===> org.kiama.example.RISC.RISCISA.CMPI.im: org.kiama.example.RISC.RISCISA.Imm
10418 ===> org.kiama.example.til.AST.IfElse.productPrefix: String
10967 ===> org.kiama.output.Prefix.productIterator: Iterator[Any]
5018 ===> org.kiama.example.lambda3.AST.Lam.toString(): String
7015 ===> org.kiama.example.oberon0.base.Driver.initialiseSemanticAnalysis: Unit
10128 ===> org.kiama.example.prolog.PrologTree.Cut.<init>(): org.kiama.example.prolog.PrologTree.Cut
2613 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productPrefix: String
2634 ===> org.kiama.example.iswim.compiler.Syntax.Match.productElement(x$1: Int): Any
933 ===> org.kiama.example.RISC.RISCISA.XOR.productArity: Int
10867 ===> org.kiama.machine.Machine.<init>(name: String,emitter: org.kiama.util.Emitter): org.kiama.machine.Machine
2655 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.toString(): String
4306 ===> org.kiama.example.json.JSONTree.JNumber.productElement(x$1: Int): Any
11981 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12419 ===> org.kiama.util.ParserUtilities.result[T](v: => T): ParserUtilities.this.Parser[T]
8825 ===> org.kiama.example.obr.SPARCTree.Ret.productPrefix: String
11690 ===> org.kiama.rewriting.Rewriter.everywhere(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
0 ===> org.kiama.example.dataflow.Parser.whileStm: Parser.this.Parser[org.kiama.example.dataflow.DataflowAST.While]
10780 ===> org.kiama.example.transform.AST.BinExpR.toString(): String
4005 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.toString(): String
6748 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.elemtype: SymbolTable.this.Type
5649 ===> org.kiama.example.oberon0.L0.c.CAndExp.productArity: Int
8447 ===> org.kiama.example.obr.RISCTree.CmpltW.productArity: Int
220 ===> org.kiama.attribution.AttributionTests.ListTree.productElement(x$1: Int): Any
10076 ===> org.kiama.example.prolog.PrologTree.Integer.toString(): String
10284 ===> org.kiama.example.repmin.Fork.productElement(x$1: Int): Any
0 ===> org.kiama.example.prolog.SyntaxAnalysis.terms: SyntaxAnalysis.this.Parser[List[org.kiama.example.prolog.PrologTree.Term]]
9953 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.toString(): String
5968 ===> org.kiama.example.oberon0.L0.source.SubExp.productArity: Int
10238 ===> org.kiama.example.prolog.SymbolTable.ListType.toString(): String
2458 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.toString(): String
1826 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8615 ===> org.kiama.example.obr.RISCTree.SequenceDatum.toString(): String
5278 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productPrefix: String
7491 ===> org.kiama.example.obr.ObrTree.BoolVar.productElement(x$1: Int): Any
6336 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productArity: Int
6178 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productArity: Int
218 ===> org.kiama.attribution.AttributionTests.ListTree.productPrefix: String
12431 ===> org.kiama.util.ParserUtilities.constToTupleFunction5[A, B, C, D, E, R](r: (A, B, C, D, E) => R): ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E] => R
10362 ===> org.kiama.example.til.AST.Decl.productIterator: Iterator[Any]
1982 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.toString(): String
6741 ===> org.kiama.example.oberon0.L4.NameAnalyser.isLvalue(l: org.kiama.example.oberon0.L0.source.Expression): Boolean
10954 ===> org.kiama.output.NonAssoc.productPrefix: String
2530 ===> org.kiama.example.iswim.compiler.Syntax.While.productElement(x$1: Int): Any
10378 ===> org.kiama.example.til.AST.Assign.productPrefix: String
12306 ===> org.kiama.util.StringEmitter.emitln(): Unit
7696 ===> org.kiama.example.obr.ObrTree.LoopStmt.productArity: Int
4724 ===> org.kiama.example.lambda2.AST.AddOp.productElement(x$1: Int): Any
4937 ===> org.kiama.example.lambda2.Reduce.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
548 ===> org.kiama.example.RISC.RISCISA.MVN.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MVN
8130 ===> org.kiama.example.obr.ObrTree.StarExp.left: org.kiama.example.obr.ObrTree.Expression
877 ===> org.kiama.example.RISC.RISCISA.ANDI.toString(): String
595 ===> org.kiama.example.RISC.RISCISA.ADDI.im: org.kiama.example.RISC.RISCISA.Imm
1393 ===> org.kiama.example.dataflow.DataflowAST.While.productArity: Int
11177 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.toString(): String
6470 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productElement(x$1: Int): Any
10258 ===> org.kiama.example.prolog.Subst.<init>(): org.kiama.example.prolog.Subst
6338 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productIterator: Iterator[Any]
10639 ===> org.kiama.example.til.AST.Sub.productPrefix: String
6329 ===> org.kiama.example.oberon0.L2.source.CaseStatement.optelse: Option[org.kiama.example.oberon0.base.source.Block]
12372 ===> org.kiama.util.IO.FileNotFoundException.productIterator: Iterator[Any]
681 ===> org.kiama.example.RISC.RISCISA.MULI.toString(): String
1059 ===> org.kiama.example.RISC.RISCISA.STB.productArity: Int
3974 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.s: SECDBase.this.Stack
1008 ===> org.kiama.example.RISC.RISCISA.POP.b: org.kiama.example.RISC.RISCISA.RegNo
0 ===> org.kiama.example.iswim.compiler.Parser.ifelseexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
705 ===> org.kiama.example.RISC.RISCISA.DIV.toString(): String
316 ===> org.kiama.attribution.AttributionTests.QuadTree.p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)
0 ===> org.kiama.example.oberon0.L3.NameAnalyser.super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
721 ===> org.kiama.example.RISC.RISCISA.DIVI.im: org.kiama.example.RISC.RISCISA.Imm
9392 ===> org.kiama.example.obr.SymbolTable.EnumType.toString(): String
2447 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.body: org.kiama.example.iswim.compiler.Syntax.Expr
12002 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
821 ===> org.kiama.example.RISC.RISCISA.CHKI.im: org.kiama.example.RISC.RISCISA.Imm
11352 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionalRewriter.Term): Boolean
6568 ===> org.kiama.example.oberon0.L3.c.CCall.productIterator: Iterator[Any]
11433 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
1453 ===> org.kiama.example.dataflow.DataflowAST.Return.toString(): String
5672 ===> org.kiama.example.oberon0.L0.c.CNegExp.productIterator: Iterator[Any]
12097 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8863 ===> org.kiama.example.obr.SPARCTree.Write.productElement(x$1: Int): Any
9793 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productElement(x$1: Int): Any
9792 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productArity: Int
1908 ===> org.kiama.example.imperative.ImperativeGen.generator: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Stmt]
0 ===> scala.Some.productArity: Int
12256 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1484 ===> org.kiama.example.dataflow.Foreach.productIterator: Iterator[Any]
8165 ===> org.kiama.example.obr.RISCEncoder.compare(op: Int => org.kiama.example.RISC.RISCISA.Instr,l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum,d: org.kiama.example.obr.RISCTree.Datum): Unit
7062 ===> org.kiama.example.oberon0.base.c.CASTNode.<init>(): org.kiama.example.oberon0.base.c.CASTNode
4947 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
506 ===> org.kiama.example.RISC.RISCISA.MOV.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOV
5690 ===> org.kiama.example.oberon0.L0.c.CNotExp.productElement(x$1: Int): Any
6919 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productIterator: Iterator[Any]
10797 ===> org.kiama.example.transform.AST.Factor.toString(): String
8954 ===> org.kiama.example.obr.SPARCTree.CmpgtW.r: org.kiama.example.obr.SPARCTree.Datum
9505 ===> org.kiama.example.oneohonecompanies.Company.Dept.productElement(x$1: Int): Any
0 ===> org.kiama.example.oberon0.L0.NameAnalyser.super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
6803 ===> org.kiama.example.oberon0.L4.SymbolTable.isNotArray(e: SymbolTable.this.Entity): Boolean
10347 ===> org.kiama.example.til.AST.Program.toString(): String
7770 ===> org.kiama.example.obr.ObrTree.TryStmt.productIterator: Iterator[Any]
1066 ===> org.kiama.example.RISC.RISCISA.STB.toString(): String
9947 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productIterator: Iterator[Any]
4671 ===> org.kiama.example.lambda2.AST.IntType.productArity: Int
10701 ===> org.kiama.example.til.TIL2_1.declareforvars: org.kiama.rewriting.Rewriter.Strategy
6555 ===> org.kiama.example.oberon0.L3.c.CAddrType.toString(): String
1848 ===> org.kiama.example.imperative.ASTNonCase.Var.toString(): String
5468 ===> org.kiama.example.oberon0.L0.c.CLeExp.productPrefix: String
4352 ===> org.kiama.example.json.JSONTree.JNull.productIterator: Iterator[Any]
4253 ===> org.kiama.example.json.JSONTree.JName.productPrefix: String
11849 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10926 ===> org.kiama.machine.MachineTests.M.main: Unit
10507 ===> org.kiama.example.til.AST.Exp.<init>(): org.kiama.example.til.AST.Exp
4431 ===> org.kiama.example.lambda.AST.Lam.productArity: Int
1261 ===> org.kiama.example.RISC.RISCISA.BR.<init>(label: Int): org.kiama.example.RISC.RISCISA.BR
8298 ===> org.kiama.example.obr.RISCTree.StW.productArity: Int
0 ===> org.scalacheck.Gen.Params.<init>(size: Int,rng: java.util.Random): org.scalacheck.Gen.Params
1802 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12567 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productIterator: Iterator[Any]
10931 ===> org.kiama.machine.MachineTests.MM.t: org.kiama.machine.MachineTests.MM.State[String]
9989 ===> org.kiama.example.prolog.Main.main(args: Array[String]): Unit
5136 ===> org.kiama.example.lambda3.AST.SwapQuery.execute: SwapQuery.this.T
3680 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productPrefix: String
8590 ===> org.kiama.example.obr.RISCTree.SubW.productPrefix: String
8074 ===> org.kiama.example.obr.ObrTree.OrExp.right: org.kiama.example.obr.ObrTree.Expression
0 ===> java.lang.Object.<init>(): Object
467 ===> org.kiama.example.RISC.RISC.debug: Boolean
21 ===> org.kiama.attribution.Attributable.$minus$greater[U](a: Attributable.this.type => U): U
0 ===> org.kiama.example.iswim.compiler.Parser.parenexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
8331 ===> org.kiama.example.obr.RISCTree.Read.productArity: Int
1334 ===> org.kiama.example.RISC.RISCISA.Comment.productElement(x$1: Int): Any
5517 ===> org.kiama.example.oberon0.L0.c.CGeExp.toString(): String
0 ===> org.kiama.example.oberon0.L2.Parser.caseStatement: Parser.this.Parser[org.kiama.example.oberon0.L2.source.CaseStatement]
9626 ===> org.kiama.example.picojava.AbstractSyntax.Program.toString(): String
704 ===> org.kiama.example.RISC.RISCISA.DIV.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.DIV
11757 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.imperative.Parser.stmt: Parser.this.PackratParser[org.kiama.example.imperative.AST.Stmt]
3913 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.message: String
2717 ===> org.kiama.example.iswim.compiler.Syntax.Assign.<init>(r: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Assign
163 ===> org.kiama.attribution.AttributionTests.Leaf.value: Int
948 ===> org.kiama.example.RISC.RISCISA.XORI.toString(): String
3463 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.toString(): String
10124 ===> org.kiama.example.prolog.PrologTree.Pred.toString(): String
2010 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productPrefix: String
3008 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.toString(): String
10555 ===> org.kiama.example.til.AST.Num.toString(): String
5534 ===> org.kiama.example.oberon0.L0.c.CAddExp.toString(): String
4587 ===> org.kiama.example.lambda2.AST.Opn.e2: org.kiama.example.lambda2.AST.Exp
9317 ===> org.kiama.example.obr.SymbolTable.BoolType.productIterator: Iterator[Any]
2802 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productElement(x$1: Int): Any
5973 ===> org.kiama.example.oberon0.L0.source.SubExp.toString(): String
360 ===> org.kiama.attribution.Decorators.Chain.out: T => U
4377 ===> org.kiama.example.json.Rewriter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1688 ===> org.kiama.example.imperative.AST.Mul.productElement(x$1: Int): Any
2104 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productArity: Int
4039 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.<init>(): SECDBase.this.EmptyCont
5036 ===> org.kiama.example.lambda3.AST.EquivQuery.e2: org.kiama.example.lambda3.AST.Exp
10529 ===> org.kiama.example.til.AST.Var.productPrefix: String
6995 ===> org.kiama.example.oberon0.base.Driver.usageMessage: String
791 ===> org.kiama.example.RISC.RISCISA.CMP.productElement(x$1: Int): Any
10144 ===> org.kiama.example.prolog.SemanticAnalysis.check(n: org.kiama.example.prolog.PrologTree.SourceNode): Unit
3400 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productElement(x$1: Int): Any
6867 ===> org.kiama.example.oberon0.L4.c.CFieldExp.toString(): String
11443 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
4873 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
6397 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.toString(): String
11475 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.l: org.kiama.rewriting.SupportPositionedRewriterTests.Node
12584 ===> org.kiama.util.Positioned.finish: scala.util.parsing.input.Position
10021 ===> org.kiama.example.prolog.PrologTree.Fact.bdy: List[org.kiama.example.prolog.PrologTree.Term]
888 ===> org.kiama.example.RISC.RISCISA.OR.toString(): String
11524 ===> org.kiama.rewriting.Rewriter.Strategy.$less$plus(q: => Rewriter.this.Strategy): Rewriter.this.Strategy
3905 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.hashCode(): Int
861 ===> org.kiama.example.RISC.RISCISA.ANDI.b: org.kiama.example.RISC.RISCISA.RegNo
11975 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5238 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.tipe: org.kiama.example.oberon0.L0.source.TypeDef
9231 ===> org.kiama.example.obr.SymbolTable.Variable.toString(): String
5280 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productElement(x$1: Int): Any
6510 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productElement(x$1: Int): Any
8603 ===> org.kiama.example.obr.RISCTree.SequenceDatum.insns: List[org.kiama.example.obr.RISCTree.Item]
9063 ===> org.kiama.example.obr.SPARCTree.NegW.d: org.kiama.example.obr.SPARCTree.Datum
8552 ===> org.kiama.example.obr.RISCTree.Not.productPrefix: String
7071 ===> org.kiama.example.oberon0.base.c.CProgram.productElement(x$1: Int): Any
0 ===> org.kiama.example.til.TIL1_1.parser: TIL1_1.this.Parser[org.kiama.example.til.AST.Program]
2412 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
5611 ===> org.kiama.example.oberon0.L0.c.CDivExp.productIterator: Iterator[Any]
2591 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.<init>(ns: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Pattern
0 ===> org.kiama.example.json.SyntaxAnalysis.jnumber: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JNumber]
3967 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.hashCode(): Int
6354 ===> org.kiama.example.oberon0.L2.source.Case.productPrefix: String
9668 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.toString(): String
1311 ===> org.kiama.example.RISC.RISCISA.Target.<init>(label: Int): org.kiama.example.RISC.RISCISA.Target
0 ===> org.kiama.example.til.TIL1_1.for_statement: TIL1_1.this.Parser[org.kiama.example.til.AST.For]
7522 ===> org.kiama.example.obr.ObrTree.RecordVar.fields: List[org.kiama.example.obr.ObrTree.Identifier]
9397 ===> org.kiama.example.obr.SymbolTable.EnumTypes.toString(): String
4154 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productIterator: Iterator[Any]
5075 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.execute: FreeNamesQuery.this.T
5237 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.ident: String
1011 ===> org.kiama.example.RISC.RISCISA.POP.toString(): String
11939 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1159 ===> org.kiama.example.RISC.RISCISA.Branch.disp: org.kiama.example.RISC.RISCISA.Disp
7879 ===> org.kiama.example.obr.ObrTree.FieldExp.productArity: Int
7438 ===> org.kiama.example.obr.ObrTree.ObrInt.productArity: Int
6471 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productIterator: Iterator[Any]
6935 ===> org.kiama.example.oberon0.L4.source.FieldList.productPrefix: String
555 ===> org.kiama.example.RISC.RISCISA.MVNI.toString(): String
4516 ===> org.kiama.example.lambda2.AST.Num.productArity: Int
6922 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.toString(): String
5793 ===> org.kiama.example.oberon0.L0.source.NamedType.toString(): String
6337 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productElement(x$1: Int): Any
11411 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
4731 ===> org.kiama.example.lambda2.AST.AddOp.toString(): String
688 ===> org.kiama.example.RISC.RISCISA.MULI.productElement(x$1: Int): Any
6634 ===> org.kiama.example.oberon0.L3.c.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
4391 ===> org.kiama.example.lambda.AST.Num.toString(): String
4762 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1288 ===> org.kiama.example.RISC.RISCISA.BSR.toString(): String
7348 ===> org.kiama.example.oberon0.base.source.IdnUse.productArity: Int
5589 ===> org.kiama.example.oberon0.L0.c.CMulExp.productArity: Int
2796 ===> org.kiama.example.iswim.secd.BooleanOps.Test.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
7474 ===> org.kiama.example.obr.ObrTree.IntParam.productElement(x$1: Int): Any
7964 ===> org.kiama.example.obr.ObrTree.LessExp.right: org.kiama.example.obr.ObrTree.Expression
652 ===> org.kiama.example.RISC.RISCISA.SUBI.toString(): String
9543 ===> org.kiama.example.oneohonecompanies.Company.PU.productArity: Int
941 ===> org.kiama.example.RISC.RISCISA.XOR.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.XOR
4691 ===> org.kiama.example.lambda2.AST.FunType.productElement(x$1: Int): Any
0 ===> org.kiama.example.iswim.compiler.Parser.term2: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
1098 ===> org.kiama.example.RISC.RISCISA.RD.productElement(x$1: Int): Any
2866 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productElement(x$1: Int): Any
8300 ===> org.kiama.example.obr.RISCTree.StW.productIterator: Iterator[Any]
8664 ===> org.kiama.example.obr.RISCTree.Label.productArity: Int
4622 ===> org.kiama.example.lambda2.AST.Let.toString(): String
2024 ===> org.kiama.example.iswim.compiler.Syntax.Negate.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Negate
6881 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productArity: Int
4956 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10875 ===> org.kiama.machine.Machine.State.value: T
11646 ===> org.kiama.rewriting.Rewriter.bottomup(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
3805 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productArity: Int
3278 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.toString(): String
10097 ===> org.kiama.example.prolog.PrologTree.Atom.productPrefix: String
8962 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productIterator: Iterator[Any]
2523 ===> org.kiama.example.iswim.compiler.Syntax.While.body: org.kiama.example.iswim.compiler.Syntax.Expr
4689 ===> org.kiama.example.lambda2.AST.FunType.productPrefix: String
2577 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productPrefix: String
3203 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productArity: Int
11552 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
9506 ===> org.kiama.example.oneohonecompanies.Company.Dept.productIterator: Iterator[Any]
11285 ===> org.kiama.rewriting.NominalAST.Bind.productIterator: Iterator[Any]
2817 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productElement(x$1: Int): Any
1251 ===> org.kiama.example.RISC.RISCISA.BGT.productIterator: Iterator[Any]
4057 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toString(): String
0 ===> org.kiama.example.oberon0.base.Parser.declarations: Parser.this.PackratParser[List[org.kiama.example.oberon0.base.source.Declaration]]
11586 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
6649 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productElement(x$1: Int): Any
8246 ===> org.kiama.example.obr.RISCTree.Jmp.productPrefix: String
0 ===> scala.util.parsing.combinator.Parsers.Error.toString(): String
10046 ===> org.kiama.example.prolog.PrologTree.Rule.productIterator: Iterator[Any]
6344 ===> org.kiama.example.oberon0.L2.source.CaseStatement.toString(): String
11589 ===> org.kiama.rewriting.Rewriter.$anon.allTraversable[CC[_] <: Traversable[Rewriter.this.Term]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
10201 ===> org.kiama.example.prolog.SymbolTable.AtomType.productArity: Int
1228 ===> org.kiama.example.RISC.RISCISA.BLE.label: Int
322 ===> org.kiama.attribution.AttributionTests.QuadTree.productElement(x$1: Int): Any
6004 ===> org.kiama.example.oberon0.L0.source.MulExp.right: org.kiama.example.oberon0.L0.source.Expression
6502 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.ident: String
0 ===> scala.util.parsing.combinator.Parsers.elem(kind: String,p: Parsers.this.Elem => Boolean): Parsers.this.Parser[Parsers.this.Elem]
11400 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.toString(): String
2249 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.b: Boolean
3492 ===> org.kiama.example.iswim.secd.SECDBase.App.productElement(x$1: Int): Any
9142 ===> org.kiama.example.obr.SPARCTree.Local.productElement(x$1: Int): Any
1283 ===> org.kiama.example.RISC.RISCISA.BSR.productIterator: Iterator[Any]
8678 ===> org.kiama.example.obr.RISCTree.lastlab_$eq(x$1: Int): Unit
10564 ===> org.kiama.example.til.AST.Str.productPrefix: String
12540 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productIterator: Iterator[Any]
6385 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.minvalue: org.kiama.example.oberon0.L0.source.Expression
7502 ===> org.kiama.example.obr.ObrTree.ArrayVar.idn: org.kiama.example.obr.ObrTree.Identifier
0 ===> org.kiama.example.lambda2.ParLazy.letLetRen: org.kiama.rewriting.Rewriter.Strategy
0 ===> org.kiama.util.FileConsole.reader: java.io.BufferedReader
0 ===> org.kiama.example.picojava.Parser.var_decl: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.VarDecl]
10975 ===> org.kiama.output.Postfix.productElement(x$1: Int): Any
9116 ===> org.kiama.example.obr.SPARCTree.SubW.l: org.kiama.example.obr.SPARCTree.Datum
11807 ===> org.kiama.rewriting.RewriterTests.Same.productIterator: Iterator[Any]
0 ===> org.kiama.example.transform.Parser.vardecl: Parser.this.Parser[org.kiama.example.transform.AST.VarDecl]
5149 ===> org.kiama.example.lambda3.AST.SwapQuery.toString(): String
3930 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productPrefix: String
7007 ===> org.kiama.example.oberon0.base.Driver.printastFlagDefault: Boolean
0 ===> scala.util.parsing.combinator.Parsers.rep1[T](p: => Parsers.this.Parser[T]): Parsers.this.Parser[List[T]]
5919 ===> org.kiama.example.oberon0.L0.source.GeExp.left: org.kiama.example.oberon0.L0.source.Expression
0 ===> scala.App.main(args: Array[String]): Unit
4886 ===> org.kiama.example.lambda2.ParLazy.letOpn(eval: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
0 ===> scala.collection.mutable.StringBuilder.subSequence(start: Int,end: Int): CharSequence
3190 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productIterator: Iterator[Any]
9374 ===> org.kiama.example.obr.SymbolTable.RecordTypes.toString(): String
1687 ===> org.kiama.example.imperative.AST.Mul.productArity: Int
4390 ===> org.kiama.example.lambda.AST.Num.<init>(i: Int): org.kiama.example.lambda.AST.Num
0 ===> scala.PartialFunction.orElse[A1 <: A, B1 >: B](that: PartialFunction[A1,B1]): PartialFunction[A1,B1]
12342 ===> org.kiama.util.Environments.UnknownEntity.productElement(x$1: Int): Any
1591 ===> org.kiama.example.imperative.AST.Var.s: org.kiama.example.imperative.AST.Idn
12483 ===> org.kiama.util.ParserUtilitiesTests.Tup3.n3: ParserUtilitiesTests.this.Node
658 ===> org.kiama.example.RISC.RISCISA.MUL.c: org.kiama.example.RISC.RISCISA.RegNo
10565 ===> org.kiama.example.til.AST.Str.productArity: Int
8485 ===> org.kiama.example.obr.RISCTree.IntDatum.productIterator: Iterator[Any]
9561 ===> org.kiama.example.oneohonecompanies.Company.DU.productElement(x$1: Int): Any
0 ===> java.lang.Object.ne(x$1: AnyRef): Boolean
10264 ===> org.kiama.example.prolog.Subst.compose(s: org.kiama.example.prolog.Subst): org.kiama.example.prolog.Subst
5306 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.toString(): String
2756 ===> org.kiama.example.iswim.driver.Main.$anon.debug: Boolean
3072 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.toString(): String
9684 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.toString(): String
10677 ===> org.kiama.example.til.AST.Ne.productPrefix: String
3460 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productIterator: Iterator[Any]
8527 ===> org.kiama.example.obr.RISCTree.MulW.toString(): String
12601 ===> org.kiama.util.REPLBase.main(args: Array[String]): Unit
0 ===> scala.runtime.AbstractPartialFunction.apply(x: T1): R
8772 ===> org.kiama.example.obr.SPARCTree.Jmp.dest: org.kiama.example.obr.SPARCTree.Label
3902 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productElement(x$1: Int): Any
1225 ===> org.kiama.example.RISC.RISCISA.BGE.apply(label: Int): org.kiama.example.RISC.RISCISA.BGE
809 ===> org.kiama.example.RISC.RISCISA.CMPI.productArity: Int
10003 ===> org.kiama.example.prolog.PrologTree.Program.productPrefix: String
2331 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.toString(): String
4593 ===> org.kiama.example.lambda2.AST.Opn.productPrefix: String
883 ===> org.kiama.example.RISC.RISCISA.OR.c: org.kiama.example.RISC.RISCISA.RegNo
12325 ===> org.kiama.util.Environments.MultipleEntity.productPrefix: String
4012 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productArity: Int
5581 ===> org.kiama.example.oberon0.L0.c.CMulExp.left: org.kiama.example.oberon0.base.c.CExpression
7946 ===> org.kiama.example.obr.ObrTree.IntExp.num: Int
5391 ===> org.kiama.example.oberon0.L0.c.CAssignment.toString(): String
105 ===> org.kiama.attribution.Attribution.paramAttr[A, T <: AnyRef, U](optNameDef: Option[String])(f: A => (T => U)): Attribution.this.CachedParamAttribute[A,T,U]
11117 ===> org.kiama.output.PrettyPrinter.Doc.$less$greater(e: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
0 ===> org.kiama.example.oberon0.L0.TypeAnalyser.tipe: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
4172 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productArity: Int
5322 ===> org.kiama.example.oberon0.L0.TypeAnalyser.tipeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
1028 ===> org.kiama.example.RISC.RISCISA.STW.a: org.kiama.example.RISC.RISCISA.RegNo
10774 ===> org.kiama.example.transform.AST.BinExpR.productIterator: Iterator[Any]
11499 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productArity: Int
4772 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
1267 ===> org.kiama.example.RISC.RISCISA.BR.productIterator: Iterator[Any]
4559 ===> org.kiama.example.lambda2.AST.Lam.toString(): String
7956 ===> org.kiama.example.obr.ObrTree.IntExp.toString(): String
6547 ===> org.kiama.example.oberon0.L3.c.CAddrType.productArity: Int
10105 ===> org.kiama.example.prolog.PrologTree.Atom.toString(): String
7349 ===> org.kiama.example.oberon0.base.source.IdnUse.productElement(x$1: Int): Any
7141 ===> org.kiama.example.oberon0.base.c.CBlock.stmts: List[org.kiama.example.oberon0.base.c.CStatement]
8113 ===> org.kiama.example.obr.ObrTree.SlashExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.SlashExp
1954 ===> org.kiama.example.iswim.compiler.Syntax.Stmt.<init>(): org.kiama.example.iswim.compiler.Syntax.Stmt
3421 ===> org.kiama.example.iswim.secd.SECDBase.instNumber: org.kiama.example.iswim.secd.SECDBase.ByteCode => Int
3701 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.toString(): String
11613 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
3031 ===> org.kiama.example.iswim.secd.HeapOps.Put.productElement(x$1: Int): Any
10344 ===> org.kiama.example.til.AST.Program.productIterator: Iterator[Any]
0 ===> java.lang.IllegalArgumentException.<init>(x$1: String): IllegalArgumentException
11577 ===> org.kiama.rewriting.Rewriter.makechild(c: Any): AnyRef
2422 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.toString(): String
5262 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productPrefix: String
5270 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.toString(): String
7107 ===> org.kiama.example.oberon0.base.c.CVarDecl.productArity: Int
9618 ===> org.kiama.example.picojava.AbstractSyntax.Program.productArity: Int
5531 ===> org.kiama.example.oberon0.L0.c.CAddExp.productIterator: Iterator[Any]
3616 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productPrefix: String
5221 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.<init>(ident: String,decl: org.kiama.example.oberon0.L0.source.ConstDecl): SymbolTable.this.Constant
7860 ===> org.kiama.example.obr.ObrTree.EqualExp.productArity: Int
8478 ===> org.kiama.example.obr.RISCTree.IntDatum.num: Int
500 ===> org.kiama.example.RISC.RISCISA.MOV.productIterator: Iterator[Any]
10490 ===> org.kiama.example.til.AST.Write.e: org.kiama.example.til.AST.Exp
475 ===> org.kiama.example.RISC.RISC.N: RISC.this.State[Boolean]
2562 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productElement(x$1: Int): Any
4153 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productElement(x$1: Int): Any
6242 ===> org.kiama.example.oberon0.L1.source.IfStatement.productPrefix: String
6814 ===> org.kiama.example.oberon0.L4.TypeAnalyser.tipeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
5925 ===> org.kiama.example.oberon0.L0.source.GeExp.productPrefix: String
1836 ===> org.kiama.example.imperative.ASTNonCase.Exp.<init>(): org.kiama.example.imperative.ASTNonCase.Exp
1765 ===> org.kiama.example.imperative.AST.Asgn.productIterator: Iterator[Any]
1680 ===> org.kiama.example.imperative.AST.Mul.r: org.kiama.example.imperative.AST.Exp
95 ===> org.kiama.attribution.Attribution.attr[T <: AnyRef, U](optNameDef: Option[String])(f: T => U): Attribution.this.CachedAttribute[T,U]
2413 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetRecStmt
12458 ===> org.kiama.util.ParserUtilitiesTests.Node.toString(): String
2416 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productPrefix: String
573 ===> org.kiama.example.RISC.RISCISA.ADD.b: org.kiama.example.RISC.RISCISA.RegNo
4408 ===> org.kiama.example.lambda.AST.Var.toString(): String
0 ===> org.kiama.example.oberon0.L2.Parser.conditions: Parser.this.Parser[List[org.kiama.example.oberon0.L2.source.Condition with Serializable]]
0 ===> org.kiama.util.StringConsole.reader: java.io.BufferedReader
2033 ===> org.kiama.example.iswim.compiler.Syntax.Negate.toString(): String
5805 ===> org.kiama.example.oberon0.L0.source.Assignment.productElement(x$1: Int): Any
10082 ===> org.kiama.example.prolog.PrologTree.Integer.productIterator: Iterator[Any]
2417 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productArity: Int
590 ===> org.kiama.example.RISC.RISCISA.ADD.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.ADD
10274 ===> org.kiama.example.prolog.Unifier.unify(ls: List[org.kiama.example.prolog.PrologTree.Term],rs: List[org.kiama.example.prolog.PrologTree.Term]): Option[org.kiama.example.prolog.Subst]
1692 ===> org.kiama.example.imperative.AST.Mul.toString(): String
8949 ===> org.kiama.example.obr.SPARCTree.CmpneW.toString(): String
11837 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10906 ===> org.kiama.machine.Machine.ParamUpdate.key: AnyRef
830 ===> org.kiama.example.RISC.RISCISA.CHKI.productIterator: Iterator[Any]
11359 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productArity: Int
5279 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productArity: Int
11763 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6476 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.toString(): String
2322 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.<init>(s: String): org.kiama.example.iswim.compiler.Syntax.StringVal
2123 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productArity: Int
3856 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productArity: Int
8735 ===> org.kiama.example.obr.SPARCTree.Beq.dest: org.kiama.example.obr.SPARCTree.Label
10368 ===> org.kiama.example.til.AST.Decl.toString(): String
6852 ===> org.kiama.example.oberon0.L4.c.CFieldExp.record: org.kiama.example.oberon0.base.c.CExpression
10683 ===> org.kiama.example.til.AST.Ne.toString(): String
6392 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productArity: Int
4255 ===> org.kiama.example.json.JSONTree.JName.productElement(x$1: Int): Any
3419 ===> org.kiama.example.iswim.secd.SECDBase.ByteCode.<init>(): org.kiama.example.iswim.secd.SECDBase.ByteCode
2774 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.toString(): String
8734 ===> org.kiama.example.obr.SPARCTree.Beq.cond: org.kiama.example.obr.SPARCTree.Datum
7915 ===> org.kiama.example.obr.ObrTree.IdnExp.productArity: Int
1419 ===> org.kiama.example.dataflow.DataflowAST.If.toString(): String
11924 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8531 ===> org.kiama.example.obr.RISCTree.NegW.d: org.kiama.example.obr.RISCTree.Datum
4395 ===> org.kiama.example.lambda.AST.Num.productArity: Int
12090 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12083 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6037 ===> org.kiama.example.oberon0.L0.source.DivExp.toString(): String
3379 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productPrefix: String
7016 ===> org.kiama.example.oberon0.base.Driver.process(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
3792 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productIterator: Iterator[Any]
11921 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12492 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productIterator: Iterator[Any]
708 ===> org.kiama.example.RISC.RISCISA.DIV.productArity: Int
0 ===> scala.Some.toString(): String
2518 ===> org.kiama.example.iswim.compiler.Syntax.If.toString(): String
4704 ===> org.kiama.example.lambda2.AST.NoType.productPrefix: String
0 ===> scala.Product4.productElement(n: Int): Any
3158 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productArity: Int
3247 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productPrefix: String
8864 ===> org.kiama.example.obr.SPARCTree.Write.productIterator: Iterator[Any]
0 ===> scala.collection.mutable.StringBuilder.append(x: Char): StringBuilder
9136 ===> org.kiama.example.obr.SPARCTree.Local.offset: Int
9719 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productElement(x$1: Int): Any
10216 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productArity: Int
7972 ===> org.kiama.example.obr.ObrTree.LessExp.productIterator: Iterator[Any]
4903 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
625 ===> org.kiama.example.RISC.RISCISA.SUB.productElement(x$1: Int): Any
6107 ===> org.kiama.example.oberon0.L0.source.NotExp.productPrefix: String
5159 ===> org.kiama.example.lambda3.Lambda.process(q: org.kiama.example.lambda3.AST.Query): Unit
2708 ===> org.kiama.example.iswim.compiler.Syntax.Val.toString(): String
11122 ===> org.kiama.output.PrettyPrinter.group(d: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
1248 ===> org.kiama.example.RISC.RISCISA.BGT.productPrefix: String
5385 ===> org.kiama.example.oberon0.L0.c.CAssignment.productPrefix: String
2753 ===> org.kiama.example.iswim.driver.Main.main(args: Array[String]): Unit
5208 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productArity: Int
6041 ===> org.kiama.example.oberon0.L0.source.ModExp.left: org.kiama.example.oberon0.L0.source.Expression
1115 ===> org.kiama.example.RISC.RISCISA.WRD.productElement(x$1: Int): Any
416 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productIterator: Iterator[Any]
8749 ===> org.kiama.example.obr.SPARCTree.Beq.toString(): String
7991 ===> org.kiama.example.obr.ObrTree.MinusExp.productIterator: Iterator[Any]
9551 ===> org.kiama.example.oneohonecompanies.Company.PU.toString(): String
12390 ===> org.kiama.util.Messaging.Record.toString(): String
190 ===> org.kiama.attribution.AttributionTests.Unused.toString(): String
902 ===> org.kiama.example.RISC.RISCISA.ORI.a: org.kiama.example.RISC.RISCISA.RegNo
9517 ===> org.kiama.example.oneohonecompanies.Company.Employee.a: org.kiama.example.oneohonecompanies.Company.Address
11805 ===> org.kiama.rewriting.RewriterTests.Same.productArity: Int
1430 ===> org.kiama.example.dataflow.DataflowAST.Block.productPrefix: String
8310 ===> org.kiama.example.obr.RISCTree.Write.d: org.kiama.example.obr.RISCTree.Datum
7149 ===> org.kiama.example.oberon0.base.c.CBlock.productIterator: Iterator[Any]
3430 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
2472 ===> org.kiama.example.iswim.compiler.Syntax.Return.productIterator: Iterator[Any]
2116 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.l: org.kiama.example.iswim.compiler.Syntax.Expr
4394 ===> org.kiama.example.lambda.AST.Num.productPrefix: String
8779 ===> org.kiama.example.obr.SPARCTree.Jmp.productIterator: Iterator[Any]
9662 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productIterator: Iterator[Any]
0 ===> org.kiama.example.dataflow.Parser.idn: Parser.this.Parser[String]
5265 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productIterator: Iterator[Any]
12371 ===> org.kiama.util.IO.FileNotFoundException.productElement(x$1: Int): Any
6705 ===> org.kiama.example.oberon0.L3.source.FPSection.toString(): String
5602 ===> org.kiama.example.oberon0.L0.c.CDivExp.right: org.kiama.example.oberon0.base.c.CExpression
5887 ===> org.kiama.example.oberon0.L0.source.LeExp.productPrefix: String
361 ===> org.kiama.attribution.Decorators.Chain.<init>(in: T => U,out: T => U): org.kiama.attribution.Decorators.Chain[T,U]
8875 ===> org.kiama.example.obr.SPARCTree.AddW.l: org.kiama.example.obr.SPARCTree.Datum
10462 ===> org.kiama.example.til.AST.For.productElement(x$1: Int): Any
11519 ===> org.kiama.rewriting.Rewriter.Strategy.<init>(): Rewriter.this.Strategy
3750 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.toString(): String
5079 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productArity: Int
487 ===> org.kiama.example.RISC.RISCISA.Instr.<init>(): org.kiama.example.RISC.RISCISA.Instr
12421 ===> org.kiama.util.ParserUtilities.wrap[T, U](p: => ParserUtilities.this.Parser[T],f: T => Either[U,String]): ParserUtilities.this.Parser[U]
1082 ===> org.kiama.example.RISC.RISCISA.PSH.productIterator: Iterator[Any]
7602 ===> org.kiama.example.obr.ObrTree.ExnConst.productIterator: Iterator[Any]
1874 ===> org.kiama.example.imperative.Imperative.prompt: String
1168 ===> org.kiama.example.RISC.RISCISA.BEQ.productPrefix: String
254 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productElement(x$1: Int): Any
5362 ===> org.kiama.example.oberon0.L0.c.CTypeDef.decl: org.kiama.example.oberon0.base.c.CVarDecl
1751 ===> org.kiama.example.imperative.AST.Seqn.toString(): String
0 ===> org.kiama.example.oberon0.L0.Parser.simpexp: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
3305 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productElement(x$1: Int): Any
5970 ===> org.kiama.example.oberon0.L0.source.SubExp.productIterator: Iterator[Any]
9926 ===> org.kiama.example.prolog.Interpreter.TermGoal.productArity: Int
11590 ===> org.kiama.rewriting.Rewriter.$anon.allMap[CC[V, W] <: Map[V,W]](t: CC[Rewriter.this.Term,Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term,Rewriter.this.Term],(Rewriter.this.Term, Rewriter.this.Term),CC[Rewriter.this.Term,Rewriter.this.Term]]): Option[CC[Rewriter.this.Term,Rewriter.this.Term]]
11607 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
2419 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productIterator: Iterator[Any]
3988 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productPrefix: String
12370 ===> org.kiama.util.IO.FileNotFoundException.productArity: Int
10483 ===> org.kiama.example.til.AST.Read.toString(): String
6718 ===> org.kiama.example.oberon0.L3.source.Call.productPrefix: String
2142 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productArity: Int
881 ===> org.kiama.example.RISC.RISCISA.OR.a: org.kiama.example.RISC.RISCISA.RegNo
8474 ===> org.kiama.example.obr.RISCTree.DivW.toString(): String
8336 ===> org.kiama.example.obr.RISCTree.Read.toString(): String
7140 ===> org.kiama.example.oberon0.base.c.CBlock.decls: List[org.kiama.example.oberon0.base.c.CDeclaration]
10044 ===> org.kiama.example.prolog.PrologTree.Rule.productArity: Int
3759 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productPrefix: String
2724 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productIterator: Iterator[Any]
10087 ===> org.kiama.example.prolog.PrologTree.Integer.toString(): String
8984 ===> org.kiama.example.obr.SPARCTree.CmpltW.toString(): String
6883 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productIterator: Iterator[Any]
2783 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productIterator: Iterator[Any]
10869 ===> org.kiama.machine.Machine.State.sname: String
10513 ===> org.kiama.example.til.AST.Id.productPrefix: String
8554 ===> org.kiama.example.obr.RISCTree.Not.productElement(x$1: Int): Any
8660 ===> org.kiama.example.obr.RISCTree.Label.<init>(num: Int): org.kiama.example.obr.RISCTree.Label
8580 ===> org.kiama.example.obr.RISCTree.RemW.toString(): String
12080 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8398 ===> org.kiama.example.obr.RISCTree.CmpeqW.toString(): String
7446 ===> org.kiama.example.obr.ObrTree.ObrInt.toString(): String
11599 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
2317 ===> org.kiama.example.iswim.compiler.Syntax.Or.toString(): String
0 ===> org.kiama.example.imperative.Parser.double: Parser.this.Parser[org.kiama.example.imperative.AST.Num]
12343 ===> org.kiama.util.Environments.UnknownEntity.productIterator: Iterator[Any]
2042 ===> org.kiama.example.iswim.compiler.Syntax.Plus.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Plus
3401 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productIterator: Iterator[Any]
5477 ===> org.kiama.example.oberon0.L0.c.CLeExp.toString(): String
7737 ===> org.kiama.example.obr.ObrTree.WhileStmt.toString(): String
0 ===> scala.Tuple6.productIterator: Iterator[Any]
4190 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productElement(x$1: Int): Any
11751 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4679 ===> org.kiama.example.lambda2.AST.IntType.toString(): String
488 ===> org.kiama.example.RISC.RISCISA.MOV.a: org.kiama.example.RISC.RISCISA.RegNo
7829 ===> org.kiama.example.obr.ObrTree.AndExp.toString(): String
3354 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.toString(): String
6936 ===> org.kiama.example.oberon0.L4.source.FieldList.productArity: Int
3601 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productPrefix: String
1866 ===> org.kiama.example.imperative.ASTNonCase.Mul.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Mul
8495 ===> org.kiama.example.obr.RISCTree.LdW.mem: org.kiama.example.obr.RISCTree.Address
3256 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.toString(): String
2869 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.hashCode(): Int
686 ===> org.kiama.example.RISC.RISCISA.MULI.productPrefix: String
7089 ===> org.kiama.example.oberon0.base.c.CInclude.productIterator: Iterator[Any]
9141 ===> org.kiama.example.obr.SPARCTree.Local.productArity: Int
11987 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4695 ===> org.kiama.example.lambda2.AST.FunType.toString(): String
10030 ===> org.kiama.example.prolog.PrologTree.Fact.toString(): String
8827 ===> org.kiama.example.obr.SPARCTree.Ret.productElement(x$1: Int): Any
303 ===> org.kiama.attribution.AttributionTests.TripleTree.productPrefix: String
4267 ===> org.kiama.example.json.JSONTree.JArray.<init>(values: Vector[org.kiama.example.json.JSONTree.JValue]): org.kiama.example.json.JSONTree.JArray
11855 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3261 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.message: String
12551 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n2: ParserUtilitiesTests.this.Node
10851 ===> org.kiama.example.transform.AST.Var.toString(): String
11778 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.lambda2.ParLazyUpdate.e: org.kiama.rewriting.Rewriter.Strategy
1639 ===> org.kiama.example.imperative.AST.Add.r: org.kiama.example.imperative.AST.Exp
7917 ===> org.kiama.example.obr.ObrTree.IdnExp.productIterator: Iterator[Any]
8389 ===> org.kiama.example.obr.RISCTree.CmpeqW.productPrefix: String
9381 ===> org.kiama.example.obr.SymbolTable.EnumType.toString(): String
0 ===> org.kiama.example.iswim.compiler.Parser.emptyexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
7468 ===> org.kiama.example.obr.ObrTree.IntParam.idn: org.kiama.example.obr.ObrTree.Identifier
2087 ===> org.kiama.example.iswim.compiler.Syntax.Times.productIterator: Iterator[Any]
12552 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n3: ParserUtilitiesTests.this.Node
2350 ===> org.kiama.example.iswim.compiler.Syntax.Binding.toString(): String
5832 ===> org.kiama.example.oberon0.L0.source.EqExp.productElement(x$1: Int): Any
0 ===> org.kiama.example.transform.Analysis.errors: org.kiama.example.transform.AST.Exp => Unit
10166 ===> org.kiama.example.prolog.SymbolTable.Predicate.productPrefix: String
11453 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionedRewriter.Term): Boolean
8410 ===> org.kiama.example.obr.RISCTree.CmpneW.productElement(x$1: Int): Any
1462 ===> org.kiama.example.dataflow.DataflowAST.Empty.productPrefix: String
584 ===> org.kiama.example.RISC.RISCISA.ADD.productIterator: Iterator[Any]
8776 ===> org.kiama.example.obr.SPARCTree.Jmp.productPrefix: String
11873 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
646 ===> org.kiama.example.RISC.RISCISA.SUBI.productElement(x$1: Int): Any
12346 ===> org.kiama.util.Environments.UnknownEntity.toString(): String
7100 ===> org.kiama.example.oberon0.base.c.CVarDecl.ident: String
8264 ===> org.kiama.example.obr.RISCTree.LabelDef.productArity: Int
3795 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.toString(): String
6177 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productPrefix: String
513 ===> org.kiama.example.RISC.RISCISA.MOVI.toString(): String
12199 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1198 ===> org.kiama.example.RISC.RISCISA.BLT.toString(): String
3644 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.me: org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue
9160 ===> org.kiama.example.obr.SPARCTree.Indexed.productArity: Int
9017 ===> org.kiama.example.obr.SPARCTree.IntDatum.productIterator: Iterator[Any]
8191 ===> org.kiama.example.obr.RISCTree.RISCProg.productArity: Int
1180 ===> org.kiama.example.RISC.RISCISA.BNE.label: Int
1579 ===> org.kiama.example.imperative.AST.Num.productArity: Int
3873 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productIterator: Iterator[Any]
4475 ===> org.kiama.example.lambda.AST.Sub.toString(): String
0 ===> org.kiama.example.lambda3.Parser.integer: Parser.this.Parser[org.kiama.example.lambda3.AST.Num]
10841 ===> org.kiama.example.transform.AST.Var.name: String
4649 ===> org.kiama.example.lambda2.AST.Bind.e: org.kiama.example.lambda2.AST.Exp
8902 ===> org.kiama.example.obr.SPARCTree.Cond.productPrefix: String
5355 ===> org.kiama.example.oberon0.L0.c.CInitDecl.toString(): String
6522 ===> org.kiama.example.oberon0.L3.TypeAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
3607 ===> org.kiama.example.iswim.secd.SECDBase.Resume.toString(): String
6018 ===> org.kiama.example.oberon0.L0.source.MulExp.toString(): String
6664 ===> org.kiama.example.oberon0.L3.source.VarMode.productArity: Int
12331 ===> org.kiama.util.Environments.MultipleEntity.toString(): String
5557 ===> org.kiama.example.oberon0.L0.c.CSubExp.toString(): String
7859 ===> org.kiama.example.obr.ObrTree.EqualExp.productPrefix: String
12193 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4173 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productElement(x$1: Int): Any
2147 ===> org.kiama.example.iswim.compiler.Syntax.Equal.toString(): String
1456 ===> org.kiama.example.dataflow.DataflowAST.Return.toString(): String
841 ===> org.kiama.example.RISC.RISCISA.AND.c: org.kiama.example.RISC.RISCISA.RegNo
6400 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.toString(): String
3650 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productElement(x$1: Int): Any
169 ===> org.kiama.attribution.AttributionTests.Leaf.productElement(x$1: Int): Any
0 ===> scala.util.parsing.combinator.Parsers.Error.<init>(msg: String,next: Parsers.this.Input): Parsers.this.Error
3351 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productIterator: Iterator[Any]
2633 ===> org.kiama.example.iswim.compiler.Syntax.Match.productArity: Int
12301 ===> org.kiama.util.StdoutEmitter.emitter: org.kiama.util.Emitter
8349 ===> org.kiama.example.obr.RISCTree.AddW.productPrefix: String
9774 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productPrefix: String
2483 ===> org.kiama.example.iswim.compiler.Syntax.Apply.e: org.kiama.example.iswim.compiler.Syntax.Expr
8979 ===> org.kiama.example.obr.SPARCTree.CmpltW.productArity: Int
10601 ===> org.kiama.example.til.AST.Div.productPrefix: String
9643 ===> org.kiama.example.picojava.AbstractSyntax.Block.toString(): String
4927 ===> org.kiama.example.lambda2.PrettyPrinter.show(t: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.PrettyPrinter.Doc
0 ===> scala.Tuple4.toString(): String
4462 ===> org.kiama.example.lambda.AST.Sub.x: org.kiama.example.lambda.AST.Idn
5987 ===> org.kiama.example.oberon0.L0.source.OrExp.productArity: Int
0 ===> org.kiama.example.iswim.compiler.Parser.letrecstmt: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Stmt]
0 ===> org.kiama.example.dataflow.Parser.exp: Parser.this.Parser[String]
5494 ===> org.kiama.example.oberon0.L0.c.CGtExp.toString(): String
2396 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetStmt
9153 ===> org.kiama.example.obr.SPARCTree.Indexed.base: org.kiama.example.obr.SPARCTree.Local
10784 ===> org.kiama.example.transform.AST.Factor.exp: org.kiama.example.transform.AST.PrimExp
265 ===> org.kiama.attribution.AttributionTests.MapTree.m: Map[AttributionTests.this.Tree,AttributionTests.this.Tree]
8441 ===> org.kiama.example.obr.RISCTree.CmpltW.r: org.kiama.example.obr.RISCTree.Datum
9573 ===> org.kiama.example.oneohonecompanies.Cut.cut(c: org.kiama.example.oneohonecompanies.Company.Company): org.kiama.example.oneohonecompanies.Company.Company
6571 ===> org.kiama.example.oberon0.L3.c.CCall.toString(): String
8026 ===> org.kiama.example.obr.ObrTree.NegExp.productElement(x$1: Int): Any
5115 ===> org.kiama.example.lambda3.AST.SubstQuery.execute: SubstQuery.this.T
4738 ===> org.kiama.example.lambda2.AST.SubOp.productPrefix: String
10208 ===> org.kiama.example.prolog.SymbolTable.AtomType.toString(): String
12582 ===> org.kiama.util.Positioned.start_$eq(x$1: scala.util.parsing.input.Position): Unit
5957 ===> org.kiama.example.oberon0.L0.source.AddExp.toString(): String
236 ===> org.kiama.attribution.AttributionTests.SetTree.productArity: Int
0 ===> org.kiama.example.prolog.SyntaxAnalysis.term: SyntaxAnalysis.this.Parser[org.kiama.example.prolog.PrologTree.Term]
1851 ===> org.kiama.example.imperative.ASTNonCase.Neg.arity: Int
10830 ===> org.kiama.example.transform.AST.Num.productElement(x$1: Int): Any
12070 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
757 ===> org.kiama.example.RISC.RISCISA.MOD.toString(): String
0 ===> scala.Tuple2._1: T1
8193 ===> org.kiama.example.obr.RISCTree.RISCProg.productIterator: Iterator[Any]
3735 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.toString(): String
10548 ===> org.kiama.example.til.AST.Num.productElement(x$1: Int): Any
1367 ===> org.kiama.example.dataflow.DataflowAST.Assign.left: org.kiama.example.dataflow.DataflowAST.Var
8584 ===> org.kiama.example.obr.RISCTree.SubW.l: org.kiama.example.obr.RISCTree.Datum
1854 ===> org.kiama.example.imperative.ASTNonCase.Neg.toString(): String
4179 ===> org.kiama.example.iswim.secd.StringOps.StringValue.toString(): String
2548 ===> org.kiama.example.iswim.compiler.Syntax.Block.productIterator: Iterator[Any]
6700 ===> org.kiama.example.oberon0.L3.source.FPSection.productArity: Int
0 ===> org.kiama.example.transform.Parser.opdecl: Parser.this.PackratParser[(String, Int)]
0 ===> org.kiama.example.iswim.compiler.Parser.applic: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
12103 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1785 ===> org.kiama.example.imperative.AST.While.productIterator: Iterator[Any]
3084 ===> org.kiama.example.iswim.secd.IOOps.Write.productArity: Int
10915 ===> org.kiama.machine.Machine.reset: Unit
4949 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.oberon0.L2.Parser.forVar: Parser.this.Parser[org.kiama.example.oberon0.L0.source.IdnExp]
1638 ===> org.kiama.example.imperative.AST.Add.l: org.kiama.example.imperative.AST.Exp
3883 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.message: String
10486 ===> org.kiama.example.til.AST.Read.toString(): String
6874 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.size: org.kiama.example.oberon0.L0.source.Expression
9518 ===> org.kiama.example.oneohonecompanies.Company.Employee.s: org.kiama.example.oneohonecompanies.Company.Salary
0 ===> org.kiama.example.imperative.ASTNonCase.Add.r: org.kiama.example.imperative.ASTNonCase.Exp
7953 ===> org.kiama.example.obr.ObrTree.IntExp.productIterator: Iterator[Any]
5967 ===> org.kiama.example.oberon0.L0.source.SubExp.productPrefix: String
4879 ===> org.kiama.example.lambda2.ParLazy.letAppL(eval: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
2794 ===> org.kiama.example.iswim.secd.BooleanOps.Test.ce: org.kiama.example.iswim.secd.SECDBase.CodeSegment
0 ===> org.kiama.example.picojava.Parser.xtends: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.Use]
6949 ===> org.kiama.example.oberon0.L4.source.FieldExp.fieldname: org.kiama.example.oberon0.L4.source.FieldIdn
0 ===> scala.collection.mutable.Stack.apply(index: Int): A
4013 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productElement(x$1: Int): Any
2128 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.toString(): String
10829 ===> org.kiama.example.transform.AST.Num.productArity: Int
0 ===> org.kiama.example.oberon0.L3.Parser.fpsection: Parser.this.Parser[org.kiama.example.oberon0.L3.source.FPSection]
5711 ===> org.kiama.example.oberon0.L0.c.CIdnExp.toString(): String
7196 ===> org.kiama.example.oberon0.base.c.CArrayType.productPrefix: String
1840 ===> org.kiama.example.imperative.ASTNonCase.Num.deconstruct: List[Double]
0 ===> org.kiama.example.iswim.compiler.Parser.letstmt: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Stmt]
0 ===> org.kiama.example.oberon0.base.TransformingDriver.super$processargs(args: List[String]): Boolean
1317 ===> org.kiama.example.RISC.RISCISA.Target.productElement(x$1: Int): Any
1659 ===> org.kiama.example.imperative.AST.Sub.l: org.kiama.example.imperative.AST.Exp
0 ===> org.kiama.example.til.TIL1_1.integer: TIL1_1.this.Parser[org.kiama.example.til.AST.Num]
2469 ===> org.kiama.example.iswim.compiler.Syntax.Return.productPrefix: String
7247 ===> org.kiama.example.oberon0.base.c.CIntExp.productPrefix: String
8978 ===> org.kiama.example.obr.SPARCTree.CmpltW.productPrefix: String
5048 ===> org.kiama.example.lambda3.AST.EquivQuery.toString(): String
8210 ===> org.kiama.example.obr.RISCTree.Beq.productPrefix: String
9504 ===> org.kiama.example.oneohonecompanies.Company.Dept.productArity: Int
10253 ===> org.kiama.example.prolog.SymbolTable.UnknownType.toString(): String
4566 ===> org.kiama.example.lambda2.AST.App.e1: org.kiama.example.lambda2.AST.Exp
5394 ===> org.kiama.example.oberon0.L0.c.CAssignment.toString(): String
7718 ===> org.kiama.example.obr.ObrTree.ReturnStmt.toString(): String
5843 ===> org.kiama.example.oberon0.L0.source.NeExp.left: org.kiama.example.oberon0.L0.source.Expression
9776 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productElement(x$1: Int): Any
7299 ===> org.kiama.example.oberon0.base.source.Block.productIterator: Iterator[Any]
5182 ===> org.kiama.example.oberon0.L0.NameAnalyser.isLvalue(l: org.kiama.example.oberon0.L0.source.Expression): Boolean
12527 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n3: ParserUtilitiesTests.this.Node
8831 ===> org.kiama.example.obr.SPARCTree.Ret.toString(): String
1938 ===> org.kiama.example.iswim.compiler.Parser.Pos.toString(): String
0 ===> scala.collection.mutable.StringBuilder.charAt(index: Int): Char
782 ===> org.kiama.example.RISC.RISCISA.CMP.b: org.kiama.example.RISC.RISCISA.RegNo
0 ===> scala.Some.<init>(x: A): Some[A]
7846 ===> org.kiama.example.obr.ObrTree.BoolExp.toString(): String
6469 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productArity: Int
4050 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.toString(): String
10231 ===> org.kiama.example.prolog.SymbolTable.ListType.productArity: Int
6845 ===> org.kiama.example.oberon0.L4.c.CIndexExp.toString(): String
9640 ===> org.kiama.example.picojava.AbstractSyntax.Block.toString(): String
1030 ===> org.kiama.example.RISC.RISCISA.STW.im: org.kiama.example.RISC.RISCISA.Imm
10460 ===> org.kiama.example.til.AST.For.productPrefix: String
4528 ===> org.kiama.example.lambda2.AST.Var.i: org.kiama.example.lambda2.AST.Idn
882 ===> org.kiama.example.RISC.RISCISA.OR.b: org.kiama.example.RISC.RISCISA.RegNo
7155 ===> org.kiama.example.oberon0.base.c.CBlock.toString(): String
7003 ===> org.kiama.example.oberon0.base.Driver.challengeFlag_$eq(x$1: Boolean): Unit
6785 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.<init>(ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.Field
0 ===> org.kiama.example.json.SyntaxAnalysis.jvalue: SyntaxAnalysis.this.PackratParser[org.kiama.example.json.JSONTree.JValue]
2867 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productIterator: Iterator[Any]
0 ===> org.kiama.example.iswim.compiler.Parser.letexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
7437 ===> org.kiama.example.obr.ObrTree.ObrInt.productPrefix: String
8679 ===> org.kiama.example.obr.RISCTree.reset(): Unit
1392 ===> org.kiama.example.dataflow.DataflowAST.While.productPrefix: String
3698 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productIterator: Iterator[Any]
3493 ===> org.kiama.example.iswim.secd.SECDBase.App.productIterator: Iterator[Any]
6912 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.fields: List[org.kiama.example.oberon0.L4.source.FieldList]
11213 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productArity: Int
5239 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.<init>(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDef): SymbolTable.this.Variable
399 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productIterator: Iterator[Any]
12225 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3125 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.toString(): String
11425 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
12434 ===> org.kiama.util.ParserUtilities.keywords(ext: scala.util.matching.Regex,kws: List[String]): ParserUtilities.this.Parser[String]
6637 ===> org.kiama.example.oberon0.L3.source.ProcDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
436 ===> org.kiama.attribution.DynamicAttributionTests.Unused.toString(): String
11257 ===> org.kiama.rewriting.NominalAST.Name.<init>(base: String,opti: Option[Int]): org.kiama.rewriting.NominalAST.Name
1170 ===> org.kiama.example.RISC.RISCISA.BEQ.productElement(x$1: Int): Any
3671 ===> org.kiama.example.iswim.secd.SECDBase.PushType.toString(): String
4944 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3765 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.toString(): String
4021 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.bdy: org.kiama.example.iswim.secd.SECDBase.Code
9296 ===> org.kiama.example.obr.SymbolTable.IntType.toString(): String
7214 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productElement(x$1: Int): Any
11424 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
10271 ===> org.kiama.example.prolog.Subst.$anon.m: scala.collection.immutable.Map[String,org.kiama.example.prolog.PrologTree.Term]
3783 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.toString(): String
3491 ===> org.kiama.example.iswim.secd.SECDBase.App.productArity: Int
5768 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productElement(x$1: Int): Any
966 ===> org.kiama.example.RISC.RISCISA.LDW.b: org.kiama.example.RISC.RISCISA.RegNo
8009 ===> org.kiama.example.obr.ObrTree.ModExp.productElement(x$1: Int): Any
2735 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.<init>(nms: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Primitives
12142 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> scala.Function1.toString(): String
7215 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productIterator: Iterator[Any]
614 ===> org.kiama.example.RISC.RISCISA.SUB.a: org.kiama.example.RISC.RISCISA.RegNo
5551 ===> org.kiama.example.oberon0.L0.c.CSubExp.productIterator: Iterator[Any]
4426 ===> org.kiama.example.lambda.AST.Lam.toString(): String
10671 ===> org.kiama.example.til.AST.Ne.l: org.kiama.example.til.AST.Exp
4061 ===> org.kiama.example.iswim.secd.SECDBase.$anon.<init>(): SECDBase.this.State[org.kiama.example.iswim.secd.SECDBase.Code]{def toDoc: SECDBase.this.Doc}
1834 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2913 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productPrefix: String
0 ===> org.kiama.example.oberon0.base.Parser.idndef: Parser.this.Parser[org.kiama.example.oberon0.base.source.IdnDef]
4804 ===> org.kiama.example.lambda2.Evaluators.evaluator: org.kiama.example.lambda2.Reduce
0 ===> org.kiama.example.lambda2.Par.letLet: org.kiama.rewriting.Rewriter.Strategy
64 ===> org.kiama.attribution.AttributionBase.initTree[T <: org.kiama.attribution.Attributable](t: T): Unit
12297 ===> org.kiama.util.Emitter.emit(any: Any): Unit
5766 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productPrefix: String
12543 ===> org.kiama.util.ParserUtilitiesTests.Tup5.toString(): String
477 ===> org.kiama.example.RISC.RISC.init: Unit
2363 ===> org.kiama.example.iswim.compiler.Syntax.Let.productPrefix: String
270 ===> org.kiama.attribution.AttributionTests.MapTree.productArity: Int
8491 ===> org.kiama.example.obr.RISCTree.IntDatum.toString(): String
9940 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.<init>(left: org.kiama.example.prolog.PrologTree.Term,right: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.UnifyGoal
9408 ===> org.kiama.example.obr.SymbolTable.EnumTypes.toString(): String
2442 ===> org.kiama.example.iswim.compiler.Syntax.Import.toString(): String
9117 ===> org.kiama.example.obr.SPARCTree.SubW.r: org.kiama.example.obr.SPARCTree.Datum
9270 ===> org.kiama.example.obr.SymbolTable.Unknown.toString(): String
3528 ===> org.kiama.example.iswim.secd.SECDBase.Enter.toString(): String
9418 ===> org.kiama.example.obr.SymbolTable.ExnType.productElement(x$1: Int): Any
9759 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productElement(x$1: Int): Any
0 ===> scala.Product4.productArity: Int
620 ===> org.kiama.example.RISC.RISCISA.SUB.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.SUB
11170 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productElement(x$1: Int): Any
12585 ===> org.kiama.util.Positioned.finish_$eq(x$1: scala.util.parsing.input.Position): Unit
3175 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productIterator: Iterator[Any]
0 ===> org.kiama.example.transform.Parser.integer: Parser.this.Parser[Int]
2059 ===> org.kiama.example.iswim.compiler.Syntax.Minus.l: org.kiama.example.iswim.compiler.Syntax.Expr
11055 ===> org.kiama.output.PrettyPrinterBase.hsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
0 ===> org.kiama.example.oberon0.L3.NameAnalyser.super$envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
1875 ===> org.kiama.example.imperative.Imperative.process(s: org.kiama.example.imperative.AST.Stmt): Unit
3916 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productArity: Int
1503 ===> org.kiama.example.dataflow.For.c: org.kiama.example.dataflow.DataflowAST.Stm
3825 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productPrefix: String
11745 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4193 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.hashCode(): Int
1572 ===> org.kiama.example.imperative.AST.Num.d: Double
11730 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1471 ===> org.kiama.example.dataflow.DataflowAST.Empty.toString(): String
7232 ===> org.kiama.example.oberon0.base.c.CReturn.productIterator: Iterator[Any]
3915 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productPrefix: String
6255 ===> org.kiama.example.oberon0.L1.source.WhileStatement.cond: org.kiama.example.oberon0.L0.source.Expression
7282 ===> org.kiama.example.oberon0.base.source.ModuleDecl.toString(): String
11458 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.a: org.kiama.rewriting.SupportPositionedRewriterTests.Node
4271 ===> org.kiama.example.json.JSONTree.JArray.productArity: Int
2055 ===> org.kiama.example.iswim.compiler.Syntax.Plus.toString(): String
1968 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.toString(): String
0 ===> org.kiama.example.oberon0.base.Driver.super$process(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
9226 ===> org.kiama.example.obr.SymbolTable.Variable.productArity: Int
8330 ===> org.kiama.example.obr.RISCTree.Read.productPrefix: String
9542 ===> org.kiama.example.oneohonecompanies.Company.PU.productPrefix: String
12416 ===> org.kiama.util.ParserUtilities.any: ParserUtilities.this.PackratParser[Char]
1865 ===> org.kiama.example.imperative.ASTNonCase.Sub.toString(): String
2716 ===> org.kiama.example.iswim.compiler.Syntax.Assign.e: org.kiama.example.iswim.compiler.Syntax.Expr
0 ===> org.kiama.example.obr.SyntaxAnalysis.lvalue: SyntaxAnalysis.this.PackratParser[org.kiama.example.obr.ObrTree.AssignNode]
2626 ===> org.kiama.example.iswim.compiler.Syntax.Match.ctrl: org.kiama.example.iswim.compiler.Syntax.Expr
6162 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
22 ===> org.kiama.attribution.Attributable.$minus$greater[T, U](a: T => U)(implicit b: Attributable.this.type => T): U
10134 ===> org.kiama.example.prolog.PrologTree.Cut.productIterator: Iterator[Any]
3205 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productIterator: Iterator[Any]
4740 ===> org.kiama.example.lambda2.AST.SubOp.productElement(x$1: Int): Any
3101 ===> org.kiama.example.iswim.secd.IOOps.Read.productIterator: Iterator[Any]
384 ===> org.kiama.attribution.Decorators.indflt(t: T): U
9298 ===> org.kiama.example.obr.SymbolTable.IntType.productPrefix: String
11139 ===> org.kiama.output.PrettyPrinterTests.Val.productIterator: Iterator[Any]
6560 ===> org.kiama.example.oberon0.L3.c.CCall.ps: List[org.kiama.example.oberon0.base.c.CExpression]
2628 ===> org.kiama.example.iswim.compiler.Syntax.Match.<init>(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,clauses: List[org.kiama.example.iswim.compiler.Syntax.MatchClause]): org.kiama.example.iswim.compiler.Syntax.Match
0 ===> scala.Product3.productArity: Int
10387 ===> org.kiama.example.til.AST.Assign.toString(): String
12366 ===> org.kiama.util.IO.FileNotFoundException.<init>(message: String): org.kiama.util.IO.FileNotFoundException
4705 ===> org.kiama.example.lambda2.AST.NoType.productArity: Int
0 ===> scala.util.parsing.combinator.Parsers.rep[T](p: => Parsers.this.Parser[T]): Parsers.this.Parser[List[T]]
5869 ===> org.kiama.example.oberon0.L0.source.LtExp.productArity: Int
4432 ===> org.kiama.example.lambda.AST.Lam.productElement(x$1: Int): Any
0 ===> org.kiama.example.iswim.secd.BooleanOps.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
7069 ===> org.kiama.example.oberon0.base.c.CProgram.productPrefix: String
359 ===> org.kiama.attribution.Decorators.Chain.in: T => U
3975 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.e: SECDBase.this.Environment
11215 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productIterator: Iterator[Any]
8299 ===> org.kiama.example.obr.RISCTree.StW.productElement(x$1: Int): Any
12051 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.imperative.Parser.asgnStmt: Parser.this.Parser[org.kiama.example.imperative.AST.Asgn]
8216 ===> org.kiama.example.obr.RISCTree.Beq.toString(): String
11705 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.iswim.compiler.Parser.primstmt: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Stmt]
9067 ===> org.kiama.example.obr.SPARCTree.NegW.productPrefix: String
1895 ===> org.kiama.example.imperative.Generator.genExp(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Exp]
5648 ===> org.kiama.example.oberon0.L0.c.CAndExp.productPrefix: String
11585 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
5650 ===> org.kiama.example.oberon0.L0.c.CAndExp.productElement(x$1: Int): Any
11760 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4080 ===> org.kiama.example.iswim.secd.StackOps.Pop.productIterator: Iterator[Any]
11225 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.i: Int
968 ===> org.kiama.example.RISC.RISCISA.LDW.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.LDW
4820 ===> org.kiama.example.lambda2.Lambda.process(e: org.kiama.example.lambda2.AST.Exp): Unit
0 ===> org.kiama.example.oberon0.L3.Parser.super$declarationsDef: Parser.this.PackratParser[List[org.kiama.example.oberon0.base.source.Declaration]]
0 ===> org.kiama.example.oberon0.L2.Desugarer.super$transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
3046 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productElement(x$1: Int): Any
11434 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
10361 ===> org.kiama.example.til.AST.Decl.productElement(x$1: Int): Any
2789 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.toString(): String
729 ===> org.kiama.example.RISC.RISCISA.DIVI.productArity: Int
0 ===> org.kiama.example.iswim.compiler.Parser.intRegex: scala.util.matching.Regex
7511 ===> org.kiama.example.obr.ObrTree.ArrayVar.productIterator: Iterator[Any]
2266 ===> org.kiama.example.iswim.compiler.Syntax.Not.e: org.kiama.example.iswim.compiler.Syntax.Expr
6028 ===> org.kiama.example.oberon0.L0.source.DivExp.productPrefix: String
3000 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productArity: Int
7277 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productArity: Int
2446 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.par: org.kiama.example.iswim.compiler.Syntax.Variable
2041 ===> org.kiama.example.iswim.compiler.Syntax.Plus.r: org.kiama.example.iswim.compiler.Syntax.Expr
0 ===> scala.util.parsing.combinator.Parsers.Success.productArity: Int
4011 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productPrefix: String
582 ===> org.kiama.example.RISC.RISCISA.ADD.productArity: Int
0 ===> org.kiama.example.oberon0.L1.Parser.optelse: Parser.this.Parser[Option[org.kiama.example.oberon0.base.source.Block]]
987 ===> org.kiama.example.RISC.RISCISA.LDB.b: org.kiama.example.RISC.RISCISA.RegNo
9143 ===> org.kiama.example.obr.SPARCTree.Local.productIterator: Iterator[Any]
11796 ===> org.kiama.rewriting.RewriterTests.Equal.productArity: Int
159 ===> org.kiama.attribution.AttributionTests.Pair.toString(): String
0 ===> scala.collection.MapLike.toString(): String
4457 ===> org.kiama.example.lambda.AST.App.toString(): String
6809 ===> org.kiama.example.oberon0.L4.TypeAnalyser.rootconstexpDef: org.kiama.example.oberon0.L0.source.Expression => Boolean
6270 ===> org.kiama.example.oberon0.L1.source.WhileStatement.toString(): String
5290 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.ident: String
8371 ===> org.kiama.example.obr.RISCTree.Cond.productArity: Int
3901 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productArity: Int
8033 ===> org.kiama.example.obr.ObrTree.NegExp.toString(): String
6604 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productIterator: Iterator[Any]
5761 ===> org.kiama.example.oberon0.L0.source.TypeDecl.tipe: org.kiama.example.oberon0.L0.source.TypeDef
10577 ===> org.kiama.example.til.AST.Mul.r: org.kiama.example.til.AST.Exp
8323 ===> org.kiama.example.obr.RISCTree.Write.toString(): String
8352 ===> org.kiama.example.obr.RISCTree.AddW.productIterator: Iterator[Any]
4073 ===> org.kiama.example.iswim.secd.StackOps.Pop.n: Int
6925 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.toString(): String
2302 ===> org.kiama.example.iswim.compiler.Syntax.Or.l: org.kiama.example.iswim.compiler.Syntax.Expr
5087 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.toString(): String
5657 ===> org.kiama.example.oberon0.L0.c.CAndExp.toString(): String
6938 ===> org.kiama.example.oberon0.L4.source.FieldList.productIterator: Iterator[Any]
7600 ===> org.kiama.example.obr.ObrTree.ExnConst.productArity: Int
3475 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productPrefix: String
0 ===> scala.util.parsing.combinator.Parsers.Failure.productArity: Int
6067 ===> org.kiama.example.oberon0.L0.source.AndExp.productArity: Int
749 ===> org.kiama.example.RISC.RISCISA.MOD.productPrefix: String
4747 ===> org.kiama.example.lambda2.AST.SubOp.toString(): String
3428 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.code: org.kiama.example.iswim.secd.SECDBase.Code
11542 ===> org.kiama.rewriting.Rewriter.rule(f: org.kiama.==>[Rewriter.this.Term,Rewriter.this.Term]): Rewriter.this.Strategy
8414 ===> org.kiama.example.obr.RISCTree.CmpneW.toString(): String
5366 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productPrefix: String
6068 ===> org.kiama.example.oberon0.L0.source.AndExp.productElement(x$1: Int): Any
4934 ===> org.kiama.example.lambda2.Reduce.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10903 ===> org.kiama.machine.Machine.ScalarUpdate.toString(): String
4100 ===> org.kiama.example.iswim.secd.StackOps.Dup.toString(): String
9073 ===> org.kiama.example.obr.SPARCTree.NegW.toString(): String
11927 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10765 ===> org.kiama.example.transform.AST.BinExpR.right: org.kiama.example.transform.AST.ExpR
2670 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productElement(x$1: Int): Any
7509 ===> org.kiama.example.obr.ObrTree.ArrayVar.productArity: Int
10305 ===> org.kiama.example.repmin.Leaf.toString(): String
6603 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productElement(x$1: Int): Any
0 ===> org.kiama.example.lambda2.ReduceSubst.subsApp: org.kiama.rewriting.Rewriter.Strategy
12394 ===> org.kiama.util.Messaging.Record.productPrefix: String
8524 ===> org.kiama.example.obr.RISCTree.MulW.toString(): String
9735 ===> org.kiama.example.picojava.AbstractSyntax.Use.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.Use
2727 ===> org.kiama.example.iswim.compiler.Syntax.Assign.toString(): String
10932 ===> org.kiama.machine.MachineTests.MM.p: org.kiama.machine.MachineTests.MM.ParamState[String,Int]
11136 ===> org.kiama.output.PrettyPrinterTests.Val.productPrefix: String
10131 ===> org.kiama.example.prolog.PrologTree.Cut.productPrefix: String
6712 ===> org.kiama.example.oberon0.L3.source.Call.idnuse: org.kiama.example.oberon0.base.source.IdnUse
7440 ===> org.kiama.example.obr.ObrTree.ObrInt.productIterator: Iterator[Any]
12313 ===> org.kiama.util.Environments.resetEnvironments: Unit
1465 ===> org.kiama.example.dataflow.DataflowAST.Empty.productIterator: Iterator[Any]
4533 ===> org.kiama.example.lambda2.AST.Var.productArity: Int
0 ===> org.kiama.example.oberon0.base.TranslatingDriver.super$resetflags(): Unit
8107 ===> org.kiama.example.obr.ObrTree.PlusExp.toString(): String
2835 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.hashCode(): Int
3053 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.toString(): String
2321 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.s: String
4430 ===> org.kiama.example.lambda.AST.Lam.productPrefix: String
11299 ===> org.kiama.rewriting.NominalAST.GenName.apply(oldname: org.kiama.rewriting.NominalAST.Name): org.kiama.rewriting.NominalAST.Name
5203 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.<init>(ident: String,decl: org.kiama.example.oberon0.base.source.ModuleDecl): SymbolTable.this.Module
9699 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productArity: Int
0 ===> org.kiama.example.til.TIL1_1.write_statement: TIL1_1.this.Parser[org.kiama.example.til.AST.Write]
3069 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productIterator: Iterator[Any]
11056 ===> org.kiama.output.PrettyPrinterBase.vsep(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
7458 ===> org.kiama.example.obr.ObrTree.IntVar.productIterator: Iterator[Any]
4086 ===> org.kiama.example.iswim.secd.StackOps.Pop.toString(): String
9911 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productIterator: Iterator[Any]
11124 ===> org.kiama.output.PrettyPrinter.nest(d: PrettyPrinter.this.Doc,j: PrettyPrinter.this.Indent): PrettyPrinter.this.Doc
0 ===> org.kiama.example.oberon0.L4.Parser.super$lhsDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
10946 ===> org.kiama.output.RightAssoc.productArity: Int
6762 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.toString(): String
3674 ===> org.kiama.example.iswim.secd.SECDBase.PushType.toString(): String
2309 ===> org.kiama.example.iswim.compiler.Syntax.Or.productArity: Int
4321 ===> org.kiama.example.json.JSONTree.JTrue.productElement(x$1: Int): Any
8802 ===> org.kiama.example.obr.SPARCTree.LabelDef.toString(): String
0 ===> org.kiama.example.dataflow.Parser.asgnStm: Parser.this.Parser[org.kiama.example.dataflow.DataflowAST.Assign]
1558 ===> org.kiama.example.dataflow.Optimise.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10099 ===> org.kiama.example.prolog.PrologTree.Atom.productElement(x$1: Int): Any
9634 ===> org.kiama.example.picojava.AbstractSyntax.Block.productPrefix: String
1093 ===> org.kiama.example.RISC.RISCISA.RD.toString(): String
12145 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12504 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n3: ParserUtilitiesTests.this.Node
2578 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productArity: Int
0 ===> org.kiama.example.json.SyntaxAnalysis.jarray: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JArray]
5548 ===> org.kiama.example.oberon0.L0.c.CSubExp.productPrefix: String
6607 ===> org.kiama.example.oberon0.L3.c.CAddrExp.toString(): String
5510 ===> org.kiama.example.oberon0.L0.c.CGeExp.productElement(x$1: Int): Any
7006 ===> org.kiama.example.oberon0.base.Driver.helpFlagDefault: Boolean
574 ===> org.kiama.example.RISC.RISCISA.ADD.c: org.kiama.example.RISC.RISCISA.RegNo
7078 ===> org.kiama.example.oberon0.base.c.CProgram.toString(): String
4296 ===> org.kiama.example.json.JSONTree.JString.toString(): String
9672 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.Type: org.kiama.example.picojava.AbstractSyntax.Access
7650 ===> org.kiama.example.obr.ObrTree.ForStmt.body: List[org.kiama.example.obr.ObrTree.Statement]
10392 ===> org.kiama.example.til.AST.IfThen.t: Seq[org.kiama.example.til.AST.Stat]
10328 ===> org.kiama.example.til.Main.main(args: Array[String]): Unit
2311 ===> org.kiama.example.iswim.compiler.Syntax.Or.productIterator: Iterator[Any]
6620 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productPrefix: String
7978 ===> org.kiama.example.obr.ObrTree.LessExp.toString(): String
1602 ===> org.kiama.example.imperative.AST.Var.productIterator: Iterator[Any]
6638 ===> org.kiama.example.oberon0.L3.source.ProcDecl.params: List[org.kiama.example.oberon0.L3.source.FPSection]
6591 ===> org.kiama.example.oberon0.L3.c.CStrExp.toString(): String
0 ===> org.kiama.example.picojava.Parser.block_stmt: Parser.this.Parser[org.kiama.example.picojava.AbstractSyntax.BlockStmt]
4077 ===> org.kiama.example.iswim.secd.StackOps.Pop.productPrefix: String
6090 ===> org.kiama.example.oberon0.L0.source.NegExp.productElement(x$1: Int): Any
9014 ===> org.kiama.example.obr.SPARCTree.IntDatum.productPrefix: String
8816 ===> org.kiama.example.obr.SPARCTree.Read.toString(): String
0 ===> org.kiama.example.lambda2.Parser.exp2: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Exp]
3945 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productPrefix: String
1166 ===> org.kiama.example.RISC.RISCISA.BEQ.toString(): String
4980 ===> org.kiama.example.lambda3.AST.Var.x: org.kiama.rewriting.NominalAST.Name
405 ===> org.kiama.attribution.DynamicAttributionTests.Pair.toString(): String
6747 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.size: Int
1240 ===> org.kiama.example.RISC.RISCISA.BLE.toString(): String
11334 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
7070 ===> org.kiama.example.oberon0.base.c.CProgram.productArity: Int
0 ===> org.kiama.example.imperative.Parser.exp: Parser.this.PackratParser[org.kiama.example.imperative.AST.Exp]
10970 ===> org.kiama.output.Prefix.toString(): String
7935 ===> org.kiama.example.obr.ObrTree.IndexExp.productElement(x$1: Int): Any
3470 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.fss: List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec]
4293 ===> org.kiama.example.json.JSONTree.JString.toString(): String
0 ===> org.kiama.example.lambda2.ReduceSubst.beta: org.kiama.rewriting.Rewriter.Strategy
0 ===> org.kiama.example.oberon0.L0.Desugarer.super$transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
2425 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.toString(): String
7914 ===> org.kiama.example.obr.ObrTree.IdnExp.productPrefix: String
0 ===> org.kiama.example.oberon0.L2.Parser.condition: Parser.this.Parser[org.kiama.example.oberon0.L2.source.Condition with Serializable]
2512 ===> org.kiama.example.iswim.compiler.Syntax.If.productIterator: Iterator[Any]
1386 ===> org.kiama.example.dataflow.DataflowAST.While.cond: org.kiama.example.dataflow.DataflowAST.Var
5275 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.<init>(ident: String): SymbolTable.this.BuiltinType
4035 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.toString(): String
2201 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productIterator: Iterator[Any]
6687 ===> org.kiama.example.oberon0.L3.source.ValMode.toString(): String
9700 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productElement(x$1: Int): Any
2594 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productPrefix: String
11661 ===> org.kiama.rewriting.Rewriter.x: Rewriter.this.Strategy
4322 ===> org.kiama.example.json.JSONTree.JTrue.productIterator: Iterator[Any]
10466 ===> org.kiama.example.til.AST.For.toString(): String
10546 ===> org.kiama.example.til.AST.Num.productPrefix: String
10936 ===> org.kiama.output.LeftAssoc.productPrefix: String
278 ===> org.kiama.attribution.AttributionTests.MapTree.toString(): String
10933 ===> org.kiama.machine.MachineTests.MM.main: Unit
5528 ===> org.kiama.example.oberon0.L0.c.CAddExp.productPrefix: String
11993 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.oberon0.L0.TypeAnalyser.super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
6142 ===> org.kiama.example.oberon0.L0.source.IdnExp.productArity: Int
2308 ===> org.kiama.example.iswim.compiler.Syntax.Or.productPrefix: String
11264 ===> org.kiama.rewriting.NominalAST.Name.productElement(x$1: Int): Any
7899 ===> org.kiama.example.obr.ObrTree.GreaterExp.productElement(x$1: Int): Any
3592 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.toString(): String
4287 ===> org.kiama.example.json.JSONTree.JString.productPrefix: String
903 ===> org.kiama.example.RISC.RISCISA.ORI.b: org.kiama.example.RISC.RISCISA.RegNo
3478 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productIterator: Iterator[Any]
9162 ===> org.kiama.example.obr.SPARCTree.Indexed.productIterator: Iterator[Any]
4113 ===> org.kiama.example.iswim.secd.StackOps.Swap.productPrefix: String
0 ===> org.kiama.example.lambda2.Par.subsVar: org.kiama.rewriting.Rewriter.Strategy
2821 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.toString(): String
1844 ===> org.kiama.example.imperative.ASTNonCase.Var.<init>(s: org.kiama.example.imperative.ASTNonCase.Idn): org.kiama.example.imperative.ASTNonCase.Var
5569 ===> org.kiama.example.oberon0.L0.c.COrExp.productArity: Int
0 ===> org.kiama.example.imperative.Parser.keyword: Parser.this.Parser[String]
2137 ===> org.kiama.example.iswim.compiler.Syntax.Equal.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Equal
9262 ===> org.kiama.example.obr.SymbolTable.Unknown.productArity: Int
11915 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5741 ===> org.kiama.example.oberon0.L0.source.VarDecl.idndefs: List[org.kiama.example.oberon0.base.source.IdnDef]
1960 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productArity: Int
3506 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productArity: Int
5421 ===> org.kiama.example.oberon0.L0.c.CNeExp.left: org.kiama.example.oberon0.base.c.CExpression
8585 ===> org.kiama.example.obr.RISCTree.SubW.r: org.kiama.example.obr.RISCTree.Datum
7451 ===> org.kiama.example.obr.ObrTree.IntVar.idn: org.kiama.example.obr.ObrTree.Identifier
4060 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toString(): String
8903 ===> org.kiama.example.obr.SPARCTree.Cond.productArity: Int
9524 ===> org.kiama.example.oneohonecompanies.Company.Employee.productPrefix: String
2175 ===> org.kiama.example.iswim.compiler.Syntax.Less.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Less
5190 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
7083 ===> org.kiama.example.oberon0.base.c.CInclude.<init>(s: String): org.kiama.example.oberon0.base.c.CInclude
623 ===> org.kiama.example.RISC.RISCISA.SUB.productPrefix: String
1972 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.e: org.kiama.example.iswim.compiler.Syntax.Expr
9637 ===> org.kiama.example.picojava.AbstractSyntax.Block.productIterator: Iterator[Any]
9419 ===> org.kiama.example.obr.SymbolTable.ExnType.productIterator: Iterator[Any]
8364 ===> org.kiama.example.obr.RISCTree.Cond.f: org.kiama.example.obr.RISCTree.Datum
846 ===> org.kiama.example.RISC.RISCISA.AND.toString(): String
827 ===> org.kiama.example.RISC.RISCISA.CHKI.productPrefix: String
2953 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productElement(x$1: Int): Any
4962 ===> org.kiama.example.lambda3.AST.Exp.<init>(): org.kiama.example.lambda3.AST.Exp
2747 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.toString(): String
2703 ===> org.kiama.example.iswim.compiler.Syntax.Val.productArity: Int
1668 ===> org.kiama.example.imperative.AST.Sub.productElement(x$1: Int): Any
10985 ===> org.kiama.output.Infix.productPrefix: String
7923 ===> org.kiama.example.obr.ObrTree.IdnExp.toString(): String
531 ===> org.kiama.example.RISC.RISCISA.MVN.b: org.kiama.example.RISC.RISCISA.RegNo
6462 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.varr: SymbolTable.this.Variable
1623 ===> org.kiama.example.imperative.AST.Neg.productIterator: Iterator[Any]
0 ===> org.kiama.example.iswim.secd.ExceptionHandler.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
5411 ===> org.kiama.example.oberon0.L0.c.CEqExp.productIterator: Iterator[Any]
9770 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.Value: String
287 ===> org.kiama.attribution.AttributionTests.PairTree.productArity: Int
2250 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.<init>(b: Boolean): org.kiama.example.iswim.compiler.Syntax.BoolVal
6767 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.<init>(fields: List[SymbolTable.this.Field]): SymbolTable.this.RecordType
1932 ===> org.kiama.example.iswim.compiler.Parser.Pos.productIterator: Iterator[Any]
4107 ===> org.kiama.example.iswim.secd.StackOps.Swap.n: Int
6413 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translate(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.c.CProgram
3431 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.toString(): String
9353 ===> org.kiama.example.obr.SymbolTable.RecordType.productIterator: Iterator[Any]
7312 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productArity: Int
2711 ===> org.kiama.example.iswim.compiler.Syntax.Val.toString(): String
5281 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productIterator: Iterator[Any]
358 ===> org.kiama.attribution.Decorators.down[T <: org.kiama.attribution.Attributable, U](a: org.kiama.==>[T,U]): org.kiama.attribution.Attribution.CachedAttribute[T,U]
7276 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productPrefix: String
1450 ===> org.kiama.example.dataflow.DataflowAST.Return.productIterator: Iterator[Any]
7087 ===> org.kiama.example.oberon0.base.c.CInclude.productArity: Int
5098 ===> org.kiama.example.lambda3.AST.FreshQuery.productPrefix: String
0 ===> org.kiama.example.dataflow.Parser.ifStm: Parser.this.Parser[org.kiama.example.dataflow.DataflowAST.If]
2560 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productPrefix: String
4433 ===> org.kiama.example.lambda.AST.Lam.productIterator: Iterator[Any]
9720 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productIterator: Iterator[Any]
12258 ===> org.kiama.util.CompilerBase.main(args: Array[String]): Unit
0 ===> org.kiama.example.oberon0.L0.Parser.constdeclsection: Parser.this.Parser[List[org.kiama.example.oberon0.L0.source.ConstDecl]]
7780 ===> org.kiama.example.obr.ObrTree.TryBody.stmts: List[org.kiama.example.obr.ObrTree.Statement]
6432 ===> org.kiama.example.oberon0.L3.NameAnalyser.envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
0 ===> org.kiama.util.ParserUtilities.super$failure(msg: String): ParserUtilities.this.Parser[Nothing]
4469 ===> org.kiama.example.lambda.AST.Sub.productPrefix: String
10861 ===> org.kiama.example.transform.Driver.process(program: org.kiama.example.transform.AST.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
9904 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.ps: Set[(String, org.kiama.example.prolog.PrologTree.Term)]
4771 ===> org.kiama.example.lambda2.AST.Letp(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
11662 ===> org.kiama.rewriting.Rewriter.alltd(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
3121 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productElement(x$1: Int): Any
0 ===> org.kiama.example.lambda2.ParLazyShare.e: org.kiama.rewriting.Rewriter.Strategy
0 ===> scala.collection.mutable.ListBuffer.apply(n: Int): A
10119 ===> org.kiama.example.prolog.PrologTree.Pred.productIterator: Iterator[Any]
2734 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.nms: List[org.kiama.example.iswim.compiler.Syntax.Variable]
2219 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productElement(x$1: Int): Any
0 ===> org.kiama.example.obr.SyntaxAnalysis.parser: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.ObrInt]
11581 ===> org.kiama.rewriting.Rewriter.$anon.childProduct(p: Product): Option[Rewriter.this.Term]
3466 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.toString(): String
4884 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7092 ===> org.kiama.example.oberon0.base.c.CInclude.toString(): String
5291 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.tipe: SymbolTable.this.Type
10905 ===> org.kiama.machine.Machine.ParamUpdate.perform: Unit
10473 ===> org.kiama.example.til.AST.Read.i: org.kiama.example.til.AST.Id
893 ===> org.kiama.example.RISC.RISCISA.OR.productIterator: Iterator[Any]
930 ===> org.kiama.example.RISC.RISCISA.XOR.toString(): String
8093 ===> org.kiama.example.obr.ObrTree.PlusExp.right: org.kiama.example.obr.ObrTree.Expression
8155 ===> org.kiama.example.obr.RISCEncoder.getassem: org.kiama.example.RISC.RISCISA.AssemCode
8010 ===> org.kiama.example.obr.ObrTree.ModExp.productIterator: Iterator[Any]
6559 ===> org.kiama.example.oberon0.L3.c.CCall.s: String
9016 ===> org.kiama.example.obr.SPARCTree.IntDatum.productElement(x$1: Int): Any
10535 ===> org.kiama.example.til.AST.Var.toString(): String
10515 ===> org.kiama.example.til.AST.Id.productElement(x$1: Int): Any
4058 ===> org.kiama.example.iswim.secd.SECDBase.$anon.<init>(): SECDBase.this.State[SECDBase.this.Environment]{def toDoc: SECDBase.this.Doc}
6974 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productIterator: Iterator[Any]
10478 ===> org.kiama.example.til.AST.Read.productArity: Int
6192 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.estmt: org.kiama.example.oberon0.base.c.CStatement
11525 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.<init>(): Rewriter.this.Strategy
6779 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.toString(): String
3823 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.message: String
8762 ===> org.kiama.example.obr.SPARCTree.Bne.productIterator: Iterator[Any]
803 ===> org.kiama.example.RISC.RISCISA.CMPI.<init>(b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.CMPI
0 ===> org.kiama.example.oberon0.base.Parser.moduledecl: Parser.this.Parser[org.kiama.example.oberon0.base.source.ModuleDecl]
2217 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productPrefix: String
10261 ===> org.kiama.example.prolog.Subst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3887 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productElement(x$1: Int): Any
9726 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.toString(): String
9146 ===> org.kiama.example.obr.SPARCTree.Local.toString(): String
3957 ===> org.kiama.example.iswim.secd.SECDBase.<init>(): org.kiama.example.iswim.secd.SECDBase
12157 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3085 ===> org.kiama.example.iswim.secd.IOOps.Write.productElement(x$1: Int): Any
9526 ===> org.kiama.example.oneohonecompanies.Company.Employee.productElement(x$1: Int): Any
6930 ===> org.kiama.example.oberon0.L4.source.FieldList.tipe: org.kiama.example.oberon0.L0.source.TypeDef
3586 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productPrefix: String
0 ===> org.kiama.example.lambda.Parser.exp: Parser.this.PackratParser[org.kiama.example.lambda.AST.Exp]
7884 ===> org.kiama.example.obr.ObrTree.FieldExp.toString(): String
2340 ===> org.kiama.example.iswim.compiler.Syntax.Binding.<init>(v: org.kiama.example.iswim.compiler.Syntax.Variable,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Binding
0 ===> org.kiama.util.WhitespaceParser.super$literal(s: String): WhitespaceParser.this.Parser[String]
7748 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productPrefix: String
1902 ===> org.kiama.example.imperative.Generator.genWhile(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.While]
4534 ===> org.kiama.example.lambda2.AST.Var.productElement(x$1: Int): Any
4313 ===> org.kiama.example.json.JSONTree.JNumber.toString(): String
0 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
4770 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7751 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productIterator: Iterator[Any]
1563 ===> org.kiama.example.dataflow.Optimise.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7622 ===> org.kiama.example.obr.ObrTree.AssignStmt.productIterator: Iterator[Any]
8027 ===> org.kiama.example.obr.ObrTree.NegExp.productIterator: Iterator[Any]
11930 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2554 ===> org.kiama.example.iswim.compiler.Syntax.Block.toString(): String
1699 ===> org.kiama.example.imperative.AST.Div.l: org.kiama.example.imperative.AST.Exp
8281 ===> org.kiama.example.obr.RISCTree.Ret.productIterator: Iterator[Any]
2889 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.toString(): String
2383 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productArity: Int
2752 ===> org.kiama.example.iswim.driver.Main.usageMessage: String
4328 ===> org.kiama.example.json.JSONTree.JTrue.toString(): String
5343 ===> org.kiama.example.oberon0.L0.c.CInitDecl.decl: org.kiama.example.oberon0.base.c.CVarDecl
9329 ===> org.kiama.example.obr.SymbolTable.ArrayType.toString(): String
5457 ===> org.kiama.example.oberon0.L0.c.CLtExp.toString(): String
0 ===> org.kiama.example.iswim.secd.StackOps.super$evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
6693 ===> org.kiama.example.oberon0.L3.source.FPSection.tipe: org.kiama.example.oberon0.L0.source.TypeDef
0 ===> org.kiama.example.iswim.compiler.Parser.identRegex: scala.util.matching.Regex
0 ===> org.kiama.example.oberon0.L3.TypeAnalyser.super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
0 ===> scala.util.parsing.combinator.RegexParsers.parseAll[T](p: RegexParsers.this.Parser[T],in: CharSequence): RegexParsers.this.ParseResult[T]
11990 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7576 ===> org.kiama.example.obr.ObrTree.IntConst.idn: org.kiama.example.obr.ObrTree.Identifier
12190 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10179 ===> org.kiama.example.prolog.SymbolTable.Variable.tipe: org.kiama.example.prolog.SymbolTable.Type
1861 ===> org.kiama.example.imperative.ASTNonCase.Add.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
0 ===> org.kiama.example.lambda2.ReduceSubst.subsLam: org.kiama.rewriting.Rewriter.Strategy
5442 ===> org.kiama.example.oberon0.L0.c.CLtExp.right: org.kiama.example.oberon0.base.c.CExpression
11203 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.exp: ParenPrettyPrinterTests.this.Exp
1229 ===> org.kiama.example.RISC.RISCISA.BLE.<init>(label: Int): org.kiama.example.RISC.RISCISA.BLE
8363 ===> org.kiama.example.obr.RISCTree.Cond.t: org.kiama.example.obr.RISCTree.Datum
6743 ===> org.kiama.example.oberon0.L4.Parser.typedefDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.TypeDef]
9211 ===> org.kiama.example.obr.SymbolTable.prevloc_$eq(x$1: Int): Unit
11231 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productElement(x$1: Int): Any
4472 ===> org.kiama.example.lambda.AST.Sub.productIterator: Iterator[Any]
2105 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productElement(x$1: Int): Any
9358 ===> org.kiama.example.obr.SymbolTable.RecordType.toString(): String
10994 ===> org.kiama.output.Infix.toString(): String
3304 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productArity: Int
2376 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
10431 ===> org.kiama.example.til.AST.While.e: org.kiama.example.til.AST.Exp
4842 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8610 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productArity: Int
7529 ===> org.kiama.example.obr.ObrTree.RecordVar.productElement(x$1: Int): Any
3369 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.toString(): String
2204 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.toString(): String
11831 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
512 ===> org.kiama.example.RISC.RISCISA.MOVI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MOVI
11214 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productElement(x$1: Int): Any
2085 ===> org.kiama.example.iswim.compiler.Syntax.Times.productArity: Int
2809 ===> org.kiama.example.iswim.secd.BooleanOps.Test.toString(): String
7681 ===> org.kiama.example.obr.ObrTree.IfStmt.productIterator: Iterator[Any]
7404 ===> org.kiama.example.obr.Driver.spillEnvirFlag: Boolean
11582 ===> org.kiama.rewriting.Rewriter.$anon.childSeq[CC[U] <: Seq[U]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
9104 ===> org.kiama.example.obr.SPARCTree.RemW.productArity: Int
12389 ===> org.kiama.util.Messaging.Record.<init>(pos: scala.util.parsing.input.Position,message: String): org.kiama.util.Messaging.Record
7825 ===> org.kiama.example.obr.ObrTree.AndExp.productElement(x$1: Int): Any
3399 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productArity: Int
1092 ===> org.kiama.example.RISC.RISCISA.RD.<init>(a: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RD
2489 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productArity: Int
1233 ===> org.kiama.example.RISC.RISCISA.BLE.productArity: Int
0 ===> org.kiama.example.iswim.compiler.Parser.valexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
12087 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1111 ===> org.kiama.example.RISC.RISCISA.WRD.toString(): String
472 ===> org.kiama.example.RISC.RISC.LNK: RISC.this.ParamUpdater[org.kiama.example.RISC.RISCISA.RegNo,Int]
10411 ===> org.kiama.example.til.AST.IfElse.t: Seq[org.kiama.example.til.AST.Stat]
998 ===> org.kiama.example.RISC.RISCISA.LDB.productIterator: Iterator[Any]
1476 ===> org.kiama.example.dataflow.Foreach.body: org.kiama.example.dataflow.DataflowAST.Stm
3777 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productIterator: Iterator[Any]
8592 ===> org.kiama.example.obr.RISCTree.SubW.productElement(x$1: Int): Any
4132 ===> org.kiama.example.iswim.secd.StringOps.PushString.s: String
9787 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.Name: String
8884 ===> org.kiama.example.obr.SPARCTree.AddW.productIterator: Iterator[Any]
10232 ===> org.kiama.example.prolog.SymbolTable.ListType.productElement(x$1: Int): Any
1087 ===> org.kiama.example.RISC.RISCISA.PSH.toString(): String
6768 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.toString(): String
9032 ===> org.kiama.example.obr.SPARCTree.LdW.productArity: Int
2231 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.r: org.kiama.example.iswim.compiler.Syntax.Expr
2649 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productPrefix: String
6075 ===> org.kiama.example.oberon0.L0.source.AndExp.toString(): String
0 ===> java.io.File.toString(): String
4963 ===> org.kiama.example.lambda3.AST.Num.i: Int
7697 ===> org.kiama.example.obr.ObrTree.LoopStmt.productElement(x$1: Int): Any
4412 ===> org.kiama.example.lambda.AST.Var.productArity: Int
5961 ===> org.kiama.example.oberon0.L0.source.SubExp.left: org.kiama.example.oberon0.L0.source.Expression
3448 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.fn: Option[org.kiama.example.iswim.secd.SECDBase.Name]
1114 ===> org.kiama.example.RISC.RISCISA.WRD.productArity: Int
2125 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productIterator: Iterator[Any]
11284 ===> org.kiama.rewriting.NominalAST.Bind.productElement(x$1: Int): Any
6732 ===> org.kiama.example.oberon0.L3.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
11277 ===> org.kiama.rewriting.NominalAST.Bind.term: Any
3457 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productPrefix: String
2622 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.toString(): String
4188 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productPrefix: String
11270 ===> org.kiama.rewriting.NominalAST.Name.toString(): String
8742 ===> org.kiama.example.obr.SPARCTree.Beq.productElement(x$1: Int): Any
5233 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.toString(): String
11010 ===> org.kiama.output.PrettyPrinterBase.defaultIndent: Int
1814 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7903 ===> org.kiama.example.obr.ObrTree.GreaterExp.toString(): String
5871 ===> org.kiama.example.oberon0.L0.source.LtExp.productIterator: Iterator[Any]
10921 ===> org.kiama.machine.InconsistentUpdateException.<init>(m: org.kiama.machine.Machine,u: org.kiama.machine.Machine#Update,v: T): org.kiama.machine.InconsistentUpdateException[T]
8073 ===> org.kiama.example.obr.ObrTree.OrExp.left: org.kiama.example.obr.ObrTree.Expression
12077 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11885 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7560 ===> org.kiama.example.obr.ObrTree.EnumConst.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.EnumConst
5601 ===> org.kiama.example.oberon0.L0.c.CDivExp.left: org.kiama.example.oberon0.base.c.CExpression
10920 ===> org.kiama.machine.Machine.$lessinit$greater$default$2: org.kiama.util.Emitter @scala.annotation.unchecked.uncheckedVariance
5705 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productPrefix: String
9983 ===> org.kiama.example.prolog.Interpreter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9606 ===> org.kiama.example.oneohonecompanies.SampleCompany.company: org.kiama.example.oneohonecompanies.Company.Company
750 ===> org.kiama.example.RISC.RISCISA.MOD.productArity: Int
3917 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productElement(x$1: Int): Any
0 ===> scala.collection.mutable.ListBuffer.<init>(): scala.collection.mutable.ListBuffer[A]
7812 ===> org.kiama.example.obr.ObrTree.Catch.toString(): String
4723 ===> org.kiama.example.lambda2.AST.AddOp.productArity: Int
7569 ===> org.kiama.example.obr.ObrTree.EnumConst.toString(): String
2285 ===> org.kiama.example.iswim.compiler.Syntax.And.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.And
7628 ===> org.kiama.example.obr.ObrTree.AssignStmt.toString(): String
1783 ===> org.kiama.example.imperative.AST.While.productArity: Int
6410 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.condsToDoc(conds: List[org.kiama.example.oberon0.L2.source.Condition]): PrettyPrinter.this.Doc
4470 ===> org.kiama.example.lambda.AST.Sub.productArity: Int
3499 ===> org.kiama.example.iswim.secd.SECDBase.App.toString(): String
4487 ===> org.kiama.example.lambda.Evaluator.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12365 ===> org.kiama.util.IO.FileNotFoundException.message: String
9661 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productElement(x$1: Int): Any
12428 ===> org.kiama.util.ParserUtilities.constToTupleFunction2[A, B, R](r: (A, B) => R): ParserUtilities.this.~[A,B] => R
2086 ===> org.kiama.example.iswim.compiler.Syntax.Times.productElement(x$1: Int): Any
11736 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7658 ===> org.kiama.example.obr.ObrTree.ForStmt.productArity: Int
4343 ===> org.kiama.example.json.JSONTree.JFalse.toString(): String
4953 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10979 ===> org.kiama.output.Postfix.toString(): String
7033 ===> org.kiama.example.oberon0.base.TranslatingDriver.printcastFlag_$eq(x$1: Boolean): Unit
8111 ===> org.kiama.example.obr.ObrTree.SlashExp.left: org.kiama.example.obr.ObrTree.Expression
5380 ===> org.kiama.example.oberon0.L0.c.CAssignment.exp: org.kiama.example.oberon0.base.c.CExpression
10812 ===> org.kiama.example.transform.AST.BinExp.productElement(x$1: Int): Any
2831 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productArity: Int
7942 ===> org.kiama.example.obr.ObrTree.IndexExp.toString(): String
14 ===> org.kiama.attribution.Attributable.index: Int
8138 ===> org.kiama.example.obr.ObrTree.StarExp.productElement(x$1: Int): Any
6108 ===> org.kiama.example.oberon0.L0.source.NotExp.productArity: Int
5825 ===> org.kiama.example.oberon0.L0.source.EqExp.right: org.kiama.example.oberon0.L0.source.Expression
0 ===> org.kiama.example.til.TIL1_1.identifier: TIL1_1.this.Parser[org.kiama.example.til.AST.Id]
292 ===> org.kiama.attribution.AttributionTests.PairTree.toString(): String
0 ===> java.lang.Exception.<init>(x$1: String): Exception
10771 ===> org.kiama.example.transform.AST.BinExpR.productPrefix: String
9178 ===> org.kiama.example.obr.SPARCTree.Label.productArity: Int
730 ===> org.kiama.example.RISC.RISCISA.DIVI.productElement(x$1: Int): Any
6150 ===> org.kiama.example.oberon0.L0.source.IdnExp.toString(): String
11978 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1045 ===> org.kiama.example.RISC.RISCISA.STW.toString(): String
6483 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.tipe: SymbolTable.this.Type
9545 ===> org.kiama.example.oneohonecompanies.Company.PU.productIterator: Iterator[Any]
8544 ===> org.kiama.example.obr.RISCTree.NegW.toString(): String
5509 ===> org.kiama.example.oberon0.L0.c.CGeExp.productArity: Int
0 ===> org.kiama.example.obr.SyntaxAnalysis.constantdecls: SyntaxAnalysis.this.Parser[List[org.kiama.example.obr.ObrTree.Declaration]]
7637 ===> org.kiama.example.obr.ObrTree.ExitStmt.productIterator: Iterator[Any]
4907 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6407 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.caseToDoc(s: org.kiama.example.oberon0.L2.source.CaseStatement): PrettyPrinter.this.Doc
8980 ===> org.kiama.example.obr.SPARCTree.CmpltW.productElement(x$1: Int): Any
1738 ===> org.kiama.example.imperative.AST.Seqn.<init>(ss: Seq[org.kiama.example.imperative.AST.Stmt]): org.kiama.example.imperative.AST.Seqn
698 ===> org.kiama.example.RISC.RISCISA.DIV.a: org.kiama.example.RISC.RISCISA.RegNo
11494 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.i: Int
11098 ===> org.kiama.output.PrettyPrinterBase.rbracket: PrettyPrinterBase.this.Doc
9791 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productPrefix: String
7302 ===> org.kiama.example.oberon0.base.source.Block.toString(): String
9434 ===> org.kiama.example.obr.SymbolTable.UnknownType.productIterator: Iterator[Any]
8154 ===> org.kiama.example.obr.RISCEncoder.getcode: org.kiama.example.RISC.RISCISA.Code
3554 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productPrefix: String
10719 ===> org.kiama.example.til.TIL2_3.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7498 ===> org.kiama.example.obr.ObrTree.BoolVar.toString(): String
7168 ===> org.kiama.example.oberon0.base.c.CIntType.toString(): String
12587 ===> org.kiama.util.Positioned.setPos(p: org.kiama.util.Positioned): Positioned.this.type
0 ===> org.kiama.example.oberon0.L2.Parser.forStatement: Parser.this.Parser[org.kiama.example.oberon0.L2.source.ForStatement]
2270 ===> org.kiama.example.iswim.compiler.Syntax.Not.productPrefix: String
10794 ===> org.kiama.example.transform.AST.Factor.toString(): String
12489 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productPrefix: String
7005 ===> org.kiama.example.oberon0.base.Driver.input_$eq(x$1: Option[String]): Unit
6010 ===> org.kiama.example.oberon0.L0.source.MulExp.productArity: Int
6791 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productArity: Int
4137 ===> org.kiama.example.iswim.secd.StringOps.PushString.productArity: Int
9031 ===> org.kiama.example.obr.SPARCTree.LdW.productPrefix: String
5798 ===> org.kiama.example.oberon0.L0.source.Assignment.exp: org.kiama.example.oberon0.L0.source.Expression
11876 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> java.lang.Object.toString(): String
6622 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productElement(x$1: Int): Any
4766 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6015 ===> org.kiama.example.oberon0.L0.source.MulExp.toString(): String
3826 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productArity: Int
7714 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productElement(x$1: Int): Any
1600 ===> org.kiama.example.imperative.AST.Var.productArity: Int
967 ===> org.kiama.example.RISC.RISCISA.LDW.im: org.kiama.example.RISC.RISCISA.Imm
9027 ===> org.kiama.example.obr.SPARCTree.LdW.mem: org.kiama.example.obr.SPARCTree.Address
193 ===> org.kiama.attribution.AttributionTests.Unused.toString(): String
0 ===> org.kiama.example.oberon0.L1.Parser.super$keywordStrings: List[String]
5628 ===> org.kiama.example.oberon0.L0.c.CModExp.productPrefix: String
5000 ===> org.kiama.example.lambda3.AST.App.toString(): String
6829 ===> org.kiama.example.oberon0.L4.c.CRecordType.toString(): String
8796 ===> org.kiama.example.obr.SPARCTree.LabelDef.productIterator: Iterator[Any]
1216 ===> org.kiama.example.RISC.RISCISA.BGE.productPrefix: String
202 ===> org.kiama.attribution.AttributionTests.EitherTree.productArity: Int
0 ===> scala.collection.convert.Wrappers.JMapWrapper.productIterator: Iterator[Any]
7817 ===> org.kiama.example.obr.ObrTree.AndExp.left: org.kiama.example.obr.ObrTree.Expression
5055 ===> org.kiama.example.lambda3.AST.EvalQuery.e: org.kiama.example.lambda3.AST.Exp
8452 ===> org.kiama.example.obr.RISCTree.CmpltW.toString(): String
271 ===> org.kiama.attribution.AttributionTests.MapTree.productElement(x$1: Int): Any
7268 ===> org.kiama.example.oberon0.base.source.ModuleDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
4350 ===> org.kiama.example.json.JSONTree.JNull.productArity: Int
810 ===> org.kiama.example.RISC.RISCISA.CMPI.productElement(x$1: Int): Any
0 ===> org.kiama.example.oberon0.L0.Parser.lhs: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
1490 ===> org.kiama.example.dataflow.Foreach.toString(): String
11390 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.i: Int
11870 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8921 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productPrefix: String
7221 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.toString(): String
5537 ===> org.kiama.example.oberon0.L0.c.CAddExp.toString(): String
9478 ===> org.kiama.example.oneohonecompanies.Company.Company.depts: List[org.kiama.example.oneohonecompanies.Company.Dept]
7028 ===> org.kiama.example.oberon0.base.TransformingDriver.processargs(args: List[String]): Boolean
8811 ===> org.kiama.example.obr.SPARCTree.Read.productArity: Int
9984 ===> org.kiama.example.prolog.Interpreter.interpret(query: org.kiama.example.prolog.PrologTree.Term,program: org.kiama.example.prolog.PrologTree.Program,emitter: org.kiama.util.Emitter): Unit
6719 ===> org.kiama.example.oberon0.L3.source.Call.productArity: Int
0 ===> org.kiama.example.transform.Analysis.lookup: String => (org.kiama.attribution.Attributable => Option[org.kiama.example.transform.AST.VarDecl])
329 ===> org.kiama.attribution.AttributionTests.QuadTree.toString(): String
11386 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.toString(): String
0 ===> org.kiama.example.prolog.SyntaxAnalysis.atom: SyntaxAnalysis.this.Parser[String]
3991 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productIterator: Iterator[Any]
898 ===> org.kiama.example.RISC.RISCISA.OR.toString(): String
9033 ===> org.kiama.example.obr.SPARCTree.LdW.productElement(x$1: Int): Any
3223 ===> org.kiama.example.iswim.secd.IntegerOps.Div.toString(): String
9811 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productIterator: Iterator[Any]
3248 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productArity: Int
2327 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productElement(x$1: Int): Any
3522 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productPrefix: String
12020 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12445 ===> org.kiama.util.ParserUtilitiesTests.Node.i: Int
0 ===> org.kiama.example.oberon0.L4.source.PrettyPrinter.super$toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
9939 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.right: org.kiama.example.prolog.PrologTree.Term
9326 ===> org.kiama.example.obr.SymbolTable.ArrayType.size: Int
1977 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productArity: Int
12452 ===> org.kiama.util.ParserUtilitiesTests.Node.productIterator: Iterator[Any]
7803 ===> org.kiama.example.obr.ObrTree.Catch.productPrefix: String
1016 ===> org.kiama.example.RISC.RISCISA.POP.productPrefix: String
11574 ===> org.kiama.rewriting.Rewriter.para[T](f: (Any, Seq[T]) => T): Any => T
12045 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9717 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productPrefix: String
2765 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productPrefix: String
10603 ===> org.kiama.example.til.AST.Div.productElement(x$1: Int): Any
12067 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9052 ===> org.kiama.example.obr.SPARCTree.MulW.productElement(x$1: Int): Any
221 ===> org.kiama.attribution.AttributionTests.ListTree.productIterator: Iterator[Any]
6218 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productArity: Int
3860 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.hashCode(): Int
0 ===> org.kiama.example.iswim.compiler.Parser.term3: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]
8082 ===> org.kiama.example.obr.ObrTree.OrExp.productIterator: Iterator[Any]
5092 ===> org.kiama.example.lambda3.AST.FreshQuery.e: org.kiama.example.lambda3.AST.Exp
5101 ===> org.kiama.example.lambda3.AST.FreshQuery.productIterator: Iterator[Any]
11371 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.l: org.kiama.rewriting.SupportPositionalRewriterTests.Node
2011 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productArity: Int
0 ===> org.kiama.example.oberon0.L3.NameAnalyser.super$envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
0 ===> scala.Tuple6.productPrefix: String
0 ===> org.kiama.example.obr.SyntaxAnalysis.variabledecl: SyntaxAnalysis.this.Parser[org.kiama.example.obr.ObrTree.Declaration]
10169 ===> org.kiama.example.prolog.SymbolTable.Predicate.productIterator: Iterator[Any]
0 ===> scala.util.parsing.combinator.Parsers.Failure.productIterator: Iterator[Any]
10530 ===> org.kiama.example.til.AST.Var.productArity: Int
3045 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productArity: Int
4717 ===> org.kiama.example.lambda2.AST.Op.<init>(): org.kiama.example.lambda2.AST.Op
7146 ===> org.kiama.example.oberon0.base.c.CBlock.productPrefix: String
8039 ===> org.kiama.example.obr.ObrTree.NotEqualExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NotEqualExp
4517 ===> org.kiama.example.lambda2.AST.Num.productElement(x$1: Int): Any
7127 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productPrefix: String
7761 ===> org.kiama.example.obr.ObrTree.TryStmt.body: org.kiama.example.obr.ObrTree.TryBody
0 ===> org.kiama.example.iswim.compiler.Parser.start: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.IswimProg]
8046 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productIterator: Iterator[Any]
1869 ===> org.kiama.example.imperative.ASTNonCase.Div.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Div
0 ===> org.kiama.example.oberon0.L0.NameAnalyser.expconst: org.kiama.example.oberon0.L0.source.Expression => Boolean
5257 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.tipe: org.kiama.example.oberon0.L0.source.TypeDecl
0 ===> org.kiama.example.picojava.Parser.block: Parser.this.PackratParser[org.kiama.example.picojava.AbstractSyntax.Block]
10247 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productIterator: Iterator[Any]
12357 ===> org.kiama.util.Environments.isDefinedInScope(env: Environments.this.Environment,i: String): Boolean
4045 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productIterator: Iterator[Any]
4997 ===> org.kiama.example.lambda3.AST.App.e1: org.kiama.example.lambda3.AST.Exp
4358 ===> org.kiama.example.json.JSONTree.JNull.toString(): String
6451 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productElement(x$1: Int): Any
4136 ===> org.kiama.example.iswim.secd.StringOps.PushString.productPrefix: String
6069 ===> org.kiama.example.oberon0.L0.source.AndExp.productIterator: Iterator[Any]
8303 ===> org.kiama.example.obr.RISCTree.StW.toString(): String
12286 ===> org.kiama.util.Console.readLine(prompt: String): String
0 ===> jline.ConsoleReader.readLine(x$1: String): String
1742 ===> org.kiama.example.imperative.AST.Seqn.productPrefix: String
11954 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7427 ===> org.kiama.example.obr.ObrTree.ObrInt.idn1: org.kiama.example.obr.ObrTree.Identifier
7002 ===> org.kiama.example.oberon0.base.Driver.challengeFlag: Boolean
3970 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.toString(): String
0 ===> org.kiama.example.oberon0.L0.c.PrettyPrinter.super$toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
2141 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productPrefix: String
6317 ===> org.kiama.example.oberon0.L2.source.ForStatement.productIterator: Iterator[Any]
12474 ===> org.kiama.util.ParserUtilitiesTests.Tup2.toString(): String
210 ===> org.kiama.attribution.AttributionTests.EitherTree.toString(): String
4797 ===> org.kiama.example.lambda2.RewritingEvaluator.eval(exp: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Exp
8959 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productPrefix: String
6444 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.decl: org.kiama.example.oberon0.L3.source.ProcDecl
9617 ===> org.kiama.example.picojava.AbstractSyntax.Program.productPrefix: String
9925 ===> org.kiama.example.prolog.Interpreter.TermGoal.productPrefix: String
10342 ===> org.kiama.example.til.AST.Program.productArity: Int
7818 ===> org.kiama.example.obr.ObrTree.AndExp.right: org.kiama.example.obr.ObrTree.Expression
2767 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productElement(x$1: Int): Any
6886 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.toString(): String
9006 ===> org.kiama.example.obr.SPARCTree.DivW.toString(): String
0 ===> scala.Product6.productArity: Int
1079 ===> org.kiama.example.RISC.RISCISA.PSH.productPrefix: String
5100 ===> org.kiama.example.lambda3.AST.FreshQuery.productElement(x$1: Int): Any
10622 ===> org.kiama.example.til.AST.Add.productElement(x$1: Int): Any
5926 ===> org.kiama.example.oberon0.L0.source.GeExp.productArity: Int
2029 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productElement(x$1: Int): Any
6997 ===> org.kiama.example.oberon0.base.Driver.helpFlag_$eq(x$1: Boolean): Unit
0 ===> org.kiama.example.oberon0.L3.Parser.optActualParameters: Parser.this.Parser[List[org.kiama.example.oberon0.L0.source.Expression]]
9315 ===> org.kiama.example.obr.SymbolTable.BoolType.productArity: Int
677 ===> org.kiama.example.RISC.RISCISA.MULI.a: org.kiama.example.RISC.RISCISA.RegNo
6003 ===> org.kiama.example.oberon0.L0.source.MulExp.left: org.kiama.example.oberon0.L0.source.Expression
2400 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productArity: Int
7186 ===> org.kiama.example.oberon0.base.c.CStrType.toString(): String
7197 ===> org.kiama.example.oberon0.base.c.CArrayType.productArity: Int
6823 ===> org.kiama.example.oberon0.L4.c.CRecordType.productIterator: Iterator[Any]
1514 ===> org.kiama.example.dataflow.For.productElement(x$1: Int): Any
3734 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.hashCode(): Int
8306 ===> org.kiama.example.obr.RISCTree.StW.toString(): String
8518 ===> org.kiama.example.obr.RISCTree.MulW.productPrefix: String
10871 ===> org.kiama.machine.Machine.State._value: Option[T]
4259 ===> org.kiama.example.json.JSONTree.JName.toString(): String
10215 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productPrefix: String
10966 ===> org.kiama.output.Prefix.productElement(x$1: Int): Any
5491 ===> org.kiama.example.oberon0.L0.c.CGtExp.productIterator: Iterator[Any]
1182 ===> org.kiama.example.RISC.RISCISA.BNE.toString(): String
3539 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productPrefix: String
286 ===> org.kiama.attribution.AttributionTests.PairTree.productPrefix: String
1312 ===> org.kiama.example.RISC.RISCISA.Target.toString(): String
860 ===> org.kiama.example.RISC.RISCISA.ANDI.a: org.kiama.example.RISC.RISCISA.RegNo
1387 ===> org.kiama.example.dataflow.DataflowAST.While.body: org.kiama.example.dataflow.DataflowAST.Stm
2872 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.toString(): String
7443 ===> org.kiama.example.obr.ObrTree.ObrInt.toString(): String
489 ===> org.kiama.example.RISC.RISCISA.MOV.b: org.kiama.example.RISC.RISCISA.RegNo
5022 ===> org.kiama.example.lambda3.AST.Lam.productArity: Int
3828 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productIterator: Iterator[Any]
7190 ===> org.kiama.example.oberon0.base.c.CArrayType.size: Int
9777 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productIterator: Iterator[Any]
12041 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.oberon0.L2.TypeAnalyser.super$check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
8908 ===> org.kiama.example.obr.SPARCTree.Cond.toString(): String
547 ===> org.kiama.example.RISC.RISCISA.MVN.toString(): String
312 ===> org.kiama.attribution.AttributionTests.TripleTree.toString(): String
7025 ===> org.kiama.example.oberon0.base.TransformingDriver.printiastFlagDefault: Boolean
7837 ===> org.kiama.example.obr.ObrTree.BoolExp.<init>(value: Boolean): org.kiama.example.obr.ObrTree.BoolExp
11035 ===> org.kiama.output.PrettyPrinterBase.string(s: String): PrettyPrinterBase.this.Doc
10245 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productArity: Int
2645 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.e: org.kiama.example.iswim.compiler.Syntax.Expr
0 ===> org.kiama.example.lambda2.Reduce.s: org.kiama.rewriting.Rewriter.Strategy
4993 ===> org.kiama.example.lambda3.AST.Var.toString(): String
8810 ===> org.kiama.example.obr.SPARCTree.Read.productPrefix: String
12502 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n1: ParserUtilitiesTests.this.Node
9921 ===> org.kiama.example.prolog.Interpreter.TermGoal.term: org.kiama.example.prolog.PrologTree.Term
1892 ===> org.kiama.example.imperative.Generator.genMul(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Mul]
9512 ===> org.kiama.example.oneohonecompanies.Company.Dept.toString(): String
1841 ===> org.kiama.example.imperative.ASTNonCase.Num.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
0 ===> org.kiama.example.json.SyntaxAnalysis.jstring: SyntaxAnalysis.this.Parser[org.kiama.example.json.JSONTree.JString]
11072 ===> org.kiama.output.PrettyPrinterBase.dquotes(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
10626 ===> org.kiama.example.til.AST.Add.toString(): String
849 ===> org.kiama.example.RISC.RISCISA.AND.productArity: Int
1862 ===> org.kiama.example.imperative.ASTNonCase.Add.toString(): String
4449 ===> org.kiama.example.lambda.AST.App.productPrefix: String
1121 ===> org.kiama.example.RISC.RISCISA.WRD.toString(): String
0 ===> scala.Tuple6.toString(): String
0 ===> scala.collection.mutable.StringBuilder.length: Int
536 ===> org.kiama.example.RISC.RISCISA.MVN.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MVN
96 ===> org.kiama.attribution.Attribution.$anon.<init>(): Attribution.this.CachedAttribute[T,U]{}
1584 ===> org.kiama.example.imperative.AST.Num.toString(): String
7108 ===> org.kiama.example.oberon0.base.c.CVarDecl.productElement(x$1: Int): Any
8870 ===> org.kiama.example.obr.SPARCTree.Write.toString(): String
2093 ===> org.kiama.example.iswim.compiler.Syntax.Times.toString(): String
282 ===> org.kiama.attribution.AttributionTests.PairTree.p: (AttributionTests.this.Tree, AttributionTests.this.Tree)
10773 ===> org.kiama.example.transform.AST.BinExpR.productElement(x$1: Int): Any
6355 ===> org.kiama.example.oberon0.L2.source.Case.productArity: Int
589 ===> org.kiama.example.RISC.RISCISA.ADD.toString(): String
6207 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.toString(): String
0 ===> org.kiama.example.prolog.SyntaxAnalysis.literal: SyntaxAnalysis.this.PackratParser[org.kiama.example.prolog.PrologTree.Literal]
7063 ===> org.kiama.example.oberon0.base.c.CProgram.includes: List[org.kiama.example.oberon0.base.c.CInclude]
6356 ===> org.kiama.example.oberon0.L2.source.Case.productElement(x$1: Int): Any
1203 ===> org.kiama.example.RISC.RISCISA.BLT.productIterator: Iterator[Any]
10531 ===> org.kiama.example.til.AST.Var.productElement(x$1: Int): Any
11546 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
12470 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productElement(x$1: Int): Any
10381 ===> org.kiama.example.til.AST.Assign.productIterator: Iterator[Any]
12341 ===> org.kiama.util.Environments.UnknownEntity.productArity: Int
5227 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productElement(x$1: Int): Any
3122 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productIterator: Iterator[Any]
7285 ===> org.kiama.example.oberon0.base.source.ModuleDecl.toString(): String
4946 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
969 ===> org.kiama.example.RISC.RISCISA.LDW.toString(): String
2627 ===> org.kiama.example.iswim.compiler.Syntax.Match.clauses: List[org.kiama.example.iswim.compiler.Syntax.MatchClause]
716 ===> org.kiama.example.RISC.RISCISA.DIV.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.DIV
3946 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productArity: Int
3985 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.toString(): String
11155 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.left: ParenPrettyPrinterTests.this.Exp
8838 ===> org.kiama.example.obr.SPARCTree.StW.mem: org.kiama.example.obr.SPARCTree.Address
5670 ===> org.kiama.example.oberon0.L0.c.CNegExp.productArity: Int
237 ===> org.kiama.attribution.AttributionTests.SetTree.productElement(x$1: Int): Any
12606 ===> org.kiama.util.ParsingREPLBase.processline(line: String): Unit
8060 ===> org.kiama.example.obr.ObrTree.NotExp.productPrefix: String
3665 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productPrefix: String
0 ===> scala.Any.isInstanceOf[T0]: Boolean
1858 ===> org.kiama.example.imperative.ASTNonCase.Binary.arity: Int
6848 ===> org.kiama.example.oberon0.L4.c.CIndexExp.toString(): String
2040 ===> org.kiama.example.iswim.compiler.Syntax.Plus.l: org.kiama.example.iswim.compiler.Syntax.Expr
6368 ===> org.kiama.example.oberon0.L2.source.ValCond.value: org.kiama.example.oberon0.L0.source.Expression
5368 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productElement(x$1: Int): Any
5950 ===> org.kiama.example.oberon0.L0.source.AddExp.productElement(x$1: Int): Any
0 ===> org.kiama.example.json.SyntaxAnalysis.jpair: SyntaxAnalysis.this.Parser[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)]
8723 ===> org.kiama.example.obr.SPARCTree.SPARC.productIterator: Iterator[Any]
6840 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productArity: Int
4211 ===> org.kiama.example.iswim.tests.SECDTests.SECD.init: Unit
12216 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3015 ===> org.kiama.example.iswim.secd.HeapOps.Get.productArity: Int
2857 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.toString(): String
12151 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1153 ===> org.kiama.example.RISC.RISCISA.WRL.toString(): String
6439 ===> org.kiama.example.oberon0.L3.Parser.declarationsDef: Parser.this.PackratParser[List[org.kiama.example.oberon0.base.source.Declaration]]
4602 ===> org.kiama.example.lambda2.AST.Opn.toString(): String
490 ===> org.kiama.example.RISC.RISCISA.MOV.c: org.kiama.example.RISC.RISCISA.RegNo
3014 ===> org.kiama.example.iswim.secd.HeapOps.Get.productPrefix: String
9416 ===> org.kiama.example.obr.SymbolTable.ExnType.productPrefix: String
3023 ===> org.kiama.example.iswim.secd.HeapOps.Get.toString(): String
4958 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
0 ===> org.kiama.example.obr.SyntaxAnalysis.simplexp: SyntaxAnalysis.this.PackratParser[org.kiama.example.obr.ObrTree.Expression]
0 ===> org.kiama.example.oberon0.L2.Parser.super$statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
3810 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.toString(): String
12023 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7163 ===> org.kiama.example.oberon0.base.c.CIntType.productArity: Int
11383 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.toString(): String
10057 ===> org.kiama.example.prolog.PrologTree.Var.s: String
6614 ===> org.kiama.example.oberon0.L3.c.CDerefExp.exp: org.kiama.example.oberon0.base.c.CExpression
9678 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productPrefix: String
6147 ===> org.kiama.example.oberon0.L0.source.IdnExp.toString(): String
1038 ===> org.kiama.example.RISC.RISCISA.STW.productArity: Int
5863 ===> org.kiama.example.oberon0.L0.source.LtExp.right: org.kiama.example.oberon0.L0.source.Expression
6772 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productArity: Int
1219 ===> org.kiama.example.RISC.RISCISA.BGE.productIterator: Iterator[Any]
9976 ===> org.kiama.example.prolog.Interpreter.glstack: scala.collection.mutable.Stack[List[org.kiama.example.prolog.Interpreter.Goal]]
4657 ===> org.kiama.example.lambda2.AST.Bind.productIterator: Iterator[Any]
10955 ===> org.kiama.output.NonAssoc.productArity: Int
6012 ===> org.kiama.example.oberon0.L0.source.MulExp.productIterator: Iterator[Any]
0 ===> org.kiama.example.imperative.ASTNonCase.Sub.r: org.kiama.example.imperative.ASTNonCase.Exp
8636 ===> org.kiama.example.obr.RISCTree.Local.toString(): String
0 ===> org.kiama.attribution.Decorators.infunc: org.kiama.==>[T,U]
11017 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$at$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
6461 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.mode: org.kiama.example.oberon0.L3.source.Mode
1482 ===> org.kiama.example.dataflow.Foreach.productArity: Int
4119 ===> org.kiama.example.iswim.secd.StackOps.Swap.toString(): String
12397 ===> org.kiama.util.Messaging.Record.productIterator: Iterator[Any]
9103 ===> org.kiama.example.obr.SPARCTree.RemW.productPrefix: String
10109 ===> org.kiama.example.prolog.PrologTree.Pred.s: String
0 ===> org.kiama.example.lambda3.Parser.trans: Parser.this.PackratParser[(org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name)]
10678 ===> org.kiama.example.til.AST.Ne.productArity: Int
6623 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productIterator: Iterator[Any]
5511 ===> org.kiama.example.oberon0.L0.c.CGeExp.productIterator: Iterator[Any]
8422 ===> org.kiama.example.obr.RISCTree.CmpgtW.r: org.kiama.example.obr.RISCTree.Datum
4381 ===> org.kiama.example.json.Rewriter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11557 ===> org.kiama.rewriting.Rewriter.id: Rewriter.this.Strategy
11171 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productIterator: Iterator[Any]
10602 ===> org.kiama.example.til.AST.Div.productArity: Int
241 ===> org.kiama.attribution.AttributionTests.SetTree.toString(): String
3885 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productPrefix: String
0 ===> scala.Product5.productElement(n: Int): Any
67 ===> org.kiama.attribution.Attribution.MemoState.MEMO_VERSION: Int
2864 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productPrefix: String
2465 ===> org.kiama.example.iswim.compiler.Syntax.Return.res: org.kiama.example.iswim.compiler.Syntax.Expr
1925 ===> org.kiama.example.iswim.compiler.Parser.Pos.s: String
1959 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productPrefix: String
3157 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productPrefix: String
10033 ===> org.kiama.example.prolog.PrologTree.Fact.toString(): String
8403 ===> org.kiama.example.obr.RISCTree.CmpneW.r: org.kiama.example.obr.RISCTree.Datum
6034 ===> org.kiama.example.oberon0.L0.source.DivExp.toString(): String
816 ===> org.kiama.example.RISC.RISCISA.CMPI.toString(): String
8448 ===> org.kiama.example.obr.RISCTree.CmpltW.productElement(x$1: Int): Any
9516 ===> org.kiama.example.oneohonecompanies.Company.Employee.n: org.kiama.example.oneohonecompanies.Company.Name
9454 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productElement(x$1: Int): Any
12442 ===> org.kiama.util.WhitespaceParser.regex(r: scala.util.matching.Regex): WhitespaceParser.this.Parser[String]
3196 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.toString(): String
11530 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
3791 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productElement(x$1: Int): Any
2199 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productArity: Int
10091 ===> org.kiama.example.prolog.PrologTree.Literal.<init>(): org.kiama.example.prolog.PrologTree.Literal
2382 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productPrefix: String
11119 ===> org.kiama.output.PrettyPrinter.line(gap: PrettyPrinter.this.Layout): PrettyPrinter.this.Doc
2694 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.toString(): String
6262 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productArity: Int
924 ===> org.kiama.example.RISC.RISCISA.XOR.b: org.kiama.example.RISC.RISCISA.RegNo
0 ===> org.kiama.example.til.TIL1_1.assignment_statement: TIL1_1.this.Parser[org.kiama.example.til.AST.Assign]
1965 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.toString(): String
5441 ===> org.kiama.example.oberon0.L0.c.CLtExp.left: org.kiama.example.oberon0.base.c.CExpression
4673 ===> org.kiama.example.lambda2.AST.IntType.productIterator: Iterator[Any]
3686 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.toString(): String
869 ===> org.kiama.example.RISC.RISCISA.ANDI.productPrefix: String
3789 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productPrefix: String
0 ===> java.lang.Throwable.toString(): String
6495 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.toString(): String
635 ===> org.kiama.example.RISC.RISCISA.SUBI.a: org.kiama.example.RISC.RISCISA.RegNo
1502 ===> org.kiama.example.dataflow.For.init: org.kiama.example.dataflow.DataflowAST.Stm
10939 ===> org.kiama.output.LeftAssoc.productIterator: Iterator[Any]
9440 ===> org.kiama.example.obr.SymbolTable.UnknownType.toString(): String
8080 ===> org.kiama.example.obr.ObrTree.OrExp.productArity: Int
11193 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productIterator: Iterator[Any]
10421 ===> org.kiama.example.til.AST.IfElse.productIterator: Iterator[Any]
7776 ===> org.kiama.example.obr.ObrTree.TryStmt.toString(): String
16 ===> org.kiama.attribution.Attributable.children: Iterator[org.kiama.attribution.Attributable]
9218 ===> org.kiama.example.obr.SymbolTable.Variable.tipe: org.kiama.example.obr.SymbolTable.Type
11814 ===> org.kiama.rewriting.RewriterTests.NotSame.productArity: Int
1913 ===> org.kiama.example.imperative.PrettyPrinter.show(t: org.kiama.example.imperative.AST.ImperativeNode): org.kiama.example.imperative.PrettyPrinter.Doc
4754 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10379 ===> org.kiama.example.til.AST.Assign.productArity: Int
11795 ===> org.kiama.rewriting.RewriterTests.Equal.productPrefix: String
3619 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productIterator: Iterator[Any]
9247 ===> org.kiama.example.obr.SymbolTable.Constant.productArity: Int
4301 ===> org.kiama.example.json.JSONTree.JNumber.<init>(value: Double): org.kiama.example.json.JSONTree.JNumber
9752 ===> org.kiama.example.picojava.AbstractSyntax.Dot.IdnUse: org.kiama.example.picojava.AbstractSyntax.IdnUse
5806 ===> org.kiama.example.oberon0.L0.source.Assignment.productIterator: Iterator[Any]
9131 ===> org.kiama.example.obr.SPARCTree.SubW.toString(): String
6749 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.<init>(size: Int,elemtype: SymbolTable.this.Type): SymbolTable.this.ArrayType
0 ===> org.kiama.example.oberon0.L3.NameAnalyser.super$entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): NameAnalyser.this.Entity
4803 ===> org.kiama.example.lambda2.Evaluators.mechanism_$eq(x$1: String): Unit
3640 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.toString(): String
6061 ===> org.kiama.example.oberon0.L0.source.AndExp.right: org.kiama.example.oberon0.L0.source.Expression
2504 ===> org.kiama.example.iswim.compiler.Syntax.If.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr,thn: org.kiama.example.iswim.compiler.Syntax.Expr,els: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.If
0 ===> scala.Tuple3.productPrefix: String
6429 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
0 ===> org.kiama.example.lambda2.Par.subsApp: org.kiama.rewriting.Rewriter.Strategy
5430 ===> org.kiama.example.oberon0.L0.c.CNeExp.productElement(x$1: Int): Any
4079 ===> org.kiama.example.iswim.secd.StackOps.Pop.productElement(x$1: Int): Any
11137 ===> org.kiama.output.PrettyPrinterTests.Val.productArity: Int
7933 ===> org.kiama.example.obr.ObrTree.IndexExp.productPrefix: String
0 ===> scala.util.parsing.combinator.Parsers.Error.productArity: Int
10930 ===> org.kiama.machine.MachineTests.MM.s: org.kiama.machine.MachineTests.MM.State[Int]
5183 ===> org.kiama.example.oberon0.L0.NameAnalyser.isRvalue(r: org.kiama.example.oberon0.L0.source.IdnExp): Boolean
10403 ===> org.kiama.example.til.AST.IfThen.toString(): String
0 ===> org.kiama.example.lambda.Parser.idn: scala.util.matching.Regex
3368 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.hashCode(): Int
1018 ===> org.kiama.example.RISC.RISCISA.POP.productElement(x$1: Int): Any
1887 ===> org.kiama.example.imperative.Generator.genVar: org.scalacheck.Gen[org.kiama.example.imperative.AST.Var]
10365 ===> org.kiama.example.til.AST.Decl.toString(): String
1230 ===> org.kiama.example.RISC.RISCISA.BLE.toString(): String
4122 ===> org.kiama.example.iswim.secd.StackOps.Swap.toString(): String
1058 ===> org.kiama.example.RISC.RISCISA.STB.productPrefix: String
6243 ===> org.kiama.example.oberon0.L1.source.IfStatement.productArity: Int
10412 ===> org.kiama.example.til.AST.IfElse.f: Seq[org.kiama.example.til.AST.Stat]
551 ===> org.kiama.example.RISC.RISCISA.MVNI.a: org.kiama.example.RISC.RISCISA.RegNo
11468 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.toString(): String
8488 ===> org.kiama.example.obr.RISCTree.IntDatum.toString(): String
11057 ===> org.kiama.output.PrettyPrinterBase.vsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
2566 ===> org.kiama.example.iswim.compiler.Syntax.Empty.toString(): String
2060 ===> org.kiama.example.iswim.compiler.Syntax.Minus.r: org.kiama.example.iswim.compiler.Syntax.Expr
2276 ===> org.kiama.example.iswim.compiler.Syntax.Not.toString(): String
6490 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productArity: Int
1904 ===> org.kiama.example.imperative.Generator.genInternalStmt(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Stmt]
1463 ===> org.kiama.example.dataflow.DataflowAST.Empty.productArity: Int
9917 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.toString(): String
8846 ===> org.kiama.example.obr.SPARCTree.StW.productElement(x$1: Int): Any
8648 ===> org.kiama.example.obr.RISCTree.Indexed.productElement(x$1: Int): Any
10295 ===> org.kiama.example.repmin.Leaf.value: Int
12418 ===> org.kiama.util.ParserUtilities.failure(msg: String): ParserUtilities.this.Parser[Nothing]
