10331 ===> org.kiama.example.til.ParsingMain.parser: ParsingMain.this.Parser[org.kiama.example.til.AST.Program]
6503 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.params: List[SymbolTable.this.ParamInfo]
11261 ===> org.kiama.rewriting.NominalAST.Name.copy$default$2: Option[Int] @scala.annotation.unchecked.uncheckedVariance
3513 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.<init>(): org.kiama.example.iswim.secd.SECDBase.TailApp.type
3713 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productIterator: Iterator[Any]
3120 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productArity: Int
4615 ===> org.kiama.example.lambda2.AST.Let.copy$default$4: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
6585 ===> org.kiama.example.oberon0.L3.c.CStrExp.productIterator: Iterator[Any]
10803 ===> org.kiama.example.transform.AST.BinExp.op: String
6351 ===> org.kiama.example.oberon0.L2.source.Case.copy(conds: List[org.kiama.example.oberon0.L2.source.Condition],block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L2.source.Case
11257 ===> org.kiama.rewriting.NominalAST.Name.<init>(base: String,opti: Option[Int]): org.kiama.rewriting.NominalAST.Name
5261 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.copy$default$2: org.kiama.example.oberon0.L0.source.TypeDecl @scala.annotation.unchecked.uncheckedVariance
9627 ===> org.kiama.example.picojava.AbstractSyntax.Program.apply(Block: org.kiama.example.picojava.AbstractSyntax.Block): org.kiama.example.picojava.AbstractSyntax.Program
3033 ===> org.kiama.example.iswim.secd.HeapOps.Put.canEqual(x$1: Any): Boolean
6863 ===> org.kiama.example.oberon0.L4.c.CFieldExp.hashCode(): Int
9246 ===> org.kiama.example.obr.SymbolTable.Constant.productPrefix: String
4480 ===> org.kiama.example.lambda.AST.Sub.unapply(x$0: org.kiama.example.lambda.AST.Sub): Option[(org.kiama.example.lambda.AST.Exp, org.kiama.example.lambda.AST.Idn, org.kiama.example.lambda.AST.Exp)]
7368 ===> org.kiama.example.oberon0.drivers.A1Phases.$init$(): Unit
1786 ===> org.kiama.example.imperative.AST.While.canEqual(x$1: Any): Boolean
3239 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.equals(x$1: Any): Boolean
7130 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productIterator: Iterator[Any]
278 ===> org.kiama.attribution.AttributionTests.MapTree.toString(): String
10151 ===> org.kiama.example.prolog.SemanticAnalysis.varsin: org.kiama.example.prolog.PrologTree.SourceNode => org.kiama.example.prolog.SymbolTable.Environment
10599 ===> org.kiama.example.til.AST.Div.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10986 ===> org.kiama.output.Infix.productArity: Int
5070 ===> org.kiama.example.lambda3.AST.EvalQuery.apply(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.EvalQuery
829 ===> org.kiama.example.RISC.RISCISA.CHKI.productElement(x$1: Int): Any
5041 ===> org.kiama.example.lambda3.AST.EquivQuery.copy$default$2: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
3124 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.hashCode(): Int
843 ===> org.kiama.example.RISC.RISCISA.AND.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5029 ===> org.kiama.example.lambda3.AST.Lam.toString(): String
645 ===> org.kiama.example.RISC.RISCISA.SUBI.productArity: Int
3480 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.hashCode(): Int
7249 ===> org.kiama.example.oberon0.base.c.CIntExp.productElement(x$1: Int): Any
6831 ===> org.kiama.example.oberon0.L4.c.CRecordType.unapply(x$0: org.kiama.example.oberon0.L4.c.CRecordType): Option[List[org.kiama.example.oberon0.base.c.CVarDecl]]
6773 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productElement(x$1: Int): Any
1626 ===> org.kiama.example.imperative.AST.Neg.toString(): String
11681 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
5023 ===> org.kiama.example.lambda3.AST.Lam.productElement(x$1: Int): Any
4910 ===> org.kiama.example.lambda2.ParLazyShareEvaluator.<init>(): org.kiama.example.lambda2.ParLazyShareEvaluator
11391 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.<init>(i: Int): org.kiama.rewriting.SupportPositionalRewriterTests.Leaf
3913 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.message: String
7555 ===> org.kiama.example.obr.ObrTree.EnumVar.toString(): String
5003 ===> org.kiama.example.lambda3.AST.App.copy$default$2: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
4882 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11547 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
2108 ===> org.kiama.example.iswim.compiler.Syntax.Divide.hashCode(): Int
8886 ===> org.kiama.example.obr.SPARCTree.AddW.hashCode(): Int
1721 ===> org.kiama.example.imperative.AST.Stmt.vars: Set[org.kiama.example.imperative.AST.Idn]
9472 ===> org.kiama.example.obr.tests.ObrExecTests.enumExecDir: String
2972 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.copy$default$5: ExceptionHandler.this.Handler @scala.annotation.unchecked.uncheckedVariance
9792 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productArity: Int
9 ===> org.kiama.attribution.Attributable.next: org.kiama.attribution.Attributable
4982 ===> org.kiama.example.lambda3.AST.Var.toString(): String
7843 ===> org.kiama.example.obr.ObrTree.BoolExp.productIterator: Iterator[Any]
1121 ===> org.kiama.example.RISC.RISCISA.WRD.toString(): String
9510 ===> org.kiama.example.oneohonecompanies.Company.Dept.equals(x$1: Any): Boolean
8269 ===> org.kiama.example.obr.RISCTree.LabelDef.toString(): String
10428 ===> org.kiama.example.til.AST.IfElse.apply(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat],f: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.IfElse
3341 ===> org.kiama.example.iswim.secd.RecordOps.GetField.<init>(): org.kiama.example.iswim.secd.RecordOps.GetField.type
10554 ===> org.kiama.example.til.AST.Num.<init>(): org.kiama.example.til.AST.Num.type
12298 ===> org.kiama.util.Emitter.emitln(any: Any): Unit
9612 ===> org.kiama.example.picojava.AbstractSyntax.<init>(): org.kiama.example.picojava.AbstractSyntax.type
5636 ===> org.kiama.example.oberon0.L0.c.CModExp.<init>(): org.kiama.example.oberon0.L0.c.CModExp.type
1559 ===> org.kiama.example.dataflow.Optimise.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9713 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.<init>(Condition: org.kiama.example.picojava.AbstractSyntax.Exp,Body: org.kiama.example.picojava.AbstractSyntax.Stmt): org.kiama.example.picojava.AbstractSyntax.WhileStmt
3310 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.equals(x$1: Any): Boolean
5238 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.tipe: org.kiama.example.oberon0.L0.source.TypeDef
6449 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productPrefix: String
9941 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.copy(left: org.kiama.example.prolog.PrologTree.Term,right: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.UnifyGoal
7343 ===> org.kiama.example.oberon0.base.source.IdnUse.ident: String
5271 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.apply(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDecl): SymbolTable.this.UserType
8371 ===> org.kiama.example.obr.RISCTree.Cond.productArity: Int
6070 ===> org.kiama.example.oberon0.L0.source.AndExp.canEqual(x$1: Any): Boolean
484 ===> org.kiama.example.RISC.RISCISA.<init>(): org.kiama.example.RISC.RISCISA.type
1635 ===> org.kiama.example.imperative.AST.Binary.divsbyzero: Int
8720 ===> org.kiama.example.obr.SPARCTree.SPARC.productPrefix: String
104 ===> org.kiama.attribution.Attribution.dynAttr[T <: AnyRef, U](name: String)(f: T => U): Attribution.this.CachedDynamicAttribute[T,U]
10636 ===> org.kiama.example.til.AST.Sub.copy(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Sub
12343 ===> org.kiama.util.Environments.UnknownEntity.productIterator: Iterator[Any]
1531 ===> org.kiama.example.dataflow.DataflowFor.$anonfun.applyOrElse[A1 <: org.kiama.example.dataflow.DataflowAST.Stm, B1 >: Set[org.kiama.example.dataflow.DataflowAST.Stm]](x$1: A1,default: A1 => B1): B1
10113 ===> org.kiama.example.prolog.PrologTree.Pred.copy(s: String,ts: List[org.kiama.example.prolog.PrologTree.Term]): org.kiama.example.prolog.PrologTree.Pred
5236 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.readResolve(): Object
7472 ===> org.kiama.example.obr.ObrTree.IntParam.productPrefix: String
2404 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.hashCode(): Int
8623 ===> org.kiama.example.obr.RISCTree.Local.offset: Int
1926 ===> org.kiama.example.iswim.compiler.Parser.Pos.<init>(s: String): Parser.this.Pos
9419 ===> org.kiama.example.obr.SymbolTable.ExnType.productIterator: Iterator[Any]
6828 ===> org.kiama.example.oberon0.L4.c.CRecordType.<init>(): org.kiama.example.oberon0.L4.c.CRecordType.type
10621 ===> org.kiama.example.til.AST.Add.productArity: Int
6079 ===> org.kiama.example.oberon0.L0.source.UnaryExpression.<init>(): org.kiama.example.oberon0.L0.source.UnaryExpression
4727 ===> org.kiama.example.lambda2.AST.AddOp.hashCode(): Int
3416 ===> org.kiama.example.iswim.secd.SECDBase.currPos_$eq(x$1: scala.util.parsing.input.Position): Unit
7111 ===> org.kiama.example.oberon0.base.c.CVarDecl.hashCode(): Int
8907 ===> org.kiama.example.obr.SPARCTree.Cond.hashCode(): Int
784 ===> org.kiama.example.RISC.RISCISA.CMP.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
9159 ===> org.kiama.example.obr.SPARCTree.Indexed.productPrefix: String
1069 ===> org.kiama.example.RISC.RISCISA.STB.readResolve(): Object
9934 ===> org.kiama.example.prolog.Interpreter.TermGoal.toString(): String
3944 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.copy(): org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive
7755 ===> org.kiama.example.obr.ObrTree.RaiseStmt.equals(x$1: Any): Boolean
8455 ===> org.kiama.example.obr.RISCTree.CmpltW.toString(): String
12511 ===> org.kiama.util.ParserUtilitiesTests.Tup4.copy$default$4: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
6196 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.copy$default$2: org.kiama.example.oberon0.base.c.CStatement @scala.annotation.unchecked.uncheckedVariance
9114 ===> org.kiama.example.obr.SPARCTree.RemW.unapply(x$0: org.kiama.example.obr.SPARCTree.RemW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
6361 ===> org.kiama.example.oberon0.L2.source.Case.equals(x$1: Any): Boolean
3768 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.toString(): String
2469 ===> org.kiama.example.iswim.compiler.Syntax.Return.productPrefix: String
4995 ===> org.kiama.example.lambda3.AST.Var.unapply(x$0: org.kiama.example.lambda3.AST.Var): Option[org.kiama.rewriting.NominalAST.Name]
352 ===> org.kiama.attribution.AttributionTests.refuse(in: AttributionTests.this.Tree => Int): org.kiama.==>[AttributionTests.this.Tree,Int]
6683 ===> org.kiama.example.oberon0.L3.source.ValMode.hashCode(): Int
11313 ===> org.kiama.rewriting.NominalRewriter.fv(t: NominalRewriter.this.Term): Set[org.kiama.rewriting.NominalAST.Name]
7366 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.semisep$default$2: PrettyPrinter.this.Doc @scala.annotation.unchecked.uncheckedVariance
12228 ===> org.kiama.rewriting.UniplateTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10590 ===> org.kiama.example.til.AST.Mul.<init>(): org.kiama.example.til.AST.Mul.type
1779 ===> org.kiama.example.imperative.AST.While.copy(e: org.kiama.example.imperative.AST.Exp,b: org.kiama.example.imperative.AST.Stmt): org.kiama.example.imperative.AST.While
174 ===> org.kiama.attribution.AttributionTests.Leaf.equals(x$1: Any): Boolean
8905 ===> org.kiama.example.obr.SPARCTree.Cond.productIterator: Iterator[Any]
9724 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.equals(x$1: Any): Boolean
7972 ===> org.kiama.example.obr.ObrTree.LessExp.productIterator: Iterator[Any]
6193 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.<init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CIfElseStatement
9739 ===> org.kiama.example.picojava.AbstractSyntax.Use.productArity: Int
4728 ===> org.kiama.example.lambda2.AST.AddOp.toString(): String
6122 ===> org.kiama.example.oberon0.L0.source.IntExp.copy(v: Int): org.kiama.example.oberon0.L0.source.IntExp
1232 ===> org.kiama.example.RISC.RISCISA.BLE.productPrefix: String
11998 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2697 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.readResolve(): Object
8794 ===> org.kiama.example.obr.SPARCTree.LabelDef.productArity: Int
10851 ===> org.kiama.example.transform.AST.Var.toString(): String
8570 ===> org.kiama.example.obr.RISCTree.RemW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
11295 ===> org.kiama.rewriting.NominalAST.GenName.<init>(): org.kiama.rewriting.NominalAST.GenName.type
6114 ===> org.kiama.example.oberon0.L0.source.NotExp.equals(x$1: Any): Boolean
12191 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4027 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.copy(bdy: org.kiama.example.iswim.secd.SECDBase.Code): SECDBase.this.PrimValue
396 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productPrefix: String
5590 ===> org.kiama.example.oberon0.L0.c.CMulExp.productElement(x$1: Int): Any
10472 ===> org.kiama.example.til.AST.For.readResolve(): Object
7871 ===> org.kiama.example.obr.ObrTree.EqualExp.readResolve(): Object
6820 ===> org.kiama.example.oberon0.L4.c.CRecordType.productPrefix: String
7669 ===> org.kiama.example.obr.ObrTree.ForStmt.readResolve(): Object
3933 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productIterator: Iterator[Any]
470 ===> org.kiama.example.RISC.RISC.FP: RISC.this.ParamUpdater[org.kiama.example.RISC.RISCISA.RegNo,Int]
2337 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.readResolve(): Object
4539 ===> org.kiama.example.lambda2.AST.Var.equals(x$1: Any): Boolean
2568 ===> org.kiama.example.iswim.compiler.Syntax.Empty.<init>(): org.kiama.example.iswim.compiler.Syntax.Empty.type
768 ===> org.kiama.example.RISC.RISCISA.MODI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
12368 ===> org.kiama.util.IO.FileNotFoundException.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
9181 ===> org.kiama.example.obr.SPARCTree.Label.canEqual(x$1: Any): Boolean
720 ===> org.kiama.example.RISC.RISCISA.DIVI.b: org.kiama.example.RISC.RISCISA.RegNo
5576 ===> org.kiama.example.oberon0.L0.c.COrExp.<init>(): org.kiama.example.oberon0.L0.c.COrExp.type
9388 ===> org.kiama.example.obr.SymbolTable.EnumType.canEqual(x$1: Any): Boolean
3765 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.toString(): String
58 ===> org.kiama.attribution.AttributionBase.circular[T <: AnyRef, U](name: String)(init: U)(f: T => U): T => U
5155 ===> org.kiama.example.lambda3.Evaluator.cbn_eval(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.Exp
7484 ===> org.kiama.example.obr.ObrTree.IntParam.readResolve(): Object
11035 ===> org.kiama.output.PrettyPrinterBase.string(s: String): PrettyPrinterBase.this.Doc
10057 ===> org.kiama.example.prolog.PrologTree.Var.s: String
10274 ===> org.kiama.example.prolog.Unifier.unify(ls: List[org.kiama.example.prolog.PrologTree.Term],rs: List[org.kiama.example.prolog.PrologTree.Term]): Option[org.kiama.example.prolog.Subst]
1615 ===> org.kiama.example.imperative.AST.Neg.divsbyzero: Int
2145 ===> org.kiama.example.iswim.compiler.Syntax.Equal.canEqual(x$1: Any): Boolean
8448 ===> org.kiama.example.obr.RISCTree.CmpltW.productElement(x$1: Int): Any
12240 ===> org.kiama.rewriting.UniplateTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8036 ===> org.kiama.example.obr.ObrTree.NegExp.readResolve(): Object
5578 ===> org.kiama.example.oberon0.L0.c.COrExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.COrExp
208 ===> org.kiama.attribution.AttributionTests.EitherTree.equals(x$1: Any): Boolean
5988 ===> org.kiama.example.oberon0.L0.source.OrExp.productElement(x$1: Int): Any
7378 ===> org.kiama.example.oberon0.drivers.A2a.<init>(): org.kiama.example.oberon0.drivers.A2a.type
8984 ===> org.kiama.example.obr.SPARCTree.CmpltW.toString(): String
2778 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.<init>(): org.kiama.example.iswim.secd.BooleanOps.PushFalse
6207 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.toString(): String
3347 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.copy(): org.kiama.example.iswim.secd.RecordOps.UnpackRecord
3674 ===> org.kiama.example.iswim.secd.SECDBase.PushType.toString(): String
10290 ===> org.kiama.example.repmin.Fork.<init>(): org.kiama.example.repmin.Fork.type
3125 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.toString(): String
710 ===> org.kiama.example.RISC.RISCISA.DIV.productIterator: Iterator[Any]
9027 ===> org.kiama.example.obr.SPARCTree.LdW.mem: org.kiama.example.obr.SPARCTree.Address
5408 ===> org.kiama.example.oberon0.L0.c.CEqExp.productPrefix: String
10163 ===> org.kiama.example.prolog.SymbolTable.Predicate.<init>(argtypes: List[org.kiama.example.prolog.SymbolTable.Type]): org.kiama.example.prolog.SymbolTable.Predicate
10985 ===> org.kiama.output.Infix.productPrefix: String
7274 ===> org.kiama.example.oberon0.base.source.ModuleDecl.copy$default$2: org.kiama.example.oberon0.base.source.Block @scala.annotation.unchecked.uncheckedVariance
11428 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
9100 ===> org.kiama.example.obr.SPARCTree.RemW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.RemW
7668 ===> org.kiama.example.obr.ObrTree.ForStmt.unapply(x$0: org.kiama.example.obr.ObrTree.ForStmt): Option[(org.kiama.example.obr.ObrTree.Identifier, org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression, List[org.kiama.example.obr.ObrTree.Statement])]
6049 ===> org.kiama.example.oberon0.L0.source.ModExp.productElement(x$1: Int): Any
5620 ===> org.kiama.example.oberon0.L0.c.CDivExp.readResolve(): Object
10294 ===> org.kiama.example.repmin.Fork.readResolve(): Object
2897 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.copy(): org.kiama.example.iswim.secd.ConversionOps.ToInt
39 ===> org.kiama.attribution.AttributionBase.CircularState.CHANGE: Boolean
4543 ===> org.kiama.example.lambda2.AST.Var.unapply(x$0: org.kiama.example.lambda2.AST.Var): Option[org.kiama.example.lambda2.AST.Idn]
1299 ===> org.kiama.example.RISC.RISCISA.RET.productElement(x$1: Int): Any
3615 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.copy(): org.kiama.example.iswim.secd.SECDBase.ResumeFromDump
619 ===> org.kiama.example.RISC.RISCISA.SUB.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
12216 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6050 ===> org.kiama.example.oberon0.L0.source.ModExp.productIterator: Iterator[Any]
5507 ===> org.kiama.example.oberon0.L0.c.CGeExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
5480 ===> org.kiama.example.oberon0.L0.c.CLeExp.readResolve(): Object
3669 ===> org.kiama.example.iswim.secd.SECDBase.PushType.canEqual(x$1: Any): Boolean
5669 ===> org.kiama.example.oberon0.L0.c.CNegExp.productPrefix: String
4423 ===> org.kiama.example.lambda.AST.Lam.x: org.kiama.example.lambda.AST.Idn
3218 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productArity: Int
10045 ===> org.kiama.example.prolog.PrologTree.Rule.productElement(x$1: Int): Any
1899 ===> org.kiama.example.imperative.Generator.arbSeqn: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Seqn]
4110 ===> org.kiama.example.iswim.secd.StackOps.Swap.copy(n: Int,m: Int): org.kiama.example.iswim.secd.StackOps.Swap
4643 ===> org.kiama.example.lambda2.AST.Letp.<init>(): org.kiama.example.lambda2.AST.Letp.type
1309 ===> org.kiama.example.RISC.RISCISA.Pseudo.<init>(): org.kiama.example.RISC.RISCISA.Pseudo
1597 ===> org.kiama.example.imperative.AST.Var.copy(s: org.kiama.example.imperative.AST.Idn): org.kiama.example.imperative.AST.Var
10465 ===> org.kiama.example.til.AST.For.hashCode(): Int
3050 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.toString(): String
9887 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.declAAb: org.kiama.example.picojava.AbstractSyntax.VarDecl
7765 ===> org.kiama.example.obr.ObrTree.TryStmt.copy$default$1: org.kiama.example.obr.ObrTree.TryBody @scala.annotation.unchecked.uncheckedVariance
2706 ===> org.kiama.example.iswim.compiler.Syntax.Val.canEqual(x$1: Any): Boolean
10467 ===> org.kiama.example.til.AST.For.equals(x$1: Any): Boolean
3073 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.apply(): HeapOps.this.RefValue
5680 ===> org.kiama.example.oberon0.L0.c.CNegExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CNegExp): Option[org.kiama.example.oberon0.base.c.CExpression]
597 ===> org.kiama.example.RISC.RISCISA.ADDI.toString(): String
4405 ===> org.kiama.example.lambda.AST.Num.readResolve(): Object
206 ===> org.kiama.attribution.AttributionTests.EitherTree.hashCode(): Int
3658 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.apply(me: org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue): org.kiama.example.iswim.secd.SECDBase.PushMachineException
3444 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.CodeSegment): Option[org.kiama.example.iswim.secd.SECDBase.Code]
11020 ===> org.kiama.output.PrettyPrinterBase.pretty(p: PrettyPrinterBase.this.PrettyPrintable): PrettyPrinterBase.this.Layout
5468 ===> org.kiama.example.oberon0.L0.c.CLeExp.productPrefix: String
3948 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productIterator: Iterator[Any]
9214 ===> org.kiama.example.obr.SymbolTable.Entity.isconst: Boolean
9679 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productArity: Int
3229 ===> org.kiama.example.iswim.secd.IntegerOps.Div.readResolve(): Object
1704 ===> org.kiama.example.imperative.AST.Div.copy(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Div
918 ===> org.kiama.example.RISC.RISCISA.ORI.<init>(): org.kiama.example.RISC.RISCISA.ORI.type
12106 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8631 ===> org.kiama.example.obr.RISCTree.Local.canEqual(x$1: Any): Boolean
10154 ===> org.kiama.example.prolog.SemanticAnalysis.tipe: org.kiama.example.prolog.PrologTree.Term => org.kiama.example.prolog.SymbolTable.Type
5642 ===> org.kiama.example.oberon0.L0.c.CAndExp.right: org.kiama.example.oberon0.base.c.CExpression
5190 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
4762 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5034 ===> org.kiama.example.lambda3.AST.Query.execute: Query.this.T
7894 ===> org.kiama.example.obr.ObrTree.GreaterExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.GreaterExp
1103 ===> org.kiama.example.RISC.RISCISA.RD.<init>(): org.kiama.example.RISC.RISCISA.RD.type
6052 ===> org.kiama.example.oberon0.L0.source.ModExp.hashCode(): Int
1898 ===> org.kiama.example.imperative.Generator.genSeqn(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Seqn]
12090 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10137 ===> org.kiama.example.prolog.PrologTree.Cut.equals(x$1: Any): Boolean
8255 ===> org.kiama.example.obr.RISCTree.Jmp.toString(): String
806 ===> org.kiama.example.RISC.RISCISA.CMPI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
6532 ===> org.kiama.example.oberon0.L3.c.CVoidType.productIterator: Iterator[Any]
7582 ===> org.kiama.example.obr.ObrTree.IntConst.productPrefix: String
10148 ===> org.kiama.example.prolog.SemanticAnalysis.env: org.kiama.example.prolog.PrologTree.SourceNode => org.kiama.example.prolog.SymbolTable.Environment
5985 ===> org.kiama.example.oberon0.L0.source.OrExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
10087 ===> org.kiama.example.prolog.PrologTree.Integer.toString(): String
3799 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.apply(): org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue
6246 ===> org.kiama.example.oberon0.L1.source.IfStatement.canEqual(x$1: Any): Boolean
747 ===> org.kiama.example.RISC.RISCISA.MOD.toString(): String
7591 ===> org.kiama.example.obr.ObrTree.IntConst.toString(): String
1009 ===> org.kiama.example.RISC.RISCISA.POP.im: org.kiama.example.RISC.RISCISA.Imm
8639 ===> org.kiama.example.obr.RISCTree.Local.readResolve(): Object
2306 ===> org.kiama.example.iswim.compiler.Syntax.Or.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
481 ===> org.kiama.example.RISC.RISC.memory(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
12233 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.genDoubleNeg(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Neg]
320 ===> org.kiama.attribution.AttributionTests.QuadTree.productPrefix: String
7636 ===> org.kiama.example.obr.ObrTree.ExitStmt.productElement(x$1: Int): Any
657 ===> org.kiama.example.RISC.RISCISA.MUL.b: org.kiama.example.RISC.RISCISA.RegNo
11055 ===> org.kiama.output.PrettyPrinterBase.hsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
7012 ===> org.kiama.example.oberon0.base.Driver.checkargs(args: Array[String],emitter: org.kiama.util.Emitter): Array[String]
2119 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Remainder
2164 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.canEqual(x$1: Any): Boolean
9526 ===> org.kiama.example.oneohonecompanies.Company.Employee.productElement(x$1: Int): Any
10339 ===> org.kiama.example.til.AST.Program.copy(ss: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.Program
416 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productIterator: Iterator[Any]
6340 ===> org.kiama.example.oberon0.L2.source.CaseStatement.hashCode(): Int
12259 ===> org.kiama.util.CompilerBase.checkargs(args: Array[String],emitter: org.kiama.util.Emitter): Array[String]
9407 ===> org.kiama.example.obr.SymbolTable.EnumTypes.<init>(): org.kiama.example.obr.SymbolTable.EnumTypes.type
8083 ===> org.kiama.example.obr.ObrTree.OrExp.canEqual(x$1: Any): Boolean
9343 ===> org.kiama.example.obr.SymbolTable.ArrayType.readResolve(): Object
8026 ===> org.kiama.example.obr.ObrTree.NegExp.productElement(x$1: Int): Any
11809 ===> org.kiama.rewriting.RewriterTests.Same.hashCode(): Int
1718 ===> org.kiama.example.imperative.AST.Div.unapply(x$0: org.kiama.example.imperative.AST.Div): Option[(org.kiama.example.imperative.AST.Exp, org.kiama.example.imperative.AST.Exp)]
7699 ===> org.kiama.example.obr.ObrTree.LoopStmt.canEqual(x$1: Any): Boolean
3624 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.<init>(): org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.type
2419 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productIterator: Iterator[Any]
1916 ===> org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.compiler.Syntax.Binding,org.kiama.example.iswim.secd.SECDBase.FunctionSpec] with Serializable
7761 ===> org.kiama.example.obr.ObrTree.TryStmt.body: org.kiama.example.obr.ObrTree.TryBody
11701 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1762 ===> org.kiama.example.imperative.AST.Asgn.productPrefix: String
8444 ===> org.kiama.example.obr.RISCTree.CmpltW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
1920 ===> org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.compiler.Syntax.Binding, B1 >: org.kiama.example.iswim.secd.SECDBase.FunctionSpec](x$1: A1,default: A1 => B1): B1
2946 ===> org.kiama.example.iswim.secd.ConversionOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
10165 ===> org.kiama.example.prolog.SymbolTable.Predicate.copy$default$1: List[org.kiama.example.prolog.SymbolTable.Type] @scala.annotation.unchecked.uncheckedVariance
8116 ===> org.kiama.example.obr.ObrTree.SlashExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
5554 ===> org.kiama.example.oberon0.L0.c.CSubExp.toString(): String
582 ===> org.kiama.example.RISC.RISCISA.ADD.productArity: Int
4145 ===> org.kiama.example.iswim.secd.StringOps.PushString.toString(): String
12359 ===> org.kiama.util.Environments.isDefinedInEnv(env: Environments.this.Environment,i: String): Boolean
2281 ===> org.kiama.example.iswim.compiler.Syntax.Not.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Not): Option[org.kiama.example.iswim.compiler.Syntax.Expr]
2970 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.copy$default$3: org.kiama.example.iswim.secd.SECDBase.Code @scala.annotation.unchecked.uncheckedVariance
3988 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productPrefix: String
6549 ===> org.kiama.example.oberon0.L3.c.CAddrType.productIterator: Iterator[Any]
3578 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.equals(x$1: Any): Boolean
1648 ===> org.kiama.example.imperative.AST.Add.productElement(x$1: Int): Any
3623 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.equals(x$1: Any): Boolean
11103 ===> org.kiama.output.PrettyPrinterBase.squote: PrettyPrinterBase.this.Doc
12178 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3919 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.canEqual(x$1: Any): Boolean
3760 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productArity: Int
5290 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.ident: String
8190 ===> org.kiama.example.obr.RISCTree.RISCProg.productPrefix: String
10483 ===> org.kiama.example.til.AST.Read.toString(): String
9035 ===> org.kiama.example.obr.SPARCTree.LdW.canEqual(x$1: Any): Boolean
8413 ===> org.kiama.example.obr.RISCTree.CmpneW.hashCode(): Int
9524 ===> org.kiama.example.oneohonecompanies.Company.Employee.productPrefix: String
1480 ===> org.kiama.example.dataflow.Foreach.copy$default$2: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
9722 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.hashCode(): Int
10881 ===> org.kiama.machine.Machine.ParamUpdater.state: Machine.this.ParamState[T,U]
4690 ===> org.kiama.example.lambda2.AST.FunType.productArity: Int
11403 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.toString(): String
9809 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productArity: Int
1224 ===> org.kiama.example.RISC.RISCISA.BGE.toString(): String
5231 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.equals(x$1: Any): Boolean
11598 ===> org.kiama.rewriting.Rewriter.some(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2245 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.toString(): String
9268 ===> org.kiama.example.obr.SymbolTable.Unknown.equals(x$1: Any): Boolean
4149 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.<init>(): org.kiama.example.iswim.secd.StringOps.StringTypeValue
10194 ===> org.kiama.example.prolog.SymbolTable.Variable.unapply(x$0: org.kiama.example.prolog.SymbolTable.Variable): Option[org.kiama.example.prolog.SymbolTable.Type]
736 ===> org.kiama.example.RISC.RISCISA.DIVI.toString(): String
3699 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.canEqual(x$1: Any): Boolean
10311 ===> org.kiama.example.repmin.Leaf.readResolve(): Object
4971 ===> org.kiama.example.lambda3.AST.Num.productIterator: Iterator[Any]
3639 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.<init>(): org.kiama.example.iswim.secd.SECDBase.PushEmpty.type
7131 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.canEqual(x$1: Any): Boolean
1185 ===> org.kiama.example.RISC.RISCISA.BNE.productArity: Int
5118 ===> org.kiama.example.lambda3.AST.SubstQuery.copy$default$2: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
6607 ===> org.kiama.example.oberon0.L3.c.CAddrExp.toString(): String
3455 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.copy$default$2: org.kiama.example.iswim.secd.SECDBase.Name @scala.annotation.unchecked.uncheckedVariance
9370 ===> org.kiama.example.obr.SymbolTable.RecordTypes.canEqual(x$1: Any): Boolean
1860 ===> org.kiama.example.imperative.ASTNonCase.Add.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Add
5977 ===> org.kiama.example.oberon0.L0.source.SubExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.SubExp
11497 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
12564 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productPrefix: String
3007 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.<init>(): org.kiama.example.iswim.secd.HeapOps.Alloc.type
7727 ===> org.kiama.example.obr.ObrTree.WhileStmt.<init>(cond: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.WhileStmt
7574 ===> org.kiama.example.obr.ObrTree.EnumConst.unapply(x$0: org.kiama.example.obr.ObrTree.EnumConst): Option[org.kiama.example.obr.ObrTree.Identifier]
8797 ===> org.kiama.example.obr.SPARCTree.LabelDef.canEqual(x$1: Any): Boolean
1194 ===> org.kiama.example.RISC.RISCISA.BNE.unapply(x$0: org.kiama.example.RISC.RISCISA.BNE): Option[Int]
97 ===> org.kiama.attribution.Attribution.$anon.optName: Option[String]
2421 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.hashCode(): Int
11880 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4692 ===> org.kiama.example.lambda2.AST.FunType.productIterator: Iterator[Any]
11683 ===> org.kiama.rewriting.Rewriter.ispropersuperterm: Rewriter.this.Strategy
2415 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Binding] @scala.annotation.unchecked.uncheckedVariance
11096 ===> org.kiama.output.PrettyPrinterBase.verticalbar: PrettyPrinterBase.this.Doc
3851 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.readResolve(): Object
8128 ===> org.kiama.example.obr.ObrTree.SlashExp.unapply(x$0: org.kiama.example.obr.ObrTree.SlashExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
8968 ===> org.kiama.example.obr.SPARCTree.CmpgtW.toString(): String
10034 ===> org.kiama.example.prolog.PrologTree.Fact.apply(hd: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.PrologTree.Fact
12073 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3293 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.readResolve(): Object
12207 ===> org.kiama.rewriting.UniplateTests.<init>(): org.kiama.rewriting.UniplateTests
6467 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.copy$default$2: SymbolTable.this.Variable @scala.annotation.unchecked.uncheckedVariance
10904 ===> org.kiama.machine.Machine.ParamUpdate.<init>(s: Machine.this.ParamState[T,U],t: T,u: U): Machine.this.ParamUpdate[T,U]
11785 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
448 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[DynamicAttributionTests.this.Tree,Int] with Serializable
5561 ===> org.kiama.example.oberon0.L0.c.COrExp.left: org.kiama.example.oberon0.base.c.CExpression
12271 ===> org.kiama.util.CompilerTests.makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter): Either[Any,String]
12193 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4791 ===> org.kiama.example.lambda2.Evaluator.FreshVar.<init>(): Evaluator.this.FreshVar.type
10534 ===> org.kiama.example.til.AST.Var.hashCode(): Int
2984 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productIterator: Iterator[Any]
2682 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MkRef
11757 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10014 ===> org.kiama.example.prolog.PrologTree.Program.unapply(x$0: org.kiama.example.prolog.PrologTree.Program): Option[List[org.kiama.example.prolog.PrologTree.Clause]]
12597 ===> org.kiama.util.WhitespacePositionedParserUtilities.handleWhiteSpace(in: WhitespacePositionedParserUtilities.this.Input): Int
6401 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.apply(minvalue: org.kiama.example.oberon0.L0.source.Expression,maxvalue: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L2.source.MinMaxCond
6885 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.hashCode(): Int
4361 ===> org.kiama.example.json.JSONTree.JNull.readResolve(): Object
127 ===> org.kiama.attribution.UncachedAttribution.UncachedParamAttribute.$anon.apply(t: T): U
8157 ===> org.kiama.example.obr.RISCEncoder.firsttemp: Int(1)
3705 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.apply(): org.kiama.example.iswim.secd.SECDBase.RaiseException
5748 ===> org.kiama.example.oberon0.L0.source.VarDecl.productArity: Int
8966 ===> org.kiama.example.obr.SPARCTree.CmpgtW.equals(x$1: Any): Boolean
10205 ===> org.kiama.example.prolog.SymbolTable.AtomType.hashCode(): Int
9626 ===> org.kiama.example.picojava.AbstractSyntax.Program.toString(): String
4286 ===> org.kiama.example.json.JSONTree.JString.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
1534 ===> org.kiama.example.dataflow.DataflowForTests.s1: org.kiama.example.dataflow.DataflowAST.Assign
3714 ===> org.kiama.example.iswim.secd.SECDBase.GetType.canEqual(x$1: Any): Boolean
1148 ===> org.kiama.example.RISC.RISCISA.WRL.productIterator: Iterator[Any]
2464 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.readResolve(): Object
1867 ===> org.kiama.example.imperative.ASTNonCase.Mul.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
3973 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.readResolve(): Object
9066 ===> org.kiama.example.obr.SPARCTree.NegW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
10424 ===> org.kiama.example.til.AST.IfElse.toString(): String
5640 ===> org.kiama.example.oberon0.L0.c.CModExp.readResolve(): Object
1573 ===> org.kiama.example.imperative.AST.Num.<init>(d: Double): org.kiama.example.imperative.AST.Num
9009 ===> org.kiama.example.obr.SPARCTree.DivW.readResolve(): Object
1645 ===> org.kiama.example.imperative.AST.Add.copy$default$2: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
5919 ===> org.kiama.example.oberon0.L0.source.GeExp.left: org.kiama.example.oberon0.L0.source.Expression
5885 ===> org.kiama.example.oberon0.L0.source.LeExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
10028 ===> org.kiama.example.prolog.PrologTree.Fact.canEqual(x$1: Any): Boolean
9414 ===> org.kiama.example.obr.SymbolTable.ExnType.toString(): String
2573 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.fields: List[org.kiama.example.iswim.compiler.Syntax.Expr]
2215 ===> org.kiama.example.iswim.compiler.Syntax.Greater.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
315 ===> org.kiama.attribution.AttributionTests.TripleTree.readResolve(): Object
9537 ===> org.kiama.example.oneohonecompanies.Company.SubUnit.<init>(): org.kiama.example.oneohonecompanies.Company.SubUnit
921 ===> org.kiama.example.RISC.RISCISA.ORI.unapply(x$0: org.kiama.example.RISC.RISCISA.ORI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
3558 ===> org.kiama.example.iswim.secd.SECDBase.Exit.canEqual(x$1: Any): Boolean
7984 ===> org.kiama.example.obr.ObrTree.MinusExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.MinusExp
1579 ===> org.kiama.example.imperative.AST.Num.productArity: Int
11568 ===> org.kiama.rewriting.Rewriter.term(t: Rewriter.this.Term): Rewriter.this.Strategy
11685 ===> org.kiama.rewriting.Rewriter.leaves(s: => Rewriter.this.Strategy,isleaf: => Rewriter.this.Strategy): Rewriter.this.Strategy
6999 ===> org.kiama.example.oberon0.base.Driver.printastFlag_$eq(x$1: Boolean): Unit
7594 ===> org.kiama.example.obr.ObrTree.IntConst.readResolve(): Object
10326 ===> org.kiama.example.repmin.RepminDecTests.<init>(): org.kiama.example.repmin.RepminDecTests
6336 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productArity: Int
8665 ===> org.kiama.example.obr.RISCTree.Label.productElement(x$1: Int): Any
8421 ===> org.kiama.example.obr.RISCTree.CmpgtW.l: org.kiama.example.obr.RISCTree.Datum
5659 ===> org.kiama.example.oberon0.L0.c.CAndExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CAndExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
5253 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.unapply(x$0: SymbolTable.this.Variable): Option[(String, org.kiama.example.oberon0.L0.source.TypeDef)]
9986 ===> org.kiama.example.prolog.InterpreterTests.<init>(): org.kiama.example.prolog.InterpreterTests
6984 ===> org.kiama.example.oberon0.L4.source.PrettyPrinter.$init$(): Unit
9173 ===> org.kiama.example.obr.SPARCTree.Label.<init>(num: Int): org.kiama.example.obr.SPARCTree.Label
10540 ===> org.kiama.example.til.AST.Var.unapply(x$0: org.kiama.example.til.AST.Var): Option[org.kiama.example.til.AST.Id]
4795 ===> org.kiama.example.lambda2.Evaluator.substitute(x: org.kiama.example.lambda2.AST.Idn,e2: org.kiama.example.lambda2.AST.Exp,e1: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Exp
8798 ===> org.kiama.example.obr.SPARCTree.LabelDef.hashCode(): Int
8078 ===> org.kiama.example.obr.ObrTree.OrExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
5158 ===> org.kiama.example.lambda3.Lambda.prompt: String
3367 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.canEqual(x$1: Any): Boolean
5279 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productArity: Int
8879 ===> org.kiama.example.obr.SPARCTree.AddW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
3470 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.fss: List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec]
751 ===> org.kiama.example.RISC.RISCISA.MOD.productElement(x$1: Int): Any
4321 ===> org.kiama.example.json.JSONTree.JTrue.productElement(x$1: Int): Any
1401 ===> org.kiama.example.dataflow.DataflowAST.While.toString(): String
11800 ===> org.kiama.rewriting.RewriterTests.Equal.hashCode(): Int
3756 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.readResolve(): Object
215 ===> org.kiama.attribution.AttributionTests.ListTree.<init>(l: List[AttributionTests.this.Tree]): AttributionTests.this.ListTree
7721 ===> org.kiama.example.obr.ObrTree.ReturnStmt.toString(): String
10777 ===> org.kiama.example.transform.AST.BinExpR.toString(): String
9154 ===> org.kiama.example.obr.SPARCTree.Indexed.offset: org.kiama.example.obr.SPARCTree.Datum
7876 ===> org.kiama.example.obr.ObrTree.FieldExp.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
3577 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.toString(): String
6113 ===> org.kiama.example.oberon0.L0.source.NotExp.toString(): String
1058 ===> org.kiama.example.RISC.RISCISA.STB.productPrefix: String
6904 ===> org.kiama.example.oberon0.L4.source.IndexExp.hashCode(): Int
2531 ===> org.kiama.example.iswim.compiler.Syntax.While.productIterator: Iterator[Any]
9054 ===> org.kiama.example.obr.SPARCTree.MulW.canEqual(x$1: Any): Boolean
229 ===> org.kiama.attribution.AttributionTests.ListTree.unapply(x$0: AttributionTests.this.ListTree): Option[List[AttributionTests.this.Tree]]
2827 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.readResolve(): Object
8528 ===> org.kiama.example.obr.RISCTree.MulW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.MulW
61 ===> org.kiama.attribution.AttributionBase.$anon.optName: Option[String]
10698 ===> org.kiama.example.til.TIL2_1.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6790 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productPrefix: String
473 ===> org.kiama.example.RISC.RISC.Mem: RISC.this.ParamState[Int,Int]
1679 ===> org.kiama.example.imperative.AST.Mul.l: org.kiama.example.imperative.AST.Exp
8881 ===> org.kiama.example.obr.SPARCTree.AddW.productPrefix: String
5193 ===> org.kiama.example.oberon0.L0.NameAnalyser.rootconstexpDef: org.kiama.example.oberon0.L0.source.Expression => Boolean
1132 ===> org.kiama.example.RISC.RISCISA.WRH.productElement(x$1: Int): Any
8044 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productArity: Int
11849 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2597 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productIterator: Iterator[Any]
6445 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.<init>(ident: String,decl: org.kiama.example.oberon0.L3.source.ProcDecl): SymbolTable.this.Procedure
10490 ===> org.kiama.example.til.AST.Write.e: org.kiama.example.til.AST.Exp
8851 ===> org.kiama.example.obr.SPARCTree.StW.equals(x$1: Any): Boolean
1178 ===> org.kiama.example.RISC.RISCISA.BEQ.unapply(x$0: org.kiama.example.RISC.RISCISA.BEQ): Option[Int]
1012 ===> org.kiama.example.RISC.RISCISA.POP.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.POP
7388 ===> org.kiama.example.oberon0.drivers.A3Phases.langlevel: Int
1068 ===> org.kiama.example.RISC.RISCISA.STB.unapply(x$0: org.kiama.example.RISC.RISCISA.STB): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
2542 ===> org.kiama.example.iswim.compiler.Syntax.Block.<init>(es: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Block
6684 ===> org.kiama.example.oberon0.L3.source.ValMode.toString(): String
1524 ===> org.kiama.example.dataflow.For.readResolve(): Object
10119 ===> org.kiama.example.prolog.PrologTree.Pred.productIterator: Iterator[Any]
10246 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productElement(x$1: Int): Any
3929 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.copy(): org.kiama.example.iswim.secd.SECDBase.MatchError
1520 ===> org.kiama.example.dataflow.For.<init>(): org.kiama.example.dataflow.For.type
1540 ===> org.kiama.example.dataflow.DataflowForTests.s4: org.kiama.example.dataflow.Foreach
4812 ===> org.kiama.example.lambda2.Lambda.setup(args: Array[String]): Boolean
2158 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
11579 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
7979 ===> org.kiama.example.obr.ObrTree.LessExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.LessExp
11553 ===> org.kiama.rewriting.Rewriter.query[T](f: org.kiama.==>[Rewriter.this.Term,T]): Rewriter.this.Strategy
611 ===> org.kiama.example.RISC.RISCISA.ADDI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ADDI
9843 ===> org.kiama.example.picojava.PredefinedTypes.<init>(): org.kiama.example.picojava.PredefinedTypes.type
12117 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10813 ===> org.kiama.example.transform.AST.BinExp.productIterator: Iterator[Any]
7480 ===> org.kiama.example.obr.ObrTree.IntParam.<init>(): org.kiama.example.obr.ObrTree.IntParam.type
11936 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10220 ===> org.kiama.example.prolog.SymbolTable.IntegerType.hashCode(): Int
1095 ===> org.kiama.example.RISC.RISCISA.RD.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
879 ===> org.kiama.example.RISC.RISCISA.ANDI.unapply(x$0: org.kiama.example.RISC.RISCISA.ANDI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
7838 ===> org.kiama.example.obr.ObrTree.BoolExp.copy(value: Boolean): org.kiama.example.obr.ObrTree.BoolExp
8862 ===> org.kiama.example.obr.SPARCTree.Write.productArity: Int
3762 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productIterator: Iterator[Any]
3020 ===> org.kiama.example.iswim.secd.HeapOps.Get.toString(): String
10891 ===> org.kiama.machine.Machine.ParamState.apply(t: T): Machine.this.ParamUpdater[T,U]
3922 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.<init>(): org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.type
12057 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12390 ===> org.kiama.util.Messaging.Record.toString(): String
2098 ===> org.kiama.example.iswim.compiler.Syntax.Divide.r: org.kiama.example.iswim.compiler.Syntax.Expr
7279 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productIterator: Iterator[Any]
8406 ===> org.kiama.example.obr.RISCTree.CmpneW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
4937 ===> org.kiama.example.lambda2.Reduce.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9155 ===> org.kiama.example.obr.SPARCTree.Indexed.<init>(base: org.kiama.example.obr.SPARCTree.Local,offset: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Indexed
7380 ===> org.kiama.example.oberon0.drivers.A2bPhases.$init$(): Unit
9751 ===> org.kiama.example.picojava.AbstractSyntax.Dot.ObjectReference: org.kiama.example.picojava.AbstractSyntax.Access
9231 ===> org.kiama.example.obr.SymbolTable.Variable.toString(): String
1931 ===> org.kiama.example.iswim.compiler.Parser.Pos.productElement(x$1: Int): Any
10710 ===> org.kiama.example.til.TIL2_2.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10116 ===> org.kiama.example.prolog.PrologTree.Pred.productPrefix: String
2806 ===> org.kiama.example.iswim.secd.BooleanOps.Test.toString(): String
8214 ===> org.kiama.example.obr.RISCTree.Beq.canEqual(x$1: Any): Boolean
3110 ===> org.kiama.example.iswim.secd.IOOps.Read.readResolve(): Object
6985 ===> org.kiama.example.oberon0.L4.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
277 ===> org.kiama.attribution.AttributionTests.MapTree.<init>(): AttributionTests.this.MapTree.type
7980 ===> org.kiama.example.obr.ObrTree.LessExp.unapply(x$0: org.kiama.example.obr.ObrTree.LessExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
4787 ===> org.kiama.example.lambda2.EagerSubstEvaluator.<init>(): org.kiama.example.lambda2.EagerSubstEvaluator
5916 ===> org.kiama.example.oberon0.L0.source.GtExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.GtExp
6297 ===> org.kiama.example.oberon0.L2.Parser.statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
10837 ===> org.kiama.example.transform.AST.Num.toString(): String
4671 ===> org.kiama.example.lambda2.AST.IntType.productArity: Int
1729 ===> org.kiama.example.imperative.AST.Null.hashCode(): Int
6525 ===> org.kiama.example.oberon0.L3.TypeAnalyser.idntypeDef: org.kiama.example.oberon0.base.source.IdnUse => TypeAnalyser.this.Type
9167 ===> org.kiama.example.obr.SPARCTree.Indexed.<init>(): org.kiama.example.obr.SPARCTree.Indexed.type
4101 ===> org.kiama.example.iswim.secd.StackOps.Dup.equals(x$1: Any): Boolean
8094 ===> org.kiama.example.obr.ObrTree.PlusExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.PlusExp
353 ===> org.kiama.attribution.AttributionTests.$anon.<init>(): org.kiama.==>[AttributionTests.this.Tree,Int]
6405 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
7579 ===> org.kiama.example.obr.ObrTree.IntConst.copy(idn: org.kiama.example.obr.ObrTree.Identifier,value: Int): org.kiama.example.obr.ObrTree.IntConst
11409 ===> org.kiama.rewriting.PositionedRewriterTests.<init>(): org.kiama.rewriting.PositionedRewriterTests
3070 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.canEqual(x$1: Any): Boolean
12217 ===> org.kiama.rewriting.UniplateTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.example.imperative.AST.Idn] with Serializable
10067 ===> org.kiama.example.prolog.PrologTree.Var.hashCode(): Int
6452 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productIterator: Iterator[Any]
4400 ===> org.kiama.example.lambda.AST.Num.equals(x$1: Any): Boolean
12119 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8362 ===> org.kiama.example.obr.RISCTree.Cond.cond: org.kiama.example.obr.RISCTree.Datum
1364 ===> org.kiama.example.dataflow.Dataflow.<init>(): org.kiama.example.dataflow.Dataflow.type
276 ===> org.kiama.attribution.AttributionTests.MapTree.equals(x$1: Any): Boolean
11215 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productIterator: Iterator[Any]
9085 ===> org.kiama.example.obr.SPARCTree.Not.productArity: Int
9577 ===> org.kiama.example.oneohonecompanies.Depth.<init>(): org.kiama.example.oneohonecompanies.Depth.type
9335 ===> org.kiama.example.obr.SymbolTable.ArrayType.productIterator: Iterator[Any]
6033 ===> org.kiama.example.oberon0.L0.source.DivExp.hashCode(): Int
4002 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.<init>(pn: org.kiama.example.iswim.secd.SECDBase.Name,bdy: org.kiama.example.iswim.secd.SECDBase.Code,envir: SECDBase.this.Environment): SECDBase.this.ClosureValue
1693 ===> org.kiama.example.imperative.AST.Mul.equals(x$1: Any): Boolean
5592 ===> org.kiama.example.oberon0.L0.c.CMulExp.canEqual(x$1: Any): Boolean
9293 ===> org.kiama.example.obr.SymbolTable.Type.storage: Int
12413 ===> org.kiama.util.Messaging.resetmessages(): Unit
8459 ===> org.kiama.example.obr.RISCTree.DivW.l: org.kiama.example.obr.RISCTree.Datum
2658 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.toString(): String
7875 ===> org.kiama.example.obr.ObrTree.FieldExp.copy(idn: org.kiama.example.obr.ObrTree.Identifier,field: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.FieldExp
8501 ===> org.kiama.example.obr.RISCTree.LdW.productElement(x$1: Int): Any
5535 ===> org.kiama.example.oberon0.L0.c.CAddExp.equals(x$1: Any): Boolean
7268 ===> org.kiama.example.oberon0.base.source.ModuleDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
4163 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.readResolve(): Object
3728 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.copy(): org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue
593 ===> org.kiama.example.RISC.RISCISA.ADDI.a: org.kiama.example.RISC.RISCISA.RegNo
5585 ===> org.kiama.example.oberon0.L0.c.CMulExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CMulExp
5744 ===> org.kiama.example.oberon0.L0.source.VarDecl.copy(idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L0.source.VarDecl
3864 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.apply(): org.kiama.example.iswim.secd.SECDBase.TypeError
11101 ===> org.kiama.output.PrettyPrinterBase.dquote: PrettyPrinterBase.this.Doc
11645 ===> org.kiama.rewriting.Rewriter.topdownS(s: => Rewriter.this.Strategy,stop: => Rewriter.this.Strategy => Rewriter.this.Strategy): Rewriter.this.Strategy
5703 ===> org.kiama.example.oberon0.L0.c.CIdnExp.copy(i: String): org.kiama.example.oberon0.L0.c.CIdnExp
3482 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.equals(x$1: Any): Boolean
3447 ===> org.kiama.example.iswim.secd.SECDBase.toCodeSegment(bcb: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase): org.kiama.example.iswim.secd.SECDBase.CodeSegment
5976 ===> org.kiama.example.oberon0.L0.source.SubExp.toString(): String
12496 ===> org.kiama.util.ParserUtilitiesTests.Tup3.equals(x$1: Any): Boolean
4241 ===> org.kiama.example.json.JSONTree.JObject.hashCode(): Int
9622 ===> org.kiama.example.picojava.AbstractSyntax.Program.hashCode(): Int
169 ===> org.kiama.attribution.AttributionTests.Leaf.productElement(x$1: Int): Any
4542 ===> org.kiama.example.lambda2.AST.Var.apply(i: org.kiama.example.lambda2.AST.Idn): org.kiama.example.lambda2.AST.Var
7059 ===> org.kiama.example.oberon0.base.Translator.translate(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.c.CProgram
7115 ===> org.kiama.example.oberon0.base.c.CVarDecl.toString(): String
10112 ===> org.kiama.example.prolog.PrologTree.Pred.toString(): String
4173 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productElement(x$1: Int): Any
10730 ===> org.kiama.example.transform.AST.Program.copy$default$2: List[org.kiama.example.transform.AST.VarDecl] @scala.annotation.unchecked.uncheckedVariance
11275 ===> org.kiama.rewriting.NominalAST.Name.readResolve(): Object
12294 ===> org.kiama.util.FileConsole.<init>(filename: String): org.kiama.util.FileConsole
485 ===> org.kiama.example.RISC.RISCISA.sayReg(reg: org.kiama.example.RISC.RISCISA.RegNo): String
8973 ===> org.kiama.example.obr.SPARCTree.CmpltW.r: org.kiama.example.obr.SPARCTree.Datum
7215 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productIterator: Iterator[Any]
7134 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.equals(x$1: Any): Boolean
7422 ===> org.kiama.example.obr.TreeTestDriver.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Unit] with Serializable
1307 ===> org.kiama.example.RISC.RISCISA.RET.unapply(x$0: org.kiama.example.RISC.RISCISA.RET): Option[org.kiama.example.RISC.RISCISA.RegNo]
2759 ===> org.kiama.example.iswim.driver.SECD.primTable: Map[org.kiama.example.iswim.secd.SECDBase.Name,org.kiama.example.iswim.secd.SECDBase.Value]
6089 ===> org.kiama.example.oberon0.L0.source.NegExp.productArity: Int
5970 ===> org.kiama.example.oberon0.L0.source.SubExp.productIterator: Iterator[Any]
9151 ===> org.kiama.example.obr.SPARCTree.Local.unapply(x$0: org.kiama.example.obr.SPARCTree.Local): Option[Int]
6218 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productArity: Int
8932 ===> org.kiama.example.obr.SPARCTree.CmpeqW.unapply(x$0: org.kiama.example.obr.SPARCTree.CmpeqW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
1258 ===> org.kiama.example.RISC.RISCISA.BGT.unapply(x$0: org.kiama.example.RISC.RISCISA.BGT): Option[Int]
3815 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.PrimTypeValue): Boolean
11009 ===> org.kiama.output.PrettyPrinterBase.$init$(): Unit
11303 ===> org.kiama.rewriting.NominalRewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[NominalRewriter.this.Term,NominalRewriter.this.Term] with Serializable
8096 ===> org.kiama.example.obr.ObrTree.PlusExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
5747 ===> org.kiama.example.oberon0.L0.source.VarDecl.productPrefix: String
3679 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.copy(): org.kiama.example.iswim.secd.SECDBase.MkUserException
6459 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.unapply(x$0: SymbolTable.this.Procedure): Option[(String, org.kiama.example.oberon0.L3.source.ProcDecl)]
5527 ===> org.kiama.example.oberon0.L0.c.CAddExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
7398 ===> org.kiama.example.obr.Driver.<init>(): org.kiama.example.obr.Driver
11976 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2505 ===> org.kiama.example.iswim.compiler.Syntax.If.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr,thn: org.kiama.example.iswim.compiler.Syntax.Expr,els: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.If
2033 ===> org.kiama.example.iswim.compiler.Syntax.Negate.toString(): String
1784 ===> org.kiama.example.imperative.AST.While.productElement(x$1: Int): Any
2815 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productPrefix: String
6591 ===> org.kiama.example.oberon0.L3.c.CStrExp.toString(): String
5742 ===> org.kiama.example.oberon0.L0.source.VarDecl.tipe: org.kiama.example.oberon0.L0.source.TypeDef
2371 ===> org.kiama.example.iswim.compiler.Syntax.Let.<init>(): org.kiama.example.iswim.compiler.Syntax.Let.type
386 ===> org.kiama.attribution.Decorators.chain$default$1[T <: org.kiama.attribution.Attributable, U]: (T => U) => org.kiama.==>[T,U] @scala.annotation.unchecked.uncheckedVariance
2078 ===> org.kiama.example.iswim.compiler.Syntax.Times.l: org.kiama.example.iswim.compiler.Syntax.Expr
4626 ===> org.kiama.example.lambda2.AST.Let.apply(i: org.kiama.example.lambda2.AST.Idn,t: org.kiama.example.lambda2.AST.Type,e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Let
6090 ===> org.kiama.example.oberon0.L0.source.NegExp.productElement(x$1: Int): Any
7386 ===> org.kiama.example.oberon0.drivers.A3Phases.$init$(): Unit
366 ===> org.kiama.attribution.Decorators.Chain.productPrefix: String
505 ===> org.kiama.example.RISC.RISCISA.MOV.toString(): String
5943 ===> org.kiama.example.oberon0.L0.source.AddExp.right: org.kiama.example.oberon0.L0.source.Expression
2226 ===> org.kiama.example.iswim.compiler.Syntax.Greater.toString(): String
11576 ===> org.kiama.rewriting.Rewriter.dup[T <: Product](t: T,children: Array[AnyRef]): T
3182 ===> org.kiama.example.iswim.secd.IntegerOps.Add.apply(): org.kiama.example.iswim.secd.IntegerOps.Add
7166 ===> org.kiama.example.oberon0.base.c.CIntType.canEqual(x$1: Any): Boolean
5844 ===> org.kiama.example.oberon0.L0.source.NeExp.right: org.kiama.example.oberon0.L0.source.Expression
10139 ===> org.kiama.example.prolog.PrologTree.Cut.toString(): String
9350 ===> org.kiama.example.obr.SymbolTable.RecordType.productPrefix: String
4984 ===> org.kiama.example.lambda3.AST.Var.copy$default$1: org.kiama.rewriting.NominalAST.Name @scala.annotation.unchecked.uncheckedVariance
6998 ===> org.kiama.example.oberon0.base.Driver.printastFlag: Boolean
1475 ===> org.kiama.example.dataflow.Foreach.cond: org.kiama.example.dataflow.DataflowAST.Var
11153 ===> org.kiama.output.ParenPrettyPrinterTests.<init>(): org.kiama.output.ParenPrettyPrinterTests
2336 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.StringVal): Option[String]
2155 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.r: org.kiama.example.iswim.compiler.Syntax.Expr
676 ===> org.kiama.example.RISC.RISCISA.MUL.readResolve(): Object
3687 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.equals(x$1: Any): Boolean
9856 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.basicAst: org.kiama.example.picojava.AbstractSyntax.ClassDecl
3328 ===> org.kiama.example.iswim.secd.RecordOps.Fields.apply(): org.kiama.example.iswim.secd.RecordOps.Fields
2100 ===> org.kiama.example.iswim.compiler.Syntax.Divide.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Divide
9329 ===> org.kiama.example.obr.SymbolTable.ArrayType.toString(): String
6865 ===> org.kiama.example.oberon0.L4.c.CFieldExp.equals(x$1: Any): Boolean
332 ===> org.kiama.attribution.AttributionTests.QuadTree.readResolve(): Object
10725 ===> org.kiama.example.transform.AST.Program.vars: List[org.kiama.example.transform.AST.VarDecl]
8170 ===> org.kiama.example.obr.RISCTransformation.code: org.kiama.example.obr.ObrTree.ObrInt => org.kiama.example.obr.RISCTree.RISCProg
4966 ===> org.kiama.example.lambda3.AST.Num.copy(i: Int): org.kiama.example.lambda3.AST.Num
1994 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productArity: Int
5754 ===> org.kiama.example.oberon0.L0.source.VarDecl.equals(x$1: Any): Boolean
6561 ===> org.kiama.example.oberon0.L3.c.CCall.<init>(s: String,ps: List[org.kiama.example.oberon0.base.c.CExpression]): org.kiama.example.oberon0.L3.c.CCall
5058 ===> org.kiama.example.lambda3.AST.EvalQuery.copy(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.EvalQuery
4329 ===> org.kiama.example.json.JSONTree.JTrue.apply(): org.kiama.example.json.JSONTree.JTrue
1736 ===> org.kiama.example.imperative.AST.Null.readResolve(): Object
5982 ===> org.kiama.example.oberon0.L0.source.OrExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.OrExp
9102 ===> org.kiama.example.obr.SPARCTree.RemW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
3098 ===> org.kiama.example.iswim.secd.IOOps.Read.productPrefix: String
8316 ===> org.kiama.example.obr.RISCTree.Write.productElement(x$1: Int): Any
6502 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.ident: String
8554 ===> org.kiama.example.obr.RISCTree.Not.productElement(x$1: Int): Any
10078 ===> org.kiama.example.prolog.PrologTree.Integer.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
4846 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.lambda2.AST.Bind,org.kiama.example.lambda2.AST.Exp] with Serializable
10945 ===> org.kiama.output.RightAssoc.productPrefix: String
11673 ===> org.kiama.rewriting.Rewriter.equal: Rewriter.this.Strategy
184 ===> org.kiama.attribution.AttributionTests.Unused.productPrefix: String
10555 ===> org.kiama.example.til.AST.Num.toString(): String
2853 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.canEqual(x$1: Any): Boolean
8280 ===> org.kiama.example.obr.RISCTree.Ret.productElement(x$1: Int): Any
12003 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1267 ===> org.kiama.example.RISC.RISCISA.BR.productIterator: Iterator[Any]
525 ===> org.kiama.example.RISC.RISCISA.MOVI.<init>(): org.kiama.example.RISC.RISCISA.MOVI.type
595 ===> org.kiama.example.RISC.RISCISA.ADDI.im: org.kiama.example.RISC.RISCISA.Imm
11217 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.hashCode(): Int
2788 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.<init>(): org.kiama.example.iswim.secd.BooleanOps.PushFalse.type
2989 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.unapply(x$0: ExceptionHandler.this.ExnContValue): Option[(ExceptionHandler.this.Stack, ExceptionHandler.this.Environment, org.kiama.example.iswim.secd.SECDBase.Code, ExceptionHandler.this.Dump, ExceptionHandler.this.Handler)]
8497 ===> org.kiama.example.obr.RISCTree.LdW.copy(mem: org.kiama.example.obr.RISCTree.Address): org.kiama.example.obr.RISCTree.LdW
5666 ===> org.kiama.example.oberon0.L0.c.CNegExp.op: String
48 ===> org.kiama.attribution.AttributionBase.ParamAttributeKey.node: AnyRef
3813 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.toString(): String
883 ===> org.kiama.example.RISC.RISCISA.OR.c: org.kiama.example.RISC.RISCISA.RegNo
11134 ===> org.kiama.output.PrettyPrinterTests.Val.copy(i: Int): PrettyPrinterTests.this.Val
7334 ===> org.kiama.example.oberon0.base.source.IdnDef.canEqual(x$1: Any): Boolean
10638 ===> org.kiama.example.til.AST.Sub.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
5762 ===> org.kiama.example.oberon0.L0.source.TypeDecl.<init>(idndef: org.kiama.example.oberon0.base.source.IdnDef,tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L0.source.TypeDecl
3300 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.<init>(n: Int): org.kiama.example.iswim.secd.RecordOps.MkRecord
1002 ===> org.kiama.example.RISC.RISCISA.LDB.<init>(): org.kiama.example.RISC.RISCISA.LDB.type
12070 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8863 ===> org.kiama.example.obr.SPARCTree.Write.productElement(x$1: Int): Any
12136 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7800 ===> org.kiama.example.obr.ObrTree.Catch.copy(idn: org.kiama.example.obr.ObrTree.Identifier,stmts: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.Catch
4459 ===> org.kiama.example.lambda.AST.App.unapply(x$0: org.kiama.example.lambda.AST.App): Option[(org.kiama.example.lambda.AST.Exp, org.kiama.example.lambda.AST.Exp)]
5310 ===> org.kiama.example.oberon0.L0.SymbolTable.defenv: SymbolTable.this.Environment
9074 ===> org.kiama.example.obr.SPARCTree.NegW.equals(x$1: Any): Boolean
12457 ===> org.kiama.util.ParserUtilitiesTests.Node.<init>(): ParserUtilitiesTests.this.Node.type
2299 ===> org.kiama.example.iswim.compiler.Syntax.And.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.And
6548 ===> org.kiama.example.oberon0.L3.c.CAddrType.productElement(x$1: Int): Any
1159 ===> org.kiama.example.RISC.RISCISA.Branch.disp: org.kiama.example.RISC.RISCISA.Disp
5847 ===> org.kiama.example.oberon0.L0.source.NeExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
10361 ===> org.kiama.example.til.AST.Decl.productElement(x$1: Int): Any
1933 ===> org.kiama.example.iswim.compiler.Parser.Pos.canEqual(x$1: Any): Boolean
8998 ===> org.kiama.example.obr.SPARCTree.DivW.productArity: Int
5681 ===> org.kiama.example.oberon0.L0.c.CNegExp.readResolve(): Object
6696 ===> org.kiama.example.oberon0.L3.source.FPSection.copy$default$1: org.kiama.example.oberon0.L3.source.Mode @scala.annotation.unchecked.uncheckedVariance
3406 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.toString(): String
10277 ===> org.kiama.example.repmin.Fork.right: org.kiama.example.repmin.Tree
9961 ===> org.kiama.example.prolog.Interpreter.MatchGoal.copy$default$1: org.kiama.example.prolog.PrologTree.Term @scala.annotation.unchecked.uncheckedVariance
2889 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.toString(): String
4754 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12105 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5438 ===> org.kiama.example.oberon0.L0.c.CNeExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNeExp
6808 ===> org.kiama.example.oberon0.L4.TypeAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
12454 ===> org.kiama.util.ParserUtilitiesTests.Node.hashCode(): Int
2455 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productIterator: Iterator[Any]
6463 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.<init>(mode: org.kiama.example.oberon0.L3.source.Mode,varr: SymbolTable.this.Variable): SymbolTable.this.Parameter
8790 ===> org.kiama.example.obr.SPARCTree.LabelDef.<init>(lab: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.LabelDef
3274 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.readResolve(): Object
5969 ===> org.kiama.example.oberon0.L0.source.SubExp.productElement(x$1: Int): Any
11604 ===> org.kiama.rewriting.Rewriter.$anon.someMap[CC[V, W] <: Map[V,W]](t: CC[Rewriter.this.Term,Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term,Rewriter.this.Term],(Rewriter.this.Term, Rewriter.this.Term),CC[Rewriter.this.Term,Rewriter.this.Term]]): Option[CC[Rewriter.this.Term,Rewriter.this.Term]]
6527 ===> org.kiama.example.oberon0.L3.c.CVoidType.<init>(): org.kiama.example.oberon0.L3.c.CVoidType
8084 ===> org.kiama.example.obr.ObrTree.OrExp.hashCode(): Int
783 ===> org.kiama.example.RISC.RISCISA.CMP.c: org.kiama.example.RISC.RISCISA.RegNo
3491 ===> org.kiama.example.iswim.secd.SECDBase.App.productArity: Int
437 ===> org.kiama.attribution.DynamicAttributionTests.Unused.equals(x$1: Any): Boolean
675 ===> org.kiama.example.RISC.RISCISA.MUL.unapply(x$0: org.kiama.example.RISC.RISCISA.MUL): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
4638 ===> org.kiama.example.lambda2.AST.Letp.productIterator: Iterator[Any]
10920 ===> org.kiama.machine.Machine.$lessinit$greater$default$2: org.kiama.util.Emitter @scala.annotation.unchecked.uncheckedVariance
1449 ===> org.kiama.example.dataflow.DataflowAST.Return.productElement(x$1: Int): Any
4430 ===> org.kiama.example.lambda.AST.Lam.productPrefix: String
1107 ===> org.kiama.example.RISC.RISCISA.RD.readResolve(): Object
12043 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11767 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5738 ===> org.kiama.example.oberon0.L0.source.ConstDecl.apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.ConstDecl
3686 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.toString(): String
7145 ===> org.kiama.example.oberon0.base.c.CBlock.copy$default$2: List[org.kiama.example.oberon0.base.c.CStatement] @scala.annotation.unchecked.uncheckedVariance
9788 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl
11544 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
4172 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productArity: Int
12584 ===> org.kiama.util.Positioned.finish: scala.util.parsing.input.Position
2963 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.readResolve(): Object
2372 ===> org.kiama.example.iswim.compiler.Syntax.Let.toString(): String
10501 ===> org.kiama.example.til.AST.Write.equals(x$1: Any): Boolean
7597 ===> org.kiama.example.obr.ObrTree.ExnConst.copy(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.ExnConst
6412 ===> org.kiama.example.oberon0.L3.CCodeGenerator.$init$(): Unit
11816 ===> org.kiama.rewriting.RewriterTests.NotSame.productIterator: Iterator[Any]
6115 ===> org.kiama.example.oberon0.L0.source.NotExp.<init>(): org.kiama.example.oberon0.L0.source.NotExp.type
11726 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1901 ===> org.kiama.example.imperative.Generator.arbAsgn: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Asgn]
6283 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6328 ===> org.kiama.example.oberon0.L2.source.CaseStatement.cases: List[org.kiama.example.oberon0.L2.source.Case]
11529 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.<init>(): Rewriter.this.Strategy
2871 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.<init>(): BooleanOps.this.FalseValue.type
7467 ===> org.kiama.example.obr.ObrTree.IntVar.readResolve(): Object
5998 ===> org.kiama.example.oberon0.L0.source.OrExp.readResolve(): Object
12477 ===> org.kiama.util.ParserUtilitiesTests.Tup2.toString(): String
2383 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productArity: Int
3168 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.PushInt): Option[Int]
327 ===> org.kiama.attribution.AttributionTests.QuadTree.equals(x$1: Any): Boolean
474 ===> org.kiama.example.RISC.RISC.Z: RISC.this.State[Boolean]
6198 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productPrefix: String
6347 ===> org.kiama.example.oberon0.L2.source.CaseStatement.readResolve(): Object
7885 ===> org.kiama.example.obr.ObrTree.FieldExp.equals(x$1: Any): Boolean
12171 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3316 ===> org.kiama.example.iswim.secd.RecordOps.Fields.<init>(): org.kiama.example.iswim.secd.RecordOps.Fields
7150 ===> org.kiama.example.oberon0.base.c.CBlock.canEqual(x$1: Any): Boolean
5838 ===> org.kiama.example.oberon0.L0.source.EqExp.<init>(): org.kiama.example.oberon0.L0.source.EqExp.type
6721 ===> org.kiama.example.oberon0.L3.source.Call.productIterator: Iterator[Any]
10930 ===> org.kiama.machine.MachineTests.MM.s: org.kiama.machine.MachineTests.MM.State[Int]
11277 ===> org.kiama.rewriting.NominalAST.Bind.term: Any
10987 ===> org.kiama.output.Infix.productElement(x$1: Int): Any
11015 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$div$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
4444 ===> org.kiama.example.lambda.AST.App.<init>(l: org.kiama.example.lambda.AST.Exp,r: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.App
1999 ===> org.kiama.example.iswim.compiler.Syntax.Variable.toString(): String
4697 ===> org.kiama.example.lambda2.AST.FunType.<init>(): org.kiama.example.lambda2.AST.FunType.type
4263 ===> org.kiama.example.json.JSONTree.JName.apply(s: String): org.kiama.example.json.JSONTree.JName
9769 ===> org.kiama.example.picojava.AbstractSyntax.Dot.readResolve(): Object
8299 ===> org.kiama.example.obr.RISCTree.StW.productElement(x$1: Int): Any
4390 ===> org.kiama.example.lambda.AST.Num.<init>(i: Int): org.kiama.example.lambda.AST.Num
12255 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8553 ===> org.kiama.example.obr.RISCTree.Not.productArity: Int
545 ===> org.kiama.example.RISC.RISCISA.MVN.equals(x$1: Any): Boolean
9528 ===> org.kiama.example.oneohonecompanies.Company.Employee.canEqual(x$1: Any): Boolean
9635 ===> org.kiama.example.picojava.AbstractSyntax.Block.productArity: Int
4215 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
1488 ===> org.kiama.example.dataflow.Foreach.equals(x$1: Any): Boolean
2535 ===> org.kiama.example.iswim.compiler.Syntax.While.equals(x$1: Any): Boolean
6720 ===> org.kiama.example.oberon0.L3.source.Call.productElement(x$1: Int): Any
7095 ===> org.kiama.example.oberon0.base.c.CInclude.toString(): String
10619 ===> org.kiama.example.til.AST.Add.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
8431 ===> org.kiama.example.obr.RISCTree.CmpgtW.canEqual(x$1: Any): Boolean
4549 ===> org.kiama.example.lambda2.AST.Lam.copy(i: org.kiama.example.lambda2.AST.Idn,t: org.kiama.example.lambda2.AST.Type,e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Lam
4426 ===> org.kiama.example.lambda.AST.Lam.toString(): String
12417 ===> org.kiama.util.ParserUtilities.err(msg: String): ParserUtilities.this.Parser[Nothing]
7468 ===> org.kiama.example.obr.ObrTree.IntParam.idn: org.kiama.example.obr.ObrTree.Identifier
3119 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productPrefix: String
3213 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.Mult): Boolean
7105 ===> org.kiama.example.oberon0.base.c.CVarDecl.copy$default$2: org.kiama.example.oberon0.base.c.CType @scala.annotation.unchecked.uncheckedVariance
9288 ===> org.kiama.example.obr.SymbolTable.Multiple.readResolve(): Object
11316 ===> org.kiama.rewriting.PositionalRewriter.rewriting[T <: PositionalRewriter.this.Term](oldTerm: T,newTerm: T): T
6011 ===> org.kiama.example.oberon0.L0.source.MulExp.productElement(x$1: Int): Any
4203 ===> org.kiama.example.iswim.secd.StringOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
3943 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.message: String
12579 ===> org.kiama.util.Patterns.HasParent.unapply[T <: org.kiama.attribution.Attributable](x: T): Some[(T, org.kiama.attribution.Attributable)]
2647 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.CallCC
1921 ===> org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.compiler.Syntax.Binding): Boolean
5574 ===> org.kiama.example.oberon0.L0.c.COrExp.toString(): String
7282 ===> org.kiama.example.oberon0.base.source.ModuleDecl.toString(): String
12324 ===> org.kiama.util.Environments.MultipleEntity.copy(): Environments.this.MultipleEntity
10939 ===> org.kiama.output.LeftAssoc.productIterator: Iterator[Any]
3439 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.hashCode(): Int
2688 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productIterator: Iterator[Any]
5980 ===> org.kiama.example.oberon0.L0.source.OrExp.left: org.kiama.example.oberon0.L0.source.Expression
4034 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.<init>(): SECDBase.this.PrimValue.type
7661 ===> org.kiama.example.obr.ObrTree.ForStmt.canEqual(x$1: Any): Boolean
11135 ===> org.kiama.output.PrettyPrinterTests.Val.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1796 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
8185 ===> org.kiama.example.obr.RISCTree.RISCNode.<init>(): org.kiama.example.obr.RISCTree.RISCNode
9327 ===> org.kiama.example.obr.SymbolTable.ArrayType.<init>(size: Int): org.kiama.example.obr.SymbolTable.ArrayType
6134 ===> org.kiama.example.oberon0.L0.source.IntExp.apply(v: Int): org.kiama.example.oberon0.L0.source.IntExp
1477 ===> org.kiama.example.dataflow.Foreach.<init>(cond: org.kiama.example.dataflow.DataflowAST.Var,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.Foreach
1417 ===> org.kiama.example.dataflow.DataflowAST.If.canEqual(x$1: Any): Boolean
10981 ===> org.kiama.output.Infix.side: org.kiama.output.Side
4433 ===> org.kiama.example.lambda.AST.Lam.productIterator: Iterator[Any]
7290 ===> org.kiama.example.oberon0.base.source.Block.decls: List[org.kiama.example.oberon0.base.source.Declaration]
3473 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.copy(fss: List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec]): org.kiama.example.iswim.secd.SECDBase.MkClosures
9525 ===> org.kiama.example.oneohonecompanies.Company.Employee.productArity: Int
5583 ===> org.kiama.example.oberon0.L0.c.CMulExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CMulExp
5247 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.canEqual(x$1: Any): Boolean
4747 ===> org.kiama.example.lambda2.AST.SubOp.toString(): String
3397 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.copy$default$1: List[org.kiama.example.iswim.secd.SECDBase.Value] @scala.annotation.unchecked.uncheckedVariance
4274 ===> org.kiama.example.json.JSONTree.JArray.canEqual(x$1: Any): Boolean
3199 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.readResolve(): Object
11132 ===> org.kiama.output.PrettyPrinterTests.Val.i: Int
9484 ===> org.kiama.example.oneohonecompanies.Company.Company.productElement(x$1: Int): Any
5426 ===> org.kiama.example.oberon0.L0.c.CNeExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
12358 ===> org.kiama.util.Environments.isDefinedInScope(scope: Environments.this.Scope,i: String): Boolean
8458 ===> org.kiama.example.obr.RISCTree.CmpltW.readResolve(): Object
6695 ===> org.kiama.example.oberon0.L3.source.FPSection.copy(mode: org.kiama.example.oberon0.L3.source.Mode,idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L3.source.FPSection
7907 ===> org.kiama.example.obr.ObrTree.GreaterExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.GreaterExp
2741 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productIterator: Iterator[Any]
6531 ===> org.kiama.example.oberon0.L3.c.CVoidType.productElement(x$1: Int): Any
9656 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
12326 ===> org.kiama.util.Environments.MultipleEntity.productArity: Int
11079 ===> org.kiama.output.PrettyPrinterBase.exclamation: PrettyPrinterBase.this.Doc
11087 ===> org.kiama.output.PrettyPrinterBase.lparen: PrettyPrinterBase.this.Doc
6511 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productIterator: Iterator[Any]
3891 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.equals(x$1: Any): Boolean
11078 ===> org.kiama.output.PrettyPrinterBase.tilde: PrettyPrinterBase.this.Doc
8366 ===> org.kiama.example.obr.RISCTree.Cond.copy(cond: org.kiama.example.obr.RISCTree.Datum,t: org.kiama.example.obr.RISCTree.Datum,f: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Cond
8343 ===> org.kiama.example.obr.RISCTree.AddW.l: org.kiama.example.obr.RISCTree.Datum
3709 ===> org.kiama.example.iswim.secd.SECDBase.GetType.copy(): org.kiama.example.iswim.secd.SECDBase.GetType
8228 ===> org.kiama.example.obr.RISCTree.Bne.copy$default$2: org.kiama.example.obr.RISCTree.Label @scala.annotation.unchecked.uncheckedVariance
7185 ===> org.kiama.example.oberon0.base.c.CStrType.<init>(): org.kiama.example.oberon0.base.c.CStrType.type
8641 ===> org.kiama.example.obr.RISCTree.Indexed.offset: org.kiama.example.obr.RISCTree.Datum
9766 ===> org.kiama.example.picojava.AbstractSyntax.Dot.toString(): String
10133 ===> org.kiama.example.prolog.PrologTree.Cut.productElement(x$1: Int): Any
502 ===> org.kiama.example.RISC.RISCISA.MOV.hashCode(): Int
8764 ===> org.kiama.example.obr.SPARCTree.Bne.hashCode(): Int
974 ===> org.kiama.example.RISC.RISCISA.LDW.productPrefix: String
11805 ===> org.kiama.rewriting.RewriterTests.Same.productArity: Int
9638 ===> org.kiama.example.picojava.AbstractSyntax.Block.canEqual(x$1: Any): Boolean
11381 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.canEqual(x$1: Any): Boolean
4284 ===> org.kiama.example.json.JSONTree.JString.<init>(value: String): org.kiama.example.json.JSONTree.JString
2845 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
1025 ===> org.kiama.example.RISC.RISCISA.POP.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.POP
10271 ===> org.kiama.example.prolog.Subst.$anon.m: scala.collection.immutable.Map[String,org.kiama.example.prolog.PrologTree.Term]
7578 ===> org.kiama.example.obr.ObrTree.IntConst.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,value: Int): org.kiama.example.obr.ObrTree.IntConst
8042 ===> org.kiama.example.obr.ObrTree.NotEqualExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
8171 ===> org.kiama.example.obr.RISCTransformation.location(n: org.kiama.example.obr.ObrTree.EntityNode): org.kiama.example.obr.RISCTree.Address
5815 ===> org.kiama.example.oberon0.L0.source.Assignment.readResolve(): Object
11585 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
9386 ===> org.kiama.example.obr.SymbolTable.EnumType.productElement(x$1: Int): Any
10065 ===> org.kiama.example.prolog.PrologTree.Var.productIterator: Iterator[Any]
2468 ===> org.kiama.example.iswim.compiler.Syntax.Return.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
11218 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.toString(): String
1047 ===> org.kiama.example.RISC.RISCISA.STW.unapply(x$0: org.kiama.example.RISC.RISCISA.STW): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
10233 ===> org.kiama.example.prolog.SymbolTable.ListType.productIterator: Iterator[Any]
4557 ===> org.kiama.example.lambda2.AST.Lam.canEqual(x$1: Any): Boolean
5323 ===> org.kiama.example.oberon0.L0.TypeAnalyser.idntypeDef: org.kiama.example.oberon0.base.source.IdnUse => TypeAnalyser.this.Type
500 ===> org.kiama.example.RISC.RISCISA.MOV.productIterator: Iterator[Any]
7364 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.blockToDoc$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
8847 ===> org.kiama.example.obr.SPARCTree.StW.productIterator: Iterator[Any]
8217 ===> org.kiama.example.obr.RISCTree.Beq.equals(x$1: Any): Boolean
8070 ===> org.kiama.example.obr.ObrTree.NotExp.apply(exp: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NotExp
11034 ===> org.kiama.output.PrettyPrinterBase.nest$default$2: PrettyPrinterBase.this.Indent @scala.annotation.unchecked.uncheckedVariance
3758 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.copy(): org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue
5383 ===> org.kiama.example.oberon0.L0.c.CAssignment.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
10156 ===> org.kiama.example.prolog.SemanticAnalysis.exptipe_$eq(x$1: org.kiama.example.prolog.PrologTree.Term => org.kiama.example.prolog.SymbolTable.Type): Unit
3896 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.readResolve(): Object
11110 ===> org.kiama.output.PrettyPrinterBase.space: PrettyPrinterBase.this.Doc
11077 ===> org.kiama.output.PrettyPrinterBase.brackets(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
8372 ===> org.kiama.example.obr.RISCTree.Cond.productElement(x$1: Int): Any
2893 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.apply(): org.kiama.example.iswim.secd.ConversionOps.ToString
3178 ===> org.kiama.example.iswim.secd.IntegerOps.Add.toString(): String
2817 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productElement(x$1: Int): Any
4854 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11826 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11439 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
11194 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.canEqual(x$1: Any): Boolean
12096 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
12335 ===> org.kiama.util.Environments.MultipleEntity.apply(): Environments.this.MultipleEntity
11410 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
6456 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.<init>(): SymbolTable.this.Procedure.type
3166 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.toString(): String
7039 ===> org.kiama.example.oberon0.base.TranslatingDriver.processargs(args: List[String]): Boolean
10933 ===> org.kiama.machine.MachineTests.MM.main: Unit
12321 ===> org.kiama.util.Environments.Named.id: String
2224 ===> org.kiama.example.iswim.compiler.Syntax.Greater.equals(x$1: Any): Boolean
5665 ===> org.kiama.example.oberon0.L0.c.CNegExp.priority: Int
7835 ===> org.kiama.example.obr.ObrTree.AndExp.readResolve(): Object
11473 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.unapply(x$0: org.kiama.rewriting.SupportPositionedRewriterTests.One): Option[org.kiama.rewriting.SupportPositionedRewriterTests.Node]
797 ===> org.kiama.example.RISC.RISCISA.CMP.toString(): String
2139 ===> org.kiama.example.iswim.compiler.Syntax.Equal.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
10528 ===> org.kiama.example.til.AST.Var.copy$default$1: org.kiama.example.til.AST.Id @scala.annotation.unchecked.uncheckedVariance
8077 ===> org.kiama.example.obr.ObrTree.OrExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
8314 ===> org.kiama.example.obr.RISCTree.Write.productPrefix: String
11119 ===> org.kiama.output.PrettyPrinter.line(gap: PrettyPrinter.this.Layout): PrettyPrinter.this.Doc
32 ===> org.kiama.attribution.AttributionBase.$init$(): Unit
5932 ===> org.kiama.example.oberon0.L0.source.GeExp.equals(x$1: Any): Boolean
7796 ===> org.kiama.example.obr.ObrTree.TryBody.readResolve(): Object
827 ===> org.kiama.example.RISC.RISCISA.CHKI.productPrefix: String
7401 ===> org.kiama.example.obr.Driver.spillTargetTreeFlag_$eq(x$1: Boolean): Unit
1685 ===> org.kiama.example.imperative.AST.Mul.copy$default$2: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
7500 ===> org.kiama.example.obr.ObrTree.BoolVar.unapply(x$0: org.kiama.example.obr.ObrTree.BoolVar): Option[org.kiama.example.obr.ObrTree.Identifier]
3829 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.canEqual(x$1: Any): Boolean
3132 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.<init>(): org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual
12509 ===> org.kiama.util.ParserUtilitiesTests.Tup4.copy$default$2: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
4298 ===> org.kiama.example.json.JSONTree.JString.unapply(x$0: org.kiama.example.json.JSONTree.JString): Option[String]
3711 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productArity: Int
8995 ===> org.kiama.example.obr.SPARCTree.DivW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
4523 ===> org.kiama.example.lambda2.AST.Num.<init>(): org.kiama.example.lambda2.AST.Num.type
7178 ===> org.kiama.example.oberon0.base.c.CStrType.productArity: Int
2253 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productPrefix: String
2607 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.p: org.kiama.example.iswim.compiler.Syntax.Pattern
1915 ===> org.kiama.example.iswim.compiler.CodeGenerator.$init$(): Unit
2639 ===> org.kiama.example.iswim.compiler.Syntax.Match.equals(x$1: Any): Boolean
8761 ===> org.kiama.example.obr.SPARCTree.Bne.productElement(x$1: Int): Any
11680 ===> org.kiama.rewriting.Rewriter.$anonfun.applyOrElse[A1 <: Rewriter.this.Term, B1 >: Option[Rewriter.this.Term]](x$1: A1,default: A1 => B1): B1
7477 ===> org.kiama.example.obr.ObrTree.IntParam.hashCode(): Int
2072 ===> org.kiama.example.iswim.compiler.Syntax.Minus.equals(x$1: Any): Boolean
1464 ===> org.kiama.example.dataflow.DataflowAST.Empty.productElement(x$1: Int): Any
12295 ===> org.kiama.util.StringConsole.<init>(string: String): org.kiama.util.StringConsole
6478 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.unapply(x$0: SymbolTable.this.Parameter): Option[(org.kiama.example.oberon0.L3.source.Mode, SymbolTable.this.Variable)]
5676 ===> org.kiama.example.oberon0.L0.c.CNegExp.equals(x$1: Any): Boolean
11997 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6829 ===> org.kiama.example.oberon0.L4.c.CRecordType.toString(): String
753 ===> org.kiama.example.RISC.RISCISA.MOD.canEqual(x$1: Any): Boolean
1893 ===> org.kiama.example.imperative.Generator.genDiv(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Div]
7016 ===> org.kiama.example.oberon0.base.Driver.process(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
4530 ===> org.kiama.example.lambda2.AST.Var.copy(i: org.kiama.example.lambda2.AST.Idn): org.kiama.example.lambda2.AST.Var
12529 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n5: ParserUtilitiesTests.this.Node
1188 ===> org.kiama.example.RISC.RISCISA.BNE.canEqual(x$1: Any): Boolean
7524 ===> org.kiama.example.obr.ObrTree.RecordVar.copy(idn: org.kiama.example.obr.ObrTree.Identifier,fields: List[org.kiama.example.obr.ObrTree.Identifier]): org.kiama.example.obr.ObrTree.RecordVar
6032 ===> org.kiama.example.oberon0.L0.source.DivExp.canEqual(x$1: Any): Boolean
5965 ===> org.kiama.example.oberon0.L0.source.SubExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
2498 ===> org.kiama.example.iswim.compiler.Syntax.Apply.apply(f: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Apply
1198 ===> org.kiama.example.RISC.RISCISA.BLT.toString(): String
11540 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
1637 ===> org.kiama.example.imperative.AST.Binary.intadds: Int
1891 ===> org.kiama.example.imperative.Generator.genSub(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Sub]
5444 ===> org.kiama.example.oberon0.L0.c.CLtExp.priority: Int
5725 ===> org.kiama.example.oberon0.L0.source.ConstDecl.copy(idndef: org.kiama.example.oberon0.base.source.IdnDef,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.ConstDecl
2691 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.toString(): String
7736 ===> org.kiama.example.obr.ObrTree.WhileStmt.hashCode(): Int
1457 ===> org.kiama.example.dataflow.DataflowAST.Return.apply(ret: org.kiama.example.dataflow.DataflowAST.Var): org.kiama.example.dataflow.DataflowAST.Return
8985 ===> org.kiama.example.obr.SPARCTree.CmpltW.equals(x$1: Any): Boolean
10580 ===> org.kiama.example.til.AST.Mul.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
3149 ===> org.kiama.example.iswim.secd.IntComparisonOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
11786 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8939 ===> org.kiama.example.obr.SPARCTree.CmpneW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
4897 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4246 ===> org.kiama.example.json.JSONTree.JObject.apply(fields: List[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)]): org.kiama.example.json.JSONTree.JObject
10844 ===> org.kiama.example.transform.AST.Var.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
8663 ===> org.kiama.example.obr.RISCTree.Label.productPrefix: String
613 ===> org.kiama.example.RISC.RISCISA.ADDI.readResolve(): Object
2968 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.copy$default$1: ExceptionHandler.this.Stack @scala.annotation.unchecked.uncheckedVariance
3981 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.d: SECDBase.this.Dump
5244 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productArity: Int
7492 ===> org.kiama.example.obr.ObrTree.BoolVar.productIterator: Iterator[Any]
5854 ===> org.kiama.example.oberon0.L0.source.NeExp.hashCode(): Int
4518 ===> org.kiama.example.lambda2.AST.Num.productIterator: Iterator[Any]
5117 ===> org.kiama.example.lambda3.AST.SubstQuery.copy$default$1: org.kiama.rewriting.NominalAST.Name @scala.annotation.unchecked.uncheckedVariance
6912 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.fields: List[org.kiama.example.oberon0.L4.source.FieldList]
129 ===> org.kiama.attribution.UncachedAttribution.$anon.<init>(): UncachedAttribution.this.UncachedAttribute[T,U]{}
11939 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4408 ===> org.kiama.example.lambda.AST.Var.toString(): String
6783 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.ident: String
9191 ===> org.kiama.example.obr.SPARCTree.lastlab_$eq(x$1: Int): Unit
7374 ===> org.kiama.example.oberon0.drivers.A2aPhases.$init$(): Unit
2243 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.equals(x$1: Any): Boolean
8572 ===> org.kiama.example.obr.RISCTree.RemW.productArity: Int
11746 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Int] with Serializable
4833 ===> org.kiama.example.lambda2.LambdaTests.assertEvalAll(term: String,result1: org.kiama.example.lambda2.AST.Exp,result2: org.kiama.example.lambda2.AST.Exp): Unit
3976 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.c: org.kiama.example.iswim.secd.SECDBase.Code
10514 ===> org.kiama.example.til.AST.Id.productArity: Int
12138 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
6707 ===> org.kiama.example.oberon0.L3.source.FPSection.<init>(): org.kiama.example.oberon0.L3.source.FPSection.type
8416 ===> org.kiama.example.obr.RISCTree.CmpneW.<init>(): org.kiama.example.obr.RISCTree.CmpneW.type
11835 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9674 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.<init>(Type: org.kiama.example.picojava.AbstractSyntax.Access,Name: String): org.kiama.example.picojava.AbstractSyntax.VarDecl
5735 ===> org.kiama.example.oberon0.L0.source.ConstDecl.equals(x$1: Any): Boolean
5372 ===> org.kiama.example.oberon0.L0.c.CTypeDef.toString(): String
4947 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
673 ===> org.kiama.example.RISC.RISCISA.MUL.toString(): String
6614 ===> org.kiama.example.oberon0.L3.c.CDerefExp.exp: org.kiama.example.oberon0.base.c.CExpression
8944 ===> org.kiama.example.obr.SPARCTree.CmpneW.canEqual(x$1: Any): Boolean
4370 ===> org.kiama.example.json.PrettyPrinting.show(t: org.kiama.example.json.JSONTree.JValue): PrettyPrinting.this.Doc
9048 ===> org.kiama.example.obr.SPARCTree.MulW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
12251 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.genAdd(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Add]
4485 ===> org.kiama.example.lambda.Evaluator.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2690 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.hashCode(): Int
8844 ===> org.kiama.example.obr.SPARCTree.StW.productPrefix: String
10874 ===> org.kiama.machine.Machine.State.undefine: Unit
1030 ===> org.kiama.example.RISC.RISCISA.STW.im: org.kiama.example.RISC.RISCISA.Imm
6443 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.ident: String
7772 ===> org.kiama.example.obr.ObrTree.TryStmt.hashCode(): Int
2102 ===> org.kiama.example.iswim.compiler.Syntax.Divide.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
1827 ===> org.kiama.example.imperative.AST.Asgn(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
7305 ===> org.kiama.example.oberon0.base.source.Block.toString(): String
4849 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
5046 ===> org.kiama.example.lambda3.AST.EquivQuery.canEqual(x$1: Any): Boolean
579 ===> org.kiama.example.RISC.RISCISA.ADD.toString(): String
8471 ===> org.kiama.example.obr.RISCTree.DivW.toString(): String
11093 ===> org.kiama.output.PrettyPrinterBase.equal: PrettyPrinterBase.this.Doc
6096 ===> org.kiama.example.oberon0.L0.source.NegExp.<init>(): org.kiama.example.oberon0.L0.source.NegExp.type
1980 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.canEqual(x$1: Any): Boolean
6560 ===> org.kiama.example.oberon0.L3.c.CCall.ps: List[org.kiama.example.oberon0.base.c.CExpression]
5269 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.<init>(): SymbolTable.this.UserType.type
3823 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.message: String
3841 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productArity: Int
5286 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.toString(): String
4744 ===> org.kiama.example.lambda2.AST.SubOp.toString(): String
2828 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.<init>(): org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue
12535 ===> org.kiama.util.ParserUtilitiesTests.Tup5.copy$default$4: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
7544 ===> org.kiama.example.obr.ObrTree.EnumVar.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
7714 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productElement(x$1: Int): Any
4303 ===> org.kiama.example.json.JSONTree.JNumber.copy$default$1: Double @scala.annotation.unchecked.uncheckedVariance
4079 ===> org.kiama.example.iswim.secd.StackOps.Pop.productElement(x$1: Int): Any
2019 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.toString(): String
2075 ===> org.kiama.example.iswim.compiler.Syntax.Minus.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Minus
36 ===> org.kiama.attribution.AttributionBase.CircularState.<init>(): AttributionBase.this.CircularState.type
6797 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.<init>(): SymbolTable.this.Field.type
4245 ===> org.kiama.example.json.JSONTree.JObject.toString(): String
2099 ===> org.kiama.example.iswim.compiler.Syntax.Divide.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Divide
131 ===> org.kiama.attribution.UncachedAttribution.attr[T <: AnyRef, U](f: T => U): UncachedAttribution.this.UncachedAttribute[T,U]
5434 ===> org.kiama.example.oberon0.L0.c.CNeExp.toString(): String
1397 ===> org.kiama.example.dataflow.DataflowAST.While.hashCode(): Int
12361 ===> org.kiama.util.Environments.isDefinedInOuter(env: Environments.this.Environment,i: String): Boolean
7498 ===> org.kiama.example.obr.ObrTree.BoolVar.toString(): String
1156 ===> org.kiama.example.RISC.RISCISA.WRL.readResolve(): Object
3975 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.e: SECDBase.this.Environment
3095 ===> org.kiama.example.iswim.secd.IOOps.Write.readResolve(): Object
2176 ===> org.kiama.example.iswim.compiler.Syntax.Less.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Less
5264 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productElement(x$1: Int): Any
8178 ===> org.kiama.example.obr.RISCTransformation.exnloc: org.kiama.example.obr.RISCTree.Address
5934 ===> org.kiama.example.oberon0.L0.source.GeExp.toString(): String
11776 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4432 ===> org.kiama.example.lambda.AST.Lam.productElement(x$1: Int): Any
941 ===> org.kiama.example.RISC.RISCISA.XOR.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.XOR
5432 ===> org.kiama.example.oberon0.L0.c.CNeExp.canEqual(x$1: Any): Boolean
26 ===> org.kiama.attribution.Attributable.clone(): org.kiama.attribution.Attributable
7154 ===> org.kiama.example.oberon0.base.c.CBlock.<init>(): org.kiama.example.oberon0.base.c.CBlock.type
9312 ===> org.kiama.example.obr.SymbolTable.BoolType.toString(): String
10641 ===> org.kiama.example.til.AST.Sub.productElement(x$1: Int): Any
9684 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.toString(): String
2159 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
2737 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Variable] @scala.annotation.unchecked.uncheckedVariance
10248 ===> org.kiama.example.prolog.SymbolTable.UnknownType.canEqual(x$1: Any): Boolean
7454 ===> org.kiama.example.obr.ObrTree.IntVar.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
8204 ===> org.kiama.example.obr.RISCTree.Beq.cond: org.kiama.example.obr.RISCTree.Datum
10247 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productIterator: Iterator[Any]
10066 ===> org.kiama.example.prolog.PrologTree.Var.canEqual(x$1: Any): Boolean
12210 ===> org.kiama.rewriting.UniplateTests.variables(e: org.kiama.example.imperative.AST.Exp): Set[String]
5758 ===> org.kiama.example.oberon0.L0.source.VarDecl.unapply(x$0: org.kiama.example.oberon0.L0.source.VarDecl): Option[(List[org.kiama.example.oberon0.base.source.IdnDef], org.kiama.example.oberon0.L0.source.TypeDef)]
7104 ===> org.kiama.example.oberon0.base.c.CVarDecl.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
67 ===> org.kiama.attribution.Attribution.MemoState.MEMO_VERSION: Int
615 ===> org.kiama.example.RISC.RISCISA.SUB.b: org.kiama.example.RISC.RISCISA.RegNo
2244 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.<init>(): org.kiama.example.iswim.compiler.Syntax.GreaterEq.type
213 ===> org.kiama.attribution.AttributionTests.EitherTree.readResolve(): Object
10343 ===> org.kiama.example.til.AST.Program.productElement(x$1: Int): Any
2260 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.equals(x$1: Any): Boolean
1849 ===> org.kiama.example.imperative.ASTNonCase.Neg.e: org.kiama.example.imperative.ASTNonCase.Exp
3886 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productArity: Int
7547 ===> org.kiama.example.obr.ObrTree.EnumVar.productArity: Int
8131 ===> org.kiama.example.obr.ObrTree.StarExp.right: org.kiama.example.obr.ObrTree.Expression
4155 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.canEqual(x$1: Any): Boolean
9265 ===> org.kiama.example.obr.SymbolTable.Unknown.canEqual(x$1: Any): Boolean
3079 ===> org.kiama.example.iswim.secd.HeapOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
1443 ===> org.kiama.example.dataflow.DataflowAST.Return.ret: org.kiama.example.dataflow.DataflowAST.Var
1995 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productElement(x$1: Int): Any
1220 ===> org.kiama.example.RISC.RISCISA.BGE.canEqual(x$1: Any): Boolean
51 ===> org.kiama.attribution.AttributionBase.ParamAttributeKey.hashCode(): Int
2708 ===> org.kiama.example.iswim.compiler.Syntax.Val.toString(): String
8475 ===> org.kiama.example.obr.RISCTree.DivW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.DivW
3764 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.hashCode(): Int
1906 ===> org.kiama.example.imperative.Generator.arbStmt: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Stmt]
3806 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productElement(x$1: Int): Any
3496 ===> org.kiama.example.iswim.secd.SECDBase.App.toString(): String
11058 ===> org.kiama.output.PrettyPrinterBase.fillsep(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
1035 ===> org.kiama.example.RISC.RISCISA.STW.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
8163 ===> org.kiama.example.obr.RISCEncoder.encode(p: org.kiama.example.obr.RISCTree.RISCProg): Unit
2618 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.hashCode(): Int
9345 ===> org.kiama.example.obr.SymbolTable.RecordType.<init>(fields: List[org.kiama.example.obr.ObrTree.Identifier]): org.kiama.example.obr.SymbolTable.RecordType
2694 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.toString(): String
5299 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productArity: Int
7745 ===> org.kiama.example.obr.ObrTree.RaiseStmt.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.RaiseStmt
493 ===> org.kiama.example.RISC.RISCISA.MOV.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
12201 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12437 ===> org.kiama.util.WhitespaceParser.whitespaceParser: WhitespaceParser.this.PackratParser[Any]
4345 ===> org.kiama.example.json.JSONTree.JFalse.unapply(x$0: org.kiama.example.json.JSONTree.JFalse): Boolean
3062 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.$anon.<init>(): HeapOps.this.State[org.kiama.example.iswim.secd.SECDBase.Value]{def toDoc: HeapOps.this.Doc}
8883 ===> org.kiama.example.obr.SPARCTree.AddW.productElement(x$1: Int): Any
1953 ===> org.kiama.example.iswim.compiler.Syntax.Expr.<init>(): org.kiama.example.iswim.compiler.Syntax.Expr
6254 ===> org.kiama.example.oberon0.L1.source.IfStatement.readResolve(): Object
9134 ===> org.kiama.example.obr.SPARCTree.SubW.readResolve(): Object
3193 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.toString(): String
5839 ===> org.kiama.example.oberon0.L0.source.EqExp.toString(): String
4186 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.copy(m: String): StringOps.this.UserExceptionValue
3433 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.copy$default$1: org.kiama.example.iswim.secd.SECDBase.Code @scala.annotation.unchecked.uncheckedVariance
5171 ===> org.kiama.example.oberon0.L0.CCodeGenerator.translate(s: org.kiama.example.oberon0.base.source.Statement): org.kiama.example.oberon0.base.c.CStatement
11353 ===> org.kiama.rewriting.SupportPositionalRewriterTests.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.type
11451 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.PositionedRewriter.Term,Option[org.kiama.rewriting.PositionedRewriter.Term]] with Serializable
6436 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.isDefinedAt(x$1: org.kiama.example.oberon0.base.source.SourceASTNode): Boolean
1437 ===> org.kiama.example.dataflow.DataflowAST.Block.equals(x$1: Any): Boolean
5557 ===> org.kiama.example.oberon0.L0.c.CSubExp.toString(): String
3201 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.copy(): org.kiama.example.iswim.secd.IntegerOps.Mult
6408 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.casesToDoc(l: List[org.kiama.example.oberon0.L2.source.Case]): PrettyPrinter.this.Doc
12126 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10224 ===> org.kiama.example.prolog.SymbolTable.IntegerType.apply(): org.kiama.example.prolog.SymbolTable.IntegerType
3135 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productArity: Int
6625 ===> org.kiama.example.oberon0.L3.c.CDerefExp.hashCode(): Int
12371 ===> org.kiama.util.IO.FileNotFoundException.productElement(x$1: Int): Any
5342 ===> org.kiama.example.oberon0.L0.c.CNamedType.readResolve(): Object
2539 ===> org.kiama.example.iswim.compiler.Syntax.While.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.While): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
9076 ===> org.kiama.example.obr.SPARCTree.NegW.toString(): String
11181 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.exp: ParenPrettyPrinterTests.this.Exp
413 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productPrefix: String
9157 ===> org.kiama.example.obr.SPARCTree.Indexed.copy$default$1: org.kiama.example.obr.SPARCTree.Local @scala.annotation.unchecked.uncheckedVariance
6488 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.copy$default$3: SymbolTable.this.Type @scala.annotation.unchecked.uncheckedVariance
1623 ===> org.kiama.example.imperative.AST.Neg.productIterator: Iterator[Any]
3626 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.apply(): org.kiama.example.iswim.secd.SECDBase.ResumeFromDump
7631 ===> org.kiama.example.obr.ObrTree.AssignStmt.readResolve(): Object
11112 ===> org.kiama.output.PrettyPrinter.scan(l: PrettyPrinter.this.Width,out: PrettyPrinter.this.Horizontal => ((PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => (PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout))): ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout)
861 ===> org.kiama.example.RISC.RISCISA.ANDI.b: org.kiama.example.RISC.RISCISA.RegNo
9872 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.zInA: org.kiama.example.picojava.AbstractSyntax.Use
4558 ===> org.kiama.example.lambda2.AST.Lam.hashCode(): Int
2335 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.apply(s: String): org.kiama.example.iswim.compiler.Syntax.StringVal
10761 ===> org.kiama.example.transform.AST.VarDecl.readResolve(): Object
3420 ===> org.kiama.example.iswim.secd.SECDBase.Instruction.<init>(): org.kiama.example.iswim.secd.SECDBase.Instruction
8235 ===> org.kiama.example.obr.RISCTree.Bne.toString(): String
11858 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3067 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productArity: Int
2313 ===> org.kiama.example.iswim.compiler.Syntax.Or.hashCode(): Int
926 ===> org.kiama.example.RISC.RISCISA.XOR.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
8035 ===> org.kiama.example.obr.ObrTree.NegExp.unapply(x$0: org.kiama.example.obr.ObrTree.NegExp): Option[org.kiama.example.obr.ObrTree.Expression]
4917 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4753 ===> org.kiama.example.lambda2.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
2858 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.apply(): BooleanOps.this.TrueValue
8706 ===> org.kiama.example.obr.SPARCTransformation.location(n: org.kiama.example.obr.ObrTree.EntityNode): org.kiama.example.obr.SPARCTree.Address
4913 ===> org.kiama.example.lambda2.ParLazyUpdate.$init$(): Unit
11621 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[Rewriter.this.Term,Rewriter.this.Strategy] with Serializable
3173 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productArity: Int
2976 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.hashCode(): Int
714 ===> org.kiama.example.RISC.RISCISA.DIV.<init>(): org.kiama.example.RISC.RISCISA.DIV.type
2144 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productIterator: Iterator[Any]
11856 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2309 ===> org.kiama.example.iswim.compiler.Syntax.Or.productArity: Int
1909 ===> org.kiama.example.imperative.ImperativeGen.process(s: org.kiama.example.imperative.AST.Stmt): Unit
7754 ===> org.kiama.example.obr.ObrTree.RaiseStmt.toString(): String
5243 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productPrefix: String
4310 ===> org.kiama.example.json.JSONTree.JNumber.toString(): String
5770 ===> org.kiama.example.oberon0.L0.source.TypeDecl.canEqual(x$1: Any): Boolean
8977 ===> org.kiama.example.obr.SPARCTree.CmpltW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
10689 ===> org.kiama.example.til.AST.Ne.readResolve(): Object
4779 ===> org.kiama.example.lambda2.Analysis.<init>(): org.kiama.example.lambda2.Analysis.type
1400 ===> org.kiama.example.dataflow.DataflowAST.While.<init>(): org.kiama.example.dataflow.DataflowAST.While.type
10530 ===> org.kiama.example.til.AST.Var.productArity: Int
1797 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
3162 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.hashCode(): Int
688 ===> org.kiama.example.RISC.RISCISA.MULI.productElement(x$1: Int): Any
7518 ===> org.kiama.example.obr.ObrTree.ArrayVar.apply(idn: org.kiama.example.obr.ObrTree.Identifier,size: Int): org.kiama.example.obr.ObrTree.ArrayVar
1389 ===> org.kiama.example.dataflow.DataflowAST.While.copy(cond: org.kiama.example.dataflow.DataflowAST.Var,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.While
4683 ===> org.kiama.example.lambda2.AST.FunType.t1: org.kiama.example.lambda2.AST.Type
1399 ===> org.kiama.example.dataflow.DataflowAST.While.equals(x$1: Any): Boolean
211 ===> org.kiama.attribution.AttributionTests.EitherTree.apply(e: Either[AttributionTests.this.Pair,AttributionTests.this.Leaf]): AttributionTests.this.EitherTree
7106 ===> org.kiama.example.oberon0.base.c.CVarDecl.productPrefix: String
7177 ===> org.kiama.example.oberon0.base.c.CStrType.productPrefix: String
7913 ===> org.kiama.example.obr.ObrTree.IdnExp.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
2282 ===> org.kiama.example.iswim.compiler.Syntax.Not.readResolve(): Object
10644 ===> org.kiama.example.til.AST.Sub.hashCode(): Int
10437 ===> org.kiama.example.til.AST.While.productPrefix: String
11054 ===> org.kiama.output.PrettyPrinterBase.hsep(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
12202 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8159 ===> org.kiama.example.obr.RISCEncoder.memreg: Int(27)
8614 ===> org.kiama.example.obr.RISCTree.SequenceDatum.hashCode(): Int
9121 ===> org.kiama.example.obr.SPARCTree.SubW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
4436 ===> org.kiama.example.lambda.AST.Lam.equals(x$1: Any): Boolean
5936 ===> org.kiama.example.oberon0.L0.source.GeExp.unapply(x$0: org.kiama.example.oberon0.L0.source.GeExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
671 ===> org.kiama.example.RISC.RISCISA.MUL.equals(x$1: Any): Boolean
5857 ===> org.kiama.example.oberon0.L0.source.NeExp.<init>(): org.kiama.example.oberon0.L0.source.NeExp.type
10114 ===> org.kiama.example.prolog.PrologTree.Pred.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
7918 ===> org.kiama.example.obr.ObrTree.IdnExp.canEqual(x$1: Any): Boolean
2875 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.readResolve(): Object
11235 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.toString(): String
5159 ===> org.kiama.example.lambda3.Lambda.process(q: org.kiama.example.lambda3.AST.Query): Unit
6261 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productPrefix: String
9467 ===> org.kiama.example.obr.tests.ObrSemanticTests.<init>(): org.kiama.example.obr.tests.ObrSemanticTests
3927 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.<init>(): org.kiama.example.iswim.secd.SECDBase.MatchError
10182 ===> org.kiama.example.prolog.SymbolTable.Variable.copy$default$1: org.kiama.example.prolog.SymbolTable.Type @scala.annotation.unchecked.uncheckedVariance
7731 ===> org.kiama.example.obr.ObrTree.WhileStmt.productPrefix: String
2450 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Variable @scala.annotation.unchecked.uncheckedVariance
2461 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.toString(): String
4490 ===> org.kiama.example.lambda.Lambda.<init>(): org.kiama.example.lambda.Lambda.type
10096 ===> org.kiama.example.prolog.PrologTree.Atom.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
9529 ===> org.kiama.example.oneohonecompanies.Company.Employee.hashCode(): Int
11875 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11049 ===> org.kiama.output.PrettyPrinterBase.plist$default$5: (Seq[PrettyPrinterBase.this.Doc], PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
6083 ===> org.kiama.example.oberon0.L0.source.NegExp.<init>(exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NegExp
8080 ===> org.kiama.example.obr.ObrTree.OrExp.productArity: Int
8470 ===> org.kiama.example.obr.RISCTree.DivW.hashCode(): Int
6505 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.copy(ident: String,params: List[SymbolTable.this.ParamInfo]): SymbolTable.this.BuiltinProc
8328 ===> org.kiama.example.obr.RISCTree.Read.<init>(): org.kiama.example.obr.RISCTree.Read
8504 ===> org.kiama.example.obr.RISCTree.LdW.hashCode(): Int
5651 ===> org.kiama.example.oberon0.L0.c.CAndExp.productIterator: Iterator[Any]
9895 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.declAAe: org.kiama.example.picojava.AbstractSyntax.VarDecl
682 ===> org.kiama.example.RISC.RISCISA.MULI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MULI
1527 ===> org.kiama.example.dataflow.DataflowFor.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.dataflow.DataflowAST.Stm,Set[org.kiama.example.dataflow.DataflowAST.Stm]] with Serializable
12230 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5952 ===> org.kiama.example.oberon0.L0.source.AddExp.canEqual(x$1: Any): Boolean
9955 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.unapply(x$0: org.kiama.example.prolog.Interpreter.UnifyGoal): Option[(org.kiama.example.prolog.PrologTree.Term, org.kiama.example.prolog.PrologTree.Term)]
6816 ===> org.kiama.example.oberon0.L4.c.CRecordType.fields: List[org.kiama.example.oberon0.base.c.CVarDecl]
8566 ===> org.kiama.example.obr.RISCTree.RemW.r: org.kiama.example.obr.RISCTree.Datum
10439 ===> org.kiama.example.til.AST.While.productElement(x$1: Int): Any
9337 ===> org.kiama.example.obr.SymbolTable.ArrayType.hashCode(): Int
1375 ===> org.kiama.example.dataflow.DataflowAST.Assign.productElement(x$1: Int): Any
2408 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.toString(): String
4922 ===> org.kiama.example.lambda2.Parser.$init$(): Unit
11033 ===> org.kiama.output.PrettyPrinterBase.nest(d: PrettyPrinterBase.this.Doc,j: PrettyPrinterBase.this.Indent): PrettyPrinterBase.this.Doc
8755 ===> org.kiama.example.obr.SPARCTree.Bne.<init>(cond: org.kiama.example.obr.SPARCTree.Datum,dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Bne
713 ===> org.kiama.example.RISC.RISCISA.DIV.equals(x$1: Any): Boolean
7888 ===> org.kiama.example.obr.ObrTree.FieldExp.apply(idn: org.kiama.example.obr.ObrTree.Identifier,field: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.FieldExp
8533 ===> org.kiama.example.obr.RISCTree.NegW.copy(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.NegW
4343 ===> org.kiama.example.json.JSONTree.JFalse.toString(): String
7073 ===> org.kiama.example.oberon0.base.c.CProgram.canEqual(x$1: Any): Boolean
5537 ===> org.kiama.example.oberon0.L0.c.CAddExp.toString(): String
789 ===> org.kiama.example.RISC.RISCISA.CMP.productPrefix: String
139 ===> org.kiama.attribution.UncachedAttribution.childAttr[T <: org.kiama.attribution.Attributable, U](f: T => (org.kiama.attribution.Attributable => U)): UncachedAttribution.this.UncachedAttribute[T,U]
1056 ===> org.kiama.example.RISC.RISCISA.STB.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
12484 ===> org.kiama.util.ParserUtilitiesTests.Tup3.<init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup3
8506 ===> org.kiama.example.obr.RISCTree.LdW.equals(x$1: Any): Boolean
8244 ===> org.kiama.example.obr.RISCTree.Jmp.copy(dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Jmp
8980 ===> org.kiama.example.obr.SPARCTree.CmpltW.productElement(x$1: Int): Any
642 ===> org.kiama.example.RISC.RISCISA.SUBI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
9395 ===> org.kiama.example.obr.SymbolTable.EnumType.readResolve(): Object
3335 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productElement(x$1: Int): Any
10199 ===> org.kiama.example.prolog.SymbolTable.AtomType.copy(): org.kiama.example.prolog.SymbolTable.AtomType
10865 ===> org.kiama.example.transform.TransformTests.<init>(): org.kiama.example.transform.TransformTests
11490 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.toString(): String
8703 ===> org.kiama.example.obr.SPARCEncoder.epilogue(): Unit
12414 ===> org.kiama.util.ParserUtilities.$init$(): Unit
11667 ===> org.kiama.rewriting.Rewriter.manybu(s: Rewriter.this.Strategy): Rewriter.this.Strategy
1040 ===> org.kiama.example.RISC.RISCISA.STW.productIterator: Iterator[Any]
304 ===> org.kiama.attribution.AttributionTests.TripleTree.productArity: Int
4257 ===> org.kiama.example.json.JSONTree.JName.canEqual(x$1: Any): Boolean
4395 ===> org.kiama.example.lambda.AST.Num.productArity: Int
7652 ===> org.kiama.example.obr.ObrTree.ForStmt.copy(idn: org.kiama.example.obr.ObrTree.Identifier,min: org.kiama.example.obr.ObrTree.Expression,max: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.ForStmt
11080 ===> org.kiama.output.PrettyPrinterBase.atsign: PrettyPrinterBase.this.Doc
4510 ===> org.kiama.example.lambda2.AST.Exp.<init>(): org.kiama.example.lambda2.AST.Exp
7160 ===> org.kiama.example.oberon0.base.c.CIntType.<init>(): org.kiama.example.oberon0.base.c.CIntType
6109 ===> org.kiama.example.oberon0.L0.source.NotExp.productElement(x$1: Int): Any
10379 ===> org.kiama.example.til.AST.Assign.productArity: Int
12522 ===> org.kiama.util.ParserUtilitiesTests.Tup4.apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup4
4199 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.readResolve(): Object
9297 ===> org.kiama.example.obr.SymbolTable.IntType.copy(): org.kiama.example.obr.SymbolTable.IntType
2900 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productElement(x$1: Int): Any
9359 ===> org.kiama.example.obr.SymbolTable.RecordType.apply(fields: List[org.kiama.example.obr.ObrTree.Identifier]): org.kiama.example.obr.SymbolTable.RecordType
3224 ===> org.kiama.example.iswim.secd.IntegerOps.Div.equals(x$1: Any): Boolean
6552 ===> org.kiama.example.oberon0.L3.c.CAddrType.toString(): String
2315 ===> org.kiama.example.iswim.compiler.Syntax.Or.equals(x$1: Any): Boolean
6993 ===> org.kiama.example.oberon0.base.Driver.$init$(): Unit
475 ===> org.kiama.example.RISC.RISC.N: RISC.this.State[Boolean]
3359 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.unapply(x$0: org.kiama.example.iswim.secd.RecordOps.UnpackRecord): Boolean
4772 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
7142 ===> org.kiama.example.oberon0.base.c.CBlock.<init>(decls: List[org.kiama.example.oberon0.base.c.CDeclaration],stmts: List[org.kiama.example.oberon0.base.c.CStatement]): org.kiama.example.oberon0.base.c.CBlock
9720 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productIterator: Iterator[Any]
6627 ===> org.kiama.example.oberon0.L3.c.CDerefExp.equals(x$1: Any): Boolean
6896 ===> org.kiama.example.oberon0.L4.source.IndexExp.copy(base: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L4.source.IndexExp
2751 ===> org.kiama.example.iswim.driver.Main.<init>(): org.kiama.example.iswim.driver.Main.type
8758 ===> org.kiama.example.obr.SPARCTree.Bne.copy$default$2: org.kiama.example.obr.SPARCTree.Label @scala.annotation.unchecked.uncheckedVariance
12234 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.doubleneg: org.kiama.example.imperative.AST.Exp => org.kiama.example.imperative.AST.Exp
1627 ===> org.kiama.example.imperative.AST.Neg.equals(x$1: Any): Boolean
1853 ===> org.kiama.example.imperative.ASTNonCase.Neg.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
12406 ===> org.kiama.util.Messaging.messages: scala.collection.mutable.ListBuffer[org.kiama.util.Messaging.Record]
12345 ===> org.kiama.util.Environments.UnknownEntity.hashCode(): Int
906 ===> org.kiama.example.RISC.RISCISA.ORI.toString(): String
764 ===> org.kiama.example.RISC.RISCISA.MODI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MODI
11137 ===> org.kiama.output.PrettyPrinterTests.Val.productArity: Int
3527 ===> org.kiama.example.iswim.secd.SECDBase.Enter.hashCode(): Int
2328 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productIterator: Iterator[Any]
6897 ===> org.kiama.example.oberon0.L4.source.IndexExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
7764 ===> org.kiama.example.obr.ObrTree.TryStmt.copy(body: org.kiama.example.obr.ObrTree.TryBody,catches: List[org.kiama.example.obr.ObrTree.Catch]): org.kiama.example.obr.ObrTree.TryStmt
11001 ===> org.kiama.output.PrettyBinaryExpression.op: String
11712 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10550 ===> org.kiama.example.til.AST.Num.canEqual(x$1: Any): Boolean
7941 ===> org.kiama.example.obr.ObrTree.IndexExp.<init>(): org.kiama.example.obr.ObrTree.IndexExp.type
1226 ===> org.kiama.example.RISC.RISCISA.BGE.unapply(x$0: org.kiama.example.RISC.RISCISA.BGE): Option[Int]
9358 ===> org.kiama.example.obr.SymbolTable.RecordType.toString(): String
10860 ===> org.kiama.example.transform.Driver.<init>(): org.kiama.example.transform.Driver
3189 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productElement(x$1: Int): Any
430 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productPrefix: String
1689 ===> org.kiama.example.imperative.AST.Mul.productIterator: Iterator[Any]
2228 ===> org.kiama.example.iswim.compiler.Syntax.Greater.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Greater): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
7362 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
3417 ===> org.kiama.example.iswim.secd.SECDBase.positionBlock[T](newPos: scala.util.parsing.input.Position)(code: => T): T
5660 ===> org.kiama.example.oberon0.L0.c.CAndExp.readResolve(): Object
4336 ===> org.kiama.example.json.JSONTree.JFalse.productElement(x$1: Int): Any
11394 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productPrefix: String
6323 ===> org.kiama.example.oberon0.L2.source.ForStatement.toString(): String
8975 ===> org.kiama.example.obr.SPARCTree.CmpltW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpltW
1594 ===> org.kiama.example.imperative.AST.Var.vars: Set[org.kiama.example.imperative.AST.Idn]
6476 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.toString(): String
2029 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productElement(x$1: Int): Any
11434 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
1749 ===> org.kiama.example.imperative.AST.Seqn.equals(x$1: Any): Boolean
3112 ===> org.kiama.example.iswim.secd.IOOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
2649 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productPrefix: String
7225 ===> org.kiama.example.oberon0.base.c.CReturn.e: org.kiama.example.oberon0.base.c.CExpression
7964 ===> org.kiama.example.obr.ObrTree.LessExp.right: org.kiama.example.obr.ObrTree.Expression
8451 ===> org.kiama.example.obr.RISCTree.CmpltW.hashCode(): Int
3801 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.readResolve(): Object
10941 ===> org.kiama.output.LeftAssoc.hashCode(): Int
8854 ===> org.kiama.example.obr.SPARCTree.StW.apply(mem: org.kiama.example.obr.SPARCTree.Address,d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.StW
8817 ===> org.kiama.example.obr.SPARCTree.Read.equals(x$1: Any): Boolean
5018 ===> org.kiama.example.lambda3.AST.Lam.toString(): String
1270 ===> org.kiama.example.RISC.RISCISA.BR.equals(x$1: Any): Boolean
6573 ===> org.kiama.example.oberon0.L3.c.CCall.<init>(): org.kiama.example.oberon0.L3.c.CCall.type
3916 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productArity: Int
10095 ===> org.kiama.example.prolog.PrologTree.Atom.copy(s: String): org.kiama.example.prolog.PrologTree.Atom
915 ===> org.kiama.example.RISC.RISCISA.ORI.canEqual(x$1: Any): Boolean
13 ===> org.kiama.attribution.Attributable.isLast: Boolean
10998 ===> org.kiama.output.PrettyOperatorExpression.priority: Int
10718 ===> org.kiama.example.til.TIL2_3.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10022 ===> org.kiama.example.prolog.PrologTree.Fact.copy(hd: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.PrologTree.Fact
3986 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
11644 ===> org.kiama.rewriting.Rewriter.topdown(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
5033 ===> org.kiama.example.lambda3.AST.Query.<init>(): org.kiama.example.lambda3.AST.Query
9132 ===> org.kiama.example.obr.SPARCTree.SubW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.SubW
2423 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.equals(x$1: Any): Boolean
1317 ===> org.kiama.example.RISC.RISCISA.Target.productElement(x$1: Int): Any
10121 ===> org.kiama.example.prolog.PrologTree.Pred.hashCode(): Int
4269 ===> org.kiama.example.json.JSONTree.JArray.copy$default$1: Vector[org.kiama.example.json.JSONTree.JValue] @scala.annotation.unchecked.uncheckedVariance
4074 ===> org.kiama.example.iswim.secd.StackOps.Pop.<init>(n: Int): org.kiama.example.iswim.secd.StackOps.Pop
4825 ===> org.kiama.example.lambda2.LambdaTests.canons(d: Int,e: Map[org.kiama.example.lambda2.AST.Idn,org.kiama.example.lambda2.AST.Idn]): org.kiama.rewriting.Rewriter.Strategy
2040 ===> org.kiama.example.iswim.compiler.Syntax.Plus.l: org.kiama.example.iswim.compiler.Syntax.Expr
11089 ===> org.kiama.output.PrettyPrinterBase.underscore: PrettyPrinterBase.this.Doc
8929 ===> org.kiama.example.obr.SPARCTree.CmpeqW.<init>(): org.kiama.example.obr.SPARCTree.CmpeqW.type
11486 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.hashCode(): Int
9602 ===> org.kiama.example.oneohonecompanies.SampleCompany.joe: org.kiama.example.oneohonecompanies.Company.Employee
1254 ===> org.kiama.example.RISC.RISCISA.BGT.equals(x$1: Any): Boolean
5494 ===> org.kiama.example.oberon0.L0.c.CGtExp.toString(): String
1548 ===> org.kiama.example.dataflow.DataflowTests.s412: org.kiama.example.dataflow.DataflowAST.Assign
8829 ===> org.kiama.example.obr.SPARCTree.Ret.canEqual(x$1: Any): Boolean
12610 ===> org.kiama.util.GeneratingREPLBase.ignoreWhitespaceLines: Boolean
3941 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.readResolve(): Object
1215 ===> org.kiama.example.RISC.RISCISA.BGE.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
987 ===> org.kiama.example.RISC.RISCISA.LDB.b: org.kiama.example.RISC.RISCISA.RegNo
8673 ===> org.kiama.example.obr.RISCTree.Label.apply(num: Int): org.kiama.example.obr.RISCTree.Label
6866 ===> org.kiama.example.oberon0.L4.c.CFieldExp.<init>(): org.kiama.example.oberon0.L4.c.CFieldExp.type
4025 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.toString(): String
777 ===> org.kiama.example.RISC.RISCISA.MODI.<init>(): org.kiama.example.RISC.RISCISA.MODI.type
3521 ===> org.kiama.example.iswim.secd.SECDBase.Enter.copy$default$1: List[org.kiama.example.iswim.secd.SECDBase.Name] @scala.annotation.unchecked.uncheckedVariance
1427 ===> org.kiama.example.dataflow.DataflowAST.Block.<init>(stms: List[org.kiama.example.dataflow.DataflowAST.Stm]): org.kiama.example.dataflow.DataflowAST.Block
5458 ===> org.kiama.example.oberon0.L0.c.CLtExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CLtExp
6151 ===> org.kiama.example.oberon0.L0.source.IdnExp.apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L0.source.IdnExp
1939 ===> org.kiama.example.iswim.compiler.Parser.Pos.apply(s: String): Parser.this.Pos
10398 ===> org.kiama.example.til.AST.IfThen.productArity: Int
8460 ===> org.kiama.example.obr.RISCTree.DivW.r: org.kiama.example.obr.RISCTree.Datum
5999 ===> org.kiama.example.oberon0.L0.source.ProdExpression.op: String
10789 ===> org.kiama.example.transform.AST.Factor.productArity: Int
3746 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productElement(x$1: Int): Any
1775 ===> org.kiama.example.imperative.AST.While.e: org.kiama.example.imperative.AST.Exp
92 ===> org.kiama.attribution.Attribution.CachedDynamicAttribute.$plus$eq(g: org.kiama.==>[T,U]): Unit
1113 ===> org.kiama.example.RISC.RISCISA.WRD.productPrefix: String
6275 ===> org.kiama.example.oberon0.L1.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
10074 ===> org.kiama.example.prolog.PrologTree.Integer.v: Int
1466 ===> org.kiama.example.dataflow.DataflowAST.Empty.canEqual(x$1: Any): Boolean
9838 ===> org.kiama.example.picojava.NameResolution.declarationOf: String => (org.kiama.example.picojava.AbstractSyntax.BlockStmt => org.kiama.example.picojava.AbstractSyntax.Decl)
2279 ===> org.kiama.example.iswim.compiler.Syntax.Not.toString(): String
7930 ===> org.kiama.example.obr.ObrTree.IndexExp.copy(idn: org.kiama.example.obr.ObrTree.Identifier,indx: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.IndexExp
11713 ===> org.kiama.rewriting.RewriterTests.pickchild(t: Product): org.kiama.rewriting.Rewriter.Term
8374 ===> org.kiama.example.obr.RISCTree.Cond.canEqual(x$1: Any): Boolean
12607 ===> org.kiama.util.ParsingREPLBase.start: ParsingREPLBase.this.Parser[T]
4778 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2923 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.apply(): org.kiama.example.iswim.secd.ConversionOps.ToBoolean
11104 ===> org.kiama.output.PrettyPrinterBase.langle: PrettyPrinterBase.this.Doc
387 ===> org.kiama.attribution.Decorators.chain$default$2[T <: org.kiama.attribution.Attributable, U]: (T => U) => org.kiama.==>[T,U] @scala.annotation.unchecked.uncheckedVariance
7336 ===> org.kiama.example.oberon0.base.source.IdnDef.toString(): String
9039 ===> org.kiama.example.obr.SPARCTree.LdW.<init>(): org.kiama.example.obr.SPARCTree.LdW.type
8878 ===> org.kiama.example.obr.SPARCTree.AddW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.AddW
10967 ===> org.kiama.output.Prefix.productIterator: Iterator[Any]
10460 ===> org.kiama.example.til.AST.For.productPrefix: String
8213 ===> org.kiama.example.obr.RISCTree.Beq.productIterator: Iterator[Any]
2909 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.unapply(x$0: org.kiama.example.iswim.secd.ConversionOps.ToInt): Boolean
4466 ===> org.kiama.example.lambda.AST.Sub.copy$default$1: org.kiama.example.lambda.AST.Exp @scala.annotation.unchecked.uncheckedVariance
1680 ===> org.kiama.example.imperative.AST.Mul.r: org.kiama.example.imperative.AST.Exp
11210 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.copy$default$1: ParenPrettyPrinterTests.this.Exp @scala.annotation.unchecked.uncheckedVariance
11485 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.canEqual(x$1: Any): Boolean
1757 ===> org.kiama.example.imperative.AST.Asgn.<init>(v: org.kiama.example.imperative.AST.Var,e: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Asgn
9613 ===> org.kiama.example.picojava.AbstractSyntax.Program.Block: org.kiama.example.picojava.AbstractSyntax.Block
3590 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.canEqual(x$1: Any): Boolean
6963 ===> org.kiama.example.oberon0.L4.source.FieldExp.toString(): String
9166 ===> org.kiama.example.obr.SPARCTree.Indexed.equals(x$1: Any): Boolean
12160 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7158 ===> org.kiama.example.oberon0.base.c.CBlock.readResolve(): Object
2370 ===> org.kiama.example.iswim.compiler.Syntax.Let.equals(x$1: Any): Boolean
2499 ===> org.kiama.example.iswim.compiler.Syntax.Apply.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Apply): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
8246 ===> org.kiama.example.obr.RISCTree.Jmp.productPrefix: String
4111 ===> org.kiama.example.iswim.secd.StackOps.Swap.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
2559 ===> org.kiama.example.iswim.compiler.Syntax.Empty.copy(): org.kiama.example.iswim.compiler.Syntax.Empty
11462 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productPrefix: String
11063 ===> org.kiama.output.PrettyPrinterBase.lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
8194 ===> org.kiama.example.obr.RISCTree.RISCProg.canEqual(x$1: Any): Boolean
11803 ===> org.kiama.rewriting.RewriterTests.Same.<init>(): RewriterTests.this.Same.type
3682 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productElement(x$1: Int): Any
5431 ===> org.kiama.example.oberon0.L0.c.CNeExp.productIterator: Iterator[Any]
12378 ===> org.kiama.util.IO.FileNotFoundException.apply(message: String): org.kiama.util.IO.FileNotFoundException
9000 ===> org.kiama.example.obr.SPARCTree.DivW.productIterator: Iterator[Any]
7809 ===> org.kiama.example.obr.ObrTree.Catch.toString(): String
4709 ===> org.kiama.example.lambda2.AST.NoType.hashCode(): Int
2592 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.copy(ns: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Pattern
11414 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
12149 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5545 ===> org.kiama.example.oberon0.L0.c.CSubExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CSubExp
8832 ===> org.kiama.example.obr.SPARCTree.Ret.equals(x$1: Any): Boolean
9187 ===> org.kiama.example.obr.SPARCTree.Label.unapply(x$0: org.kiama.example.obr.SPARCTree.Label): Option[Int]
7025 ===> org.kiama.example.oberon0.base.TransformingDriver.printiastFlagDefault: Boolean
701 ===> org.kiama.example.RISC.RISCISA.DIV.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
11966 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8610 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productArity: Int
11707 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Int](x$1: A1,default: A1 => B1): B1
9283 ===> org.kiama.example.obr.SymbolTable.Multiple.equals(x$1: Any): Boolean
6513 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.hashCode(): Int
3673 ===> org.kiama.example.iswim.secd.SECDBase.PushType.<init>(): org.kiama.example.iswim.secd.SECDBase.PushType.type
12557 ===> org.kiama.util.ParserUtilitiesTests.Tup6.copy(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node,n6: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup6
5967 ===> org.kiama.example.oberon0.L0.source.SubExp.productPrefix: String
7327 ===> org.kiama.example.oberon0.base.source.IdnDef.<init>(ident: String): org.kiama.example.oberon0.base.source.IdnDef
3054 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.apply(): org.kiama.example.iswim.secd.HeapOps.RefTypeValue
1646 ===> org.kiama.example.imperative.AST.Add.productPrefix: String
7599 ===> org.kiama.example.obr.ObrTree.ExnConst.productPrefix: String
11378 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productArity: Int
9368 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productElement(x$1: Int): Any
9401 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productArity: Int
5510 ===> org.kiama.example.oberon0.L0.c.CGeExp.productElement(x$1: Int): Any
10593 ===> org.kiama.example.til.AST.Mul.unapply(x$0: org.kiama.example.til.AST.Mul): Option[(org.kiama.example.til.AST.Exp, org.kiama.example.til.AST.Exp)]
3553 ===> org.kiama.example.iswim.secd.SECDBase.Exit.copy(): org.kiama.example.iswim.secd.SECDBase.Exit
3636 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.hashCode(): Int
8857 ===> org.kiama.example.obr.SPARCTree.Write.d: org.kiama.example.obr.SPARCTree.Datum
2732 ===> org.kiama.example.iswim.compiler.Syntax.Assign.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Assign): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
3649 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productArity: Int
5496 ===> org.kiama.example.oberon0.L0.c.CGtExp.<init>(): org.kiama.example.oberon0.L0.c.CGtExp.type
253 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productArity: Int
11577 ===> org.kiama.rewriting.Rewriter.makechild(c: Any): AnyRef
3183 ===> org.kiama.example.iswim.secd.IntegerOps.Add.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.Add): Boolean
7576 ===> org.kiama.example.obr.ObrTree.IntConst.idn: org.kiama.example.obr.ObrTree.Identifier
4015 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.canEqual(x$1: Any): Boolean
4562 ===> org.kiama.example.lambda2.AST.Lam.toString(): String
4316 ===> org.kiama.example.json.JSONTree.JNumber.readResolve(): Object
3452 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
6317 ===> org.kiama.example.oberon0.L2.source.ForStatement.productIterator: Iterator[Any]
7265 ===> org.kiama.example.oberon0.base.c.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
7947 ===> org.kiama.example.obr.ObrTree.IntExp.<init>(num: Int): org.kiama.example.obr.ObrTree.IntExp
11663 ===> org.kiama.rewriting.Rewriter.allbu(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
576 ===> org.kiama.example.RISC.RISCISA.ADD.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
10449 ===> org.kiama.example.til.AST.While.readResolve(): Object
825 ===> org.kiama.example.RISC.RISCISA.CHKI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
4057 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toString(): String
10610 ===> org.kiama.example.til.AST.Div.toString(): String
11259 ===> org.kiama.rewriting.NominalAST.Name.copy(base: String,opti: Option[Int]): org.kiama.rewriting.NominalAST.Name
2101 ===> org.kiama.example.iswim.compiler.Syntax.Divide.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
6647 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productPrefix: String
2990 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.readResolve(): Object
895 ===> org.kiama.example.RISC.RISCISA.OR.hashCode(): Int
4981 ===> org.kiama.example.lambda3.AST.Var.<init>(x: org.kiama.rewriting.NominalAST.Name): org.kiama.example.lambda3.AST.Var
3378 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.copy(): org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds
7052 ===> org.kiama.example.oberon0.base.TranslatingTestDriver.pprintcastFlagDefault: Boolean
3485 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.apply(fss: List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec]): org.kiama.example.iswim.secd.SECDBase.MkClosures
1222 ===> org.kiama.example.RISC.RISCISA.BGE.equals(x$1: Any): Boolean
11400 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.toString(): String
7667 ===> org.kiama.example.obr.ObrTree.ForStmt.apply(idn: org.kiama.example.obr.ObrTree.Identifier,min: org.kiama.example.obr.ObrTree.Expression,max: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.ForStmt
5779 ===> org.kiama.example.oberon0.L0.source.TypeDef.<init>(): org.kiama.example.oberon0.L0.source.TypeDef
7028 ===> org.kiama.example.oberon0.base.TransformingDriver.processargs(args: List[String]): Boolean
11406 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.readResolve(): Object
11342 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.PositionalRewriter.Term,org.kiama.rewriting.PositionalRewriter.Term] with Serializable
3817 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionValue.<init>(): org.kiama.example.iswim.secd.SECDBase.ExceptionValue
5772 ===> org.kiama.example.oberon0.L0.source.TypeDecl.toString(): String
11692 ===> org.kiama.rewriting.Rewriter.restore(s: => Rewriter.this.Strategy,rest: => Rewriter.this.Strategy): Rewriter.this.Strategy
6528 ===> org.kiama.example.oberon0.L3.c.CVoidType.copy(): org.kiama.example.oberon0.L3.c.CVoidType
12199 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10473 ===> org.kiama.example.til.AST.Read.i: org.kiama.example.til.AST.Id
4447 ===> org.kiama.example.lambda.AST.App.copy$default$1: org.kiama.example.lambda.AST.Exp @scala.annotation.unchecked.uncheckedVariance
365 ===> org.kiama.attribution.Decorators.Chain.copy$default$2[T, U]: T => U @scala.annotation.unchecked.uncheckedVariance
10055 ===> org.kiama.example.prolog.PrologTree.Rule.readResolve(): Object
11517 ===> org.kiama.rewriting.Rewritable.illegalArgs(desc: String,argtypes: String,args: Array[org.kiama.rewriting.Rewriter.Term]): Nothing
6075 ===> org.kiama.example.oberon0.L0.source.AndExp.toString(): String
1007 ===> org.kiama.example.RISC.RISCISA.POP.a: org.kiama.example.RISC.RISCISA.RegNo
1593 ===> org.kiama.example.imperative.AST.Var.value: Double
3131 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.readResolve(): Object
3763 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.canEqual(x$1: Any): Boolean
12422 ===> org.kiama.util.ParserUtilities.regexnows(r: scala.util.matching.Regex): ParserUtilities.this.Parser[String]
3873 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productIterator: Iterator[Any]
2849 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productPrefix: String
2352 ===> org.kiama.example.iswim.compiler.Syntax.Binding.<init>(): org.kiama.example.iswim.compiler.Syntax.Binding.type
10623 ===> org.kiama.example.til.AST.Add.productIterator: Iterator[Any]
4302 ===> org.kiama.example.json.JSONTree.JNumber.copy(value: Double): org.kiama.example.json.JSONTree.JNumber
4009 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.copy$default$2: org.kiama.example.iswim.secd.SECDBase.Code @scala.annotation.unchecked.uncheckedVariance
1403 ===> org.kiama.example.dataflow.DataflowAST.While.unapply(x$0: org.kiama.example.dataflow.DataflowAST.While): Option[(org.kiama.example.dataflow.DataflowAST.Var, org.kiama.example.dataflow.DataflowAST.Stm)]
11126 ===> org.kiama.output.PrettyPrinter.pretty(d: PrettyPrinter.this.Doc,w: PrettyPrinter.this.Width): PrettyPrinter.this.Layout
8543 ===> org.kiama.example.obr.RISCTree.NegW.<init>(): org.kiama.example.obr.RISCTree.NegW.type
1963 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.canEqual(x$1: Any): Boolean
12307 ===> org.kiama.util.StringEmitter.clear(): Unit
8931 ===> org.kiama.example.obr.SPARCTree.CmpeqW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpeqW
1022 ===> org.kiama.example.RISC.RISCISA.POP.equals(x$1: Any): Boolean
7779 ===> org.kiama.example.obr.ObrTree.TryStmt.readResolve(): Object
2035 ===> org.kiama.example.iswim.compiler.Syntax.Negate.<init>(): org.kiama.example.iswim.compiler.Syntax.Negate.type
9807 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
11070 ===> org.kiama.output.PrettyPrinterBase.surround(d: PrettyPrinterBase.this.Doc,b: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
10737 ===> org.kiama.example.transform.AST.Program.hashCode(): Int
9591 ===> org.kiama.example.oneohonecompanies.Precedence.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Boolean] with Serializable
9178 ===> org.kiama.example.obr.SPARCTree.Label.productArity: Int
1799 ===> org.kiama.example.imperative.AST.Var(s1: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
9912 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.canEqual(x$1: Any): Boolean
4721 ===> org.kiama.example.lambda2.AST.AddOp.copy(): org.kiama.example.lambda2.AST.AddOp
9015 ===> org.kiama.example.obr.SPARCTree.IntDatum.productArity: Int
6414 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translate(d: org.kiama.example.oberon0.base.source.Declaration): List[org.kiama.example.oberon0.base.c.CDeclaration]
3605 ===> org.kiama.example.iswim.secd.SECDBase.Resume.canEqual(x$1: Any): Boolean
6360 ===> org.kiama.example.oberon0.L2.source.Case.toString(): String
9266 ===> org.kiama.example.obr.SymbolTable.Unknown.hashCode(): Int
1780 ===> org.kiama.example.imperative.AST.While.copy$default$1: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
4714 ===> org.kiama.example.lambda2.AST.NoType.apply(): org.kiama.example.lambda2.AST.NoType
4538 ===> org.kiama.example.lambda2.AST.Var.toString(): String
2395 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
6987 ===> org.kiama.example.oberon0.base.Analyser.$init$(): Unit
96 ===> org.kiama.attribution.Attribution.$anon.<init>(): Attribution.this.CachedAttribute[T,U]{}
11458 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.a: org.kiama.rewriting.SupportPositionedRewriterTests.Node
10643 ===> org.kiama.example.til.AST.Sub.canEqual(x$1: Any): Boolean
1171 ===> org.kiama.example.RISC.RISCISA.BEQ.productIterator: Iterator[Any]
11974 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5344 ===> org.kiama.example.oberon0.L0.c.CInitDecl.e: org.kiama.example.oberon0.base.c.CExpression
3040 ===> org.kiama.example.iswim.secd.HeapOps.Put.unapply(x$0: org.kiama.example.iswim.secd.HeapOps.Put): Boolean
11740 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4344 ===> org.kiama.example.json.JSONTree.JFalse.apply(): org.kiama.example.json.JSONTree.JFalse
12282 ===> org.kiama.util.TestCompiler.filetests$default$5: Option[String] @scala.annotation.unchecked.uncheckedVariance
9422 ===> org.kiama.example.obr.SymbolTable.ExnType.equals(x$1: Any): Boolean
4941 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
68 ===> org.kiama.attribution.Attribution.MemoState.MEMO_VERSION_$eq(x$1: Int): Unit
4765 ===> org.kiama.example.lambda2.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
5672 ===> org.kiama.example.oberon0.L0.c.CNegExp.productIterator: Iterator[Any]
5582 ===> org.kiama.example.oberon0.L0.c.CMulExp.right: org.kiama.example.oberon0.base.c.CExpression
3584 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.<init>(): org.kiama.example.iswim.secd.SECDBase.AppCC
6245 ===> org.kiama.example.oberon0.L1.source.IfStatement.productIterator: Iterator[Any]
11734 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
330 ===> org.kiama.attribution.AttributionTests.QuadTree.apply(p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.QuadTree
10201 ===> org.kiama.example.prolog.SymbolTable.AtomType.productArity: Int
6338 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productIterator: Iterator[Any]
5555 ===> org.kiama.example.oberon0.L0.c.CSubExp.equals(x$1: Any): Boolean
4565 ===> org.kiama.example.lambda2.AST.Lam.readResolve(): Object
9896 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.eInBB: org.kiama.example.picojava.AbstractSyntax.Use
2010 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productPrefix: String
781 ===> org.kiama.example.RISC.RISCISA.MODI.readResolve(): Object
10488 ===> org.kiama.example.til.AST.Read.unapply(x$0: org.kiama.example.til.AST.Read): Option[org.kiama.example.til.AST.Id]
7792 ===> org.kiama.example.obr.ObrTree.TryBody.<init>(): org.kiama.example.obr.ObrTree.TryBody.type
2068 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productIterator: Iterator[Any]
744 ===> org.kiama.example.RISC.RISCISA.MOD.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5139 ===> org.kiama.example.lambda3.AST.SwapQuery.copy$default$2: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10546 ===> org.kiama.example.til.AST.Num.productPrefix: String
8177 ===> org.kiama.example.obr.RISCTransformation.tempintloc_$eq(x$1: org.kiama.example.obr.RISCTree.Address): Unit
355 ===> org.kiama.attribution.AttributionTests.$anon.isDefinedAt(t: AttributionTests.this.Tree): Boolean
2981 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productPrefix: String
1363 ===> org.kiama.example.dataflow.LivenessImpl.out: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
8491 ===> org.kiama.example.obr.RISCTree.IntDatum.toString(): String
10098 ===> org.kiama.example.prolog.PrologTree.Atom.productArity: Int
2702 ===> org.kiama.example.iswim.compiler.Syntax.Val.productPrefix: String
4327 ===> org.kiama.example.json.JSONTree.JTrue.<init>(): org.kiama.example.json.JSONTree.JTrue.type
10679 ===> org.kiama.example.til.AST.Ne.productElement(x$1: Int): Any
4673 ===> org.kiama.example.lambda2.AST.IntType.productIterator: Iterator[Any]
7991 ===> org.kiama.example.obr.ObrTree.MinusExp.productIterator: Iterator[Any]
7732 ===> org.kiama.example.obr.ObrTree.WhileStmt.productArity: Int
5685 ===> org.kiama.example.oberon0.L0.c.CNotExp.op: String
3689 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.toString(): String
6654 ===> org.kiama.example.oberon0.L3.source.ProcDecl.equals(x$1: Any): Boolean
10835 ===> org.kiama.example.transform.AST.Num.equals(x$1: Any): Boolean
11956 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4870 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
959 ===> org.kiama.example.RISC.RISCISA.XORI.equals(x$1: Any): Boolean
3435 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productArity: Int
5024 ===> org.kiama.example.lambda3.AST.Lam.productIterator: Iterator[Any]
492 ===> org.kiama.example.RISC.RISCISA.MOV.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
4153 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productElement(x$1: Int): Any
7603 ===> org.kiama.example.obr.ObrTree.ExnConst.canEqual(x$1: Any): Boolean
9449 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.toString(): String
1537 ===> org.kiama.example.dataflow.DataflowForTests.s411: org.kiama.example.dataflow.DataflowAST.Assign
4068 ===> org.kiama.example.iswim.secd.SECDBase.execSrcPos: scala.util.parsing.input.Position
5873 ===> org.kiama.example.oberon0.L0.source.LtExp.hashCode(): Int
11268 ===> org.kiama.rewriting.NominalAST.Name.equals(x$1: Any): Boolean
745 ===> org.kiama.example.RISC.RISCISA.MOD.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
6583 ===> org.kiama.example.oberon0.L3.c.CStrExp.productArity: Int
4260 ===> org.kiama.example.json.JSONTree.JName.equals(x$1: Any): Boolean
10907 ===> org.kiama.machine.Machine.ParamUpdate.value: Any
2241 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.hashCode(): Int
6639 ===> org.kiama.example.oberon0.L3.source.ProcDecl.body: org.kiama.example.oberon0.base.source.Block
2715 ===> org.kiama.example.iswim.compiler.Syntax.Assign.r: org.kiama.example.iswim.compiler.Syntax.Expr
7601 ===> org.kiama.example.obr.ObrTree.ExnConst.productElement(x$1: Int): Any
11810 ===> org.kiama.rewriting.RewriterTests.Same.toString(): String
7986 ===> org.kiama.example.obr.ObrTree.MinusExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
3160 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productIterator: Iterator[Any]
6125 ===> org.kiama.example.oberon0.L0.source.IntExp.productArity: Int
275 ===> org.kiama.attribution.AttributionTests.MapTree.toString(): String
3100 ===> org.kiama.example.iswim.secd.IOOps.Read.productElement(x$1: Int): Any
8648 ===> org.kiama.example.obr.RISCTree.Indexed.productElement(x$1: Int): Any
9933 ===> org.kiama.example.prolog.Interpreter.TermGoal.<init>(): org.kiama.example.prolog.Interpreter.TermGoal.type
708 ===> org.kiama.example.RISC.RISCISA.DIV.productArity: Int
9726 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.toString(): String
6846 ===> org.kiama.example.oberon0.L4.c.CIndexExp.equals(x$1: Any): Boolean
7587 ===> org.kiama.example.obr.ObrTree.IntConst.hashCode(): Int
1508 ===> org.kiama.example.dataflow.For.inc: org.kiama.example.dataflow.DataflowAST.Stm
10872 ===> org.kiama.machine.Machine.State._value_$eq(x$1: Option[T]): Unit
3272 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.apply(): org.kiama.example.iswim.secd.IntegerOps.DivisionByZero
8111 ===> org.kiama.example.obr.ObrTree.SlashExp.left: org.kiama.example.obr.ObrTree.Expression
8588 ===> org.kiama.example.obr.RISCTree.SubW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
7070 ===> org.kiama.example.oberon0.base.c.CProgram.productArity: Int
11720 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11559 ===> org.kiama.rewriting.Rewriter.debug$default$2: org.kiama.util.Emitter @scala.annotation.unchecked.uncheckedVariance
7787 ===> org.kiama.example.obr.ObrTree.TryBody.productIterator: Iterator[Any]
9527 ===> org.kiama.example.oneohonecompanies.Company.Employee.productIterator: Iterator[Any]
7248 ===> org.kiama.example.oberon0.base.c.CIntExp.productArity: Int
10649 ===> org.kiama.example.til.AST.Sub.apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Sub
11199 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.toString(): String
1158 ===> org.kiama.example.RISC.RISCISA.Branch.label: Int
1822 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10553 ===> org.kiama.example.til.AST.Num.equals(x$1: Any): Boolean
11635 ===> org.kiama.rewriting.Rewriter.loop(c: => Rewriter.this.Strategy,s: => Rewriter.this.Strategy): Rewriter.this.Strategy
4200 ===> org.kiama.example.iswim.secd.StringOps.unescape(s: String): String
3227 ===> org.kiama.example.iswim.secd.IntegerOps.Div.apply(): org.kiama.example.iswim.secd.IntegerOps.Div
6538 ===> org.kiama.example.oberon0.L3.c.CVoidType.toString(): String
1479 ===> org.kiama.example.dataflow.Foreach.copy$default$1: org.kiama.example.dataflow.DataflowAST.Var @scala.annotation.unchecked.uncheckedVariance
5114 ===> org.kiama.example.lambda3.AST.SubstQuery.<init>(n: org.kiama.rewriting.NominalAST.Name,e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.SubstQuery
4501 ===> org.kiama.example.lambda.Generator.arbVar: org.scalacheck.Arbitrary[org.kiama.example.lambda.AST.Var]
5973 ===> org.kiama.example.oberon0.L0.source.SubExp.toString(): String
10639 ===> org.kiama.example.til.AST.Sub.productPrefix: String
752 ===> org.kiama.example.RISC.RISCISA.MOD.productIterator: Iterator[Any]
5780 ===> org.kiama.example.oberon0.L0.source.NamedType.idnuse: org.kiama.example.oberon0.base.source.IdnUse
793 ===> org.kiama.example.RISC.RISCISA.CMP.canEqual(x$1: Any): Boolean
7029 ===> org.kiama.example.oberon0.base.TransformingDriver.processast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): org.kiama.example.oberon0.base.source.ModuleDecl
2556 ===> org.kiama.example.iswim.compiler.Syntax.Block.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Block): Option[List[org.kiama.example.iswim.compiler.Syntax.Expr]]
269 ===> org.kiama.attribution.AttributionTests.MapTree.productPrefix: String
5824 ===> org.kiama.example.oberon0.L0.source.EqExp.left: org.kiama.example.oberon0.L0.source.Expression
2929 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.message: String
11326 ===> org.kiama.rewriting.PositionalRewriterTests.l1: org.kiama.rewriting.SupportPositionalRewriterTests.Leaf
4828 ===> org.kiama.example.lambda2.LambdaTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1278 ===> org.kiama.example.RISC.RISCISA.BSR.toString(): String
6887 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.equals(x$1: Any): Boolean
9300 ===> org.kiama.example.obr.SymbolTable.IntType.productElement(x$1: Int): Any
4193 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.hashCode(): Int
1943 ===> org.kiama.example.iswim.compiler.Parser.keyword(k: String): Parser.this.Parser[Parser.this.Pos]
2414 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.copy(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetRecStmt
1553 ===> org.kiama.example.dataflow.Driver.<init>(): org.kiama.example.dataflow.Driver
9473 ===> org.kiama.example.obr.tests.ObrExecTests.enumExecTests: List[(String, List[Int], Int)]
11161 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.fixity: org.kiama.output.Fixity
9396 ===> org.kiama.example.obr.SymbolTable.EnumTypes.<init>(): org.kiama.example.obr.SymbolTable.EnumTypes
10094 ===> org.kiama.example.prolog.PrologTree.Atom.toString(): String
7201 ===> org.kiama.example.oberon0.base.c.CArrayType.hashCode(): Int
6821 ===> org.kiama.example.oberon0.L4.c.CRecordType.productArity: Int
7373 ===> org.kiama.example.oberon0.drivers.A1Tests.<init>(): org.kiama.example.oberon0.drivers.A1Tests
3405 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.<init>(): RecordOps.this.RecordValue.type
2764 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.copy(): org.kiama.example.iswim.secd.BooleanOps.PushTrue
3875 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.hashCode(): Int
7605 ===> org.kiama.example.obr.ObrTree.ExnConst.toString(): String
9706 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.<init>(): org.kiama.example.picojava.AbstractSyntax.AssignStmt.type
7942 ===> org.kiama.example.obr.ObrTree.IndexExp.toString(): String
560 ===> org.kiama.example.RISC.RISCISA.MVNI.productPrefix: String
7005 ===> org.kiama.example.oberon0.base.Driver.input_$eq(x$1: Option[String]): Unit
7055 ===> org.kiama.example.oberon0.base.Parser.statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
109 ===> org.kiama.attribution.Attribution.paramAttr[A, T <: AnyRef, U](name: String)(f: A => (T => U)): Attribution.this.CachedParamAttribute[A,T,U]
3884 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.copy(): org.kiama.example.iswim.secd.SECDBase.UnexpectedExit
12531 ===> org.kiama.util.ParserUtilitiesTests.Tup5.copy(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup5
9624 ===> org.kiama.example.picojava.AbstractSyntax.Program.equals(x$1: Any): Boolean
7563 ===> org.kiama.example.obr.ObrTree.EnumConst.productPrefix: String
3980 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.copy$default$4: SECDBase.this.Dump @scala.annotation.unchecked.uncheckedVariance
10409 ===> org.kiama.example.til.AST.IfThen.readResolve(): Object
660 ===> org.kiama.example.RISC.RISCISA.MUL.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
7124 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.copy$default$1: org.kiama.example.oberon0.base.c.CVarDecl @scala.annotation.unchecked.uncheckedVariance
264 ===> org.kiama.attribution.AttributionTests.GenSeqTree.readResolve(): Object
11250 ===> org.kiama.rewriting.CallbackRewriter.strategy(f: org.kiama.==>[CallbackRewriter.this.Term,Option[CallbackRewriter.this.Term]]): CallbackRewriter.this.Strategy
11904 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3118 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.copy(): org.kiama.example.iswim.secd.IntComparisonOps.LessThan
3165 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.<init>(): org.kiama.example.iswim.secd.IntegerOps.PushInt.type
3263 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productPrefix: String
10898 ===> org.kiama.machine.Machine.Update.value: Any
4323 ===> org.kiama.example.json.JSONTree.JTrue.canEqual(x$1: Any): Boolean
10594 ===> org.kiama.example.til.AST.Mul.readResolve(): Object
10790 ===> org.kiama.example.transform.AST.Factor.productElement(x$1: Int): Any
1233 ===> org.kiama.example.RISC.RISCISA.BLE.productArity: Int
4494 ===> org.kiama.example.lambda.LambdaTests.<init>(): org.kiama.example.lambda.LambdaTests
3959 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.toString(): String
3568 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.<init>(nm: org.kiama.example.iswim.secd.SECDBase.Name): org.kiama.example.iswim.secd.SECDBase.Lookup
178 ===> org.kiama.attribution.AttributionTests.Leaf.unapply(x$0: AttributionTests.this.Leaf): Option[Int]
5607 ===> org.kiama.example.oberon0.L0.c.CDivExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
12145 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8106 ===> org.kiama.example.obr.ObrTree.PlusExp.<init>(): org.kiama.example.obr.ObrTree.PlusExp.type
12587 ===> org.kiama.util.Positioned.setPos(p: org.kiama.util.Positioned): Positioned.this.type
6339 ===> org.kiama.example.oberon0.L2.source.CaseStatement.canEqual(x$1: Any): Boolean
29 ===> org.kiama.attribution.Attributable.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10076 ===> org.kiama.example.prolog.PrologTree.Integer.toString(): String
4456 ===> org.kiama.example.lambda.AST.App.<init>(): org.kiama.example.lambda.AST.App.type
162 ===> org.kiama.attribution.AttributionTests.Pair.readResolve(): Object
2735 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.<init>(nms: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Primitives
12005 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10857 ===> org.kiama.example.transform.AST.Var.readResolve(): Object
10545 ===> org.kiama.example.til.AST.Num.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
8025 ===> org.kiama.example.obr.ObrTree.NegExp.productArity: Int
6701 ===> org.kiama.example.oberon0.L3.source.FPSection.productElement(x$1: Int): Any
271 ===> org.kiama.attribution.AttributionTests.MapTree.productElement(x$1: Int): Any
9831 ===> org.kiama.example.picojava.NameResolution.lookup: String => (org.kiama.attribution.Attributable => org.kiama.example.picojava.AbstractSyntax.Decl)
4239 ===> org.kiama.example.json.JSONTree.JObject.productIterator: Iterator[Any]
6649 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productElement(x$1: Int): Any
9610 ===> org.kiama.example.oneohonecompanies.Total.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Double](x$1: A1,default: A1 => B1): B1
6570 ===> org.kiama.example.oberon0.L3.c.CCall.hashCode(): Int
11525 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.<init>(): Rewriter.this.Strategy
11393 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
6499 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.apply(mode: org.kiama.example.oberon0.L3.source.Mode,ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.ParamInfo
12488 ===> org.kiama.util.ParserUtilitiesTests.Tup3.copy$default$3: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
6498 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.toString(): String
5797 ===> org.kiama.example.oberon0.L0.source.Assignment.desig: org.kiama.example.oberon0.L0.source.Expression
12115 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5950 ===> org.kiama.example.oberon0.L0.source.AddExp.productElement(x$1: Int): Any
5485 ===> org.kiama.example.oberon0.L0.c.CGtExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CGtExp
1787 ===> org.kiama.example.imperative.AST.While.hashCode(): Int
1001 ===> org.kiama.example.RISC.RISCISA.LDB.equals(x$1: Any): Boolean
606 ===> org.kiama.example.RISC.RISCISA.ADDI.canEqual(x$1: Any): Boolean
3052 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.<init>(): org.kiama.example.iswim.secd.HeapOps.RefTypeValue.type
6533 ===> org.kiama.example.oberon0.L3.c.CVoidType.canEqual(x$1: Any): Boolean
435 ===> org.kiama.attribution.DynamicAttributionTests.Unused.hashCode(): Int
7118 ===> org.kiama.example.oberon0.base.c.CVarDecl.readResolve(): Object
7339 ===> org.kiama.example.oberon0.base.source.IdnDef.toString(): String
6152 ===> org.kiama.example.oberon0.L0.source.IdnExp.unapply(x$0: org.kiama.example.oberon0.L0.source.IdnExp): Option[org.kiama.example.oberon0.base.source.IdnUse]
460 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[DynamicAttributionTests.this.Tree,Int] with Serializable
9536 ===> org.kiama.example.oneohonecompanies.Company.Employee.readResolve(): Object
3631 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productPrefix: String
11128 ===> org.kiama.output.PrettyPrinterTests.<init>(): org.kiama.output.PrettyPrinterTests
3200 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.<init>(): org.kiama.example.iswim.secd.IntegerOps.Mult
1663 ===> org.kiama.example.imperative.AST.Sub.copy(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Sub
4324 ===> org.kiama.example.json.JSONTree.JTrue.hashCode(): Int
9539 ===> org.kiama.example.oneohonecompanies.Company.PU.<init>(e: org.kiama.example.oneohonecompanies.Company.Employee): org.kiama.example.oneohonecompanies.Company.PU
10517 ===> org.kiama.example.til.AST.Id.canEqual(x$1: Any): Boolean
6 ===> org.kiama.attribution.Attributable.prev: org.kiama.attribution.Attributable
6180 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productIterator: Iterator[Any]
11157 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.prio: Int
3363 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productPrefix: String
3281 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
8360 ===> org.kiama.example.obr.RISCTree.AddW.unapply(x$0: org.kiama.example.obr.RISCTree.AddW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
10136 ===> org.kiama.example.prolog.PrologTree.Cut.hashCode(): Int
9284 ===> org.kiama.example.obr.SymbolTable.Multiple.<init>(): org.kiama.example.obr.SymbolTable.Multiple.type
2018 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.<init>(): org.kiama.example.iswim.compiler.Syntax.NumVal.type
2525 ===> org.kiama.example.iswim.compiler.Syntax.While.copy(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.While
3336 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productIterator: Iterator[Any]
7656 ===> org.kiama.example.obr.ObrTree.ForStmt.copy$default$4: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
4655 ===> org.kiama.example.lambda2.AST.Bind.productArity: Int
11107 ===> org.kiama.output.PrettyPrinterBase.comma: PrettyPrinterBase.this.Doc
3088 ===> org.kiama.example.iswim.secd.IOOps.Write.hashCode(): Int
10762 ===> org.kiama.example.transform.AST.ExpR.<init>(): org.kiama.example.transform.AST.ExpR
380 ===> org.kiama.attribution.Decorators.$anonfun.applyOrElse[A1 <: T, B1 >: U](x$1: A1,default: A1 => B1): B1
1942 ===> org.kiama.example.iswim.compiler.Parser.name(msg: String): Parser.this.Parser[org.kiama.example.iswim.compiler.Syntax.Variable]
2760 ===> org.kiama.example.iswim.driver.SECD.program: org.kiama.example.iswim.secd.SECDBase.CodeSegment
8433 ===> org.kiama.example.obr.RISCTree.CmpgtW.toString(): String
7658 ===> org.kiama.example.obr.ObrTree.ForStmt.productArity: Int
1816 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
5037 ===> org.kiama.example.lambda3.AST.EquivQuery.<init>(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.EquivQuery
9863 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.<init>(): org.kiama.example.picojava.tests.BasicNameResolutionTests
12155 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2918 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.hashCode(): Int
5880 ===> org.kiama.example.oberon0.L0.source.LtExp.readResolve(): Object
5006 ===> org.kiama.example.lambda3.AST.App.productElement(x$1: Int): Any
440 ===> org.kiama.attribution.DynamicAttributionTests.Unused.apply(b: Boolean): DynamicAttributionTests.this.Unused
5884 ===> org.kiama.example.oberon0.L0.source.LeExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.LeExp
8473 ===> org.kiama.example.obr.RISCTree.DivW.<init>(): org.kiama.example.obr.RISCTree.DivW.type
1105 ===> org.kiama.example.RISC.RISCISA.RD.apply(a: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RD
811 ===> org.kiama.example.RISC.RISCISA.CMPI.productIterator: Iterator[Any]
2205 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.equals(x$1: Any): Boolean
12306 ===> org.kiama.util.StringEmitter.emitln(): Unit
2154 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.l: org.kiama.example.iswim.compiler.Syntax.Expr
7171 ===> org.kiama.example.oberon0.base.c.CIntType.toString(): String
738 ===> org.kiama.example.RISC.RISCISA.DIVI.unapply(x$0: org.kiama.example.RISC.RISCISA.DIVI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
830 ===> org.kiama.example.RISC.RISCISA.CHKI.productIterator: Iterator[Any]
8019 ===> org.kiama.example.obr.ObrTree.ModExp.readResolve(): Object
6728 ===> org.kiama.example.oberon0.L3.source.Call.apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse,params: List[org.kiama.example.oberon0.L0.source.Expression]): org.kiama.example.oberon0.L3.source.Call
6845 ===> org.kiama.example.oberon0.L4.c.CIndexExp.toString(): String
3084 ===> org.kiama.example.iswim.secd.IOOps.Write.productArity: Int
10521 ===> org.kiama.example.til.AST.Id.toString(): String
3413 ===> org.kiama.example.iswim.secd.RecordOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
8874 ===> org.kiama.example.obr.SPARCTree.Datum.<init>(): org.kiama.example.obr.SPARCTree.Datum
4202 ===> org.kiama.example.iswim.secd.StringOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
7379 ===> org.kiama.example.oberon0.drivers.A2aTests.<init>(): org.kiama.example.oberon0.drivers.A2aTests
2017 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.equals(x$1: Any): Boolean
4075 ===> org.kiama.example.iswim.secd.StackOps.Pop.copy(n: Int): org.kiama.example.iswim.secd.StackOps.Pop
6355 ===> org.kiama.example.oberon0.L2.source.Case.productArity: Int
11669 ===> org.kiama.rewriting.Rewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[Rewriter.this.Term,Rewriter.this.Term] with Serializable
539 ===> org.kiama.example.RISC.RISCISA.MVN.productPrefix: String
513 ===> org.kiama.example.RISC.RISCISA.MOVI.toString(): String
9640 ===> org.kiama.example.picojava.AbstractSyntax.Block.toString(): String
7870 ===> org.kiama.example.obr.ObrTree.EqualExp.unapply(x$0: org.kiama.example.obr.ObrTree.EqualExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
27 ===> org.kiama.attribution.Attributable.<init>(): org.kiama.attribution.Attributable.type
1956 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.<init>(bds: List[org.kiama.example.iswim.compiler.Syntax.Stmt]): org.kiama.example.iswim.compiler.Syntax.IswimProg
7663 ===> org.kiama.example.obr.ObrTree.ForStmt.toString(): String
11864 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3379 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productPrefix: String
2167 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.equals(x$1: Any): Boolean
10858 ===> org.kiama.example.transform.Analysis.<init>(): org.kiama.example.transform.Analysis.type
8698 ===> org.kiama.example.obr.SPARCEncoder.arith2(opcode: String,e: org.kiama.example.obr.SPARCTree.Datum,d: org.kiama.example.obr.SPARCTree.Datum): Unit
2980 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.copy(s: ExceptionHandler.this.Stack,e: ExceptionHandler.this.Environment,c: org.kiama.example.iswim.secd.SECDBase.Code,d: ExceptionHandler.this.Dump,h: ExceptionHandler.this.Handler): ExceptionHandler.this.ExnContValue
7241 ===> org.kiama.example.oberon0.base.c.CReturn.readResolve(): Object
4146 ===> org.kiama.example.iswim.secd.StringOps.PushString.apply(s: String): org.kiama.example.iswim.secd.StringOps.PushString
7584 ===> org.kiama.example.obr.ObrTree.IntConst.productElement(x$1: Int): Any
9038 ===> org.kiama.example.obr.SPARCTree.LdW.equals(x$1: Any): Boolean
5347 ===> org.kiama.example.oberon0.L0.c.CInitDecl.copy$default$1: org.kiama.example.oberon0.base.c.CVarDecl @scala.annotation.unchecked.uncheckedVariance
6097 ===> org.kiama.example.oberon0.L0.source.NegExp.toString(): String
5836 ===> org.kiama.example.oberon0.L0.source.EqExp.toString(): String
4817 ===> org.kiama.example.lambda2.Lambda.processline(line: String): Unit
3557 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productIterator: Iterator[Any]
11541 ===> org.kiama.rewriting.Rewriter.rulef(f: Rewriter.this.Term => Rewriter.this.Term): Rewriter.this.Strategy
3320 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productElement(x$1: Int): Any
5568 ===> org.kiama.example.oberon0.L0.c.COrExp.productPrefix: String
11824 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5443 ===> org.kiama.example.oberon0.L0.c.CLtExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CLtExp
1988 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.readResolve(): Object
2855 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.equals(x$1: Any): Boolean
1552 ===> org.kiama.example.dataflow.DataflowTests.prog: org.kiama.example.dataflow.DataflowAST.Block
8336 ===> org.kiama.example.obr.RISCTree.Read.toString(): String
6624 ===> org.kiama.example.oberon0.L3.c.CDerefExp.canEqual(x$1: Any): Boolean
2960 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.toString(): String
4819 ===> org.kiama.example.lambda2.Lambda.Command.unapply(line: String): Option[Array[String]]
2359 ===> org.kiama.example.iswim.compiler.Syntax.Let.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Let
8487 ===> org.kiama.example.obr.RISCTree.IntDatum.hashCode(): Int
11356 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.copy(a: org.kiama.rewriting.SupportPositionalRewriterTests.Node): org.kiama.rewriting.SupportPositionalRewriterTests.One
8410 ===> org.kiama.example.obr.RISCTree.CmpneW.productElement(x$1: Int): Any
10538 ===> org.kiama.example.til.AST.Var.toString(): String
3766 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.equals(x$1: Any): Boolean
9534 ===> org.kiama.example.oneohonecompanies.Company.Employee.apply(n: org.kiama.example.oneohonecompanies.Company.Name,a: org.kiama.example.oneohonecompanies.Company.Address,s: org.kiama.example.oneohonecompanies.Company.Salary): org.kiama.example.oneohonecompanies.Company.Employee
9964 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productArity: Int
1599 ===> org.kiama.example.imperative.AST.Var.productPrefix: String
4330 ===> org.kiama.example.json.JSONTree.JTrue.unapply(x$0: org.kiama.example.json.JSONTree.JTrue): Boolean
684 ===> org.kiama.example.RISC.RISCISA.MULI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
2168 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.<init>(): org.kiama.example.iswim.compiler.Syntax.NotEqual.type
5944 ===> org.kiama.example.oberon0.L0.source.AddExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.AddExp
9514 ===> org.kiama.example.oneohonecompanies.Company.Dept.unapply(x$0: org.kiama.example.oneohonecompanies.Company.Dept): Option[(org.kiama.example.oneohonecompanies.Company.Name, org.kiama.example.oneohonecompanies.Company.Manager, List[org.kiama.example.oneohonecompanies.Company.SubUnit])]
6237 ===> org.kiama.example.oberon0.L1.source.IfStatement.copy(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block,elsifs: List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)],optelse: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.L1.source.IfStatement
12316 ===> org.kiama.util.Environments.Named.count_$eq(x$1: Int): Unit
4735 ===> org.kiama.example.lambda2.AST.SubOp.<init>(): org.kiama.example.lambda2.AST.SubOp
7753 ===> org.kiama.example.obr.ObrTree.RaiseStmt.hashCode(): Int
5668 ===> org.kiama.example.oberon0.L0.c.CNegExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
5136 ===> org.kiama.example.lambda3.AST.SwapQuery.execute: SwapQuery.this.T
8659 ===> org.kiama.example.obr.RISCTree.Label.num: Int
12253 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.optimiseadd: org.kiama.example.imperative.AST.Exp => org.kiama.example.imperative.AST.Exp
7963 ===> org.kiama.example.obr.ObrTree.LessExp.left: org.kiama.example.obr.ObrTree.Expression
4752 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
10241 ===> org.kiama.example.prolog.SymbolTable.ListType.readResolve(): Object
9535 ===> org.kiama.example.oneohonecompanies.Company.Employee.unapply(x$0: org.kiama.example.oneohonecompanies.Company.Employee): Option[(org.kiama.example.oneohonecompanies.Company.Name, org.kiama.example.oneohonecompanies.Company.Address, org.kiama.example.oneohonecompanies.Company.Salary)]
10697 ===> org.kiama.example.til.TIL2_1.transform(ast: org.kiama.example.til.AST.Program): org.kiama.example.til.AST.Program
4416 ===> org.kiama.example.lambda.AST.Var.hashCode(): Int
5343 ===> org.kiama.example.oberon0.L0.c.CInitDecl.decl: org.kiama.example.oberon0.base.c.CVarDecl
6202 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.canEqual(x$1: Any): Boolean
11780 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3535 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.nms: List[org.kiama.example.iswim.secd.SECDBase.Name]
9168 ===> org.kiama.example.obr.SPARCTree.Indexed.toString(): String
1143 ===> org.kiama.example.RISC.RISCISA.WRL.toString(): String
3834 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.apply(): org.kiama.example.iswim.secd.SECDBase.UnboundVariable
2191 ===> org.kiama.example.iswim.compiler.Syntax.Less.readResolve(): Object
10542 ===> org.kiama.example.til.AST.Num.n: Int
2508 ===> org.kiama.example.iswim.compiler.Syntax.If.copy$default$3: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
1526 ===> org.kiama.example.dataflow.DataflowFor.setup(): Unit
8445 ===> org.kiama.example.obr.RISCTree.CmpltW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
11360 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productElement(x$1: Int): Any
11933 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4475 ===> org.kiama.example.lambda.AST.Sub.toString(): String
5506 ===> org.kiama.example.oberon0.L0.c.CGeExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
8141 ===> org.kiama.example.obr.ObrTree.StarExp.hashCode(): Int
4776 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
5516 ===> org.kiama.example.oberon0.L0.c.CGeExp.<init>(): org.kiama.example.oberon0.L0.c.CGeExp.type
8303 ===> org.kiama.example.obr.RISCTree.StW.toString(): String
6132 ===> org.kiama.example.oberon0.L0.source.IntExp.<init>(): org.kiama.example.oberon0.L0.source.IntExp.type
3167 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.apply(n: Int): org.kiama.example.iswim.secd.IntegerOps.PushInt
4496 ===> org.kiama.example.lambda.LambdaTests.evalTo(term: String,result: org.kiama.example.lambda.AST.Exp): Boolean
8694 ===> org.kiama.example.obr.SPARCEncoder.opnd(d: org.kiama.example.obr.SPARCTree.Datum): String
5246 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productIterator: Iterator[Any]
9211 ===> org.kiama.example.obr.SymbolTable.prevloc_$eq(x$1: Int): Unit
4038 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.readResolve(): Object
6626 ===> org.kiama.example.oberon0.L3.c.CDerefExp.toString(): String
6729 ===> org.kiama.example.oberon0.L3.source.Call.unapply(x$0: org.kiama.example.oberon0.L3.source.Call): Option[(org.kiama.example.oberon0.base.source.IdnUse, List[org.kiama.example.oberon0.L0.source.Expression])]
1414 ===> org.kiama.example.dataflow.DataflowAST.If.productArity: Int
786 ===> org.kiama.example.RISC.RISCISA.CMP.<init>(b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.CMP
3723 ===> org.kiama.example.iswim.secd.SECDBase.Value.<init>(): org.kiama.example.iswim.secd.SECDBase.Value
3751 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.equals(x$1: Any): Boolean
10614 ===> org.kiama.example.til.AST.Add.l: org.kiama.example.til.AST.Exp
3942 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.<init>(): org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive
7015 ===> org.kiama.example.oberon0.base.Driver.initialiseSemanticAnalysis: Unit
3863 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.toString(): String
3197 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.apply(): org.kiama.example.iswim.secd.IntegerOps.Sub
7581 ===> org.kiama.example.obr.ObrTree.IntConst.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
5348 ===> org.kiama.example.oberon0.L0.c.CInitDecl.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
2209 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.LessEq): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
4597 ===> org.kiama.example.lambda2.AST.Opn.canEqual(x$1: Any): Boolean
6722 ===> org.kiama.example.oberon0.L3.source.Call.canEqual(x$1: Any): Boolean
2410 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.LetStmt): Option[List[org.kiama.example.iswim.compiler.Syntax.Binding]]
2458 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.toString(): String
434 ===> org.kiama.attribution.DynamicAttributionTests.Unused.canEqual(x$1: Any): Boolean
4688 ===> org.kiama.example.lambda2.AST.FunType.copy$default$2: org.kiama.example.lambda2.AST.Type @scala.annotation.unchecked.uncheckedVariance
3418 ===> org.kiama.example.iswim.secd.SECDBase.ByteCodeBase.<init>(): org.kiama.example.iswim.secd.SECDBase.ByteCodeBase
11817 ===> org.kiama.rewriting.RewriterTests.NotSame.canEqual(x$1: Any): Boolean
3824 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.copy(): org.kiama.example.iswim.secd.SECDBase.UnboundVariable
9865 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.xInR: org.kiama.example.picojava.AbstractSyntax.Use
11435 ===> org.kiama.rewriting.PositionedRewriterTests.ptf: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
1357 ===> org.kiama.example.dataflow.LivenessImpl.$init$(): Unit
149 ===> org.kiama.attribution.AttributionTests.Pair.copy$default$2: AttributionTests.this.Tree @scala.annotation.unchecked.uncheckedVariance
9870 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.xInA: org.kiama.example.picojava.AbstractSyntax.Use
6664 ===> org.kiama.example.oberon0.L3.source.VarMode.productArity: Int
7430 ===> org.kiama.example.obr.ObrTree.ObrInt.idn2: org.kiama.example.obr.ObrTree.Identifier
10415 ===> org.kiama.example.til.AST.IfElse.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10973 ===> org.kiama.output.Postfix.productPrefix: String
10670 ===> org.kiama.example.til.AST.Eq.readResolve(): Object
6803 ===> org.kiama.example.oberon0.L4.SymbolTable.isNotArray(e: SymbolTable.this.Entity): Boolean
7062 ===> org.kiama.example.oberon0.base.c.CASTNode.<init>(): org.kiama.example.oberon0.base.c.CASTNode
1960 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productArity: Int
4307 ===> org.kiama.example.json.JSONTree.JNumber.productIterator: Iterator[Any]
4190 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productElement(x$1: Int): Any
2947 ===> org.kiama.example.iswim.secd.ConversionOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
2797 ===> org.kiama.example.iswim.secd.BooleanOps.Test.copy(ct: org.kiama.example.iswim.secd.SECDBase.CodeSegment,ce: org.kiama.example.iswim.secd.SECDBase.CodeSegment): org.kiama.example.iswim.secd.BooleanOps.Test
11258 ===> org.kiama.rewriting.NominalAST.Name.toString(): String
8437 ===> org.kiama.example.obr.RISCTree.CmpgtW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpgtW
5542 ===> org.kiama.example.oberon0.L0.c.CSubExp.right: org.kiama.example.oberon0.base.c.CExpression
11263 ===> org.kiama.rewriting.NominalAST.Name.productArity: Int
1808 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
10162 ===> org.kiama.example.prolog.SymbolTable.Predicate.argtypes: List[org.kiama.example.prolog.SymbolTable.Type]
2761 ===> org.kiama.example.iswim.driver.SECD.init(): Unit
7845 ===> org.kiama.example.obr.ObrTree.BoolExp.hashCode(): Int
10629 ===> org.kiama.example.til.AST.Add.toString(): String
7677 ===> org.kiama.example.obr.ObrTree.IfStmt.copy$default$3: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
8048 ===> org.kiama.example.obr.ObrTree.NotEqualExp.hashCode(): Int
1478 ===> org.kiama.example.dataflow.Foreach.copy(cond: org.kiama.example.dataflow.DataflowAST.Var,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.Foreach
11533 ===> org.kiama.rewriting.Rewriter.PlusStrategy.rhs: Rewriter.this.Strategy
179 ===> org.kiama.attribution.AttributionTests.Leaf.readResolve(): Object
4622 ===> org.kiama.example.lambda2.AST.Let.toString(): String
4135 ===> org.kiama.example.iswim.secd.StringOps.PushString.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
186 ===> org.kiama.attribution.AttributionTests.Unused.productElement(x$1: Int): Any
995 ===> org.kiama.example.RISC.RISCISA.LDB.productPrefix: String
6041 ===> org.kiama.example.oberon0.L0.source.ModExp.left: org.kiama.example.oberon0.L0.source.Expression
6442 ===> org.kiama.example.oberon0.L3.SymbolTable.$init$(): Unit
4425 ===> org.kiama.example.lambda.AST.Lam.<init>(x: org.kiama.example.lambda.AST.Idn,e: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.Lam
11487 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.toString(): String
1509 ===> org.kiama.example.dataflow.For.body: org.kiama.example.dataflow.DataflowAST.Stm
7507 ===> org.kiama.example.obr.ObrTree.ArrayVar.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
6740 ===> org.kiama.example.oberon0.L4.NameAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
2681 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.e: org.kiama.example.iswim.compiler.Syntax.Expr
5799 ===> org.kiama.example.oberon0.L0.source.Assignment.<init>(desig: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.Assignment
1300 ===> org.kiama.example.RISC.RISCISA.RET.productIterator: Iterator[Any]
2541 ===> org.kiama.example.iswim.compiler.Syntax.Block.es: List[org.kiama.example.iswim.compiler.Syntax.Expr]
5278 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productPrefix: String
5858 ===> org.kiama.example.oberon0.L0.source.NeExp.toString(): String
46 ===> org.kiama.attribution.AttributionBase.CircularAttribute.apply(t: T): U
4929 ===> org.kiama.example.lambda2.PrettyPrinter.showtype(t: org.kiama.example.lambda2.AST.Type): org.kiama.example.lambda2.PrettyPrinter.Doc
12165 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9452 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productPrefix: String
5842 ===> org.kiama.example.oberon0.L0.source.EqExp.readResolve(): Object
2602 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.<init>(): org.kiama.example.iswim.compiler.Syntax.Pattern.type
11044 ===> org.kiama.output.PrettyPrinterBase.list$default$5[T]: (Seq[PrettyPrinterBase.this.Doc], PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
8509 ===> org.kiama.example.obr.RISCTree.LdW.apply(mem: org.kiama.example.obr.RISCTree.Address): org.kiama.example.obr.RISCTree.LdW
3001 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productElement(x$1: Int): Any
2605 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Pattern): Option[List[org.kiama.example.iswim.compiler.Syntax.Variable]]
8592 ===> org.kiama.example.obr.RISCTree.SubW.productElement(x$1: Int): Any
10500 ===> org.kiama.example.til.AST.Write.toString(): String
7403 ===> org.kiama.example.obr.Driver.spillRISCAssemFlag_$eq(x$1: Boolean): Unit
12200 ===> org.kiama.rewriting.RewriterTests.everywheretdtest(everys: => org.kiama.rewriting.Rewriter.Strategy => org.kiama.rewriting.Rewriter.Strategy): Unit
6856 ===> org.kiama.example.oberon0.L4.c.CFieldExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
4228 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
5641 ===> org.kiama.example.oberon0.L0.c.CAndExp.left: org.kiama.example.oberon0.base.c.CExpression
10733 ===> org.kiama.example.transform.AST.Program.productArity: Int
5661 ===> org.kiama.example.oberon0.L0.c.CUnaryExpression.<init>(): org.kiama.example.oberon0.L0.c.CUnaryExpression
8576 ===> org.kiama.example.obr.RISCTree.RemW.hashCode(): Int
9827 ===> org.kiama.example.picojava.Main.<init>(): org.kiama.example.picojava.Main.type
6085 ===> org.kiama.example.oberon0.L0.source.NegExp.op: String
10792 ===> org.kiama.example.transform.AST.Factor.canEqual(x$1: Any): Boolean
12357 ===> org.kiama.util.Environments.isDefinedInScope(env: Environments.this.Environment,i: String): Boolean
1060 ===> org.kiama.example.RISC.RISCISA.STB.productElement(x$1: Int): Any
11652 ===> org.kiama.rewriting.Rewriter.dontstop(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
9186 ===> org.kiama.example.obr.SPARCTree.Label.apply(num: Int): org.kiama.example.obr.SPARCTree.Label
5612 ===> org.kiama.example.oberon0.L0.c.CDivExp.canEqual(x$1: Any): Boolean
5823 ===> org.kiama.example.oberon0.L0.source.RelationalExpression.fixity: org.kiama.output.Infix
935 ===> org.kiama.example.RISC.RISCISA.XOR.productIterator: Iterator[Any]
2667 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr,c: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.ThrowTo
4670 ===> org.kiama.example.lambda2.AST.IntType.productPrefix: String
1987 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.ExprStmt): Option[org.kiama.example.iswim.compiler.Syntax.Expr]
538 ===> org.kiama.example.RISC.RISCISA.MVN.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MVN
824 ===> org.kiama.example.RISC.RISCISA.CHKI.copy(b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.CHKI
3821 ===> org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue.toString(): String
2503 ===> org.kiama.example.iswim.compiler.Syntax.If.els: org.kiama.example.iswim.compiler.Syntax.Expr
4851 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5644 ===> org.kiama.example.oberon0.L0.c.CAndExp.priority: Int
4287 ===> org.kiama.example.json.JSONTree.JString.productPrefix: String
397 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productArity: Int
9683 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.hashCode(): Int
5632 ===> org.kiama.example.oberon0.L0.c.CModExp.canEqual(x$1: Any): Boolean
7768 ===> org.kiama.example.obr.ObrTree.TryStmt.productArity: Int
11048 ===> org.kiama.output.PrettyPrinterBase.plist$default$4: PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
5719 ===> org.kiama.example.oberon0.L0.c.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
6827 ===> org.kiama.example.oberon0.L4.c.CRecordType.equals(x$1: Any): Boolean
10948 ===> org.kiama.output.RightAssoc.productIterator: Iterator[Any]
12391 ===> org.kiama.util.Messaging.Record.copy(pos: scala.util.parsing.input.Position,message: String): org.kiama.util.Messaging.Record
1487 ===> org.kiama.example.dataflow.Foreach.toString(): String
3733 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.canEqual(x$1: Any): Boolean
12382 ===> org.kiama.util.IO.filereader$default$2: String @scala.annotation.unchecked.uncheckedVariance
7153 ===> org.kiama.example.oberon0.base.c.CBlock.equals(x$1: Any): Boolean
1104 ===> org.kiama.example.RISC.RISCISA.RD.toString(): String
9278 ===> org.kiama.example.obr.SymbolTable.Multiple.productElement(x$1: Int): Any
1256 ===> org.kiama.example.RISC.RISCISA.BGT.toString(): String
11506 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.type
4757 ===> org.kiama.example.lambda2.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
6035 ===> org.kiama.example.oberon0.L0.source.DivExp.equals(x$1: Any): Boolean
2163 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productIterator: Iterator[Any]
12054 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9479 ===> org.kiama.example.oneohonecompanies.Company.Company.<init>(depts: List[org.kiama.example.oneohonecompanies.Company.Dept]): org.kiama.example.oneohonecompanies.Company.Company
11191 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productArity: Int
8974 ===> org.kiama.example.obr.SPARCTree.CmpltW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpltW
6081 ===> org.kiama.example.oberon0.L0.source.UnaryExpression.fixity: org.kiama.output.Prefix.type
7616 ===> org.kiama.example.obr.ObrTree.AssignStmt.copy(left: org.kiama.example.obr.ObrTree.AssignNode,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AssignStmt
2662 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.e: org.kiama.example.iswim.compiler.Syntax.Expr
3216 ===> org.kiama.example.iswim.secd.IntegerOps.Div.copy(): org.kiama.example.iswim.secd.IntegerOps.Div
11332 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{}
10407 ===> org.kiama.example.til.AST.IfThen.apply(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.IfThen
8490 ===> org.kiama.example.obr.RISCTree.IntDatum.<init>(): org.kiama.example.obr.RISCTree.IntDatum.type
12064 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5784 ===> org.kiama.example.oberon0.L0.source.NamedType.productPrefix: String
11088 ===> org.kiama.output.PrettyPrinterBase.rparen: PrettyPrinterBase.this.Doc
12397 ===> org.kiama.util.Messaging.Record.productIterator: Iterator[Any]
1415 ===> org.kiama.example.dataflow.DataflowAST.If.productElement(x$1: Int): Any
5442 ===> org.kiama.example.oberon0.L0.c.CLtExp.right: org.kiama.example.oberon0.base.c.CExpression
1558 ===> org.kiama.example.dataflow.Optimise.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7608 ===> org.kiama.example.obr.ObrTree.ExnConst.toString(): String
3102 ===> org.kiama.example.iswim.secd.IOOps.Read.canEqual(x$1: Any): Boolean
2005 ===> org.kiama.example.iswim.compiler.Syntax.Variable.readResolve(): Object
1834 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2834 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.canEqual(x$1: Any): Boolean
3928 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.message: String
5154 ===> org.kiama.example.lambda3.Evaluator.<init>(): org.kiama.example.lambda3.Evaluator.type
11007 ===> org.kiama.output.ParenPrettyPrinter.bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side): ParenPrettyPrinter.this.Doc
11170 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productElement(x$1: Int): Any
3252 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.hashCode(): Int
12168 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4439 ===> org.kiama.example.lambda.AST.Lam.apply(x: org.kiama.example.lambda.AST.Idn,e: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.Lam
6960 ===> org.kiama.example.oberon0.L4.source.FieldExp.toString(): String
8381 ===> org.kiama.example.obr.RISCTree.Cond.unapply(x$0: org.kiama.example.obr.RISCTree.Cond): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
2489 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productArity: Int
9981 ===> org.kiama.example.prolog.Interpreter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6147 ===> org.kiama.example.oberon0.L0.source.IdnExp.toString(): String
5690 ===> org.kiama.example.oberon0.L0.c.CNotExp.productElement(x$1: Int): Any
3722 ===> org.kiama.example.iswim.secd.SECDBase.GetType.readResolve(): Object
6181 ===> org.kiama.example.oberon0.L1.c.CIfStatement.canEqual(x$1: Any): Boolean
10699 ===> org.kiama.example.til.TIL2_1.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
182 ===> org.kiama.attribution.AttributionTests.Unused.copy(b: Boolean): AttributionTests.this.Unused
3572 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productArity: Int
2664 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
2490 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productElement(x$1: Int): Any
5630 ===> org.kiama.example.oberon0.L0.c.CModExp.productElement(x$1: Int): Any
2004 ===> org.kiama.example.iswim.compiler.Syntax.Variable.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Variable): Option[String]
4563 ===> org.kiama.example.lambda2.AST.Lam.apply(i: org.kiama.example.lambda2.AST.Idn,t: org.kiama.example.lambda2.AST.Type,e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Lam
9059 ===> org.kiama.example.obr.SPARCTree.MulW.toString(): String
12586 ===> org.kiama.util.Positioned.setFinish(p: scala.util.parsing.input.Position): Positioned.this.type
8224 ===> org.kiama.example.obr.RISCTree.Bne.dest: org.kiama.example.obr.RISCTree.Label
6371 ===> org.kiama.example.oberon0.L2.source.ValCond.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
4224 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
12141 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5385 ===> org.kiama.example.oberon0.L0.c.CAssignment.productPrefix: String
5233 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.toString(): String
5830 ===> org.kiama.example.oberon0.L0.source.EqExp.productPrefix: String
3237 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.hashCode(): Int
9546 ===> org.kiama.example.oneohonecompanies.Company.PU.canEqual(x$1: Any): Boolean
840 ===> org.kiama.example.RISC.RISCISA.AND.b: org.kiama.example.RISC.RISCISA.RegNo
10993 ===> org.kiama.output.Infix.<init>(): org.kiama.output.Infix.type
3708 ===> org.kiama.example.iswim.secd.SECDBase.GetType.<init>(): org.kiama.example.iswim.secd.SECDBase.GetType
4283 ===> org.kiama.example.json.JSONTree.JString.value: String
10047 ===> org.kiama.example.prolog.PrologTree.Rule.canEqual(x$1: Any): Boolean
1190 ===> org.kiama.example.RISC.RISCISA.BNE.equals(x$1: Any): Boolean
6420 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translate(e: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.base.c.CExpression
11855 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
938 ===> org.kiama.example.RISC.RISCISA.XOR.equals(x$1: Any): Boolean
2286 ===> org.kiama.example.iswim.compiler.Syntax.And.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.And
4087 ===> org.kiama.example.iswim.secd.StackOps.Pop.apply(n: Int): org.kiama.example.iswim.secd.StackOps.Pop
9601 ===> org.kiama.example.oneohonecompanies.SampleCompany.karl: org.kiama.example.oneohonecompanies.Company.Employee
40 ===> org.kiama.attribution.AttributionBase.CircularState.CHANGE_$eq(x$1: Boolean): Unit
7726 ===> org.kiama.example.obr.ObrTree.WhileStmt.body: List[org.kiama.example.obr.ObrTree.Statement]
2069 ===> org.kiama.example.iswim.compiler.Syntax.Minus.canEqual(x$1: Any): Boolean
10202 ===> org.kiama.example.prolog.SymbolTable.AtomType.productElement(x$1: Int): Any
3742 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.TypeTypeValue
1011 ===> org.kiama.example.RISC.RISCISA.POP.toString(): String
6978 ===> org.kiama.example.oberon0.L4.source.FieldIdn.equals(x$1: Any): Boolean
12195 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5104 ===> org.kiama.example.lambda3.AST.FreshQuery.toString(): String
6680 ===> org.kiama.example.oberon0.L3.source.ValMode.productElement(x$1: Int): Any
6928 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.readResolve(): Object
11622 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.applyOrElse[A1 <: Rewriter.this.Term, B1 >: Rewriter.this.Strategy](x$1: A1,default: A1 => B1): B1
6526 ===> org.kiama.example.oberon0.L3.TypeAnalyser.exptypeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
2727 ===> org.kiama.example.iswim.compiler.Syntax.Assign.toString(): String
1116 ===> org.kiama.example.RISC.RISCISA.WRD.productIterator: Iterator[Any]
1083 ===> org.kiama.example.RISC.RISCISA.PSH.canEqual(x$1: Any): Boolean
1546 ===> org.kiama.example.dataflow.DataflowTests.s3: org.kiama.example.dataflow.DataflowAST.Assign
10578 ===> org.kiama.example.til.AST.Mul.<init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Mul
2321 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.s: String
3175 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productIterator: Iterator[Any]
3546 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.equals(x$1: Any): Boolean
11819 ===> org.kiama.rewriting.RewriterTests.NotSame.toString(): String
6854 ===> org.kiama.example.oberon0.L4.c.CFieldExp.<init>(record: org.kiama.example.oberon0.base.c.CExpression,field: String): org.kiama.example.oberon0.L4.c.CFieldExp
1934 ===> org.kiama.example.iswim.compiler.Parser.Pos.hashCode(): Int
2199 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productArity: Int
989 ===> org.kiama.example.RISC.RISCISA.LDB.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.LDB
7444 ===> org.kiama.example.obr.ObrTree.ObrInt.equals(x$1: Any): Boolean
11139 ===> org.kiama.output.PrettyPrinterTests.Val.productIterator: Iterator[Any]
3961 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.copy(): SECDBase.this.EmptyValue
3463 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.toString(): String
10372 ===> org.kiama.example.til.AST.Assign.i: org.kiama.example.til.AST.Id
5306 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.toString(): String
6424 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,Int] with Serializable
4008 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.copy$default$1: org.kiama.example.iswim.secd.SECDBase.Name @scala.annotation.unchecked.uncheckedVariance
2996 ===> org.kiama.example.iswim.secd.HeapOps.<init>(): org.kiama.example.iswim.secd.HeapOps.type
12384 ===> org.kiama.util.IO.filewriter$default$2: String @scala.annotation.unchecked.uncheckedVariance
11902 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9951 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.equals(x$1: Any): Boolean
2915 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productElement(x$1: Int): Any
5212 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.hashCode(): Int
1181 ===> org.kiama.example.RISC.RISCISA.BNE.<init>(label: Int): org.kiama.example.RISC.RISCISA.BNE
3826 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productArity: Int
986 ===> org.kiama.example.RISC.RISCISA.LDB.a: org.kiama.example.RISC.RISCISA.RegNo
12459 ===> org.kiama.util.ParserUtilitiesTests.Node.apply(i: Int): ParserUtilitiesTests.this.Node
4888 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
1589 ===> org.kiama.example.imperative.AST.Num.unapply(x$0: org.kiama.example.imperative.AST.Num): Option[Double]
4970 ===> org.kiama.example.lambda3.AST.Num.productElement(x$1: Int): Any
4454 ===> org.kiama.example.lambda.AST.App.hashCode(): Int
50 ===> org.kiama.attribution.AttributionBase.ParamAttributeKey.equals(o: Any): Boolean
1014 ===> org.kiama.example.RISC.RISCISA.POP.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
12243 ===> org.kiama.rewriting.UniplateTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4823 ===> org.kiama.example.lambda2.LambdaTests.assertMessage(term: String,line: Int,col: Int,msg: String): Unit
826 ===> org.kiama.example.RISC.RISCISA.CHKI.copy$default$2: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
11625 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
2208 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LessEq
5028 ===> org.kiama.example.lambda3.AST.Lam.<init>(): org.kiama.example.lambda3.AST.Lam.type
7247 ===> org.kiama.example.oberon0.base.c.CIntExp.productPrefix: String
9042 ===> org.kiama.example.obr.SPARCTree.LdW.unapply(x$0: org.kiama.example.obr.SPARCTree.LdW): Option[org.kiama.example.obr.SPARCTree.Address]
3800 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue): Boolean
4393 ===> org.kiama.example.lambda.AST.Num.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
2196 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
7129 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productElement(x$1: Int): Any
10931 ===> org.kiama.machine.MachineTests.MM.t: org.kiama.machine.MachineTests.MM.State[String]
1919 ===> org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.compiler.Syntax.Binding,org.kiama.example.iswim.secd.SECDBase.FunctionSpec] with Serializable
3854 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.copy(): org.kiama.example.iswim.secd.SECDBase.TypeError
957 ===> org.kiama.example.RISC.RISCISA.XORI.canEqual(x$1: Any): Boolean
3484 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.toString(): String
10723 ===> org.kiama.example.transform.AST.ASTNode.<init>(): org.kiama.example.transform.AST.ASTNode
5151 ===> org.kiama.example.lambda3.AST.SwapQuery.unapply(x$0: org.kiama.example.lambda3.AST.SwapQuery): Option[((org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name), org.kiama.example.lambda3.AST.Exp)]
9932 ===> org.kiama.example.prolog.Interpreter.TermGoal.equals(x$1: Any): Boolean
9149 ===> org.kiama.example.obr.SPARCTree.Local.toString(): String
10425 ===> org.kiama.example.til.AST.IfElse.equals(x$1: Any): Boolean
5283 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.hashCode(): Int
2687 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productElement(x$1: Int): Any
4990 ===> org.kiama.example.lambda3.AST.Var.hashCode(): Int
240 ===> org.kiama.attribution.AttributionTests.SetTree.hashCode(): Int
6709 ===> org.kiama.example.oberon0.L3.source.FPSection.apply(mode: org.kiama.example.oberon0.L3.source.Mode,idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L3.source.FPSection
3716 ===> org.kiama.example.iswim.secd.SECDBase.GetType.toString(): String
4923 ===> org.kiama.example.lambda2.Parser.itype: Parser.this.PackratParser[org.kiama.example.lambda2.AST.Type]
4729 ===> org.kiama.example.lambda2.AST.AddOp.equals(x$1: Any): Boolean
3920 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.hashCode(): Int
8398 ===> org.kiama.example.obr.RISCTree.CmpeqW.toString(): String
419 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.toString(): String
589 ===> org.kiama.example.RISC.RISCISA.ADD.toString(): String
6558 ===> org.kiama.example.oberon0.L3.c.CAddrType.readResolve(): Object
5435 ===> org.kiama.example.oberon0.L0.c.CNeExp.equals(x$1: Any): Boolean
2822 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.equals(x$1: Any): Boolean
6597 ===> org.kiama.example.oberon0.L3.c.CAddrExp.priority: Int
3392 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.flds: List[org.kiama.example.iswim.secd.SECDBase.Value]
406 ===> org.kiama.attribution.DynamicAttributionTests.Pair.apply(left: DynamicAttributionTests.this.Tree,right: DynamicAttributionTests.this.Tree): DynamicAttributionTests.this.Pair
4355 ===> org.kiama.example.json.JSONTree.JNull.toString(): String
694 ===> org.kiama.example.RISC.RISCISA.MULI.toString(): String
11671 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
7863 ===> org.kiama.example.obr.ObrTree.EqualExp.canEqual(x$1: Any): Boolean
1986 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.ExprStmt
9018 ===> org.kiama.example.obr.SPARCTree.IntDatum.canEqual(x$1: Any): Boolean
1674 ===> org.kiama.example.imperative.AST.Sub.<init>(): org.kiama.example.imperative.AST.Sub.type
3952 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.<init>(): org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.type
12400 ===> org.kiama.util.Messaging.Record.equals(x$1: Any): Boolean
8815 ===> org.kiama.example.obr.SPARCTree.Read.hashCode(): Int
2425 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.toString(): String
4582 ===> org.kiama.example.lambda2.AST.App.apply(e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.App
1372 ===> org.kiama.example.dataflow.DataflowAST.Assign.copy$default$2: org.kiama.example.dataflow.DataflowAST.Var @scala.annotation.unchecked.uncheckedVariance
9224 ===> org.kiama.example.obr.SymbolTable.Variable.copy$default$1: org.kiama.example.obr.SymbolTable.Type @scala.annotation.unchecked.uncheckedVariance
917 ===> org.kiama.example.RISC.RISCISA.ORI.equals(x$1: Any): Boolean
11503 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.hashCode(): Int
12472 ===> org.kiama.util.ParserUtilitiesTests.Tup2.canEqual(x$1: Any): Boolean
11710 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5870 ===> org.kiama.example.oberon0.L0.source.LtExp.productElement(x$1: Int): Any
91 ===> org.kiama.attribution.Attribution.CachedDynamicAttribute.apply(t: T): U
7091 ===> org.kiama.example.oberon0.base.c.CInclude.hashCode(): Int
4652 ===> org.kiama.example.lambda2.AST.Bind.copy$default$1: org.kiama.example.lambda2.AST.Idn @scala.annotation.unchecked.uncheckedVariance
4556 ===> org.kiama.example.lambda2.AST.Lam.productIterator: Iterator[Any]
1881 ===> org.kiama.example.imperative.Generator.$init$(): Unit
10714 ===> org.kiama.example.til.TIL2_2Tests.<init>(): org.kiama.example.til.TIL2_2Tests
6272 ===> org.kiama.example.oberon0.L1.source.WhileStatement.unapply(x$0: org.kiama.example.oberon0.L1.source.WhileStatement): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)]
2930 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.copy(): org.kiama.example.iswim.secd.ConversionOps.ConversionError
5191 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.applyOrElse[A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: NameAnalyser.this.Environment](x$1: A1,default: A1 => B1): B1
5126 ===> org.kiama.example.lambda3.AST.SubstQuery.toString(): String
8904 ===> org.kiama.example.obr.SPARCTree.Cond.productElement(x$1: Int): Any
7900 ===> org.kiama.example.obr.ObrTree.GreaterExp.productIterator: Iterator[Any]
11920 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1493 ===> org.kiama.example.dataflow.Foreach.readResolve(): Object
8681 ===> org.kiama.example.obr.SPARCEncoder.encode(p: org.kiama.example.obr.SPARCTree.SPARC): Unit
134 ===> org.kiama.attribution.UncachedAttribution.$anon.<init>(): UncachedAttribution.this.UncachedParamAttribute[A,T,U]{}
1043 ===> org.kiama.example.RISC.RISCISA.STW.equals(x$1: Any): Boolean
636 ===> org.kiama.example.RISC.RISCISA.SUBI.b: org.kiama.example.RISC.RISCISA.RegNo
9387 ===> org.kiama.example.obr.SymbolTable.EnumType.productIterator: Iterator[Any]
7944 ===> org.kiama.example.obr.ObrTree.IndexExp.unapply(x$0: org.kiama.example.obr.ObrTree.IndexExp): Option[(org.kiama.example.obr.ObrTree.Identifier, org.kiama.example.obr.ObrTree.Expression)]
12267 ===> org.kiama.util.RegexCompiler.makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter): Either[T,String]
2814 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.copy(): org.kiama.example.iswim.secd.BooleanOps.Equals
11169 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productArity: Int
11802 ===> org.kiama.rewriting.RewriterTests.Equal.readResolve(): Object
9233 ===> org.kiama.example.obr.SymbolTable.Variable.<init>(): org.kiama.example.obr.SymbolTable.Variable.type
8652 ===> org.kiama.example.obr.RISCTree.Indexed.toString(): String
11795 ===> org.kiama.rewriting.RewriterTests.Equal.productPrefix: String
489 ===> org.kiama.example.RISC.RISCISA.MOV.b: org.kiama.example.RISC.RISCISA.RegNo
640 ===> org.kiama.example.RISC.RISCISA.SUBI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.SUBI
5295 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
7506 ===> org.kiama.example.obr.ObrTree.ArrayVar.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
5718 ===> org.kiama.example.oberon0.L0.c.PrettyPrinter.$init$(): Unit
10875 ===> org.kiama.machine.Machine.State.value: T
12544 ===> org.kiama.util.ParserUtilitiesTests.Tup5.equals(x$1: Any): Boolean
3812 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.type
9512 ===> org.kiama.example.oneohonecompanies.Company.Dept.toString(): String
7720 ===> org.kiama.example.obr.ObrTree.ReturnStmt.<init>(): org.kiama.example.obr.ObrTree.ReturnStmt.type
8356 ===> org.kiama.example.obr.RISCTree.AddW.equals(x$1: Any): Boolean
1029 ===> org.kiama.example.RISC.RISCISA.STW.b: org.kiama.example.RISC.RISCISA.RegNo
3957 ===> org.kiama.example.iswim.secd.SECDBase.<init>(): org.kiama.example.iswim.secd.SECDBase
1496 ===> org.kiama.example.dataflow.DataflowForeach.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.dataflow.DataflowAST.Stm,Set[org.kiama.example.dataflow.DataflowAST.Stm]] with Serializable
7735 ===> org.kiama.example.obr.ObrTree.WhileStmt.canEqual(x$1: Any): Boolean
3164 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.equals(x$1: Any): Boolean
9634 ===> org.kiama.example.picojava.AbstractSyntax.Block.productPrefix: String
8103 ===> org.kiama.example.obr.ObrTree.PlusExp.hashCode(): Int
5941 ===> org.kiama.example.oberon0.L0.source.SumExpression.fixity: org.kiama.output.Infix
3819 ===> org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue.<init>(): org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue
8505 ===> org.kiama.example.obr.RISCTree.LdW.toString(): String
11388 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.unapply(x$0: org.kiama.rewriting.SupportPositionalRewriterTests.Two): Option[(org.kiama.rewriting.SupportPositionalRewriterTests.Node, org.kiama.rewriting.SupportPositionalRewriterTests.Node)]
372 ===> org.kiama.attribution.Decorators.Chain.equals(x$1: Any): Boolean
6688 ===> org.kiama.example.oberon0.L3.source.ValMode.apply(): org.kiama.example.oberon0.L3.source.ValMode
8613 ===> org.kiama.example.obr.RISCTree.SequenceDatum.canEqual(x$1: Any): Boolean
10272 ===> org.kiama.example.prolog.Unifier.<init>(): org.kiama.example.prolog.Unifier.type
6428 ===> org.kiama.example.oberon0.L3.NameAnalyser.envinl(in: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
5992 ===> org.kiama.example.oberon0.L0.source.OrExp.toString(): String
6550 ===> org.kiama.example.oberon0.L3.c.CAddrType.canEqual(x$1: Any): Boolean
3207 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.hashCode(): Int
6819 ===> org.kiama.example.oberon0.L4.c.CRecordType.copy$default$1: List[org.kiama.example.oberon0.base.c.CVarDecl] @scala.annotation.unchecked.uncheckedVariance
6994 ===> org.kiama.example.oberon0.base.Driver.artefact: String
601 ===> org.kiama.example.RISC.RISCISA.ADDI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
3666 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productArity: Int
9506 ===> org.kiama.example.oneohonecompanies.Company.Dept.productIterator: Iterator[Any]
1923 ===> org.kiama.example.iswim.compiler.Parser.$init$(): Unit
3781 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.equals(x$1: Any): Boolean
1744 ===> org.kiama.example.imperative.AST.Seqn.productElement(x$1: Int): Any
11959 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3290 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.toString(): String
1172 ===> org.kiama.example.RISC.RISCISA.BEQ.canEqual(x$1: Any): Boolean
6357 ===> org.kiama.example.oberon0.L2.source.Case.productIterator: Iterator[Any]
4873 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
5175 ===> org.kiama.example.oberon0.L0.Desugarer.uniquifyNames(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
294 ===> org.kiama.attribution.AttributionTests.PairTree.<init>(): AttributionTests.this.PairTree.type
7189 ===> org.kiama.example.oberon0.base.c.CStrType.readResolve(): Object
10952 ===> org.kiama.output.RightAssoc.readResolve(): Object
5089 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.unapply(x$0: org.kiama.example.lambda3.AST.FreeNamesQuery): Option[org.kiama.example.lambda3.AST.Exp]
436 ===> org.kiama.attribution.DynamicAttributionTests.Unused.toString(): String
9096 ===> org.kiama.example.obr.SPARCTree.Not.readResolve(): Object
6110 ===> org.kiama.example.oberon0.L0.source.NotExp.productIterator: Iterator[Any]
7367 ===> org.kiama.example.oberon0.base.source.SourcePrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): SourcePrettyPrinter.this.Doc
8908 ===> org.kiama.example.obr.SPARCTree.Cond.toString(): String
4536 ===> org.kiama.example.lambda2.AST.Var.canEqual(x$1: Any): Boolean
6852 ===> org.kiama.example.oberon0.L4.c.CFieldExp.record: org.kiama.example.oberon0.base.c.CExpression
147 ===> org.kiama.attribution.AttributionTests.Pair.copy(left: AttributionTests.this.Tree,right: AttributionTests.this.Tree): AttributionTests.this.Pair
822 ===> org.kiama.example.RISC.RISCISA.CHKI.<init>(b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.CHKI
8808 ===> org.kiama.example.obr.SPARCTree.Read.copy(mem: org.kiama.example.obr.SPARCTree.Address): org.kiama.example.obr.SPARCTree.Read
105 ===> org.kiama.attribution.Attribution.paramAttr[A, T <: AnyRef, U](optNameDef: Option[String])(f: A => (T => U)): Attribution.this.CachedParamAttribute[A,T,U]
10518 ===> org.kiama.example.til.AST.Id.hashCode(): Int
3307 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.canEqual(x$1: Any): Boolean
12270 ===> org.kiama.util.CompilerTests.<init>(): org.kiama.util.CompilerTests
7850 ===> org.kiama.example.obr.ObrTree.BoolExp.apply(value: Boolean): org.kiama.example.obr.ObrTree.BoolExp
10377 ===> org.kiama.example.til.AST.Assign.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
5809 ===> org.kiama.example.oberon0.L0.source.Assignment.toString(): String
2173 ===> org.kiama.example.iswim.compiler.Syntax.Less.l: org.kiama.example.iswim.compiler.Syntax.Expr
2575 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.copy(fields: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Tuple
4945 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1976 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productPrefix: String
11874 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5285 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.<init>(): SymbolTable.this.BuiltinType.type
3177 ===> org.kiama.example.iswim.secd.IntegerOps.Add.hashCode(): Int
727 ===> org.kiama.example.RISC.RISCISA.DIVI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
4080 ===> org.kiama.example.iswim.secd.StackOps.Pop.productIterator: Iterator[Any]
7723 ===> org.kiama.example.obr.ObrTree.ReturnStmt.unapply(x$0: org.kiama.example.obr.ObrTree.ReturnStmt): Option[org.kiama.example.obr.ObrTree.Expression]
7072 ===> org.kiama.example.oberon0.base.c.CProgram.productIterator: Iterator[Any]
456 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.isDefinedAt(x$1: DynamicAttributionTests.this.Tree): Boolean
5907 ===> org.kiama.example.oberon0.L0.source.GtExp.productArity: Int
6260 ===> org.kiama.example.oberon0.L1.source.WhileStatement.copy$default$2: org.kiama.example.oberon0.base.source.Block @scala.annotation.unchecked.uncheckedVariance
9103 ===> org.kiama.example.obr.SPARCTree.RemW.productPrefix: String
5543 ===> org.kiama.example.oberon0.L0.c.CSubExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CSubExp
495 ===> org.kiama.example.RISC.RISCISA.MOV.toString(): String
10711 ===> org.kiama.example.til.TIL2_2.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12224 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Int](x$1: A1,default: A1 => B1): B1
4954 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9582 ===> org.kiama.example.oneohonecompanies.OneOhOneTests.empty: org.kiama.example.oneohonecompanies.Company.Company
8954 ===> org.kiama.example.obr.SPARCTree.CmpgtW.r: org.kiama.example.obr.SPARCTree.Datum
9717 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productPrefix: String
8358 ===> org.kiama.example.obr.RISCTree.AddW.toString(): String
4166 ===> org.kiama.example.iswim.secd.StringOps.StringValue.<init>(s: String): StringOps.this.StringValue
8162 ===> org.kiama.example.obr.RISCEncoder.exitlab_$eq(x$1: Int): Unit
296 ===> org.kiama.attribution.AttributionTests.PairTree.apply(p: (AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.PairTree
9804 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.Name: String
2748 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.apply(nms: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Primitives
1835 ===> org.kiama.example.imperative.ASTNonCase.<init>(): org.kiama.example.imperative.ASTNonCase.type
12555 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n6: ParserUtilitiesTests.this.Node
3998 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.pn: org.kiama.example.iswim.secd.SECDBase.Name
1996 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productIterator: Iterator[Any]
2621 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.<init>(): org.kiama.example.iswim.compiler.Syntax.MatchClause.type
6248 ===> org.kiama.example.oberon0.L1.source.IfStatement.toString(): String
7295 ===> org.kiama.example.oberon0.base.source.Block.copy$default$2: List[org.kiama.example.oberon0.base.source.Statement] @scala.annotation.unchecked.uncheckedVariance
8251 ===> org.kiama.example.obr.RISCTree.Jmp.hashCode(): Int
11941 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7891 ===> org.kiama.example.obr.ObrTree.GreaterExp.left: org.kiama.example.obr.ObrTree.Expression
303 ===> org.kiama.attribution.AttributionTests.TripleTree.productPrefix: String
11567 ===> org.kiama.rewriting.Rewriter.logfail$default$3[T]: org.kiama.util.Emitter @scala.annotation.unchecked.uncheckedVariance
3931 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productArity: Int
4056 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toDoc: SECDBase.this.Doc
9729 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.readResolve(): Object
5874 ===> org.kiama.example.oberon0.L0.source.LtExp.toString(): String
3934 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.canEqual(x$1: Any): Boolean
4797 ===> org.kiama.example.lambda2.RewritingEvaluator.eval(exp: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Exp
9716 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.copy$default$2: org.kiama.example.picojava.AbstractSyntax.Stmt @scala.annotation.unchecked.uncheckedVariance
12473 ===> org.kiama.util.ParserUtilitiesTests.Tup2.hashCode(): Int
2133 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Remainder): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
3457 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productPrefix: String
3832 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.<init>(): org.kiama.example.iswim.secd.SECDBase.UnboundVariable.type
907 ===> org.kiama.example.RISC.RISCISA.ORI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ORI
872 ===> org.kiama.example.RISC.RISCISA.ANDI.productIterator: Iterator[Any]
1465 ===> org.kiama.example.dataflow.DataflowAST.Empty.productIterator: Iterator[Any]
813 ===> org.kiama.example.RISC.RISCISA.CMPI.hashCode(): Int
8587 ===> org.kiama.example.obr.RISCTree.SubW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.SubW
3778 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.canEqual(x$1: Any): Boolean
10603 ===> org.kiama.example.til.AST.Div.productElement(x$1: Int): Any
4064 ===> org.kiama.example.iswim.secd.SECDBase.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
2876 ===> org.kiama.example.iswim.secd.BooleanOps.evalInst: PartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
11794 ===> org.kiama.rewriting.RewriterTests.Equal.<init>(): RewriterTests.this.Equal.type
5621 ===> org.kiama.example.oberon0.L0.c.CModExp.left: org.kiama.example.oberon0.base.c.CExpression
9917 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.toString(): String
785 ===> org.kiama.example.RISC.RISCISA.CMP.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
9081 ===> org.kiama.example.obr.SPARCTree.Not.<init>(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Not
11165 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.copy$default$2: ParenPrettyPrinterTests.this.Exp @scala.annotation.unchecked.uncheckedVariance
3730 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productArity: Int
1048 ===> org.kiama.example.RISC.RISCISA.STW.readResolve(): Object
930 ===> org.kiama.example.RISC.RISCISA.XOR.toString(): String
5180 ===> org.kiama.example.oberon0.L0.NameAnalyser.$init$(): Unit
6481 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.mode: org.kiama.example.oberon0.L3.source.Mode
10356 ===> org.kiama.example.til.AST.Decl.<init>(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Decl
8945 ===> org.kiama.example.obr.SPARCTree.CmpneW.hashCode(): Int
6271 ===> org.kiama.example.oberon0.L1.source.WhileStatement.apply(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L1.source.WhileStatement
3246 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.copy(): org.kiama.example.iswim.secd.IntegerOps.IntTypeValue
245 ===> org.kiama.attribution.AttributionTests.SetTree.apply(s: Set[AttributionTests.this.Tree]): AttributionTests.this.SetTree
3721 ===> org.kiama.example.iswim.secd.SECDBase.GetType.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.GetType): Boolean
6494 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.hashCode(): Int
4455 ===> org.kiama.example.lambda.AST.App.equals(x$1: Any): Boolean
133 ===> org.kiama.attribution.UncachedAttribution.paramAttr[A, T <: AnyRef, U](optNameDef: Option[String])(f: A => (T => U)): UncachedAttribution.this.UncachedParamAttribute[A,T,U]
1055 ===> org.kiama.example.RISC.RISCISA.STB.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
62 ===> org.kiama.attribution.AttributionBase.constant[T <: AnyRef, U](u: => U): AttributionBase.this.Attribute[T,U]
3791 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productElement(x$1: Int): Any
4955 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12369 ===> org.kiama.util.IO.FileNotFoundException.productPrefix: String
12204 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5759 ===> org.kiama.example.oberon0.L0.source.VarDecl.readResolve(): Object
8919 ===> org.kiama.example.obr.SPARCTree.CmpeqW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
3278 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.toString(): String
11708 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
376 ===> org.kiama.attribution.Decorators.Chain.unapply[T, U](x$0: org.kiama.attribution.Decorators.Chain[T,U]): Option[(T => U, T => U)]
9533 ===> org.kiama.example.oneohonecompanies.Company.Employee.toString(): String
3844 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.canEqual(x$1: Any): Boolean
10565 ===> org.kiama.example.til.AST.Str.productArity: Int
233 ===> org.kiama.attribution.AttributionTests.SetTree.copy(s: Set[AttributionTests.this.Tree]): AttributionTests.this.SetTree
4222 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
4505 ===> org.kiama.example.lambda.Generator.genExp(sz: Int): org.scalacheck.Gen[org.kiama.example.lambda.AST.Exp]
8085 ===> org.kiama.example.obr.ObrTree.OrExp.toString(): String
4522 ===> org.kiama.example.lambda2.AST.Num.equals(x$1: Any): Boolean
12433 ===> org.kiama.util.ParserUtilities.stringToInt(s: String): Either[Int,String]
5861 ===> org.kiama.example.oberon0.L0.source.NeExp.readResolve(): Object
8169 ===> org.kiama.example.obr.RISCTransformation.<init>(): org.kiama.example.obr.RISCTransformation.type
220 ===> org.kiama.attribution.AttributionTests.ListTree.productElement(x$1: Int): Any
11478 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.copy(l: org.kiama.rewriting.SupportPositionedRewriterTests.Node,r: org.kiama.rewriting.SupportPositionedRewriterTests.Node): org.kiama.rewriting.SupportPositionedRewriterTests.Two
11029 ===> org.kiama.output.PrettyPrinterBase.line: PrettyPrinterBase.this.Doc
241 ===> org.kiama.attribution.AttributionTests.SetTree.toString(): String
6755 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productArity: Int
11430 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
283 ===> org.kiama.attribution.AttributionTests.PairTree.<init>(p: (AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.PairTree
2405 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.toString(): String
4114 ===> org.kiama.example.iswim.secd.StackOps.Swap.productArity: Int
1246 ===> org.kiama.example.RISC.RISCISA.BGT.toString(): String
1515 ===> org.kiama.example.dataflow.For.productIterator: Iterator[Any]
6243 ===> org.kiama.example.oberon0.L1.source.IfStatement.productArity: Int
8866 ===> org.kiama.example.obr.SPARCTree.Write.hashCode(): Int
5923 ===> org.kiama.example.oberon0.L0.source.GeExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
3720 ===> org.kiama.example.iswim.secd.SECDBase.GetType.apply(): org.kiama.example.iswim.secd.SECDBase.GetType
10771 ===> org.kiama.example.transform.AST.BinExpR.productPrefix: String
12328 ===> org.kiama.util.Environments.MultipleEntity.productIterator: Iterator[Any]
11205 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.<init>(exp: ParenPrettyPrinterTests.this.Exp,prio: Int): ParenPrettyPrinterTests.this.PreOp
12239 ===> org.kiama.rewriting.UniplateTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2312 ===> org.kiama.example.iswim.compiler.Syntax.Or.canEqual(x$1: Any): Boolean
9258 ===> org.kiama.example.obr.SymbolTable.Constant.readResolve(): Object
5841 ===> org.kiama.example.oberon0.L0.source.EqExp.unapply(x$0: org.kiama.example.oberon0.L0.source.EqExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
608 ===> org.kiama.example.RISC.RISCISA.ADDI.equals(x$1: Any): Boolean
2298 ===> org.kiama.example.iswim.compiler.Syntax.And.toString(): String
2185 ===> org.kiama.example.iswim.compiler.Syntax.Less.toString(): String
5455 ===> org.kiama.example.oberon0.L0.c.CLtExp.equals(x$1: Any): Boolean
3129 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.apply(): org.kiama.example.iswim.secd.IntComparisonOps.LessThan
6539 ===> org.kiama.example.oberon0.L3.c.CVoidType.apply(): org.kiama.example.oberon0.L3.c.CVoidType
9105 ===> org.kiama.example.obr.SPARCTree.RemW.productElement(x$1: Int): Any
6535 ===> org.kiama.example.oberon0.L3.c.CVoidType.toString(): String
2138 ===> org.kiama.example.iswim.compiler.Syntax.Equal.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Equal
2045 ===> org.kiama.example.iswim.compiler.Syntax.Plus.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
10558 ===> org.kiama.example.til.AST.Num.readResolve(): Object
9346 ===> org.kiama.example.obr.SymbolTable.RecordType.storage: Int
9502 ===> org.kiama.example.oneohonecompanies.Company.Dept.copy$default$3: List[org.kiama.example.oneohonecompanies.Company.SubUnit] @scala.annotation.unchecked.uncheckedVariance
6431 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.isDefinedAt(x$1: org.kiama.example.oberon0.base.source.SourceASTNode): Boolean
6894 ===> org.kiama.example.oberon0.L4.source.IndexExp.exp: org.kiama.example.oberon0.L0.source.Expression
12268 ===> org.kiama.util.Compiler.$init$(): Unit
6161 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.idlistToDoc(ids: List[org.kiama.example.oberon0.base.source.IdnDef]): PrettyPrinter.this.Doc
1136 ===> org.kiama.example.RISC.RISCISA.WRH.equals(x$1: Any): Boolean
6648 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productArity: Int
3540 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productArity: Int
9677 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
10345 ===> org.kiama.example.til.AST.Program.canEqual(x$1: Any): Boolean
6139 ===> org.kiama.example.oberon0.L0.source.IdnExp.copy(idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L0.source.IdnExp
9733 ===> org.kiama.example.picojava.AbstractSyntax.IdnUse.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.IdnUse
2669 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productArity: Int
706 ===> org.kiama.example.RISC.RISCISA.DIV.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.DIV
7405 ===> org.kiama.example.obr.Driver.spillEnvirFlag_$eq(x$1: Boolean): Unit
1619 ===> org.kiama.example.imperative.AST.Neg.copy$default$1: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
9041 ===> org.kiama.example.obr.SPARCTree.LdW.apply(mem: org.kiama.example.obr.SPARCTree.Address): org.kiama.example.obr.SPARCTree.LdW
7283 ===> org.kiama.example.oberon0.base.source.ModuleDecl.equals(x$1: Any): Boolean
1082 ===> org.kiama.example.RISC.RISCISA.PSH.productIterator: Iterator[Any]
8850 ===> org.kiama.example.obr.SPARCTree.StW.toString(): String
9497 ===> org.kiama.example.oneohonecompanies.Company.Dept.su: List[org.kiama.example.oneohonecompanies.Company.SubUnit]
749 ===> org.kiama.example.RISC.RISCISA.MOD.productPrefix: String
6667 ===> org.kiama.example.oberon0.L3.source.VarMode.canEqual(x$1: Any): Boolean
5245 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.productElement(x$1: Int): Any
7143 ===> org.kiama.example.oberon0.base.c.CBlock.copy(decls: List[org.kiama.example.oberon0.base.c.CDeclaration],stmts: List[org.kiama.example.oberon0.base.c.CStatement]): org.kiama.example.oberon0.base.c.CBlock
4763 ===> org.kiama.example.lambda2.AST.Let(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy,s3: => org.kiama.rewriting.Rewriter.Strategy,s4: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
5586 ===> org.kiama.example.oberon0.L0.c.CMulExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
3603 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productElement(x$1: Int): Any
6771 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productPrefix: String
2367 ===> org.kiama.example.iswim.compiler.Syntax.Let.canEqual(x$1: Any): Boolean
3657 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.toString(): String
3144 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.apply(): org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual
5577 ===> org.kiama.example.oberon0.L0.c.COrExp.toString(): String
3475 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productPrefix: String
5254 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.readResolve(): Object
351 ===> org.kiama.attribution.AttributionTests.$anonfun.isDefinedAt(x$1: AttributionTests.this.Tree): Boolean
8424 ===> org.kiama.example.obr.RISCTree.CmpgtW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpgtW
3267 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.canEqual(x$1: Any): Boolean
412 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
10375 ===> org.kiama.example.til.AST.Assign.copy(i: org.kiama.example.til.AST.Id,e: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Assign
7683 ===> org.kiama.example.obr.ObrTree.IfStmt.hashCode(): Int
8040 ===> org.kiama.example.obr.ObrTree.NotEqualExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NotEqualExp
9381 ===> org.kiama.example.obr.SymbolTable.EnumType.toString(): String
6483 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.tipe: SymbolTable.this.Type
614 ===> org.kiama.example.RISC.RISCISA.SUB.a: org.kiama.example.RISC.RISCISA.RegNo
3563 ===> org.kiama.example.iswim.secd.SECDBase.Exit.toString(): String
9666 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.equals(x$1: Any): Boolean
4220 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
1993 ===> org.kiama.example.iswim.compiler.Syntax.Variable.productPrefix: String
8391 ===> org.kiama.example.obr.RISCTree.CmpeqW.productElement(x$1: Int): Any
8827 ===> org.kiama.example.obr.SPARCTree.Ret.productElement(x$1: Int): Any
3511 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.toString(): String
7020 ===> org.kiama.example.oberon0.base.TransformingDriver.usageMessage: String
12250 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.<init>(): OptimiseAdd.type
6084 ===> org.kiama.example.oberon0.L0.source.NegExp.priority: Int
12039 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5097 ===> org.kiama.example.lambda3.AST.FreshQuery.copy$default$2: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
8552 ===> org.kiama.example.obr.RISCTree.Not.productPrefix: String
4137 ===> org.kiama.example.iswim.secd.StringOps.PushString.productArity: Int
8814 ===> org.kiama.example.obr.SPARCTree.Read.canEqual(x$1: Any): Boolean
2861 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.<init>(): BooleanOps.this.FalseValue
4078 ===> org.kiama.example.iswim.secd.StackOps.Pop.productArity: Int
6712 ===> org.kiama.example.oberon0.L3.source.Call.idnuse: org.kiama.example.oberon0.base.source.IdnUse
1067 ===> org.kiama.example.RISC.RISCISA.STB.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.STB
2543 ===> org.kiama.example.iswim.compiler.Syntax.Block.copy(es: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Block
12462 ===> org.kiama.util.ParserUtilitiesTests.Tup2.n1: ParserUtilitiesTests.this.Node
6201 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productIterator: Iterator[Any]
4406 ===> org.kiama.example.lambda.AST.Var.x: org.kiama.example.lambda.AST.Idn
1532 ===> org.kiama.example.dataflow.DataflowFor.$anonfun.isDefinedAt(x$1: org.kiama.example.dataflow.DataflowAST.Stm): Boolean
5752 ===> org.kiama.example.oberon0.L0.source.VarDecl.hashCode(): Int
4630 ===> org.kiama.example.lambda2.AST.Letp.e: org.kiama.example.lambda2.AST.Exp
7556 ===> org.kiama.example.obr.ObrTree.EnumVar.apply(idn: org.kiama.example.obr.ObrTree.Identifier,consts: List[org.kiama.example.obr.ObrTree.EnumConst]): org.kiama.example.obr.ObrTree.EnumVar
8934 ===> org.kiama.example.obr.SPARCTree.CmpneW.l: org.kiama.example.obr.SPARCTree.Datum
8539 ===> org.kiama.example.obr.RISCTree.NegW.canEqual(x$1: Any): Boolean
11749 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Int] with Serializable
8711 ===> org.kiama.example.obr.SPARCTransformation.datum: org.kiama.example.obr.ObrTree.Expression => org.kiama.example.obr.SPARCTree.Datum
3096 ===> org.kiama.example.iswim.secd.IOOps.Read.<init>(): org.kiama.example.iswim.secd.IOOps.Read
7424 ===> org.kiama.example.obr.TreeTestDriver.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7533 ===> org.kiama.example.obr.ObrTree.RecordVar.toString(): String
8305 ===> org.kiama.example.obr.RISCTree.StW.<init>(): org.kiama.example.obr.RISCTree.StW.type
4878 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2289 ===> org.kiama.example.iswim.compiler.Syntax.And.productPrefix: String
9614 ===> org.kiama.example.picojava.AbstractSyntax.Program.<init>(Block: org.kiama.example.picojava.AbstractSyntax.Block): org.kiama.example.picojava.AbstractSyntax.Program
7645 ===> org.kiama.example.obr.ObrTree.ExitStmt.unapply(x$0: org.kiama.example.obr.ObrTree.ExitStmt): Boolean
80 ===> org.kiama.attribution.Attribution.CachedParamAttribute.memoVersion: Int
3032 ===> org.kiama.example.iswim.secd.HeapOps.Put.productIterator: Iterator[Any]
9398 ===> org.kiama.example.obr.SymbolTable.EnumTypes.iscompatible(other: org.kiama.example.obr.SymbolTable.TypeBase): Boolean
12338 ===> org.kiama.util.Environments.UnknownEntity.<init>(): Environments.this.UnknownEntity
4351 ===> org.kiama.example.json.JSONTree.JNull.productElement(x$1: Int): Any
8987 ===> org.kiama.example.obr.SPARCTree.CmpltW.toString(): String
598 ===> org.kiama.example.RISC.RISCISA.ADDI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ADDI
3738 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.toString(): String
5489 ===> org.kiama.example.oberon0.L0.c.CGtExp.productArity: Int
6349 ===> org.kiama.example.oberon0.L2.source.Case.block: org.kiama.example.oberon0.base.source.Block
10806 ===> org.kiama.example.transform.AST.BinExp.copy(left: org.kiama.example.transform.AST.Exp,op: String,right: org.kiama.example.transform.AST.Exp): org.kiama.example.transform.AST.BinExp
4141 ===> org.kiama.example.iswim.secd.StringOps.PushString.hashCode(): Int
8825 ===> org.kiama.example.obr.SPARCTree.Ret.productPrefix: String
5339 ===> org.kiama.example.oberon0.L0.c.CNamedType.toString(): String
11980 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9789 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.copy(Name: String): org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl
207 ===> org.kiama.attribution.AttributionTests.EitherTree.toString(): String
878 ===> org.kiama.example.RISC.RISCISA.ANDI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ANDI
8325 ===> org.kiama.example.obr.RISCTree.Write.unapply(x$0: org.kiama.example.obr.RISCTree.Write): Option[org.kiama.example.obr.RISCTree.Datum]
3956 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.readResolve(): Object
12435 ===> org.kiama.util.WhitespaceParser.$init$(): Unit
7261 ===> org.kiama.example.oberon0.base.c.PrettyPrinter.$init$(): Unit
2615 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productElement(x$1: Int): Any
10159 ===> org.kiama.example.prolog.SemanticTestDriver.usage: String
9562 ===> org.kiama.example.oneohonecompanies.Company.DU.productIterator: Iterator[Any]
6941 ===> org.kiama.example.oberon0.L4.source.FieldList.toString(): String
10864 ===> org.kiama.example.transform.Parser.whiteSpace: scala.util.matching.Regex
9203 ===> org.kiama.example.obr.SemanticAnalysis.define(envin: org.kiama.example.obr.SymbolTable.Environment,i: org.kiama.example.obr.ObrTree.Identifier,e: => org.kiama.example.obr.SymbolTable.Entity): org.kiama.example.obr.SymbolTable.Environment
3150 ===> org.kiama.example.iswim.secd.IntComparisonOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
5099 ===> org.kiama.example.lambda3.AST.FreshQuery.productArity: Int
10444 ===> org.kiama.example.til.AST.While.equals(x$1: Any): Boolean
7866 ===> org.kiama.example.obr.ObrTree.EqualExp.equals(x$1: Any): Boolean
9393 ===> org.kiama.example.obr.SymbolTable.EnumType.apply(ident: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.SymbolTable.EnumType
9564 ===> org.kiama.example.oneohonecompanies.Company.DU.hashCode(): Int
11457 ===> org.kiama.rewriting.SupportPositionedRewriterTests.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.type
634 ===> org.kiama.example.RISC.RISCISA.SUB.readResolve(): Object
1614 ===> org.kiama.example.imperative.AST.Neg.vars: Set[org.kiama.example.imperative.AST.Idn]
318 ===> org.kiama.attribution.AttributionTests.QuadTree.copy(p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.QuadTree
6178 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productArity: Int
7316 ===> org.kiama.example.oberon0.base.source.EmptyStmt.hashCode(): Int
12297 ===> org.kiama.util.Emitter.emit(any: Any): Unit
8069 ===> org.kiama.example.obr.ObrTree.NotExp.toString(): String
11300 ===> org.kiama.rewriting.NominalAST.GenName.reset(): Unit
2136 ===> org.kiama.example.iswim.compiler.Syntax.Equal.r: org.kiama.example.iswim.compiler.Syntax.Expr
166 ===> org.kiama.attribution.AttributionTests.Leaf.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
4798 ===> org.kiama.example.lambda2.RewritingEvaluator.s: org.kiama.rewriting.Rewriter.Strategy
3838 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.message: String
882 ===> org.kiama.example.RISC.RISCISA.OR.b: org.kiama.example.RISC.RISCISA.RegNo
9664 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.hashCode(): Int
7633 ===> org.kiama.example.obr.ObrTree.ExitStmt.copy(): org.kiama.example.obr.ObrTree.ExitStmt
7116 ===> org.kiama.example.oberon0.base.c.CVarDecl.apply(ident: String,tipe: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.base.c.CVarDecl
3432 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.copy(code: org.kiama.example.iswim.secd.SECDBase.Code): org.kiama.example.iswim.secd.SECDBase.CodeSegment
993 ===> org.kiama.example.RISC.RISCISA.LDB.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
11761 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11788 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12188 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4023 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.hashCode(): Int
1644 ===> org.kiama.example.imperative.AST.Add.copy$default$1: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
11706 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Int] with Serializable
12024 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2709 ===> org.kiama.example.iswim.compiler.Syntax.Val.equals(x$1: Any): Boolean
630 ===> org.kiama.example.RISC.RISCISA.SUB.<init>(): org.kiama.example.RISC.RISCISA.SUB.type
90 ===> org.kiama.attribution.Attribution.CachedDynamicAttribute.functions: scala.collection.mutable.ListBuffer[org.kiama.==>[T,U]]
10030 ===> org.kiama.example.prolog.PrologTree.Fact.toString(): String
4225 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
8239 ===> org.kiama.example.obr.RISCTree.Bne.apply(cond: org.kiama.example.obr.RISCTree.Datum,dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Bne
12425 ===> org.kiama.util.ParserUtilities.parseResultToTuple4[A, B, C, D](p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D]]): ParserUtilities.this.PackratParser[(A, B, C, D)]
10478 ===> org.kiama.example.til.AST.Read.productArity: Int
4139 ===> org.kiama.example.iswim.secd.StringOps.PushString.productIterator: Iterator[Any]
7903 ===> org.kiama.example.obr.ObrTree.GreaterExp.toString(): String
11649 ===> org.kiama.rewriting.Rewriter.downup(s1: => Rewriter.this.Strategy,s2: => Rewriter.this.Strategy): Rewriter.this.Strategy
3294 ===> org.kiama.example.iswim.secd.IntegerOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
4771 ===> org.kiama.example.lambda2.AST.Letp(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
5331 ===> org.kiama.example.oberon0.L0.c.CNamedType.productArity: Int
3380 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productArity: Int
98 ===> org.kiama.attribution.Attribution.attr[T <: AnyRef, U](f: T => U): Attribution.this.CachedAttribute[T,U]
1333 ===> org.kiama.example.RISC.RISCISA.Comment.productArity: Int
5605 ===> org.kiama.example.oberon0.L0.c.CDivExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CDivExp
2632 ===> org.kiama.example.iswim.compiler.Syntax.Match.productPrefix: String
9552 ===> org.kiama.example.oneohonecompanies.Company.PU.apply(e: org.kiama.example.oneohonecompanies.Company.Employee): org.kiama.example.oneohonecompanies.Company.PU
10886 ===> org.kiama.machine.Machine.ParamUpdater.toString(): String
9678 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productPrefix: String
7488 ===> org.kiama.example.obr.ObrTree.BoolVar.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
4829 ===> org.kiama.example.lambda2.LambdaTests.canonise(x: org.kiama.example.lambda2.AST.Exp,d: Int,e: Map[org.kiama.example.lambda2.AST.Idn,org.kiama.example.lambda2.AST.Idn]): org.kiama.example.lambda2.AST.Exp
1997 ===> org.kiama.example.iswim.compiler.Syntax.Variable.canEqual(x$1: Any): Boolean
12002 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7879 ===> org.kiama.example.obr.ObrTree.FieldExp.productArity: Int
2070 ===> org.kiama.example.iswim.compiler.Syntax.Minus.hashCode(): Int
1821 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
5366 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productPrefix: String
6954 ===> org.kiama.example.oberon0.L4.source.FieldExp.productPrefix: String
12186 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5975 ===> org.kiama.example.oberon0.L0.source.SubExp.<init>(): org.kiama.example.oberon0.L0.source.SubExp.type
10266 ===> org.kiama.example.prolog.Subst.$anon.m: scala.collection.immutable.Map[String,org.kiama.example.prolog.PrologTree.Term]
151 ===> org.kiama.attribution.AttributionTests.Pair.productArity: Int
8396 ===> org.kiama.example.obr.RISCTree.CmpeqW.equals(x$1: Any): Boolean
5059 ===> org.kiama.example.lambda3.AST.EvalQuery.copy$default$1: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
8192 ===> org.kiama.example.obr.RISCTree.RISCProg.productElement(x$1: Int): Any
2671 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productIterator: Iterator[Any]
9852 ===> org.kiama.example.picojava.TypeAnalysis.superClass: org.kiama.example.picojava.AbstractSyntax.ClassDecl => org.kiama.example.picojava.AbstractSyntax.ClassDecl
10582 ===> org.kiama.example.til.AST.Mul.productPrefix: String
9561 ===> org.kiama.example.oneohonecompanies.Company.DU.productElement(x$1: Int): Any
6566 ===> org.kiama.example.oberon0.L3.c.CCall.productArity: Int
4181 ===> org.kiama.example.iswim.secd.StringOps.StringValue.unapply(x$0: StringOps.this.StringValue): Option[String]
7649 ===> org.kiama.example.obr.ObrTree.ForStmt.max: org.kiama.example.obr.ObrTree.Expression
6370 ===> org.kiama.example.oberon0.L2.source.ValCond.copy(value: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L2.source.ValCond
10646 ===> org.kiama.example.til.AST.Sub.equals(x$1: Any): Boolean
10690 ===> org.kiama.example.til.TIL1_1.$init$(): Unit
6906 ===> org.kiama.example.oberon0.L4.source.IndexExp.equals(x$1: Any): Boolean
3690 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.apply(): org.kiama.example.iswim.secd.SECDBase.MkUserException
9158 ===> org.kiama.example.obr.SPARCTree.Indexed.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
1656 ===> org.kiama.example.imperative.AST.Add.apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Add
6191 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.tstmt: org.kiama.example.oberon0.base.c.CStatement
12405 ===> org.kiama.util.Messaging.Record.readResolve(): Object
561 ===> org.kiama.example.RISC.RISCISA.MVNI.productArity: Int
4254 ===> org.kiama.example.json.JSONTree.JName.productArity: Int
8988 ===> org.kiama.example.obr.SPARCTree.CmpltW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpltW
1738 ===> org.kiama.example.imperative.AST.Seqn.<init>(ss: Seq[org.kiama.example.imperative.AST.Stmt]): org.kiama.example.imperative.AST.Seqn
8227 ===> org.kiama.example.obr.RISCTree.Bne.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
11564 ===> org.kiama.rewriting.Rewriter.logfail[T](s: => Rewriter.this.Strategy,msg: String,emitter: org.kiama.util.Emitter): Rewriter.this.Strategy
3587 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productArity: Int
21 ===> org.kiama.attribution.Attributable.$minus$greater[U](a: Attributable.this.type => U): U
4235 ===> org.kiama.example.json.JSONTree.JObject.copy$default$1: List[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)] @scala.annotation.unchecked.uncheckedVariance
3003 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.canEqual(x$1: Any): Boolean
12153 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2074 ===> org.kiama.example.iswim.compiler.Syntax.Minus.toString(): String
11361 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productIterator: Iterator[Any]
10369 ===> org.kiama.example.til.AST.Decl.apply(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Decl
9993 ===> org.kiama.example.prolog.Main.start: org.kiama.example.prolog.Main.Parser[org.kiama.example.prolog.PrologTree.Literal]
7011 ===> org.kiama.example.oberon0.base.Driver.processargs(args: List[String]): Boolean
10278 ===> org.kiama.example.repmin.Fork.<init>(left: org.kiama.example.repmin.Tree,right: org.kiama.example.repmin.Tree): org.kiama.example.repmin.Fork
1261 ===> org.kiama.example.RISC.RISCISA.BR.<init>(label: Int): org.kiama.example.RISC.RISCISA.BR
8002 ===> org.kiama.example.obr.ObrTree.ModExp.right: org.kiama.example.obr.ObrTree.Expression
10269 ===> org.kiama.example.prolog.Subst.apply(l: (String, org.kiama.example.prolog.PrologTree.Term)*): org.kiama.example.prolog.Subst
12532 ===> org.kiama.util.ParserUtilitiesTests.Tup5.copy$default$1: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
1682 ===> org.kiama.example.imperative.AST.Mul.value: Double
6078 ===> org.kiama.example.oberon0.L0.source.AndExp.readResolve(): Object
4611 ===> org.kiama.example.lambda2.AST.Let.copy(i: org.kiama.example.lambda2.AST.Idn,t: org.kiama.example.lambda2.AST.Type,e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Let
5026 ===> org.kiama.example.lambda3.AST.Lam.hashCode(): Int
2266 ===> org.kiama.example.iswim.compiler.Syntax.Not.e: org.kiama.example.iswim.compiler.Syntax.Expr
5328 ===> org.kiama.example.oberon0.L0.c.CNamedType.copy(ident: String): org.kiama.example.oberon0.L0.c.CNamedType
7763 ===> org.kiama.example.obr.ObrTree.TryStmt.<init>(body: org.kiama.example.obr.ObrTree.TryBody,catches: List[org.kiama.example.obr.ObrTree.Catch]): org.kiama.example.obr.ObrTree.TryStmt
5570 ===> org.kiama.example.oberon0.L0.c.COrExp.productElement(x$1: Int): Any
4040 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.toString(): String
3750 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.toString(): String
12219 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6421 ===> org.kiama.example.oberon0.L3.NameAnalyser.$init$(): Unit
4672 ===> org.kiama.example.lambda2.AST.IntType.productElement(x$1: Int): Any
1259 ===> org.kiama.example.RISC.RISCISA.BGT.readResolve(): Object
5931 ===> org.kiama.example.oberon0.L0.source.GeExp.toString(): String
4803 ===> org.kiama.example.lambda2.Evaluators.mechanism_$eq(x$1: String): Unit
4620 ===> org.kiama.example.lambda2.AST.Let.canEqual(x$1: Any): Boolean
8752 ===> org.kiama.example.obr.SPARCTree.Beq.readResolve(): Object
8601 ===> org.kiama.example.obr.RISCTree.SubW.unapply(x$0: org.kiama.example.obr.RISCTree.SubW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
10946 ===> org.kiama.output.RightAssoc.productArity: Int
7027 ===> org.kiama.example.oberon0.base.TransformingDriver.resetflags(): Unit
10026 ===> org.kiama.example.prolog.PrologTree.Fact.productElement(x$1: Int): Any
6791 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productArity: Int
2052 ===> org.kiama.example.iswim.compiler.Syntax.Plus.toString(): String
7060 ===> org.kiama.example.oberon0.base.Translator.translate(d: org.kiama.example.oberon0.base.source.Declaration): List[org.kiama.example.oberon0.base.c.CDeclaration]
8780 ===> org.kiama.example.obr.SPARCTree.Jmp.canEqual(x$1: Any): Boolean
2324 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
6390 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
6555 ===> org.kiama.example.oberon0.L3.c.CAddrType.toString(): String
9996 ===> org.kiama.example.prolog.ParsingTests.<init>(): org.kiama.example.prolog.ParsingTests
10562 ===> org.kiama.example.til.AST.Str.copy(s: String): org.kiama.example.til.AST.Str
4341 ===> org.kiama.example.json.JSONTree.JFalse.equals(x$1: Any): Boolean
2809 ===> org.kiama.example.iswim.secd.BooleanOps.Test.toString(): String
11696 ===> org.kiama.rewriting.Rewriter.or(s1: => Rewriter.this.Strategy,s2: => Rewriter.this.Strategy): Rewriter.this.Strategy
940 ===> org.kiama.example.RISC.RISCISA.XOR.toString(): String
6815 ===> org.kiama.example.oberon0.L4.TypeAnalyser.exptypeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
8670 ===> org.kiama.example.obr.RISCTree.Label.equals(x$1: Any): Boolean
3947 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productElement(x$1: Int): Any
5774 ===> org.kiama.example.oberon0.L0.source.TypeDecl.<init>(): org.kiama.example.oberon0.L0.source.TypeDecl.type
10086 ===> org.kiama.example.prolog.PrologTree.Integer.<init>(): org.kiama.example.prolog.PrologTree.Integer.type
4017 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.toString(): String
8425 ===> org.kiama.example.obr.RISCTree.CmpgtW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
11146 ===> org.kiama.output.PrettyPrinterTests.Val.apply(i: Int): PrettyPrinterTests.this.Val
10210 ===> org.kiama.example.prolog.SymbolTable.AtomType.unapply(x$0: org.kiama.example.prolog.SymbolTable.AtomType): Boolean
11209 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.copy(exp: ParenPrettyPrinterTests.this.Exp,prio: Int): ParenPrettyPrinterTests.this.PreOp
4540 ===> org.kiama.example.lambda2.AST.Var.<init>(): org.kiama.example.lambda2.AST.Var.type
4383 ===> org.kiama.example.json.RewritingTests.ralf: org.kiama.example.json.JSONTree.JObject
6027 ===> org.kiama.example.oberon0.L0.source.DivExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
10585 ===> org.kiama.example.til.AST.Mul.productIterator: Iterator[Any]
3041 ===> org.kiama.example.iswim.secd.HeapOps.Put.readResolve(): Object
7526 ===> org.kiama.example.obr.ObrTree.RecordVar.copy$default$2: List[org.kiama.example.obr.ObrTree.Identifier] @scala.annotation.unchecked.uncheckedVariance
5156 ===> org.kiama.example.lambda3.Lambda.<init>(): org.kiama.example.lambda3.Lambda.type
4014 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productIterator: Iterator[Any]
10036 ===> org.kiama.example.prolog.PrologTree.Fact.readResolve(): Object
1530 ===> org.kiama.example.dataflow.DataflowFor.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.dataflow.DataflowAST.Stm,Set[org.kiama.example.dataflow.DataflowAST.Stm]] with Serializable
12470 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productElement(x$1: Int): Any
2233 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.GreaterEq
8008 ===> org.kiama.example.obr.ObrTree.ModExp.productArity: Int
10107 ===> org.kiama.example.prolog.PrologTree.Atom.unapply(x$0: org.kiama.example.prolog.PrologTree.Atom): Option[String]
11750 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Int](x$1: A1,default: A1 => B1): B1
11013 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
2783 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productIterator: Iterator[Any]
10004 ===> org.kiama.example.prolog.PrologTree.Program.productArity: Int
11889 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9412 ===> org.kiama.example.obr.SymbolTable.ExnType.<init>(): org.kiama.example.obr.SymbolTable.ExnType
3899 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.copy(): org.kiama.example.iswim.secd.SECDBase.DumpEmpty
8152 ===> org.kiama.example.obr.RISCEncoder.emitcomment(text: String): Unit
2894 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.unapply(x$0: org.kiama.example.iswim.secd.ConversionOps.ToString): Boolean
7869 ===> org.kiama.example.obr.ObrTree.EqualExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.EqualExp
10008 ===> org.kiama.example.prolog.PrologTree.Program.hashCode(): Int
6291 ===> org.kiama.example.oberon0.L2.Lifter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3331 ===> org.kiama.example.iswim.secd.RecordOps.GetField.<init>(): org.kiama.example.iswim.secd.RecordOps.GetField
11906 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3518 ===> org.kiama.example.iswim.secd.SECDBase.Enter.nms: List[org.kiama.example.iswim.secd.SECDBase.Name]
2096 ===> org.kiama.example.iswim.compiler.Syntax.Times.readResolve(): Object
3297 ===> org.kiama.example.iswim.secd.IntegerOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
7353 ===> org.kiama.example.oberon0.base.source.IdnUse.toString(): String
4700 ===> org.kiama.example.lambda2.AST.FunType.unapply(x$0: org.kiama.example.lambda2.AST.FunType): Option[(org.kiama.example.lambda2.AST.Type, org.kiama.example.lambda2.AST.Type)]
47 ===> org.kiama.attribution.AttributionBase.ParamAttributeKey.arg: Any
16 ===> org.kiama.attribution.Attributable.children: Iterator[org.kiama.attribution.Attributable]
10508 ===> org.kiama.example.til.AST.Id.s: String
5229 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.canEqual(x$1: Any): Boolean
1324 ===> org.kiama.example.RISC.RISCISA.Target.apply(label: Int): org.kiama.example.RISC.RISCISA.Target
3684 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.canEqual(x$1: Any): Boolean
2088 ===> org.kiama.example.iswim.compiler.Syntax.Times.canEqual(x$1: Any): Boolean
4815 ===> org.kiama.example.lambda2.Lambda.typecheck_$eq(x$1: Boolean): Unit
4488 ===> org.kiama.example.lambda.Evaluator.xgc_reduction: org.kiama.rewriting.Rewriter.Strategy
10625 ===> org.kiama.example.til.AST.Add.hashCode(): Int
4126 ===> org.kiama.example.iswim.secd.StackOps.$init$(): Unit
5113 ===> org.kiama.example.lambda3.AST.SubstQuery.e2: org.kiama.example.lambda3.AST.Exp
5132 ===> org.kiama.example.lambda3.AST.SubstQuery.readResolve(): Object
9474 ===> org.kiama.example.obr.tests.ObrExecTests.exceptionsExecDir: String
2007 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.<init>(i: Int): org.kiama.example.iswim.compiler.Syntax.NumVal
7420 ===> org.kiama.example.obr.TreeTestDriver.targettreetest$default$5: org.kiama.util.Emitter @scala.annotation.unchecked.uncheckedVariance
9992 ===> org.kiama.example.prolog.Main.processprogram(tree: org.kiama.example.prolog.PrologTree.Program): Boolean
2008 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.copy(i: Int): org.kiama.example.iswim.compiler.Syntax.NumVal
7874 ===> org.kiama.example.obr.ObrTree.FieldExp.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,field: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.FieldExp
7653 ===> org.kiama.example.obr.ObrTree.ForStmt.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
9723 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.toString(): String
4474 ===> org.kiama.example.lambda.AST.Sub.hashCode(): Int
446 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.applyOrElse[A1 <: DynamicAttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
7757 ===> org.kiama.example.obr.ObrTree.RaiseStmt.toString(): String
7592 ===> org.kiama.example.obr.ObrTree.IntConst.apply(idn: org.kiama.example.obr.ObrTree.Identifier,value: Int): org.kiama.example.obr.ObrTree.IntConst
916 ===> org.kiama.example.RISC.RISCISA.ORI.hashCode(): Int
1854 ===> org.kiama.example.imperative.ASTNonCase.Neg.toString(): String
5598 ===> org.kiama.example.oberon0.L0.c.CMulExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CMulExp
7003 ===> org.kiama.example.oberon0.base.Driver.challengeFlag_$eq(x$1: Boolean): Unit
12504 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n3: ParserUtilitiesTests.this.Node
7622 ===> org.kiama.example.obr.ObrTree.AssignStmt.productIterator: Iterator[Any]
8435 ===> org.kiama.example.obr.RISCTree.CmpgtW.<init>(): org.kiama.example.obr.RISCTree.CmpgtW.type
10429 ===> org.kiama.example.til.AST.IfElse.unapply(x$0: org.kiama.example.til.AST.IfElse): Option[(org.kiama.example.til.AST.Exp, Seq[org.kiama.example.til.AST.Stat], Seq[org.kiama.example.til.AST.Stat])]
6842 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productIterator: Iterator[Any]
8489 ===> org.kiama.example.obr.RISCTree.IntDatum.equals(x$1: Any): Boolean
1114 ===> org.kiama.example.RISC.RISCISA.WRD.productArity: Int
2877 ===> org.kiama.example.iswim.secd.BooleanOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
6735 ===> org.kiama.example.oberon0.L4.CCodeGenerator.translate(t: CCodeGenerator.this.Type): org.kiama.example.oberon0.base.c.CType
1713 ===> org.kiama.example.imperative.AST.Div.toString(): String
9079 ===> org.kiama.example.obr.SPARCTree.NegW.readResolve(): Object
7531 ===> org.kiama.example.obr.ObrTree.RecordVar.canEqual(x$1: Any): Boolean
7862 ===> org.kiama.example.obr.ObrTree.EqualExp.productIterator: Iterator[Any]
1666 ===> org.kiama.example.imperative.AST.Sub.productPrefix: String
10257 ===> org.kiama.example.prolog.SyntaxAnalysis.<init>(): org.kiama.example.prolog.SyntaxAnalysis
1426 ===> org.kiama.example.dataflow.DataflowAST.Block.stms: List[org.kiama.example.dataflow.DataflowAST.Stm]
9391 ===> org.kiama.example.obr.SymbolTable.EnumType.<init>(): org.kiama.example.obr.SymbolTable.EnumType.type
4467 ===> org.kiama.example.lambda.AST.Sub.copy$default$2: org.kiama.example.lambda.AST.Idn @scala.annotation.unchecked.uncheckedVariance
5509 ===> org.kiama.example.oberon0.L0.c.CGeExp.productArity: Int
10152 ===> org.kiama.example.prolog.SemanticAnalysis.vars: org.kiama.example.prolog.PrologTree.SourceNode => org.kiama.example.prolog.SymbolTable.Environment
8454 ===> org.kiama.example.obr.RISCTree.CmpltW.<init>(): org.kiama.example.obr.RISCTree.CmpltW.type
7234 ===> org.kiama.example.oberon0.base.c.CReturn.hashCode(): Int
8209 ===> org.kiama.example.obr.RISCTree.Beq.copy$default$2: org.kiama.example.obr.RISCTree.Label @scala.annotation.unchecked.uncheckedVariance
10440 ===> org.kiama.example.til.AST.While.productIterator: Iterator[Any]
5652 ===> org.kiama.example.oberon0.L0.c.CAndExp.canEqual(x$1: Any): Boolean
4486 ===> org.kiama.example.lambda.Evaluator.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1248 ===> org.kiama.example.RISC.RISCISA.BGT.productPrefix: String
1297 ===> org.kiama.example.RISC.RISCISA.RET.productPrefix: String
4805 ===> org.kiama.example.lambda2.Evaluators.evaluator_$eq(x$1: org.kiama.example.lambda2.Reduce): Unit
7031 ===> org.kiama.example.oberon0.base.TranslatingDriver.usageMessage: String
6225 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.<init>(): org.kiama.example.oberon0.L1.c.CWhileStatement.type
5788 ===> org.kiama.example.oberon0.L0.source.NamedType.canEqual(x$1: Any): Boolean
1667 ===> org.kiama.example.imperative.AST.Sub.productArity: Int
1708 ===> org.kiama.example.imperative.AST.Div.productArity: Int
11271 ===> org.kiama.rewriting.NominalAST.Name.apply(base: String,opti: Option[Int]): org.kiama.rewriting.NominalAST.Name
2311 ===> org.kiama.example.iswim.compiler.Syntax.Or.productIterator: Iterator[Any]
819 ===> org.kiama.example.RISC.RISCISA.CMPI.readResolve(): Object
8590 ===> org.kiama.example.obr.RISCTree.SubW.productPrefix: String
6825 ===> org.kiama.example.oberon0.L4.c.CRecordType.hashCode(): Int
8388 ===> org.kiama.example.obr.RISCTree.CmpeqW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
6812 ===> org.kiama.example.oberon0.L4.TypeAnalyser.deftypeDef: org.kiama.example.oberon0.L0.source.TypeDef => TypeAnalyser.this.Type
3046 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productElement(x$1: Int): Any
1274 ===> org.kiama.example.RISC.RISCISA.BR.unapply(x$0: org.kiama.example.RISC.RISCISA.BR): Option[Int]
10352 ===> org.kiama.example.til.AST.Program.unapply(x$0: org.kiama.example.til.AST.Program): Option[Seq[org.kiama.example.til.AST.Stat]]
6929 ===> org.kiama.example.oberon0.L4.source.FieldList.idndefs: List[String]
7983 ===> org.kiama.example.obr.ObrTree.MinusExp.right: org.kiama.example.obr.ObrTree.Expression
8955 ===> org.kiama.example.obr.SPARCTree.CmpgtW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpgtW
10443 ===> org.kiama.example.til.AST.While.toString(): String
3220 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productIterator: Iterator[Any]
10054 ===> org.kiama.example.prolog.PrologTree.Rule.unapply(x$0: org.kiama.example.prolog.PrologTree.Rule): Option[(org.kiama.example.prolog.PrologTree.Term, List[org.kiama.example.prolog.PrologTree.Term])]
7529 ===> org.kiama.example.obr.ObrTree.RecordVar.productElement(x$1: Int): Any
10911 ===> org.kiama.machine.Machine.init: Unit
4360 ===> org.kiama.example.json.JSONTree.JNull.unapply(x$0: org.kiama.example.json.JSONTree.JNull): Boolean
2049 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productIterator: Iterator[Any]
6400 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.toString(): String
2027 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productPrefix: String
6620 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productPrefix: String
2009 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
2626 ===> org.kiama.example.iswim.compiler.Syntax.Match.ctrl: org.kiama.example.iswim.compiler.Syntax.Expr
11160 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.priority: Int
8518 ===> org.kiama.example.obr.RISCTree.MulW.productPrefix: String
9920 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.readResolve(): Object
6634 ===> org.kiama.example.oberon0.L3.c.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
4687 ===> org.kiama.example.lambda2.AST.FunType.copy$default$1: org.kiama.example.lambda2.AST.Type @scala.annotation.unchecked.uncheckedVariance
12513 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productArity: Int
7213 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productArity: Int
9424 ===> org.kiama.example.obr.SymbolTable.ExnType.toString(): String
9628 ===> org.kiama.example.picojava.AbstractSyntax.Program.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.Program): Option[org.kiama.example.picojava.AbstractSyntax.Block]
881 ===> org.kiama.example.RISC.RISCISA.OR.a: org.kiama.example.RISC.RISCISA.RegNo
11921 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10417 ===> org.kiama.example.til.AST.IfElse.copy$default$3: Seq[org.kiama.example.til.AST.Stat] @scala.annotation.unchecked.uncheckedVariance
998 ===> org.kiama.example.RISC.RISCISA.LDB.productIterator: Iterator[Any]
6352 ===> org.kiama.example.oberon0.L2.source.Case.copy$default$1: List[org.kiama.example.oberon0.L2.source.Condition] @scala.annotation.unchecked.uncheckedVariance
1868 ===> org.kiama.example.imperative.ASTNonCase.Mul.toString(): String
7180 ===> org.kiama.example.oberon0.base.c.CStrType.productIterator: Iterator[Any]
8676 ===> org.kiama.example.obr.RISCTree.genlabel(): org.kiama.example.obr.RISCTree.Label
2528 ===> org.kiama.example.iswim.compiler.Syntax.While.productPrefix: String
9129 ===> org.kiama.example.obr.SPARCTree.SubW.equals(x$1: Any): Boolean
5859 ===> org.kiama.example.oberon0.L0.source.NeExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NeExp
7456 ===> org.kiama.example.obr.ObrTree.IntVar.productArity: Int
7655 ===> org.kiama.example.obr.ObrTree.ForStmt.copy$default$3: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
7553 ===> org.kiama.example.obr.ObrTree.EnumVar.equals(x$1: Any): Boolean
8281 ===> org.kiama.example.obr.RISCTree.Ret.productIterator: Iterator[Any]
508 ===> org.kiama.example.RISC.RISCISA.MOV.readResolve(): Object
7630 ===> org.kiama.example.obr.ObrTree.AssignStmt.unapply(x$0: org.kiama.example.obr.ObrTree.AssignStmt): Option[(org.kiama.example.obr.ObrTree.AssignNode, org.kiama.example.obr.ObrTree.Expression)]
11583 ===> org.kiama.rewriting.Rewriter.same(v1: Any,v2: Any): Boolean
2942 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.readResolve(): Object
7705 ===> org.kiama.example.obr.ObrTree.LoopStmt.apply(body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.LoopStmt
11171 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productIterator: Iterator[Any]
12418 ===> org.kiama.util.ParserUtilities.failure(msg: String): ParserUtilities.this.Parser[Nothing]
12111 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
6886 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.toString(): String
11744 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
3955 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive): Boolean
5277 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
9950 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.toString(): String
9304 ===> org.kiama.example.obr.SymbolTable.IntType.equals(x$1: Any): Boolean
3811 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.equals(x$1: Any): Boolean
7393 ===> org.kiama.example.oberon0.drivers.A4Phases.artefact: String
10888 ===> org.kiama.machine.Machine.ParamState.<init>(psname: String): Machine.this.ParamState[T,U]
2811 ===> org.kiama.example.iswim.secd.BooleanOps.Test.unapply(x$0: org.kiama.example.iswim.secd.BooleanOps.Test): Option[(org.kiama.example.iswim.secd.SECDBase.CodeSegment, org.kiama.example.iswim.secd.SECDBase.CodeSegment)]
1725 ===> org.kiama.example.imperative.AST.Null.productArity: Int
1890 ===> org.kiama.example.imperative.Generator.genAdd(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Add]
7808 ===> org.kiama.example.obr.ObrTree.Catch.hashCode(): Int
9787 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.Name: String
5878 ===> org.kiama.example.oberon0.L0.source.LtExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.LtExp
6425 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.applyOrElse[A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: Int](x$1: A1,default: A1 => B1): B1
590 ===> org.kiama.example.RISC.RISCISA.ADD.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.ADD
4470 ===> org.kiama.example.lambda.AST.Sub.productArity: Int
5750 ===> org.kiama.example.oberon0.L0.source.VarDecl.productIterator: Iterator[Any]
5956 ===> org.kiama.example.oberon0.L0.source.AddExp.<init>(): org.kiama.example.oberon0.L0.source.AddExp.type
10237 ===> org.kiama.example.prolog.SymbolTable.ListType.<init>(): org.kiama.example.prolog.SymbolTable.ListType.type
5918 ===> org.kiama.example.oberon0.L0.source.GtExp.readResolve(): Object
76 ===> org.kiama.attribution.Attribution.CachedAttribute.hasBeenComputedAt(t: T): Boolean
8352 ===> org.kiama.example.obr.RISCTree.AddW.productIterator: Iterator[Any]
11467 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.hashCode(): Int
8605 ===> org.kiama.example.obr.RISCTree.SequenceDatum.<init>(insns: List[org.kiama.example.obr.RISCTree.Item],d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.SequenceDatum
2810 ===> org.kiama.example.iswim.secd.BooleanOps.Test.apply(ct: org.kiama.example.iswim.secd.SECDBase.CodeSegment,ce: org.kiama.example.iswim.secd.SECDBase.CodeSegment): org.kiama.example.iswim.secd.BooleanOps.Test
3448 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.fn: Option[org.kiama.example.iswim.secd.SECDBase.Name]
6518 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.unapply(x$0: SymbolTable.this.BuiltinProc): Option[(String, List[SymbolTable.this.ParamInfo])]
2862 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.toString(): String
7685 ===> org.kiama.example.obr.ObrTree.IfStmt.equals(x$1: Any): Boolean
11272 ===> org.kiama.rewriting.NominalAST.Name.unapply(x$0: org.kiama.rewriting.NominalAST.Name): Option[(String, Option[Int])]
9161 ===> org.kiama.example.obr.SPARCTree.Indexed.productElement(x$1: Int): Any
54 ===> org.kiama.attribution.AttributionBase.circular[T <: AnyRef, U](optNameDef: Option[String])(init: U)(f: T => U): T => U
150 ===> org.kiama.attribution.AttributionTests.Pair.productPrefix: String
10503 ===> org.kiama.example.til.AST.Write.toString(): String
11766 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7840 ===> org.kiama.example.obr.ObrTree.BoolExp.productPrefix: String
8855 ===> org.kiama.example.obr.SPARCTree.StW.unapply(x$0: org.kiama.example.obr.SPARCTree.StW): Option[(org.kiama.example.obr.SPARCTree.Address, org.kiama.example.obr.SPARCTree.Datum)]
4004 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.equals(that: Any): Boolean
6621 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productArity: Int
7926 ===> org.kiama.example.obr.ObrTree.IdnExp.readResolve(): Object
1091 ===> org.kiama.example.RISC.RISCISA.RD.a: org.kiama.example.RISC.RISCISA.RegNo
1591 ===> org.kiama.example.imperative.AST.Var.s: org.kiama.example.imperative.AST.Idn
2604 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.apply(ns: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Pattern
3744 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productPrefix: String
2665 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
10882 ===> org.kiama.machine.Machine.ParamUpdater.t: T
8684 ===> org.kiama.example.obr.SPARCEncoder.availregs_$eq(x$1: Int): Unit
10313 ===> org.kiama.example.repmin.RepminBase.$init$(): Unit
1957 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.copy(bds: List[org.kiama.example.iswim.compiler.Syntax.Stmt]): org.kiama.example.iswim.compiler.Syntax.IswimProg
890 ===> org.kiama.example.RISC.RISCISA.OR.productPrefix: String
3663 ===> org.kiama.example.iswim.secd.SECDBase.PushType.copy(ty: org.kiama.example.iswim.secd.SECDBase.TypeValue): org.kiama.example.iswim.secd.SECDBase.PushType
10927 ===> org.kiama.machine.MachineTests.mmemitter: org.kiama.util.StringEmitter
11240 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.unapply(x$0: ParenPrettyPrinterTests.this.Leaf): Option[Int]
7950 ===> org.kiama.example.obr.ObrTree.IntExp.productPrefix: String
559 ===> org.kiama.example.RISC.RISCISA.MVNI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
1019 ===> org.kiama.example.RISC.RISCISA.POP.productIterator: Iterator[Any]
1805 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
4309 ===> org.kiama.example.json.JSONTree.JNumber.hashCode(): Int
12132 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1088 ===> org.kiama.example.RISC.RISCISA.PSH.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.PSH
209 ===> org.kiama.attribution.AttributionTests.EitherTree.<init>(): AttributionTests.this.EitherTree.type
12566 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productElement(x$1: Int): Any
1070 ===> org.kiama.example.RISC.RISCISA.PSH.a: org.kiama.example.RISC.RISCISA.RegNo
8964 ===> org.kiama.example.obr.SPARCTree.CmpgtW.hashCode(): Int
9511 ===> org.kiama.example.oneohonecompanies.Company.Dept.<init>(): org.kiama.example.oneohonecompanies.Company.Dept.type
3396 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.copy(flds: List[org.kiama.example.iswim.secd.SECDBase.Value]): RecordOps.this.RecordValue
8708 ===> org.kiama.example.obr.SPARCTransformation.exitlab_$eq(x$1: org.kiama.example.obr.SPARCTree.Label): Unit
274 ===> org.kiama.attribution.AttributionTests.MapTree.hashCode(): Int
10469 ===> org.kiama.example.til.AST.For.toString(): String
5534 ===> org.kiama.example.oberon0.L0.c.CAddExp.toString(): String
11942 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
426 ===> org.kiama.attribution.DynamicAttributionTests.Unused.b: Boolean
7195 ===> org.kiama.example.oberon0.base.c.CArrayType.copy$default$2: org.kiama.example.oberon0.base.c.CType @scala.annotation.unchecked.uncheckedVariance
1982 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.toString(): String
2718 ===> org.kiama.example.iswim.compiler.Syntax.Assign.copy(r: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Assign
2591 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.<init>(ns: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Pattern
10812 ===> org.kiama.example.transform.AST.BinExp.productElement(x$1: Int): Any
12032 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4487 ===> org.kiama.example.lambda.Evaluator.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9333 ===> org.kiama.example.obr.SymbolTable.ArrayType.productArity: Int
1730 ===> org.kiama.example.imperative.AST.Null.toString(): String
12552 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n3: ParserUtilitiesTests.this.Node
10662 ===> org.kiama.example.til.AST.Eq.canEqual(x$1: Any): Boolean
4196 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.toString(): String
4031 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productElement(x$1: Int): Any
12609 ===> org.kiama.util.GeneratingREPLBase.$init$(): Unit
3240 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.<init>(): org.kiama.example.iswim.secd.IntegerOps.Rem.type
8584 ===> org.kiama.example.obr.RISCTree.SubW.l: org.kiama.example.obr.RISCTree.Datum
1137 ===> org.kiama.example.RISC.RISCISA.WRH.<init>(): org.kiama.example.RISC.RISCISA.WRH.type
5791 ===> org.kiama.example.oberon0.L0.source.NamedType.equals(x$1: Any): Boolean
328 ===> org.kiama.attribution.AttributionTests.QuadTree.<init>(): AttributionTests.this.QuadTree.type
5001 ===> org.kiama.example.lambda3.AST.App.copy(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.App
5143 ===> org.kiama.example.lambda3.AST.SwapQuery.productIterator: Iterator[Any]
5075 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.execute: FreeNamesQuery.this.T
81 ===> org.kiama.attribution.Attribution.CachedParamAttribute.memoVersion_$eq(x$1: Int): Unit
1004 ===> org.kiama.example.RISC.RISCISA.LDB.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.LDB
4950 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8342 ===> org.kiama.example.obr.RISCTree.Read.readResolve(): Object
4681 ===> org.kiama.example.lambda2.AST.IntType.unapply(x$0: org.kiama.example.lambda2.AST.IntType): Boolean
6694 ===> org.kiama.example.oberon0.L3.source.FPSection.<init>(mode: org.kiama.example.oberon0.L3.source.Mode,idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L3.source.FPSection
8549 ===> org.kiama.example.obr.RISCTree.Not.<init>(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Not
2679 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.ThrowTo): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
1112 ===> org.kiama.example.RISC.RISCISA.WRD.copy(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRD
3645 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.<init>(me: org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue): org.kiama.example.iswim.secd.SECDBase.PushMachineException
11812 ===> org.kiama.rewriting.RewriterTests.NotSame.<init>(): RewriterTests.this.NotSame.type
2512 ===> org.kiama.example.iswim.compiler.Syntax.If.productIterator: Iterator[Any]
9282 ===> org.kiama.example.obr.SymbolTable.Multiple.toString(): String
7309 ===> org.kiama.example.oberon0.base.source.EmptyStmt.<init>(): org.kiama.example.oberon0.base.source.EmptyStmt
4666 ===> org.kiama.example.lambda2.AST.Bind.readResolve(): Object
8464 ===> org.kiama.example.obr.RISCTree.DivW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
1772 ===> org.kiama.example.imperative.AST.Asgn.apply(v: org.kiama.example.imperative.AST.Var,e: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Asgn
2327 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productElement(x$1: Int): Any
8001 ===> org.kiama.example.obr.ObrTree.ModExp.left: org.kiama.example.obr.ObrTree.Expression
2734 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.nms: List[org.kiama.example.iswim.compiler.Syntax.Variable]
5792 ===> org.kiama.example.oberon0.L0.source.NamedType.<init>(): org.kiama.example.oberon0.L0.source.NamedType.type
8649 ===> org.kiama.example.obr.RISCTree.Indexed.productIterator: Iterator[Any]
7607 ===> org.kiama.example.obr.ObrTree.ExnConst.<init>(): org.kiama.example.obr.ObrTree.ExnConst.type
1803 ===> org.kiama.example.imperative.AST.Neg(s1: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
9594 ===> org.kiama.example.oneohonecompanies.SampleCompany.<init>(): org.kiama.example.oneohonecompanies.SampleCompany.type
203 ===> org.kiama.attribution.AttributionTests.EitherTree.productElement(x$1: Int): Any
11894 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8559 ===> org.kiama.example.obr.RISCTree.Not.equals(x$1: Any): Boolean
11504 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.toString(): String
4608 ===> org.kiama.example.lambda2.AST.Let.e1: org.kiama.example.lambda2.AST.Exp
7943 ===> org.kiama.example.obr.ObrTree.IndexExp.apply(idn: org.kiama.example.obr.ObrTree.Identifier,indx: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.IndexExp
4869 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3116 ===> org.kiama.example.iswim.secd.IntComparisonOps.<init>(): org.kiama.example.iswim.secd.IntComparisonOps.type
992 ===> org.kiama.example.RISC.RISCISA.LDB.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
8408 ===> org.kiama.example.obr.RISCTree.CmpneW.productPrefix: String
7917 ===> org.kiama.example.obr.ObrTree.IdnExp.productIterator: Iterator[Any]
5603 ===> org.kiama.example.oberon0.L0.c.CDivExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CDivExp
5996 ===> org.kiama.example.oberon0.L0.source.OrExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.OrExp
1283 ===> org.kiama.example.RISC.RISCISA.BSR.productIterator: Iterator[Any]
1752 ===> org.kiama.example.imperative.AST.Seqn.apply(ss: Seq[org.kiama.example.imperative.AST.Stmt]): org.kiama.example.imperative.AST.Seqn
12619 ===> org.kiama.util.Tests.failExpectedTest$default$3[T]: String @scala.annotation.unchecked.uncheckedVariance
12487 ===> org.kiama.util.ParserUtilitiesTests.Tup3.copy$default$2: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
9172 ===> org.kiama.example.obr.SPARCTree.Label.num: Int
7240 ===> org.kiama.example.oberon0.base.c.CReturn.unapply(x$0: org.kiama.example.oberon0.base.c.CReturn): Option[org.kiama.example.oberon0.base.c.CExpression]
2448 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.<init>(par: org.kiama.example.iswim.compiler.Syntax.Variable,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Lambda
11549 ===> org.kiama.rewriting.Rewriter.option(o: => Option[Rewriter.this.Term]): Rewriter.this.Strategy
8191 ===> org.kiama.example.obr.RISCTree.RISCProg.productArity: Int
3427 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.apply(bs: List[org.kiama.example.iswim.secd.SECDBase.ByteCodeBase]): org.kiama.example.iswim.secd.SECDBase.CodeTree
12133 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7400 ===> org.kiama.example.obr.Driver.spillTargetTreeFlag: Boolean
12385 ===> org.kiama.util.IO.stringreader(string: String): java.io.BufferedReader
9978 ===> org.kiama.example.prolog.Interpreter.renamecount: Int
10824 ===> org.kiama.example.transform.AST.Num.value: Int
2674 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.toString(): String
9688 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.apply(Type: org.kiama.example.picojava.AbstractSyntax.Access,Name: String): org.kiama.example.picojava.AbstractSyntax.VarDecl
10044 ===> org.kiama.example.prolog.PrologTree.Rule.productArity: Int
516 ===> org.kiama.example.RISC.RISCISA.MOVI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
8650 ===> org.kiama.example.obr.RISCTree.Indexed.canEqual(x$1: Any): Boolean
7971 ===> org.kiama.example.obr.ObrTree.LessExp.productElement(x$1: Int): Any
6429 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
10031 ===> org.kiama.example.prolog.PrologTree.Fact.equals(x$1: Any): Boolean
7203 ===> org.kiama.example.oberon0.base.c.CArrayType.equals(x$1: Any): Boolean
4588 ===> org.kiama.example.lambda2.AST.Opn.<init>(e1: org.kiama.example.lambda2.AST.Exp,o: org.kiama.example.lambda2.AST.Op,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Opn
5883 ===> org.kiama.example.oberon0.L0.source.LeExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.LeExp
3081 ===> org.kiama.example.iswim.secd.IOOps.Write.<init>(): org.kiama.example.iswim.secd.IOOps.Write
11538 ===> org.kiama.rewriting.Rewriter.strategy(f: org.kiama.==>[Rewriter.this.Term,Option[Rewriter.this.Term]]): Rewriter.this.Strategy
2956 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.hashCode(): Int
6300 ===> org.kiama.example.oberon0.L2.TypeAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
9030 ===> org.kiama.example.obr.SPARCTree.LdW.copy$default$1: org.kiama.example.obr.SPARCTree.Address @scala.annotation.unchecked.uncheckedVariance
1888 ===> org.kiama.example.imperative.Generator.genLeafExp: org.scalacheck.Gen[org.kiama.example.imperative.AST.Exp with Serializable]
2974 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.h: ExceptionHandler.this.Handler
7035 ===> org.kiama.example.oberon0.base.TranslatingDriver.pprintcastFlag_$eq(x$1: Boolean): Unit
7408 ===> org.kiama.example.obr.Driver.checkargs(args: Array[String],emitter: org.kiama.util.Emitter): Array[String]
4484 ===> org.kiama.example.lambda.Evaluator.fv(t: org.kiama.example.lambda.AST.Exp): Set[org.kiama.example.lambda.AST.Idn]
8950 ===> org.kiama.example.obr.SPARCTree.CmpneW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpneW
11060 ===> org.kiama.output.PrettyPrinterBase.ssep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
9194 ===> org.kiama.example.obr.SemanticAnalysis.errors: org.kiama.attribution.Attributable => Unit
10090 ===> org.kiama.example.prolog.PrologTree.Integer.readResolve(): Object
11364 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.toString(): String
12211 ===> org.kiama.rewriting.UniplateTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Unit] with Serializable
11899 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1253 ===> org.kiama.example.RISC.RISCISA.BGT.hashCode(): Int
6285 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12215 ===> org.kiama.rewriting.UniplateTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.example.imperative.AST.Idn](x$1: A1,default: A1 => B1): B1
11484 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productIterator: Iterator[Any]
6672 ===> org.kiama.example.oberon0.L3.source.VarMode.toString(): String
8885 ===> org.kiama.example.obr.SPARCTree.AddW.canEqual(x$1: Any): Boolean
5092 ===> org.kiama.example.lambda3.AST.FreshQuery.e: org.kiama.example.lambda3.AST.Exp
3611 ===> org.kiama.example.iswim.secd.SECDBase.Resume.apply(): org.kiama.example.iswim.secd.SECDBase.Resume
8999 ===> org.kiama.example.obr.SPARCTree.DivW.productElement(x$1: Int): Any
11970 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10934 ===> org.kiama.output.Side.<init>(): org.kiama.output.Side
2044 ===> org.kiama.example.iswim.compiler.Syntax.Plus.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
2676 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.<init>(): org.kiama.example.iswim.compiler.Syntax.ThrowTo.type
3441 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.<init>(): org.kiama.example.iswim.secd.SECDBase.CodeSegment.type
5655 ===> org.kiama.example.oberon0.L0.c.CAndExp.equals(x$1: Any): Boolean
10333 ===> org.kiama.example.til.TransformingMain.$init$(): Unit
11725 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5828 ===> org.kiama.example.oberon0.L0.source.EqExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
5588 ===> org.kiama.example.oberon0.L0.c.CMulExp.productPrefix: String
11068 ===> org.kiama.output.PrettyPrinterBase.sterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
8748 ===> org.kiama.example.obr.SPARCTree.Beq.<init>(): org.kiama.example.obr.SPARCTree.Beq.type
10320 ===> org.kiama.example.repmin.RepminDec.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.repmin.Tree,Int] with Serializable
8535 ===> org.kiama.example.obr.RISCTree.NegW.productPrefix: String
8830 ===> org.kiama.example.obr.SPARCTree.Ret.hashCode(): Int
5663 ===> org.kiama.example.oberon0.L0.c.CNegExp.exp: org.kiama.example.oberon0.base.c.CExpression
9810 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productElement(x$1: Int): Any
4532 ===> org.kiama.example.lambda2.AST.Var.productPrefix: String
11417 ===> org.kiama.rewriting.PositionedRewriterTests.pl1f: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
11759 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3797 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.type
864 ===> org.kiama.example.RISC.RISCISA.ANDI.toString(): String
7259 ===> org.kiama.example.oberon0.base.c.CIntExp.readResolve(): Object
2663 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.c: org.kiama.example.iswim.compiler.Syntax.Expr
12383 ===> org.kiama.util.IO.filewriter(name: String,encoding: String): java.io.BufferedWriter
2202 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.canEqual(x$1: Any): Boolean
12066 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8526 ===> org.kiama.example.obr.RISCTree.MulW.<init>(): org.kiama.example.obr.RISCTree.MulW.type
171 ===> org.kiama.attribution.AttributionTests.Leaf.canEqual(x$1: Any): Boolean
3531 ===> org.kiama.example.iswim.secd.SECDBase.Enter.toString(): String
10041 ===> org.kiama.example.prolog.PrologTree.Rule.copy$default$1: org.kiama.example.prolog.PrologTree.Term @scala.annotation.unchecked.uncheckedVariance
10949 ===> org.kiama.output.RightAssoc.canEqual(x$1: Any): Boolean
5363 ===> org.kiama.example.oberon0.L0.c.CTypeDef.<init>(decl: org.kiama.example.oberon0.base.c.CVarDecl): org.kiama.example.oberon0.L0.c.CTypeDef
604 ===> org.kiama.example.RISC.RISCISA.ADDI.productElement(x$1: Int): Any
7184 ===> org.kiama.example.oberon0.base.c.CStrType.equals(x$1: Any): Boolean
10263 ===> org.kiama.example.prolog.Subst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6746 ===> org.kiama.example.oberon0.L4.SymbolTable.$init$(): Unit
12344 ===> org.kiama.util.Environments.UnknownEntity.canEqual(x$1: Any): Boolean
9316 ===> org.kiama.example.obr.SymbolTable.BoolType.productElement(x$1: Int): Any
2232 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.GreaterEq
11427 ===> org.kiama.rewriting.PositionedRewriterTests.l2: org.kiama.rewriting.SupportPositionedRewriterTests.Leaf
9691 ===> org.kiama.example.picojava.AbstractSyntax.Stmt.<init>(): org.kiama.example.picojava.AbstractSyntax.Stmt
11265 ===> org.kiama.rewriting.NominalAST.Name.productIterator: Iterator[Any]
6440 ===> org.kiama.example.oberon0.L3.Parser.statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
5301 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productIterator: Iterator[Any]
8257 ===> org.kiama.example.obr.RISCTree.Jmp.unapply(x$0: org.kiama.example.obr.RISCTree.Jmp): Option[org.kiama.example.obr.RISCTree.Label]
2554 ===> org.kiama.example.iswim.compiler.Syntax.Block.toString(): String
3878 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.toString(): String
11046 ===> org.kiama.output.PrettyPrinterBase.plist$default$2: String @scala.annotation.unchecked.uncheckedVariance
4943 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10068 ===> org.kiama.example.prolog.PrologTree.Var.equals(x$1: Any): Boolean
12479 ===> org.kiama.util.ParserUtilitiesTests.Tup2.unapply(x$0: ParserUtilitiesTests.this.Tup2): Option[(ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node)]
85 ===> org.kiama.attribution.Attribution.CachedParamAttribute.$anon.apply(t: T): U
2683 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MkRef
9897 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.fInBB: org.kiama.example.picojava.AbstractSyntax.Use
1794 ===> org.kiama.example.imperative.AST.While.readResolve(): Object
11314 ===> org.kiama.rewriting.NominalRewriter.<init>(): org.kiama.rewriting.NominalRewriter.type
3249 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productElement(x$1: Int): Any
10510 ===> org.kiama.example.til.AST.Id.toString(): String
8208 ===> org.kiama.example.obr.RISCTree.Beq.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
8355 ===> org.kiama.example.obr.RISCTree.AddW.toString(): String
24 ===> org.kiama.attribution.Attributable.setConnections(c: org.kiama.attribution.Attributable): Unit
654 ===> org.kiama.example.RISC.RISCISA.SUBI.unapply(x$0: org.kiama.example.RISC.RISCISA.SUBI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
2406 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.equals(x$1: Any): Boolean
5827 ===> org.kiama.example.oberon0.L0.source.EqExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.EqExp
978 ===> org.kiama.example.RISC.RISCISA.LDW.canEqual(x$1: Any): Boolean
2728 ===> org.kiama.example.iswim.compiler.Syntax.Assign.equals(x$1: Any): Boolean
1319 ===> org.kiama.example.RISC.RISCISA.Target.canEqual(x$1: Any): Boolean
8833 ===> org.kiama.example.obr.SPARCTree.Ret.<init>(): org.kiama.example.obr.SPARCTree.Ret.type
12493 ===> org.kiama.util.ParserUtilitiesTests.Tup3.canEqual(x$1: Any): Boolean
4214 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
2477 ===> org.kiama.example.iswim.compiler.Syntax.Return.<init>(): org.kiama.example.iswim.compiler.Syntax.Return.type
7521 ===> org.kiama.example.obr.ObrTree.RecordVar.idn: org.kiama.example.obr.ObrTree.Identifier
9439 ===> org.kiama.example.obr.SymbolTable.UnknownType.<init>(): org.kiama.example.obr.SymbolTable.UnknownType.type
5365 ===> org.kiama.example.oberon0.L0.c.CTypeDef.copy$default$1: org.kiama.example.oberon0.base.c.CVarDecl @scala.annotation.unchecked.uncheckedVariance
9999 ===> org.kiama.example.prolog.PrologTree.Program.cs: List[org.kiama.example.prolog.PrologTree.Clause]
564 ===> org.kiama.example.RISC.RISCISA.MVNI.canEqual(x$1: Any): Boolean
11039 ===> org.kiama.output.PrettyPrinterBase.spaces(n: Int): PrettyPrinterBase.this.Doc
520 ===> org.kiama.example.RISC.RISCISA.MOVI.productElement(x$1: Int): Any
5220 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.decl: org.kiama.example.oberon0.L0.source.ConstDecl
10645 ===> org.kiama.example.til.AST.Sub.toString(): String
8102 ===> org.kiama.example.obr.ObrTree.PlusExp.canEqual(x$1: Any): Boolean
3351 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productIterator: Iterator[Any]
5671 ===> org.kiama.example.oberon0.L0.c.CNegExp.productElement(x$1: Int): Any
9216 ===> org.kiama.example.obr.SymbolTable.Entity.tipe: org.kiama.example.obr.SymbolTable.Type
6870 ===> org.kiama.example.oberon0.L4.c.CFieldExp.readResolve(): Object
12455 ===> org.kiama.util.ParserUtilitiesTests.Node.toString(): String
2179 ===> org.kiama.example.iswim.compiler.Syntax.Less.productPrefix: String
6730 ===> org.kiama.example.oberon0.L3.source.Call.readResolve(): Object
7304 ===> org.kiama.example.oberon0.base.source.Block.<init>(): org.kiama.example.oberon0.base.source.Block.type
7565 ===> org.kiama.example.obr.ObrTree.EnumConst.productElement(x$1: Int): Any
9354 ===> org.kiama.example.obr.SymbolTable.RecordType.canEqual(x$1: Any): Boolean
4478 ===> org.kiama.example.lambda.AST.Sub.toString(): String
1766 ===> org.kiama.example.imperative.AST.Asgn.canEqual(x$1: Any): Boolean
8710 ===> org.kiama.example.obr.SPARCTransformation.sitems: org.kiama.example.obr.ObrTree.Statement => List[org.kiama.example.obr.SPARCTree.Item]
8735 ===> org.kiama.example.obr.SPARCTree.Beq.dest: org.kiama.example.obr.SPARCTree.Label
3628 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.readResolve(): Object
10175 ===> org.kiama.example.prolog.SymbolTable.Predicate.toString(): String
5777 ===> org.kiama.example.oberon0.L0.source.TypeDecl.unapply(x$0: org.kiama.example.oberon0.L0.source.TypeDecl): Option[(org.kiama.example.oberon0.base.source.IdnDef, org.kiama.example.oberon0.L0.source.TypeDef)]
4081 ===> org.kiama.example.iswim.secd.StackOps.Pop.canEqual(x$1: Any): Boolean
9530 ===> org.kiama.example.oneohonecompanies.Company.Employee.toString(): String
953 ===> org.kiama.example.RISC.RISCISA.XORI.productPrefix: String
10432 ===> org.kiama.example.til.AST.While.b: Seq[org.kiama.example.til.AST.Stat]
3442 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.apply(bs: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase*): org.kiama.example.iswim.secd.SECDBase.CodeSegment
3385 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.equals(x$1: Any): Boolean
5275 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.<init>(ident: String): SymbolTable.this.BuiltinType
12223 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Int] with Serializable
10219 ===> org.kiama.example.prolog.SymbolTable.IntegerType.canEqual(x$1: Any): Boolean
5781 ===> org.kiama.example.oberon0.L0.source.NamedType.<init>(idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L0.source.NamedType
5106 ===> org.kiama.example.lambda3.AST.FreshQuery.<init>(): org.kiama.example.lambda3.AST.FreshQuery.type
3024 ===> org.kiama.example.iswim.secd.HeapOps.Get.apply(): org.kiama.example.iswim.secd.HeapOps.Get
4377 ===> org.kiama.example.json.Rewriter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1733 ===> org.kiama.example.imperative.AST.Null.toString(): String
6124 ===> org.kiama.example.oberon0.L0.source.IntExp.productPrefix: String
3299 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.n: Int
838 ===> org.kiama.example.RISC.RISCISA.CHKI.readResolve(): Object
10802 ===> org.kiama.example.transform.AST.BinExp.left: org.kiama.example.transform.AST.Exp
6168 ===> org.kiama.example.oberon0.L1.Parser.keywordStrings: List[String]
7999 ===> org.kiama.example.obr.ObrTree.MinusExp.unapply(x$0: org.kiama.example.obr.ObrTree.MinusExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
363 ===> org.kiama.attribution.Decorators.Chain.copy[T, U](in: T => U,out: T => U): org.kiama.attribution.Decorators.Chain[T,U]
731 ===> org.kiama.example.RISC.RISCISA.DIVI.productIterator: Iterator[Any]
11482 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productArity: Int
7001 ===> org.kiama.example.oberon0.base.Driver.pprintastFlag_$eq(x$1: Boolean): Unit
8331 ===> org.kiama.example.obr.RISCTree.Read.productArity: Int
6258 ===> org.kiama.example.oberon0.L1.source.WhileStatement.copy(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L1.source.WhileStatement
10978 ===> org.kiama.output.Postfix.hashCode(): Int
3141 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.equals(x$1: Any): Boolean
3610 ===> org.kiama.example.iswim.secd.SECDBase.Resume.toString(): String
4875 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9587 ===> org.kiama.example.oneohonecompanies.Precedence.$anonfun.applyOrElse[A1 <: org.kiama.example.oneohonecompanies.Company.Node, B1 >: org.kiama.example.oneohonecompanies.Company.Salary](x$1: A1,default: A1 => B1): B1
5775 ===> org.kiama.example.oberon0.L0.source.TypeDecl.toString(): String
1201 ===> org.kiama.example.RISC.RISCISA.BLT.productArity: Int
442 ===> org.kiama.attribution.DynamicAttributionTests.Unused.readResolve(): Object
5255 ===> org.kiama.example.oberon0.L0.SymbolTable.Type.<init>(): SymbolTable.this.Type
719 ===> org.kiama.example.RISC.RISCISA.DIVI.a: org.kiama.example.RISC.RISCISA.RegNo
8596 ===> org.kiama.example.obr.RISCTree.SubW.toString(): String
3000 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productArity: Int
8558 ===> org.kiama.example.obr.RISCTree.Not.toString(): String
5291 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.tipe: SymbolTable.this.Type
1514 ===> org.kiama.example.dataflow.For.productElement(x$1: Int): Any
2961 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.apply(): org.kiama.example.iswim.secd.ExceptionHandler.SetHandler
3241 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.toString(): String
6529 ===> org.kiama.example.oberon0.L3.c.CVoidType.productPrefix: String
9675 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.copy(Type: org.kiama.example.picojava.AbstractSyntax.Access,Name: String): org.kiama.example.picojava.AbstractSyntax.VarDecl
6938 ===> org.kiama.example.oberon0.L4.source.FieldList.productIterator: Iterator[Any]
9567 ===> org.kiama.example.oneohonecompanies.Company.DU.<init>(): org.kiama.example.oneohonecompanies.Company.DU.type
444 ===> org.kiama.attribution.DynamicAttributionTests.count_$eq(x$1: Int): Unit
3372 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.toString(): String
1249 ===> org.kiama.example.RISC.RISCISA.BGT.productArity: Int
7312 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productArity: Int
324 ===> org.kiama.attribution.AttributionTests.QuadTree.canEqual(x$1: Any): Boolean
8465 ===> org.kiama.example.obr.RISCTree.DivW.productPrefix: String
64 ===> org.kiama.attribution.AttributionBase.initTree[T <: org.kiama.attribution.Attributable](t: T): Unit
4844 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10616 ===> org.kiama.example.til.AST.Add.<init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Add
5478 ===> org.kiama.example.oberon0.L0.c.CLeExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CLeExp
6409 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.condToDoc(cond: org.kiama.example.oberon0.L2.source.Condition): PrettyPrinter.this.Doc
10607 ===> org.kiama.example.til.AST.Div.toString(): String
10807 ===> org.kiama.example.transform.AST.BinExp.copy$default$1: org.kiama.example.transform.AST.Exp @scala.annotation.unchecked.uncheckedVariance
6480 ===> org.kiama.example.oberon0.L3.SymbolTable.isVariable(e: SymbolTable.this.Entity): Boolean
1072 ===> org.kiama.example.RISC.RISCISA.PSH.im: org.kiama.example.RISC.RISCISA.Imm
733 ===> org.kiama.example.RISC.RISCISA.DIVI.hashCode(): Int
5053 ===> org.kiama.example.lambda3.AST.EquivQuery.unapply(x$0: org.kiama.example.lambda3.AST.EquivQuery): Option[(org.kiama.example.lambda3.AST.Exp, org.kiama.example.lambda3.AST.Exp)]
5374 ===> org.kiama.example.oberon0.L0.c.CTypeDef.<init>(): org.kiama.example.oberon0.L0.c.CTypeDef.type
950 ===> org.kiama.example.RISC.RISCISA.XORI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
9063 ===> org.kiama.example.obr.SPARCTree.NegW.d: org.kiama.example.obr.SPARCTree.Datum
4386 ===> org.kiama.example.json.SyntaxAnalysis.$init$(): Unit
6595 ===> org.kiama.example.oberon0.L3.c.CAddrExp.exp: org.kiama.example.oberon0.base.c.CExpression
1902 ===> org.kiama.example.imperative.Generator.genWhile(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.While]
4382 ===> org.kiama.example.json.RewritingTests.<init>(): org.kiama.example.json.RewritingTests
3788 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.copy(): org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue
2803 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productIterator: Iterator[Any]
3194 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.equals(x$1: Any): Boolean
1723 ===> org.kiama.example.imperative.AST.Null.copy(): org.kiama.example.imperative.AST.Null
6042 ===> org.kiama.example.oberon0.L0.source.ModExp.right: org.kiama.example.oberon0.L0.source.Expression
6034 ===> org.kiama.example.oberon0.L0.source.DivExp.toString(): String
5802 ===> org.kiama.example.oberon0.L0.source.Assignment.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
9794 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productIterator: Iterator[Any]
1823 ===> org.kiama.example.imperative.AST.Seqn(s1: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
8661 ===> org.kiama.example.obr.RISCTree.Label.copy(num: Int): org.kiama.example.obr.RISCTree.Label
6307 ===> org.kiama.example.oberon0.L2.source.ForStatement.<init>(idn: org.kiama.example.oberon0.L0.source.IdnExp,lower: org.kiama.example.oberon0.L0.source.Expression,upper: org.kiama.example.oberon0.L0.source.Expression,by: Option[org.kiama.example.oberon0.L0.source.Expression],block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L2.source.ForStatement
3670 ===> org.kiama.example.iswim.secd.SECDBase.PushType.hashCode(): Int
7026 ===> org.kiama.example.oberon0.base.TransformingDriver.pprintiastFlagDefault: Boolean
2824 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.toString(): String
8593 ===> org.kiama.example.obr.RISCTree.SubW.productIterator: Iterator[Any]
9754 ===> org.kiama.example.picojava.AbstractSyntax.Dot.copy(ObjectReference: org.kiama.example.picojava.AbstractSyntax.Access,IdnUse: org.kiama.example.picojava.AbstractSyntax.IdnUse): org.kiama.example.picojava.AbstractSyntax.Dot
8330 ===> org.kiama.example.obr.RISCTree.Read.productPrefix: String
1183 ===> org.kiama.example.RISC.RISCISA.BNE.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
1013 ===> org.kiama.example.RISC.RISCISA.POP.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
7497 ===> org.kiama.example.obr.ObrTree.BoolVar.<init>(): org.kiama.example.obr.ObrTree.BoolVar.type
12254 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9948 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.canEqual(x$1: Any): Boolean
5428 ===> org.kiama.example.oberon0.L0.c.CNeExp.productPrefix: String
10841 ===> org.kiama.example.transform.AST.Var.name: String
4299 ===> org.kiama.example.json.JSONTree.JString.readResolve(): Object
4420 ===> org.kiama.example.lambda.AST.Var.apply(x: org.kiama.example.lambda.AST.Idn): org.kiama.example.lambda.AST.Var
1896 ===> org.kiama.example.imperative.Generator.arbExp: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Exp]
9727 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.apply(Condition: org.kiama.example.picojava.AbstractSyntax.Exp,Body: org.kiama.example.picojava.AbstractSyntax.Stmt): org.kiama.example.picojava.AbstractSyntax.WhileStmt
1275 ===> org.kiama.example.RISC.RISCISA.BR.readResolve(): Object
11208 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.op: String
2579 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productElement(x$1: Int): Any
7670 ===> org.kiama.example.obr.ObrTree.IfStmt.cond: org.kiama.example.obr.ObrTree.Expression
4578 ===> org.kiama.example.lambda2.AST.App.toString(): String
7151 ===> org.kiama.example.oberon0.base.c.CBlock.hashCode(): Int
12524 ===> org.kiama.util.ParserUtilitiesTests.Tup4.readResolve(): Object
2716 ===> org.kiama.example.iswim.compiler.Syntax.Assign.e: org.kiama.example.iswim.compiler.Syntax.Expr
5629 ===> org.kiama.example.oberon0.L0.c.CModExp.productArity: Int
8523 ===> org.kiama.example.obr.RISCTree.MulW.hashCode(): Int
795 ===> org.kiama.example.RISC.RISCISA.CMP.equals(x$1: Any): Boolean
4916 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
11493 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.readResolve(): Object
11555 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
9292 ===> org.kiama.example.obr.SymbolTable.Type.<init>(): org.kiama.example.obr.SymbolTable.Type
7469 ===> org.kiama.example.obr.ObrTree.IntParam.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IntParam
5692 ===> org.kiama.example.oberon0.L0.c.CNotExp.canEqual(x$1: Any): Boolean
11551 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
12231 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.<init>(): TestDoubleNegSimplification.type
9586 ===> org.kiama.example.oneohonecompanies.Precedence.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oneohonecompanies.Company.Node,org.kiama.example.oneohonecompanies.Company.Salary] with Serializable
7236 ===> org.kiama.example.oberon0.base.c.CReturn.equals(x$1: Any): Boolean
5649 ===> org.kiama.example.oberon0.L0.c.CAndExp.productArity: Int
5287 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.apply(ident: String): SymbolTable.this.BuiltinType
6453 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.canEqual(x$1: Any): Boolean
7121 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.body: org.kiama.example.oberon0.base.c.CBlock
2675 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.equals(x$1: Any): Boolean
1664 ===> org.kiama.example.imperative.AST.Sub.copy$default$1: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10498 ===> org.kiama.example.til.AST.Write.canEqual(x$1: Any): Boolean
476 ===> org.kiama.example.RISC.RISC.halt: RISC.this.State[Boolean]
6465 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.copy(mode: org.kiama.example.oberon0.L3.source.Mode,varr: SymbolTable.this.Variable): SymbolTable.this.Parameter
1768 ===> org.kiama.example.imperative.AST.Asgn.toString(): String
12220 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.<init>(): TestDivsByZero.type
9361 ===> org.kiama.example.obr.SymbolTable.RecordType.readResolve(): Object
8916 ===> org.kiama.example.obr.SPARCTree.CmpeqW.r: org.kiama.example.obr.SPARCTree.Datum
1281 ===> org.kiama.example.RISC.RISCISA.BSR.productArity: Int
1732 ===> org.kiama.example.imperative.AST.Null.<init>(): org.kiama.example.imperative.AST.Null.type
497 ===> org.kiama.example.RISC.RISCISA.MOV.productPrefix: String
4695 ===> org.kiama.example.lambda2.AST.FunType.toString(): String
934 ===> org.kiama.example.RISC.RISCISA.XOR.productElement(x$1: Int): Any
12156 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3608 ===> org.kiama.example.iswim.secd.SECDBase.Resume.equals(x$1: Any): Boolean
462 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.isDefinedAt(x$1: DynamicAttributionTests.this.Tree): Boolean
9797 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.toString(): String
2627 ===> org.kiama.example.iswim.compiler.Syntax.Match.clauses: List[org.kiama.example.iswim.compiler.Syntax.MatchClause]
5370 ===> org.kiama.example.oberon0.L0.c.CTypeDef.canEqual(x$1: Any): Boolean
6732 ===> org.kiama.example.oberon0.L3.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
5368 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productElement(x$1: Int): Any
6216 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.copy$default$2: org.kiama.example.oberon0.base.c.CStatement @scala.annotation.unchecked.uncheckedVariance
9148 ===> org.kiama.example.obr.SPARCTree.Local.<init>(): org.kiama.example.obr.SPARCTree.Local.type
11530 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
5465 ===> org.kiama.example.oberon0.L0.c.CLeExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CLeExp
2740 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productElement(x$1: Int): Any
8483 ===> org.kiama.example.obr.RISCTree.IntDatum.productArity: Int
832 ===> org.kiama.example.RISC.RISCISA.CHKI.hashCode(): Int
11351 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.PositionalRewriter.Term, B1 >: org.kiama.rewriting.PositionalRewriter.Strategy](x$1: A1,default: A1 => B1): B1
1176 ===> org.kiama.example.RISC.RISCISA.BEQ.toString(): String
2653 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.canEqual(x$1: Any): Boolean
1945 ===> org.kiama.example.iswim.compiler.Parser.bindexpr(rhsexpr: Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Expr]): Parser.this.PackratParser[org.kiama.example.iswim.compiler.Syntax.Binding]
1494 ===> org.kiama.example.dataflow.DataflowForeach.<init>(): org.kiama.example.dataflow.DataflowForeach.type
6546 ===> org.kiama.example.oberon0.L3.c.CAddrType.productPrefix: String
8426 ===> org.kiama.example.obr.RISCTree.CmpgtW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
2890 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.equals(x$1: Any): Boolean
5110 ===> org.kiama.example.lambda3.AST.FreshQuery.readResolve(): Object
3909 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.apply(): org.kiama.example.iswim.secd.SECDBase.DumpEmpty
10879 ===> org.kiama.machine.Machine.State.toString(): String
10317 ===> org.kiama.example.repmin.Repmin.$init$(): Unit
4777 ===> org.kiama.example.lambda2.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
6461 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.mode: org.kiama.example.oberon0.L3.source.Mode
6676 ===> org.kiama.example.oberon0.L3.source.ValMode.<init>(): org.kiama.example.oberon0.L3.source.ValMode
2910 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.readResolve(): Object
2407 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.<init>(): org.kiama.example.iswim.compiler.Syntax.LetStmt.type
9516 ===> org.kiama.example.oneohonecompanies.Company.Employee.n: org.kiama.example.oneohonecompanies.Company.Name
4663 ===> org.kiama.example.lambda2.AST.Bind.toString(): String
8819 ===> org.kiama.example.obr.SPARCTree.Read.toString(): String
7009 ===> org.kiama.example.oberon0.base.Driver.challengeFlagDefault: Boolean
3188 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productArity: Int
2545 ===> org.kiama.example.iswim.compiler.Syntax.Block.productPrefix: String
8429 ===> org.kiama.example.obr.RISCTree.CmpgtW.productElement(x$1: Int): Any
10727 ===> org.kiama.example.transform.AST.Program.<init>(ops: List[(String, Int)],vars: List[org.kiama.example.transform.AST.VarDecl],expr: org.kiama.example.transform.AST.ExpR): org.kiama.example.transform.AST.Program
4513 ===> org.kiama.example.lambda2.AST.Num.copy(n: Int): org.kiama.example.lambda2.AST.Num
1066 ===> org.kiama.example.RISC.RISCISA.STB.toString(): String
9698 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productPrefix: String
3759 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productPrefix: String
718 ===> org.kiama.example.RISC.RISCISA.DIV.readResolve(): Object
8109 ===> org.kiama.example.obr.ObrTree.PlusExp.unapply(x$0: org.kiama.example.obr.ObrTree.PlusExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
5302 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.canEqual(x$1: Any): Boolean
3477 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productElement(x$1: Int): Any
9454 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productElement(x$1: Int): Any
8507 ===> org.kiama.example.obr.RISCTree.LdW.<init>(): org.kiama.example.obr.RISCTree.LdW.type
7948 ===> org.kiama.example.obr.ObrTree.IntExp.copy(num: Int): org.kiama.example.obr.ObrTree.IntExp
4325 ===> org.kiama.example.json.JSONTree.JTrue.toString(): String
11743 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
1265 ===> org.kiama.example.RISC.RISCISA.BR.productArity: Int
2668 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productPrefix: String
5056 ===> org.kiama.example.lambda3.AST.EvalQuery.<init>(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.EvalQuery
11755 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Int] with Serializable
945 ===> org.kiama.example.RISC.RISCISA.XORI.b: org.kiama.example.RISC.RISCISA.RegNo
6512 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.canEqual(x$1: Any): Boolean
700 ===> org.kiama.example.RISC.RISCISA.DIV.c: org.kiama.example.RISC.RISCISA.RegNo
4568 ===> org.kiama.example.lambda2.AST.App.<init>(e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.App
6177 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productPrefix: String
2928 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.<init>(): org.kiama.example.iswim.secd.ConversionOps.ConversionError
291 ===> org.kiama.attribution.AttributionTests.PairTree.hashCode(): Int
1590 ===> org.kiama.example.imperative.AST.Num.readResolve(): Object
3868 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.message: String
11042 ===> org.kiama.output.PrettyPrinterBase.list$default$3[T]: T => PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
11162 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.op: String
12050 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2445 ===> org.kiama.example.iswim.compiler.Syntax.Import.readResolve(): Object
8746 ===> org.kiama.example.obr.SPARCTree.Beq.toString(): String
1142 ===> org.kiama.example.RISC.RISCISA.WRL.<init>(): org.kiama.example.RISC.RISCISA.WRL
2255 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productElement(x$1: Int): Any
2048 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productElement(x$1: Int): Any
5833 ===> org.kiama.example.oberon0.L0.source.EqExp.productIterator: Iterator[Any]
4951 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10084 ===> org.kiama.example.prolog.PrologTree.Integer.hashCode(): Int
7590 ===> org.kiama.example.obr.ObrTree.IntConst.<init>(): org.kiama.example.obr.ObrTree.IntConst.type
12537 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productPrefix: String
8375 ===> org.kiama.example.obr.RISCTree.Cond.hashCode(): Int
2494 ===> org.kiama.example.iswim.compiler.Syntax.Apply.toString(): String
12556 ===> org.kiama.util.ParserUtilitiesTests.Tup6.<init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node,n6: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup6
9700 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productElement(x$1: Int): Any
7169 ===> org.kiama.example.oberon0.base.c.CIntType.equals(x$1: Any): Boolean
4350 ===> org.kiama.example.json.JSONTree.JNull.productArity: Int
6023 ===> org.kiama.example.oberon0.L0.source.DivExp.right: org.kiama.example.oberon0.L0.source.Expression
1059 ===> org.kiama.example.RISC.RISCISA.STB.productArity: Int
2844 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanValue.<init>(): BooleanOps.this.BooleanValue
5448 ===> org.kiama.example.oberon0.L0.c.CLtExp.productPrefix: String
3503 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.<init>(): org.kiama.example.iswim.secd.SECDBase.TailApp
11524 ===> org.kiama.rewriting.Rewriter.Strategy.$less$plus(q: => Rewriter.this.Strategy): Rewriter.this.Strategy
6407 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.caseToDoc(s: org.kiama.example.oberon0.L2.source.CaseStatement): PrettyPrinter.this.Doc
2603 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.toString(): String
12221 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.genDiv(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Div]
3086 ===> org.kiama.example.iswim.secd.IOOps.Write.productIterator: Iterator[Any]
9067 ===> org.kiama.example.obr.SPARCTree.NegW.productPrefix: String
4902 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9888 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.bInAA: org.kiama.example.picojava.AbstractSyntax.Use
11704 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10663 ===> org.kiama.example.til.AST.Eq.hashCode(): Int
10613 ===> org.kiama.example.til.AST.Div.readResolve(): Object
11019 ===> org.kiama.output.PrettyPrinterBase.pretty(d: PrettyPrinterBase.this.Doc,w: PrettyPrinterBase.this.Width): PrettyPrinterBase.this.Layout
12260 ===> org.kiama.util.CompilerBase.encoding: String
1217 ===> org.kiama.example.RISC.RISCISA.BGE.productArity: Int
221 ===> org.kiama.attribution.AttributionTests.ListTree.productIterator: Iterator[Any]
9294 ===> org.kiama.example.obr.SymbolTable.IntType.<init>(): org.kiama.example.obr.SymbolTable.IntType
5305 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.<init>(): SymbolTable.this.IntegerValue.type
4698 ===> org.kiama.example.lambda2.AST.FunType.toString(): String
6290 ===> org.kiama.example.oberon0.L2.Lifter.transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
6596 ===> org.kiama.example.oberon0.L3.c.CAddrExp.<init>(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L3.c.CAddrExp
93 ===> org.kiama.attribution.Attribution.CachedDynamicAttribute.$minus$eq(g: org.kiama.==>[T,U]): Unit
9901 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.ast: org.kiama.example.picojava.AbstractSyntax.Program
4097 ===> org.kiama.example.iswim.secd.StackOps.Dup.productIterator: Iterator[Any]
6564 ===> org.kiama.example.oberon0.L3.c.CCall.copy$default$2: List[org.kiama.example.oberon0.base.c.CExpression] @scala.annotation.unchecked.uncheckedVariance
8603 ===> org.kiama.example.obr.RISCTree.SequenceDatum.insns: List[org.kiama.example.obr.RISCTree.Item]
8702 ===> org.kiama.example.obr.SPARCEncoder.encode(a: org.kiama.example.obr.SPARCTree.Address): Unit
11330 ===> org.kiama.rewriting.PositionalRewriterTests.pl2: org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{val line: Int; val column: Int}
124 ===> org.kiama.attribution.UncachedAttribution.UncachedParamAttribute.apply(arg: A): UncachedAttribution.this.Attribute[T,U]
11958 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9415 ===> org.kiama.example.obr.SymbolTable.ExnType.copy(): org.kiama.example.obr.SymbolTable.ExnType
2127 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.hashCode(): Int
10357 ===> org.kiama.example.til.AST.Decl.copy(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Decl
5369 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productIterator: Iterator[Any]
8890 ===> org.kiama.example.obr.SPARCTree.AddW.toString(): String
10635 ===> org.kiama.example.til.AST.Sub.<init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Sub
3555 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productArity: Int
2570 ===> org.kiama.example.iswim.compiler.Syntax.Empty.apply(): org.kiama.example.iswim.compiler.Syntax.Empty
9326 ===> org.kiama.example.obr.SymbolTable.ArrayType.size: Int
7453 ===> org.kiama.example.obr.ObrTree.IntVar.copy(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IntVar
5010 ===> org.kiama.example.lambda3.AST.App.equals(x$1: Any): Boolean
12389 ===> org.kiama.util.Messaging.Record.<init>(pos: scala.util.parsing.input.Position,message: String): org.kiama.util.Messaging.Record
10766 ===> org.kiama.example.transform.AST.BinExpR.<init>(left: org.kiama.example.transform.AST.Exp,op: String,right: org.kiama.example.transform.AST.ExpR): org.kiama.example.transform.AST.BinExpR
254 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productElement(x$1: Int): Any
4410 ===> org.kiama.example.lambda.AST.Var.copy$default$1: org.kiama.example.lambda.AST.Idn @scala.annotation.unchecked.uncheckedVariance
3474 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.copy$default$1: List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec] @scala.annotation.unchecked.uncheckedVariance
1541 ===> org.kiama.example.dataflow.DataflowForTests.s5: org.kiama.example.dataflow.DataflowAST.Return
7049 ===> org.kiama.example.oberon0.base.TestDriver.processline$default$4: Int @scala.annotation.unchecked.uncheckedVariance
1668 ===> org.kiama.example.imperative.AST.Sub.productElement(x$1: Int): Any
6892 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.readResolve(): Object
2166 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.toString(): String
10103 ===> org.kiama.example.prolog.PrologTree.Atom.equals(x$1: Any): Boolean
11267 ===> org.kiama.rewriting.NominalAST.Name.hashCode(): Int
7820 ===> org.kiama.example.obr.ObrTree.AndExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AndExp
9558 ===> org.kiama.example.oneohonecompanies.Company.DU.copy$default$1: org.kiama.example.oneohonecompanies.Company.Dept @scala.annotation.unchecked.uncheckedVariance
1566 ===> org.kiama.example.imperative.AST.Exp.<init>(): org.kiama.example.imperative.AST.Exp
2588 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Tuple): Option[List[org.kiama.example.iswim.compiler.Syntax.Expr]]
5430 ===> org.kiama.example.oberon0.L0.c.CNeExp.productElement(x$1: Int): Any
1870 ===> org.kiama.example.imperative.ASTNonCase.Div.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
6013 ===> org.kiama.example.oberon0.L0.source.MulExp.canEqual(x$1: Any): Boolean
6221 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.canEqual(x$1: Any): Boolean
6936 ===> org.kiama.example.oberon0.L4.source.FieldList.productArity: Int
180 ===> org.kiama.attribution.AttributionTests.Unused.b: Boolean
7708 ===> org.kiama.example.obr.ObrTree.ReturnStmt.value: org.kiama.example.obr.ObrTree.Expression
10876 ===> org.kiama.machine.Machine.State.$colon$eq(t: T): Unit
12068 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9603 ===> org.kiama.example.oneohonecompanies.SampleCompany.dev11: org.kiama.example.oneohonecompanies.Company.Dept
10459 ===> org.kiama.example.til.AST.For.copy$default$4: Seq[org.kiama.example.til.AST.Stat] @scala.annotation.unchecked.uncheckedVariance
9759 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productElement(x$1: Int): Any
4931 ===> org.kiama.example.lambda2.Reduce.$init$(): Unit
11526 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
639 ===> org.kiama.example.RISC.RISCISA.SUBI.toString(): String
11384 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.equals(x$1: Any): Boolean
5562 ===> org.kiama.example.oberon0.L0.c.COrExp.right: org.kiama.example.oberon0.base.c.CExpression
11037 ===> org.kiama.output.PrettyPrinterBase.softline: PrettyPrinterBase.this.Doc
6749 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.<init>(size: Int,elemtype: SymbolTable.this.Type): SymbolTable.this.ArrayType
3642 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.PushEmpty): Boolean
4932 ===> org.kiama.example.lambda2.Reduce.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10656 ===> org.kiama.example.til.AST.Eq.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
103 ===> org.kiama.attribution.Attribution.dynAttr[T <: AnyRef, U](f: T => U): Attribution.this.CachedDynamicAttribute[T,U]
6397 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.toString(): String
11131 ===> org.kiama.output.PrettyPrinterTests.l1: List[Int]
9681 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productIterator: Iterator[Any]
2263 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.apply(b: Boolean): org.kiama.example.iswim.compiler.Syntax.BoolVal
3541 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productElement(x$1: Int): Any
6077 ===> org.kiama.example.oberon0.L0.source.AndExp.unapply(x$0: org.kiama.example.oberon0.L0.source.AndExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
4598 ===> org.kiama.example.lambda2.AST.Opn.hashCode(): Int
9642 ===> org.kiama.example.picojava.AbstractSyntax.Block.<init>(): org.kiama.example.picojava.AbstractSyntax.Block.type
1015 ===> org.kiama.example.RISC.RISCISA.POP.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
1592 ===> org.kiama.example.imperative.AST.Var.<init>(s: org.kiama.example.imperative.AST.Idn): org.kiama.example.imperative.AST.Var
7611 ===> org.kiama.example.obr.ObrTree.ExnConst.readResolve(): Object
3027 ===> org.kiama.example.iswim.secd.HeapOps.Put.<init>(): org.kiama.example.iswim.secd.HeapOps.Put
7786 ===> org.kiama.example.obr.ObrTree.TryBody.productElement(x$1: Int): Any
10207 ===> org.kiama.example.prolog.SymbolTable.AtomType.<init>(): org.kiama.example.prolog.SymbolTable.AtomType.type
11166 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.copy$default$3: Int @scala.annotation.unchecked.uncheckedVariance
7273 ===> org.kiama.example.oberon0.base.source.ModuleDecl.copy$default$1: org.kiama.example.oberon0.base.source.IdnDef @scala.annotation.unchecked.uncheckedVariance
5920 ===> org.kiama.example.oberon0.L0.source.GeExp.right: org.kiama.example.oberon0.L0.source.Expression
931 ===> org.kiama.example.RISC.RISCISA.XOR.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.XOR
4174 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productIterator: Iterator[Any]
1064 ===> org.kiama.example.RISC.RISCISA.STB.equals(x$1: Any): Boolean
10335 ===> org.kiama.example.til.TransformingMain.process(reader: java.io.Reader): Any
10381 ===> org.kiama.example.til.AST.Assign.productIterator: Iterator[Any]
10910 ===> org.kiama.machine.Machine.updates_$eq(x$1: List[Machine.this.Update]): Unit
12227 ===> org.kiama.rewriting.UniplateTests.simplify: org.kiama.example.imperative.AST.Exp => org.kiama.example.imperative.AST.Exp
8657 ===> org.kiama.example.obr.RISCTree.Indexed.unapply(x$0: org.kiama.example.obr.RISCTree.Indexed): Option[(org.kiama.example.obr.RISCTree.Local, org.kiama.example.obr.RISCTree.Datum)]
4775 ===> org.kiama.example.lambda2.AST.Bind(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
7585 ===> org.kiama.example.obr.ObrTree.IntConst.productIterator: Iterator[Any]
5564 ===> org.kiama.example.oberon0.L0.c.COrExp.priority: Int
12166 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1398 ===> org.kiama.example.dataflow.DataflowAST.While.toString(): String
6044 ===> org.kiama.example.oberon0.L0.source.ModExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.ModExp
10659 ===> org.kiama.example.til.AST.Eq.productArity: Int
9213 ===> org.kiama.example.obr.SymbolTable.Entity.<init>(): org.kiama.example.obr.SymbolTable.Entity
924 ===> org.kiama.example.RISC.RISCISA.XOR.b: org.kiama.example.RISC.RISCISA.RegNo
12059 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4768 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
1441 ===> org.kiama.example.dataflow.DataflowAST.Block.unapply(x$0: org.kiama.example.dataflow.DataflowAST.Block): Option[List[org.kiama.example.dataflow.DataflowAST.Stm]]
5409 ===> org.kiama.example.oberon0.L0.c.CEqExp.productArity: Int
1547 ===> org.kiama.example.dataflow.DataflowTests.s411: org.kiama.example.dataflow.DataflowAST.Assign
7711 ===> org.kiama.example.obr.ObrTree.ReturnStmt.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
4961 ===> org.kiama.example.lambda3.AST.<init>(): org.kiama.example.lambda3.AST.type
7243 ===> org.kiama.example.oberon0.base.c.CIntExp.v: Int
6165 ===> org.kiama.example.oberon0.L1.CCodeGenerator.translate(eis: List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)],oe: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.base.c.CStatement
11843 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6169 ===> org.kiama.example.oberon0.L1.TypeAnalyser.$init$(): Unit
10315 ===> org.kiama.example.repmin.RepminBase.repmin: org.kiama.example.repmin.Tree => org.kiama.example.repmin.Tree
12013 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9320 ===> org.kiama.example.obr.SymbolTable.BoolType.equals(x$1: Any): Boolean
8156 ===> org.kiama.example.obr.RISCEncoder.gentarget(): Int
5357 ===> org.kiama.example.oberon0.L0.c.CInitDecl.<init>(): org.kiama.example.oberon0.L0.c.CInitDecl.type
2580 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productIterator: Iterator[Any]
3461 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.canEqual(x$1: Any): Boolean
10567 ===> org.kiama.example.til.AST.Str.productIterator: Iterator[Any]
5419 ===> org.kiama.example.oberon0.L0.c.CEqExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CEqExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
7549 ===> org.kiama.example.obr.ObrTree.EnumVar.productIterator: Iterator[Any]
6454 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.hashCode(): Int
4297 ===> org.kiama.example.json.JSONTree.JString.apply(value: String): org.kiama.example.json.JSONTree.JString
2816 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productArity: Int
6557 ===> org.kiama.example.oberon0.L3.c.CAddrType.unapply(x$0: org.kiama.example.oberon0.L3.c.CAddrType): Option[org.kiama.example.oberon0.base.c.CType]
1800 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
12241 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8620 ===> org.kiama.example.obr.RISCTree.SequenceDatum.unapply(x$0: org.kiama.example.obr.RISCTree.SequenceDatum): Option[(List[org.kiama.example.obr.RISCTree.Item], org.kiama.example.obr.RISCTree.Datum)]
1244 ===> org.kiama.example.RISC.RISCISA.BGT.label: Int
5814 ===> org.kiama.example.oberon0.L0.source.Assignment.unapply(x$0: org.kiama.example.oberon0.L0.source.Assignment): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
11407 ===> org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition.$init$(): Unit
11253 ===> org.kiama.rewriting.CallbackRewriter.dup[T <: Product](t: T,children: Array[AnyRef]): T
741 ===> org.kiama.example.RISC.RISCISA.MOD.b: org.kiama.example.RISC.RISCISA.RegNo
3203 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productArity: Int
6788 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
6508 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productPrefix: String
7455 ===> org.kiama.example.obr.ObrTree.IntVar.productPrefix: String
5427 ===> org.kiama.example.oberon0.L0.c.CNeExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
4296 ===> org.kiama.example.json.JSONTree.JString.toString(): String
3653 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.hashCode(): Int
4223 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
5872 ===> org.kiama.example.oberon0.L0.source.LtExp.canEqual(x$1: Any): Boolean
9399 ===> org.kiama.example.obr.SymbolTable.EnumTypes.copy(): org.kiama.example.obr.SymbolTable.EnumTypes
5043 ===> org.kiama.example.lambda3.AST.EquivQuery.productArity: Int
4953 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9118 ===> org.kiama.example.obr.SPARCTree.SubW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.SubW
10547 ===> org.kiama.example.til.AST.Num.productArity: Int
9394 ===> org.kiama.example.obr.SymbolTable.EnumType.unapply(x$0: org.kiama.example.obr.SymbolTable.EnumType): Option[org.kiama.example.obr.ObrTree.Identifier]
6175 ===> org.kiama.example.oberon0.L1.c.CIfStatement.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
1418 ===> org.kiama.example.dataflow.DataflowAST.If.hashCode(): Int
3583 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.readResolve(): Object
9845 ===> org.kiama.example.picojava.PredefinedTypes.booleanType: org.kiama.attribution.Attributable => org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl
1301 ===> org.kiama.example.RISC.RISCISA.RET.canEqual(x$1: Any): Boolean
1903 ===> org.kiama.example.imperative.Generator.arbWhile: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.While]
11448 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionedRewriter.Term): Boolean
1838 ===> org.kiama.example.imperative.ASTNonCase.Num.<init>(d: Double): org.kiama.example.imperative.ASTNonCase.Num
8732 ===> org.kiama.example.obr.SPARCTree.SPARC.readResolve(): Object
9352 ===> org.kiama.example.obr.SymbolTable.RecordType.productElement(x$1: Int): Any
8148 ===> org.kiama.example.obr.ObrTree.StarExp.readResolve(): Object
2798 ===> org.kiama.example.iswim.secd.BooleanOps.Test.copy$default$1: org.kiama.example.iswim.secd.SECDBase.CodeSegment @scala.annotation.unchecked.uncheckedVariance
5600 ===> org.kiama.example.oberon0.L0.c.CMulExp.readResolve(): Object
1754 ===> org.kiama.example.imperative.AST.Seqn.readResolve(): Object
155 ===> org.kiama.attribution.AttributionTests.Pair.hashCode(): Int
7672 ===> org.kiama.example.obr.ObrTree.IfStmt.elses: List[org.kiama.example.obr.ObrTree.Statement]
2925 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.readResolve(): Object
5628 ===> org.kiama.example.oberon0.L0.c.CModExp.productPrefix: String
2481 ===> org.kiama.example.iswim.compiler.Syntax.Return.readResolve(): Object
1332 ===> org.kiama.example.RISC.RISCISA.Comment.productPrefix: String
73 ===> org.kiama.attribution.Attribution.CachedAttribute.memoVersion_$eq(x$1: Int): Unit
5974 ===> org.kiama.example.oberon0.L0.source.SubExp.equals(x$1: Any): Boolean
10947 ===> org.kiama.output.RightAssoc.productElement(x$1: Int): Any
9277 ===> org.kiama.example.obr.SymbolTable.Multiple.productArity: Int
11115 ===> org.kiama.output.PrettyPrinter.Doc.<init>(f: ((PrettyPrinter.this.Indent, PrettyPrinter.this.Width)) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout)): PrettyPrinter.this.Doc
9125 ===> org.kiama.example.obr.SPARCTree.SubW.productIterator: Iterator[Any]
12225 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11339 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
11307 ===> org.kiama.rewriting.NominalRewriter.alphaequiv(a1: NominalRewriter.this.Term,a2: NominalRewriter.this.Term): Boolean
5596 ===> org.kiama.example.oberon0.L0.c.CMulExp.<init>(): org.kiama.example.oberon0.L0.c.CMulExp.type
4886 ===> org.kiama.example.lambda2.ParLazy.letOpn(eval: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
2837 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.equals(x$1: Any): Boolean
10421 ===> org.kiama.example.til.AST.IfElse.productIterator: Iterator[Any]
10184 ===> org.kiama.example.prolog.SymbolTable.Variable.productArity: Int
5484 ===> org.kiama.example.oberon0.L0.c.CGtExp.priority: Int
11737 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1204 ===> org.kiama.example.RISC.RISCISA.BLT.canEqual(x$1: Any): Boolean
6919 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productIterator: Iterator[Any]
10572 ===> org.kiama.example.til.AST.Str.toString(): String
707 ===> org.kiama.example.RISC.RISCISA.DIV.productPrefix: String
8223 ===> org.kiama.example.obr.RISCTree.Bne.cond: org.kiama.example.obr.RISCTree.Datum
4881 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
11972 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10259 ===> org.kiama.example.prolog.Subst.m: scala.collection.immutable.Map[String,org.kiama.example.prolog.PrologTree.Term]
11930 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
407 ===> org.kiama.attribution.DynamicAttributionTests.Pair.unapply(x$0: DynamicAttributionTests.this.Pair): Option[(DynamicAttributionTests.this.Tree, DynamicAttributionTests.this.Tree)]
1005 ===> org.kiama.example.RISC.RISCISA.LDB.unapply(x$0: org.kiama.example.RISC.RISCISA.LDB): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
4259 ===> org.kiama.example.json.JSONTree.JName.toString(): String
3589 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productIterator: Iterator[Any]
11312 ===> org.kiama.rewriting.NominalRewriter.subst[T](n: org.kiama.rewriting.NominalAST.Name,t1: NominalRewriter.this.Term): T => T
2793 ===> org.kiama.example.iswim.secd.BooleanOps.Test.ct: org.kiama.example.iswim.secd.SECDBase.CodeSegment
11733 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8039 ===> org.kiama.example.obr.ObrTree.NotEqualExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NotEqualExp
8112 ===> org.kiama.example.obr.ObrTree.SlashExp.right: org.kiama.example.obr.ObrTree.Expression
8256 ===> org.kiama.example.obr.RISCTree.Jmp.apply(dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Jmp
10395 ===> org.kiama.example.til.AST.IfThen.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
5729 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productArity: Int
9860 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.result: Int
1329 ===> org.kiama.example.RISC.RISCISA.Comment.toString(): String
1490 ===> org.kiama.example.dataflow.Foreach.toString(): String
4069 ===> org.kiama.example.iswim.secd.SECDBase.execSrcPos_$eq(x$1: scala.util.parsing.input.Position): Unit
12101 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1288 ===> org.kiama.example.RISC.RISCISA.BSR.toString(): String
10601 ===> org.kiama.example.til.AST.Div.productPrefix: String
3772 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.ContTypeValue
9653 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.Body: org.kiama.example.picojava.AbstractSyntax.Block
3217 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productPrefix: String
7933 ===> org.kiama.example.obr.ObrTree.IndexExp.productPrefix: String
2680 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.readResolve(): Object
8327 ===> org.kiama.example.obr.RISCTree.Datum.<init>(): org.kiama.example.obr.RISCTree.Datum
1819 ===> org.kiama.example.imperative.AST.Div(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
9647 ===> org.kiama.example.picojava.AbstractSyntax.BlockStmt.<init>(): org.kiama.example.picojava.AbstractSyntax.BlockStmt
6123 ===> org.kiama.example.oberon0.L0.source.IntExp.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
3637 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.toString(): String
8067 ===> org.kiama.example.obr.ObrTree.NotExp.equals(x$1: Any): Boolean
8317 ===> org.kiama.example.obr.RISCTree.Write.productIterator: Iterator[Any]
8045 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productElement(x$1: Int): Any
5648 ===> org.kiama.example.oberon0.L0.c.CAndExp.productPrefix: String
12571 ===> org.kiama.util.ParserUtilitiesTests.Tup6.equals(x$1: Any): Boolean
7762 ===> org.kiama.example.obr.ObrTree.TryStmt.catches: List[org.kiama.example.obr.ObrTree.Catch]
7782 ===> org.kiama.example.obr.ObrTree.TryBody.copy(stmts: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.TryBody
10936 ===> org.kiama.output.LeftAssoc.productPrefix: String
7829 ===> org.kiama.example.obr.ObrTree.AndExp.toString(): String
5466 ===> org.kiama.example.oberon0.L0.c.CLeExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
5103 ===> org.kiama.example.lambda3.AST.FreshQuery.hashCode(): Int
10707 ===> org.kiama.example.til.TIL2_2.$init$(): Unit
1164 ===> org.kiama.example.RISC.RISCISA.BEQ.label: Int
10204 ===> org.kiama.example.prolog.SymbolTable.AtomType.canEqual(x$1: Any): Boolean
9260 ===> org.kiama.example.obr.SymbolTable.Unknown.copy(): org.kiama.example.obr.SymbolTable.Unknown
11395 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productArity: Int
11715 ===> org.kiama.rewriting.RewriterTests.pickdesc(t: org.kiama.rewriting.Rewriter.Term): org.kiama.rewriting.Rewriter.Term
12393 ===> org.kiama.util.Messaging.Record.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
5318 ===> org.kiama.example.oberon0.L0.SymbolTable.isBoolean(e: SymbolTable.this.Type): Boolean
5288 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.unapply(x$0: SymbolTable.this.BuiltinType): Option[String]
10507 ===> org.kiama.example.til.AST.Exp.<init>(): org.kiama.example.til.AST.Exp
1293 ===> org.kiama.example.RISC.RISCISA.RET.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
11156 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.right: ParenPrettyPrinterTests.this.Exp
12443 ===> org.kiama.util.WhitespaceParser.positioned[T <: scala.util.parsing.input.Positional](p: => WhitespaceParser.this.Parser[T]): WhitespaceParser.this.Parser[T]
3752 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.type
1513 ===> org.kiama.example.dataflow.For.productArity: Int
11897 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5790 ===> org.kiama.example.oberon0.L0.source.NamedType.toString(): String
4967 ===> org.kiama.example.lambda3.AST.Num.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
11614 ===> org.kiama.rewriting.Rewriter.collect[CC[U] <: Traversable[U], T](f: org.kiama.==>[Rewriter.this.Term,T])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[T],T,CC[T]]): Rewriter.this.Term => CC[T]
8324 ===> org.kiama.example.obr.RISCTree.Write.apply(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Write
11957 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8226 ===> org.kiama.example.obr.RISCTree.Bne.copy(cond: org.kiama.example.obr.RISCTree.Datum,dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Bne
4515 ===> org.kiama.example.lambda2.AST.Num.productPrefix: String
12577 ===> org.kiama.util.Patterns.<init>(): org.kiama.util.Patterns.type
12409 ===> org.kiama.util.Messaging.message(value: org.kiama.util.Positioned,message: String): Unit
443 ===> org.kiama.attribution.DynamicAttributionTests.count: Int
9796 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.hashCode(): Int
4450 ===> org.kiama.example.lambda.AST.App.productArity: Int
6604 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productIterator: Iterator[Any]
633 ===> org.kiama.example.RISC.RISCISA.SUB.unapply(x$0: org.kiama.example.RISC.RISCISA.SUB): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
12107 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11302 ===> org.kiama.rewriting.NominalRewriter.swap[T](tr: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name))(t: T): T
12591 ===> org.kiama.util.PositionedParserUtilities.$anon.<init>(): PositionedParserUtilities.this.Parser[T]
4867 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2699 ===> org.kiama.example.iswim.compiler.Syntax.Val.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Val
5903 ===> org.kiama.example.oberon0.L0.source.GtExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.GtExp
4244 ===> org.kiama.example.json.JSONTree.JObject.<init>(): org.kiama.example.json.JSONTree.JObject.type
2333 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.<init>(): org.kiama.example.iswim.compiler.Syntax.StringVal.type
8055 ===> org.kiama.example.obr.ObrTree.NotEqualExp.readResolve(): Object
4978 ===> org.kiama.example.lambda3.AST.Num.unapply(x$0: org.kiama.example.lambda3.AST.Num): Option[Int]
10605 ===> org.kiama.example.til.AST.Div.canEqual(x$1: Any): Boolean
4066 ===> org.kiama.example.iswim.secd.SECDBase.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
89 ===> org.kiama.attribution.Attribution.CachedDynamicAttribute.<init>(f: T => U): Attribution.this.CachedDynamicAttribute[T,U]
11963 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11636 ===> org.kiama.rewriting.Rewriter.loopnot(c: => Rewriter.this.Strategy,s: => Rewriter.this.Strategy): Rewriter.this.Strategy
10404 ===> org.kiama.example.til.AST.IfThen.equals(x$1: Any): Boolean
12313 ===> org.kiama.util.Environments.resetEnvironments: Unit
3701 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.toString(): String
10512 ===> org.kiama.example.til.AST.Id.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
11023 ===> org.kiama.output.PrettyPrinterBase.PrettyPrintable.$init$(): Unit
9065 ===> org.kiama.example.obr.SPARCTree.NegW.copy(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.NegW
5182 ===> org.kiama.example.oberon0.L0.NameAnalyser.isLvalue(l: org.kiama.example.oberon0.L0.source.Expression): Boolean
8541 ===> org.kiama.example.obr.RISCTree.NegW.toString(): String
7511 ===> org.kiama.example.obr.ObrTree.ArrayVar.productIterator: Iterator[Any]
286 ===> org.kiama.attribution.AttributionTests.PairTree.productPrefix: String
7375 ===> org.kiama.example.oberon0.drivers.A2aPhases.artefact: String
6917 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productArity: Int
8037 ===> org.kiama.example.obr.ObrTree.NotEqualExp.left: org.kiama.example.obr.ObrTree.Expression
11928 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8895 ===> org.kiama.example.obr.SPARCTree.Cond.t: org.kiama.example.obr.SPARCTree.Datum
392 ===> org.kiama.attribution.DynamicAttributionTests.Pair.<init>(left: DynamicAttributionTests.this.Tree,right: DynamicAttributionTests.this.Tree): DynamicAttributionTests.this.Pair
469 ===> org.kiama.example.RISC.RISC.PC: RISC.this.ParamUpdater[org.kiama.example.RISC.RISCISA.RegNo,Int]
4974 ===> org.kiama.example.lambda3.AST.Num.equals(x$1: Any): Boolean
2366 ===> org.kiama.example.iswim.compiler.Syntax.Let.productIterator: Iterator[Any]
10877 ===> org.kiama.machine.Machine.State.change(t: T): Unit
778 ===> org.kiama.example.RISC.RISCISA.MODI.toString(): String
1202 ===> org.kiama.example.RISC.RISCISA.BLT.productElement(x$1: Int): Any
6255 ===> org.kiama.example.oberon0.L1.source.WhileStatement.cond: org.kiama.example.oberon0.L0.source.Expression
5111 ===> org.kiama.example.lambda3.AST.SubstQuery.n: org.kiama.rewriting.NominalAST.Name
10759 ===> org.kiama.example.transform.AST.VarDecl.apply(name: String): org.kiama.example.transform.AST.VarDecl
7987 ===> org.kiama.example.obr.ObrTree.MinusExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
11006 ===> org.kiama.output.ParenPrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): ParenPrettyPrinter.this.Doc
3018 ===> org.kiama.example.iswim.secd.HeapOps.Get.canEqual(x$1: Any): Boolean
10387 ===> org.kiama.example.til.AST.Assign.toString(): String
6242 ===> org.kiama.example.oberon0.L1.source.IfStatement.productPrefix: String
8211 ===> org.kiama.example.obr.RISCTree.Beq.productArity: Int
6966 ===> org.kiama.example.oberon0.L4.source.FieldExp.readResolve(): Object
3889 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.canEqual(x$1: Any): Boolean
8488 ===> org.kiama.example.obr.RISCTree.IntDatum.toString(): String
10206 ===> org.kiama.example.prolog.SymbolTable.AtomType.equals(x$1: Any): Boolean
8486 ===> org.kiama.example.obr.RISCTree.IntDatum.canEqual(x$1: Any): Boolean
9994 ===> org.kiama.example.prolog.Main.prompt: String
1386 ===> org.kiama.example.dataflow.DataflowAST.While.cond: org.kiama.example.dataflow.DataflowAST.Var
6060 ===> org.kiama.example.oberon0.L0.source.AndExp.left: org.kiama.example.oberon0.L0.source.Expression
8581 ===> org.kiama.example.obr.RISCTree.RemW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.RemW
7254 ===> org.kiama.example.oberon0.base.c.CIntExp.equals(x$1: Any): Boolean
9975 ===> org.kiama.example.prolog.Interpreter.MatchGoal.readResolve(): Object
8715 ===> org.kiama.example.obr.SPARCTree.SPARC.memsize: Int
10134 ===> org.kiama.example.prolog.PrologTree.Cut.productIterator: Iterator[Any]
6682 ===> org.kiama.example.oberon0.L3.source.ValMode.canEqual(x$1: Any): Boolean
1936 ===> org.kiama.example.iswim.compiler.Parser.Pos.equals(x$1: Any): Boolean
2518 ===> org.kiama.example.iswim.compiler.Syntax.If.toString(): String
8831 ===> org.kiama.example.obr.SPARCTree.Ret.toString(): String
6170 ===> org.kiama.example.oberon0.L1.TypeAnalyser.exptypeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
12412 ===> org.kiama.util.Messaging.report$default$1: org.kiama.util.Emitter @scala.annotation.unchecked.uncheckedVariance
2273 ===> org.kiama.example.iswim.compiler.Syntax.Not.productIterator: Iterator[Any]
5031 ===> org.kiama.example.lambda3.AST.Lam.unapply(x$0: org.kiama.example.lambda3.AST.Lam): Option[org.kiama.rewriting.NominalAST.Bind]
2389 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.equals(x$1: Any): Boolean
12365 ===> org.kiama.util.IO.FileNotFoundException.message: String
8000 ===> org.kiama.example.obr.ObrTree.MinusExp.readResolve(): Object
12458 ===> org.kiama.util.ParserUtilitiesTests.Node.toString(): String
10019 ===> org.kiama.example.prolog.PrologTree.Fact.hd: org.kiama.example.prolog.PrologTree.Term
970 ===> org.kiama.example.RISC.RISCISA.LDW.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.LDW
11446 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.PositionedRewriter.Term,org.kiama.rewriting.PositionedRewriter.Term] with Serializable
455 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.applyOrElse[A1 <: DynamicAttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
10196 ===> org.kiama.example.prolog.SymbolTable.Type.<init>(): org.kiama.example.prolog.SymbolTable.Type
3495 ===> org.kiama.example.iswim.secd.SECDBase.App.hashCode(): Int
7985 ===> org.kiama.example.obr.ObrTree.MinusExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.MinusExp
4855 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9405 ===> org.kiama.example.obr.SymbolTable.EnumTypes.hashCode(): Int
6823 ===> org.kiama.example.oberon0.L4.c.CRecordType.productIterator: Iterator[Any]
9692 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.Variable: org.kiama.example.picojava.AbstractSyntax.Access
3871 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productArity: Int
3736 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.equals(x$1: Any): Boolean
5417 ===> org.kiama.example.oberon0.L0.c.CEqExp.toString(): String
9737 ===> org.kiama.example.picojava.AbstractSyntax.Use.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
4030 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productArity: Int
11552 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
11950 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3195 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.<init>(): org.kiama.example.iswim.secd.IntegerOps.Sub.type
1767 ===> org.kiama.example.imperative.AST.Asgn.hashCode(): Int
12611 ===> org.kiama.util.GeneratingREPLBase.setup(args: Array[String]): Boolean
1 ===> org.kiama.attribution.Attributable.$init$(): Unit
3835 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.UnboundVariable): Boolean
12625 ===> org.kiama.util.RegexParserTests.failInputEnd(in: RegexParserTests.this.Input): Unit
4213 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
10092 ===> org.kiama.example.prolog.PrologTree.Atom.s: String
3654 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.toString(): String
6943 ===> org.kiama.example.oberon0.L4.source.FieldList.<init>(): org.kiama.example.oberon0.L4.source.FieldList.type
1455 ===> org.kiama.example.dataflow.DataflowAST.Return.<init>(): org.kiama.example.dataflow.DataflowAST.Return.type
1839 ===> org.kiama.example.imperative.ASTNonCase.Num.arity: Int
7135 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.<init>(): org.kiama.example.oberon0.base.c.CFunctionDecl.type
11662 ===> org.kiama.rewriting.Rewriter.alltd(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
12109 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5307 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.apply(ident: String,tipe: SymbolTable.this.Type,value: Int): SymbolTable.this.IntegerValue
12375 ===> org.kiama.util.IO.FileNotFoundException.equals(x$1: Any): Boolean
465 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.isDefinedAt(x$1: DynamicAttributionTests.this.Tree): Boolean
7328 ===> org.kiama.example.oberon0.base.source.IdnDef.copy(ident: String): org.kiama.example.oberon0.base.source.IdnDef
1279 ===> org.kiama.example.RISC.RISCISA.BSR.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
8418 ===> org.kiama.example.obr.RISCTree.CmpneW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpneW
3904 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.canEqual(x$1: Any): Boolean
7275 ===> org.kiama.example.oberon0.base.source.ModuleDecl.copy$default$3: org.kiama.example.oberon0.base.source.IdnUse @scala.annotation.unchecked.uncheckedVariance
7571 ===> org.kiama.example.obr.ObrTree.EnumConst.<init>(): org.kiama.example.obr.ObrTree.EnumConst.type
8309 ===> org.kiama.example.obr.RISCTree.StW.readResolve(): Object
12623 ===> org.kiama.util.Tests.FocusTest.<init>(): Tests.this.FocusTest.type
11185 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.fixity: org.kiama.output.Fixity
10318 ===> org.kiama.example.repmin.Repmin.globmin: org.kiama.example.repmin.Tree => Int
3517 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.readResolve(): Object
2314 ===> org.kiama.example.iswim.compiler.Syntax.Or.toString(): String
4584 ===> org.kiama.example.lambda2.AST.App.readResolve(): Object
2766 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productArity: Int
87 ===> org.kiama.attribution.Attribution.CachedParamAttribute.hasBeenComputedAt(arg: A,t: T): Boolean
2340 ===> org.kiama.example.iswim.compiler.Syntax.Binding.<init>(v: org.kiama.example.iswim.compiler.Syntax.Variable,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Binding
8345 ===> org.kiama.example.obr.RISCTree.AddW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.AddW
11917 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8086 ===> org.kiama.example.obr.ObrTree.OrExp.equals(x$1: Any): Boolean
12302 ===> org.kiama.util.StringEmitter.<init>(): org.kiama.util.StringEmitter
7183 ===> org.kiama.example.oberon0.base.c.CStrType.toString(): String
121 ===> org.kiama.attribution.UncachedAttribution.UncachedParamAttribute.<init>(f: A => (T => U)): UncachedAttribution.this.UncachedParamAttribute[A,T,U]
4047 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.hashCode(): Int
7519 ===> org.kiama.example.obr.ObrTree.ArrayVar.unapply(x$0: org.kiama.example.obr.ObrTree.ArrayVar): Option[(org.kiama.example.obr.ObrTree.Identifier, Int)]
10347 ===> org.kiama.example.til.AST.Program.toString(): String
1177 ===> org.kiama.example.RISC.RISCISA.BEQ.apply(label: Int): org.kiama.example.RISC.RISCISA.BEQ
9747 ===> org.kiama.example.picojava.AbstractSyntax.Use.toString(): String
10932 ===> org.kiama.machine.MachineTests.MM.p: org.kiama.machine.MachineTests.MM.ParamState[String,Int]
3892 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.<init>(): org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.type
72 ===> org.kiama.attribution.Attribution.CachedAttribute.memoVersion: Int
11658 ===> org.kiama.rewriting.Rewriter.innermost(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
1135 ===> org.kiama.example.RISC.RISCISA.WRH.hashCode(): Int
2964 ===> org.kiama.example.iswim.secd.ExceptionHandler.$init$(): Unit
7610 ===> org.kiama.example.obr.ObrTree.ExnConst.unapply(x$0: org.kiama.example.obr.ObrTree.ExnConst): Option[org.kiama.example.obr.ObrTree.Identifier]
7540 ===> org.kiama.example.obr.ObrTree.EnumVar.idn: org.kiama.example.obr.ObrTree.Identifier
9491 ===> org.kiama.example.oneohonecompanies.Company.Company.toString(): String
12366 ===> org.kiama.util.IO.FileNotFoundException.<init>(message: String): org.kiama.util.IO.FileNotFoundException
10484 ===> org.kiama.example.til.AST.Read.equals(x$1: Any): Boolean
11017 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$at$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
4907 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2907 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.toString(): String
7920 ===> org.kiama.example.obr.ObrTree.IdnExp.toString(): String
3212 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.apply(): org.kiama.example.iswim.secd.IntegerOps.Mult
10222 ===> org.kiama.example.prolog.SymbolTable.IntegerType.<init>(): org.kiama.example.prolog.SymbolTable.IntegerType.type
6238 ===> org.kiama.example.oberon0.L1.source.IfStatement.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
2418 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productElement(x$1: Int): Any
4732 ===> org.kiama.example.lambda2.AST.AddOp.apply(): org.kiama.example.lambda2.AST.AddOp
1897 ===> org.kiama.example.imperative.Generator.genLeafStmt: org.scalacheck.Gen[org.kiama.example.imperative.AST.Null]
5549 ===> org.kiama.example.oberon0.L0.c.CSubExp.productArity: Int
5235 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.unapply(x$0: SymbolTable.this.Constant): Option[(String, org.kiama.example.oberon0.L0.source.ConstDecl)]
10486 ===> org.kiama.example.til.AST.Read.toString(): String
9318 ===> org.kiama.example.obr.SymbolTable.BoolType.canEqual(x$1: Any): Boolean
1476 ===> org.kiama.example.dataflow.Foreach.body: org.kiama.example.dataflow.DataflowAST.Stm
4566 ===> org.kiama.example.lambda2.AST.App.e1: org.kiama.example.lambda2.AST.Exp
3828 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productIterator: Iterator[Any]
1433 ===> org.kiama.example.dataflow.DataflowAST.Block.productIterator: Iterator[Any]
5308 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.unapply(x$0: SymbolTable.this.IntegerValue): Option[(String, SymbolTable.this.Type, Int)]
11994 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10600 ===> org.kiama.example.til.AST.Div.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
11516 ===> org.kiama.rewriting.Rewritable.reconstruct(components: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.rewriting.Rewriter.Term
8230 ===> org.kiama.example.obr.RISCTree.Bne.productArity: Int
356 ===> org.kiama.attribution.AttributionTests.isTree(ast: org.kiama.attribution.Attributable): Boolean
3288 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.equals(x$1: Any): Boolean
3286 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.canEqual(x$1: Any): Boolean
3339 ===> org.kiama.example.iswim.secd.RecordOps.GetField.toString(): String
12336 ===> org.kiama.util.Environments.MultipleEntity.unapply(x$0: Environments.this.MultipleEntity): Boolean
309 ===> org.kiama.attribution.AttributionTests.TripleTree.toString(): String
6996 ===> org.kiama.example.oberon0.base.Driver.helpFlag: Boolean
9323 ===> org.kiama.example.obr.SymbolTable.BoolType.apply(): org.kiama.example.obr.SymbolTable.BoolType
1669 ===> org.kiama.example.imperative.AST.Sub.productIterator: Iterator[Any]
3972 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.unapply(x$0: SECDBase.this.EmptyValue): Boolean
8438 ===> org.kiama.example.obr.RISCTree.CmpgtW.unapply(x$0: org.kiama.example.obr.RISCTree.CmpgtW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
10089 ===> org.kiama.example.prolog.PrologTree.Integer.unapply(x$0: org.kiama.example.prolog.PrologTree.Integer): Option[Int]
10712 ===> org.kiama.example.til.TIL2_2.fortowhile: org.kiama.rewriting.Rewriter.Strategy
6423 ===> org.kiama.example.oberon0.L3.NameAnalyser.checkNonLocalVarAccess(u: org.kiama.example.oberon0.base.source.IdnUse): Unit
4267 ===> org.kiama.example.json.JSONTree.JArray.<init>(values: Vector[org.kiama.example.json.JSONTree.JValue]): org.kiama.example.json.JSONTree.JArray
2899 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productArity: Int
3262 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.copy(): org.kiama.example.iswim.secd.IntegerOps.DivisionByZero
3505 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productPrefix: String
5294 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.copy(ident: String,tipe: SymbolTable.this.Type,value: Int): SymbolTable.this.IntegerValue
10299 ===> org.kiama.example.repmin.Leaf.productPrefix: String
4571 ===> org.kiama.example.lambda2.AST.App.copy$default$2: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
2593 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Variable] @scala.annotation.unchecked.uncheckedVariance
6001 ===> org.kiama.example.oberon0.L0.source.ProdExpression.priority: Int
7940 ===> org.kiama.example.obr.ObrTree.IndexExp.equals(x$1: Any): Boolean
3816 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.readResolve(): Object
4511 ===> org.kiama.example.lambda2.AST.Num.n: Int
2012 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productElement(x$1: Int): Any
10362 ===> org.kiama.example.til.AST.Decl.productIterator: Iterator[Any]
1747 ===> org.kiama.example.imperative.AST.Seqn.hashCode(): Int
4988 ===> org.kiama.example.lambda3.AST.Var.productIterator: Iterator[Any]
4094 ===> org.kiama.example.iswim.secd.StackOps.Dup.productPrefix: String
4835 ===> org.kiama.example.lambda2.LambdaTests.assertPrettyE(term: org.kiama.example.lambda2.AST.Exp,result: String): Unit
12044 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3370 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.equals(x$1: Any): Boolean
12547 ===> org.kiama.util.ParserUtilitiesTests.Tup5.apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup5
8376 ===> org.kiama.example.obr.RISCTree.Cond.toString(): String
1992 ===> org.kiama.example.iswim.compiler.Syntax.Variable.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
12315 ===> org.kiama.util.Environments.Named.count: Int
11940 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3862 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.<init>(): org.kiama.example.iswim.secd.SECDBase.TypeError.type
326 ===> org.kiama.attribution.AttributionTests.QuadTree.toString(): String
9128 ===> org.kiama.example.obr.SPARCTree.SubW.toString(): String
8469 ===> org.kiama.example.obr.RISCTree.DivW.canEqual(x$1: Any): Boolean
5300 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productElement(x$1: Int): Any
11392 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.copy(i: Int): org.kiama.rewriting.SupportPositionalRewriterTests.Leaf
1147 ===> org.kiama.example.RISC.RISCISA.WRL.productElement(x$1: Int): Any
5259 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.copy(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDecl): SymbolTable.this.UserType
4442 ===> org.kiama.example.lambda.AST.App.l: org.kiama.example.lambda.AST.Exp
12063 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9521 ===> org.kiama.example.oneohonecompanies.Company.Employee.copy$default$1: org.kiama.example.oneohonecompanies.Company.Name @scala.annotation.unchecked.uncheckedVariance
3451 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.<init>(fn: Option[org.kiama.example.iswim.secd.SECDBase.Name],pn: org.kiama.example.iswim.secd.SECDBase.Name,bdy: org.kiama.example.iswim.secd.SECDBase.CodeSegment): org.kiama.example.iswim.secd.SECDBase.FunctionSpec
6874 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.size: org.kiama.example.oberon0.L0.source.Expression
8242 ===> org.kiama.example.obr.RISCTree.Jmp.dest: org.kiama.example.obr.RISCTree.Label
8154 ===> org.kiama.example.obr.RISCEncoder.getcode: org.kiama.example.RISC.RISCISA.Code
7475 ===> org.kiama.example.obr.ObrTree.IntParam.productIterator: Iterator[Any]
7937 ===> org.kiama.example.obr.ObrTree.IndexExp.canEqual(x$1: Any): Boolean
4662 ===> org.kiama.example.lambda2.AST.Bind.<init>(): org.kiama.example.lambda2.AST.Bind.type
3565 ===> org.kiama.example.iswim.secd.SECDBase.Exit.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.Exit): Boolean
6185 ===> org.kiama.example.oberon0.L1.c.CIfStatement.<init>(): org.kiama.example.oberon0.L1.c.CIfStatement.type
6921 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.hashCode(): Int
10706 ===> org.kiama.example.til.TIL2_1Tests.n: org.kiama.example.til.AST.Id
2104 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productArity: Int
10276 ===> org.kiama.example.repmin.Fork.left: org.kiama.example.repmin.Tree
6404 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.$init$(): Unit
8030 ===> org.kiama.example.obr.ObrTree.NegExp.toString(): String
2631 ===> org.kiama.example.iswim.compiler.Syntax.Match.copy$default$2: List[org.kiama.example.iswim.compiler.Syntax.MatchClause] @scala.annotation.unchecked.uncheckedVariance
8791 ===> org.kiama.example.obr.SPARCTree.LabelDef.copy(lab: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.LabelDef
12158 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4836 ===> org.kiama.example.lambda2.LazySubst.$init$(): Unit
10173 ===> org.kiama.example.prolog.SymbolTable.Predicate.equals(x$1: Any): Boolean
3533 ===> org.kiama.example.iswim.secd.SECDBase.Enter.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.Enter): Option[List[org.kiama.example.iswim.secd.SECDBase.Name]]
10063 ===> org.kiama.example.prolog.PrologTree.Var.productArity: Int
8865 ===> org.kiama.example.obr.SPARCTree.Write.canEqual(x$1: Any): Boolean
4451 ===> org.kiama.example.lambda.AST.App.productElement(x$1: Int): Any
7703 ===> org.kiama.example.obr.ObrTree.LoopStmt.<init>(): org.kiama.example.obr.ObrTree.LoopStmt.type
3814 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.apply(): org.kiama.example.iswim.secd.SECDBase.PrimTypeValue
997 ===> org.kiama.example.RISC.RISCISA.LDB.productElement(x$1: Int): Any
5909 ===> org.kiama.example.oberon0.L0.source.GtExp.productIterator: Iterator[Any]
6581 ===> org.kiama.example.oberon0.L3.c.CStrExp.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
6909 ===> org.kiama.example.oberon0.L4.source.IndexExp.apply(base: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L4.source.IndexExp
5940 ===> org.kiama.example.oberon0.L0.source.SumExpression.priority: Int
8617 ===> org.kiama.example.obr.RISCTree.SequenceDatum.<init>(): org.kiama.example.obr.RISCTree.SequenceDatum.type
4708 ===> org.kiama.example.lambda2.AST.NoType.canEqual(x$1: Any): Boolean
9779 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.hashCode(): Int
11085 ===> org.kiama.output.PrettyPrinterBase.ampersand: PrettyPrinterBase.this.Doc
2067 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productElement(x$1: Int): Any
5613 ===> org.kiama.example.oberon0.L0.c.CDivExp.hashCode(): Int
2251 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.copy(b: Boolean): org.kiama.example.iswim.compiler.Syntax.BoolVal
2711 ===> org.kiama.example.iswim.compiler.Syntax.Val.toString(): String
12281 ===> org.kiama.util.TestCompiler.$anon.accept(dir: java.io.File,name: String): Boolean
5675 ===> org.kiama.example.oberon0.L0.c.CNegExp.toString(): String
5390 ===> org.kiama.example.oberon0.L0.c.CAssignment.hashCode(): Int
5239 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.<init>(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDef): SymbolTable.this.Variable
3111 ===> org.kiama.example.iswim.secd.IOOps.$init$(): Unit
3735 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.toString(): String
8674 ===> org.kiama.example.obr.RISCTree.Label.unapply(x$0: org.kiama.example.obr.RISCTree.Label): Option[Int]
4342 ===> org.kiama.example.json.JSONTree.JFalse.<init>(): org.kiama.example.json.JSONTree.JFalse.type
5921 ===> org.kiama.example.oberon0.L0.source.GeExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.GeExp
6802 ===> org.kiama.example.oberon0.L4.SymbolTable.isArray(e: SymbolTable.this.Entity): Boolean
1617 ===> org.kiama.example.imperative.AST.Neg.intadds: Int
1634 ===> org.kiama.example.imperative.AST.Binary.vars: Set[org.kiama.example.imperative.AST.Idn]
12183 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9110 ===> org.kiama.example.obr.SPARCTree.RemW.equals(x$1: Any): Boolean
9557 ===> org.kiama.example.oneohonecompanies.Company.DU.copy(d: org.kiama.example.oneohonecompanies.Company.Dept): org.kiama.example.oneohonecompanies.Company.DU
12033 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10239 ===> org.kiama.example.prolog.SymbolTable.ListType.apply(): org.kiama.example.prolog.SymbolTable.ListType
9047 ===> org.kiama.example.obr.SPARCTree.MulW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.MulW
6843 ===> org.kiama.example.oberon0.L4.c.CIndexExp.canEqual(x$1: Any): Boolean
10929 ===> org.kiama.machine.MachineTests.MM.debug: Boolean
4880 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
12394 ===> org.kiama.util.Messaging.Record.productPrefix: String
5248 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.hashCode(): Int
8333 ===> org.kiama.example.obr.RISCTree.Read.productIterator: Iterator[Any]
6274 ===> org.kiama.example.oberon0.L1.source.PrettyPrinter.$init$(): Unit
8911 ===> org.kiama.example.obr.SPARCTree.Cond.toString(): String
11130 ===> org.kiama.output.PrettyPrinterTests.m: List[PrettyPrinterTests.this.Doc]
6540 ===> org.kiama.example.oberon0.L3.c.CVoidType.unapply(x$0: org.kiama.example.oberon0.L3.c.CVoidType): Boolean
6277 ===> org.kiama.example.oberon0.L1.source.PrettyPrinter.elsifToDoc(ei: (org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)): PrettyPrinter.this.Doc
6006 ===> org.kiama.example.oberon0.L0.source.MulExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.MulExp
12229 ===> org.kiama.rewriting.UniplateTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2111 ===> org.kiama.example.iswim.compiler.Syntax.Divide.<init>(): org.kiama.example.iswim.compiler.Syntax.Divide.type
7428 ===> org.kiama.example.obr.ObrTree.ObrInt.decls: List[org.kiama.example.obr.ObrTree.Declaration]
200 ===> org.kiama.attribution.AttributionTests.EitherTree.copy$default$1: Either[AttributionTests.this.Pair,AttributionTests.this.Leaf] @scala.annotation.unchecked.uncheckedVariance
7299 ===> org.kiama.example.oberon0.base.source.Block.productIterator: Iterator[Any]
9744 ===> org.kiama.example.picojava.AbstractSyntax.Use.toString(): String
11975 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1271 ===> org.kiama.example.RISC.RISCISA.BR.<init>(): org.kiama.example.RISC.RISCISA.BR.type
7775 ===> org.kiama.example.obr.ObrTree.TryStmt.<init>(): org.kiama.example.obr.ObrTree.TryStmt.type
12441 ===> org.kiama.util.WhitespaceParser.literal(s: String): WhitespaceParser.this.Parser[String]
5682 ===> org.kiama.example.oberon0.L0.c.CNotExp.exp: org.kiama.example.oberon0.base.c.CExpression
1539 ===> org.kiama.example.dataflow.DataflowForTests.s41: org.kiama.example.dataflow.DataflowAST.Block
7842 ===> org.kiama.example.obr.ObrTree.BoolExp.productElement(x$1: Int): Any
10211 ===> org.kiama.example.prolog.SymbolTable.AtomType.readResolve(): Object
8920 ===> org.kiama.example.obr.SPARCTree.CmpeqW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
1255 ===> org.kiama.example.RISC.RISCISA.BGT.<init>(): org.kiama.example.RISC.RISCISA.BGT.type
503 ===> org.kiama.example.RISC.RISCISA.MOV.equals(x$1: Any): Boolean
5558 ===> org.kiama.example.oberon0.L0.c.CSubExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CSubExp
5769 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productIterator: Iterator[Any]
4300 ===> org.kiama.example.json.JSONTree.JNumber.value: Double
4045 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productIterator: Iterator[Any]
2537 ===> org.kiama.example.iswim.compiler.Syntax.While.toString(): String
2283 ===> org.kiama.example.iswim.compiler.Syntax.And.l: org.kiama.example.iswim.compiler.Syntax.Expr
6329 ===> org.kiama.example.oberon0.L2.source.CaseStatement.optelse: Option[org.kiama.example.oberon0.base.source.Block]
7466 ===> org.kiama.example.obr.ObrTree.IntVar.unapply(x$0: org.kiama.example.obr.ObrTree.IntVar): Option[org.kiama.example.obr.ObrTree.Identifier]
7100 ===> org.kiama.example.oberon0.base.c.CVarDecl.ident: String
6759 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.hashCode(): Int
398 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productElement(x$1: Int): Any
5700 ===> org.kiama.example.oberon0.L0.c.CNotExp.readResolve(): Object
7224 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.readResolve(): Object
4100 ===> org.kiama.example.iswim.secd.StackOps.Dup.toString(): String
1843 ===> org.kiama.example.imperative.ASTNonCase.Var.s: org.kiama.example.imperative.ASTNonCase.Idn
5153 ===> org.kiama.example.lambda3.Parser.$init$(): Unit
3547 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.<init>(): org.kiama.example.iswim.secd.SECDBase.BindPrims.type
8339 ===> org.kiama.example.obr.RISCTree.Read.toString(): String
9169 ===> org.kiama.example.obr.SPARCTree.Indexed.apply(base: org.kiama.example.obr.SPARCTree.Local,offset: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Indexed
3377 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.message: String
10166 ===> org.kiama.example.prolog.SymbolTable.Predicate.productPrefix: String
7078 ===> org.kiama.example.oberon0.base.c.CProgram.toString(): String
11983 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5522 ===> org.kiama.example.oberon0.L0.c.CAddExp.right: org.kiama.example.oberon0.base.c.CExpression
583 ===> org.kiama.example.RISC.RISCISA.ADD.productElement(x$1: Int): Any
8656 ===> org.kiama.example.obr.RISCTree.Indexed.apply(base: org.kiama.example.obr.RISCTree.Local,offset: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Indexed
11354 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.a: org.kiama.rewriting.SupportPositionalRewriterTests.Node
10037 ===> org.kiama.example.prolog.PrologTree.Rule.hd: org.kiama.example.prolog.PrologTree.Term
9694 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.<init>(Variable: org.kiama.example.picojava.AbstractSyntax.Access,Value: org.kiama.example.picojava.AbstractSyntax.Exp): org.kiama.example.picojava.AbstractSyntax.AssignStmt
1026 ===> org.kiama.example.RISC.RISCISA.POP.unapply(x$0: org.kiama.example.RISC.RISCISA.POP): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
4733 ===> org.kiama.example.lambda2.AST.AddOp.unapply(x$0: org.kiama.example.lambda2.AST.AddOp): Boolean
5128 ===> org.kiama.example.lambda3.AST.SubstQuery.<init>(): org.kiama.example.lambda3.AST.SubstQuery.type
7522 ===> org.kiama.example.obr.ObrTree.RecordVar.fields: List[org.kiama.example.obr.ObrTree.Identifier]
10801 ===> org.kiama.example.transform.AST.Exp.<init>(): org.kiama.example.transform.AST.Exp
7284 ===> org.kiama.example.oberon0.base.source.ModuleDecl.<init>(): org.kiama.example.oberon0.base.source.ModuleDecl.type
453 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.isDefinedAt(x$1: DynamicAttributionTests.this.Tree): Boolean
11758 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5044 ===> org.kiama.example.lambda3.AST.EquivQuery.productElement(x$1: Int): Any
9468 ===> org.kiama.example.obr.tests.ObrExecTests.<init>(): org.kiama.example.obr.tests.ObrExecTests
10752 ===> org.kiama.example.transform.AST.VarDecl.productIterator: Iterator[Any]
1241 ===> org.kiama.example.RISC.RISCISA.BLE.apply(label: Int): org.kiama.example.RISC.RISCISA.BLE
6437 ===> org.kiama.example.oberon0.L3.NameAnalyser.envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
5684 ===> org.kiama.example.oberon0.L0.c.CNotExp.priority: Int
4924 ===> org.kiama.example.lambda2.PrettyPrinter.<init>(): org.kiama.example.lambda2.PrettyPrinter.type
8582 ===> org.kiama.example.obr.RISCTree.RemW.unapply(x$0: org.kiama.example.obr.RISCTree.RemW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
1115 ===> org.kiama.example.RISC.RISCISA.WRD.productElement(x$1: Int): Any
3808 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.canEqual(x$1: Any): Boolean
9084 ===> org.kiama.example.obr.SPARCTree.Not.productPrefix: String
10537 ===> org.kiama.example.til.AST.Var.<init>(): org.kiama.example.til.AST.Var.type
3843 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productIterator: Iterator[Any]
929 ===> org.kiama.example.RISC.RISCISA.XOR.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.XOR
6650 ===> org.kiama.example.oberon0.L3.source.ProcDecl.productIterator: Iterator[Any]
9879 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.BBinBB: org.kiama.example.picojava.AbstractSyntax.Use
5403 ===> org.kiama.example.oberon0.L0.c.CEqExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CEqExp
6914 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.copy(fields: List[org.kiama.example.oberon0.L4.source.FieldList]): org.kiama.example.oberon0.L4.source.RecordTypeDef
4500 ===> org.kiama.example.lambda.Generator.genVar: org.scalacheck.Gen[org.kiama.example.lambda.AST.Var]
10846 ===> org.kiama.example.transform.AST.Var.productArity: Int
468 ===> org.kiama.example.RISC.RISC.R: RISC.this.ParamState[org.kiama.example.RISC.RISCISA.RegNo,Int]
7951 ===> org.kiama.example.obr.ObrTree.IntExp.productArity: Int
1472 ===> org.kiama.example.dataflow.DataflowAST.Empty.apply(): org.kiama.example.dataflow.DataflowAST.Empty
8963 ===> org.kiama.example.obr.SPARCTree.CmpgtW.canEqual(x$1: Any): Boolean
9938 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.left: org.kiama.example.prolog.PrologTree.Term
8338 ===> org.kiama.example.obr.RISCTree.Read.<init>(): org.kiama.example.obr.RISCTree.Read.type
12309 ===> org.kiama.util.FileEmitter.<init>(filename: String): org.kiama.util.FileEmitter
6137 ===> org.kiama.example.oberon0.L0.source.IdnExp.idnuse: org.kiama.example.oberon0.base.source.IdnUse
8294 ===> org.kiama.example.obr.RISCTree.StW.copy(mem: org.kiama.example.obr.RISCTree.Address,d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.StW
10264 ===> org.kiama.example.prolog.Subst.compose(s: org.kiama.example.prolog.Subst): org.kiama.example.prolog.Subst
9646 ===> org.kiama.example.picojava.AbstractSyntax.Block.readResolve(): Object
5503 ===> org.kiama.example.oberon0.L0.c.CGeExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CGeExp
4159 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.<init>(): org.kiama.example.iswim.secd.StringOps.StringTypeValue.type
7844 ===> org.kiama.example.obr.ObrTree.BoolExp.canEqual(x$1: Any): Boolean
11878 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7494 ===> org.kiama.example.obr.ObrTree.BoolVar.hashCode(): Int
9667 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.<init>(): org.kiama.example.picojava.AbstractSyntax.ClassDecl.type
6311 ===> org.kiama.example.oberon0.L2.source.ForStatement.copy$default$3: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
9504 ===> org.kiama.example.oneohonecompanies.Company.Dept.productArity: Int
11066 ===> org.kiama.output.PrettyPrinterBase.vcat(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
2440 ===> org.kiama.example.iswim.compiler.Syntax.Import.equals(x$1: Any): Boolean
10226 ===> org.kiama.example.prolog.SymbolTable.IntegerType.readResolve(): Object
3311 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.<init>(): org.kiama.example.iswim.secd.RecordOps.MkRecord.type
8380 ===> org.kiama.example.obr.RISCTree.Cond.apply(cond: org.kiama.example.obr.RISCTree.Datum,t: org.kiama.example.obr.RISCTree.Datum,f: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Cond
361 ===> org.kiama.attribution.Decorators.Chain.<init>(in: T => U,out: T => U): org.kiama.attribution.Decorators.Chain[T,U]
10056 ===> org.kiama.example.prolog.PrologTree.Term.<init>(): org.kiama.example.prolog.PrologTree.Term
4786 ===> org.kiama.example.lambda2.EagerSubst.$init$(): Unit
2246 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.GreaterEq
3285 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productIterator: Iterator[Any]
6368 ===> org.kiama.example.oberon0.L2.source.ValCond.value: org.kiama.example.oberon0.L0.source.Expression
6092 ===> org.kiama.example.oberon0.L0.source.NegExp.canEqual(x$1: Any): Boolean
10974 ===> org.kiama.output.Postfix.productArity: Int
2624 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.MatchClause): Option[(org.kiama.example.iswim.compiler.Syntax.Pattern, org.kiama.example.iswim.compiler.Syntax.Expr)]
7281 ===> org.kiama.example.oberon0.base.source.ModuleDecl.hashCode(): Int
9285 ===> org.kiama.example.obr.SymbolTable.Multiple.toString(): String
6226 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.toString(): String
12173 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6209 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.unapply(x$0: org.kiama.example.oberon0.L1.c.CIfElseStatement): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CStatement, org.kiama.example.oberon0.base.c.CStatement)]
8626 ===> org.kiama.example.obr.RISCTree.Local.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
9276 ===> org.kiama.example.obr.SymbolTable.Multiple.productPrefix: String
7411 ===> org.kiama.example.obr.Main.<init>(): org.kiama.example.obr.Main.type
2565 ===> org.kiama.example.iswim.compiler.Syntax.Empty.hashCode(): Int
1638 ===> org.kiama.example.imperative.AST.Add.l: org.kiama.example.imperative.AST.Exp
7267 ===> org.kiama.example.oberon0.base.source.Declaration.<init>(): org.kiama.example.oberon0.base.source.Declaration
5488 ===> org.kiama.example.oberon0.L0.c.CGtExp.productPrefix: String
3421 ===> org.kiama.example.iswim.secd.SECDBase.instNumber: org.kiama.example.iswim.secd.SECDBase.ByteCode => Int
12258 ===> org.kiama.util.CompilerBase.main(args: Array[String]): Unit
8428 ===> org.kiama.example.obr.RISCTree.CmpgtW.productArity: Int
1618 ===> org.kiama.example.imperative.AST.Neg.copy(e: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Neg
5270 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.toString(): String
10225 ===> org.kiama.example.prolog.SymbolTable.IntegerType.unapply(x$0: org.kiama.example.prolog.SymbolTable.IntegerType): Boolean
6029 ===> org.kiama.example.oberon0.L0.source.DivExp.productArity: Int
1010 ===> org.kiama.example.RISC.RISCISA.POP.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.POP
8130 ===> org.kiama.example.obr.ObrTree.StarExp.left: org.kiama.example.obr.ObrTree.Expression
8393 ===> org.kiama.example.obr.RISCTree.CmpeqW.canEqual(x$1: Any): Boolean
6893 ===> org.kiama.example.oberon0.L4.source.IndexExp.base: org.kiama.example.oberon0.L0.source.Expression
6668 ===> org.kiama.example.oberon0.L3.source.VarMode.hashCode(): Int
6578 ===> org.kiama.example.oberon0.L3.c.CStrExp.s: String
4473 ===> org.kiama.example.lambda.AST.Sub.canEqual(x$1: Any): Boolean
2755 ===> org.kiama.example.iswim.driver.Main.$anon.<init>(): org.kiama.example.iswim.driver.SECD
6922 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.toString(): String
6853 ===> org.kiama.example.oberon0.L4.c.CFieldExp.field: String
9057 ===> org.kiama.example.obr.SPARCTree.MulW.equals(x$1: Any): Boolean
12429 ===> org.kiama.util.ParserUtilities.constToTupleFunction3[A, B, C, R](r: (A, B, C) => R): ParserUtilities.this.~[ParserUtilities.this.~[A,B],C] => R
9826 ===> org.kiama.example.picojava.ErrorCheck.qualifier: org.kiama.example.picojava.AbstractSyntax.IdnUse => org.kiama.example.picojava.AbstractSyntax.Access
11230 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productArity: Int
8836 ===> org.kiama.example.obr.SPARCTree.Ret.unapply(x$0: org.kiama.example.obr.SPARCTree.Ret): Boolean
5340 ===> org.kiama.example.oberon0.L0.c.CNamedType.apply(ident: String): org.kiama.example.oberon0.L0.c.CNamedType
6231 ===> org.kiama.example.oberon0.L1.c.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
12492 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productIterator: Iterator[Any]
7973 ===> org.kiama.example.obr.ObrTree.LessExp.canEqual(x$1: Any): Boolean
8994 ===> org.kiama.example.obr.SPARCTree.DivW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.DivW
8145 ===> org.kiama.example.obr.ObrTree.StarExp.toString(): String
10968 ===> org.kiama.output.Prefix.canEqual(x$1: Any): Boolean
5924 ===> org.kiama.example.oberon0.L0.source.GeExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
5125 ===> org.kiama.example.lambda3.AST.SubstQuery.hashCode(): Int
2210 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.readResolve(): Object
9403 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productIterator: Iterator[Any]
9053 ===> org.kiama.example.obr.SPARCTree.MulW.productIterator: Iterator[Any]
10544 ===> org.kiama.example.til.AST.Num.copy(n: Int): org.kiama.example.til.AST.Num
1857 ===> org.kiama.example.imperative.ASTNonCase.Binary.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Binary
7538 ===> org.kiama.example.obr.ObrTree.RecordVar.unapply(x$0: org.kiama.example.obr.ObrTree.RecordVar): Option[(org.kiama.example.obr.ObrTree.Identifier, List[org.kiama.example.obr.ObrTree.Identifier])]
5071 ===> org.kiama.example.lambda3.AST.EvalQuery.unapply(x$0: org.kiama.example.lambda3.AST.EvalQuery): Option[org.kiama.example.lambda3.AST.Exp]
3560 ===> org.kiama.example.iswim.secd.SECDBase.Exit.toString(): String
5060 ===> org.kiama.example.lambda3.AST.EvalQuery.productPrefix: String
9735 ===> org.kiama.example.picojava.AbstractSyntax.Use.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.Use
12139 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
780 ===> org.kiama.example.RISC.RISCISA.MODI.unapply(x$0: org.kiama.example.RISC.RISCISA.MODI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
8688 ===> org.kiama.example.obr.SPARCEncoder.arg1reg: String("%o0")
11099 ===> org.kiama.output.PrettyPrinterBase.backslash: PrettyPrinterBase.this.Doc
1084 ===> org.kiama.example.RISC.RISCISA.PSH.hashCode(): Int
812 ===> org.kiama.example.RISC.RISCISA.CMPI.canEqual(x$1: Any): Boolean
156 ===> org.kiama.attribution.AttributionTests.Pair.toString(): String
12585 ===> org.kiama.util.Positioned.finish_$eq(x$1: scala.util.parsing.input.Position): Unit
4625 ===> org.kiama.example.lambda2.AST.Let.toString(): String
3386 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.<init>(): org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.type
2965 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.s: ExceptionHandler.this.Stack
4131 ===> org.kiama.example.iswim.secd.StringOps.<init>(): org.kiama.example.iswim.secd.StringOps.type
11988 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1348 ===> org.kiama.example.dataflow.ControlFlowImpl.succ: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Stm]
4583 ===> org.kiama.example.lambda2.AST.App.unapply(x$0: org.kiama.example.lambda2.AST.App): Option[(org.kiama.example.lambda2.AST.Exp, org.kiama.example.lambda2.AST.Exp)]
4371 ===> org.kiama.example.json.PrettyPrinting.showPair(p: (org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)): PrettyPrinting.this.Doc
7211 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.copy(): org.kiama.example.oberon0.base.c.CEmptyStmt
9767 ===> org.kiama.example.picojava.AbstractSyntax.Dot.apply(ObjectReference: org.kiama.example.picojava.AbstractSyntax.Access,IdnUse: org.kiama.example.picojava.AbstractSyntax.IdnUse): org.kiama.example.picojava.AbstractSyntax.Dot
11383 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.toString(): String
9052 ===> org.kiama.example.obr.SPARCTree.MulW.productElement(x$1: Int): Any
8869 ===> org.kiama.example.obr.SPARCTree.Write.<init>(): org.kiama.example.obr.SPARCTree.Write.type
2467 ===> org.kiama.example.iswim.compiler.Syntax.Return.copy(res: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Return
8618 ===> org.kiama.example.obr.RISCTree.SequenceDatum.toString(): String
11298 ===> org.kiama.rewriting.NominalAST.GenName.counter_$eq(x$1: Int): Unit
6061 ===> org.kiama.example.oberon0.L0.source.AndExp.right: org.kiama.example.oberon0.L0.source.Expression
3233 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productArity: Int
1595 ===> org.kiama.example.imperative.AST.Var.depth: Int
11465 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productIterator: Iterator[Any]
6497 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.<init>(): SymbolTable.this.ParamInfo.type
5901 ===> org.kiama.example.oberon0.L0.source.GtExp.right: org.kiama.example.oberon0.L0.source.Expression
5337 ===> org.kiama.example.oberon0.L0.c.CNamedType.equals(x$1: Any): Boolean
6757 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productIterator: Iterator[Any]
8619 ===> org.kiama.example.obr.RISCTree.SequenceDatum.apply(insns: List[org.kiama.example.obr.RISCTree.Item],d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.SequenceDatum
817 ===> org.kiama.example.RISC.RISCISA.CMPI.apply(b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.CMPI
10829 ===> org.kiama.example.transform.AST.Num.productArity: Int
11346 ===> org.kiama.rewriting.PositionalRewriterTests.check(no: org.kiama.rewriting.SupportPositionalRewriterTests.One): Unit
1352 ===> org.kiama.example.dataflow.VariablesImpl.$init$(): Unit
11032 ===> org.kiama.output.PrettyPrinterBase.empty: PrettyPrinterBase.this.Doc
4205 ===> org.kiama.example.iswim.tests.CodeGeneratorTests.<init>(): org.kiama.example.iswim.tests.CodeGeneratorTests
3698 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productIterator: Iterator[Any]
12174 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2544 ===> org.kiama.example.iswim.compiler.Syntax.Block.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Expr] @scala.annotation.unchecked.uncheckedVariance
185 ===> org.kiama.attribution.AttributionTests.Unused.productArity: Int
9438 ===> org.kiama.example.obr.SymbolTable.UnknownType.equals(x$1: Any): Boolean
8326 ===> org.kiama.example.obr.RISCTree.Write.readResolve(): Object
5133 ===> org.kiama.example.lambda3.AST.SwapQuery.tr: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name)
5695 ===> org.kiama.example.oberon0.L0.c.CNotExp.equals(x$1: Any): Boolean
8482 ===> org.kiama.example.obr.RISCTree.IntDatum.productPrefix: String
7602 ===> org.kiama.example.obr.ObrTree.ExnConst.productIterator: Iterator[Any]
2261 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.<init>(): org.kiama.example.iswim.compiler.Syntax.BoolVal.type
3407 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.apply(flds: List[org.kiama.example.iswim.secd.SECDBase.Value]): RecordOps.this.RecordValue
527 ===> org.kiama.example.RISC.RISCISA.MOVI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MOVI
6024 ===> org.kiama.example.oberon0.L0.source.DivExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.DivExp
1454 ===> org.kiama.example.dataflow.DataflowAST.Return.equals(x$1: Any): Boolean
8757 ===> org.kiama.example.obr.SPARCTree.Bne.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
1221 ===> org.kiama.example.RISC.RISCISA.BGE.hashCode(): Int
4544 ===> org.kiama.example.lambda2.AST.Var.readResolve(): Object
4934 ===> org.kiama.example.lambda2.Reduce.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3810 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.toString(): String
259 ===> org.kiama.attribution.AttributionTests.GenSeqTree.equals(x$1: Any): Boolean
1031 ===> org.kiama.example.RISC.RISCISA.STW.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.STW
5662 ===> org.kiama.example.oberon0.L0.c.CUnaryExpression.fixity: org.kiama.output.Prefix.type
7975 ===> org.kiama.example.obr.ObrTree.LessExp.toString(): String
1109 ===> org.kiama.example.RISC.RISCISA.WRD.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
4010 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.copy$default$3: SECDBase.this.Environment @scala.annotation.unchecked.uncheckedVariance
11226 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.<init>(i: Int): ParenPrettyPrinterTests.this.Leaf
4507 ===> org.kiama.example.lambda.LambdaGen.<init>(): org.kiama.example.lambda.LambdaGen.type
2611 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Pattern @scala.annotation.unchecked.uncheckedVariance
649 ===> org.kiama.example.RISC.RISCISA.SUBI.hashCode(): Int
11603 ===> org.kiama.rewriting.Rewriter.$anon.someTraversable[CC[U] <: Traversable[U]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
8108 ===> org.kiama.example.obr.ObrTree.PlusExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.PlusExp
11419 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
9885 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.declAa: org.kiama.example.picojava.AbstractSyntax.VarDecl
5776 ===> org.kiama.example.oberon0.L0.source.TypeDecl.apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L0.source.TypeDecl
2640 ===> org.kiama.example.iswim.compiler.Syntax.Match.<init>(): org.kiama.example.iswim.compiler.Syntax.Match.type
2275 ===> org.kiama.example.iswim.compiler.Syntax.Not.hashCode(): Int
7048 ===> org.kiama.example.oberon0.base.TestDriver.processline$default$3: Int @scala.annotation.unchecked.uncheckedVariance
4339 ===> org.kiama.example.json.JSONTree.JFalse.hashCode(): Int
4033 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.canEqual(x$1: Any): Boolean
10958 ===> org.kiama.output.NonAssoc.canEqual(x$1: Any): Boolean
4940 ===> org.kiama.example.lambda2.ReduceSubst.$init$(): Unit
3550 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.BindPrims): Option[List[org.kiama.example.iswim.secd.SECDBase.Name]]
3588 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productElement(x$1: Int): Any
11898 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12480 ===> org.kiama.util.ParserUtilitiesTests.Tup2.readResolve(): Object
5051 ===> org.kiama.example.lambda3.AST.EquivQuery.toString(): String
709 ===> org.kiama.example.RISC.RISCISA.DIV.productElement(x$1: Int): Any
11441 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
12169 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1846 ===> org.kiama.example.imperative.ASTNonCase.Var.deconstruct: List[org.kiama.example.imperative.ASTNonCase.Idn]
4082 ===> org.kiama.example.iswim.secd.StackOps.Pop.hashCode(): Int
1228 ===> org.kiama.example.RISC.RISCISA.BLE.label: Int
6395 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.canEqual(x$1: Any): Boolean
11247 ===> org.kiama.rewriting.CallbackRewriter.$anon.<init>(): CallbackRewriter.this.Strategy
9402 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productElement(x$1: Int): Any
2190 ===> org.kiama.example.iswim.compiler.Syntax.Less.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Less): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
12048 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8880 ===> org.kiama.example.obr.SPARCTree.AddW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
3064 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
10071 ===> org.kiama.example.prolog.PrologTree.Var.apply(s: String): org.kiama.example.prolog.PrologTree.Var
5021 ===> org.kiama.example.lambda3.AST.Lam.productPrefix: String
7302 ===> org.kiama.example.oberon0.base.source.Block.toString(): String
8524 ===> org.kiama.example.obr.RISCTree.MulW.toString(): String
3960 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
6805 ===> org.kiama.example.oberon0.L4.SymbolTable.isNotRecord(e: SymbolTable.this.Entity): Boolean
9429 ===> org.kiama.example.obr.SymbolTable.UnknownType.iscompatible(other: org.kiama.example.obr.SymbolTable.TypeBase): Boolean
8050 ===> org.kiama.example.obr.ObrTree.NotEqualExp.equals(x$1: Any): Boolean
11064 ===> org.kiama.output.PrettyPrinterBase.cat(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
9107 ===> org.kiama.example.obr.SPARCTree.RemW.canEqual(x$1: Any): Boolean
8983 ===> org.kiama.example.obr.SPARCTree.CmpltW.hashCode(): Int
9330 ===> org.kiama.example.obr.SymbolTable.ArrayType.copy(size: Int): org.kiama.example.obr.SymbolTable.ArrayType
11290 ===> org.kiama.rewriting.NominalAST.Bind.<init>(): org.kiama.rewriting.NominalAST.Bind.type
11323 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
11464 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productElement(x$1: Int): Any
9160 ===> org.kiama.example.obr.SPARCTree.Indexed.productArity: Int
2227 ===> org.kiama.example.iswim.compiler.Syntax.Greater.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Greater
4012 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productArity: Int
10552 ===> org.kiama.example.til.AST.Num.toString(): String
55 ===> org.kiama.attribution.AttributionBase.$anon.<init>(): AttributionBase.this.CircularAttribute[T,U]{}
3394 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.toString(): String
9714 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.copy(Condition: org.kiama.example.picojava.AbstractSyntax.Exp,Body: org.kiama.example.picojava.AbstractSyntax.Stmt): org.kiama.example.picojava.AbstractSyntax.WhileStmt
10300 ===> org.kiama.example.repmin.Leaf.productArity: Int
659 ===> org.kiama.example.RISC.RISCISA.MUL.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
9822 ===> org.kiama.example.picojava.ErrorCheck.errors: org.kiama.example.picojava.AbstractSyntax.Program => Seq[String]
5224 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.copy$default$2: org.kiama.example.oberon0.L0.source.ConstDecl @scala.annotation.unchecked.uncheckedVariance
8118 ===> org.kiama.example.obr.ObrTree.SlashExp.productArity: Int
10862 ===> org.kiama.example.transform.Main.<init>(): org.kiama.example.transform.Main.type
1294 ===> org.kiama.example.RISC.RISCISA.RET.<init>(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RET
75 ===> org.kiama.attribution.Attribution.CachedAttribute.reset(): Unit
9697 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.copy$default$2: org.kiama.example.picojava.AbstractSyntax.Exp @scala.annotation.unchecked.uncheckedVariance
1688 ===> org.kiama.example.imperative.AST.Mul.productElement(x$1: Int): Any
11187 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.copy(exp: ParenPrettyPrinterTests.this.Exp,prio: Int): ParenPrettyPrinterTests.this.PostOp
11228 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
2126 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.canEqual(x$1: Any): Boolean
10160 ===> org.kiama.example.prolog.SemanticTestDriver.process(ast: org.kiama.example.prolog.PrologTree.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
10337 ===> org.kiama.example.til.AST.Program.ss: Seq[org.kiama.example.til.AST.Stat]
4918 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
20 ===> org.kiama.attribution.Attributable._children: scala.collection.mutable.ListBuffer[org.kiama.attribution.Attributable]
10485 ===> org.kiama.example.til.AST.Read.<init>(): org.kiama.example.til.AST.Read.type
3044 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productPrefix: String
2949 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.<init>(): org.kiama.example.iswim.secd.ExceptionHandler.SetHandler
11221 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.toString(): String
3523 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productArity: Int
5948 ===> org.kiama.example.oberon0.L0.source.AddExp.productPrefix: String
8729 ===> org.kiama.example.obr.SPARCTree.SPARC.toString(): String
11903 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3393 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.<init>(flds: List[org.kiama.example.iswim.secd.SECDBase.Value]): RecordOps.this.RecordValue
388 ===> org.kiama.attribution.DynamicAttributionTests.<init>(): org.kiama.attribution.DynamicAttributionTests
3176 ===> org.kiama.example.iswim.secd.IntegerOps.Add.canEqual(x$1: Any): Boolean
10401 ===> org.kiama.example.til.AST.IfThen.canEqual(x$1: Any): Boolean
4642 ===> org.kiama.example.lambda2.AST.Letp.equals(x$1: Any): Boolean
1037 ===> org.kiama.example.RISC.RISCISA.STW.productPrefix: String
11714 ===> org.kiama.rewriting.RewriterTests.isterm(c: Any): Boolean
3011 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.readResolve(): Object
7330 ===> org.kiama.example.oberon0.base.source.IdnDef.productPrefix: String
4517 ===> org.kiama.example.lambda2.AST.Num.productElement(x$1: Int): Any
3855 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productPrefix: String
3061 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.toString(): String
290 ===> org.kiama.attribution.AttributionTests.PairTree.canEqual(x$1: Any): Boolean
2646 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.CallCC
84 ===> org.kiama.attribution.Attribution.CachedParamAttribute.$anon.optName: Option[String]
1110 ===> org.kiama.example.RISC.RISCISA.WRD.<init>(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRD
12467 ===> org.kiama.util.ParserUtilitiesTests.Tup2.copy$default$2: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
5205 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
10015 ===> org.kiama.example.prolog.PrologTree.Program.readResolve(): Object
445 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[DynamicAttributionTests.this.Tree,Int] with Serializable
9273 ===> org.kiama.example.obr.SymbolTable.Unknown.readResolve(): Object
8690 ===> org.kiama.example.obr.SPARCEncoder.resreg: String("%o0")
6386 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.maxvalue: org.kiama.example.oberon0.L0.source.Expression
569 ===> org.kiama.example.RISC.RISCISA.MVNI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MVNI
10895 ===> org.kiama.machine.Machine.Update.<init>(): Machine.this.Update
9457 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.hashCode(): Int
9880 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.declAA: org.kiama.example.picojava.AbstractSyntax.ClassDecl
10628 ===> org.kiama.example.til.AST.Add.<init>(): org.kiama.example.til.AST.Add.type
501 ===> org.kiama.example.RISC.RISCISA.MOV.canEqual(x$1: Any): Boolean
3906 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.equals(x$1: Any): Boolean
1781 ===> org.kiama.example.imperative.AST.While.copy$default$2: org.kiama.example.imperative.AST.Stmt @scala.annotation.unchecked.uncheckedVariance
8081 ===> org.kiama.example.obr.ObrTree.OrExp.productElement(x$1: Int): Any
11695 ===> org.kiama.rewriting.Rewriter.ior(s1: => Rewriter.this.Strategy,s2: => Rewriter.this.Strategy): Rewriter.this.Strategy
7416 ===> org.kiama.example.obr.SemanticDriver.usage: String
2772 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.equals(x$1: Any): Boolean
8054 ===> org.kiama.example.obr.ObrTree.NotEqualExp.unapply(x$0: org.kiama.example.obr.ObrTree.NotEqualExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
2730 ===> org.kiama.example.iswim.compiler.Syntax.Assign.toString(): String
5983 ===> org.kiama.example.oberon0.L0.source.OrExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.OrExp
1946 ===> org.kiama.example.iswim.compiler.SemanticAnalysis.$init$(): Unit
5195 ===> org.kiama.example.oberon0.L0.Parser.declarationsDef: Parser.this.PackratParser[List[org.kiama.example.oberon0.base.source.Declaration]]
6899 ===> org.kiama.example.oberon0.L4.source.IndexExp.productPrefix: String
5513 ===> org.kiama.example.oberon0.L0.c.CGeExp.hashCode(): Int
10029 ===> org.kiama.example.prolog.PrologTree.Fact.hashCode(): Int
3105 ===> org.kiama.example.iswim.secd.IOOps.Read.equals(x$1: Any): Boolean
3515 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.apply(): org.kiama.example.iswim.secd.SECDBase.TailApp
9886 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.aInAA: org.kiama.example.picojava.AbstractSyntax.Use
4957 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1206 ===> org.kiama.example.RISC.RISCISA.BLT.equals(x$1: Any): Boolean
9556 ===> org.kiama.example.oneohonecompanies.Company.DU.<init>(d: org.kiama.example.oneohonecompanies.Company.Dept): org.kiama.example.oneohonecompanies.Company.DU
2042 ===> org.kiama.example.iswim.compiler.Syntax.Plus.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Plus
1692 ===> org.kiama.example.imperative.AST.Mul.toString(): String
2872 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.toString(): String
11421 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
12263 ===> org.kiama.util.CompilerBase.process(ast: T,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
7306 ===> org.kiama.example.oberon0.base.source.Block.apply(decls: List[org.kiama.example.oberon0.base.source.Declaration],stmts: List[org.kiama.example.oberon0.base.source.Statement]): org.kiama.example.oberon0.base.source.Block
4387 ===> org.kiama.example.lambda.AST.<init>(): org.kiama.example.lambda.AST.type
10368 ===> org.kiama.example.til.AST.Decl.toString(): String
3900 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productPrefix: String
506 ===> org.kiama.example.RISC.RISCISA.MOV.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOV
7404 ===> org.kiama.example.obr.Driver.spillEnvirFlag: Boolean
9774 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productPrefix: String
9734 ===> org.kiama.example.picojava.AbstractSyntax.Use.Name: String
8693 ===> org.kiama.example.obr.SPARCEncoder.label(lab: org.kiama.example.obr.SPARCTree.Label): Unit
8781 ===> org.kiama.example.obr.SPARCTree.Jmp.hashCode(): Int
3055 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.unapply(x$0: org.kiama.example.iswim.secd.HeapOps.RefTypeValue): Boolean
12299 ===> org.kiama.util.Emitter.emitln: Unit
6184 ===> org.kiama.example.oberon0.L1.c.CIfStatement.equals(x$1: Any): Boolean
8960 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productArity: Int
4388 ===> org.kiama.example.lambda.AST.Exp.<init>(): org.kiama.example.lambda.AST.Exp
122 ===> org.kiama.attribution.UncachedAttribution.UncachedParamAttribute.optName: Option[String]
11796 ===> org.kiama.rewriting.RewriterTests.Equal.productArity: Int
212 ===> org.kiama.attribution.AttributionTests.EitherTree.unapply(x$0: AttributionTests.this.EitherTree): Option[Either[AttributionTests.this.Pair,AttributionTests.this.Leaf]]
4380 ===> org.kiama.example.json.Rewriter.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4504 ===> org.kiama.example.lambda.Generator.genAppExp(sz: Int): org.scalacheck.Gen[org.kiama.example.lambda.AST.App]
11100 ===> org.kiama.output.PrettyPrinterBase.colon: PrettyPrinterBase.this.Doc
12146 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9478 ===> org.kiama.example.oneohonecompanies.Company.Company.depts: List[org.kiama.example.oneohonecompanies.Company.Dept]
1670 ===> org.kiama.example.imperative.AST.Sub.canEqual(x$1: Any): Boolean
7660 ===> org.kiama.example.obr.ObrTree.ForStmt.productIterator: Iterator[Any]
6580 ===> org.kiama.example.oberon0.L3.c.CStrExp.copy(s: String): org.kiama.example.oberon0.L3.c.CStrExp
7235 ===> org.kiama.example.oberon0.base.c.CReturn.toString(): String
8348 ===> org.kiama.example.obr.RISCTree.AddW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
7806 ===> org.kiama.example.obr.ObrTree.Catch.productIterator: Iterator[Any]
4332 ===> org.kiama.example.json.JSONTree.JFalse.<init>(): org.kiama.example.json.JSONTree.JFalse
11830 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5391 ===> org.kiama.example.oberon0.L0.c.CAssignment.toString(): String
643 ===> org.kiama.example.RISC.RISCISA.SUBI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
4560 ===> org.kiama.example.lambda2.AST.Lam.equals(x$1: Any): Boolean
11282 ===> org.kiama.rewriting.NominalAST.Bind.productPrefix: String
2420 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.canEqual(x$1: Any): Boolean
10176 ===> org.kiama.example.prolog.SymbolTable.Predicate.apply(argtypes: List[org.kiama.example.prolog.SymbolTable.Type]): org.kiama.example.prolog.SymbolTable.Predicate
1815 ===> org.kiama.example.imperative.AST.Mul(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
7925 ===> org.kiama.example.obr.ObrTree.IdnExp.unapply(x$0: org.kiama.example.obr.ObrTree.IdnExp): Option[org.kiama.example.obr.ObrTree.Identifier]
8948 ===> org.kiama.example.obr.SPARCTree.CmpneW.<init>(): org.kiama.example.obr.SPARCTree.CmpneW.type
9989 ===> org.kiama.example.prolog.Main.main(args: Array[String]): Unit
4911 ===> org.kiama.example.lambda2.ParLazySubst.$init$(): Unit
2124 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productElement(x$1: Int): Any
2557 ===> org.kiama.example.iswim.compiler.Syntax.Block.readResolve(): Object
12081 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6761 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.<init>(): SymbolTable.this.ArrayType.type
3468 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.FunctionSpec): Option[(Option[org.kiama.example.iswim.secd.SECDBase.Name], org.kiama.example.iswim.secd.SECDBase.Name, org.kiama.example.iswim.secd.SECDBase.CodeSegment)]
9091 ===> org.kiama.example.obr.SPARCTree.Not.equals(x$1: Any): Boolean
8168 ===> org.kiama.example.obr.RISCEncoder.encode(d: org.kiama.example.obr.RISCTree.Datum): Unit
7266 ===> org.kiama.example.oberon0.base.source.SourceASTNode.<init>(): org.kiama.example.oberon0.base.source.SourceASTNode
418 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.hashCode(): Int
7099 ===> org.kiama.example.oberon0.base.c.CDeclaration.<init>(): org.kiama.example.oberon0.base.c.CDeclaration
8133 ===> org.kiama.example.obr.ObrTree.StarExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.StarExp
11721 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9319 ===> org.kiama.example.obr.SymbolTable.BoolType.hashCode(): Int
1126 ===> org.kiama.example.RISC.RISCISA.WRH.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5995 ===> org.kiama.example.oberon0.L0.source.OrExp.toString(): String
10661 ===> org.kiama.example.til.AST.Eq.productIterator: Iterator[Any]
3332 ===> org.kiama.example.iswim.secd.RecordOps.GetField.copy(): org.kiama.example.iswim.secd.RecordOps.GetField
5282 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.canEqual(x$1: Any): Boolean
11264 ===> org.kiama.rewriting.NominalAST.Name.productElement(x$1: Int): Any
4889 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
3537 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.copy(nms: List[org.kiama.example.iswim.secd.SECDBase.Name]): org.kiama.example.iswim.secd.SECDBase.BindPrims
77 ===> org.kiama.attribution.Attribution.CachedParamAttribute.<init>(f: A => (T => U)): Attribution.this.CachedParamAttribute[A,T,U]
5062 ===> org.kiama.example.lambda3.AST.EvalQuery.productElement(x$1: Int): Any
11932 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
12283 ===> org.kiama.util.TestCompiler.filetests$default$6: String @scala.annotation.unchecked.uncheckedVariance
7795 ===> org.kiama.example.obr.ObrTree.TryBody.unapply(x$0: org.kiama.example.obr.ObrTree.TryBody): Option[List[org.kiama.example.obr.ObrTree.Statement]]
8351 ===> org.kiama.example.obr.RISCTree.AddW.productElement(x$1: Int): Any
8273 ===> org.kiama.example.obr.RISCTree.LabelDef.apply(lab: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.LabelDef
1676 ===> org.kiama.example.imperative.AST.Sub.apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Sub
7719 ===> org.kiama.example.obr.ObrTree.ReturnStmt.equals(x$1: Any): Boolean
11546 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
12099 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
632 ===> org.kiama.example.RISC.RISCISA.SUB.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.SUB
8403 ===> org.kiama.example.obr.RISCTree.CmpneW.r: org.kiama.example.obr.RISCTree.Datum
11149 ===> org.kiama.output.PrettyPrinterTests.l2: List[PrettyPrinterTests.this.Val]
7109 ===> org.kiama.example.oberon0.base.c.CVarDecl.productIterator: Iterator[Any]
9588 ===> org.kiama.example.oneohonecompanies.Precedence.$anonfun.isDefinedAt(x$1: org.kiama.example.oneohonecompanies.Company.Node): Boolean
11018 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$at$at$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
757 ===> org.kiama.example.RISC.RISCISA.MOD.toString(): String
5098 ===> org.kiama.example.lambda3.AST.FreshQuery.productPrefix: String
7032 ===> org.kiama.example.oberon0.base.TranslatingDriver.printcastFlag: Boolean
9442 ===> org.kiama.example.obr.SymbolTable.UnknownType.unapply(x$0: org.kiama.example.obr.SymbolTable.UnknownType): Boolean
4291 ===> org.kiama.example.json.JSONTree.JString.canEqual(x$1: Any): Boolean
10739 ===> org.kiama.example.transform.AST.Program.equals(x$1: Any): Boolean
7702 ===> org.kiama.example.obr.ObrTree.LoopStmt.equals(x$1: Any): Boolean
8823 ===> org.kiama.example.obr.SPARCTree.Ret.<init>(): org.kiama.example.obr.SPARCTree.Ret
11067 ===> org.kiama.output.PrettyPrinterBase.fillcat(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
2400 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productArity: Int
12569 ===> org.kiama.util.ParserUtilitiesTests.Tup6.hashCode(): Int
3597 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.AppCC): Boolean
8555 ===> org.kiama.example.obr.RISCTree.Not.productIterator: Iterator[Any]
2249 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.b: Boolean
9639 ===> org.kiama.example.picojava.AbstractSyntax.Block.hashCode(): Int
910 ===> org.kiama.example.RISC.RISCISA.ORI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
7895 ===> org.kiama.example.obr.ObrTree.GreaterExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
7813 ===> org.kiama.example.obr.ObrTree.Catch.apply(idn: org.kiama.example.obr.ObrTree.Identifier,stmts: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.Catch
10568 ===> org.kiama.example.til.AST.Str.canEqual(x$1: Any): Boolean
6356 ===> org.kiama.example.oberon0.L2.source.Case.productElement(x$1: Int): Any
10870 ===> org.kiama.machine.Machine.State.<init>(sname: String): Machine.this.State[T]
6858 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productPrefix: String
9198 ===> org.kiama.example.obr.SemanticAnalysis.userExn: Int
12148 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8770 ===> org.kiama.example.obr.SPARCTree.Bne.unapply(x$0: org.kiama.example.obr.SPARCTree.Bne): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Label)]
7712 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productPrefix: String
11411 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
11756 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Int](x$1: A1,default: A1 => B1): B1
8200 ===> org.kiama.example.obr.RISCTree.RISCProg.apply(insns: List[org.kiama.example.obr.RISCTree.Item]): org.kiama.example.obr.RISCTree.RISCProg
10125 ===> org.kiama.example.prolog.PrologTree.Pred.apply(s: String,ts: List[org.kiama.example.prolog.PrologTree.Term]): org.kiama.example.prolog.PrologTree.Pred
8149 ===> org.kiama.example.obr.RISCEncoder.<init>(): org.kiama.example.obr.RISCEncoder.type
10 ===> org.kiama.attribution.Attributable.next_$eq(x$1: org.kiama.attribution.Attributable): Unit
11014 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$plus$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
7561 ===> org.kiama.example.obr.ObrTree.EnumConst.copy(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.EnumConst
2516 ===> org.kiama.example.iswim.compiler.Syntax.If.equals(x$1: Any): Boolean
11320 ===> org.kiama.rewriting.PositionedRewriter.<init>(): org.kiama.rewriting.PositionedRewriter.type
7232 ===> org.kiama.example.oberon0.base.c.CReturn.productIterator: Iterator[Any]
7932 ===> org.kiama.example.obr.ObrTree.IndexExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
11729 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9221 ===> org.kiama.example.obr.SymbolTable.Variable.isassignable: Boolean
3476 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productArity: Int
9829 ===> org.kiama.example.picojava.NameResolution.<init>(): org.kiama.example.picojava.NameResolution.type
10716 ===> org.kiama.example.til.TIL2_3.transform(ast: org.kiama.example.til.AST.Program): org.kiama.example.til.AST.Program
7949 ===> org.kiama.example.obr.ObrTree.IntExp.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
12507 ===> org.kiama.util.ParserUtilitiesTests.Tup4.copy(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup4
6867 ===> org.kiama.example.oberon0.L4.c.CFieldExp.toString(): String
11891 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3137 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productIterator: Iterator[Any]
10198 ===> org.kiama.example.prolog.SymbolTable.AtomType.toString(): String
2218 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productArity: Int
8447 ===> org.kiama.example.obr.RISCTree.CmpltW.productArity: Int
63 ===> org.kiama.attribution.AttributionBase.constant[T <: AnyRef, U](name: String)(u: => U): AttributionBase.this.Attribute[T,U]
570 ===> org.kiama.example.RISC.RISCISA.MVNI.unapply(x$0: org.kiama.example.RISC.RISCISA.MVNI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
10984 ===> org.kiama.output.Infix.copy$default$1: org.kiama.output.Side @scala.annotation.unchecked.uncheckedVariance
11076 ===> org.kiama.output.PrettyPrinterBase.angles(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
6869 ===> org.kiama.example.oberon0.L4.c.CFieldExp.unapply(x$0: org.kiama.example.oberon0.L4.c.CFieldExp): Option[(org.kiama.example.oberon0.base.c.CExpression, String)]
10235 ===> org.kiama.example.prolog.SymbolTable.ListType.hashCode(): Int
5786 ===> org.kiama.example.oberon0.L0.source.NamedType.productElement(x$1: Int): Any
5728 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productPrefix: String
1560 ===> org.kiama.example.dataflow.Optimise.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5293 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.<init>(ident: String,tipe: SymbolTable.this.Type,value: Int): SymbolTable.this.IntegerValue
5017 ===> org.kiama.example.lambda3.AST.Lam.<init>(b: org.kiama.rewriting.NominalAST.Bind): org.kiama.example.lambda3.AST.Lam
7117 ===> org.kiama.example.oberon0.base.c.CVarDecl.unapply(x$0: org.kiama.example.oberon0.base.c.CVarDecl): Option[(String, org.kiama.example.oberon0.base.c.CType)]
7635 ===> org.kiama.example.obr.ObrTree.ExitStmt.productArity: Int
222 ===> org.kiama.attribution.AttributionTests.ListTree.canEqual(x$1: Any): Boolean
2435 ===> org.kiama.example.iswim.compiler.Syntax.Import.productElement(x$1: Int): Any
6991 ===> org.kiama.example.oberon0.base.CCodeGenerator.translate(d: org.kiama.example.oberon0.base.source.Declaration): List[org.kiama.example.oberon0.base.c.CDeclaration]
7704 ===> org.kiama.example.obr.ObrTree.LoopStmt.toString(): String
5256 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.ident: String
8140 ===> org.kiama.example.obr.ObrTree.StarExp.canEqual(x$1: Any): Boolean
190 ===> org.kiama.attribution.AttributionTests.Unused.toString(): String
8589 ===> org.kiama.example.obr.RISCTree.SubW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
260 ===> org.kiama.attribution.AttributionTests.GenSeqTree.<init>(): AttributionTests.this.GenSeqTree.type
7855 ===> org.kiama.example.obr.ObrTree.EqualExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.EqualExp
6435 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.applyOrElse[A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: NameAnalyser.this.Environment](x$1: A1,default: A1 => B1): B1
9179 ===> org.kiama.example.obr.SPARCTree.Label.productElement(x$1: Int): Any
3255 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.<init>(): org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.type
8221 ===> org.kiama.example.obr.RISCTree.Beq.unapply(x$0: org.kiama.example.obr.RISCTree.Beq): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Label)]
8477 ===> org.kiama.example.obr.RISCTree.DivW.readResolve(): Object
5850 ===> org.kiama.example.oberon0.L0.source.NeExp.productArity: Int
962 ===> org.kiama.example.RISC.RISCISA.XORI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.XORI
6388 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.copy(minvalue: org.kiama.example.oberon0.L0.source.Expression,maxvalue: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L2.source.MinMaxCond
1895 ===> org.kiama.example.imperative.Generator.genExp(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Exp]
217 ===> org.kiama.attribution.AttributionTests.ListTree.copy$default$1: List[AttributionTests.this.Tree] @scala.annotation.unchecked.uncheckedVariance
1572 ===> org.kiama.example.imperative.AST.Num.d: Double
4668 ===> org.kiama.example.lambda2.AST.IntType.<init>(): org.kiama.example.lambda2.AST.IntType
7396 ===> org.kiama.example.oberon0.drivers.A4.<init>(): org.kiama.example.oberon0.drivers.A4.type
9421 ===> org.kiama.example.obr.SymbolTable.ExnType.hashCode(): Int
2878 ===> org.kiama.example.iswim.secd.BooleanOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
4095 ===> org.kiama.example.iswim.secd.StackOps.Dup.productArity: Int
8249 ===> org.kiama.example.obr.RISCTree.Jmp.productIterator: Iterator[Any]
2901 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productIterator: Iterator[Any]
7715 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productIterator: Iterator[Any]
7901 ===> org.kiama.example.obr.ObrTree.GreaterExp.canEqual(x$1: Any): Boolean
6751 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.copy(size: Int,elemtype: SymbolTable.this.Type): SymbolTable.this.ArrayType
7849 ===> org.kiama.example.obr.ObrTree.BoolExp.toString(): String
10346 ===> org.kiama.example.til.AST.Program.hashCode(): Int
1502 ===> org.kiama.example.dataflow.For.init: org.kiama.example.dataflow.DataflowAST.Stm
913 ===> org.kiama.example.RISC.RISCISA.ORI.productElement(x$1: Int): Any
7077 ===> org.kiama.example.oberon0.base.c.CProgram.<init>(): org.kiama.example.oberon0.base.c.CProgram.type
4561 ===> org.kiama.example.lambda2.AST.Lam.<init>(): org.kiama.example.lambda2.AST.Lam.type
9643 ===> org.kiama.example.picojava.AbstractSyntax.Block.toString(): String
833 ===> org.kiama.example.RISC.RISCISA.CHKI.equals(x$1: Any): Boolean
8369 ===> org.kiama.example.obr.RISCTree.Cond.copy$default$3: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
12526 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n2: ParserUtilitiesTests.this.Node
8127 ===> org.kiama.example.obr.ObrTree.SlashExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.SlashExp
9022 ===> org.kiama.example.obr.SPARCTree.IntDatum.<init>(): org.kiama.example.obr.SPARCTree.IntDatum.type
10830 ===> org.kiama.example.transform.AST.Num.productElement(x$1: Int): Any
8821 ===> org.kiama.example.obr.SPARCTree.Read.unapply(x$0: org.kiama.example.obr.SPARCTree.Read): Option[org.kiama.example.obr.SPARCTree.Address]
3655 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.equals(x$1: Any): Boolean
7537 ===> org.kiama.example.obr.ObrTree.RecordVar.apply(idn: org.kiama.example.obr.ObrTree.Identifier,fields: List[org.kiama.example.obr.ObrTree.Identifier]): org.kiama.example.obr.ObrTree.RecordVar
38 ===> org.kiama.attribution.AttributionBase.CircularState.IN_CIRCLE_$eq(x$1: Boolean): Unit
4495 ===> org.kiama.example.lambda.LambdaTests.expectEval(term: String,result: org.kiama.example.lambda.AST.Exp): Unit
10758 ===> org.kiama.example.transform.AST.VarDecl.toString(): String
5734 ===> org.kiama.example.oberon0.L0.source.ConstDecl.toString(): String
8293 ===> org.kiama.example.obr.RISCTree.StW.<init>(mem: org.kiama.example.obr.RISCTree.Address,d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.StW
3901 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productArity: Int
8606 ===> org.kiama.example.obr.RISCTree.SequenceDatum.copy(insns: List[org.kiama.example.obr.RISCTree.Item],d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.SequenceDatum
12213 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2146 ===> org.kiama.example.iswim.compiler.Syntax.Equal.hashCode(): Int
3726 ===> org.kiama.example.iswim.secd.SECDBase.TypeValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
3876 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.equals(x$1: Any): Boolean
1932 ===> org.kiama.example.iswim.compiler.Parser.Pos.productIterator: Iterator[Any]
7257 ===> org.kiama.example.oberon0.base.c.CIntExp.apply(v: Int): org.kiama.example.oberon0.base.c.CIntExp
4633 ===> org.kiama.example.lambda2.AST.Letp.copy$default$1: List[org.kiama.example.lambda2.AST.Bind] @scala.annotation.unchecked.uncheckedVariance
7814 ===> org.kiama.example.obr.ObrTree.Catch.unapply(x$0: org.kiama.example.obr.ObrTree.Catch): Option[(org.kiama.example.obr.ObrTree.Identifier, List[org.kiama.example.obr.ObrTree.Statement])]
2288 ===> org.kiama.example.iswim.compiler.Syntax.And.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
6781 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.unapply(x$0: SymbolTable.this.RecordType): Option[List[SymbolTable.this.Field]]
12322 ===> org.kiama.util.Environments.Named.toString(): String
12314 ===> org.kiama.util.Environments.Named.<init>(): Environments.this.Named.type
11854 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8260 ===> org.kiama.example.obr.RISCTree.LabelDef.<init>(lab: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.LabelDef
6724 ===> org.kiama.example.oberon0.L3.source.Call.toString(): String
7152 ===> org.kiama.example.oberon0.base.c.CBlock.toString(): String
1440 ===> org.kiama.example.dataflow.DataflowAST.Block.apply(stms: List[org.kiama.example.dataflow.DataflowAST.Stm]): org.kiama.example.dataflow.DataflowAST.Block
2452 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productPrefix: String
8515 ===> org.kiama.example.obr.RISCTree.MulW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.MulW
9310 ===> org.kiama.example.obr.SymbolTable.BoolType.<init>(): org.kiama.example.obr.SymbolTable.BoolType
8805 ===> org.kiama.example.obr.SPARCTree.LabelDef.readResolve(): Object
10033 ===> org.kiama.example.prolog.PrologTree.Fact.toString(): String
114 ===> org.kiama.attribution.Attribution.tree[T <: org.kiama.attribution.Attributable, U <: org.kiama.attribution.Attributable](f: T => U): Attribution.this.CachedAttribute[T,U]
3092 ===> org.kiama.example.iswim.secd.IOOps.Write.toString(): String
4533 ===> org.kiama.example.lambda2.AST.Var.productArity: Int
678 ===> org.kiama.example.RISC.RISCISA.MULI.b: org.kiama.example.RISC.RISCISA.RegNo
5869 ===> org.kiama.example.oberon0.L0.source.LtExp.productArity: Int
12629 ===> org.kiama.util.RegexParserTests.assertParseError[T](str: String,p: RegexParserTests.this.Parser[T],line: Int,column: Int,msg: String,iserr: Boolean): Unit
869 ===> org.kiama.example.RISC.RISCISA.ANDI.productPrefix: String
11412 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
5095 ===> org.kiama.example.lambda3.AST.FreshQuery.copy(n: org.kiama.rewriting.NominalAST.Name,e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.FreshQuery
9598 ===> org.kiama.example.oneohonecompanies.SampleCompany.research: org.kiama.example.oneohonecompanies.Company.Dept
1949 ===> org.kiama.example.iswim.compiler.SemanticAnalysis.unreachable: org.kiama.example.iswim.compiler.Syntax.MatchClause => Boolean
2721 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productPrefix: String
9805 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.UnknownDecl
11634 ===> org.kiama.rewriting.Rewriter.repeatuntil(s: => Rewriter.this.Strategy,c: => Rewriter.this.Strategy): Rewriter.this.Strategy
4384 ===> org.kiama.example.json.RewritingTests.klaus: org.kiama.example.json.JSONTree.JObject
3179 ===> org.kiama.example.iswim.secd.IntegerOps.Add.equals(x$1: Any): Boolean
4398 ===> org.kiama.example.lambda.AST.Num.canEqual(x$1: Any): Boolean
3215 ===> org.kiama.example.iswim.secd.IntegerOps.Div.<init>(): org.kiama.example.iswim.secd.IntegerOps.Div
5803 ===> org.kiama.example.oberon0.L0.source.Assignment.productPrefix: String
8899 ===> org.kiama.example.obr.SPARCTree.Cond.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
10924 ===> org.kiama.machine.MachineTests.M.<init>(): MachineTests.this.M.type
5811 ===> org.kiama.example.oberon0.L0.source.Assignment.<init>(): org.kiama.example.oberon0.L0.source.Assignment.type
9280 ===> org.kiama.example.obr.SymbolTable.Multiple.canEqual(x$1: Any): Boolean
4465 ===> org.kiama.example.lambda.AST.Sub.copy(m: org.kiama.example.lambda.AST.Exp,x: org.kiama.example.lambda.AST.Idn,n: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.Sub
4358 ===> org.kiama.example.json.JSONTree.JNull.toString(): String
9953 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.toString(): String
11677 ===> org.kiama.rewriting.Rewriter.issubterm: Rewriter.this.Strategy
10185 ===> org.kiama.example.prolog.SymbolTable.Variable.productElement(x$1: Int): Any
7193 ===> org.kiama.example.oberon0.base.c.CArrayType.copy(size: Int,elemtype: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.base.c.CArrayType
9131 ===> org.kiama.example.obr.SPARCTree.SubW.toString(): String
5292 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.value: Int
4646 ===> org.kiama.example.lambda2.AST.Letp.unapply(x$0: org.kiama.example.lambda2.AST.Letp): Option[(List[org.kiama.example.lambda2.AST.Bind], org.kiama.example.lambda2.AST.Exp)]
2957 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.toString(): String
379 ===> org.kiama.attribution.Decorators.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[T,U] with Serializable
4573 ===> org.kiama.example.lambda2.AST.App.productArity: Int
8737 ===> org.kiama.example.obr.SPARCTree.Beq.copy(cond: org.kiama.example.obr.SPARCTree.Datum,dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Beq
9740 ===> org.kiama.example.picojava.AbstractSyntax.Use.productElement(x$1: Int): Any
9574 ===> org.kiama.example.oneohonecompanies.Cut.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3063 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.$anon.toDoc: HeapOps.this.Doc
4453 ===> org.kiama.example.lambda.AST.App.canEqual(x$1: Any): Boolean
8981 ===> org.kiama.example.obr.SPARCTree.CmpltW.productIterator: Iterator[Any]
7513 ===> org.kiama.example.obr.ObrTree.ArrayVar.hashCode(): Int
920 ===> org.kiama.example.RISC.RISCISA.ORI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ORI
6964 ===> org.kiama.example.oberon0.L4.source.FieldExp.apply(base: org.kiama.example.oberon0.L0.source.Expression,fieldname: org.kiama.example.oberon0.L4.source.FieldIdn): org.kiama.example.oberon0.L4.source.FieldExp
6047 ===> org.kiama.example.oberon0.L0.source.ModExp.productPrefix: String
5479 ===> org.kiama.example.oberon0.L0.c.CLeExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CLeExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
1355 ===> org.kiama.example.dataflow.Liveness.in: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
10123 ===> org.kiama.example.prolog.PrologTree.Pred.<init>(): org.kiama.example.prolog.PrologTree.Pred.type
3616 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productPrefix: String
7429 ===> org.kiama.example.obr.ObrTree.ObrInt.stmts: List[org.kiama.example.obr.ObrTree.Statement]
1578 ===> org.kiama.example.imperative.AST.Num.productPrefix: String
3322 ===> org.kiama.example.iswim.secd.RecordOps.Fields.canEqual(x$1: Any): Boolean
1039 ===> org.kiama.example.RISC.RISCISA.STW.productElement(x$1: Int): Any
346 ===> org.kiama.attribution.AttributionTests.Base.k7: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
10764 ===> org.kiama.example.transform.AST.BinExpR.op: String
9620 ===> org.kiama.example.picojava.AbstractSyntax.Program.productIterator: Iterator[Any]
7446 ===> org.kiama.example.obr.ObrTree.ObrInt.toString(): String
3865 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.TypeError): Boolean
2444 ===> org.kiama.example.iswim.compiler.Syntax.Import.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Import): Option[String]
1961 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productElement(x$1: Int): Any
5116 ===> org.kiama.example.lambda3.AST.SubstQuery.copy(n: org.kiama.rewriting.NominalAST.Name,e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.SubstQuery
9764 ===> org.kiama.example.picojava.AbstractSyntax.Dot.equals(x$1: Any): Boolean
4353 ===> org.kiama.example.json.JSONTree.JNull.canEqual(x$1: Any): Boolean
2948 ===> org.kiama.example.iswim.secd.ExceptionHandler.<init>(): org.kiama.example.iswim.secd.ExceptionHandler.type
7811 ===> org.kiama.example.obr.ObrTree.Catch.<init>(): org.kiama.example.obr.ObrTree.Catch.type
7878 ===> org.kiama.example.obr.ObrTree.FieldExp.productPrefix: String
2584 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.equals(x$1: Any): Boolean
6374 ===> org.kiama.example.oberon0.L2.source.ValCond.productElement(x$1: Int): Any
5064 ===> org.kiama.example.lambda3.AST.EvalQuery.canEqual(x$1: Any): Boolean
3702 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.equals(x$1: Any): Boolean
9303 ===> org.kiama.example.obr.SymbolTable.IntType.hashCode(): Int
6860 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productElement(x$1: Int): Any
3375 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.readResolve(): Object
7739 ===> org.kiama.example.obr.ObrTree.WhileStmt.<init>(): org.kiama.example.obr.ObrTree.WhileStmt.type
12004 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
316 ===> org.kiama.attribution.AttributionTests.QuadTree.p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)
7317 ===> org.kiama.example.oberon0.base.source.EmptyStmt.toString(): String
3436 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productElement(x$1: Int): Any
3148 ===> org.kiama.example.iswim.secd.IntComparisonOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
2463 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Lambda): Option[(org.kiama.example.iswim.compiler.Syntax.Variable, org.kiama.example.iswim.compiler.Syntax.Expr)]
9021 ===> org.kiama.example.obr.SPARCTree.IntDatum.equals(x$1: Any): Boolean
2377 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.body: org.kiama.example.iswim.compiler.Syntax.Expr
6099 ===> org.kiama.example.oberon0.L0.source.NegExp.unapply(x$0: org.kiama.example.oberon0.L0.source.NegExp): Option[org.kiama.example.oberon0.L0.source.Expression]
9485 ===> org.kiama.example.oneohonecompanies.Company.Company.productIterator: Iterator[Any]
12162 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
6501 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.readResolve(): Object
511 ===> org.kiama.example.RISC.RISCISA.MOVI.im: org.kiama.example.RISC.RISCISA.Imm
8763 ===> org.kiama.example.obr.SPARCTree.Bne.canEqual(x$1: Any): Boolean
10626 ===> org.kiama.example.til.AST.Add.toString(): String
11571 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
9247 ===> org.kiama.example.obr.SymbolTable.Constant.productArity: Int
10032 ===> org.kiama.example.prolog.PrologTree.Fact.<init>(): org.kiama.example.prolog.PrologTree.Fact.type
8962 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productIterator: Iterator[Any]
7909 ===> org.kiama.example.obr.ObrTree.GreaterExp.readResolve(): Object
11851 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7872 ===> org.kiama.example.obr.ObrTree.FieldExp.idn: org.kiama.example.obr.ObrTree.Identifier
7877 ===> org.kiama.example.obr.ObrTree.FieldExp.copy$default$2: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
12104 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2422 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.toString(): String
3739 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.apply(): org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue
112 ===> org.kiama.attribution.Attribution.childAttr[T <: org.kiama.attribution.Attributable, U](name: String)(f: T => (org.kiama.attribution.Attributable => U)): Attribution.this.CachedAttribute[T,U]
7002 ===> org.kiama.example.oberon0.base.Driver.challengeFlag: Boolean
6080 ===> org.kiama.example.oberon0.L0.source.UnaryExpression.exp: org.kiama.example.oberon0.L0.source.Expression
11286 ===> org.kiama.rewriting.NominalAST.Bind.canEqual(x$1: Any): Boolean
12576 ===> org.kiama.util.ParserUtilitiesTests.Tup6.readResolve(): Object
3745 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productArity: Int
3085 ===> org.kiama.example.iswim.secd.IOOps.Write.productElement(x$1: Int): Any
6025 ===> org.kiama.example.oberon0.L0.source.DivExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.DivExp
1761 ===> org.kiama.example.imperative.AST.Asgn.copy$default$2: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
6138 ===> org.kiama.example.oberon0.L0.source.IdnExp.<init>(idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L0.source.IdnExp
6039 ===> org.kiama.example.oberon0.L0.source.DivExp.unapply(x$0: org.kiama.example.oberon0.L0.source.DivExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
1242 ===> org.kiama.example.RISC.RISCISA.BLE.unapply(x$0: org.kiama.example.RISC.RISCISA.BLE): Option[Int]
6953 ===> org.kiama.example.oberon0.L4.source.FieldExp.copy$default$2: org.kiama.example.oberon0.L4.source.FieldIdn @scala.annotation.unchecked.uncheckedVariance
9349 ===> org.kiama.example.obr.SymbolTable.RecordType.copy$default$1: List[org.kiama.example.obr.ObrTree.Identifier] @scala.annotation.unchecked.uncheckedVariance
10359 ===> org.kiama.example.til.AST.Decl.productPrefix: String
8600 ===> org.kiama.example.obr.RISCTree.SubW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.SubW
1180 ===> org.kiama.example.RISC.RISCISA.BNE.label: Int
4463 ===> org.kiama.example.lambda.AST.Sub.n: org.kiama.example.lambda.AST.Exp
6233 ===> org.kiama.example.oberon0.L1.source.IfStatement.block: org.kiama.example.oberon0.base.source.Block
132 ===> org.kiama.attribution.UncachedAttribution.attr[T <: AnyRef, U](name: String)(f: T => U): UncachedAttribution.this.UncachedAttribute[T,U]
1795 ===> org.kiama.example.imperative.AST.Num(s1: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
618 ===> org.kiama.example.RISC.RISCISA.SUB.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
2919 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.toString(): String
7136 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.toString(): String
12082 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7742 ===> org.kiama.example.obr.ObrTree.WhileStmt.unapply(x$0: org.kiama.example.obr.ObrTree.WhileStmt): Option[(org.kiama.example.obr.ObrTree.Expression, List[org.kiama.example.obr.ObrTree.Statement])]
9648 ===> org.kiama.example.picojava.AbstractSyntax.Decl.Name: String
3342 ===> org.kiama.example.iswim.secd.RecordOps.GetField.toString(): String
11838 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2050 ===> org.kiama.example.iswim.compiler.Syntax.Plus.canEqual(x$1: Any): Boolean
2354 ===> org.kiama.example.iswim.compiler.Syntax.Binding.apply(v: org.kiama.example.iswim.compiler.Syntax.Variable,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Binding
6126 ===> org.kiama.example.oberon0.L0.source.IntExp.productElement(x$1: Int): Any
1611 ===> org.kiama.example.imperative.AST.Neg.e: org.kiama.example.imperative.AST.Exp
6769 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.copy(fields: List[SymbolTable.this.Field]): SymbolTable.this.RecordType
3881 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.readResolve(): Object
6544 ===> org.kiama.example.oberon0.L3.c.CAddrType.copy(basetype: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.L3.c.CAddrType
11611 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
3938 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.toString(): String
9204 ===> org.kiama.example.obr.SemanticAnalysis.entity: org.kiama.example.obr.ObrTree.EntityNode => org.kiama.example.obr.SymbolTable.Entity
3306 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productIterator: Iterator[Any]
2034 ===> org.kiama.example.iswim.compiler.Syntax.Negate.equals(x$1: Any): Boolean
8476 ===> org.kiama.example.obr.RISCTree.DivW.unapply(x$0: org.kiama.example.obr.RISCTree.DivW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
11273 ===> org.kiama.rewriting.NominalAST.Name.apply$default$2: Option[Int] @scala.annotation.unchecked.uncheckedVariance
1613 ===> org.kiama.example.imperative.AST.Neg.value: Double
5538 ===> org.kiama.example.oberon0.L0.c.CAddExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAddExp
5730 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productElement(x$1: Int): Any
340 ===> org.kiama.attribution.AttributionTests.Base.k1: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
95 ===> org.kiama.attribution.Attribution.attr[T <: AnyRef, U](optNameDef: Option[String])(f: T => U): Attribution.this.CachedAttribute[T,U]
3995 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.apply(s: SECDBase.this.Stack,e: SECDBase.this.Environment,c: org.kiama.example.iswim.secd.SECDBase.Code,d: SECDBase.this.Dump): SECDBase.this.ContValue
7960 ===> org.kiama.example.obr.ObrTree.IntExp.apply(num: Int): org.kiama.example.obr.ObrTree.IntExp
3802 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.PrimTypeValue
7651 ===> org.kiama.example.obr.ObrTree.ForStmt.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,min: org.kiama.example.obr.ObrTree.Expression,max: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.ForStmt
8021 ===> org.kiama.example.obr.ObrTree.NegExp.<init>(exp: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NegExp
10658 ===> org.kiama.example.til.AST.Eq.productPrefix: String
6592 ===> org.kiama.example.oberon0.L3.c.CStrExp.apply(s: String): org.kiama.example.oberon0.L3.c.CStrExp
10740 ===> org.kiama.example.transform.AST.Program.<init>(): org.kiama.example.transform.AST.Program.type
2302 ===> org.kiama.example.iswim.compiler.Syntax.Or.l: org.kiama.example.iswim.compiler.Syntax.Expr
556 ===> org.kiama.example.RISC.RISCISA.MVNI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MVNI
6818 ===> org.kiama.example.oberon0.L4.c.CRecordType.copy(fields: List[org.kiama.example.oberon0.base.c.CVarDecl]): org.kiama.example.oberon0.L4.c.CRecordType
5186 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
5394 ===> org.kiama.example.oberon0.L0.c.CAssignment.toString(): String
5602 ===> org.kiama.example.oberon0.L0.c.CDivExp.right: org.kiama.example.oberon0.base.c.CExpression
5050 ===> org.kiama.example.lambda3.AST.EquivQuery.<init>(): org.kiama.example.lambda3.AST.EquivQuery.type
8188 ===> org.kiama.example.obr.RISCTree.RISCProg.copy(insns: List[org.kiama.example.obr.RISCTree.Item]): org.kiama.example.obr.RISCTree.RISCProg
12135 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5459 ===> org.kiama.example.oberon0.L0.c.CLtExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CLtExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
10280 ===> org.kiama.example.repmin.Fork.copy$default$1: org.kiama.example.repmin.Tree @scala.annotation.unchecked.uncheckedVariance
9991 ===> org.kiama.example.prolog.Main.programtree_$eq(x$1: org.kiama.example.prolog.PrologTree.Program): Unit
11806 ===> org.kiama.rewriting.RewriterTests.Same.productElement(x$1: Int): Any
8009 ===> org.kiama.example.obr.ObrTree.ModExp.productElement(x$1: Int): Any
4592 ===> org.kiama.example.lambda2.AST.Opn.copy$default$3: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10794 ===> org.kiama.example.transform.AST.Factor.toString(): String
1585 ===> org.kiama.example.imperative.AST.Num.equals(x$1: Any): Boolean
7493 ===> org.kiama.example.obr.ObrTree.BoolVar.canEqual(x$1: Any): Boolean
11211 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
6611 ===> org.kiama.example.oberon0.L3.c.CAddrExp.apply(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L3.c.CAddrExp
9661 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productElement(x$1: Int): Any
6603 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productElement(x$1: Int): Any
8870 ===> org.kiama.example.obr.SPARCTree.Write.toString(): String
12069 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3192 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.hashCode(): Int
1461 ===> org.kiama.example.dataflow.DataflowAST.Empty.copy(): org.kiama.example.dataflow.DataflowAST.Empty
439 ===> org.kiama.attribution.DynamicAttributionTests.Unused.toString(): String
12519 ===> org.kiama.util.ParserUtilitiesTests.Tup4.equals(x$1: Any): Boolean
8276 ===> org.kiama.example.obr.RISCTree.Ret.<init>(): org.kiama.example.obr.RISCTree.Ret
3958 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.<init>(): SECDBase.this.EmptyValue
9257 ===> org.kiama.example.obr.SymbolTable.Constant.unapply(x$0: org.kiama.example.obr.SymbolTable.Constant): Option[(org.kiama.example.obr.SymbolTable.Type, Int)]
10900 ===> org.kiama.machine.Machine.ScalarUpdate.perform: Unit
12290 ===> org.kiama.util.JLineConsole.readLine(prompt: String): String
4331 ===> org.kiama.example.json.JSONTree.JTrue.readResolve(): Object
249 ===> org.kiama.attribution.AttributionTests.GenSeqTree.<init>(v: scala.collection.GenSeq[AttributionTests.this.Tree]): AttributionTests.this.GenSeqTree
3576 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.hashCode(): Int
2696 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.MkRef): Option[org.kiama.example.iswim.compiler.Syntax.Expr]
11389 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.readResolve(): Object
9689 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.VarDecl): Option[(org.kiama.example.picojava.AbstractSyntax.Access, String)]
5326 ===> org.kiama.example.oberon0.L0.c.CNamedType.ident: String
4372 ===> org.kiama.example.json.PrettyPrinter.<init>(): org.kiama.example.json.PrettyPrinter.type
3471 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.<init>(fss: List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec]): org.kiama.example.iswim.secd.SECDBase.MkClosures
10118 ===> org.kiama.example.prolog.PrologTree.Pred.productElement(x$1: Int): Any
11336 ===> org.kiama.rewriting.PositionalRewriterTests.t: org.kiama.rewriting.SupportPositionalRewriterTests.Two
5771 ===> org.kiama.example.oberon0.L0.source.TypeDecl.hashCode(): Int
11043 ===> org.kiama.output.PrettyPrinterBase.list$default$4[T]: PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
1998 ===> org.kiama.example.iswim.compiler.Syntax.Variable.hashCode(): Int
2762 ===> org.kiama.example.iswim.secd.BooleanOps.<init>(): org.kiama.example.iswim.secd.BooleanOps.type
6606 ===> org.kiama.example.oberon0.L3.c.CAddrExp.hashCode(): Int
374 ===> org.kiama.attribution.Decorators.Chain.toString(): String
8767 ===> org.kiama.example.obr.SPARCTree.Bne.<init>(): org.kiama.example.obr.SPARCTree.Bne.type
12023 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2316 ===> org.kiama.example.iswim.compiler.Syntax.Or.<init>(): org.kiama.example.iswim.compiler.Syntax.Or.type
8970 ===> org.kiama.example.obr.SPARCTree.CmpgtW.unapply(x$0: org.kiama.example.obr.SPARCTree.CmpgtW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
5137 ===> org.kiama.example.lambda3.AST.SwapQuery.copy(tr: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name),e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.SwapQuery
7301 ===> org.kiama.example.oberon0.base.source.Block.hashCode(): Int
12120 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9686 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.<init>(): org.kiama.example.picojava.AbstractSyntax.VarDecl.type
6341 ===> org.kiama.example.oberon0.L2.source.CaseStatement.toString(): String
9573 ===> org.kiama.example.oneohonecompanies.Cut.cut(c: org.kiama.example.oneohonecompanies.Company.Company): org.kiama.example.oneohonecompanies.Company.Company
10009 ===> org.kiama.example.prolog.PrologTree.Program.toString(): String
4376 ===> org.kiama.example.json.Rewriter.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Double](x$1: A1,default: A1 => B1): B1
12284 ===> org.kiama.util.TestCompiler.filetests$default$7: List[Array[String]] @scala.annotation.unchecked.uncheckedVariance
3664 ===> org.kiama.example.iswim.secd.SECDBase.PushType.copy$default$1: org.kiama.example.iswim.secd.SECDBase.TypeValue @scala.annotation.unchecked.uncheckedVariance
2356 ===> org.kiama.example.iswim.compiler.Syntax.Binding.readResolve(): Object
7260 ===> org.kiama.example.oberon0.base.c.CPrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): CPrettyPrinter.this.Doc
12430 ===> org.kiama.util.ParserUtilities.constToTupleFunction4[A, B, C, D, R](r: (A, B, C, D) => R): ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D] => R
12494 ===> org.kiama.util.ParserUtilitiesTests.Tup3.hashCode(): Int
10052 ===> org.kiama.example.prolog.PrologTree.Rule.toString(): String
9765 ===> org.kiama.example.picojava.AbstractSyntax.Dot.<init>(): org.kiama.example.picojava.AbstractSyntax.Dot.type
7939 ===> org.kiama.example.obr.ObrTree.IndexExp.toString(): String
6135 ===> org.kiama.example.oberon0.L0.source.IntExp.unapply(x$0: org.kiama.example.oberon0.L0.source.IntExp): Option[Int]
1864 ===> org.kiama.example.imperative.ASTNonCase.Sub.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
8579 ===> org.kiama.example.obr.RISCTree.RemW.<init>(): org.kiama.example.obr.RISCTree.RemW.type
5400 ===> org.kiama.example.oberon0.L0.c.CBinaryExpression.fixity: org.kiama.output.Infix
8724 ===> org.kiama.example.obr.SPARCTree.SPARC.canEqual(x$1: Any): Boolean
11036 ===> org.kiama.output.PrettyPrinterBase.char(c: Char): PrettyPrinterBase.this.Doc
3782 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.ContTypeValue.type
6016 ===> org.kiama.example.oberon0.L0.source.MulExp.equals(x$1: Any): Boolean
2105 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productElement(x$1: Int): Any
2586 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.toString(): String
8756 ===> org.kiama.example.obr.SPARCTree.Bne.copy(cond: org.kiama.example.obr.SPARCTree.Datum,dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Bne
5599 ===> org.kiama.example.oberon0.L0.c.CMulExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CMulExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
12110 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
791 ===> org.kiama.example.RISC.RISCISA.CMP.productElement(x$1: Int): Any
1654 ===> org.kiama.example.imperative.AST.Add.<init>(): org.kiama.example.imperative.AST.Add.type
7532 ===> org.kiama.example.obr.ObrTree.RecordVar.hashCode(): Int
6289 ===> org.kiama.example.oberon0.L2.Lifter.$init$(): Unit
12602 ===> org.kiama.util.REPLBase.setup(args: Array[String]): Boolean
6136 ===> org.kiama.example.oberon0.L0.source.IntExp.readResolve(): Object
12025 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1561 ===> org.kiama.example.dataflow.Optimise.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5083 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.hashCode(): Int
6344 ===> org.kiama.example.oberon0.L2.source.CaseStatement.toString(): String
7448 ===> org.kiama.example.obr.ObrTree.ObrInt.unapply(x$0: org.kiama.example.obr.ObrTree.ObrInt): Option[(org.kiama.example.obr.ObrTree.Identifier, List[org.kiama.example.obr.ObrTree.Declaration], List[org.kiama.example.obr.ObrTree.Statement], org.kiama.example.obr.ObrTree.Identifier)]
1750 ===> org.kiama.example.imperative.AST.Seqn.<init>(): org.kiama.example.imperative.AST.Seqn.type
10597 ===> org.kiama.example.til.AST.Div.<init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Div
2791 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.unapply(x$0: org.kiama.example.iswim.secd.BooleanOps.PushFalse): Boolean
6577 ===> org.kiama.example.oberon0.L3.c.CCall.readResolve(): Object
7662 ===> org.kiama.example.obr.ObrTree.ForStmt.hashCode(): Int
9177 ===> org.kiama.example.obr.SPARCTree.Label.productPrefix: String
7690 ===> org.kiama.example.obr.ObrTree.IfStmt.readResolve(): Object
8933 ===> org.kiama.example.obr.SPARCTree.CmpeqW.readResolve(): Object
6325 ===> org.kiama.example.oberon0.L2.source.ForStatement.unapply(x$0: org.kiama.example.oberon0.L2.source.ForStatement): Option[(org.kiama.example.oberon0.L0.source.IdnExp, org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression, Option[org.kiama.example.oberon0.L0.source.Expression], org.kiama.example.oberon0.base.source.Block)]
7319 ===> org.kiama.example.oberon0.base.source.EmptyStmt.<init>(): org.kiama.example.oberon0.base.source.EmptyStmt.type
1450 ===> org.kiama.example.dataflow.DataflowAST.Return.productIterator: Iterator[Any]
5274 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.ident: String
2832 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productElement(x$1: Int): Any
9341 ===> org.kiama.example.obr.SymbolTable.ArrayType.apply(size: Int): org.kiama.example.obr.SymbolTable.ArrayType
7858 ===> org.kiama.example.obr.ObrTree.EqualExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
9630 ===> org.kiama.example.picojava.AbstractSyntax.Block.BlockStmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]
5214 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.<init>(): SymbolTable.this.Module.type
9828 ===> org.kiama.example.picojava.Main.process(program: org.kiama.example.picojava.AbstractSyntax.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
3308 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.hashCode(): Int
8282 ===> org.kiama.example.obr.RISCTree.Ret.canEqual(x$1: Any): Boolean
6778 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.<init>(): SymbolTable.this.RecordType.type
1003 ===> org.kiama.example.RISC.RISCISA.LDB.toString(): String
11582 ===> org.kiama.rewriting.Rewriter.$anon.childSeq[CC[U] <: Seq[U]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
2319 ===> org.kiama.example.iswim.compiler.Syntax.Or.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Or): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
9144 ===> org.kiama.example.obr.SPARCTree.Local.canEqual(x$1: Any): Boolean
722 ===> org.kiama.example.RISC.RISCISA.DIVI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.DIVI
787 ===> org.kiama.example.RISC.RISCISA.CMP.toString(): String
3996 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.unapply(x$0: SECDBase.this.ContValue): Option[(SECDBase.this.Stack, SECDBase.this.Environment, org.kiama.example.iswim.secd.SECDBase.Code, SECDBase.this.Dump)]
1883 ===> org.kiama.example.imperative.Generator.genDouble: org.scalacheck.Gen[org.kiama.example.imperative.AST.Num]
3023 ===> org.kiama.example.iswim.secd.HeapOps.Get.toString(): String
1305 ===> org.kiama.example.RISC.RISCISA.RET.toString(): String
7125 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.copy$default$2: List[org.kiama.example.oberon0.base.c.CDeclaration] @scala.annotation.unchecked.uncheckedVariance
9585 ===> org.kiama.example.oneohonecompanies.Precedence.<init>(): org.kiama.example.oneohonecompanies.Precedence.type
7803 ===> org.kiama.example.obr.ObrTree.Catch.productPrefix: String
10584 ===> org.kiama.example.til.AST.Mul.productElement(x$1: Int): Any
2471 ===> org.kiama.example.iswim.compiler.Syntax.Return.productElement(x$1: Int): Any
10181 ===> org.kiama.example.prolog.SymbolTable.Variable.copy(tipe: org.kiama.example.prolog.SymbolTable.Type): org.kiama.example.prolog.SymbolTable.Variable
6883 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productIterator: Iterator[Any]
3575 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.canEqual(x$1: Any): Boolean
11045 ===> org.kiama.output.PrettyPrinterBase.plist(l: List[PrettyPrinterBase.this.PrettyPrintable],prefix: String,elemToDoc: PrettyPrinterBase.this.PrettyPrintable => PrettyPrinterBase.this.Doc,sep: PrettyPrinterBase.this.Doc,sepfn: (Seq[PrettyPrinterBase.this.Doc], PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
2644 ===> org.kiama.example.iswim.compiler.Syntax.Match.readResolve(): Object
5201 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.ident: String
672 ===> org.kiama.example.RISC.RISCISA.MUL.<init>(): org.kiama.example.RISC.RISCISA.MUL.type
49 ===> org.kiama.attribution.AttributionBase.ParamAttributeKey.<init>(arg: Any,node: AnyRef): AttributionBase.this.ParamAttributeKey
2689 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.canEqual(x$1: Any): Boolean
1380 ===> org.kiama.example.dataflow.DataflowAST.Assign.equals(x$1: Any): Boolean
4874 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
6485 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.copy(mode: org.kiama.example.oberon0.L3.source.Mode,ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.ParamInfo
7119 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.decl: org.kiama.example.oberon0.base.c.CVarDecl
10319 ===> org.kiama.example.repmin.RepminDec.$init$(): Unit
6232 ===> org.kiama.example.oberon0.L1.source.IfStatement.cond: org.kiama.example.oberon0.L0.source.Expression
2231 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.r: org.kiama.example.iswim.compiler.Syntax.Expr
4831 ===> org.kiama.example.lambda2.LambdaTests.assertEval(mech: String,term: String,result: org.kiama.example.lambda2.AST.Exp): Unit
3235 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productIterator: Iterator[Any]
9980 ===> org.kiama.example.prolog.Interpreter.rename[T <: org.kiama.example.prolog.PrologTree.SourceNode](t: T): T
10660 ===> org.kiama.example.til.AST.Eq.productElement(x$1: Int): Any
2006 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.i: Int
1163 ===> org.kiama.example.RISC.RISCISA.Branch.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
288 ===> org.kiama.attribution.AttributionTests.PairTree.productElement(x$1: Int): Any
3009 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.apply(): org.kiama.example.iswim.secd.HeapOps.Alloc
6072 ===> org.kiama.example.oberon0.L0.source.AndExp.toString(): String
7238 ===> org.kiama.example.oberon0.base.c.CReturn.toString(): String
10324 ===> org.kiama.example.repmin.RepminTestsBase.$init$(): Unit
8753 ===> org.kiama.example.obr.SPARCTree.Bne.cond: org.kiama.example.obr.SPARCTree.Datum
3210 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.<init>(): org.kiama.example.iswim.secd.IntegerOps.Mult.type
2911 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.<init>(): org.kiama.example.iswim.secd.ConversionOps.ToBoolean
9097 ===> org.kiama.example.obr.SPARCTree.RemW.l: org.kiama.example.obr.SPARCTree.Datum
852 ===> org.kiama.example.RISC.RISCISA.AND.canEqual(x$1: Any): Boolean
717 ===> org.kiama.example.RISC.RISCISA.DIV.unapply(x$0: org.kiama.example.RISC.RISCISA.DIV): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
9972 ===> org.kiama.example.prolog.Interpreter.MatchGoal.toString(): String
7409 ===> org.kiama.example.obr.Driver.checkFlag(arg: String): Boolean
5074 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.<init>(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.FreeNamesQuery
3559 ===> org.kiama.example.iswim.secd.SECDBase.Exit.hashCode(): Int
10303 ===> org.kiama.example.repmin.Leaf.canEqual(x$1: Any): Boolean
7157 ===> org.kiama.example.oberon0.base.c.CBlock.unapply(x$0: org.kiama.example.oberon0.base.c.CBlock): Option[(List[org.kiama.example.oberon0.base.c.CDeclaration], List[org.kiama.example.oberon0.base.c.CStatement])]
6422 ===> org.kiama.example.oberon0.L3.NameAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
568 ===> org.kiama.example.RISC.RISCISA.MVNI.toString(): String
1101 ===> org.kiama.example.RISC.RISCISA.RD.hashCode(): Int
7132 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.hashCode(): Int
7632 ===> org.kiama.example.obr.ObrTree.ExitStmt.<init>(): org.kiama.example.obr.ObrTree.ExitStmt
11025 ===> org.kiama.output.PrettyPrinterBase.anyToPrettyPrintable(a: Any): PrettyPrinterBase.this.PrettyPrintable
5517 ===> org.kiama.example.oberon0.L0.c.CGeExp.toString(): String
11605 ===> org.kiama.rewriting.Rewriter.congruence(ss: Rewriter.this.Strategy*): Rewriter.this.Strategy
3242 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.apply(): org.kiama.example.iswim.secd.IntegerOps.Rem
9215 ===> org.kiama.example.obr.SymbolTable.Entity.isassignable: Boolean
3494 ===> org.kiama.example.iswim.secd.SECDBase.App.canEqual(x$1: Any): Boolean
12190 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2318 ===> org.kiama.example.iswim.compiler.Syntax.Or.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Or
575 ===> org.kiama.example.RISC.RISCISA.ADD.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5851 ===> org.kiama.example.oberon0.L0.source.NeExp.productElement(x$1: Int): Any
9235 ===> org.kiama.example.obr.SymbolTable.Variable.apply(tipe: org.kiama.example.obr.SymbolTable.Type): org.kiama.example.obr.SymbolTable.Variable
4858 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
335 ===> org.kiama.attribution.AttributionTests.u: AttributionTests.this.Pair
188 ===> org.kiama.attribution.AttributionTests.Unused.canEqual(x$1: Any): Boolean
12461 ===> org.kiama.util.ParserUtilitiesTests.Node.readResolve(): Object
10363 ===> org.kiama.example.til.AST.Decl.canEqual(x$1: Any): Boolean
1769 ===> org.kiama.example.imperative.AST.Asgn.equals(x$1: Any): Boolean
438 ===> org.kiama.attribution.DynamicAttributionTests.Unused.<init>(): DynamicAttributionTests.this.Unused.type
2160 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productPrefix: String
5862 ===> org.kiama.example.oberon0.L0.source.LtExp.left: org.kiama.example.oberon0.L0.source.Expression
11145 ===> org.kiama.output.PrettyPrinterTests.Val.toString(): String
12559 ===> org.kiama.util.ParserUtilitiesTests.Tup6.copy$default$2: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
3564 ===> org.kiama.example.iswim.secd.SECDBase.Exit.apply(): org.kiama.example.iswim.secd.SECDBase.Exit
7962 ===> org.kiama.example.obr.ObrTree.IntExp.readResolve(): Object
3051 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.equals(x$1: Any): Boolean
9150 ===> org.kiama.example.obr.SPARCTree.Local.apply(offset: Int): org.kiama.example.obr.SPARCTree.Local
6082 ===> org.kiama.example.oberon0.L0.source.NegExp.exp: org.kiama.example.oberon0.L0.source.Expression
9012 ===> org.kiama.example.obr.SPARCTree.IntDatum.copy(num: Int): org.kiama.example.obr.SPARCTree.IntDatum
8496 ===> org.kiama.example.obr.RISCTree.LdW.<init>(mem: org.kiama.example.obr.RISCTree.Address): org.kiama.example.obr.RISCTree.LdW
1024 ===> org.kiama.example.RISC.RISCISA.POP.toString(): String
4811 ===> org.kiama.example.lambda2.Lambda.<init>(): org.kiama.example.lambda2.Lambda.type
11765 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7463 ===> org.kiama.example.obr.ObrTree.IntVar.<init>(): org.kiama.example.obr.ObrTree.IntVar.type
12428 ===> org.kiama.util.ParserUtilities.constToTupleFunction2[A, B, R](r: (A, B) => R): ParserUtilities.this.~[A,B] => R
4326 ===> org.kiama.example.json.JSONTree.JTrue.equals(x$1: Any): Boolean
12137 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7853 ===> org.kiama.example.obr.ObrTree.EqualExp.left: org.kiama.example.obr.ObrTree.Expression
9802 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl): Option[String]
5389 ===> org.kiama.example.oberon0.L0.c.CAssignment.canEqual(x$1: Any): Boolean
876 ===> org.kiama.example.RISC.RISCISA.ANDI.<init>(): org.kiama.example.RISC.RISCISA.ANDI.type
7173 ===> org.kiama.example.oberon0.base.c.CIntType.unapply(x$0: org.kiama.example.oberon0.base.c.CIntType): Boolean
4541 ===> org.kiama.example.lambda2.AST.Var.toString(): String
6554 ===> org.kiama.example.oberon0.L3.c.CAddrType.<init>(): org.kiama.example.oberon0.L3.c.CAddrType.type
7218 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.toString(): String
1798 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6149 ===> org.kiama.example.oberon0.L0.source.IdnExp.<init>(): org.kiama.example.oberon0.L0.source.IdnExp.type
7140 ===> org.kiama.example.oberon0.base.c.CBlock.decls: List[org.kiama.example.oberon0.base.c.CDeclaration]
11086 ===> org.kiama.output.PrettyPrinterBase.asterisk: PrettyPrinterBase.this.Doc
8742 ===> org.kiama.example.obr.SPARCTree.Beq.productElement(x$1: Int): Any
7921 ===> org.kiama.example.obr.ObrTree.IdnExp.equals(x$1: Any): Boolean
11584 ===> org.kiama.rewriting.Rewriter.all(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
9256 ===> org.kiama.example.obr.SymbolTable.Constant.apply(tipe: org.kiama.example.obr.SymbolTable.Type,value: Int): org.kiama.example.obr.SymbolTable.Constant
1027 ===> org.kiama.example.RISC.RISCISA.POP.readResolve(): Object
10577 ===> org.kiama.example.til.AST.Mul.r: org.kiama.example.til.AST.Exp
10731 ===> org.kiama.example.transform.AST.Program.copy$default$3: org.kiama.example.transform.AST.ExpR @scala.annotation.unchecked.uncheckedVariance
6690 ===> org.kiama.example.oberon0.L3.source.ValMode.readResolve(): Object
10109 ===> org.kiama.example.prolog.PrologTree.Pred.s: String
11971 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5724 ===> org.kiama.example.oberon0.L0.source.ConstDecl.<init>(idndef: org.kiama.example.oberon0.base.source.IdnDef,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.ConstDecl
2095 ===> org.kiama.example.iswim.compiler.Syntax.Times.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Times): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
7126 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.copy$default$3: org.kiama.example.oberon0.base.c.CBlock @scala.annotation.unchecked.uncheckedVariance
5086 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.<init>(): org.kiama.example.lambda3.AST.FreeNamesQuery.type
11234 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.hashCode(): Int
12548 ===> org.kiama.util.ParserUtilitiesTests.Tup5.unapply(x$0: ParserUtilitiesTests.this.Tup5): Option[(ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node)]
1292 ===> org.kiama.example.RISC.RISCISA.RET.c: org.kiama.example.RISC.RISCISA.RegNo
6391 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productPrefix: String
2813 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.<init>(): org.kiama.example.iswim.secd.BooleanOps.Equals
4054 ===> org.kiama.example.iswim.secd.SECDBase.primTable: Map[org.kiama.example.iswim.secd.SECDBase.Name,org.kiama.example.iswim.secd.SECDBase.Value]
6306 ===> org.kiama.example.oberon0.L2.source.ForStatement.block: org.kiama.example.oberon0.base.source.Block
3697 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productElement(x$1: Int): Any
5197 ===> org.kiama.example.oberon0.L0.Parser.statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
4107 ===> org.kiama.example.iswim.secd.StackOps.Swap.n: Int
9448 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.<init>(s: String): SyntaxAnalysis.this.Pos
2522 ===> org.kiama.example.iswim.compiler.Syntax.While.ctrl: org.kiama.example.iswim.compiler.Syntax.Expr
6434 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment] with Serializable
9874 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.<init>(): org.kiama.example.picojava.tests.DotNameResolutionTests
10757 ===> org.kiama.example.transform.AST.VarDecl.<init>(): org.kiama.example.transform.AST.VarDecl.type
1365 ===> org.kiama.example.dataflow.DataflowAST.<init>(): org.kiama.example.dataflow.DataflowAST.type
3269 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.equals(x$1: Any): Boolean
7650 ===> org.kiama.example.obr.ObrTree.ForStmt.body: List[org.kiama.example.obr.ObrTree.Statement]
7733 ===> org.kiama.example.obr.ObrTree.WhileStmt.productElement(x$1: Int): Any
8707 ===> org.kiama.example.obr.SPARCTransformation.exitlab: org.kiama.example.obr.SPARCTree.Label
9494 ===> org.kiama.example.oneohonecompanies.Company.Company.readResolve(): Object
7064 ===> org.kiama.example.oberon0.base.c.CProgram.decls: List[org.kiama.example.oberon0.base.c.CDeclaration]
5627 ===> org.kiama.example.oberon0.L0.c.CModExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
8414 ===> org.kiama.example.obr.RISCTree.CmpneW.toString(): String
4685 ===> org.kiama.example.lambda2.AST.FunType.<init>(t1: org.kiama.example.lambda2.AST.Type,t2: org.kiama.example.lambda2.AST.Type): org.kiama.example.lambda2.AST.FunType
860 ===> org.kiama.example.RISC.RISCISA.ANDI.a: org.kiama.example.RISC.RISCISA.RegNo
12503 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n2: ParserUtilitiesTests.this.Node
5877 ===> org.kiama.example.oberon0.L0.source.LtExp.toString(): String
2193 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.r: org.kiama.example.iswim.compiler.Syntax.Expr
10959 ===> org.kiama.output.NonAssoc.hashCode(): Int
705 ===> org.kiama.example.RISC.RISCISA.DIV.toString(): String
6406 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.forToDoc(s: org.kiama.example.oberon0.L2.source.ForStatement): PrettyPrinter.this.Doc
11775 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3601 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productPrefix: String
7462 ===> org.kiama.example.obr.ObrTree.IntVar.equals(x$1: Any): Boolean
9590 ===> org.kiama.example.oneohonecompanies.Precedence.precedence(c: org.kiama.example.oneohonecompanies.Company.Company): Boolean
3994 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.toString(): String
5875 ===> org.kiama.example.oberon0.L0.source.LtExp.equals(x$1: Any): Boolean
4249 ===> org.kiama.example.json.JSONTree.JName.s: String
6661 ===> org.kiama.example.oberon0.L3.source.VarMode.<init>(): org.kiama.example.oberon0.L3.source.VarMode
7443 ===> org.kiama.example.obr.ObrTree.ObrInt.toString(): String
3437 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productIterator: Iterator[Any]
7250 ===> org.kiama.example.oberon0.base.c.CIntExp.productIterator: Iterator[Any]
8893 ===> org.kiama.example.obr.SPARCTree.AddW.readResolve(): Object
10778 ===> org.kiama.example.transform.AST.BinExpR.equals(x$1: Any): Boolean
8743 ===> org.kiama.example.obr.SPARCTree.Beq.productIterator: Iterator[Any]
1569 ===> org.kiama.example.imperative.AST.Exp.divsbyzero: Int
1673 ===> org.kiama.example.imperative.AST.Sub.equals(x$1: Any): Boolean
7818 ===> org.kiama.example.obr.ObrTree.AndExp.right: org.kiama.example.obr.ObrTree.Expression
6464 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.ident: String
10024 ===> org.kiama.example.prolog.PrologTree.Fact.productPrefix: String
10586 ===> org.kiama.example.til.AST.Mul.canEqual(x$1: Any): Boolean
2032 ===> org.kiama.example.iswim.compiler.Syntax.Negate.hashCode(): Int
11090 ===> org.kiama.output.PrettyPrinterBase.plus: PrettyPrinterBase.this.Doc
3456 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.copy$default$3: org.kiama.example.iswim.secd.SECDBase.CodeSegment @scala.annotation.unchecked.uncheckedVariance
11196 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.toString(): String
631 ===> org.kiama.example.RISC.RISCISA.SUB.toString(): String
9861 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.result_$eq(x$1: Int): Unit
10776 ===> org.kiama.example.transform.AST.BinExpR.hashCode(): Int
10828 ===> org.kiama.example.transform.AST.Num.productPrefix: String
3196 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.toString(): String
10520 ===> org.kiama.example.til.AST.Id.<init>(): org.kiama.example.til.AST.Id.type
4396 ===> org.kiama.example.lambda.AST.Num.productElement(x$1: Int): Any
7360 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.$init$(): Unit
9503 ===> org.kiama.example.oneohonecompanies.Company.Dept.productPrefix: String
9049 ===> org.kiama.example.obr.SPARCTree.MulW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
8991 ===> org.kiama.example.obr.SPARCTree.DivW.l: org.kiama.example.obr.SPARCTree.Datum
9111 ===> org.kiama.example.obr.SPARCTree.RemW.<init>(): org.kiama.example.obr.SPARCTree.RemW.type
10531 ===> org.kiama.example.til.AST.Var.productElement(x$1: Int): Any
7394 ===> org.kiama.example.oberon0.drivers.A4Phases.langlevel: Int
9757 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productPrefix: String
8063 ===> org.kiama.example.obr.ObrTree.NotExp.productIterator: Iterator[Any]
4005 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.toString(): String
925 ===> org.kiama.example.RISC.RISCISA.XOR.c: org.kiama.example.RISC.RISCISA.RegNo
10002 ===> org.kiama.example.prolog.PrologTree.Program.copy$default$1: List[org.kiama.example.prolog.PrologTree.Clause] @scala.annotation.unchecked.uncheckedVariance
7226 ===> org.kiama.example.oberon0.base.c.CReturn.<init>(e: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.base.c.CReturn
8595 ===> org.kiama.example.obr.RISCTree.SubW.hashCode(): Int
3539 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productPrefix: String
8151 ===> org.kiama.example.obr.RISCEncoder.emit(instr: org.kiama.example.RISC.RISCISA.Assembler): Unit
621 ===> org.kiama.example.RISC.RISCISA.SUB.toString(): String
629 ===> org.kiama.example.RISC.RISCISA.SUB.equals(x$1: Any): Boolean
10447 ===> org.kiama.example.til.AST.While.apply(e: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.While
3651 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productIterator: Iterator[Any]
10124 ===> org.kiama.example.prolog.PrologTree.Pred.toString(): String
11069 ===> org.kiama.output.PrettyPrinterBase.value(v: Any): PrettyPrinterBase.this.Doc
653 ===> org.kiama.example.RISC.RISCISA.SUBI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.SUBI
7589 ===> org.kiama.example.obr.ObrTree.IntConst.equals(x$1: Any): Boolean
9618 ===> org.kiama.example.picojava.AbstractSyntax.Program.productArity: Int
8104 ===> org.kiama.example.obr.ObrTree.PlusExp.toString(): String
9568 ===> org.kiama.example.oneohonecompanies.Company.DU.toString(): String
2657 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.<init>(): org.kiama.example.iswim.compiler.Syntax.CallCC.type
4133 ===> org.kiama.example.iswim.secd.StringOps.PushString.<init>(s: String): org.kiama.example.iswim.secd.StringOps.PushString
6411 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.singleCaseToDoc(kase: org.kiama.example.oberon0.L2.source.Case): PrettyPrinter.this.Doc
5906 ===> org.kiama.example.oberon0.L0.source.GtExp.productPrefix: String
11499 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productArity: Int
7069 ===> org.kiama.example.oberon0.base.c.CProgram.productPrefix: String
8682 ===> org.kiama.example.obr.SPARCEncoder.memreg: String("%l0")
2763 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.<init>(): org.kiama.example.iswim.secd.BooleanOps.PushTrue
1653 ===> org.kiama.example.imperative.AST.Add.equals(x$1: Any): Boolean
2380 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Binding] @scala.annotation.unchecked.uncheckedVariance
7349 ===> org.kiama.example.oberon0.base.source.IdnUse.productElement(x$1: Int): Any
4156 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.hashCode(): Int
10433 ===> org.kiama.example.til.AST.While.<init>(e: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.While
4242 ===> org.kiama.example.json.JSONTree.JObject.toString(): String
10013 ===> org.kiama.example.prolog.PrologTree.Program.apply(cs: List[org.kiama.example.prolog.PrologTree.Clause]): org.kiama.example.prolog.PrologTree.Program
10081 ===> org.kiama.example.prolog.PrologTree.Integer.productElement(x$1: Int): Any
515 ===> org.kiama.example.RISC.RISCISA.MOVI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
10956 ===> org.kiama.output.NonAssoc.productElement(x$1: Int): Any
6310 ===> org.kiama.example.oberon0.L2.source.ForStatement.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
8337 ===> org.kiama.example.obr.RISCTree.Read.equals(x$1: Any): Boolean
4148 ===> org.kiama.example.iswim.secd.StringOps.PushString.readResolve(): Object
3847 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.<init>(): org.kiama.example.iswim.secd.SECDBase.StackUnderflow.type
951 ===> org.kiama.example.RISC.RISCISA.XORI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
6521 ===> org.kiama.example.oberon0.L3.TypeAnalyser.$init$(): Unit
11461 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.copy$default$1: org.kiama.rewriting.SupportPositionedRewriterTests.Node @scala.annotation.unchecked.uncheckedVariance
158 ===> org.kiama.attribution.AttributionTests.Pair.<init>(): AttributionTests.this.Pair.type
536 ===> org.kiama.example.RISC.RISCISA.MVN.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MVN
1373 ===> org.kiama.example.dataflow.DataflowAST.Assign.productPrefix: String
11996 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4431 ===> org.kiama.example.lambda.AST.Lam.productArity: Int
7061 ===> org.kiama.example.oberon0.base.Translator.translate(s: org.kiama.example.oberon0.base.source.Statement): org.kiama.example.oberon0.base.c.CStatement
3276 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.n: Int
8530 ===> org.kiama.example.obr.RISCTree.MulW.readResolve(): Object
11615 ===> org.kiama.rewriting.Rewriter.collectl[T](f: org.kiama.==>[Rewriter.this.Term,T]): Rewriter.this.Term => List[T]
884 ===> org.kiama.example.RISC.RISCISA.OR.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
7345 ===> org.kiama.example.oberon0.base.source.IdnUse.copy(ident: String): org.kiama.example.oberon0.base.source.IdnUse
5467 ===> org.kiama.example.oberon0.L0.c.CLeExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
5267 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.hashCode(): Int
4438 ===> org.kiama.example.lambda.AST.Lam.toString(): String
3002 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productIterator: Iterator[Any]
10370 ===> org.kiama.example.til.AST.Decl.unapply(x$0: org.kiama.example.til.AST.Decl): Option[org.kiama.example.til.AST.Id]
5145 ===> org.kiama.example.lambda3.AST.SwapQuery.hashCode(): Int
10666 ===> org.kiama.example.til.AST.Eq.<init>(): org.kiama.example.til.AST.Eq.type
1061 ===> org.kiama.example.RISC.RISCISA.STB.productIterator: Iterator[Any]
11105 ===> org.kiama.output.PrettyPrinterBase.rangle: PrettyPrinterBase.this.Doc
11886 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11754 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7476 ===> org.kiama.example.obr.ObrTree.IntParam.canEqual(x$1: Any): Boolean
8680 ===> org.kiama.example.obr.SPARCEncoder.<init>(emitter: org.kiama.util.Emitter): org.kiama.example.obr.SPARCEncoder
944 ===> org.kiama.example.RISC.RISCISA.XORI.a: org.kiama.example.RISC.RISCISA.RegNo
463 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[DynamicAttributionTests.this.Tree,Int] with Serializable
2079 ===> org.kiama.example.iswim.compiler.Syntax.Times.r: org.kiama.example.iswim.compiler.Syntax.Expr
6298 ===> org.kiama.example.oberon0.L2.Parser.keywordStrings: List[String]
2750 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.readResolve(): Object
948 ===> org.kiama.example.RISC.RISCISA.XORI.toString(): String
1773 ===> org.kiama.example.imperative.AST.Asgn.unapply(x$0: org.kiama.example.imperative.AST.Asgn): Option[(org.kiama.example.imperative.AST.Var, org.kiama.example.imperative.AST.Exp)]
12533 ===> org.kiama.util.ParserUtilitiesTests.Tup5.copy$default$2: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
1660 ===> org.kiama.example.imperative.AST.Sub.r: org.kiama.example.imperative.AST.Exp
3169 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.readResolve(): Object
1830 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1435 ===> org.kiama.example.dataflow.DataflowAST.Block.hashCode(): Int
9116 ===> org.kiama.example.obr.SPARCTree.SubW.l: org.kiama.example.obr.SPARCTree.Datum
10951 ===> org.kiama.output.RightAssoc.toString(): String
10608 ===> org.kiama.example.til.AST.Div.equals(x$1: Any): Boolean
1189 ===> org.kiama.example.RISC.RISCISA.BNE.hashCode(): Int
6736 ===> org.kiama.example.oberon0.L4.CCodeGenerator.translate(e: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.base.c.CExpression
7833 ===> org.kiama.example.obr.ObrTree.AndExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AndExp
4739 ===> org.kiama.example.lambda2.AST.SubOp.productArity: Int
3918 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productIterator: Iterator[Any]
6643 ===> org.kiama.example.oberon0.L3.source.ProcDecl.copy$default$1: org.kiama.example.oberon0.base.source.IdnDef @scala.annotation.unchecked.uncheckedVariance
7559 ===> org.kiama.example.obr.ObrTree.EnumConst.idn: org.kiama.example.obr.ObrTree.Identifier
3530 ===> org.kiama.example.iswim.secd.SECDBase.Enter.<init>(): org.kiama.example.iswim.secd.SECDBase.Enter.type
8651 ===> org.kiama.example.obr.RISCTree.Indexed.hashCode(): Int
4063 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toString(): String
2833 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productIterator: Iterator[Any]
11914 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9742 ===> org.kiama.example.picojava.AbstractSyntax.Use.canEqual(x$1: Any): Boolean
2796 ===> org.kiama.example.iswim.secd.BooleanOps.Test.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
6693 ===> org.kiama.example.oberon0.L3.source.FPSection.tipe: org.kiama.example.oberon0.L0.source.TypeDef
8902 ===> org.kiama.example.obr.SPARCTree.Cond.productPrefix: String
7348 ===> org.kiama.example.oberon0.base.source.IdnUse.productArity: Int
5860 ===> org.kiama.example.oberon0.L0.source.NeExp.unapply(x$0: org.kiama.example.oberon0.L0.source.NeExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
7277 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productArity: Int
10314 ===> org.kiama.example.repmin.RepminBase.locmin: org.kiama.example.repmin.Tree => Int
8259 ===> org.kiama.example.obr.RISCTree.LabelDef.lab: org.kiama.example.obr.RISCTree.Label
2558 ===> org.kiama.example.iswim.compiler.Syntax.Empty.<init>(): org.kiama.example.iswim.compiler.Syntax.Empty
6708 ===> org.kiama.example.oberon0.L3.source.FPSection.toString(): String
3301 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.copy(n: Int): org.kiama.example.iswim.secd.RecordOps.MkRecord
7614 ===> org.kiama.example.obr.ObrTree.AssignStmt.right: org.kiama.example.obr.ObrTree.Expression
4993 ===> org.kiama.example.lambda3.AST.Var.toString(): String
8683 ===> org.kiama.example.obr.SPARCEncoder.availregs: Int
11124 ===> org.kiama.output.PrettyPrinter.nest(d: PrettyPrinter.this.Doc,j: PrettyPrinter.this.Indent): PrettyPrinter.this.Doc
1973 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.ExprStmt
2770 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.hashCode(): Int
11056 ===> org.kiama.output.PrettyPrinterBase.vsep(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
2567 ===> org.kiama.example.iswim.compiler.Syntax.Empty.equals(x$1: Any): Boolean
5490 ===> org.kiama.example.oberon0.L0.c.CGtExp.productElement(x$1: Int): Any
9549 ===> org.kiama.example.oneohonecompanies.Company.PU.equals(x$1: Any): Boolean
6861 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productIterator: Iterator[Any]
8210 ===> org.kiama.example.obr.RISCTree.Beq.productPrefix: String
1542 ===> org.kiama.example.dataflow.DataflowForTests.prog: org.kiama.example.dataflow.DataflowAST.Block
4268 ===> org.kiama.example.json.JSONTree.JArray.copy(values: Vector[org.kiama.example.json.JSONTree.JValue]): org.kiama.example.json.JSONTree.JArray
1169 ===> org.kiama.example.RISC.RISCISA.BEQ.productArity: Int
11895 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11413 ===> org.kiama.rewriting.PositionedRewriterTests.pl1s: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
5121 ===> org.kiama.example.lambda3.AST.SubstQuery.productArity: Int
10671 ===> org.kiama.example.til.AST.Ne.l: org.kiama.example.til.AST.Exp
4462 ===> org.kiama.example.lambda.AST.Sub.x: org.kiama.example.lambda.AST.Idn
2507 ===> org.kiama.example.iswim.compiler.Syntax.If.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
1563 ===> org.kiama.example.dataflow.Optimise.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10971 ===> org.kiama.output.Prefix.readResolve(): Object
5012 ===> org.kiama.example.lambda3.AST.App.toString(): String
6975 ===> org.kiama.example.oberon0.L4.source.FieldIdn.canEqual(x$1: Any): Boolean
321 ===> org.kiama.attribution.AttributionTests.QuadTree.productArity: Int
544 ===> org.kiama.example.RISC.RISCISA.MVN.hashCode(): Int
4734 ===> org.kiama.example.lambda2.AST.AddOp.readResolve(): Object
4441 ===> org.kiama.example.lambda.AST.Lam.readResolve(): Object
8321 ===> org.kiama.example.obr.RISCTree.Write.equals(x$1: Any): Boolean
11031 ===> org.kiama.output.PrettyPrinterBase.group(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
9241 ===> org.kiama.example.obr.SymbolTable.Constant.isconst: Boolean
5425 ===> org.kiama.example.oberon0.L0.c.CNeExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNeExp
1844 ===> org.kiama.example.imperative.ASTNonCase.Var.<init>(s: org.kiama.example.imperative.ASTNonCase.Idn): org.kiama.example.imperative.ASTNonCase.Var
5626 ===> org.kiama.example.oberon0.L0.c.CModExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
10038 ===> org.kiama.example.prolog.PrologTree.Rule.bdy: List[org.kiama.example.prolog.PrologTree.Term]
1138 ===> org.kiama.example.RISC.RISCISA.WRH.toString(): String
1118 ===> org.kiama.example.RISC.RISCISA.WRD.hashCode(): Int
11693 ===> org.kiama.rewriting.Rewriter.restorealways(s: => Rewriter.this.Strategy,rest: => Rewriter.this.Strategy): Rewriter.this.Strategy
4308 ===> org.kiama.example.json.JSONTree.JNumber.canEqual(x$1: Any): Boolean
3424 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.toCodeSegment: org.kiama.example.iswim.secd.SECDBase.CodeSegment
2868 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.canEqual(x$1: Any): Boolean
6319 ===> org.kiama.example.oberon0.L2.source.ForStatement.hashCode(): Int
9253 ===> org.kiama.example.obr.SymbolTable.Constant.equals(x$1: Any): Boolean
9858 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.createProgram(subtree: org.kiama.example.picojava.AbstractSyntax.ClassDecl): org.kiama.example.picojava.AbstractSyntax.Program
9251 ===> org.kiama.example.obr.SymbolTable.Constant.hashCode(): Int
665 ===> org.kiama.example.RISC.RISCISA.MUL.productPrefix: String
1525 ===> org.kiama.example.dataflow.DataflowFor.<init>(): org.kiama.example.dataflow.DataflowFor.type
11907 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6418 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translateActualParams(u: org.kiama.example.oberon0.base.source.IdnUse,ps: List[org.kiama.example.oberon0.L0.source.Expression]): List[org.kiama.example.oberon0.base.c.CExpression]
805 ===> org.kiama.example.RISC.RISCISA.CMPI.copy(b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.CMPI
11308 ===> org.kiama.rewriting.NominalRewriter.HasVar.<init>(): NominalRewriter.this.HasVar.type
7329 ===> org.kiama.example.oberon0.base.source.IdnDef.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
7912 ===> org.kiama.example.obr.ObrTree.IdnExp.copy(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IdnExp
5739 ===> org.kiama.example.oberon0.L0.source.ConstDecl.unapply(x$0: org.kiama.example.oberon0.L0.source.ConstDecl): Option[(org.kiama.example.oberon0.base.source.IdnDef, org.kiama.example.oberon0.L0.source.Expression)]
7756 ===> org.kiama.example.obr.ObrTree.RaiseStmt.<init>(): org.kiama.example.obr.ObrTree.RaiseStmt.type
6057 ===> org.kiama.example.oberon0.L0.source.ModExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.ModExp
9071 ===> org.kiama.example.obr.SPARCTree.NegW.canEqual(x$1: Any): Boolean
1879 ===> org.kiama.example.imperative.ImperativeTests.pp2: String
9554 ===> org.kiama.example.oneohonecompanies.Company.PU.readResolve(): Object
11946 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3866 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.readResolve(): Object
4790 ===> org.kiama.example.lambda2.Evaluator.reducesinlambdas: Boolean
9976 ===> org.kiama.example.prolog.Interpreter.glstack: scala.collection.mutable.Stack[List[org.kiama.example.prolog.Interpreter.Goal]]
5702 ===> org.kiama.example.oberon0.L0.c.CIdnExp.<init>(i: String): org.kiama.example.oberon0.L0.c.CIdnExp
5000 ===> org.kiama.example.lambda3.AST.App.toString(): String
3793 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.canEqual(x$1: Any): Boolean
9184 ===> org.kiama.example.obr.SPARCTree.Label.<init>(): org.kiama.example.obr.SPARCTree.Label.type
11676 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
3434 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.productPrefix: String
2429 ===> org.kiama.example.iswim.compiler.Syntax.Import.fn: String
3648 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productPrefix: String
1929 ===> org.kiama.example.iswim.compiler.Parser.Pos.productPrefix: String
2198 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productPrefix: String
10834 ===> org.kiama.example.transform.AST.Num.toString(): String
11065 ===> org.kiama.output.PrettyPrinterBase.hcat(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
423 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.apply(value: Int): DynamicAttributionTests.this.Leaf
11623 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[Rewriter.this.Term,Rewriter.this.Term] with Serializable
5917 ===> org.kiama.example.oberon0.L0.source.GtExp.unapply(x$0: org.kiama.example.oberon0.L0.source.GtExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
8727 ===> org.kiama.example.obr.SPARCTree.SPARC.equals(x$1: Any): Boolean
9153 ===> org.kiama.example.obr.SPARCTree.Indexed.base: org.kiama.example.obr.SPARCTree.Local
6065 ===> org.kiama.example.oberon0.L0.source.AndExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
7425 ===> org.kiama.example.obr.ObrTree.<init>(): org.kiama.example.obr.ObrTree.type
6770 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.copy$default$1: List[SymbolTable.this.Field] @scala.annotation.unchecked.uncheckedVariance
10302 ===> org.kiama.example.repmin.Leaf.productIterator: Iterator[Any]
12286 ===> org.kiama.util.Console.readLine(prompt: String): String
7687 ===> org.kiama.example.obr.ObrTree.IfStmt.toString(): String
7995 ===> org.kiama.example.obr.ObrTree.MinusExp.equals(x$1: Any): Boolean
12021 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8411 ===> org.kiama.example.obr.RISCTree.CmpneW.productIterator: Iterator[Any]
11675 ===> org.kiama.rewriting.Rewriter.$anonfun.applyOrElse[A1 <: Rewriter.this.Term, B1 >: Option[Rewriter.this.Term]](x$1: A1,default: A1 => B1): B1
4905 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4204 ===> org.kiama.example.iswim.secd.StringOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
10884 ===> org.kiama.machine.Machine.ParamUpdater.$colon$eq(u: U): Unit
10916 ===> org.kiama.machine.Machine.step: Boolean
7552 ===> org.kiama.example.obr.ObrTree.EnumVar.toString(): String
1225 ===> org.kiama.example.RISC.RISCISA.BGE.apply(label: Int): org.kiama.example.RISC.RISCISA.BGE
6316 ===> org.kiama.example.oberon0.L2.source.ForStatement.productElement(x$1: Int): Any
9859 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.inputs: scala.collection.mutable.ArrayBuffer[org.kiama.example.picojava.AbstractSyntax.Program]
8368 ===> org.kiama.example.obr.RISCTree.Cond.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
57 ===> org.kiama.attribution.AttributionBase.circular[T <: AnyRef, U](init: U)(f: T => U): T => U
3734 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.hashCode(): Int
6009 ===> org.kiama.example.oberon0.L0.source.MulExp.productPrefix: String
9915 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.equals(x$1: Any): Boolean
558 ===> org.kiama.example.RISC.RISCISA.MVNI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
6315 ===> org.kiama.example.oberon0.L2.source.ForStatement.productArity: Int
8607 ===> org.kiama.example.obr.RISCTree.SequenceDatum.copy$default$1: List[org.kiama.example.obr.RISCTree.Item] @scala.annotation.unchecked.uncheckedVariance
7684 ===> org.kiama.example.obr.ObrTree.IfStmt.toString(): String
6666 ===> org.kiama.example.oberon0.L3.source.VarMode.productIterator: Iterator[Any]
5864 ===> org.kiama.example.oberon0.L0.source.LtExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.LtExp
1310 ===> org.kiama.example.RISC.RISCISA.Target.label: Int
2320 ===> org.kiama.example.iswim.compiler.Syntax.Or.readResolve(): Object
2204 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.toString(): String
7767 ===> org.kiama.example.obr.ObrTree.TryStmt.productPrefix: String
9755 ===> org.kiama.example.picojava.AbstractSyntax.Dot.copy$default$1: org.kiama.example.picojava.AbstractSyntax.Access @scala.annotation.unchecked.uncheckedVariance
2692 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.equals(x$1: Any): Boolean
7186 ===> org.kiama.example.oberon0.base.c.CStrType.toString(): String
8029 ===> org.kiama.example.obr.ObrTree.NegExp.hashCode(): Int
2628 ===> org.kiama.example.iswim.compiler.Syntax.Match.<init>(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,clauses: List[org.kiama.example.iswim.compiler.Syntax.MatchClause]): org.kiama.example.iswim.compiler.Syntax.Match
7094 ===> org.kiama.example.oberon0.base.c.CInclude.<init>(): org.kiama.example.oberon0.base.c.CInclude.type
5115 ===> org.kiama.example.lambda3.AST.SubstQuery.execute: SubstQuery.this.T
2610 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.copy(p: org.kiama.example.iswim.compiler.Syntax.Pattern,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MatchClause
754 ===> org.kiama.example.RISC.RISCISA.MOD.hashCode(): Int
7569 ===> org.kiama.example.obr.ObrTree.EnumConst.toString(): String
10928 ===> org.kiama.machine.MachineTests.MM.<init>(): MachineTests.this.MM.type
9409 ===> org.kiama.example.obr.SymbolTable.EnumTypes.apply(): org.kiama.example.obr.SymbolTable.EnumTypes
8247 ===> org.kiama.example.obr.RISCTree.Jmp.productArity: Int
11372 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.r: org.kiama.rewriting.SupportPositionalRewriterTests.Node
9841 ===> org.kiama.example.picojava.Parser.$init$(): Unit
6830 ===> org.kiama.example.oberon0.L4.c.CRecordType.apply(fields: List[org.kiama.example.oberon0.base.c.CVarDecl]): org.kiama.example.oberon0.L4.c.CRecordType
2831 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productArity: Int
10423 ===> org.kiama.example.til.AST.IfElse.hashCode(): Int
2608 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.e: org.kiama.example.iswim.compiler.Syntax.Expr
5591 ===> org.kiama.example.oberon0.L0.c.CMulExp.productIterator: Iterator[Any]
404 ===> org.kiama.attribution.DynamicAttributionTests.Pair.<init>(): DynamicAttributionTests.this.Pair.type
6674 ===> org.kiama.example.oberon0.L3.source.VarMode.unapply(x$0: org.kiama.example.oberon0.L3.source.VarMode): Boolean
12410 ===> org.kiama.util.Messaging.messagecount: Int
9428 ===> org.kiama.example.obr.SymbolTable.UnknownType.<init>(): org.kiama.example.obr.SymbolTable.UnknownType
12198 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4986 ===> org.kiama.example.lambda3.AST.Var.productArity: Int
1085 ===> org.kiama.example.RISC.RISCISA.PSH.equals(x$1: Any): Boolean
4022 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.<init>(bdy: org.kiama.example.iswim.secd.SECDBase.Code): SECDBase.this.PrimValue
11041 ===> org.kiama.output.PrettyPrinterBase.list$default$2[T]: String @scala.annotation.unchecked.uncheckedVariance
3126 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.equals(x$1: Any): Boolean
7163 ===> org.kiama.example.oberon0.base.c.CIntType.productArity: Int
1642 ===> org.kiama.example.imperative.AST.Add.intadds: Int
7516 ===> org.kiama.example.obr.ObrTree.ArrayVar.<init>(): org.kiama.example.obr.ObrTree.ArrayVar.type
9017 ===> org.kiama.example.obr.SPARCTree.IntDatum.productIterator: Iterator[Any]
11284 ===> org.kiama.rewriting.NominalAST.Bind.productElement(x$1: Int): Any
10744 ===> org.kiama.example.transform.AST.Program.readResolve(): Object
911 ===> org.kiama.example.RISC.RISCISA.ORI.productPrefix: String
11642 ===> org.kiama.rewriting.Rewriter.test(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
1499 ===> org.kiama.example.dataflow.DataflowForeach.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.dataflow.DataflowAST.Stm,Set[org.kiama.example.dataflow.DataflowAST.Stm]] with Serializable
4769 ===> org.kiama.example.lambda2.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
11599 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
4576 ===> org.kiama.example.lambda2.AST.App.canEqual(x$1: Any): Boolean
7123 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.copy(decl: org.kiama.example.oberon0.base.c.CVarDecl,args: List[org.kiama.example.oberon0.base.c.CDeclaration],body: org.kiama.example.oberon0.base.c.CBlock): org.kiama.example.oberon0.base.c.CFunctionDecl
5415 ===> org.kiama.example.oberon0.L0.c.CEqExp.equals(x$1: Any): Boolean
10312 ===> org.kiama.example.repmin.RepminImpl.repmin: org.kiama.example.repmin.Tree => org.kiama.example.repmin.Tree
2738 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productPrefix: String
8804 ===> org.kiama.example.obr.SPARCTree.LabelDef.unapply(x$0: org.kiama.example.obr.SPARCTree.LabelDef): Option[org.kiama.example.obr.SPARCTree.Label]
4603 ===> org.kiama.example.lambda2.AST.Opn.apply(e1: org.kiama.example.lambda2.AST.Exp,o: org.kiama.example.lambda2.AST.Op,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Opn
5689 ===> org.kiama.example.oberon0.L0.c.CNotExp.productArity: Int
9538 ===> org.kiama.example.oneohonecompanies.Company.PU.e: org.kiama.example.oneohonecompanies.Company.Employee
2212 ===> org.kiama.example.iswim.compiler.Syntax.Greater.r: org.kiama.example.iswim.compiler.Syntax.Expr
3846 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.equals(x$1: Any): Boolean
2975 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.<init>(s: ExceptionHandler.this.Stack,e: ExceptionHandler.this.Environment,c: org.kiama.example.iswim.secd.SECDBase.Code,d: ExceptionHandler.this.Dump,h: ExceptionHandler.this.Handler): ExceptionHandler.this.ExnContValue
2863 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.copy(): BooleanOps.this.FalseValue
6588 ===> org.kiama.example.oberon0.L3.c.CStrExp.toString(): String
10213 ===> org.kiama.example.prolog.SymbolTable.IntegerType.toString(): String
8786 ===> org.kiama.example.obr.SPARCTree.Jmp.apply(dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Jmp
10168 ===> org.kiama.example.prolog.SymbolTable.Predicate.productElement(x$1: Int): Any
1699 ===> org.kiama.example.imperative.AST.Div.l: org.kiama.example.imperative.AST.Exp
9659 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productPrefix: String
5040 ===> org.kiama.example.lambda3.AST.EquivQuery.copy$default$1: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
3858 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productIterator: Iterator[Any]
12424 ===> org.kiama.util.ParserUtilities.parseResultToTuple3[A, B, C](p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C]]): ParserUtilities.this.PackratParser[(A, B, C)]
11837 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6924 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.<init>(): org.kiama.example.oberon0.L4.source.RecordTypeDef.type
5633 ===> org.kiama.example.oberon0.L0.c.CModExp.hashCode(): Int
8174 ===> org.kiama.example.obr.RISCTransformation.exnlab: org.kiama.example.obr.RISCTree.Label
9576 ===> org.kiama.example.oneohonecompanies.Cut.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12184 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10384 ===> org.kiama.example.til.AST.Assign.toString(): String
9935 ===> org.kiama.example.prolog.Interpreter.TermGoal.apply(term: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.TermGoal
8882 ===> org.kiama.example.obr.SPARCTree.AddW.productArity: Int
10899 ===> org.kiama.machine.Machine.ScalarUpdate.<init>(s: Machine.this.State[T],t: T): Machine.this.ScalarUpdate[T]
2532 ===> org.kiama.example.iswim.compiler.Syntax.While.canEqual(x$1: Any): Boolean
1285 ===> org.kiama.example.RISC.RISCISA.BSR.hashCode(): Int
11121 ===> org.kiama.output.PrettyPrinter.linebreak: PrettyPrinter.this.Doc
9771 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.<init>(Value: String): org.kiama.example.picojava.AbstractSyntax.BooleanLiteral
5317 ===> org.kiama.example.oberon0.L0.SymbolTable.isInteger(e: SymbolTable.this.Type): Boolean
5994 ===> org.kiama.example.oberon0.L0.source.OrExp.<init>(): org.kiama.example.oberon0.L0.source.OrExp.type
6295 ===> org.kiama.example.oberon0.L2.NameAnalyser.rootconstexpDef: org.kiama.example.oberon0.L0.source.Expression => Boolean
1491 ===> org.kiama.example.dataflow.Foreach.apply(cond: org.kiama.example.dataflow.DataflowAST.Var,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.Foreach
12367 ===> org.kiama.util.IO.FileNotFoundException.copy(message: String): org.kiama.util.IO.FileNotFoundException
10696 ===> org.kiama.example.til.TIL2_1.$init$(): Unit
10097 ===> org.kiama.example.prolog.PrologTree.Atom.productPrefix: String
5745 ===> org.kiama.example.oberon0.L0.source.VarDecl.copy$default$1: List[org.kiama.example.oberon0.base.source.IdnDef] @scala.annotation.unchecked.uncheckedVariance
3529 ===> org.kiama.example.iswim.secd.SECDBase.Enter.equals(x$1: Any): Boolean
3426 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.apply(bs: org.kiama.example.iswim.secd.SECDBase.ByteCodeBase*): org.kiama.example.iswim.secd.SECDBase.CodeTree
7600 ===> org.kiama.example.obr.ObrTree.ExnConst.productArity: Int
9433 ===> org.kiama.example.obr.SymbolTable.UnknownType.productElement(x$1: Int): Any
9490 ===> org.kiama.example.oneohonecompanies.Company.Company.<init>(): org.kiama.example.oneohonecompanies.Company.Company.type
8189 ===> org.kiama.example.obr.RISCTree.RISCProg.copy$default$1: List[org.kiama.example.obr.RISCTree.Item] @scala.annotation.unchecked.uncheckedVariance
10006 ===> org.kiama.example.prolog.PrologTree.Program.productIterator: Iterator[Any]
11860 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9873 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.ast: org.kiama.example.picojava.AbstractSyntax.Program
3172 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productPrefix: String
6250 ===> org.kiama.example.oberon0.L1.source.IfStatement.<init>(): org.kiama.example.oberon0.L1.source.IfStatement.type
9005 ===> org.kiama.example.obr.SPARCTree.DivW.<init>(): org.kiama.example.obr.SPARCTree.DivW.type
5767 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productArity: Int
8527 ===> org.kiama.example.obr.RISCTree.MulW.toString(): String
8840 ===> org.kiama.example.obr.SPARCTree.StW.<init>(mem: org.kiama.example.obr.SPARCTree.Address,d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.StW
8978 ===> org.kiama.example.obr.SPARCTree.CmpltW.productPrefix: String
5345 ===> org.kiama.example.oberon0.L0.c.CInitDecl.<init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,e: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CInitDecl
10734 ===> org.kiama.example.transform.AST.Program.productElement(x$1: Int): Any
8910 ===> org.kiama.example.obr.SPARCTree.Cond.<init>(): org.kiama.example.obr.SPARCTree.Cond.type
3093 ===> org.kiama.example.iswim.secd.IOOps.Write.apply(): org.kiama.example.iswim.secd.IOOps.Write
4767 ===> org.kiama.example.lambda2.AST.Opn(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy,s3: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
4006 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
11616 ===> org.kiama.rewriting.Rewriter.collects[T](f: org.kiama.==>[Rewriter.this.Term,T]): Rewriter.this.Term => Set[T]
7746 ===> org.kiama.example.obr.ObrTree.RaiseStmt.copy(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.RaiseStmt
8233 ===> org.kiama.example.obr.RISCTree.Bne.canEqual(x$1: Any): Boolean
7341 ===> org.kiama.example.oberon0.base.source.IdnDef.unapply(x$0: org.kiama.example.oberon0.base.source.IdnDef): Option[String]
5658 ===> org.kiama.example.oberon0.L0.c.CAndExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAndExp
2547 ===> org.kiama.example.iswim.compiler.Syntax.Block.productElement(x$1: Int): Any
4675 ===> org.kiama.example.lambda2.AST.IntType.hashCode(): Int
1207 ===> org.kiama.example.RISC.RISCISA.BLT.<init>(): org.kiama.example.RISC.RISCISA.BLT.type
1075 ===> org.kiama.example.RISC.RISCISA.PSH.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.PSH
8409 ===> org.kiama.example.obr.RISCTree.CmpneW.productArity: Int
8845 ===> org.kiama.example.obr.SPARCTree.StW.productArity: Int
9572 ===> org.kiama.example.oneohonecompanies.Cut.<init>(): org.kiama.example.oneohonecompanies.Cut.type
3874 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.canEqual(x$1: Any): Boolean
10826 ===> org.kiama.example.transform.AST.Num.copy(value: Int): org.kiama.example.transform.AST.Num
11347 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.PositionalRewriter.Term,Option[org.kiama.rewriting.PositionalRewriter.Term]] with Serializable
1312 ===> org.kiama.example.RISC.RISCISA.Target.toString(): String
5364 ===> org.kiama.example.oberon0.L0.c.CTypeDef.copy(decl: org.kiama.example.oberon0.base.c.CVarDecl): org.kiama.example.oberon0.L0.c.CTypeDef
9907 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.copy$default$1: Set[(String, org.kiama.example.prolog.PrologTree.Term)] @scala.annotation.unchecked.uncheckedVariance
7812 ===> org.kiama.example.obr.ObrTree.Catch.toString(): String
7137 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.apply(decl: org.kiama.example.oberon0.base.c.CVarDecl,args: List[org.kiama.example.oberon0.base.c.CDeclaration],body: org.kiama.example.oberon0.base.c.CBlock): org.kiama.example.oberon0.base.c.CFunctionDecl
1438 ===> org.kiama.example.dataflow.DataflowAST.Block.<init>(): org.kiama.example.dataflow.DataflowAST.Block.type
8023 ===> org.kiama.example.obr.ObrTree.NegExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
1588 ===> org.kiama.example.imperative.AST.Num.apply(d: Double): org.kiama.example.imperative.AST.Num
11949 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2025 ===> org.kiama.example.iswim.compiler.Syntax.Negate.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Negate
8901 ===> org.kiama.example.obr.SPARCTree.Cond.copy$default$3: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
6523 ===> org.kiama.example.oberon0.L3.TypeAnalyser.paramtype(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int): TypeAnalyser.this.Type
8412 ===> org.kiama.example.obr.RISCTree.CmpneW.canEqual(x$1: Any): Boolean
1337 ===> org.kiama.example.RISC.RISCISA.Comment.hashCode(): Int
7915 ===> org.kiama.example.obr.ObrTree.IdnExp.productArity: Int
4832 ===> org.kiama.example.lambda2.LambdaTests.assertEvalAll(term: String,result: org.kiama.example.lambda2.AST.Exp): Unit
3923 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.toString(): String
8180 ===> org.kiama.example.obr.RISCTransformation.ditems: org.kiama.example.obr.ObrTree.Declaration => List[org.kiama.example.obr.RISCTree.Item]
10142 ===> org.kiama.example.prolog.PrologTree.Cut.readResolve(): Object
10845 ===> org.kiama.example.transform.AST.Var.productPrefix: String
293 ===> org.kiama.attribution.AttributionTests.PairTree.equals(x$1: Any): Boolean
2272 ===> org.kiama.example.iswim.compiler.Syntax.Not.productElement(x$1: Int): Any
10442 ===> org.kiama.example.til.AST.While.hashCode(): Int
9313 ===> org.kiama.example.obr.SymbolTable.BoolType.copy(): org.kiama.example.obr.SymbolTable.BoolType
7709 ===> org.kiama.example.obr.ObrTree.ReturnStmt.<init>(value: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.ReturnStmt
9768 ===> org.kiama.example.picojava.AbstractSyntax.Dot.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.Dot): Option[(org.kiama.example.picojava.AbstractSyntax.Access, org.kiama.example.picojava.AbstractSyntax.IdnUse)]
9987 ===> org.kiama.example.prolog.InterpreterTests.querytest(fn: String,q: String,exp: String): Unit
5808 ===> org.kiama.example.oberon0.L0.source.Assignment.hashCode(): Int
3158 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productArity: Int
4402 ===> org.kiama.example.lambda.AST.Num.toString(): String
12076 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4649 ===> org.kiama.example.lambda2.AST.Bind.e: org.kiama.example.lambda2.AST.Exp
1871 ===> org.kiama.example.imperative.ASTNonCase.Div.toString(): String
11924 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2153 ===> org.kiama.example.iswim.compiler.Syntax.Equal.readResolve(): Object
8126 ===> org.kiama.example.obr.ObrTree.SlashExp.toString(): String
3462 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.hashCode(): Int
2874 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.unapply(x$0: BooleanOps.this.FalseValue): Boolean
9465 ===> org.kiama.example.obr.tests.ObrRegressionTests.<init>(): org.kiama.example.obr.tests.ObrRegressionTests
5715 ===> org.kiama.example.oberon0.L0.c.CIdnExp.apply(i: String): org.kiama.example.oberon0.L0.c.CIdnExp
8090 ===> org.kiama.example.obr.ObrTree.OrExp.unapply(x$0: org.kiama.example.obr.ObrTree.OrExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
845 ===> org.kiama.example.RISC.RISCISA.AND.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.AND
3997 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.readResolve(): Object
10966 ===> org.kiama.output.Prefix.productElement(x$1: Int): Any
369 ===> org.kiama.attribution.Decorators.Chain.productIterator: Iterator[Any]
8252 ===> org.kiama.example.obr.RISCTree.Jmp.toString(): String
10253 ===> org.kiama.example.prolog.SymbolTable.UnknownType.toString(): String
10722 ===> org.kiama.example.transform.AST.<init>(): org.kiama.example.transform.AST.type
1353 ===> org.kiama.example.dataflow.VariablesImpl.uses: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
5908 ===> org.kiama.example.oberon0.L0.source.GtExp.productElement(x$1: Int): Any
5806 ===> org.kiama.example.oberon0.L0.source.Assignment.productIterator: Iterator[Any]
4650 ===> org.kiama.example.lambda2.AST.Bind.<init>(i: org.kiama.example.lambda2.AST.Idn,e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Bind
9353 ===> org.kiama.example.obr.SymbolTable.RecordType.productIterator: Iterator[Any]
11691 ===> org.kiama.rewriting.Rewriter.everything[T](v: T)(f: (T, T) => T)(g: org.kiama.==>[Rewriter.this.Term,T])(t: Rewriter.this.Term): T
11418 ===> org.kiama.rewriting.PositionedRewriterTests.l1: org.kiama.rewriting.SupportPositionedRewriterTests.Leaf
4751 ===> org.kiama.example.lambda2.AST.Var(s1: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
7904 ===> org.kiama.example.obr.ObrTree.GreaterExp.equals(x$1: Any): Boolean
11813 ===> org.kiama.rewriting.RewriterTests.NotSame.productPrefix: String
10612 ===> org.kiama.example.til.AST.Div.unapply(x$0: org.kiama.example.til.AST.Div): Option[(org.kiama.example.til.AST.Exp, org.kiama.example.til.AST.Exp)]
533 ===> org.kiama.example.RISC.RISCISA.MVN.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
8308 ===> org.kiama.example.obr.RISCTree.StW.unapply(x$0: org.kiama.example.obr.RISCTree.StW): Option[(org.kiama.example.obr.RISCTree.Address, org.kiama.example.obr.RISCTree.Datum)]
8271 ===> org.kiama.example.obr.RISCTree.LabelDef.<init>(): org.kiama.example.obr.RISCTree.LabelDef.type
2914 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productArity: Int
1393 ===> org.kiama.example.dataflow.DataflowAST.While.productArity: Int
8534 ===> org.kiama.example.obr.RISCTree.NegW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
9745 ===> org.kiama.example.picojava.AbstractSyntax.Use.equals(x$1: Any): Boolean
7512 ===> org.kiama.example.obr.ObrTree.ArrayVar.canEqual(x$1: Any): Boolean
8284 ===> org.kiama.example.obr.RISCTree.Ret.toString(): String
9365 ===> org.kiama.example.obr.SymbolTable.RecordTypes.copy(): org.kiama.example.obr.SymbolTable.RecordTypes
10991 ===> org.kiama.output.Infix.toString(): String
8248 ===> org.kiama.example.obr.RISCTree.Jmp.productElement(x$1: Int): Any
10738 ===> org.kiama.example.transform.AST.Program.toString(): String
6396 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.hashCode(): Int
1209 ===> org.kiama.example.RISC.RISCISA.BLT.apply(label: Int): org.kiama.example.RISC.RISCISA.BLT
4119 ===> org.kiama.example.iswim.secd.StackOps.Swap.toString(): String
6763 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.apply(size: Int,elemtype: SymbolTable.this.Type): SymbolTable.this.ArrayType
4333 ===> org.kiama.example.json.JSONTree.JFalse.copy(): org.kiama.example.json.JSONTree.JFalse
2219 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productElement(x$1: Int): Any
9008 ===> org.kiama.example.obr.SPARCTree.DivW.unapply(x$0: org.kiama.example.obr.SPARCTree.DivW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
5793 ===> org.kiama.example.oberon0.L0.source.NamedType.toString(): String
4306 ===> org.kiama.example.json.JSONTree.JNumber.productElement(x$1: Int): Any
11193 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productIterator: Iterator[Any]
1887 ===> org.kiama.example.imperative.Generator.genVar: org.scalacheck.Gen[org.kiama.example.imperative.AST.Var]
6220 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productIterator: Iterator[Any]
748 ===> org.kiama.example.RISC.RISCISA.MOD.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOD
6571 ===> org.kiama.example.oberon0.L3.c.CCall.toString(): String
6675 ===> org.kiama.example.oberon0.L3.source.VarMode.readResolve(): Object
6093 ===> org.kiama.example.oberon0.L0.source.NegExp.hashCode(): Int
6983 ===> org.kiama.example.oberon0.L4.source.FieldIdn.readResolve(): Object
7216 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.canEqual(x$1: Any): Boolean
5109 ===> org.kiama.example.lambda3.AST.FreshQuery.unapply(x$0: org.kiama.example.lambda3.AST.FreshQuery): Option[(org.kiama.rewriting.NominalAST.Name, org.kiama.example.lambda3.AST.Exp)]
6504 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.<init>(ident: String,params: List[SymbolTable.this.ParamInfo]): SymbolTable.this.BuiltinProc
10694 ===> org.kiama.example.til.TIL1_1Tests.n: org.kiama.example.til.AST.Id
7945 ===> org.kiama.example.obr.ObrTree.IndexExp.readResolve(): Object
1737 ===> org.kiama.example.imperative.AST.Seqn.ss: Seq[org.kiama.example.imperative.AST.Stmt]
6104 ===> org.kiama.example.oberon0.L0.source.NotExp.op: String
857 ===> org.kiama.example.RISC.RISCISA.AND.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.AND
1486 ===> org.kiama.example.dataflow.Foreach.hashCode(): Int
2125 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productIterator: Iterator[Any]
2182 ===> org.kiama.example.iswim.compiler.Syntax.Less.productIterator: Iterator[Any]
2574 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.<init>(fields: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Tuple
2308 ===> org.kiama.example.iswim.compiler.Syntax.Or.productPrefix: String
1878 ===> org.kiama.example.imperative.ImperativeTests.pp1: String
3234 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productElement(x$1: Int): Any
8747 ===> org.kiama.example.obr.SPARCTree.Beq.equals(x$1: Any): Boolean
6875 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.tipe: org.kiama.example.oberon0.L0.source.TypeDef
6530 ===> org.kiama.example.oberon0.L3.c.CVoidType.productArity: Int
10330 ===> org.kiama.example.til.ParsingMain.$init$(): Unit
10781 ===> org.kiama.example.transform.AST.BinExpR.apply(left: org.kiama.example.transform.AST.Exp,op: String,right: org.kiama.example.transform.AST.ExpR): org.kiama.example.transform.AST.BinExpR
12506 ===> org.kiama.util.ParserUtilitiesTests.Tup4.<init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup4
7252 ===> org.kiama.example.oberon0.base.c.CIntExp.hashCode(): Int
10571 ===> org.kiama.example.til.AST.Str.<init>(): org.kiama.example.til.AST.Str.type
6133 ===> org.kiama.example.oberon0.L0.source.IntExp.toString(): String
3047 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productIterator: Iterator[Any]
8615 ===> org.kiama.example.obr.RISCTree.SequenceDatum.toString(): String
10780 ===> org.kiama.example.transform.AST.BinExpR.toString(): String
12561 ===> org.kiama.util.ParserUtilitiesTests.Tup6.copy$default$4: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
9371 ===> org.kiama.example.obr.SymbolTable.RecordTypes.hashCode(): Int
10816 ===> org.kiama.example.transform.AST.BinExp.toString(): String
2641 ===> org.kiama.example.iswim.compiler.Syntax.Match.toString(): String
9798 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.equals(x$1: Any): Boolean
11550 ===> org.kiama.rewriting.Rewriter.queryf[T](f: Rewriter.this.Term => T): Rewriter.this.Strategy
3897 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.<init>(): org.kiama.example.iswim.secd.SECDBase.DumpEmpty
1369 ===> org.kiama.example.dataflow.DataflowAST.Assign.<init>(left: org.kiama.example.dataflow.DataflowAST.Var,right: org.kiama.example.dataflow.DataflowAST.Var): org.kiama.example.dataflow.DataflowAST.Assign
1734 ===> org.kiama.example.imperative.AST.Null.apply(): org.kiama.example.imperative.AST.Null
3795 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.toString(): String
3143 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.toString(): String
2501 ===> org.kiama.example.iswim.compiler.Syntax.If.e: org.kiama.example.iswim.compiler.Syntax.Expr
5472 ===> org.kiama.example.oberon0.L0.c.CLeExp.canEqual(x$1: Any): Boolean
1184 ===> org.kiama.example.RISC.RISCISA.BNE.productPrefix: String
4086 ===> org.kiama.example.iswim.secd.StackOps.Pop.toString(): String
11002 ===> org.kiama.output.PrettyBinaryExpression.right: org.kiama.output.PrettyExpression
7994 ===> org.kiama.example.obr.ObrTree.MinusExp.toString(): String
11315 ===> org.kiama.rewriting.PositionalRewriter.<init>(): org.kiama.rewriting.PositionalRewriter
5991 ===> org.kiama.example.oberon0.L0.source.OrExp.hashCode(): Int
2527 ===> org.kiama.example.iswim.compiler.Syntax.While.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
12181 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4363 ===> org.kiama.example.json.Driver.<init>(): org.kiama.example.json.Driver
1078 ===> org.kiama.example.RISC.RISCISA.PSH.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
11483 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productElement(x$1: Int): Any
821 ===> org.kiama.example.RISC.RISCISA.CHKI.im: org.kiama.example.RISC.RISCISA.Imm
9997 ===> org.kiama.example.prolog.PrologTree.<init>(): org.kiama.example.prolog.PrologTree.type
6628 ===> org.kiama.example.oberon0.L3.c.CDerefExp.<init>(): org.kiama.example.oberon0.L3.c.CDerefExp.type
8604 ===> org.kiama.example.obr.RISCTree.SequenceDatum.d: org.kiama.example.obr.RISCTree.Datum
1724 ===> org.kiama.example.imperative.AST.Null.productPrefix: String
7707 ===> org.kiama.example.obr.ObrTree.LoopStmt.readResolve(): Object
7570 ===> org.kiama.example.obr.ObrTree.EnumConst.equals(x$1: Any): Boolean
8843 ===> org.kiama.example.obr.SPARCTree.StW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
12269 ===> org.kiama.util.Compiler.process(ast: T,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
5511 ===> org.kiama.example.oberon0.L0.c.CGeExp.productIterator: Iterator[Any]
5042 ===> org.kiama.example.lambda3.AST.EquivQuery.productPrefix: String
687 ===> org.kiama.example.RISC.RISCISA.MULI.productArity: Int
6210 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.readResolve(): Object
9818 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.apply(Name: String): org.kiama.example.picojava.AbstractSyntax.UnknownDecl
4305 ===> org.kiama.example.json.JSONTree.JNumber.productArity: Int
1833 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
2265 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.readResolve(): Object
8290 ===> org.kiama.example.obr.RISCTree.Ret.readResolve(): Object
8134 ===> org.kiama.example.obr.ObrTree.StarExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
9732 ===> org.kiama.example.picojava.AbstractSyntax.IdnUse.Name: String
2966 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.e: ExceptionHandler.this.Environment
1146 ===> org.kiama.example.RISC.RISCISA.WRL.productArity: Int
8563 ===> org.kiama.example.obr.RISCTree.Not.unapply(x$0: org.kiama.example.obr.RISCTree.Not): Option[org.kiama.example.obr.RISCTree.Datum]
12122 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11440 ===> org.kiama.rewriting.PositionedRewriterTests.pos: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
4909 ===> org.kiama.example.lambda2.ParLazyShare.$init$(): Unit
3632 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productArity: Int
9397 ===> org.kiama.example.obr.SymbolTable.EnumTypes.toString(): String
5242 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.copy$default$2: org.kiama.example.oberon0.L0.source.TypeDef @scala.annotation.unchecked.uncheckedVariance
5964 ===> org.kiama.example.oberon0.L0.source.SubExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.SubExp
901 ===> org.kiama.example.RISC.RISCISA.OR.readResolve(): Object
2240 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.canEqual(x$1: Any): Boolean
10183 ===> org.kiama.example.prolog.SymbolTable.Variable.productPrefix: String
1600 ===> org.kiama.example.imperative.AST.Var.productArity: Int
202 ===> org.kiama.attribution.AttributionTests.EitherTree.productArity: Int
9565 ===> org.kiama.example.oneohonecompanies.Company.DU.toString(): String
267 ===> org.kiama.attribution.AttributionTests.MapTree.copy(m: Map[AttributionTests.this.Tree,AttributionTests.this.Tree]): AttributionTests.this.MapTree
1445 ===> org.kiama.example.dataflow.DataflowAST.Return.copy(ret: org.kiama.example.dataflow.DataflowAST.Var): org.kiama.example.dataflow.DataflowAST.Return
2476 ===> org.kiama.example.iswim.compiler.Syntax.Return.equals(x$1: Any): Boolean
2526 ===> org.kiama.example.iswim.compiler.Syntax.While.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
176 ===> org.kiama.attribution.AttributionTests.Leaf.toString(): String
10282 ===> org.kiama.example.repmin.Fork.productPrefix: String
5325 ===> org.kiama.example.oberon0.L0.TypeAnalyser.exptypeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
11607 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
9911 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productIterator: Iterator[Any]
6774 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productIterator: Iterator[Any]
7654 ===> org.kiama.example.obr.ObrTree.ForStmt.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
9426 ===> org.kiama.example.obr.SymbolTable.ExnType.unapply(x$0: org.kiama.example.obr.SymbolTable.ExnType): Boolean
5876 ===> org.kiama.example.oberon0.L0.source.LtExp.<init>(): org.kiama.example.oberon0.L0.source.LtExp.type
4574 ===> org.kiama.example.lambda2.AST.App.productElement(x$1: Int): Any
1167 ===> org.kiama.example.RISC.RISCISA.BEQ.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
933 ===> org.kiama.example.RISC.RISCISA.XOR.productArity: Int
1343 ===> org.kiama.example.RISC.RISCISA.Comment.readResolve(): Object
1284 ===> org.kiama.example.RISC.RISCISA.BSR.canEqual(x$1: Any): Boolean
4266 ===> org.kiama.example.json.JSONTree.JArray.values: Vector[org.kiama.example.json.JSONTree.JValue]
2384 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productElement(x$1: Int): Any
7938 ===> org.kiama.example.obr.ObrTree.IndexExp.hashCode(): Int
7286 ===> org.kiama.example.oberon0.base.source.ModuleDecl.apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,block: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.base.source.ModuleDecl
11279 ===> org.kiama.rewriting.NominalAST.Bind.copy(name: org.kiama.rewriting.NominalAST.Name,term: Any): org.kiama.rewriting.NominalAST.Bind
7093 ===> org.kiama.example.oberon0.base.c.CInclude.equals(x$1: Any): Boolean
1120 ===> org.kiama.example.RISC.RISCISA.WRD.<init>(): org.kiama.example.RISC.RISCISA.WRD.type
6686 ===> org.kiama.example.oberon0.L3.source.ValMode.<init>(): org.kiama.example.oberon0.L3.source.ValMode.type
11962 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5167 ===> org.kiama.example.oberon0.L0.CCodeGenerator.$init$(): Unit
10406 ===> org.kiama.example.til.AST.IfThen.toString(): String
6068 ===> org.kiama.example.oberon0.L0.source.AndExp.productElement(x$1: Int): Any
1551 ===> org.kiama.example.dataflow.DataflowTests.s5: org.kiama.example.dataflow.DataflowAST.Return
2719 ===> org.kiama.example.iswim.compiler.Syntax.Assign.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
12083 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2112 ===> org.kiama.example.iswim.compiler.Syntax.Divide.toString(): String
6700 ===> org.kiama.example.oberon0.L3.source.FPSection.productArity: Int
7640 ===> org.kiama.example.obr.ObrTree.ExitStmt.toString(): String
8733 ===> org.kiama.example.obr.SPARCTree.Item.<init>(): org.kiama.example.obr.SPARCTree.Item
11038 ===> org.kiama.output.PrettyPrinterBase.softbreak: PrettyPrinterBase.this.Doc
4275 ===> org.kiama.example.json.JSONTree.JArray.hashCode(): Int
2346 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productElement(x$1: Int): Any
11539 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
9441 ===> org.kiama.example.obr.SymbolTable.UnknownType.apply(): org.kiama.example.obr.SymbolTable.UnknownType
10279 ===> org.kiama.example.repmin.Fork.copy(left: org.kiama.example.repmin.Tree,right: org.kiama.example.repmin.Tree): org.kiama.example.repmin.Fork
225 ===> org.kiama.attribution.AttributionTests.ListTree.equals(x$1: Any): Boolean
977 ===> org.kiama.example.RISC.RISCISA.LDW.productIterator: Iterator[Any]
3850 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.StackUnderflow): Boolean
4617 ===> org.kiama.example.lambda2.AST.Let.productArity: Int
7583 ===> org.kiama.example.obr.ObrTree.IntConst.productArity: Int
11593 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
5381 ===> org.kiama.example.oberon0.L0.c.CAssignment.<init>(desig: org.kiama.example.oberon0.base.c.CExpression,exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAssignment
3678 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.<init>(): org.kiama.example.iswim.secd.SECDBase.MkUserException
3015 ===> org.kiama.example.iswim.secd.HeapOps.Get.productArity: Int
5178 ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10982 ===> org.kiama.output.Infix.<init>(side: org.kiama.output.Side): org.kiama.output.Infix
9060 ===> org.kiama.example.obr.SPARCTree.MulW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.MulW
4401 ===> org.kiama.example.lambda.AST.Num.<init>(): org.kiama.example.lambda.AST.Num.type
8061 ===> org.kiama.example.obr.ObrTree.NotExp.productArity: Int
9124 ===> org.kiama.example.obr.SPARCTree.SubW.productElement(x$1: Int): Any
7543 ===> org.kiama.example.obr.ObrTree.EnumVar.copy(idn: org.kiama.example.obr.ObrTree.Identifier,consts: List[org.kiama.example.obr.ObrTree.EnumConst]): org.kiama.example.obr.ObrTree.EnumVar
12374 ===> org.kiama.util.IO.FileNotFoundException.hashCode(): Int
4116 ===> org.kiama.example.iswim.secd.StackOps.Swap.productIterator: Iterator[Any]
10471 ===> org.kiama.example.til.AST.For.unapply(x$0: org.kiama.example.til.AST.For): Option[(org.kiama.example.til.AST.Id, org.kiama.example.til.AST.Exp, org.kiama.example.til.AST.Exp, Seq[org.kiama.example.til.AST.Stat])]
10574 ===> org.kiama.example.til.AST.Str.unapply(x$0: org.kiama.example.til.AST.Str): Option[String]
3382 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productIterator: Iterator[Any]
3783 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.toString(): String
9378 ===> org.kiama.example.obr.SymbolTable.EnumType.ident: org.kiama.example.obr.ObrTree.Identifier
8750 ===> org.kiama.example.obr.SPARCTree.Beq.apply(cond: org.kiama.example.obr.SPARCTree.Datum,dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Beq
4591 ===> org.kiama.example.lambda2.AST.Opn.copy$default$2: org.kiama.example.lambda2.AST.Op @scala.annotation.unchecked.uncheckedVariance
23 ===> org.kiama.attribution.Attributable.initTreeProperties(): Unit
10091 ===> org.kiama.example.prolog.PrologTree.Literal.<init>(): org.kiama.example.prolog.PrologTree.Literal
5475 ===> org.kiama.example.oberon0.L0.c.CLeExp.equals(x$1: Any): Boolean
2818 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.productIterator: Iterator[Any]
3038 ===> org.kiama.example.iswim.secd.HeapOps.Put.toString(): String
12279 ===> org.kiama.util.TestCompiler.infiletests(c: String,dir: java.io.File,inext: String,args: Array[String]): Unit
11479 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.copy$default$1: org.kiama.rewriting.SupportPositionedRewriterTests.Node @scala.annotation.unchecked.uncheckedVariance
6638 ===> org.kiama.example.oberon0.L3.source.ProcDecl.params: List[org.kiama.example.oberon0.L3.source.FPSection]
4580 ===> org.kiama.example.lambda2.AST.App.<init>(): org.kiama.example.lambda2.AST.App.type
12084 ===> org.kiama.rewriting.RewriterTests.f(y: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
12124 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3010 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.unapply(x$0: org.kiama.example.iswim.secd.HeapOps.Alloc): Boolean
1810 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7595 ===> org.kiama.example.obr.ObrTree.ExnConst.idn: org.kiama.example.obr.ObrTree.Identifier
11154 ===> org.kiama.output.ParenPrettyPrinterTests.Exp.<init>(): ParenPrettyPrinterTests.this.Exp
8921 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productPrefix: String
12140 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6615 ===> org.kiama.example.oberon0.L3.c.CDerefExp.<init>(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L3.c.CDerefExp
3528 ===> org.kiama.example.iswim.secd.SECDBase.Enter.toString(): String
2713 ===> org.kiama.example.iswim.compiler.Syntax.Val.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Val): Option[org.kiama.example.iswim.compiler.Syntax.Expr]
8531 ===> org.kiama.example.obr.RISCTree.NegW.d: org.kiama.example.obr.RISCTree.Datum
11474 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.readResolve(): Object
11040 ===> org.kiama.output.PrettyPrinterBase.list[T](l: List[T],prefix: String,elemToDoc: T => PrettyPrinterBase.this.Doc,sep: PrettyPrinterBase.this.Doc,sepfn: (Seq[PrettyPrinterBase.this.Doc], PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
3833 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.toString(): String
807 ===> org.kiama.example.RISC.RISCISA.CMPI.copy$default$2: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
4304 ===> org.kiama.example.json.JSONTree.JNumber.productPrefix: String
9936 ===> org.kiama.example.prolog.Interpreter.TermGoal.unapply(x$0: org.kiama.example.prolog.Interpreter.TermGoal): Option[org.kiama.example.prolog.PrologTree.Term]
2622 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.toString(): String
1436 ===> org.kiama.example.dataflow.DataflowAST.Block.toString(): String
8912 ===> org.kiama.example.obr.SPARCTree.Cond.apply(cond: org.kiama.example.obr.SPARCTree.Datum,t: org.kiama.example.obr.SPARCTree.Datum,f: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Cond
4856 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1385 ===> org.kiama.example.dataflow.DataflowAST.Assign.readResolve(): Object
9208 ===> org.kiama.example.obr.SemanticAnalysis.isinloop: org.kiama.example.obr.ObrTree.Statement => Boolean
7075 ===> org.kiama.example.oberon0.base.c.CProgram.toString(): String
6158 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.declsection(d: org.kiama.example.oberon0.base.source.Declaration): String
6584 ===> org.kiama.example.oberon0.L3.c.CStrExp.productElement(x$1: Int): Any
4599 ===> org.kiama.example.lambda2.AST.Opn.toString(): String
2397 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.copy(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetStmt
3737 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.type
12334 ===> org.kiama.util.Environments.MultipleEntity.toString(): String
3391 ===> org.kiama.example.iswim.secd.RecordOps.$init$(): Unit
10735 ===> org.kiama.example.transform.AST.Program.productIterator: Iterator[Any]
193 ===> org.kiama.attribution.AttributionTests.Unused.toString(): String
5686 ===> org.kiama.example.oberon0.L0.c.CNotExp.copy(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNotExp
2061 ===> org.kiama.example.iswim.compiler.Syntax.Minus.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Minus
5082 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.canEqual(x$1: Any): Boolean
2979 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
11779 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2870 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.equals(x$1: Any): Boolean
3506 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productArity: Int
7934 ===> org.kiama.example.obr.ObrTree.IndexExp.productArity: Int
591 ===> org.kiama.example.RISC.RISCISA.ADD.unapply(x$0: org.kiama.example.RISC.RISCISA.ADD): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
8047 ===> org.kiama.example.obr.ObrTree.NotEqualExp.canEqual(x$1: Any): Boolean
5712 ===> org.kiama.example.oberon0.L0.c.CIdnExp.equals(x$1: Any): Boolean
4320 ===> org.kiama.example.json.JSONTree.JTrue.productArity: Int
10418 ===> org.kiama.example.til.AST.IfElse.productPrefix: String
7961 ===> org.kiama.example.obr.ObrTree.IntExp.unapply(x$0: org.kiama.example.obr.ObrTree.IntExp): Option[Int]
7788 ===> org.kiama.example.obr.ObrTree.TryBody.canEqual(x$1: Any): Boolean
3489 ===> org.kiama.example.iswim.secd.SECDBase.App.copy(): org.kiama.example.iswim.secd.SECDBase.App
8956 ===> org.kiama.example.obr.SPARCTree.CmpgtW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpgtW
11590 ===> org.kiama.rewriting.Rewriter.$anon.allMap[CC[V, W] <: Map[V,W]](t: CC[Rewriter.this.Term,Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term,Rewriter.this.Term],(Rewriter.this.Term, Rewriter.this.Term),CC[Rewriter.this.Term,Rewriter.this.Term]]): Option[CC[Rewriter.this.Term,Rewriter.this.Term]]
1848 ===> org.kiama.example.imperative.ASTNonCase.Var.toString(): String
9756 ===> org.kiama.example.picojava.AbstractSyntax.Dot.copy$default$2: org.kiama.example.picojava.AbstractSyntax.IdnUse @scala.annotation.unchecked.uncheckedVariance
5284 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.equals(x$1: Any): Boolean
6737 ===> org.kiama.example.oberon0.L4.CCodeGenerator.translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type): org.kiama.example.oberon0.base.c.CDeclaration
11059 ===> org.kiama.output.PrettyPrinterBase.fillsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
4908 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1168 ===> org.kiama.example.RISC.RISCISA.BEQ.productPrefix: String
141 ===> org.kiama.attribution.UncachedAttribution.<init>(): org.kiama.attribution.UncachedAttribution.type
2561 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productArity: Int
6282 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12012 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11155 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.left: ParenPrettyPrinterTests.this.Exp
3570 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.copy$default$1: org.kiama.example.iswim.secd.SECDBase.Name @scala.annotation.unchecked.uncheckedVariance
6380 ===> org.kiama.example.oberon0.L2.source.ValCond.<init>(): org.kiama.example.oberon0.L2.source.ValCond.type
12498 ===> org.kiama.util.ParserUtilitiesTests.Tup3.toString(): String
9189 ===> org.kiama.example.obr.SPARCTree.genlabel(): org.kiama.example.obr.SPARCTree.Label
8573 ===> org.kiama.example.obr.RISCTree.RemW.productElement(x$1: Int): Any
5846 ===> org.kiama.example.oberon0.L0.source.NeExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NeExp
2619 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.toString(): String
9669 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.apply(Name: String,Superclass: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse],Body: org.kiama.example.picojava.AbstractSyntax.Block): org.kiama.example.picojava.AbstractSyntax.ClassDecl
9848 ===> org.kiama.example.picojava.TypeAnalysis.tipe: org.kiama.example.picojava.AbstractSyntax.ASTNode => org.kiama.example.picojava.AbstractSyntax.TypeDecl
1647 ===> org.kiama.example.imperative.AST.Add.productArity: Int
6834 ===> org.kiama.example.oberon0.L4.c.CIndexExp.index: org.kiama.example.oberon0.base.c.CExpression
11415 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
360 ===> org.kiama.attribution.Decorators.Chain.out: T => U
11885 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7580 ===> org.kiama.example.obr.ObrTree.IntConst.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
5683 ===> org.kiama.example.oberon0.L0.c.CNotExp.<init>(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNotExp
6780 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.apply(fields: List[SymbolTable.this.Field]): SymbolTable.this.RecordType
10023 ===> org.kiama.example.prolog.PrologTree.Fact.copy$default$1: org.kiama.example.prolog.PrologTree.Term @scala.annotation.unchecked.uncheckedVariance
5237 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.ident: String
5595 ===> org.kiama.example.oberon0.L0.c.CMulExp.equals(x$1: Any): Boolean
10177 ===> org.kiama.example.prolog.SymbolTable.Predicate.unapply(x$0: org.kiama.example.prolog.SymbolTable.Predicate): Option[List[org.kiama.example.prolog.SymbolTable.Type]]
5514 ===> org.kiama.example.oberon0.L0.c.CGeExp.toString(): String
11640 ===> org.kiama.rewriting.Rewriter.not(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2024 ===> org.kiama.example.iswim.compiler.Syntax.Negate.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Negate
4192 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.canEqual(x$1: Any): Boolean
7804 ===> org.kiama.example.obr.ObrTree.Catch.productArity: Int
234 ===> org.kiama.attribution.AttributionTests.SetTree.copy$default$1: Set[AttributionTests.this.Tree] @scala.annotation.unchecked.uncheckedVariance
317 ===> org.kiama.attribution.AttributionTests.QuadTree.<init>(p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.QuadTree
10539 ===> org.kiama.example.til.AST.Var.apply(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Var
2534 ===> org.kiama.example.iswim.compiler.Syntax.While.toString(): String
8357 ===> org.kiama.example.obr.RISCTree.AddW.<init>(): org.kiama.example.obr.RISCTree.AddW.type
4980 ===> org.kiama.example.lambda3.AST.Var.x: org.kiama.rewriting.NominalAST.Name
10285 ===> org.kiama.example.repmin.Fork.productIterator: Iterator[Any]
3459 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productElement(x$1: Int): Any
8478 ===> org.kiama.example.obr.RISCTree.IntDatum.num: Int
2388 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.toString(): String
5697 ===> org.kiama.example.oberon0.L0.c.CNotExp.toString(): String
11363 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.hashCode(): Int
18 ===> org.kiama.attribution.Attributable.firstChild[T]: T
6186 ===> org.kiama.example.oberon0.L1.c.CIfStatement.toString(): String
12130 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12518 ===> org.kiama.util.ParserUtilitiesTests.Tup4.toString(): String
6652 ===> org.kiama.example.oberon0.L3.source.ProcDecl.hashCode(): Int
8322 ===> org.kiama.example.obr.RISCTree.Write.<init>(): org.kiama.example.obr.RISCTree.Write.type
2898 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.productPrefix: String
8713 ===> org.kiama.example.obr.SPARCTree.SPARCNode.<init>(): org.kiama.example.obr.SPARCTree.SPARCNode
7167 ===> org.kiama.example.oberon0.base.c.CIntType.hashCode(): Int
10397 ===> org.kiama.example.til.AST.IfThen.productPrefix: String
6579 ===> org.kiama.example.oberon0.L3.c.CStrExp.<init>(s: String): org.kiama.example.oberon0.L3.c.CStrExp
8828 ===> org.kiama.example.obr.SPARCTree.Ret.productIterator: Iterator[Any]
10396 ===> org.kiama.example.til.AST.IfThen.copy$default$2: Seq[org.kiama.example.til.AST.Stat] @scala.annotation.unchecked.uncheckedVariance
3921 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.equals(x$1: Any): Boolean
3894 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.apply(): org.kiama.example.iswim.secd.SECDBase.UnexpectedExit
1622 ===> org.kiama.example.imperative.AST.Neg.productElement(x$1: Int): Any
4251 ===> org.kiama.example.json.JSONTree.JName.copy(s: String): org.kiama.example.json.JSONTree.JName
7043 ===> org.kiama.example.oberon0.base.TestDriver.maxlanglevel: Int
7391 ===> org.kiama.example.oberon0.drivers.A3Tests.<init>(): org.kiama.example.oberon0.drivers.A3Tests
2350 ===> org.kiama.example.iswim.compiler.Syntax.Binding.toString(): String
2123 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productArity: Int
1977 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productArity: Int
9753 ===> org.kiama.example.picojava.AbstractSyntax.Dot.<init>(ObjectReference: org.kiama.example.picojava.AbstractSyntax.Access,IdnUse: org.kiama.example.picojava.AbstractSyntax.IdnUse): org.kiama.example.picojava.AbstractSyntax.Dot
6244 ===> org.kiama.example.oberon0.L1.source.IfStatement.productElement(x$1: Int): Any
8940 ===> org.kiama.example.obr.SPARCTree.CmpneW.productPrefix: String
10938 ===> org.kiama.output.LeftAssoc.productElement(x$1: Int): Any
8522 ===> org.kiama.example.obr.RISCTree.MulW.canEqual(x$1: Any): Boolean
12065 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
537 ===> org.kiama.example.RISC.RISCISA.MVN.toString(): String
7040 ===> org.kiama.example.oberon0.base.TranslatingDriver.consumeast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
5388 ===> org.kiama.example.oberon0.L0.c.CAssignment.productIterator: Iterator[Any]
3039 ===> org.kiama.example.iswim.secd.HeapOps.Put.apply(): org.kiama.example.iswim.secd.HeapOps.Put
5902 ===> org.kiama.example.oberon0.L0.source.GtExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.GtExp
3446 ===> org.kiama.example.iswim.secd.SECDBase.instToCodeTree(inst: org.kiama.example.iswim.secd.SECDBase.Instruction): org.kiama.example.iswim.secd.SECDBase.CodeTree
10914 ===> org.kiama.machine.Machine.performUpdates: Boolean
9743 ===> org.kiama.example.picojava.AbstractSyntax.Use.hashCode(): Int
1489 ===> org.kiama.example.dataflow.Foreach.<init>(): org.kiama.example.dataflow.Foreach.type
10461 ===> org.kiama.example.til.AST.For.productArity: Int
10536 ===> org.kiama.example.til.AST.Var.equals(x$1: Any): Boolean
991 ===> org.kiama.example.RISC.RISCISA.LDB.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.LDB
431 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productArity: Int
11051 ===> org.kiama.output.PrettyPrinterBase.product(p: Any): PrettyPrinterBase.this.Doc
5866 ===> org.kiama.example.oberon0.L0.source.LtExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
10430 ===> org.kiama.example.til.AST.IfElse.readResolve(): Object
7097 ===> org.kiama.example.oberon0.base.c.CInclude.unapply(x$0: org.kiama.example.oberon0.base.c.CInclude): Option[String]
8466 ===> org.kiama.example.obr.RISCTree.DivW.productArity: Int
8787 ===> org.kiama.example.obr.SPARCTree.Jmp.unapply(x$0: org.kiama.example.obr.SPARCTree.Jmp): Option[org.kiama.example.obr.SPARCTree.Label]
3987 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.copy(s: SECDBase.this.Stack,e: SECDBase.this.Environment,c: org.kiama.example.iswim.secd.SECDBase.Code,d: SECDBase.this.Dump): SECDBase.this.ContValue
7647 ===> org.kiama.example.obr.ObrTree.ForStmt.idn: org.kiama.example.obr.ObrTree.Identifier
11929 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4481 ===> org.kiama.example.lambda.AST.Sub.readResolve(): Object
6692 ===> org.kiama.example.oberon0.L3.source.FPSection.idndefs: List[org.kiama.example.oberon0.base.source.IdnDef]
4802 ===> org.kiama.example.lambda2.Evaluators.mechanism: String
9444 ===> org.kiama.example.obr.SyntaxAnalysis.<init>(): org.kiama.example.obr.SyntaxAnalysis
6154 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.$init$(): Unit
9230 ===> org.kiama.example.obr.SymbolTable.Variable.hashCode(): Int
8521 ===> org.kiama.example.obr.RISCTree.MulW.productIterator: Iterator[Any]
4841 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6293 ===> org.kiama.example.oberon0.L2.Lifter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
528 ===> org.kiama.example.RISC.RISCISA.MOVI.unapply(x$0: org.kiama.example.RISC.RISCISA.MOVI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
4077 ===> org.kiama.example.iswim.secd.StackOps.Pop.productPrefix: String
8073 ===> org.kiama.example.obr.ObrTree.OrExp.left: org.kiama.example.obr.ObrTree.Expression
8088 ===> org.kiama.example.obr.ObrTree.OrExp.toString(): String
10972 ===> org.kiama.output.Postfix.<init>(): org.kiama.output.Postfix.type
4528 ===> org.kiama.example.lambda2.AST.Var.i: org.kiama.example.lambda2.AST.Idn
5962 ===> org.kiama.example.oberon0.L0.source.SubExp.right: org.kiama.example.oberon0.L0.source.Expression
6671 ===> org.kiama.example.oberon0.L3.source.VarMode.<init>(): org.kiama.example.oberon0.L3.source.VarMode.type
961 ===> org.kiama.example.RISC.RISCISA.XORI.toString(): String
11586 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
2595 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productArity: Int
8846 ===> org.kiama.example.obr.SPARCTree.StW.productElement(x$1: Int): Any
6940 ===> org.kiama.example.oberon0.L4.source.FieldList.hashCode(): Int
2396 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetStmt
11252 ===> org.kiama.rewriting.CallbackRewriter.rulefs(f: org.kiama.==>[CallbackRewriter.this.Term,CallbackRewriter.this.Strategy]): CallbackRewriter.this.Strategy
5551 ===> org.kiama.example.oberon0.L0.c.CSubExp.productIterator: Iterator[Any]
7750 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productElement(x$1: Int): Any
12001 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2773 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.<init>(): org.kiama.example.iswim.secd.BooleanOps.PushTrue.type
5217 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.unapply(x$0: SymbolTable.this.Module): Option[(String, org.kiama.example.oberon0.base.source.ModuleDecl)]
10487 ===> org.kiama.example.til.AST.Read.apply(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Read
4322 ===> org.kiama.example.json.JSONTree.JTrue.productIterator: Iterator[Any]
1741 ===> org.kiama.example.imperative.AST.Seqn.copy$default$1: Seq[org.kiama.example.imperative.AST.Stmt] @scala.annotation.unchecked.uncheckedVariance
2398 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Binding] @scala.annotation.unchecked.uncheckedVariance
6602 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productArity: Int
12350 ===> org.kiama.util.Environments.UnknownEntity.apply(): Environments.this.UnknownEntity
405 ===> org.kiama.attribution.DynamicAttributionTests.Pair.toString(): String
2216 ===> org.kiama.example.iswim.compiler.Syntax.Greater.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
2620 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.equals(x$1: Any): Boolean
2131 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.toString(): String
7019 ===> org.kiama.example.oberon0.base.TransformingDriver.$init$(): Unit
3620 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.canEqual(x$1: Any): Boolean
8461 ===> org.kiama.example.obr.RISCTree.DivW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.DivW
7546 ===> org.kiama.example.obr.ObrTree.EnumVar.productPrefix: String
10462 ===> org.kiama.example.til.AST.For.productElement(x$1: Int): Any
7485 ===> org.kiama.example.obr.ObrTree.BoolVar.idn: org.kiama.example.obr.ObrTree.Identifier
1861 ===> org.kiama.example.imperative.ASTNonCase.Add.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
10745 ===> org.kiama.example.transform.AST.VarDecl.name: String
8574 ===> org.kiama.example.obr.RISCTree.RemW.productIterator: Iterator[Any]
8062 ===> org.kiama.example.obr.ObrTree.NotExp.productElement(x$1: Int): Any
466 ===> org.kiama.example.RISC.RISC.<init>(code: org.kiama.example.RISC.RISCISA.Code,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): org.kiama.example.RISC.RISC
12415 ===> org.kiama.util.ParserUtilities.parseString[T](parser: ParserUtilities.this.Parser[T],str: String): Either[T,String]
8986 ===> org.kiama.example.obr.SPARCTree.CmpltW.<init>(): org.kiama.example.obr.SPARCTree.CmpltW.type
4816 ===> org.kiama.example.lambda2.Lambda.help: Unit
11213 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productArity: Int
8288 ===> org.kiama.example.obr.RISCTree.Ret.apply(): org.kiama.example.obr.RISCTree.Ret
4018 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.apply(pn: org.kiama.example.iswim.secd.SECDBase.Name,bdy: org.kiama.example.iswim.secd.SECDBase.Code,envir: SECDBase.this.Environment): SECDBase.this.ClosureValue
3042 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.<init>(): org.kiama.example.iswim.secd.HeapOps.RefTypeValue
9078 ===> org.kiama.example.obr.SPARCTree.NegW.unapply(x$0: org.kiama.example.obr.SPARCTree.NegW): Option[org.kiama.example.obr.SPARCTree.Datum]
5454 ===> org.kiama.example.oberon0.L0.c.CLtExp.toString(): String
8909 ===> org.kiama.example.obr.SPARCTree.Cond.equals(x$1: Any): Boolean
10838 ===> org.kiama.example.transform.AST.Num.apply(value: Int): org.kiama.example.transform.AST.Num
954 ===> org.kiama.example.RISC.RISCISA.XORI.productArity: Int
7144 ===> org.kiama.example.oberon0.base.c.CBlock.copy$default$1: List[org.kiama.example.oberon0.base.c.CDeclaration] @scala.annotation.unchecked.uncheckedVariance
3383 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.canEqual(x$1: Any): Boolean
12238 ===> org.kiama.rewriting.UniplateTests.reciprocal: org.kiama.example.imperative.AST.Exp => org.kiama.example.imperative.AST.Exp
4311 ===> org.kiama.example.json.JSONTree.JNumber.equals(x$1: Any): Boolean
5525 ===> org.kiama.example.oberon0.L0.c.CAddExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAddExp
7528 ===> org.kiama.example.obr.ObrTree.RecordVar.productArity: Int
637 ===> org.kiama.example.RISC.RISCISA.SUBI.im: org.kiama.example.RISC.RISCISA.Imm
9508 ===> org.kiama.example.oneohonecompanies.Company.Dept.hashCode(): Int
6847 ===> org.kiama.example.oberon0.L4.c.CIndexExp.<init>(): org.kiama.example.oberon0.L4.c.CIndexExp.type
3408 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.unapply(x$0: RecordOps.this.RecordValue): Option[List[org.kiama.example.iswim.secd.SECDBase.Value]]
10348 ===> org.kiama.example.til.AST.Program.equals(x$1: Any): Boolean
2642 ===> org.kiama.example.iswim.compiler.Syntax.Match.apply(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,clauses: List[org.kiama.example.iswim.compiler.Syntax.MatchClause]): org.kiama.example.iswim.compiler.Syntax.Match
9196 ===> org.kiama.example.obr.SemanticAnalysis.divideByZeroExn: Int
10025 ===> org.kiama.example.prolog.PrologTree.Fact.productArity: Int
10728 ===> org.kiama.example.transform.AST.Program.copy(ops: List[(String, Int)],vars: List[org.kiama.example.transform.AST.VarDecl],expr: org.kiama.example.transform.AST.ExpR): org.kiama.example.transform.AST.Program
8568 ===> org.kiama.example.obr.RISCTree.RemW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.RemW
2779 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.copy(): org.kiama.example.iswim.secd.BooleanOps.PushFalse
2865 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productArity: Int
4128 ===> org.kiama.example.iswim.secd.StackOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
5720 ===> org.kiama.example.oberon0.L0.c.PrettyPrinter.basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType): PrettyPrinter.this.Doc
6734 ===> org.kiama.example.oberon0.L4.CCodeGenerator.$init$(): Unit
9509 ===> org.kiama.example.oneohonecompanies.Company.Dept.toString(): String
4928 ===> org.kiama.example.lambda2.PrettyPrinter.showtypedecl(t: org.kiama.example.lambda2.AST.Type): org.kiama.example.lambda2.PrettyPrinter.Doc
3818 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
4457 ===> org.kiama.example.lambda.AST.App.toString(): String
8057 ===> org.kiama.example.obr.ObrTree.NotExp.<init>(exp: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NotExp
10795 ===> org.kiama.example.transform.AST.Factor.equals(x$1: Any): Boolean
10532 ===> org.kiama.example.til.AST.Var.productIterator: Iterator[Any]
1859 ===> org.kiama.example.imperative.ASTNonCase.Binary.deconstruct: List[org.kiama.example.imperative.ASTNonCase.Exp]
2903 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.hashCode(): Int
3780 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.toString(): String
10524 ===> org.kiama.example.til.AST.Id.readResolve(): Object
11445 ===> org.kiama.rewriting.PositionedRewriterTests.o: org.kiama.rewriting.SupportPositionedRewriterTests.One
3185 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.<init>(): org.kiama.example.iswim.secd.IntegerOps.Sub
9133 ===> org.kiama.example.obr.SPARCTree.SubW.unapply(x$0: org.kiama.example.obr.SPARCTree.SubW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
10957 ===> org.kiama.output.NonAssoc.productIterator: Iterator[Any]
4755 ===> org.kiama.example.lambda2.AST.App(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
7068 ===> org.kiama.example.oberon0.base.c.CProgram.copy$default$2: List[org.kiama.example.oberon0.base.c.CDeclaration] @scala.annotation.unchecked.uncheckedVariance
573 ===> org.kiama.example.RISC.RISCISA.ADD.b: org.kiama.example.RISC.RISCISA.RegNo
7065 ===> org.kiama.example.oberon0.base.c.CProgram.<init>(includes: List[org.kiama.example.oberon0.base.c.CInclude],decls: List[org.kiama.example.oberon0.base.c.CDeclaration]): org.kiama.example.oberon0.base.c.CProgram
6976 ===> org.kiama.example.oberon0.L4.source.FieldIdn.hashCode(): Int
1845 ===> org.kiama.example.imperative.ASTNonCase.Var.arity: Int
968 ===> org.kiama.example.RISC.RISCISA.LDW.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.LDW
3036 ===> org.kiama.example.iswim.secd.HeapOps.Put.equals(x$1: Any): Boolean
10258 ===> org.kiama.example.prolog.Subst.<init>(): org.kiama.example.prolog.Subst
3893 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.toString(): String
7952 ===> org.kiama.example.obr.ObrTree.IntExp.productElement(x$1: Int): Any
10889 ===> org.kiama.machine.Machine.ParamState.isUndefined(t: T): Boolean
11175 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.equals(x$1: Any): Boolean
10832 ===> org.kiama.example.transform.AST.Num.canEqual(x$1: Any): Boolean
5406 ===> org.kiama.example.oberon0.L0.c.CEqExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
11057 ===> org.kiama.output.PrettyPrinterBase.vsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
743 ===> org.kiama.example.RISC.RISCISA.MOD.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
11666 ===> org.kiama.rewriting.Rewriter.somedownup(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
4113 ===> org.kiama.example.iswim.secd.StackOps.Swap.productPrefix: String
5798 ===> org.kiama.example.oberon0.L0.source.Assignment.exp: org.kiama.example.oberon0.L0.source.Expression
3371 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.<init>(): org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.type
3275 ===> org.kiama.example.iswim.secd.IntegerOps.$init$(): Unit
4935 ===> org.kiama.example.lambda2.Reduce.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2399 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productPrefix: String
5334 ===> org.kiama.example.oberon0.L0.c.CNamedType.canEqual(x$1: Any): Boolean
377 ===> org.kiama.attribution.Decorators.Chain.readResolve(): Object
6450 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productArity: Int
9406 ===> org.kiama.example.obr.SymbolTable.EnumTypes.equals(x$1: Any): Boolean
3754 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.apply(): org.kiama.example.iswim.secd.SECDBase.TypeTypeValue
4794 ===> org.kiama.example.lambda2.Evaluator.FreshVar.apply(): org.kiama.example.lambda2.AST.Idn
244 ===> org.kiama.attribution.AttributionTests.SetTree.toString(): String
3573 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productElement(x$1: Int): Any
1140 ===> org.kiama.example.RISC.RISCISA.WRH.unapply(x$0: org.kiama.example.RISC.RISCISA.WRH): Option[org.kiama.example.RISC.RISCISA.RegNo]
6496 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.equals(x$1: Any): Boolean
7392 ===> org.kiama.example.oberon0.drivers.A4Phases.$init$(): Unit
11745 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2479 ===> org.kiama.example.iswim.compiler.Syntax.Return.apply(res: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Return
521 ===> org.kiama.example.RISC.RISCISA.MOVI.productIterator: Iterator[Any]
1628 ===> org.kiama.example.imperative.AST.Neg.<init>(): org.kiama.example.imperative.AST.Neg.type
6280 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9583 ===> org.kiama.example.oneohonecompanies.OneOhOneTests.onlymanager: org.kiama.example.oneohonecompanies.Company.Company
1504 ===> org.kiama.example.dataflow.For.copy$default$1: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
7458 ===> org.kiama.example.obr.ObrTree.IntVar.productIterator: Iterator[Any]
8687 ===> org.kiama.example.obr.SPARCEncoder.reg: org.kiama.example.obr.SPARCTree.Datum => Int
11792 ===> org.kiama.rewriting.RewriterTests.Num.<init>(i: Int): Num
12372 ===> org.kiama.util.IO.FileNotFoundException.productIterator: Iterator[Any]
5807 ===> org.kiama.example.oberon0.L0.source.Assignment.canEqual(x$1: Any): Boolean
12596 ===> org.kiama.util.WhitespacePositionedParserUtilities.$init$(): Unit
8989 ===> org.kiama.example.obr.SPARCTree.CmpltW.unapply(x$0: org.kiama.example.obr.SPARCTree.CmpltW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
7751 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productIterator: Iterator[Any]
12038 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6073 ===> org.kiama.example.oberon0.L0.source.AndExp.equals(x$1: Any): Boolean
11367 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.toString(): String
5727 ===> org.kiama.example.oberon0.L0.source.ConstDecl.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
1428 ===> org.kiama.example.dataflow.DataflowAST.Block.copy(stms: List[org.kiama.example.dataflow.DataflowAST.Stm]): org.kiama.example.dataflow.DataflowAST.Block
3599 ===> org.kiama.example.iswim.secd.SECDBase.Resume.<init>(): org.kiama.example.iswim.secd.SECDBase.Resume
10229 ===> org.kiama.example.prolog.SymbolTable.ListType.copy(): org.kiama.example.prolog.SymbolTable.ListType
5360 ===> org.kiama.example.oberon0.L0.c.CInitDecl.unapply(x$0: org.kiama.example.oberon0.L0.c.CInitDecl): Option[(org.kiama.example.oberon0.base.c.CVarDecl, org.kiama.example.oberon0.base.c.CExpression)]
7139 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.readResolve(): Object
25 ===> org.kiama.attribution.Attributable.setNodeChildConnections(node: Any): Unit
2808 ===> org.kiama.example.iswim.secd.BooleanOps.Test.<init>(): org.kiama.example.iswim.secd.BooleanOps.Test.type
4983 ===> org.kiama.example.lambda3.AST.Var.copy(x: org.kiama.rewriting.NominalAST.Name): org.kiama.example.lambda3.AST.Var
4942 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3500 ===> org.kiama.example.iswim.secd.SECDBase.App.apply(): org.kiama.example.iswim.secd.SECDBase.App
9596 ===> org.kiama.example.oneohonecompanies.SampleCompany.erik: org.kiama.example.oneohonecompanies.Company.Employee
12167 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1801 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
769 ===> org.kiama.example.RISC.RISCISA.MODI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
11948 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7415 ===> org.kiama.example.obr.SemanticDriver.<init>(): org.kiama.example.obr.SemanticDriver
10064 ===> org.kiama.example.prolog.PrologTree.Var.productElement(x$1: Int): Any
2860 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.readResolve(): Object
1824 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
10334 ===> org.kiama.example.til.TransformingMain.transform(ast: org.kiama.example.til.AST.Program): org.kiama.example.til.AST.Program
2036 ===> org.kiama.example.iswim.compiler.Syntax.Negate.toString(): String
8811 ===> org.kiama.example.obr.SPARCTree.Read.productArity: Int
6241 ===> org.kiama.example.oberon0.L1.source.IfStatement.copy$default$4: Option[org.kiama.example.oberon0.base.source.Block] @scala.annotation.unchecked.uncheckedVariance
2386 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.canEqual(x$1: Any): Boolean
8143 ===> org.kiama.example.obr.ObrTree.StarExp.equals(x$1: Any): Boolean
237 ===> org.kiama.attribution.AttributionTests.SetTree.productElement(x$1: Int): Any
5597 ===> org.kiama.example.oberon0.L0.c.CMulExp.toString(): String
7717 ===> org.kiama.example.obr.ObrTree.ReturnStmt.hashCode(): Int
5144 ===> org.kiama.example.lambda3.AST.SwapQuery.canEqual(x$1: Any): Boolean
1381 ===> org.kiama.example.dataflow.DataflowAST.Assign.<init>(): org.kiama.example.dataflow.DataflowAST.Assign.type
1652 ===> org.kiama.example.imperative.AST.Add.toString(): String
10541 ===> org.kiama.example.til.AST.Var.readResolve(): Object
2013 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productIterator: Iterator[Any]
4144 ===> org.kiama.example.iswim.secd.StringOps.PushString.<init>(): org.kiama.example.iswim.secd.StringOps.PushString.type
1510 ===> org.kiama.example.dataflow.For.<init>(init: org.kiama.example.dataflow.DataflowAST.Stm,c: org.kiama.example.dataflow.DataflowAST.Stm,inc: org.kiama.example.dataflow.DataflowAST.Stm,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.For
9432 ===> org.kiama.example.obr.SymbolTable.UnknownType.productArity: Int
4104 ===> org.kiama.example.iswim.secd.StackOps.Dup.apply(n: Int): org.kiama.example.iswim.secd.StackOps.Dup
12337 ===> org.kiama.util.Environments.MultipleEntity.readResolve(): Object
11062 ===> org.kiama.output.PrettyPrinterBase.lsep2(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
2065 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productPrefix: String
258 ===> org.kiama.attribution.AttributionTests.GenSeqTree.toString(): String
9417 ===> org.kiama.example.obr.SymbolTable.ExnType.productArity: Int
8286 ===> org.kiama.example.obr.RISCTree.Ret.<init>(): org.kiama.example.obr.RISCTree.Ret.type
6471 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productIterator: Iterator[Any]
7258 ===> org.kiama.example.oberon0.base.c.CIntExp.unapply(x$0: org.kiama.example.oberon0.base.c.CIntExp): Option[Int]
8924 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productIterator: Iterator[Any]
9785 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.BooleanLiteral): Option[String]
6889 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.toString(): String
8788 ===> org.kiama.example.obr.SPARCTree.Jmp.readResolve(): Object
4743 ===> org.kiama.example.lambda2.AST.SubOp.hashCode(): Int
11047 ===> org.kiama.output.PrettyPrinterBase.plist$default$3: PrettyPrinterBase.this.PrettyPrintable => PrettyPrinterBase.this.Doc @scala.annotation.unchecked.uncheckedVariance
11589 ===> org.kiama.rewriting.Rewriter.$anon.allTraversable[CC[_] <: Traversable[Rewriter.this.Term]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
1053 ===> org.kiama.example.RISC.RISCISA.STB.toString(): String
6990 ===> org.kiama.example.oberon0.base.CCodeGenerator.translate(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.c.CProgram
10391 ===> org.kiama.example.til.AST.IfThen.e: org.kiama.example.til.AST.Exp
7459 ===> org.kiama.example.obr.ObrTree.IntVar.canEqual(x$1: Any): Boolean
7807 ===> org.kiama.example.obr.ObrTree.Catch.canEqual(x$1: Any): Boolean
9139 ===> org.kiama.example.obr.SPARCTree.Local.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
10836 ===> org.kiama.example.transform.AST.Num.<init>(): org.kiama.example.transform.AST.Num.type
8272 ===> org.kiama.example.obr.RISCTree.LabelDef.toString(): String
2254 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productArity: Int
4365 ===> org.kiama.example.json.Driver.process(ast: org.kiama.example.json.JSONTree.JValue,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
10046 ===> org.kiama.example.prolog.PrologTree.Rule.productIterator: Iterator[Any]
2135 ===> org.kiama.example.iswim.compiler.Syntax.Equal.l: org.kiama.example.iswim.compiler.Syntax.Expr
9299 ===> org.kiama.example.obr.SymbolTable.IntType.productArity: Int
12364 ===> org.kiama.util.IO.<init>(): org.kiama.util.IO.type
5816 ===> org.kiama.example.oberon0.L0.source.Expression.<init>(): org.kiama.example.oberon0.L0.source.Expression
2118 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Remainder
3683 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productIterator: Iterator[Any]
4020 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.readResolve(): Object
11404 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.apply(i: Int): org.kiama.rewriting.SupportPositionalRewriterTests.Leaf
10653 ===> org.kiama.example.til.AST.Eq.r: org.kiama.example.til.AST.Exp
2304 ===> org.kiama.example.iswim.compiler.Syntax.Or.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Or
483 ===> org.kiama.example.RISC.RISC.inputoutput(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
7457 ===> org.kiama.example.obr.ObrTree.IntVar.productElement(x$1: Int): Any
8979 ===> org.kiama.example.obr.SPARCTree.CmpltW.productArity: Int
201 ===> org.kiama.attribution.AttributionTests.EitherTree.productPrefix: String
4411 ===> org.kiama.example.lambda.AST.Var.productPrefix: String
3295 ===> org.kiama.example.iswim.secd.IntegerOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
7053 ===> org.kiama.example.oberon0.base.Parser.$init$(): Unit
9979 ===> org.kiama.example.prolog.Interpreter.renamecount_$eq(x$1: Int): Unit
4629 ===> org.kiama.example.lambda2.AST.Letp.bs: List[org.kiama.example.lambda2.AST.Bind]
7970 ===> org.kiama.example.obr.ObrTree.LessExp.productArity: Int
9431 ===> org.kiama.example.obr.SymbolTable.UnknownType.productPrefix: String
11679 ===> org.kiama.rewriting.Rewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[Rewriter.this.Term,Option[Rewriter.this.Term]] with Serializable
2113 ===> org.kiama.example.iswim.compiler.Syntax.Divide.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Divide
8098 ===> org.kiama.example.obr.ObrTree.PlusExp.productPrefix: String
6087 ===> org.kiama.example.oberon0.L0.source.NegExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
1133 ===> org.kiama.example.RISC.RISCISA.WRH.productIterator: Iterator[Any]
3071 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.<init>(): HeapOps.this.RefValue.type
2807 ===> org.kiama.example.iswim.secd.BooleanOps.Test.equals(x$1: Any): Boolean
42 ===> org.kiama.attribution.AttributionBase.CircularAttribute.computed: java.util.IdentityHashMap[T,Unit]
3870 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productPrefix: String
2092 ===> org.kiama.example.iswim.compiler.Syntax.Times.<init>(): org.kiama.example.iswim.compiler.Syntax.Times.type
10297 ===> org.kiama.example.repmin.Leaf.copy(value: Int): org.kiama.example.repmin.Leaf
5412 ===> org.kiama.example.oberon0.L0.c.CEqExp.canEqual(x$1: Any): Boolean
6144 ===> org.kiama.example.oberon0.L0.source.IdnExp.productIterator: Iterator[Any]
6031 ===> org.kiama.example.oberon0.L0.source.DivExp.productIterator: Iterator[Any]
1296 ===> org.kiama.example.RISC.RISCISA.RET.copy(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RET
10040 ===> org.kiama.example.prolog.PrologTree.Rule.copy(hd: org.kiama.example.prolog.PrologTree.Term,bdy: List[org.kiama.example.prolog.PrologTree.Term]): org.kiama.example.prolog.PrologTree.Rule
11337 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{}
9547 ===> org.kiama.example.oneohonecompanies.Company.PU.hashCode(): Int
1459 ===> org.kiama.example.dataflow.DataflowAST.Return.readResolve(): Object
7824 ===> org.kiama.example.obr.ObrTree.AndExp.productArity: Int
2529 ===> org.kiama.example.iswim.compiler.Syntax.While.productArity: Int
9862 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.start: Long
10245 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productArity: Int
8392 ===> org.kiama.example.obr.RISCTree.CmpeqW.productIterator: Iterator[Any]
2091 ===> org.kiama.example.iswim.compiler.Syntax.Times.equals(x$1: Any): Boolean
8034 ===> org.kiama.example.obr.ObrTree.NegExp.apply(exp: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NegExp
5504 ===> org.kiama.example.oberon0.L0.c.CGeExp.priority: Int
3236 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.canEqual(x$1: Any): Boolean
10523 ===> org.kiama.example.til.AST.Id.unapply(x$0: org.kiama.example.til.AST.Id): Option[String]
5 ===> org.kiama.attribution.Attributable.isRoot: Boolean
7433 ===> org.kiama.example.obr.ObrTree.ObrInt.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
2726 ===> org.kiama.example.iswim.compiler.Syntax.Assign.hashCode(): Int
401 ===> org.kiama.attribution.DynamicAttributionTests.Pair.hashCode(): Int
9563 ===> org.kiama.example.oneohonecompanies.Company.DU.canEqual(x$1: Any): Boolean
9430 ===> org.kiama.example.obr.SymbolTable.UnknownType.copy(): org.kiama.example.obr.SymbolTable.UnknownType
12034 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8082 ===> org.kiama.example.obr.ObrTree.OrExp.productIterator: Iterator[Any]
6462 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.varr: SymbolTable.this.Variable
9969 ===> org.kiama.example.prolog.Interpreter.MatchGoal.toString(): String
2819 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.canEqual(x$1: Any): Boolean
3932 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productElement(x$1: Int): Any
10455 ===> org.kiama.example.til.AST.For.copy(i: org.kiama.example.til.AST.Id,f: org.kiama.example.til.AST.Exp,t: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.For
9839 ===> org.kiama.example.picojava.NullObjects.<init>(): org.kiama.example.picojava.NullObjects.type
10468 ===> org.kiama.example.til.AST.For.<init>(): org.kiama.example.til.AST.For.type
12373 ===> org.kiama.util.IO.FileNotFoundException.canEqual(x$1: Any): Boolean
3163 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.toString(): String
8079 ===> org.kiama.example.obr.ObrTree.OrExp.productPrefix: String
1501 ===> org.kiama.example.dataflow.DataflowForeach.$anonfun.isDefinedAt(x$1: org.kiama.example.dataflow.DataflowAST.Stm): Boolean
1153 ===> org.kiama.example.RISC.RISCISA.WRL.toString(): String
4853 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8125 ===> org.kiama.example.obr.ObrTree.SlashExp.<init>(): org.kiama.example.obr.ObrTree.SlashExp.type
8479 ===> org.kiama.example.obr.RISCTree.IntDatum.<init>(num: Int): org.kiama.example.obr.RISCTree.IntDatum
4191 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productIterator: Iterator[Any]
7998 ===> org.kiama.example.obr.ObrTree.MinusExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.MinusExp
12542 ===> org.kiama.util.ParserUtilitiesTests.Tup5.hashCode(): Int
9413 ===> org.kiama.example.obr.SymbolTable.ExnType.storage: Int
670 ===> org.kiama.example.RISC.RISCISA.MUL.hashCode(): Int
2053 ===> org.kiama.example.iswim.compiler.Syntax.Plus.equals(x$1: Any): Boolean
8628 ===> org.kiama.example.obr.RISCTree.Local.productArity: Int
2513 ===> org.kiama.example.iswim.compiler.Syntax.If.canEqual(x$1: Any): Boolean
7839 ===> org.kiama.example.obr.ObrTree.BoolExp.copy$default$1: Boolean @scala.annotation.unchecked.uncheckedVariance
10496 ===> org.kiama.example.til.AST.Write.productElement(x$1: Int): Any
349 ===> org.kiama.attribution.AttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[AttributionTests.this.Tree,Int] with Serializable
4044 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productElement(x$1: Int): Any
1406 ===> org.kiama.example.dataflow.DataflowAST.If.tru: org.kiama.example.dataflow.DataflowAST.Stm
9541 ===> org.kiama.example.oneohonecompanies.Company.PU.copy$default$1: org.kiama.example.oneohonecompanies.Company.Employee @scala.annotation.unchecked.uncheckedVariance
458 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.applyOrElse[A1 <: DynamicAttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
6598 ===> org.kiama.example.oberon0.L3.c.CAddrExp.op: String
6646 ===> org.kiama.example.oberon0.L3.source.ProcDecl.copy$default$4: org.kiama.example.oberon0.base.source.IdnUse @scala.annotation.unchecked.uncheckedVariance
10223 ===> org.kiama.example.prolog.SymbolTable.IntegerType.toString(): String
12604 ===> org.kiama.util.REPLBase.processline(line: String): Unit
531 ===> org.kiama.example.RISC.RISCISA.MVN.b: org.kiama.example.RISC.RISCISA.RegNo
11739 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11900 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6477 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.apply(mode: org.kiama.example.oberon0.L3.source.Mode,varr: SymbolTable.this.Variable): SymbolTable.this.Parameter
6744 ===> org.kiama.example.oberon0.L4.Parser.lhsDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
7674 ===> org.kiama.example.obr.ObrTree.IfStmt.copy(cond: org.kiama.example.obr.ObrTree.Expression,thens: List[org.kiama.example.obr.ObrTree.Statement],elses: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.IfStmt
4992 ===> org.kiama.example.lambda3.AST.Var.<init>(): org.kiama.example.lambda3.AST.Var.type
11189 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
11769 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2364 ===> org.kiama.example.iswim.compiler.Syntax.Let.productArity: Int
5569 ===> org.kiama.example.oberon0.L0.c.COrExp.productArity: Int
2031 ===> org.kiama.example.iswim.compiler.Syntax.Negate.canEqual(x$1: Any): Boolean
4876 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
12185 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8717 ===> org.kiama.example.obr.SPARCTree.SPARC.copy(insns: List[org.kiama.example.obr.SPARCTree.Item],memsize: Int): org.kiama.example.obr.SPARCTree.SPARC
9056 ===> org.kiama.example.obr.SPARCTree.MulW.toString(): String
8643 ===> org.kiama.example.obr.RISCTree.Indexed.copy(base: org.kiama.example.obr.RISCTree.Local,offset: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Indexed
10855 ===> org.kiama.example.transform.AST.Var.apply(name: String): org.kiama.example.transform.AST.Var
6738 ===> org.kiama.example.oberon0.L4.CCodeGenerator.translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode): org.kiama.example.oberon0.base.c.CExpression
6189 ===> org.kiama.example.oberon0.L1.c.CIfStatement.readResolve(): Object
10295 ===> org.kiama.example.repmin.Leaf.value: Int
11052 ===> org.kiama.output.PrettyPrinterBase.sep(ds: Seq[PrettyPrinterBase.this.Doc]): PrettyPrinterBase.this.Doc
8234 ===> org.kiama.example.obr.RISCTree.Bne.hashCode(): Int
6416 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translateFormalParam(m: org.kiama.example.oberon0.L3.source.Mode,i: String,t: CCodeGenerator.this.Type): org.kiama.example.oberon0.base.c.CDeclaration
7560 ===> org.kiama.example.obr.ObrTree.EnumConst.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.EnumConst
7038 ===> org.kiama.example.oberon0.base.TranslatingDriver.resetflags(): Unit
8789 ===> org.kiama.example.obr.SPARCTree.LabelDef.lab: org.kiama.example.obr.SPARCTree.Label
4375 ===> org.kiama.example.json.Rewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Double] with Serializable
8773 ===> org.kiama.example.obr.SPARCTree.Jmp.<init>(dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Jmp
8946 ===> org.kiama.example.obr.SPARCTree.CmpneW.toString(): String
5740 ===> org.kiama.example.oberon0.L0.source.ConstDecl.readResolve(): Object
3449 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.pn: org.kiama.example.iswim.secd.SECDBase.Name
10773 ===> org.kiama.example.transform.AST.BinExpR.productElement(x$1: Int): Any
8546 ===> org.kiama.example.obr.RISCTree.NegW.unapply(x$0: org.kiama.example.obr.RISCTree.NegW): Option[org.kiama.example.obr.RISCTree.Datum]
11945 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1543 ===> org.kiama.example.dataflow.DataflowTests.<init>(): org.kiama.example.dataflow.DataflowTests
8624 ===> org.kiama.example.obr.RISCTree.Local.<init>(offset: Int): org.kiama.example.obr.RISCTree.Local
10463 ===> org.kiama.example.til.AST.For.productIterator: Iterator[Any]
9914 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.toString(): String
5887 ===> org.kiama.example.oberon0.L0.source.LeExp.productPrefix: String
3967 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.hashCode(): Int
3467 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.apply(fn: Option[org.kiama.example.iswim.secd.SECDBase.Name],pn: org.kiama.example.iswim.secd.SECDBase.Name,bdy: org.kiama.example.iswim.secd.SECDBase.CodeSegment): org.kiama.example.iswim.secd.SECDBase.FunctionSpec
2109 ===> org.kiama.example.iswim.compiler.Syntax.Divide.toString(): String
10431 ===> org.kiama.example.til.AST.While.e: org.kiama.example.til.AST.Exp
1080 ===> org.kiama.example.RISC.RISCISA.PSH.productArity: Int
7107 ===> org.kiama.example.oberon0.base.c.CVarDecl.productArity: Int
2492 ===> org.kiama.example.iswim.compiler.Syntax.Apply.canEqual(x$1: Any): Boolean
6801 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.readResolve(): Object
6814 ===> org.kiama.example.oberon0.L4.TypeAnalyser.tipeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
9844 ===> org.kiama.example.picojava.PredefinedTypes.getPredefinedTypeList: org.kiama.example.picojava.AbstractSyntax.Program => Seq[org.kiama.example.picojava.AbstractSyntax.TypeDecl]
6389 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
6379 ===> org.kiama.example.oberon0.L2.source.ValCond.equals(x$1: Any): Boolean
6952 ===> org.kiama.example.oberon0.L4.source.FieldExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
5014 ===> org.kiama.example.lambda3.AST.App.unapply(x$0: org.kiama.example.lambda3.AST.App): Option[(org.kiama.example.lambda3.AST.Exp, org.kiama.example.lambda3.AST.Exp)]
3647 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.copy$default$1: org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue @scala.annotation.unchecked.uncheckedVariance
6873 ===> org.kiama.example.oberon0.L4.c.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
10686 ===> org.kiama.example.til.AST.Ne.toString(): String
2703 ===> org.kiama.example.iswim.compiler.Syntax.Val.productArity: Int
3022 ===> org.kiama.example.iswim.secd.HeapOps.Get.<init>(): org.kiama.example.iswim.secd.HeapOps.Get.type
4115 ===> org.kiama.example.iswim.secd.StackOps.Swap.productElement(x$1: Int): Any
10060 ===> org.kiama.example.prolog.PrologTree.Var.copy(s: String): org.kiama.example.prolog.PrologTree.Var
5894 ===> org.kiama.example.oberon0.L0.source.LeExp.equals(x$1: Any): Boolean
7534 ===> org.kiama.example.obr.ObrTree.RecordVar.equals(x$1: Any): Boolean
7017 ===> org.kiama.example.oberon0.base.Driver.processast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): org.kiama.example.oberon0.base.source.ModuleDecl
5420 ===> org.kiama.example.oberon0.L0.c.CEqExp.readResolve(): Object
2280 ===> org.kiama.example.iswim.compiler.Syntax.Not.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Not
11581 ===> org.kiama.rewriting.Rewriter.$anon.childProduct(p: Product): Option[Rewriter.this.Term]
192 ===> org.kiama.attribution.AttributionTests.Unused.<init>(): AttributionTests.this.Unused.type
7713 ===> org.kiama.example.obr.ObrTree.ReturnStmt.productArity: Int
667 ===> org.kiama.example.RISC.RISCISA.MUL.productElement(x$1: Int): Any
5899 ===> org.kiama.example.oberon0.L0.source.LeExp.readResolve(): Object
1453 ===> org.kiama.example.dataflow.DataflowAST.Return.toString(): String
4793 ===> org.kiama.example.lambda2.Evaluator.FreshVar.count_$eq(x$1: Int): Unit
3951 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.equals(x$1: Any): Boolean
6705 ===> org.kiama.example.oberon0.L3.source.FPSection.toString(): String
4696 ===> org.kiama.example.lambda2.AST.FunType.equals(x$1: Any): Boolean
11961 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12097 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11689 ===> org.kiama.rewriting.Rewriter.everywheretd(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
6824 ===> org.kiama.example.oberon0.L4.c.CRecordType.canEqual(x$1: Any): Boolean
9127 ===> org.kiama.example.obr.SPARCTree.SubW.hashCode(): Int
656 ===> org.kiama.example.RISC.RISCISA.MUL.a: org.kiama.example.RISC.RISCISA.RegNo
7246 ===> org.kiama.example.oberon0.base.c.CIntExp.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
10309 ===> org.kiama.example.repmin.Leaf.apply(value: Int): org.kiama.example.repmin.Leaf
6844 ===> org.kiama.example.oberon0.L4.c.CIndexExp.hashCode(): Int
3915 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productPrefix: String
7697 ===> org.kiama.example.obr.ObrTree.LoopStmt.productElement(x$1: Int): Any
928 ===> org.kiama.example.RISC.RISCISA.XOR.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
11853 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5571 ===> org.kiama.example.oberon0.L0.c.COrExp.productIterator: Iterator[Any]
1223 ===> org.kiama.example.RISC.RISCISA.BGE.<init>(): org.kiama.example.RISC.RISCISA.BGE.type
11697 ===> org.kiama.rewriting.Rewriter.and(s1: => Rewriter.this.Strategy,s2: => Rewriter.this.Strategy): Rewriter.this.Strategy
6252 ===> org.kiama.example.oberon0.L1.source.IfStatement.apply(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block,elsifs: List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)],optelse: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.L1.source.IfStatement
3924 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.apply(): org.kiama.example.iswim.secd.SECDBase.MalformedInstruction
5150 ===> org.kiama.example.lambda3.AST.SwapQuery.apply(tr: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name),e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.SwapQuery
284 ===> org.kiama.attribution.AttributionTests.PairTree.copy(p: (AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.PairTree
6287 ===> org.kiama.example.oberon0.L2.Desugarer.condToExp(n: org.kiama.example.oberon0.L2.source.Condition): org.kiama.example.oberon0.L0.source.Expression
9451 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
762 ===> org.kiama.example.RISC.RISCISA.MODI.b: org.kiama.example.RISC.RISCISA.RegNo
798 ===> org.kiama.example.RISC.RISCISA.CMP.apply(b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.CMP
7816 ===> org.kiama.example.obr.ObrTree.Expression.<init>(): org.kiama.example.obr.ObrTree.Expression
5698 ===> org.kiama.example.oberon0.L0.c.CNotExp.apply(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNotExp
9625 ===> org.kiama.example.picojava.AbstractSyntax.Program.<init>(): org.kiama.example.picojava.AbstractSyntax.Program.type
7127 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productPrefix: String
1144 ===> org.kiama.example.RISC.RISCISA.WRL.copy(): org.kiama.example.RISC.RISCISA.WRL
2301 ===> org.kiama.example.iswim.compiler.Syntax.And.readResolve(): Object
967 ===> org.kiama.example.RISC.RISCISA.LDW.im: org.kiama.example.RISC.RISCISA.Imm
6798 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.toString(): String
4062 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toDoc: SECDBase.this.Doc
4741 ===> org.kiama.example.lambda2.AST.SubOp.productIterator: Iterator[Any]
2952 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productArity: Int
9344 ===> org.kiama.example.obr.SymbolTable.RecordType.fields: List[org.kiama.example.obr.ObrTree.Identifier]
4089 ===> org.kiama.example.iswim.secd.StackOps.Pop.readResolve(): Object
2940 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.apply(): org.kiama.example.iswim.secd.ConversionOps.ConversionError
11850 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12226 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.divsbyzero: org.kiama.rewriting.Rewriter.Term => Int
3445 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.readResolve(): Object
270 ===> org.kiama.attribution.AttributionTests.MapTree.productArity: Int
9390 ===> org.kiama.example.obr.SymbolTable.EnumType.equals(x$1: Any): Boolean
12501 ===> org.kiama.util.ParserUtilitiesTests.Tup3.readResolve(): Object
4589 ===> org.kiama.example.lambda2.AST.Opn.copy(e1: org.kiama.example.lambda2.AST.Exp,o: org.kiama.example.lambda2.AST.Op,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Opn
7890 ===> org.kiama.example.obr.ObrTree.FieldExp.readResolve(): Object
7190 ===> org.kiama.example.oberon0.base.c.CArrayType.size: Int
6727 ===> org.kiama.example.oberon0.L3.source.Call.toString(): String
3757 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue
11985 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
331 ===> org.kiama.attribution.AttributionTests.QuadTree.unapply(x$0: AttributionTests.this.QuadTree): Option[(AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)]
5531 ===> org.kiama.example.oberon0.L0.c.CAddExp.productIterator: Iterator[Any]
6101 ===> org.kiama.example.oberon0.L0.source.NotExp.exp: org.kiama.example.oberon0.L0.source.Expression
3273 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.DivisionByZero): Boolean
2933 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productElement(x$1: Int): Any
1944 ===> org.kiama.example.iswim.compiler.Parser.operator(op: String): Parser.this.Parser[Parser.this.Pos]
5717 ===> org.kiama.example.oberon0.L0.c.CIdnExp.readResolve(): Object
4719 ===> org.kiama.example.lambda2.AST.AddOp.<init>(): org.kiama.example.lambda2.AST.AddOp
12208 ===> org.kiama.rewriting.UniplateTests.numexp: org.kiama.example.imperative.AST.Num
65 ===> org.kiama.attribution.Attribution.$init$(): Unit
554 ===> org.kiama.example.RISC.RISCISA.MVNI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MVNI
5707 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productElement(x$1: Int): Any
10901 ===> org.kiama.machine.Machine.ScalarUpdate.key: AnyRef
10364 ===> org.kiama.example.til.AST.Decl.hashCode(): Int
5272 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.unapply(x$0: SymbolTable.this.UserType): Option[(String, org.kiama.example.oberon0.L0.source.TypeDecl)]
592 ===> org.kiama.example.RISC.RISCISA.ADD.readResolve(): Object
10839 ===> org.kiama.example.transform.AST.Num.unapply(x$0: org.kiama.example.transform.AST.Num): Option[Int]
3260 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.<init>(): org.kiama.example.iswim.secd.IntegerOps.DivisionByZero
9707 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.toString(): String
4021 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.bdy: org.kiama.example.iswim.secd.SECDBase.Code
4312 ===> org.kiama.example.json.JSONTree.JNumber.<init>(): org.kiama.example.json.JSONTree.JNumber.type
6048 ===> org.kiama.example.oberon0.L0.source.ModExp.productArity: Int
7413 ===> org.kiama.example.obr.ParserDriver.usage: String
9864 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.declRx: org.kiama.example.picojava.AbstractSyntax.VarDecl
10115 ===> org.kiama.example.prolog.PrologTree.Pred.copy$default$2: List[org.kiama.example.prolog.PrologTree.Term] @scala.annotation.unchecked.uncheckedVariance
9464 ===> org.kiama.example.obr.SyntaxAnalysis.withPos(op: SyntaxAnalysis.this.Parser[String]): SyntaxAnalysis.this.Parser[SyntaxAnalysis.this.Pos]
9606 ===> org.kiama.example.oneohonecompanies.SampleCompany.company: org.kiama.example.oneohonecompanies.Company.Company
10642 ===> org.kiama.example.til.AST.Sub.productIterator: Iterator[Any]
12528 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n4: ParserUtilitiesTests.this.Node
9165 ===> org.kiama.example.obr.SPARCTree.Indexed.toString(): String
4590 ===> org.kiama.example.lambda2.AST.Opn.copy$default$1: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
9924 ===> org.kiama.example.prolog.Interpreter.TermGoal.copy$default$1: org.kiama.example.prolog.PrologTree.Term @scala.annotation.unchecked.uncheckedVariance
3779 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.hashCode(): Int
4644 ===> org.kiama.example.lambda2.AST.Letp.toString(): String
8609 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productPrefix: String
8812 ===> org.kiama.example.obr.SPARCTree.Read.productElement(x$1: Int): Any
3058 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.<init>(): HeapOps.this.RefValue
5367 ===> org.kiama.example.oberon0.L0.c.CTypeDef.productArity: Int
4548 ===> org.kiama.example.lambda2.AST.Lam.<init>(i: org.kiama.example.lambda2.AST.Idn,t: org.kiama.example.lambda2.AST.Type,e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Lam
12278 ===> org.kiama.util.TestCompiler.filetest$default$4: String @scala.annotation.unchecked.uncheckedVariance
7449 ===> org.kiama.example.obr.ObrTree.ObrInt.readResolve(): Object
9302 ===> org.kiama.example.obr.SymbolTable.IntType.canEqual(x$1: Any): Boolean
11781 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3388 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.apply(): org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds
3127 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.<init>(): org.kiama.example.iswim.secd.IntComparisonOps.LessThan.type
4157 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.toString(): String
1714 ===> org.kiama.example.imperative.AST.Div.equals(x$1: Any): Boolean
4182 ===> org.kiama.example.iswim.secd.StringOps.StringValue.readResolve(): Object
8928 ===> org.kiama.example.obr.SPARCTree.CmpeqW.equals(x$1: Any): Boolean
1311 ===> org.kiama.example.RISC.RISCISA.Target.<init>(label: Int): org.kiama.example.RISC.RISCISA.Target
9228 ===> org.kiama.example.obr.SymbolTable.Variable.productIterator: Iterator[Any]
3155 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.copy(n: Int): org.kiama.example.iswim.secd.IntegerOps.PushInt
4508 ===> org.kiama.example.lambda.LambdaGen.generator: org.scalacheck.Arbitrary[org.kiama.example.lambda.AST.Exp]
5198 ===> org.kiama.example.oberon0.L0.Parser.lhsDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.Expression]
3401 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productIterator: Iterator[Any]
4362 ===> org.kiama.example.json.Main.<init>(): org.kiama.example.json.Main.type
4809 ===> org.kiama.example.lambda2.InnermostSubstEvaluator.<init>(): org.kiama.example.lambda2.InnermostSubstEvaluator
8301 ===> org.kiama.example.obr.RISCTree.StW.canEqual(x$1: Any): Boolean
152 ===> org.kiama.attribution.AttributionTests.Pair.productElement(x$1: Int): Any
7245 ===> org.kiama.example.oberon0.base.c.CIntExp.copy(v: Int): org.kiama.example.oberon0.base.c.CIntExp
1782 ===> org.kiama.example.imperative.AST.While.productPrefix: String
9579 ===> org.kiama.example.oneohonecompanies.Main.<init>(): org.kiama.example.oneohonecompanies.Main.type
4780 ===> org.kiama.example.lambda2.Analysis.fv: org.kiama.example.lambda2.AST.Exp => Set[org.kiama.example.lambda2.AST.Idn]
5451 ===> org.kiama.example.oberon0.L0.c.CLtExp.productIterator: Iterator[Any]
11893 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
12197 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4243 ===> org.kiama.example.json.JSONTree.JObject.equals(x$1: Any): Boolean
775 ===> org.kiama.example.RISC.RISCISA.MODI.hashCode(): Int
1818 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6961 ===> org.kiama.example.oberon0.L4.source.FieldExp.equals(x$1: Any): Boolean
6898 ===> org.kiama.example.oberon0.L4.source.IndexExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
12214 ===> org.kiama.rewriting.UniplateTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.example.imperative.AST.Idn] with Serializable
12235 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10747 ===> org.kiama.example.transform.AST.VarDecl.copy(name: String): org.kiama.example.transform.AST.VarDecl
1092 ===> org.kiama.example.RISC.RISCISA.RD.<init>(a: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RD
5055 ===> org.kiama.example.lambda3.AST.EvalQuery.e: org.kiama.example.lambda3.AST.Exp
11118 ===> org.kiama.output.PrettyPrinter.text(t: String): PrettyPrinter.this.Doc
9309 ===> org.kiama.example.obr.SymbolTable.IntType.readResolve(): Object
8341 ===> org.kiama.example.obr.RISCTree.Read.unapply(x$0: org.kiama.example.obr.RISCTree.Read): Boolean
1649 ===> org.kiama.example.imperative.AST.Add.productIterator: Iterator[Any]
761 ===> org.kiama.example.RISC.RISCISA.MODI.a: org.kiama.example.RISC.RISCISA.RegNo
11072 ===> org.kiama.output.PrettyPrinterBase.dquotes(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
760 ===> org.kiama.example.RISC.RISCISA.MOD.readResolve(): Object
1287 ===> org.kiama.example.RISC.RISCISA.BSR.<init>(): org.kiama.example.RISC.RISCISA.BSR.type
1097 ===> org.kiama.example.RISC.RISCISA.RD.productArity: Int
7291 ===> org.kiama.example.oberon0.base.source.Block.stmts: List[org.kiama.example.oberon0.base.source.Statement]
10942 ===> org.kiama.output.LeftAssoc.toString(): String
265 ===> org.kiama.attribution.AttributionTests.MapTree.m: Map[AttributionTests.this.Tree,AttributionTests.this.Tree]
8300 ===> org.kiama.example.obr.RISCTree.StW.productIterator: Iterator[Any]
8612 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productIterator: Iterator[Any]
4601 ===> org.kiama.example.lambda2.AST.Opn.<init>(): org.kiama.example.lambda2.AST.Opn.type
5678 ===> org.kiama.example.oberon0.L0.c.CNegExp.toString(): String
9652 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.Superclass: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse]
12100 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1536 ===> org.kiama.example.dataflow.DataflowForTests.s3: org.kiama.example.dataflow.DataflowAST.Assign
652 ===> org.kiama.example.RISC.RISCISA.SUBI.toString(): String
9108 ===> org.kiama.example.obr.SPARCTree.RemW.hashCode(): Int
3279 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
2434 ===> org.kiama.example.iswim.compiler.Syntax.Import.productArity: Int
9775 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productArity: Int
1102 ===> org.kiama.example.RISC.RISCISA.RD.equals(x$1: Any): Boolean
1519 ===> org.kiama.example.dataflow.For.equals(x$1: Any): Boolean
6458 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.apply(ident: String,decl: org.kiama.example.oberon0.L3.source.ProcDecl): SymbolTable.this.Procedure
2685 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productPrefix: String
3017 ===> org.kiama.example.iswim.secd.HeapOps.Get.productIterator: Iterator[Any]
2062 ===> org.kiama.example.iswim.compiler.Syntax.Minus.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Minus
11562 ===> org.kiama.rewriting.Rewriter.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
9803 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.readResolve(): Object
2867 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productIterator: Iterator[Any]
7292 ===> org.kiama.example.oberon0.base.source.Block.<init>(decls: List[org.kiama.example.oberon0.base.source.Declaration],stmts: List[org.kiama.example.oberon0.base.source.Statement]): org.kiama.example.oberon0.base.source.Block
4509 ===> org.kiama.example.lambda2.AST.<init>(): org.kiama.example.lambda2.AST.type
10365 ===> org.kiama.example.til.AST.Decl.toString(): String
11752 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Int] with Serializable
4070 ===> org.kiama.example.iswim.secd.SECDBase.main(): Unit
1210 ===> org.kiama.example.RISC.RISCISA.BLT.unapply(x$0: org.kiama.example.RISC.RISCISA.BLT): Option[Int]
9064 ===> org.kiama.example.obr.SPARCTree.NegW.<init>(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.NegW
1884 ===> org.kiama.example.imperative.Generator.genNum: org.scalacheck.Gen[org.kiama.example.imperative.AST.Num]
4903 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
1405 ===> org.kiama.example.dataflow.DataflowAST.If.cond: org.kiama.example.dataflow.DataflowAST.Var
8982 ===> org.kiama.example.obr.SPARCTree.CmpltW.canEqual(x$1: Any): Boolean
6159 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.optSectionToDoc(section: String,optds: Option[List[org.kiama.example.oberon0.base.source.Declaration]]): PrettyPrinter.this.Doc
1462 ===> org.kiama.example.dataflow.DataflowAST.Empty.productPrefix: String
9423 ===> org.kiama.example.obr.SymbolTable.ExnType.<init>(): org.kiama.example.obr.SymbolTable.ExnType.type
12468 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productPrefix: String
1460 ===> org.kiama.example.dataflow.DataflowAST.Empty.<init>(): org.kiama.example.dataflow.DataflowAST.Empty
3045 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.productArity: Int
12592 ===> org.kiama.util.PositionedParserUtilities.$anon.apply(in: PositionedParserUtilities.this.Input): PositionedParserUtilities.this.ParseResult[T]
11005 ===> org.kiama.output.ParenPrettyPrinter.$init$(): Unit
11233 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.canEqual(x$1: Any): Boolean
6063 ===> org.kiama.example.oberon0.L0.source.AndExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.AndExp
586 ===> org.kiama.example.RISC.RISCISA.ADD.hashCode(): Int
12355 ===> org.kiama.util.Environments.leave(env: Environments.this.Environment): Environments.this.Environment
1089 ===> org.kiama.example.RISC.RISCISA.PSH.unapply(x$0: org.kiama.example.RISC.RISCISA.PSH): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
9145 ===> org.kiama.example.obr.SPARCTree.Local.hashCode(): Int
7856 ===> org.kiama.example.obr.ObrTree.EqualExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.EqualExp
3180 ===> org.kiama.example.iswim.secd.IntegerOps.Add.<init>(): org.kiama.example.iswim.secd.IntegerOps.Add.type
4289 ===> org.kiama.example.json.JSONTree.JString.productElement(x$1: Int): Any
4730 ===> org.kiama.example.lambda2.AST.AddOp.<init>(): org.kiama.example.lambda2.AST.AddOp.type
5030 ===> org.kiama.example.lambda3.AST.Lam.apply(b: org.kiama.rewriting.NominalAST.Bind): org.kiama.example.lambda3.AST.Lam
1500 ===> org.kiama.example.dataflow.DataflowForeach.$anonfun.applyOrElse[A1 <: org.kiama.example.dataflow.DataflowAST.Stm, B1 >: Set[org.kiama.example.dataflow.DataflowAST.Stm]](x$1: A1,default: A1 => B1): B1
729 ===> org.kiama.example.RISC.RISCISA.DIVI.productArity: Int
6294 ===> org.kiama.example.oberon0.L2.NameAnalyser.$init$(): Unit
10408 ===> org.kiama.example.til.AST.IfThen.unapply(x$0: org.kiama.example.til.AST.IfThen): Option[(org.kiama.example.til.AST.Exp, Seq[org.kiama.example.til.AST.Stat])]
4659 ===> org.kiama.example.lambda2.AST.Bind.hashCode(): Int
9816 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.<init>(): org.kiama.example.picojava.AbstractSyntax.UnknownDecl.type
3280 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.copy(n: Int): IntegerOps.this.IntValue
1362 ===> org.kiama.example.dataflow.LivenessImpl.in: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
8675 ===> org.kiama.example.obr.RISCTree.Label.readResolve(): Object
10979 ===> org.kiama.output.Postfix.toString(): String
4884 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3325 ===> org.kiama.example.iswim.secd.RecordOps.Fields.equals(x$1: Any): Boolean
12411 ===> org.kiama.util.Messaging.report(emitter: org.kiama.util.Emitter): Unit
3057 ===> org.kiama.example.iswim.secd.HeapOps.$init$(): Unit
8705 ===> org.kiama.example.obr.SPARCTransformation.code: org.kiama.example.obr.ObrTree.ObrInt => org.kiama.example.obr.SPARCTree.SPARC
11910 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11122 ===> org.kiama.output.PrettyPrinter.group(d: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
1580 ===> org.kiama.example.imperative.AST.Num.productElement(x$1: Int): Any
1452 ===> org.kiama.example.dataflow.DataflowAST.Return.hashCode(): Int
2120 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
5005 ===> org.kiama.example.lambda3.AST.App.productArity: Int
7187 ===> org.kiama.example.oberon0.base.c.CStrType.apply(): org.kiama.example.oberon0.base.c.CStrType
8199 ===> org.kiama.example.obr.RISCTree.RISCProg.toString(): String
9721 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.canEqual(x$1: Any): Boolean
9286 ===> org.kiama.example.obr.SymbolTable.Multiple.apply(): org.kiama.example.obr.SymbolTable.Multiple
4607 ===> org.kiama.example.lambda2.AST.Let.t: org.kiama.example.lambda2.AST.Type
4537 ===> org.kiama.example.lambda2.AST.Var.hashCode(): Int
1880 ===> org.kiama.example.imperative.ImperativeTests.ppp: String
2365 ===> org.kiama.example.iswim.compiler.Syntax.Let.productElement(x$1: Int): Any
11535 ===> org.kiama.rewriting.Rewriter.strategyf(f: Rewriter.this.Term => Option[Rewriter.this.Term]): Rewriter.this.Strategy
1847 ===> org.kiama.example.imperative.ASTNonCase.Var.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
1111 ===> org.kiama.example.RISC.RISCISA.WRD.toString(): String
8097 ===> org.kiama.example.obr.ObrTree.PlusExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
10497 ===> org.kiama.example.til.AST.Write.productIterator: Iterator[Any]
6309 ===> org.kiama.example.oberon0.L2.source.ForStatement.copy$default$1: org.kiama.example.oberon0.L0.source.IdnExp @scala.annotation.unchecked.uncheckedVariance
4750 ===> org.kiama.example.lambda2.AST.SubOp.readResolve(): Object
9853 ===> org.kiama.example.picojava.TypeAnalysis.hasCycleOnSuperclassChain: org.kiama.example.picojava.AbstractSyntax.ClassDecl => Boolean
9867 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.zInR: org.kiama.example.picojava.AbstractSyntax.Use
2256 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.productIterator: Iterator[Any]
3777 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productIterator: Iterator[Any]
1576 ===> org.kiama.example.imperative.AST.Num.copy(d: Double): org.kiama.example.imperative.AST.Num
5482 ===> org.kiama.example.oberon0.L0.c.CGtExp.right: org.kiama.example.oberon0.base.c.CExpression
1230 ===> org.kiama.example.RISC.RISCISA.BLE.toString(): String
9470 ===> org.kiama.example.obr.tests.ObrExecTests.forExecDir: String
3362 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.copy(): org.kiama.example.iswim.secd.RecordOps.RecordTypeValue
9875 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.axInA: org.kiama.example.picojava.AbstractSyntax.Use
5575 ===> org.kiama.example.oberon0.L0.c.COrExp.equals(x$1: Any): Boolean
2480 ===> org.kiama.example.iswim.compiler.Syntax.Return.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Return): Option[org.kiama.example.iswim.compiler.Syntax.Expr]
3562 ===> org.kiama.example.iswim.secd.SECDBase.Exit.<init>(): org.kiama.example.iswim.secd.SECDBase.Exit.type
2181 ===> org.kiama.example.iswim.compiler.Syntax.Less.productElement(x$1: Int): Any
9550 ===> org.kiama.example.oneohonecompanies.Company.PU.<init>(): org.kiama.example.oneohonecompanies.Company.PU.type
2999 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.productPrefix: String
9119 ===> org.kiama.example.obr.SPARCTree.SubW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.SubW
12047 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2950 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.copy(): org.kiama.example.iswim.secd.ExceptionHandler.SetHandler
6945 ===> org.kiama.example.oberon0.L4.source.FieldList.apply(idndefs: List[String],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L4.source.FieldList
7037 ===> org.kiama.example.oberon0.base.TranslatingDriver.pprintcastFlagDefault: Boolean
8422 ===> org.kiama.example.obr.RISCTree.CmpgtW.r: org.kiama.example.obr.RISCTree.Datum
4206 ===> org.kiama.example.iswim.tests.ParserTests.<init>(): org.kiama.example.iswim.tests.ParserTests
1735 ===> org.kiama.example.imperative.AST.Null.unapply(x$0: org.kiama.example.imperative.AST.Null): Boolean
10549 ===> org.kiama.example.til.AST.Num.productIterator: Iterator[Any]
9984 ===> org.kiama.example.prolog.Interpreter.interpret(query: org.kiama.example.prolog.PrologTree.Term,program: org.kiama.example.prolog.PrologTree.Program,emitter: org.kiama.util.Emitter): Unit
12442 ===> org.kiama.util.WhitespaceParser.regex(r: scala.util.matching.Regex): WhitespaceParser.this.Parser[String]
11828 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8160 ===> org.kiama.example.obr.RISCEncoder.reg: org.kiama.example.obr.RISCTree.RISCNode => org.kiama.example.RISC.RISCISA.RegNo
1507 ===> org.kiama.example.dataflow.For.copy$default$4: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
10195 ===> org.kiama.example.prolog.SymbolTable.Variable.readResolve(): Object
6590 ===> org.kiama.example.oberon0.L3.c.CStrExp.<init>(): org.kiama.example.oberon0.L3.c.CStrExp.type
11283 ===> org.kiama.rewriting.NominalAST.Bind.productArity: Int
2991 ===> org.kiama.example.iswim.secd.ExceptionHandler.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
9782 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.<init>(): org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.type
10325 ===> org.kiama.example.repmin.RepminTests.<init>(): org.kiama.example.repmin.RepminTests
11004 ===> org.kiama.output.PrettyUnaryExpression.exp: org.kiama.output.PrettyExpression
382 ===> org.kiama.attribution.Decorators.chain[T <: org.kiama.attribution.Attributable, U](inupdate: (T => U) => org.kiama.==>[T,U],outupdate: (T => U) => org.kiama.==>[T,U]): org.kiama.attribution.Decorators.Chain[T,U]
8894 ===> org.kiama.example.obr.SPARCTree.Cond.cond: org.kiama.example.obr.SPARCTree.Datum
9851 ===> org.kiama.example.picojava.TypeAnalysis.isSuperTypeOfClassDecl: org.kiama.example.picojava.AbstractSyntax.ClassDecl => (org.kiama.example.picojava.AbstractSyntax.TypeDecl => Boolean)
8150 ===> org.kiama.example.obr.RISCEncoder.code: scala.collection.mutable.ArrayBuffer[org.kiama.example.RISC.RISCISA.Assembler]
7427 ===> org.kiama.example.obr.ObrTree.ObrInt.idn1: org.kiama.example.obr.ObrTree.Identifier
8872 ===> org.kiama.example.obr.SPARCTree.Write.unapply(x$0: org.kiama.example.obr.SPARCTree.Write): Option[org.kiama.example.obr.SPARCTree.Datum]
6166 ===> org.kiama.example.oberon0.L1.Parser.$init$(): Unit
8646 ===> org.kiama.example.obr.RISCTree.Indexed.productPrefix: String
9746 ===> org.kiama.example.picojava.AbstractSyntax.Use.<init>(): org.kiama.example.picojava.AbstractSyntax.Use.type
10693 ===> org.kiama.example.til.TIL1_1Tests.<init>(): org.kiama.example.til.TIL1_1Tests
648 ===> org.kiama.example.RISC.RISCISA.SUBI.canEqual(x$1: Any): Boolean
2310 ===> org.kiama.example.iswim.compiler.Syntax.Or.productElement(x$1: Int): Any
1852 ===> org.kiama.example.imperative.ASTNonCase.Neg.deconstruct: List[org.kiama.example.imperative.ASTNonCase.Exp]
9835 ===> org.kiama.example.picojava.NameResolution.$anonfun.applyOrElse[A1 <: org.kiama.example.picojava.AbstractSyntax.BlockStmt, B1 >: org.kiama.example.picojava.AbstractSyntax.Decl](x$1: A1,default: A1 => B1): B1
10970 ===> org.kiama.output.Prefix.toString(): String
4661 ===> org.kiama.example.lambda2.AST.Bind.equals(x$1: Any): Boolean
5674 ===> org.kiama.example.oberon0.L0.c.CNegExp.hashCode(): Int
4999 ===> org.kiama.example.lambda3.AST.App.<init>(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.App
5624 ===> org.kiama.example.oberon0.L0.c.CModExp.priority: Int
12423 ===> org.kiama.util.ParserUtilities.parseResultToTuple2[A, B](p: ParserUtilities.this.Parser[ParserUtilities.this.~[A,B]]): ParserUtilities.this.PackratParser[(A, B)]
8666 ===> org.kiama.example.obr.RISCTree.Label.productIterator: Iterator[Any]
7931 ===> org.kiama.example.obr.ObrTree.IndexExp.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
4534 ===> org.kiama.example.lambda2.AST.Var.productElement(x$1: Int): Any
3581 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.apply(nm: org.kiama.example.iswim.secd.SECDBase.Name): org.kiama.example.iswim.secd.SECDBase.Lookup
11505 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.equals(x$1: Any): Boolean
11632 ===> org.kiama.rewriting.Rewriter.repeat1(s: => Rewriter.this.Strategy,c: => Rewriter.this.Strategy): Rewriter.this.Strategy
6002 ===> org.kiama.example.oberon0.L0.source.ProdExpression.fixity: org.kiama.output.Infix
750 ===> org.kiama.example.RISC.RISCISA.MOD.productArity: Int
8386 ===> org.kiama.example.obr.RISCTree.CmpeqW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpeqW
6392 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productArity: Int
955 ===> org.kiama.example.RISC.RISCISA.XORI.productElement(x$1: Int): Any
10188 ===> org.kiama.example.prolog.SymbolTable.Variable.hashCode(): Int
1498 ===> org.kiama.example.dataflow.DataflowForeach.$anonfun.isDefinedAt(x$1: org.kiama.example.dataflow.DataflowAST.Stm): Boolean
11481 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.productPrefix: String
1495 ===> org.kiama.example.dataflow.DataflowForeach.setup(): Unit
8721 ===> org.kiama.example.obr.SPARCTree.SPARC.productArity: Int
10717 ===> org.kiama.example.til.TIL2_3.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10954 ===> org.kiama.output.NonAssoc.productPrefix: String
10249 ===> org.kiama.example.prolog.SymbolTable.UnknownType.hashCode(): Int
2704 ===> org.kiama.example.iswim.compiler.Syntax.Val.productElement(x$1: Int): Any
5855 ===> org.kiama.example.oberon0.L0.source.NeExp.toString(): String
3903 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productIterator: Iterator[Any]
375 ===> org.kiama.attribution.Decorators.Chain.apply[T, U](in: T => U,out: T => U): org.kiama.attribution.Decorators.Chain[T,U]
1817 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
9559 ===> org.kiama.example.oneohonecompanies.Company.DU.productPrefix: String
11232 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productIterator: Iterator[Any]
609 ===> org.kiama.example.RISC.RISCISA.ADDI.<init>(): org.kiama.example.RISC.RISCISA.ADDI.type
4403 ===> org.kiama.example.lambda.AST.Num.apply(i: Int): org.kiama.example.lambda.AST.Num
1917 ===> org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.compiler.Syntax.Binding, B1 >: org.kiama.example.iswim.secd.SECDBase.FunctionSpec](x$1: A1,default: A1 => B1): B1
5617 ===> org.kiama.example.oberon0.L0.c.CDivExp.toString(): String
3358 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.apply(): org.kiama.example.iswim.secd.RecordOps.UnpackRecord
3104 ===> org.kiama.example.iswim.secd.IOOps.Read.toString(): String
1981 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.hashCode(): Int
10871 ===> org.kiama.machine.Machine.State._value: Option[T]
5843 ===> org.kiama.example.oberon0.L0.source.NeExp.left: org.kiama.example.oberon0.L0.source.Expression
1969 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.apply(bds: List[org.kiama.example.iswim.compiler.Syntax.Stmt]): org.kiama.example.iswim.compiler.Syntax.IswimProg
8279 ===> org.kiama.example.obr.RISCTree.Ret.productArity: Int
12 ===> org.kiama.attribution.Attributable.isFirst: Boolean
1528 ===> org.kiama.example.dataflow.DataflowFor.$anonfun.applyOrElse[A1 <: org.kiama.example.dataflow.DataflowAST.Stm, B1 >: Set[org.kiama.example.dataflow.DataflowAST.Stm]](x$1: A1,default: A1 => B1): B1
6659 ===> org.kiama.example.oberon0.L3.source.ProcDecl.readResolve(): Object
5986 ===> org.kiama.example.oberon0.L0.source.OrExp.productPrefix: String
9749 ===> org.kiama.example.picojava.AbstractSyntax.Use.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.Use): Option[String]
7058 ===> org.kiama.example.oberon0.base.Transformer.transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
3103 ===> org.kiama.example.iswim.secd.IOOps.Read.hashCode(): Int
8734 ===> org.kiama.example.obr.SPARCTree.Beq.cond: org.kiama.example.obr.SPARCTree.Datum
12363 ===> org.kiama.util.Environments.lookup$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
5765 ===> org.kiama.example.oberon0.L0.source.TypeDecl.copy$default$2: org.kiama.example.oberon0.L0.source.TypeDef @scala.annotation.unchecked.uncheckedVariance
7383 ===> org.kiama.example.oberon0.drivers.A2bPhases.tasklevel: Int
3430 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
10808 ===> org.kiama.example.transform.AST.BinExp.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
11340 ===> org.kiama.rewriting.PositionalRewriterTests.po: org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{val line: Int; val column: Int}
12040 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3804 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productPrefix: String
7442 ===> org.kiama.example.obr.ObrTree.ObrInt.hashCode(): Int
11844 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12078 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
125 ===> org.kiama.attribution.UncachedAttribution.UncachedParamAttribute.$anon.<init>(): UncachedAttribution.this.Attribute[T,U]{}
9709 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.AssignStmt): Option[(org.kiama.example.picojava.AbstractSyntax.Access, org.kiama.example.picojava.AbstractSyntax.Exp)]
7359 ===> org.kiama.example.oberon0.base.source.IdnUse.readResolve(): Object
5473 ===> org.kiama.example.oberon0.L0.c.CLeExp.hashCode(): Int
2698 ===> org.kiama.example.iswim.compiler.Syntax.Val.e: org.kiama.example.iswim.compiler.Syntax.Expr
11511 ===> org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition.$init$(): Unit
1234 ===> org.kiama.example.RISC.RISCISA.BLE.productElement(x$1: Int): Any
1697 ===> org.kiama.example.imperative.AST.Mul.unapply(x$0: org.kiama.example.imperative.AST.Mul): Option[(org.kiama.example.imperative.AST.Exp, org.kiama.example.imperative.AST.Exp)]
8834 ===> org.kiama.example.obr.SPARCTree.Ret.toString(): String
11918 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9420 ===> org.kiama.example.obr.SymbolTable.ExnType.canEqual(x$1: Any): Boolean
9372 ===> org.kiama.example.obr.SymbolTable.RecordTypes.equals(x$1: Any): Boolean
11709 ===> org.kiama.rewriting.RewriterTests.<init>(): org.kiama.rewriting.RewriterTests
3727 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue
12575 ===> org.kiama.util.ParserUtilitiesTests.Tup6.unapply(x$0: ParserUtilitiesTests.this.Tup6): Option[(ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node)]
7390 ===> org.kiama.example.oberon0.drivers.A3.<init>(): org.kiama.example.oberon0.drivers.A3.type
7483 ===> org.kiama.example.obr.ObrTree.IntParam.unapply(x$0: org.kiama.example.obr.ObrTree.IntParam): Option[org.kiama.example.obr.ObrTree.Identifier]
10010 ===> org.kiama.example.prolog.PrologTree.Program.equals(x$1: Any): Boolean
3253 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.toString(): String
12565 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productArity: Int
4130 ===> org.kiama.example.iswim.secd.StackOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
4575 ===> org.kiama.example.lambda2.AST.App.productIterator: Iterator[Any]
8536 ===> org.kiama.example.obr.RISCTree.NegW.productArity: Int
1017 ===> org.kiama.example.RISC.RISCISA.POP.productArity: Int
4071 ===> org.kiama.example.iswim.secd.SECDBase.raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue): Unit
8636 ===> org.kiama.example.obr.RISCTree.Local.toString(): String
11771 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
802 ===> org.kiama.example.RISC.RISCISA.CMPI.im: org.kiama.example.RISC.RISCISA.Imm
3685 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.hashCode(): Int
12339 ===> org.kiama.util.Environments.UnknownEntity.copy(): Environments.this.UnknownEntity
1314 ===> org.kiama.example.RISC.RISCISA.Target.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
370 ===> org.kiama.attribution.Decorators.Chain.canEqual(x$1: Any): Boolean
8120 ===> org.kiama.example.obr.ObrTree.SlashExp.productIterator: Iterator[Any]
4440 ===> org.kiama.example.lambda.AST.Lam.unapply(x$0: org.kiama.example.lambda.AST.Lam): Option[(org.kiama.example.lambda.AST.Idn, org.kiama.example.lambda.AST.Exp)]
232 ===> org.kiama.attribution.AttributionTests.SetTree.<init>(s: Set[AttributionTests.this.Tree]): AttributionTests.this.SetTree
8512 ===> org.kiama.example.obr.RISCTree.MulW.l: org.kiama.example.obr.RISCTree.Datum
8264 ===> org.kiama.example.obr.RISCTree.LabelDef.productArity: Int
9093 ===> org.kiama.example.obr.SPARCTree.Not.toString(): String
8642 ===> org.kiama.example.obr.RISCTree.Indexed.<init>(base: org.kiama.example.obr.RISCTree.Local,offset: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Indexed
4354 ===> org.kiama.example.json.JSONTree.JNull.hashCode(): Int
1448 ===> org.kiama.example.dataflow.DataflowAST.Return.productArity: Int
9248 ===> org.kiama.example.obr.SymbolTable.Constant.productElement(x$1: Int): Any
12177 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9037 ===> org.kiama.example.obr.SPARCTree.LdW.toString(): String
1727 ===> org.kiama.example.imperative.AST.Null.productIterator: Iterator[Any]
5184 ===> org.kiama.example.oberon0.L0.NameAnalyser.entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): NameAnalyser.this.Entity
9314 ===> org.kiama.example.obr.SymbolTable.BoolType.productPrefix: String
9518 ===> org.kiama.example.oneohonecompanies.Company.Employee.s: org.kiama.example.oneohonecompanies.Company.Salary
10122 ===> org.kiama.example.prolog.PrologTree.Pred.equals(x$1: Any): Boolean
9515 ===> org.kiama.example.oneohonecompanies.Company.Dept.readResolve(): Object
12262 ===> org.kiama.util.CompilerBase.makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter): Either[T,String]
9812 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.canEqual(x$1: Any): Boolean
12631 ===> org.kiama.util.TransformerTests.$init$(): Unit
5460 ===> org.kiama.example.oberon0.L0.c.CLtExp.readResolve(): Object
11420 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
3014 ===> org.kiama.example.iswim.secd.HeapOps.Get.productPrefix: String
381 ===> org.kiama.attribution.Decorators.$anonfun.isDefinedAt(x$1: T): Boolean
12102 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4445 ===> org.kiama.example.lambda.AST.App.toString(): String
9106 ===> org.kiama.example.obr.SPARCTree.RemW.productIterator: Iterator[Any]
1266 ===> org.kiama.example.RISC.RISCISA.BR.productElement(x$1: Int): Any
5280 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productElement(x$1: Int): Any
5530 ===> org.kiama.example.oberon0.L0.c.CAddExp.productElement(x$1: Int): Any
4443 ===> org.kiama.example.lambda.AST.App.r: org.kiama.example.lambda.AST.Exp
4894 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7886 ===> org.kiama.example.obr.ObrTree.FieldExp.<init>(): org.kiama.example.obr.ObrTree.FieldExp.type
10093 ===> org.kiama.example.prolog.PrologTree.Atom.<init>(s: String): org.kiama.example.prolog.PrologTree.Atom
10906 ===> org.kiama.machine.Machine.ParamUpdate.key: AnyRef
11244 ===> org.kiama.rewriting.CallbackRewriter.<init>(): org.kiama.rewriting.CallbackRewriter
3761 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.productElement(x$1: Int): Any
199 ===> org.kiama.attribution.AttributionTests.EitherTree.copy(e: Either[AttributionTests.this.Pair,AttributionTests.this.Leaf]): AttributionTests.this.EitherTree
4106 ===> org.kiama.example.iswim.secd.StackOps.Dup.readResolve(): Object
2723 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productElement(x$1: Int): Any
6974 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productIterator: Iterator[Any]
6733 ===> org.kiama.example.oberon0.L3.source.PrettyPrinter.paramsToDoc(ds: List[PrettyPrinter.this.Doc],sep: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
5687 ===> org.kiama.example.oberon0.L0.c.CNotExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
2613 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productPrefix: String
3303 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productPrefix: String
4879 ===> org.kiama.example.lambda2.ParLazy.letAppL(eval: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
9137 ===> org.kiama.example.obr.SPARCTree.Local.<init>(offset: Int): org.kiama.example.obr.SPARCTree.Local
10913 ===> org.kiama.machine.Machine.finit: Unit
5298 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.productPrefix: String
9380 ===> org.kiama.example.obr.SymbolTable.EnumType.storage: Int
10385 ===> org.kiama.example.til.AST.Assign.equals(x$1: Any): Boolean
10729 ===> org.kiama.example.transform.AST.Program.copy$default$1: List[(String, Int)] @scala.annotation.unchecked.uncheckedVariance
2510 ===> org.kiama.example.iswim.compiler.Syntax.If.productArity: Int
2885 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productElement(x$1: Int): Any
3115 ===> org.kiama.example.iswim.secd.IOOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
6188 ===> org.kiama.example.oberon0.L1.c.CIfStatement.unapply(x$0: org.kiama.example.oberon0.L1.c.CIfStatement): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CStatement)]
9944 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productPrefix: String
5309 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.readResolve(): Object
3549 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.apply(nms: List[org.kiama.example.iswim.secd.SECDBase.Name]): org.kiama.example.iswim.secd.SECDBase.BindPrims
3117 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.<init>(): org.kiama.example.iswim.secd.IntComparisonOps.LessThan
7730 ===> org.kiama.example.obr.ObrTree.WhileStmt.copy$default$2: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
110 ===> org.kiama.attribution.Attribution.childAttr[T <: org.kiama.attribution.Attributable, U](optName: Option[String])(f: T => (org.kiama.attribution.Attributable => U)): Attribution.this.CachedAttribute[T,U]
9704 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.toString(): String
7691 ===> org.kiama.example.obr.ObrTree.LoopStmt.body: List[org.kiama.example.obr.ObrTree.Statement]
5849 ===> org.kiama.example.oberon0.L0.source.NeExp.productPrefix: String
779 ===> org.kiama.example.RISC.RISCISA.MODI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MODI
1809 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
11281 ===> org.kiama.rewriting.NominalAST.Bind.copy$default$2: Any @scala.annotation.unchecked.uncheckedVariance
43 ===> org.kiama.attribution.AttributionBase.CircularAttribute.visited: java.util.IdentityHashMap[T,Unit]
7737 ===> org.kiama.example.obr.ObrTree.WhileStmt.toString(): String
902 ===> org.kiama.example.RISC.RISCISA.ORI.a: org.kiama.example.RISC.RISCISA.RegNo
4526 ===> org.kiama.example.lambda2.AST.Num.unapply(x$0: org.kiama.example.lambda2.AST.Num): Option[Int]
3223 ===> org.kiama.example.iswim.secd.IntegerOps.Div.toString(): String
2739 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.productArity: Int
2041 ===> org.kiama.example.iswim.compiler.Syntax.Plus.r: org.kiama.example.iswim.compiler.Syntax.Expr
1604 ===> org.kiama.example.imperative.AST.Var.hashCode(): Int
5904 ===> org.kiama.example.oberon0.L0.source.GtExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
2000 ===> org.kiama.example.iswim.compiler.Syntax.Variable.equals(x$1: Any): Boolean
4898 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10338 ===> org.kiama.example.til.AST.Program.<init>(ss: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.Program
12180 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2192 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.l: org.kiama.example.iswim.compiler.Syntax.Expr
10251 ===> org.kiama.example.prolog.SymbolTable.UnknownType.equals(x$1: Any): Boolean
9225 ===> org.kiama.example.obr.SymbolTable.Variable.productPrefix: String
10591 ===> org.kiama.example.til.AST.Mul.toString(): String
10153 ===> org.kiama.example.prolog.SemanticAnalysis.varentity: org.kiama.example.prolog.PrologTree.Var => org.kiama.example.prolog.SymbolTable.Entity
5315 ===> org.kiama.example.oberon0.L0.SymbolTable.isType(e: SymbolTable.this.Entity): Boolean
6005 ===> org.kiama.example.oberon0.L0.source.MulExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.MulExp
6004 ===> org.kiama.example.oberon0.L0.source.MulExp.right: org.kiama.example.oberon0.L0.source.Expression
2089 ===> org.kiama.example.iswim.compiler.Syntax.Times.hashCode(): Int
9034 ===> org.kiama.example.obr.SPARCTree.LdW.productIterator: Iterator[Any]
10831 ===> org.kiama.example.transform.AST.Num.productIterator: Iterator[Any]
10990 ===> org.kiama.output.Infix.hashCode(): Int
7083 ===> org.kiama.example.oberon0.base.c.CInclude.<init>(s: String): org.kiama.example.oberon0.base.c.CInclude
7706 ===> org.kiama.example.obr.ObrTree.LoopStmt.unapply(x$0: org.kiama.example.obr.ObrTree.LoopStmt): Option[List[org.kiama.example.obr.ObrTree.Statement]]
4493 ===> org.kiama.example.lambda.Lambda.process(e: org.kiama.example.lambda.AST.Exp): Unit
3579 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.<init>(): org.kiama.example.iswim.secd.SECDBase.Lookup.type
12026 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4892 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8725 ===> org.kiama.example.obr.SPARCTree.SPARC.hashCode(): Int
650 ===> org.kiama.example.RISC.RISCISA.SUBI.equals(x$1: Any): Boolean
10489 ===> org.kiama.example.til.AST.Read.readResolve(): Object
8484 ===> org.kiama.example.obr.RISCTree.IntDatum.productElement(x$1: Int): Any
8450 ===> org.kiama.example.obr.RISCTree.CmpltW.canEqual(x$1: Any): Boolean
8622 ===> org.kiama.example.obr.RISCTree.Address.<init>(): org.kiama.example.obr.RISCTree.Address
10664 ===> org.kiama.example.til.AST.Eq.toString(): String
2022 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.readResolve(): Object
9551 ===> org.kiama.example.oneohonecompanies.Company.PU.toString(): String
11601 ===> org.kiama.rewriting.Rewriter.$anon.someProduct(p: Product): Option[Rewriter.this.Term]
8578 ===> org.kiama.example.obr.RISCTree.RemW.equals(x$1: Any): Boolean
8323 ===> org.kiama.example.obr.RISCTree.Write.toString(): String
5336 ===> org.kiama.example.oberon0.L0.c.CNamedType.toString(): String
6015 ===> org.kiama.example.oberon0.L0.source.MulExp.toString(): String
12293 ===> org.kiama.util.ReaderConsole.readLine(prompt: String): String
3877 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.<init>(): org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.type
107 ===> org.kiama.attribution.Attribution.$anon.optName: Option[String]
177 ===> org.kiama.attribution.AttributionTests.Leaf.apply(value: Int): AttributionTests.this.Leaf
1049 ===> org.kiama.example.RISC.RISCISA.STB.a: org.kiama.example.RISC.RISCISA.RegNo
6645 ===> org.kiama.example.oberon0.L3.source.ProcDecl.copy$default$3: org.kiama.example.oberon0.base.source.Block @scala.annotation.unchecked.uncheckedVariance
1951 ===> org.kiama.example.iswim.compiler.Syntax.<init>(): org.kiama.example.iswim.compiler.Syntax.type
9404 ===> org.kiama.example.obr.SymbolTable.EnumTypes.canEqual(x$1: Any): Boolean
1975 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
313 ===> org.kiama.attribution.AttributionTests.TripleTree.apply(p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.TripleTree
11879 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6359 ===> org.kiama.example.oberon0.L2.source.Case.hashCode(): Int
7487 ===> org.kiama.example.obr.ObrTree.BoolVar.copy(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.BoolVar
7868 ===> org.kiama.example.obr.ObrTree.EqualExp.toString(): String
12018 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4654 ===> org.kiama.example.lambda2.AST.Bind.productPrefix: String
4464 ===> org.kiama.example.lambda.AST.Sub.<init>(m: org.kiama.example.lambda.AST.Exp,x: org.kiama.example.lambda.AST.Idn,n: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.Sub
12121 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4237 ===> org.kiama.example.json.JSONTree.JObject.productArity: Int
10746 ===> org.kiama.example.transform.AST.VarDecl.<init>(name: String): org.kiama.example.transform.AST.VarDecl
686 ===> org.kiama.example.RISC.RISCISA.MULI.productPrefix: String
552 ===> org.kiama.example.RISC.RISCISA.MVNI.b: org.kiama.example.RISC.RISCISA.RegNo
6933 ===> org.kiama.example.oberon0.L4.source.FieldList.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
6118 ===> org.kiama.example.oberon0.L0.source.NotExp.unapply(x$0: org.kiama.example.oberon0.L0.source.NotExp): Option[org.kiama.example.oberon0.L0.source.Expression]
6879 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.copy$default$2: org.kiama.example.oberon0.L0.source.TypeDef @scala.annotation.unchecked.uncheckedVariance
11114 ===> org.kiama.output.PrettyPrinter.leave(c: (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout): (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout
3481 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.toString(): String
6862 ===> org.kiama.example.oberon0.L4.c.CFieldExp.canEqual(x$1: Any): Boolean
10912 ===> org.kiama.machine.Machine.main: Unit
3283 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productArity: Int
6977 ===> org.kiama.example.oberon0.L4.source.FieldIdn.toString(): String
11773 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2985 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.canEqual(x$1: Any): Boolean
11280 ===> org.kiama.rewriting.NominalAST.Bind.copy$default$1: org.kiama.rewriting.NominalAST.Name @scala.annotation.unchecked.uncheckedVariance
8354 ===> org.kiama.example.obr.RISCTree.AddW.hashCode(): Int
8053 ===> org.kiama.example.obr.ObrTree.NotEqualExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NotEqualExp
3641 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.apply(): org.kiama.example.iswim.secd.SECDBase.PushEmpty
8793 ===> org.kiama.example.obr.SPARCTree.LabelDef.productPrefix: String
12273 ===> org.kiama.util.TestCompiler.$init$(): Unit
12020 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12245 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3026 ===> org.kiama.example.iswim.secd.HeapOps.Get.readResolve(): Object
2143 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productElement(x$1: Int): Any
1655 ===> org.kiama.example.imperative.AST.Add.toString(): String
6551 ===> org.kiama.example.oberon0.L3.c.CAddrType.hashCode(): Int
2880 ===> org.kiama.example.iswim.secd.ConversionOps.<init>(): org.kiama.example.iswim.secd.ConversionOps.type
10853 ===> org.kiama.example.transform.AST.Var.<init>(): org.kiama.example.transform.AST.Var.type
11425 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
12342 ===> org.kiama.util.Environments.UnknownEntity.productElement(x$1: Int): Any
3839 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.copy(): org.kiama.example.iswim.secd.SECDBase.StackUnderflow
12212 ===> org.kiama.rewriting.UniplateTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Unit](x$1: A1,default: A1 => B1): B1
4230 ===> org.kiama.example.json.JSONTree.<init>(): org.kiama.example.json.JSONTree.type
4437 ===> org.kiama.example.lambda.AST.Lam.<init>(): org.kiama.example.lambda.AST.Lam.type
584 ===> org.kiama.example.RISC.RISCISA.ADD.productIterator: Iterator[Any]
6756 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productElement(x$1: Int): Any
7159 ===> org.kiama.example.oberon0.base.c.CType.<init>(): org.kiama.example.oberon0.base.c.CType
10482 ===> org.kiama.example.til.AST.Read.hashCode(): Int
10412 ===> org.kiama.example.til.AST.IfElse.f: Seq[org.kiama.example.til.AST.Stat]
400 ===> org.kiama.attribution.DynamicAttributionTests.Pair.canEqual(x$1: Any): Boolean
10373 ===> org.kiama.example.til.AST.Assign.e: org.kiama.example.til.AST.Exp
3595 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.toString(): String
11569 ===> org.kiama.rewriting.Rewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[Rewriter.this.Term,Rewriter.this.Term] with Serializable
4807 ===> org.kiama.example.lambda2.InnermostSubst.$init$(): Unit
3209 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.equals(x$1: Any): Boolean
10732 ===> org.kiama.example.transform.AST.Program.productPrefix: String
5065 ===> org.kiama.example.lambda3.AST.EvalQuery.hashCode(): Int
159 ===> org.kiama.attribution.AttributionTests.Pair.toString(): String
7310 ===> org.kiama.example.oberon0.base.source.EmptyStmt.copy(): org.kiama.example.oberon0.base.source.EmptyStmt
2217 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productPrefix: String
3245 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.<init>(): org.kiama.example.iswim.secd.IntegerOps.IntTypeValue
2392 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.apply(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LetRec
7586 ===> org.kiama.example.obr.ObrTree.IntConst.canEqual(x$1: Any): Boolean
1930 ===> org.kiama.example.iswim.compiler.Parser.Pos.productArity: Int
587 ===> org.kiama.example.RISC.RISCISA.ADD.equals(x$1: Any): Boolean
7982 ===> org.kiama.example.obr.ObrTree.MinusExp.left: org.kiama.example.obr.ObrTree.Expression
10917 ===> org.kiama.machine.Machine.steps: Unit
9023 ===> org.kiama.example.obr.SPARCTree.IntDatum.toString(): String
1719 ===> org.kiama.example.imperative.AST.Div.readResolve(): Object
6872 ===> org.kiama.example.oberon0.L4.c.PrettyPrinter.basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType): PrettyPrinter.this.Doc
6019 ===> org.kiama.example.oberon0.L0.source.MulExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.MulExp
461 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.applyOrElse[A1 <: DynamicAttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
6931 ===> org.kiama.example.oberon0.L4.source.FieldList.<init>(idndefs: List[String],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L4.source.FieldList
230 ===> org.kiama.attribution.AttributionTests.ListTree.readResolve(): Object
6475 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.<init>(): SymbolTable.this.Parameter.type
1712 ===> org.kiama.example.imperative.AST.Div.hashCode(): Int
8267 ===> org.kiama.example.obr.RISCTree.LabelDef.canEqual(x$1: Any): Boolean
9672 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.Type: org.kiama.example.picojava.AbstractSyntax.Access
8820 ===> org.kiama.example.obr.SPARCTree.Read.apply(mem: org.kiama.example.obr.SPARCTree.Address): org.kiama.example.obr.SPARCTree.Read
8236 ===> org.kiama.example.obr.RISCTree.Bne.equals(x$1: Any): Boolean
4117 ===> org.kiama.example.iswim.secd.StackOps.Swap.canEqual(x$1: Any): Boolean
8397 ===> org.kiama.example.obr.RISCTree.CmpeqW.<init>(): org.kiama.example.obr.RISCTree.CmpeqW.type
966 ===> org.kiama.example.RISC.RISCISA.LDW.b: org.kiama.example.RISC.RISCISA.RegNo
12379 ===> org.kiama.util.IO.FileNotFoundException.unapply(x$0: org.kiama.util.IO.FileNotFoundException): Option[String]
982 ===> org.kiama.example.RISC.RISCISA.LDW.toString(): String
11152 ===> org.kiama.output.PrettyPrinterTests.l3: List[PrettyPrinterTests.this.PVal]
2563 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productIterator: Iterator[Any]
2257 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.canEqual(x$1: Any): Boolean
5694 ===> org.kiama.example.oberon0.L0.c.CNotExp.toString(): String
4 ===> org.kiama.attribution.Attributable.parent[T]: T
7846 ===> org.kiama.example.obr.ObrTree.BoolExp.toString(): String
529 ===> org.kiama.example.RISC.RISCISA.MOVI.readResolve(): Object
5946 ===> org.kiama.example.oberon0.L0.source.AddExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
3353 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.hashCode(): Int
8925 ===> org.kiama.example.obr.SPARCTree.CmpeqW.canEqual(x$1: Any): Boolean
2869 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.hashCode(): Int
4965 ===> org.kiama.example.lambda3.AST.Num.toString(): String
4579 ===> org.kiama.example.lambda2.AST.App.equals(x$1: Any): Boolean
9977 ===> org.kiama.example.prolog.Interpreter.glstack_$eq(x$1: scala.collection.mutable.Stack[List[org.kiama.example.prolog.Interpreter.Goal]]): Unit
11731 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
562 ===> org.kiama.example.RISC.RISCISA.MVNI.productElement(x$1: Int): Any
8353 ===> org.kiama.example.obr.RISCTree.AddW.canEqual(x$1: Any): Boolean
5783 ===> org.kiama.example.oberon0.L0.source.NamedType.copy$default$1: org.kiama.example.oberon0.base.source.IdnUse @scala.annotation.unchecked.uncheckedVariance
3949 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.canEqual(x$1: Any): Boolean
7678 ===> org.kiama.example.obr.ObrTree.IfStmt.productPrefix: String
5760 ===> org.kiama.example.oberon0.L0.source.TypeDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
5954 ===> org.kiama.example.oberon0.L0.source.AddExp.toString(): String
6403 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.readResolve(): Object
1308 ===> org.kiama.example.RISC.RISCISA.RET.readResolve(): Object
3524 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productElement(x$1: Int): Any
4187 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3499 ===> org.kiama.example.iswim.secd.SECDBase.App.toString(): String
3202 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productPrefix: String
6358 ===> org.kiama.example.oberon0.L2.source.Case.canEqual(x$1: Any): Boolean
2661 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.readResolve(): Object
7253 ===> org.kiama.example.oberon0.base.c.CIntExp.toString(): String
4497 ===> org.kiama.example.lambda.Generator.$init$(): Unit
3206 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.canEqual(x$1: Any): Boolean
8092 ===> org.kiama.example.obr.ObrTree.PlusExp.left: org.kiama.example.obr.ObrTree.Expression
5951 ===> org.kiama.example.oberon0.L0.source.AddExp.productIterator: Iterator[Any]
8803 ===> org.kiama.example.obr.SPARCTree.LabelDef.apply(lab: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.LabelDef
1186 ===> org.kiama.example.RISC.RISCISA.BNE.productElement(x$1: Int): Any
10244 ===> org.kiama.example.prolog.SymbolTable.UnknownType.productPrefix: String
4046 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.canEqual(x$1: Any): Boolean
8253 ===> org.kiama.example.obr.RISCTree.Jmp.equals(x$1: Any): Boolean
4102 ===> org.kiama.example.iswim.secd.StackOps.Dup.<init>(): org.kiama.example.iswim.secd.StackOps.Dup.type
8972 ===> org.kiama.example.obr.SPARCTree.CmpltW.l: org.kiama.example.obr.SPARCTree.Datum
9207 ===> org.kiama.example.obr.SemanticAnalysis.assignable: org.kiama.example.obr.ObrTree.Expression => Boolean
12194 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9460 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.toString(): String
7642 ===> org.kiama.example.obr.ObrTree.ExitStmt.<init>(): org.kiama.example.obr.ObrTree.ExitStmt.type
1212 ===> org.kiama.example.RISC.RISCISA.BGE.label: Int
2381 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
1620 ===> org.kiama.example.imperative.AST.Neg.productPrefix: String
4221 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
728 ===> org.kiama.example.RISC.RISCISA.DIVI.productPrefix: String
8597 ===> org.kiama.example.obr.RISCTree.SubW.equals(x$1: Any): Boolean
9971 ===> org.kiama.example.prolog.Interpreter.MatchGoal.<init>(): org.kiama.example.prolog.Interpreter.MatchGoal.type
4691 ===> org.kiama.example.lambda2.AST.FunType.productElement(x$1: Int): Any
6880 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productPrefix: String
3130 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.unapply(x$0: org.kiama.example.iswim.secd.IntComparisonOps.LessThan): Boolean
9456 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.canEqual(x$1: Any): Boolean
8913 ===> org.kiama.example.obr.SPARCTree.Cond.unapply(x$0: org.kiama.example.obr.SPARCTree.Cond): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
6754 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.productPrefix: String
6264 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productIterator: Iterator[Any]
9540 ===> org.kiama.example.oneohonecompanies.Company.PU.copy(e: org.kiama.example.oneohonecompanies.Company.Employee): org.kiama.example.oneohonecompanies.Company.PU
11306 ===> org.kiama.rewriting.NominalRewriter.fresh(a: org.kiama.rewriting.NominalAST.Name)(t: NominalRewriter.this.Term): Boolean
12152 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6657 ===> org.kiama.example.oberon0.L3.source.ProcDecl.apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,params: List[org.kiama.example.oberon0.L3.source.FPSection],body: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L3.source.ProcDecl
5227 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productElement(x$1: Int): Any
8498 ===> org.kiama.example.obr.RISCTree.LdW.copy$default$1: org.kiama.example.obr.RISCTree.Address @scala.annotation.unchecked.uncheckedVariance
10161 ===> org.kiama.example.prolog.SymbolTable.<init>(): org.kiama.example.prolog.SymbolTable.type
9662 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productIterator: Iterator[Any]
8701 ===> org.kiama.example.obr.SPARCEncoder.encode(d: org.kiama.example.obr.SPARCTree.Datum): Unit
10301 ===> org.kiama.example.repmin.Leaf.productElement(x$1: Int): Any
367 ===> org.kiama.attribution.Decorators.Chain.productArity: Int
1624 ===> org.kiama.example.imperative.AST.Neg.canEqual(x$1: Any): Boolean
6292 ===> org.kiama.example.oberon0.L2.Lifter.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11197 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.equals(x$1: Any): Boolean
11492 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.unapply(x$0: org.kiama.rewriting.SupportPositionedRewriterTests.Two): Option[(org.kiama.rewriting.SupportPositionedRewriterTests.Node, org.kiama.rewriting.SupportPositionedRewriterTests.Node)]
6197 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.copy$default$3: org.kiama.example.oberon0.base.c.CStatement @scala.annotation.unchecked.uncheckedVariance
11097 ===> org.kiama.output.PrettyPrinterBase.lbracket: PrettyPrinterBase.this.Doc
2183 ===> org.kiama.example.iswim.compiler.Syntax.Less.canEqual(x$1: Any): Boolean
893 ===> org.kiama.example.RISC.RISCISA.OR.productIterator: Iterator[Any]
238 ===> org.kiama.attribution.AttributionTests.SetTree.productIterator: Iterator[Any]
3538 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.copy$default$1: List[org.kiama.example.iswim.secd.SECDBase.Name] @scala.annotation.unchecked.uncheckedVariance
4682 ===> org.kiama.example.lambda2.AST.IntType.readResolve(): Object
4165 ===> org.kiama.example.iswim.secd.StringOps.StringValue.s: String
8884 ===> org.kiama.example.obr.SPARCTree.AddW.productIterator: Iterator[Any]
10596 ===> org.kiama.example.til.AST.Div.r: org.kiama.example.til.AST.Exp
8943 ===> org.kiama.example.obr.SPARCTree.CmpneW.productIterator: Iterator[Any]
1065 ===> org.kiama.example.RISC.RISCISA.STB.<init>(): org.kiama.example.RISC.RISCISA.STB.type
8395 ===> org.kiama.example.obr.RISCTree.CmpeqW.toString(): String
10784 ===> org.kiama.example.transform.AST.Factor.exp: org.kiama.example.transform.AST.PrimExp
6054 ===> org.kiama.example.oberon0.L0.source.ModExp.equals(x$1: Any): Boolean
2338 ===> org.kiama.example.iswim.compiler.Syntax.Binding.v: org.kiama.example.iswim.compiler.Syntax.Variable
3867 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.<init>(): org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination
86 ===> org.kiama.attribution.Attribution.CachedParamAttribute.reset(): Unit
88 ===> org.kiama.attribution.Attribution.internalToDynamicAttribute[T <: AnyRef, U](f: T => U): Attribution.this.CachedDynamicAttribute[T,U]
715 ===> org.kiama.example.RISC.RISCISA.DIV.toString(): String
9687 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.toString(): String
10726 ===> org.kiama.example.transform.AST.Program.expr: org.kiama.example.transform.AST.ExpR
11982 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6796 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.equals(x$1: Any): Boolean
3412 ===> org.kiama.example.iswim.secd.RecordOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
7255 ===> org.kiama.example.oberon0.base.c.CIntExp.<init>(): org.kiama.example.oberon0.base.c.CIntExp.type
8254 ===> org.kiama.example.obr.RISCTree.Jmp.<init>(): org.kiama.example.obr.RISCTree.Jmp.type
3617 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productArity: Int
6076 ===> org.kiama.example.oberon0.L0.source.AndExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.AndExp
12246 ===> org.kiama.rewriting.UniplateTests.rename: org.kiama.example.imperative.AST.Exp => org.kiama.example.imperative.AST.Exp
2514 ===> org.kiama.example.iswim.compiler.Syntax.If.hashCode(): Int
8903 ===> org.kiama.example.obr.SPARCTree.Cond.productArity: Int
9581 ===> org.kiama.example.oneohonecompanies.OneOhOneTests.<init>(): org.kiama.example.oneohonecompanies.OneOhOneTests
5405 ===> org.kiama.example.oberon0.L0.c.CEqExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CEqExp
8446 ===> org.kiama.example.obr.RISCTree.CmpltW.productPrefix: String
3784 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.apply(): org.kiama.example.iswim.secd.SECDBase.ContTypeValue
1250 ===> org.kiama.example.RISC.RISCISA.BGT.productElement(x$1: Int): Any
2826 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.unapply(x$0: org.kiama.example.iswim.secd.BooleanOps.Equals): Boolean
3544 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.hashCode(): Int
5177 ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2121 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
4407 ===> org.kiama.example.lambda.AST.Var.<init>(x: org.kiama.example.lambda.AST.Idn): org.kiama.example.lambda.AST.Var
454 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[DynamicAttributionTests.this.Tree,Int] with Serializable
8186 ===> org.kiama.example.obr.RISCTree.RISCProg.insns: List[org.kiama.example.obr.RISCTree.Item]
3157 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productPrefix: String
8138 ===> org.kiama.example.obr.ObrTree.StarExp.productElement(x$1: Int): Any
2197 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
5004 ===> org.kiama.example.lambda3.AST.App.productPrefix: String
7051 ===> org.kiama.example.oberon0.base.TranslatingTestDriver.$init$(): Unit
11952 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9113 ===> org.kiama.example.obr.SPARCTree.RemW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.RemW
9229 ===> org.kiama.example.obr.SymbolTable.Variable.canEqual(x$1: Any): Boolean
5961 ===> org.kiama.example.oberon0.L0.source.SubExp.left: org.kiama.example.oberon0.L0.source.Expression
6415 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translateFormalParams(p: org.kiama.example.oberon0.base.source.IdnDef): List[org.kiama.example.oberon0.base.c.CDeclaration]
11753 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Int](x$1: A1,default: A1 => B1): B1
2443 ===> org.kiama.example.iswim.compiler.Syntax.Import.apply(fn: String): org.kiama.example.iswim.compiler.Syntax.Import
9427 ===> org.kiama.example.obr.SymbolTable.ExnType.readResolve(): Object
2884 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productArity: Int
7766 ===> org.kiama.example.obr.ObrTree.TryStmt.copy$default$2: List[org.kiama.example.obr.ObrTree.Catch] @scala.annotation.unchecked.uncheckedVariance
4731 ===> org.kiama.example.lambda2.AST.AddOp.toString(): String
985 ===> org.kiama.example.RISC.RISCISA.LDW.readResolve(): Object
11345 ===> org.kiama.rewriting.PositionalRewriterTests.r: org.kiama.rewriting.PositionalRewriter.Strategy
11991 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6944 ===> org.kiama.example.oberon0.L4.source.FieldList.toString(): String
6363 ===> org.kiama.example.oberon0.L2.source.Case.toString(): String
34 ===> org.kiama.attribution.AttributionBase.Attribute.optName: Option[String]
1093 ===> org.kiama.example.RISC.RISCISA.RD.toString(): String
11092 ===> org.kiama.output.PrettyPrinterBase.minus: PrettyPrinterBase.this.Doc
12463 ===> org.kiama.util.ParserUtilitiesTests.Tup2.n2: ParserUtilitiesTests.this.Node
8550 ===> org.kiama.example.obr.RISCTree.Not.copy(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Not
4926 ===> org.kiama.example.lambda2.PrettyPrinter.pretty(t: org.kiama.example.lambda2.AST.Type): String
546 ===> org.kiama.example.RISC.RISCISA.MVN.<init>(): org.kiama.example.RISC.RISCISA.MVN.type
10371 ===> org.kiama.example.til.AST.Decl.readResolve(): Object
8384 ===> org.kiama.example.obr.RISCTree.CmpeqW.r: org.kiama.example.obr.RISCTree.Datum
8691 ===> org.kiama.example.obr.SPARCEncoder.emit(insn: String): Unit
5822 ===> org.kiama.example.oberon0.L0.source.RelationalExpression.priority: Int
3989 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productArity: Int
3136 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productElement(x$1: Int): Any
12061 ===> org.kiama.rewriting.RewriterTests.f(y: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
7509 ===> org.kiama.example.obr.ObrTree.ArrayVar.productArity: Int
1658 ===> org.kiama.example.imperative.AST.Add.readResolve(): Object
362 ===> org.kiama.attribution.Decorators.Chain.apply(t: T): U
6399 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.<init>(): org.kiama.example.oberon0.L2.source.MinMaxCond.type
494 ===> org.kiama.example.RISC.RISCISA.MOV.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOV
7924 ===> org.kiama.example.obr.ObrTree.IdnExp.apply(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IdnExp
11670 ===> org.kiama.rewriting.Rewriter.$anonfun.applyOrElse[A1 <: Rewriter.this.Term, B1 >: Rewriter.this.Term](x$1: A1,default: A1 => B1): B1
11455 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.PositionedRewriter.Term, B1 >: org.kiama.rewriting.PositionedRewriter.Strategy](x$1: A1,default: A1 => B1): B1
1079 ===> org.kiama.example.RISC.RISCISA.PSH.productPrefix: String
272 ===> org.kiama.attribution.AttributionTests.MapTree.productIterator: Iterator[Any]
2840 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.apply(): org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue
11352 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionalRewriter.Term): Boolean
2211 ===> org.kiama.example.iswim.compiler.Syntax.Greater.l: org.kiama.example.iswim.compiler.Syntax.Expr
2986 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.<init>(): ExceptionHandler.this.ExnContValue.type
3522 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productPrefix: String
8514 ===> org.kiama.example.obr.RISCTree.MulW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.MulW
2598 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.canEqual(x$1: Any): Boolean
7981 ===> org.kiama.example.obr.ObrTree.LessExp.readResolve(): Object
10819 ===> org.kiama.example.transform.AST.BinExp.toString(): String
9956 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.readResolve(): Object
3507 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productElement(x$1: Int): Any
3676 ===> org.kiama.example.iswim.secd.SECDBase.PushType.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.PushType): Option[org.kiama.example.iswim.secd.SECDBase.TypeValue]
7214 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productElement(x$1: Int): Any
6600 ===> org.kiama.example.oberon0.L3.c.CAddrExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
11618 ===> org.kiama.rewriting.Rewriter.map(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
9044 ===> org.kiama.example.obr.SPARCTree.MulW.l: org.kiama.example.obr.SPARCTree.Datum
12570 ===> org.kiama.util.ParserUtilitiesTests.Tup6.toString(): String
2724 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productIterator: Iterator[Any]
6103 ===> org.kiama.example.oberon0.L0.source.NotExp.priority: Int
11027 ===> org.kiama.output.PrettyPrinterBase.$anon.toDoc: PrettyPrinterBase.this.Doc
4785 ===> org.kiama.example.lambda2.Analysis.decl: org.kiama.example.lambda2.AST.Var => Option[org.kiama.example.lambda2.AST.Lam]
2268 ===> org.kiama.example.iswim.compiler.Syntax.Not.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Not
11514 ===> org.kiama.rewriting.Rewritable.arity: Int
11890 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
566 ===> org.kiama.example.RISC.RISCISA.MVNI.equals(x$1: Any): Boolean
4468 ===> org.kiama.example.lambda.AST.Sub.copy$default$3: org.kiama.example.lambda.AST.Exp @scala.annotation.unchecked.uncheckedVariance
2047 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productArity: Int
7956 ===> org.kiama.example.obr.ObrTree.IntExp.toString(): String
5223 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
11333 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
1806 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4125 ===> org.kiama.example.iswim.secd.StackOps.Swap.readResolve(): Object
10457 ===> org.kiama.example.til.AST.For.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
8625 ===> org.kiama.example.obr.RISCTree.Local.copy(offset: Int): org.kiama.example.obr.RISCTree.Local
6632 ===> org.kiama.example.oberon0.L3.c.CDerefExp.readResolve(): Object
8653 ===> org.kiama.example.obr.RISCTree.Indexed.equals(x$1: Any): Boolean
6516 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.toString(): String
9080 ===> org.kiama.example.obr.SPARCTree.Not.d: org.kiama.example.obr.SPARCTree.Datum
4049 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.<init>(): SECDBase.this.EmptyCont.type
3688 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.<init>(): org.kiama.example.iswim.secd.SECDBase.MkUserException.type
10964 ===> org.kiama.output.Prefix.productPrefix: String
7503 ===> org.kiama.example.obr.ObrTree.ArrayVar.size: Int
10349 ===> org.kiama.example.til.AST.Program.<init>(): org.kiama.example.til.AST.Program.type
2200 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productElement(x$1: Int): Any
6685 ===> org.kiama.example.oberon0.L3.source.ValMode.equals(x$1: Any): Boolean
6714 ===> org.kiama.example.oberon0.L3.source.Call.<init>(idnuse: org.kiama.example.oberon0.base.source.IdnUse,params: List[org.kiama.example.oberon0.L0.source.Expression]): org.kiama.example.oberon0.L3.source.Call
10926 ===> org.kiama.machine.MachineTests.M.main: Unit
1273 ===> org.kiama.example.RISC.RISCISA.BR.apply(label: Int): org.kiama.example.RISC.RISCISA.BR
323 ===> org.kiama.attribution.AttributionTests.QuadTree.productIterator: Iterator[Any]
1695 ===> org.kiama.example.imperative.AST.Mul.toString(): String
9025 ===> org.kiama.example.obr.SPARCTree.IntDatum.unapply(x$0: org.kiama.example.obr.SPARCTree.IntDatum): Option[Int]
3082 ===> org.kiama.example.iswim.secd.IOOps.Write.copy(): org.kiama.example.iswim.secd.IOOps.Write
10765 ===> org.kiama.example.transform.AST.BinExpR.right: org.kiama.example.transform.AST.ExpR
9453 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productArity: Int
10104 ===> org.kiama.example.prolog.PrologTree.Atom.<init>(): org.kiama.example.prolog.PrologTree.Atom.type
1989 ===> org.kiama.example.iswim.compiler.Syntax.Variable.s: String
3264 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productArity: Int
5492 ===> org.kiama.example.oberon0.L0.c.CGtExp.canEqual(x$1: Any): Boolean
10394 ===> org.kiama.example.til.AST.IfThen.copy(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.IfThen
4723 ===> org.kiama.example.lambda2.AST.AddOp.productArity: Int
5795 ===> org.kiama.example.oberon0.L0.source.NamedType.unapply(x$0: org.kiama.example.oberon0.L0.source.NamedType): Option[org.kiama.example.oberon0.base.source.IdnUse]
1710 ===> org.kiama.example.imperative.AST.Div.productIterator: Iterator[Any]
4282 ===> org.kiama.example.json.JSONTree.JArray.readResolve(): Object
1722 ===> org.kiama.example.imperative.AST.Null.<init>(): org.kiama.example.imperative.AST.Null
9237 ===> org.kiama.example.obr.SymbolTable.Variable.readResolve(): Object
3486 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.MkClosures): Option[List[org.kiama.example.iswim.secd.SECDBase.FunctionSpec]]
4506 ===> org.kiama.example.lambda.Generator.arbExp: org.scalacheck.Arbitrary[org.kiama.example.lambda.AST.Exp]
5915 ===> org.kiama.example.oberon0.L0.source.GtExp.toString(): String
6036 ===> org.kiama.example.oberon0.L0.source.DivExp.<init>(): org.kiama.example.oberon0.L0.source.DivExp.type
8076 ===> org.kiama.example.obr.ObrTree.OrExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.OrExp
10814 ===> org.kiama.example.transform.AST.BinExp.canEqual(x$1: Any): Boolean
1054 ===> org.kiama.example.RISC.RISCISA.STB.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.STB
9555 ===> org.kiama.example.oneohonecompanies.Company.DU.d: org.kiama.example.oneohonecompanies.Company.Dept
357 ===> org.kiama.attribution.Decorators.<init>(): org.kiama.attribution.Decorators.type
5423 ===> org.kiama.example.oberon0.L0.c.CNeExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNeExp
626 ===> org.kiama.example.RISC.RISCISA.SUB.productIterator: Iterator[Any]
9463 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.readResolve(): Object
2673 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.hashCode(): Int
6630 ===> org.kiama.example.oberon0.L3.c.CDerefExp.apply(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L3.c.CDerefExp
11738 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5373 ===> org.kiama.example.oberon0.L0.c.CTypeDef.equals(x$1: Any): Boolean
11081 ===> org.kiama.output.PrettyPrinterBase.hash: PrettyPrinterBase.this.Doc
11328 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
8182 ===> org.kiama.example.obr.RISCTransformation.cblock(clause: org.kiama.example.obr.ObrTree.Catch,exitlab: org.kiama.example.obr.RISCTree.Label): List[org.kiama.example.obr.RISCTree.Item]
74 ===> org.kiama.attribution.Attribution.CachedAttribute.apply(t: T): U
2239 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productIterator: Iterator[Any]
711 ===> org.kiama.example.RISC.RISCISA.DIV.canEqual(x$1: Any): Boolean
7207 ===> org.kiama.example.oberon0.base.c.CArrayType.unapply(x$0: org.kiama.example.oberon0.base.c.CArrayType): Option[(Int, org.kiama.example.oberon0.base.c.CType)]
8258 ===> org.kiama.example.obr.RISCTree.Jmp.readResolve(): Object
4720 ===> org.kiama.example.lambda2.AST.AddOp.eval(l: Int,r: Int): Int
12398 ===> org.kiama.util.Messaging.Record.canEqual(x$1: Any): Boolean
5039 ===> org.kiama.example.lambda3.AST.EquivQuery.copy(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.EquivQuery
12242 ===> org.kiama.rewriting.UniplateTests.uniquevars: org.kiama.example.imperative.AST.Exp => org.kiama.example.imperative.AST.Exp
144 ===> org.kiama.attribution.AttributionTests.Pair.left: AttributionTests.this.Tree
1606 ===> org.kiama.example.imperative.AST.Var.<init>(): org.kiama.example.imperative.AST.Var.type
6487 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
7694 ===> org.kiama.example.obr.ObrTree.LoopStmt.copy$default$1: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
7758 ===> org.kiama.example.obr.ObrTree.RaiseStmt.apply(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.RaiseStmt
10100 ===> org.kiama.example.prolog.PrologTree.Atom.productIterator: Iterator[Any]
9849 ===> org.kiama.example.picojava.TypeAnalysis.isSubtypeOf: org.kiama.example.picojava.AbstractSyntax.TypeDecl => (org.kiama.example.picojava.AbstractSyntax.TypeDecl => Boolean)
391 ===> org.kiama.attribution.DynamicAttributionTests.Pair.right: DynamicAttributionTests.this.Tree
4452 ===> org.kiama.example.lambda.AST.App.productIterator: Iterator[Any]
518 ===> org.kiama.example.RISC.RISCISA.MOVI.productPrefix: String
1395 ===> org.kiama.example.dataflow.DataflowAST.While.productIterator: Iterator[Any]
3630 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.copy(): org.kiama.example.iswim.secd.SECDBase.PushEmpty
8312 ===> org.kiama.example.obr.RISCTree.Write.copy(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Write
11657 ===> org.kiama.rewriting.Rewriter.outermost(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
815 ===> org.kiama.example.RISC.RISCISA.CMPI.<init>(): org.kiama.example.RISC.RISCISA.CMPI.type
4936 ===> org.kiama.example.lambda2.Reduce.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2538 ===> org.kiama.example.iswim.compiler.Syntax.While.apply(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.While
1463 ===> org.kiama.example.dataflow.DataflowAST.Empty.productArity: Int
11502 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.canEqual(x$1: Any): Boolean
5476 ===> org.kiama.example.oberon0.L0.c.CLeExp.<init>(): org.kiama.example.oberon0.L0.c.CLeExp.type
4796 ===> org.kiama.example.lambda2.RewritingEvaluator.$init$(): Unit
4572 ===> org.kiama.example.lambda2.AST.App.productPrefix: String
12491 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productElement(x$1: Int): Any
7802 ===> org.kiama.example.obr.ObrTree.Catch.copy$default$2: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
10419 ===> org.kiama.example.til.AST.IfElse.productArity: Int
964 ===> org.kiama.example.RISC.RISCISA.XORI.readResolve(): Object
9471 ===> org.kiama.example.obr.tests.ObrExecTests.forExecTests: List[(String, List[Int], Int)]
1383 ===> org.kiama.example.dataflow.DataflowAST.Assign.apply(left: org.kiama.example.dataflow.DataflowAST.Var,right: org.kiama.example.dataflow.DataflowAST.Var): org.kiama.example.dataflow.DataflowAST.Assign
1154 ===> org.kiama.example.RISC.RISCISA.WRL.apply(): org.kiama.example.RISC.RISCISA.WRL
9575 ===> org.kiama.example.oneohonecompanies.Cut.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7664 ===> org.kiama.example.obr.ObrTree.ForStmt.equals(x$1: Any): Boolean
7637 ===> org.kiama.example.obr.ObrTree.ExitStmt.productIterator: Iterator[Any]
8777 ===> org.kiama.example.obr.SPARCTree.Jmp.productArity: Int
7542 ===> org.kiama.example.obr.ObrTree.EnumVar.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,consts: List[org.kiama.example.obr.ObrTree.EnumConst]): org.kiama.example.obr.ObrTree.EnumVar
3969 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.<init>(): SECDBase.this.EmptyValue.type
12536 ===> org.kiama.util.ParserUtilitiesTests.Tup5.copy$default$5: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
6855 ===> org.kiama.example.oberon0.L4.c.CFieldExp.copy(record: org.kiama.example.oberon0.base.c.CExpression,field: String): org.kiama.example.oberon0.L4.c.CFieldExp
8262 ===> org.kiama.example.obr.RISCTree.LabelDef.copy$default$1: org.kiama.example.obr.RISCTree.Label @scala.annotation.unchecked.uncheckedVariance
11496 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.copy(i: Int): org.kiama.rewriting.SupportPositionedRewriterTests.Leaf
1557 ===> org.kiama.example.dataflow.Optimise.run(t: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.Stm
942 ===> org.kiama.example.RISC.RISCISA.XOR.unapply(x$0: org.kiama.example.RISC.RISCISA.XOR): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
5796 ===> org.kiama.example.oberon0.L0.source.NamedType.readResolve(): Object
7307 ===> org.kiama.example.oberon0.base.source.Block.unapply(x$0: org.kiama.example.oberon0.base.source.Block): Option[(List[org.kiama.example.oberon0.base.source.Declaration], List[org.kiama.example.oberon0.base.source.Statement])]
12510 ===> org.kiama.util.ParserUtilitiesTests.Tup4.copy$default$3: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
10622 ===> org.kiama.example.til.AST.Add.productElement(x$1: Int): Any
8633 ===> org.kiama.example.obr.RISCTree.Local.toString(): String
7486 ===> org.kiama.example.obr.ObrTree.BoolVar.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.BoolVar
4448 ===> org.kiama.example.lambda.AST.App.copy$default$2: org.kiama.example.lambda.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10527 ===> org.kiama.example.til.AST.Var.copy(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Var
8772 ===> org.kiama.example.obr.SPARCTree.Jmp.dest: org.kiama.example.obr.SPARCTree.Label
4900 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5462 ===> org.kiama.example.oberon0.L0.c.CLeExp.right: org.kiama.example.oberon0.base.c.CExpression
2317 ===> org.kiama.example.iswim.compiler.Syntax.Or.toString(): String
11672 ===> org.kiama.rewriting.Rewriter.eq: Rewriter.this.Strategy
12471 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productIterator: Iterator[Any]
7541 ===> org.kiama.example.obr.ObrTree.EnumVar.consts: List[org.kiama.example.obr.ObrTree.EnumConst]
4857 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11182 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.prio: Int
7182 ===> org.kiama.example.oberon0.base.c.CStrType.hashCode(): Int
972 ===> org.kiama.example.RISC.RISCISA.LDW.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
1702 ===> org.kiama.example.imperative.AST.Div.value: Double
12244 ===> org.kiama.rewriting.UniplateTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
261 ===> org.kiama.attribution.AttributionTests.GenSeqTree.toString(): String
8146 ===> org.kiama.example.obr.ObrTree.StarExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.StarExp
4742 ===> org.kiama.example.lambda2.AST.SubOp.canEqual(x$1: Any): Boolean
599 ===> org.kiama.example.RISC.RISCISA.ADDI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
10120 ===> org.kiama.example.prolog.PrologTree.Pred.canEqual(x$1: Any): Boolean
11301 ===> org.kiama.rewriting.NominalRewriter.<init>(): org.kiama.rewriting.NominalRewriter
7256 ===> org.kiama.example.oberon0.base.c.CIntExp.toString(): String
2 ===> org.kiama.attribution.Attributable.parent: org.kiama.attribution.Attributable
8347 ===> org.kiama.example.obr.RISCTree.AddW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
137 ===> org.kiama.attribution.UncachedAttribution.paramAttr[A, T <: AnyRef, U](name: String)(f: A => (T => U)): UncachedAttribution.this.UncachedParamAttribute[A,T,U]
12582 ===> org.kiama.util.Positioned.start_$eq(x$1: scala.util.parsing.input.Position): Unit
12515 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productIterator: Iterator[Any]
6764 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.unapply(x$0: SymbolTable.this.ArrayType): Option[(Int, SymbolTable.this.Type)]
11053 ===> org.kiama.output.PrettyPrinterBase.fold(ds: Seq[PrettyPrinterBase.this.Doc],f: (PrettyPrinterBase.this.Doc, PrettyPrinterBase.this.Doc) => PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
1505 ===> org.kiama.example.dataflow.For.copy$default$2: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
909 ===> org.kiama.example.RISC.RISCISA.ORI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
6094 ===> org.kiama.example.oberon0.L0.source.NegExp.toString(): String
7997 ===> org.kiama.example.obr.ObrTree.MinusExp.toString(): String
1117 ===> org.kiama.example.RISC.RISCISA.WRD.canEqual(x$1: Any): Boolean
6545 ===> org.kiama.example.oberon0.L3.c.CAddrType.copy$default$1: org.kiama.example.oberon0.base.c.CType @scala.annotation.unchecked.uncheckedVariance
7830 ===> org.kiama.example.obr.ObrTree.AndExp.equals(x$1: Any): Boolean
5691 ===> org.kiama.example.oberon0.L0.c.CNotExp.productIterator: Iterator[Any]
7958 ===> org.kiama.example.obr.ObrTree.IntExp.<init>(): org.kiama.example.obr.ObrTree.IntExp.type
11703 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8760 ===> org.kiama.example.obr.SPARCTree.Bne.productArity: Int
4676 ===> org.kiama.example.lambda2.AST.IntType.toString(): String
10291 ===> org.kiama.example.repmin.Fork.toString(): String
900 ===> org.kiama.example.RISC.RISCISA.OR.unapply(x$0: org.kiama.example.RISC.RISCISA.OR): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
10570 ===> org.kiama.example.til.AST.Str.equals(x$1: Any): Boolean
4169 ===> org.kiama.example.iswim.secd.StringOps.StringValue.copy(s: String): StringOps.this.StringValue
9075 ===> org.kiama.example.obr.SPARCTree.NegW.<init>(): org.kiama.example.obr.SPARCTree.NegW.type
3409 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.readResolve(): Object
1639 ===> org.kiama.example.imperative.AST.Add.r: org.kiama.example.imperative.AST.Exp
6794 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.canEqual(x$1: Any): Boolean
5939 ===> org.kiama.example.oberon0.L0.source.SumExpression.<init>(op: String): org.kiama.example.oberon0.L0.source.SumExpression
12256 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1108 ===> org.kiama.example.RISC.RISCISA.WRD.c: org.kiama.example.RISC.RISCISA.RegNo
2924 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.unapply(x$0: org.kiama.example.iswim.secd.ConversionOps.ToBoolean): Boolean
421 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.<init>(): DynamicAttributionTests.this.Leaf.type
10647 ===> org.kiama.example.til.AST.Sub.<init>(): org.kiama.example.til.AST.Sub.type
282 ===> org.kiama.attribution.AttributionTests.PairTree.p: (AttributionTests.this.Tree, AttributionTests.this.Tree)
2555 ===> org.kiama.example.iswim.compiler.Syntax.Block.apply(es: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Block
6381 ===> org.kiama.example.oberon0.L2.source.ValCond.toString(): String
2334 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.toString(): String
4472 ===> org.kiama.example.lambda.AST.Sub.productIterator: Iterator[Any]
5471 ===> org.kiama.example.oberon0.L0.c.CLeExp.productIterator: Iterator[Any]
7004 ===> org.kiama.example.oberon0.base.Driver.input: Option[String]
858 ===> org.kiama.example.RISC.RISCISA.AND.unapply(x$0: org.kiama.example.RISC.RISCISA.AND): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
4724 ===> org.kiama.example.lambda2.AST.AddOp.productElement(x$1: Int): Any
12143 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1831 ===> org.kiama.example.imperative.AST.While(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
6130 ===> org.kiama.example.oberon0.L0.source.IntExp.toString(): String
9877 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.bxInBB: org.kiama.example.picojava.AbstractSyntax.Use
4808 ===> org.kiama.example.lambda2.InnermostSubst.innermost(s: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
1050 ===> org.kiama.example.RISC.RISCISA.STB.b: org.kiama.example.RISC.RISCISA.RegNo
425 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.readResolve(): Object
9389 ===> org.kiama.example.obr.SymbolTable.EnumType.hashCode(): Int
10140 ===> org.kiama.example.prolog.PrologTree.Cut.apply(): org.kiama.example.prolog.PrologTree.Cut
8551 ===> org.kiama.example.obr.RISCTree.Not.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
11375 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.copy$default$1: org.kiama.rewriting.SupportPositionalRewriterTests.Node @scala.annotation.unchecked.uncheckedVariance
4085 ===> org.kiama.example.iswim.secd.StackOps.Pop.<init>(): org.kiama.example.iswim.secd.StackOps.Pop.type
1924 ===> org.kiama.example.iswim.compiler.Parser.reserved: scala.collection.immutable.HashSet[String]
8762 ===> org.kiama.example.obr.SPARCTree.Bne.productIterator: Iterator[Any]
10298 ===> org.kiama.example.repmin.Leaf.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
3606 ===> org.kiama.example.iswim.secd.SECDBase.Resume.hashCode(): Int
1036 ===> org.kiama.example.RISC.RISCISA.STW.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
6270 ===> org.kiama.example.oberon0.L1.source.WhileStatement.toString(): String
11436 ===> org.kiama.rewriting.PositionedRewriterTests.t: org.kiama.rewriting.SupportPositionedRewriterTests.Two
9931 ===> org.kiama.example.prolog.Interpreter.TermGoal.toString(): String
7873 ===> org.kiama.example.obr.ObrTree.FieldExp.field: org.kiama.example.obr.ObrTree.Identifier
1632 ===> org.kiama.example.imperative.AST.Neg.readResolve(): Object
4529 ===> org.kiama.example.lambda2.AST.Var.<init>(i: org.kiama.example.lambda2.AST.Idn): org.kiama.example.lambda2.AST.Var
12052 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12312 ===> org.kiama.util.Environments.Entity.<init>(): Environments.this.Entity
9317 ===> org.kiama.example.obr.SymbolTable.BoolType.productIterator: Iterator[Any]
12595 ===> org.kiama.util.PositionedParserUtilities.$anon.apply(in: PositionedParserUtilities.this.Input): PositionedParserUtilities.this.ParseResult[T]
5321 ===> org.kiama.example.oberon0.L0.TypeAnalyser.isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type): Boolean
7010 ===> org.kiama.example.oberon0.base.Driver.resetflags(): Unit
5647 ===> org.kiama.example.oberon0.L0.c.CAndExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
2353 ===> org.kiama.example.iswim.compiler.Syntax.Binding.toString(): String
8837 ===> org.kiama.example.obr.SPARCTree.Ret.readResolve(): Object
11702 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7363 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean): PrettyPrinter.this.Doc
9761 ===> org.kiama.example.picojava.AbstractSyntax.Dot.canEqual(x$1: Any): Boolean
7172 ===> org.kiama.example.oberon0.base.c.CIntType.apply(): org.kiama.example.oberon0.base.c.CIntType
8941 ===> org.kiama.example.obr.SPARCTree.CmpneW.productArity: Int
9894 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.aInBB: org.kiama.example.picojava.AbstractSyntax.Use
2487 ===> org.kiama.example.iswim.compiler.Syntax.Apply.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
1057 ===> org.kiama.example.RISC.RISCISA.STB.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
10434 ===> org.kiama.example.til.AST.While.copy(e: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.While
4914 ===> org.kiama.example.lambda2.ParLazyUpdate.update(eval: org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
4290 ===> org.kiama.example.json.JSONTree.JString.productIterator: Iterator[Any]
10861 ===> org.kiama.example.transform.Driver.process(program: org.kiama.example.transform.AST.Program,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
2886 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productIterator: Iterator[Any]
11236 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.equals(x$1: Any): Boolean
4434 ===> org.kiama.example.lambda.AST.Lam.canEqual(x$1: Any): Boolean
9890 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.aInB: org.kiama.example.picojava.AbstractSyntax.Use
1170 ===> org.kiama.example.RISC.RISCISA.BEQ.productElement(x$1: Int): Any
6088 ===> org.kiama.example.oberon0.L0.source.NegExp.productPrefix: String
5865 ===> org.kiama.example.oberon0.L0.source.LtExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.LtExp
5834 ===> org.kiama.example.oberon0.L0.source.EqExp.canEqual(x$1: Any): Boolean
6723 ===> org.kiama.example.oberon0.L3.source.Call.hashCode(): Int
1354 ===> org.kiama.example.dataflow.VariablesImpl.defines: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
3600 ===> org.kiama.example.iswim.secd.SECDBase.Resume.copy(): org.kiama.example.iswim.secd.SECDBase.Resume
11919 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2051 ===> org.kiama.example.iswim.compiler.Syntax.Plus.hashCode(): Int
9070 ===> org.kiama.example.obr.SPARCTree.NegW.productIterator: Iterator[Any]
12627 ===> org.kiama.util.RegexParserTests.failParseFailure(f: RegexParserTests.this.Failure): Unit
5518 ===> org.kiama.example.oberon0.L0.c.CGeExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CGeExp
6276 ===> org.kiama.example.oberon0.L1.source.PrettyPrinter.ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement): PrettyPrinter.this.Doc
4240 ===> org.kiama.example.json.JSONTree.JObject.canEqual(x$1: Any): Boolean
6393 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productElement(x$1: Int): Any
5232 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.<init>(): SymbolTable.this.Constant.type
2339 ===> org.kiama.example.iswim.compiler.Syntax.Binding.e: org.kiama.example.iswim.compiler.Syntax.Expr
2433 ===> org.kiama.example.iswim.compiler.Syntax.Import.productPrefix: String
11329 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
8456 ===> org.kiama.example.obr.RISCTree.CmpltW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpltW
1402 ===> org.kiama.example.dataflow.DataflowAST.While.apply(cond: org.kiama.example.dataflow.DataflowAST.Var,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.While
10145 ===> org.kiama.example.prolog.SemanticAnalysis.checktype(n: org.kiama.example.prolog.PrologTree.Term): Unit
2122 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.productPrefix: String
12475 ===> org.kiama.util.ParserUtilitiesTests.Tup2.equals(x$1: Any): Boolean
8229 ===> org.kiama.example.obr.RISCTree.Bne.productPrefix: String
9673 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.Name: String
12381 ===> org.kiama.util.IO.filereader(name: String,encoding: String): java.io.BufferedReader
5354 ===> org.kiama.example.oberon0.L0.c.CInitDecl.hashCode(): Int
5346 ===> org.kiama.example.oberon0.L0.c.CInitDecl.copy(decl: org.kiama.example.oberon0.base.c.CVarDecl,e: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CInitDecl
7332 ===> org.kiama.example.oberon0.base.source.IdnDef.productElement(x$1: Int): Any
11433 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
7288 ===> org.kiama.example.oberon0.base.source.ModuleDecl.readResolve(): Object
6427 ===> org.kiama.example.oberon0.L3.NameAnalyser.entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): NameAnalyser.this.Entity
11833 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4435 ===> org.kiama.example.lambda.AST.Lam.hashCode(): Int
9522 ===> org.kiama.example.oneohonecompanies.Company.Employee.copy$default$2: org.kiama.example.oneohonecompanies.Company.Address @scala.annotation.unchecked.uncheckedVariance
7577 ===> org.kiama.example.obr.ObrTree.IntConst.value: Int
10389 ===> org.kiama.example.til.AST.Assign.unapply(x$0: org.kiama.example.til.AST.Assign): Option[(org.kiama.example.til.AST.Id, org.kiama.example.til.AST.Exp)]
3005 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.toString(): String
7682 ===> org.kiama.example.obr.ObrTree.IfStmt.canEqual(x$1: Any): Boolean
9690 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.readResolve(): Object
9970 ===> org.kiama.example.prolog.Interpreter.MatchGoal.equals(x$1: Any): Boolean
459 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.isDefinedAt(x$1: DynamicAttributionTests.this.Tree): Boolean
1280 ===> org.kiama.example.RISC.RISCISA.BSR.productPrefix: String
2114 ===> org.kiama.example.iswim.compiler.Syntax.Divide.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Divide): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
9637 ===> org.kiama.example.picojava.AbstractSyntax.Block.productIterator: Iterator[Any]
5935 ===> org.kiama.example.oberon0.L0.source.GeExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.GeExp
325 ===> org.kiama.attribution.AttributionTests.QuadTree.hashCode(): Int
2447 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.body: org.kiama.example.iswim.compiler.Syntax.Expr
12114 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4564 ===> org.kiama.example.lambda2.AST.Lam.unapply(x$0: org.kiama.example.lambda2.AST.Lam): Option[(org.kiama.example.lambda2.AST.Idn, org.kiama.example.lambda2.AST.Type, org.kiama.example.lambda2.AST.Exp)]
5148 ===> org.kiama.example.lambda3.AST.SwapQuery.<init>(): org.kiama.example.lambda3.AST.SwapQuery.type
246 ===> org.kiama.attribution.AttributionTests.SetTree.unapply(x$0: AttributionTests.this.SetTree): Option[Set[AttributionTests.this.Tree]]
11296 ===> org.kiama.rewriting.NominalAST.GenName.initcount: Int
10770 ===> org.kiama.example.transform.AST.BinExpR.copy$default$3: org.kiama.example.transform.AST.ExpR @scala.annotation.unchecked.uncheckedVariance
12340 ===> org.kiama.util.Environments.UnknownEntity.productPrefix: String
5497 ===> org.kiama.example.oberon0.L0.c.CGtExp.toString(): String
555 ===> org.kiama.example.RISC.RISCISA.MVNI.toString(): String
11742 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11926 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
6884 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.canEqual(x$1: Any): Boolean
5832 ===> org.kiama.example.oberon0.L0.source.EqExp.productElement(x$1: Int): Any
9943 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.copy$default$2: org.kiama.example.prolog.PrologTree.Term @scala.annotation.unchecked.uncheckedVariance
9905 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.<init>(ps: Set[(String, org.kiama.example.prolog.PrologTree.Term)]): org.kiama.example.prolog.Interpreter.DisplayGoal
4356 ===> org.kiama.example.json.JSONTree.JNull.equals(x$1: Any): Boolean
1179 ===> org.kiama.example.RISC.RISCISA.BEQ.readResolve(): Object
5889 ===> org.kiama.example.oberon0.L0.source.LeExp.productElement(x$1: Int): Any
7747 ===> org.kiama.example.obr.ObrTree.RaiseStmt.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
1812 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
6398 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.equals(x$1: Any): Boolean
10943 ===> org.kiama.output.LeftAssoc.readResolve(): Object
7086 ===> org.kiama.example.oberon0.base.c.CInclude.productPrefix: String
12085 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7575 ===> org.kiama.example.obr.ObrTree.EnumConst.readResolve(): Object
1411 ===> org.kiama.example.dataflow.DataflowAST.If.copy$default$2: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
5926 ===> org.kiama.example.oberon0.L0.source.GeExp.productArity: Int
7880 ===> org.kiama.example.obr.ObrTree.FieldExp.productElement(x$1: Int): Any
4586 ===> org.kiama.example.lambda2.AST.Opn.o: org.kiama.example.lambda2.AST.Op
5265 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productIterator: Iterator[Any]
53 ===> org.kiama.attribution.AttributionBase.ConstantAttribute.apply(t: T): U
7977 ===> org.kiama.example.obr.ObrTree.LessExp.<init>(): org.kiama.example.obr.ObrTree.LessExp.type
11862 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4512 ===> org.kiama.example.lambda2.AST.Num.<init>(n: Int): org.kiama.example.lambda2.AST.Num
9947 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productIterator: Iterator[Any]
101 ===> org.kiama.attribution.Attribution.$anon.<init>(): Attribution.this.CachedDynamicAttribute[T,U]{}
4868 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1955 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.bds: List[org.kiama.example.iswim.compiler.Syntax.Stmt]
9443 ===> org.kiama.example.obr.SymbolTable.UnknownType.readResolve(): Object
8363 ===> org.kiama.example.obr.RISCTree.Cond.t: org.kiama.example.obr.RISCTree.Datum
10655 ===> org.kiama.example.til.AST.Eq.copy(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Eq
5080 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productElement(x$1: Int): Any
3365 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productElement(x$1: Int): Any
9481 ===> org.kiama.example.oneohonecompanies.Company.Company.copy$default$1: List[org.kiama.example.oneohonecompanies.Company.Dept] @scala.annotation.unchecked.uncheckedVariance
10809 ===> org.kiama.example.transform.AST.BinExp.copy$default$3: org.kiama.example.transform.AST.Exp @scala.annotation.unchecked.uncheckedVariance
11955 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5209 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productElement(x$1: Int): Any
10350 ===> org.kiama.example.til.AST.Program.toString(): String
1777 ===> org.kiama.example.imperative.AST.While.<init>(e: org.kiama.example.imperative.AST.Exp,b: org.kiama.example.imperative.AST.Stmt): org.kiama.example.imperative.AST.While
11026 ===> org.kiama.output.PrettyPrinterBase.$anon.<init>(): PrettyPrinterBase.this.PrettyPrintable
3569 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.copy(nm: org.kiama.example.iswim.secd.SECDBase.Name): org.kiama.example.iswim.secd.SECDBase.Lookup
2552 ===> org.kiama.example.iswim.compiler.Syntax.Block.equals(x$1: Any): Boolean
2465 ===> org.kiama.example.iswim.compiler.Syntax.Return.res: org.kiama.example.iswim.compiler.Syntax.Expr
6765 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.readResolve(): Object
126 ===> org.kiama.attribution.UncachedAttribution.UncachedParamAttribute.$anon.optName: Option[String]
3613 ===> org.kiama.example.iswim.secd.SECDBase.Resume.readResolve(): Object
11327 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{}
3794 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.hashCode(): Int
6574 ===> org.kiama.example.oberon0.L3.c.CCall.toString(): String
10027 ===> org.kiama.example.prolog.PrologTree.Fact.productIterator: Iterator[Any]
10736 ===> org.kiama.example.transform.AST.Program.canEqual(x$1: Any): Boolean
9927 ===> org.kiama.example.prolog.Interpreter.TermGoal.productElement(x$1: Int): Any
5801 ===> org.kiama.example.oberon0.L0.source.Assignment.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
1941 ===> org.kiama.example.iswim.compiler.Parser.Pos.readResolve(): Object
9758 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productArity: Int
1021 ===> org.kiama.example.RISC.RISCISA.POP.hashCode(): Int
8387 ===> org.kiama.example.obr.RISCTree.CmpeqW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
10117 ===> org.kiama.example.prolog.PrologTree.Pred.productArity: Int
9650 ===> org.kiama.example.picojava.AbstractSyntax.TypeDecl.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.TypeDecl
7793 ===> org.kiama.example.obr.ObrTree.TryBody.toString(): String
2835 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.hashCode(): Int
8052 ===> org.kiama.example.obr.ObrTree.NotEqualExp.toString(): String
5500 ===> org.kiama.example.oberon0.L0.c.CGtExp.readResolve(): Object
2517 ===> org.kiama.example.iswim.compiler.Syntax.If.<init>(): org.kiama.example.iswim.compiler.Syntax.If.type
9623 ===> org.kiama.example.picojava.AbstractSyntax.Program.toString(): String
11000 ===> org.kiama.output.PrettyBinaryExpression.left: org.kiama.output.PrettyExpression
8443 ===> org.kiama.example.obr.RISCTree.CmpltW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpltW
7749 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productArity: Int
12095 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2142 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productArity: Int
5296 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.copy$default$2: SymbolTable.this.Type @scala.annotation.unchecked.uncheckedVariance
5069 ===> org.kiama.example.lambda3.AST.EvalQuery.toString(): String
2521 ===> org.kiama.example.iswim.compiler.Syntax.If.readResolve(): Object
11071 ===> org.kiama.output.PrettyPrinterBase.squotes(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
6059 ===> org.kiama.example.oberon0.L0.source.ModExp.readResolve(): Object
1529 ===> org.kiama.example.dataflow.DataflowFor.$anonfun.isDefinedAt(x$1: org.kiama.example.dataflow.DataflowAST.Stm): Boolean
10609 ===> org.kiama.example.til.AST.Div.<init>(): org.kiama.example.til.AST.Div.type
8430 ===> org.kiama.example.obr.RISCTree.CmpgtW.productIterator: Iterator[Any]
9791 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productPrefix: String
11475 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.l: org.kiama.rewriting.SupportPositionedRewriterTests.Node
2077 ===> org.kiama.example.iswim.compiler.Syntax.Minus.readResolve(): Object
10989 ===> org.kiama.output.Infix.canEqual(x$1: Any): Boolean
7744 ===> org.kiama.example.obr.ObrTree.RaiseStmt.idn: org.kiama.example.obr.ObrTree.Identifier
5063 ===> org.kiama.example.lambda3.AST.EvalQuery.productIterator: Iterator[Any]
3395 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
487 ===> org.kiama.example.RISC.RISCISA.Instr.<init>(): org.kiama.example.RISC.RISCISA.Instr
773 ===> org.kiama.example.RISC.RISCISA.MODI.productIterator: Iterator[Any]
7666 ===> org.kiama.example.obr.ObrTree.ForStmt.toString(): String
5635 ===> org.kiama.example.oberon0.L0.c.CModExp.equals(x$1: Any): Boolean
297 ===> org.kiama.attribution.AttributionTests.PairTree.unapply(x$0: AttributionTests.this.PairTree): Option[(AttributionTests.this.Tree, AttributionTests.this.Tree)]
5411 ===> org.kiama.example.oberon0.L0.c.CEqExp.productIterator: Iterator[Any]
1200 ===> org.kiama.example.RISC.RISCISA.BLT.productPrefix: String
7911 ===> org.kiama.example.obr.ObrTree.IdnExp.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IdnExp
7175 ===> org.kiama.example.oberon0.base.c.CStrType.<init>(): org.kiama.example.oberon0.base.c.CStrType
5387 ===> org.kiama.example.oberon0.L0.c.CAssignment.productElement(x$1: Int): Any
11532 ===> org.kiama.rewriting.Rewriter.PlusStrategy.lhs: Rewriter.this.Strategy
2374 ===> org.kiama.example.iswim.compiler.Syntax.Let.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Let): Option[(List[org.kiama.example.iswim.compiler.Syntax.Binding], org.kiama.example.iswim.compiler.Syntax.Expr)]
2769 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.canEqual(x$1: Any): Boolean
11050 ===> org.kiama.output.PrettyPrinterBase.any(a: Any): PrettyPrinterBase.this.Doc
432 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productElement(x$1: Int): Any
8394 ===> org.kiama.example.obr.RISCTree.CmpeqW.hashCode(): Int
145 ===> org.kiama.attribution.AttributionTests.Pair.right: AttributionTests.this.Tree
756 ===> org.kiama.example.RISC.RISCISA.MOD.<init>(): org.kiama.example.RISC.RISCISA.MOD.type
449 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.applyOrElse[A1 <: DynamicAttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
2944 ===> org.kiama.example.iswim.secd.ConversionOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
5338 ===> org.kiama.example.oberon0.L0.c.CNamedType.<init>(): org.kiama.example.oberon0.L0.c.CNamedType.type
4379 ===> org.kiama.example.json.Rewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11989 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11884 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4122 ===> org.kiama.example.iswim.secd.StackOps.Swap.toString(): String
11969 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8107 ===> org.kiama.example.obr.ObrTree.PlusExp.toString(): String
1577 ===> org.kiama.example.imperative.AST.Num.copy$default$1: Double @scala.annotation.unchecked.uncheckedVariance
11163 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.copy(left: ParenPrettyPrinterTests.this.Exp,right: ParenPrettyPrinterTests.this.Exp,prio: Int,fix: org.kiama.output.Side): ParenPrettyPrinterTests.this.InOp
3718 ===> org.kiama.example.iswim.secd.SECDBase.GetType.<init>(): org.kiama.example.iswim.secd.SECDBase.GetType.type
10048 ===> org.kiama.example.prolog.PrologTree.Rule.hashCode(): Int
1038 ===> org.kiama.example.RISC.RISCISA.STW.productArity: Int
11459 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.<init>(a: org.kiama.rewriting.SupportPositionedRewriterTests.Node): org.kiama.rewriting.SupportPositionedRewriterTests.One
5276 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.copy(ident: String): SymbolTable.this.BuiltinType
3691 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.MkUserException): Boolean
12154 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11222 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.apply(exp: ParenPrettyPrinterTests.this.Exp,prio: Int): ParenPrettyPrinterTests.this.PreOp
11718 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11871 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4099 ===> org.kiama.example.iswim.secd.StackOps.Dup.hashCode(): Int
6520 ===> org.kiama.example.oberon0.L3.SymbolTable.defenvPairs: List[(String, SymbolTable.this.Entity)]
9922 ===> org.kiama.example.prolog.Interpreter.TermGoal.<init>(term: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.TermGoal
1549 ===> org.kiama.example.dataflow.DataflowTests.s41: org.kiama.example.dataflow.DataflowAST.Block
10560 ===> org.kiama.example.til.AST.Str.<init>(s: String): org.kiama.example.til.AST.Str
8548 ===> org.kiama.example.obr.RISCTree.Not.d: org.kiama.example.obr.RISCTree.Datum
8621 ===> org.kiama.example.obr.RISCTree.SequenceDatum.readResolve(): Object
3314 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.unapply(x$0: org.kiama.example.iswim.secd.RecordOps.MkRecord): Option[Int]
9306 ===> org.kiama.example.obr.SymbolTable.IntType.toString(): String
6375 ===> org.kiama.example.oberon0.L2.source.ValCond.productIterator: Iterator[Any]
4121 ===> org.kiama.example.iswim.secd.StackOps.Swap.<init>(): org.kiama.example.iswim.secd.StackOps.Swap.type
3882 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.<init>(): org.kiama.example.iswim.secd.SECDBase.UnexpectedExit
10620 ===> org.kiama.example.til.AST.Add.productPrefix: String
5716 ===> org.kiama.example.oberon0.L0.c.CIdnExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CIdnExp): Option[String]
1885 ===> org.kiama.example.imperative.Generator.arbNum: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Num]
6417 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translate(s: org.kiama.example.oberon0.base.source.Statement): org.kiama.example.oberon0.base.c.CStatement
4968 ===> org.kiama.example.lambda3.AST.Num.productPrefix: String
4184 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.<init>(m: String): StringOps.this.UserExceptionValue
4550 ===> org.kiama.example.lambda2.AST.Lam.copy$default$1: org.kiama.example.lambda2.AST.Idn @scala.annotation.unchecked.uncheckedVariance
1596 ===> org.kiama.example.imperative.AST.Var.toString(): String
2651 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productElement(x$1: Int): Any
10180 ===> org.kiama.example.prolog.SymbolTable.Variable.<init>(tipe: org.kiama.example.prolog.SymbolTable.Type): org.kiama.example.prolog.SymbolTable.Variable
6882 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productElement(x$1: Int): Any
7050 ===> org.kiama.example.oberon0.base.TestDriver.pprintastFlagDefault: Boolean
4551 ===> org.kiama.example.lambda2.AST.Lam.copy$default$2: org.kiama.example.lambda2.AST.Type @scala.annotation.unchecked.uncheckedVariance
411 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.copy(value: Int): DynamicAttributionTests.this.Leaf
7251 ===> org.kiama.example.oberon0.base.c.CIntExp.canEqual(x$1: Any): Boolean
8740 ===> org.kiama.example.obr.SPARCTree.Beq.productPrefix: String
1122 ===> org.kiama.example.RISC.RISCISA.WRD.apply(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRD
2753 ===> org.kiama.example.iswim.driver.Main.main(args: Array[String]): Unit
7188 ===> org.kiama.example.oberon0.base.c.CStrType.unapply(x$0: org.kiama.example.oberon0.base.c.CStrType): Boolean
2582 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.hashCode(): Int
3786 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.readResolve(): Object
2037 ===> org.kiama.example.iswim.compiler.Syntax.Negate.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Negate
11613 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
338 ===> org.kiama.attribution.AttributionTests.Base.<init>(): Base.type
6895 ===> org.kiama.example.oberon0.L4.source.IndexExp.<init>(base: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L4.source.IndexExp
3585 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.copy(): org.kiama.example.iswim.secd.SECDBase.AppCC
7085 ===> org.kiama.example.oberon0.base.c.CInclude.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
10681 ===> org.kiama.example.til.AST.Ne.canEqual(x$1: Any): Boolean
4895 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
994 ===> org.kiama.example.RISC.RISCISA.LDB.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
983 ===> org.kiama.example.RISC.RISCISA.LDW.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.LDW
9712 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.Body: org.kiama.example.picojava.AbstractSyntax.Stmt
8100 ===> org.kiama.example.obr.ObrTree.PlusExp.productElement(x$1: Int): Any
4036 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.apply(bdy: org.kiama.example.iswim.secd.SECDBase.Code): SECDBase.this.PrimValue
4814 ===> org.kiama.example.lambda2.Lambda.typecheck: Boolean
2710 ===> org.kiama.example.iswim.compiler.Syntax.Val.<init>(): org.kiama.example.iswim.compiler.Syntax.Val.type
1612 ===> org.kiama.example.imperative.AST.Neg.<init>(e: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Neg
12594 ===> org.kiama.util.PositionedParserUtilities.$anon.<init>(): PositionedParserUtilities.this.Parser[T] with PositionedParserUtilities.this.OnceParser[T]
1166 ===> org.kiama.example.RISC.RISCISA.BEQ.toString(): String
1041 ===> org.kiama.example.RISC.RISCISA.STW.canEqual(x$1: Any): Boolean
8599 ===> org.kiama.example.obr.RISCTree.SubW.toString(): String
1908 ===> org.kiama.example.imperative.ImperativeGen.generator: org.scalacheck.Arbitrary[org.kiama.example.imperative.AST.Stmt]
7725 ===> org.kiama.example.obr.ObrTree.WhileStmt.cond: org.kiama.example.obr.ObrTree.Expression
12055 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10169 ===> org.kiama.example.prolog.SymbolTable.Predicate.productIterator: Iterator[Any]
6568 ===> org.kiama.example.oberon0.L3.c.CCall.productIterator: Iterator[Any]
12449 ===> org.kiama.util.ParserUtilitiesTests.Node.productPrefix: String
3171 ===> org.kiama.example.iswim.secd.IntegerOps.Add.copy(): org.kiama.example.iswim.secd.IntegerOps.Add
2020 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.apply(i: Int): org.kiama.example.iswim.compiler.Syntax.NumVal
7460 ===> org.kiama.example.obr.ObrTree.IntVar.hashCode(): Int
9043 ===> org.kiama.example.obr.SPARCTree.LdW.readResolve(): Object
3075 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.readResolve(): Object
1367 ===> org.kiama.example.dataflow.DataflowAST.Assign.left: org.kiama.example.dataflow.DataflowAST.Var
9210 ===> org.kiama.example.obr.SymbolTable.prevloc: Int
10893 ===> org.kiama.machine.Machine.ParamState.change(t: T,u: U): Unit
12460 ===> org.kiama.util.ParserUtilitiesTests.Node.unapply(x$0: ParserUtilitiesTests.this.Node): Option[Int]
6200 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productElement(x$1: Int): Any
10525 ===> org.kiama.example.til.AST.Var.i: org.kiama.example.til.AST.Id
12079 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3908 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.toString(): String
11981 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10218 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productIterator: Iterator[Any]
7781 ===> org.kiama.example.obr.ObrTree.TryBody.<init>(stmts: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.TryBody
7618 ===> org.kiama.example.obr.ObrTree.AssignStmt.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
7204 ===> org.kiama.example.oberon0.base.c.CArrayType.<init>(): org.kiama.example.oberon0.base.c.CArrayType.type
1629 ===> org.kiama.example.imperative.AST.Neg.toString(): String
3753 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.toString(): String
3771 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.readResolve(): Object
3037 ===> org.kiama.example.iswim.secd.HeapOps.Put.<init>(): org.kiama.example.iswim.secd.HeapOps.Put.type
9780 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.toString(): String
8779 ===> org.kiama.example.obr.SPARCTree.Jmp.productIterator: Iterator[Any]
8167 ===> org.kiama.example.obr.RISCEncoder.arith(op: (org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo) => org.kiama.example.RISC.RISCISA.Instr,e: org.kiama.example.obr.RISCTree.Datum,d: org.kiama.example.obr.RISCTree.Datum): Unit
4553 ===> org.kiama.example.lambda2.AST.Lam.productPrefix: String
10179 ===> org.kiama.example.prolog.SymbolTable.Variable.tipe: org.kiama.example.prolog.SymbolTable.Type
12476 ===> org.kiama.util.ParserUtilitiesTests.Tup2.<init>(): ParserUtilitiesTests.this.Tup2.type
1422 ===> org.kiama.example.dataflow.DataflowAST.If.toString(): String
975 ===> org.kiama.example.RISC.RISCISA.LDW.productArity: Int
4349 ===> org.kiama.example.json.JSONTree.JNull.productPrefix: String
7882 ===> org.kiama.example.obr.ObrTree.FieldExp.canEqual(x$1: Any): Boolean
9090 ===> org.kiama.example.obr.SPARCTree.Not.toString(): String
4985 ===> org.kiama.example.lambda3.AST.Var.productPrefix: String
9126 ===> org.kiama.example.obr.SPARCTree.SubW.canEqual(x$1: Any): Boolean
219 ===> org.kiama.attribution.AttributionTests.ListTree.productArity: Int
312 ===> org.kiama.attribution.AttributionTests.TripleTree.toString(): String
9923 ===> org.kiama.example.prolog.Interpreter.TermGoal.copy(term: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.TermGoal
231 ===> org.kiama.attribution.AttributionTests.SetTree.s: Set[AttributionTests.this.Tree]
10634 ===> org.kiama.example.til.AST.Sub.r: org.kiama.example.til.AST.Exp
1683 ===> org.kiama.example.imperative.AST.Mul.copy(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Mul
5206 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.copy$default$2: org.kiama.example.oberon0.base.source.ModuleDecl @scala.annotation.unchecked.uncheckedVariance
2609 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.<init>(p: org.kiama.example.iswim.compiler.Syntax.Pattern,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MatchClause
6925 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.toString(): String
10581 ===> org.kiama.example.til.AST.Mul.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
8667 ===> org.kiama.example.obr.RISCTree.Label.canEqual(x$1: Any): Boolean
8480 ===> org.kiama.example.obr.RISCTree.IntDatum.copy(num: Int): org.kiama.example.obr.RISCTree.IntDatum
3755 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.TypeTypeValue): Boolean
1641 ===> org.kiama.example.imperative.AST.Add.value: Double
4736 ===> org.kiama.example.lambda2.AST.SubOp.eval(l: Int,r: Int): Int
6438 ===> org.kiama.example.oberon0.L3.Parser.$init$(): Unit
10564 ===> org.kiama.example.til.AST.Str.productPrefix: String
5611 ===> org.kiama.example.oberon0.L0.c.CDivExp.productIterator: Iterator[Any]
3940 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.MatchError): Boolean
10992 ===> org.kiama.output.Infix.equals(x$1: Any): Boolean
5567 ===> org.kiama.example.oberon0.L0.c.COrExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
2054 ===> org.kiama.example.iswim.compiler.Syntax.Plus.<init>(): org.kiama.example.iswim.compiler.Syntax.Plus.type
6793 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productIterator: Iterator[Any]
45 ===> org.kiama.attribution.AttributionBase.CircularAttribute.value(t: T): U
11563 ===> org.kiama.rewriting.Rewriter.log$default$3[T]: org.kiama.util.Emitter @scala.annotation.unchecked.uncheckedVariance
5091 ===> org.kiama.example.lambda3.AST.FreshQuery.n: org.kiama.rewriting.NominalAST.Name
9252 ===> org.kiama.example.obr.SymbolTable.Constant.toString(): String
9982 ===> org.kiama.example.prolog.Interpreter.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5002 ===> org.kiama.example.lambda3.AST.App.copy$default$1: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10308 ===> org.kiama.example.repmin.Leaf.toString(): String
5981 ===> org.kiama.example.oberon0.L0.source.OrExp.right: org.kiama.example.oberon0.L0.source.Expression
5450 ===> org.kiama.example.oberon0.L0.c.CLtExp.productElement(x$1: Int): Any
12541 ===> org.kiama.util.ParserUtilitiesTests.Tup5.canEqual(x$1: Any): Boolean
1086 ===> org.kiama.example.RISC.RISCISA.PSH.<init>(): org.kiama.example.RISC.RISCISA.PSH.type
10050 ===> org.kiama.example.prolog.PrologTree.Rule.equals(x$1: Any): Boolean
1000 ===> org.kiama.example.RISC.RISCISA.LDB.hashCode(): Int
7439 ===> org.kiama.example.obr.ObrTree.ObrInt.productElement(x$1: Int): Any
5741 ===> org.kiama.example.oberon0.L0.source.VarDecl.idndefs: List[org.kiama.example.oberon0.base.source.IdnDef]
11123 ===> org.kiama.output.PrettyPrinter.empty: PrettyPrinter.this.Doc
10573 ===> org.kiama.example.til.AST.Str.apply(s: String): org.kiama.example.til.AST.Str
11560 ===> org.kiama.rewriting.Rewriter.log[T](s: => Rewriter.this.Strategy,msg: String,emitter: org.kiama.util.Emitter): Rewriter.this.Strategy
8644 ===> org.kiama.example.obr.RISCTree.Indexed.copy$default$1: org.kiama.example.obr.RISCTree.Local @scala.annotation.unchecked.uncheckedVariance
9995 ===> org.kiama.example.prolog.Main.process(querytree: org.kiama.example.prolog.PrologTree.Literal): Unit
12590 ===> org.kiama.util.PositionedParserUtilities.Parser[T](f: PositionedParserUtilities.this.Input => PositionedParserUtilities.this.ParseResult[T]): PositionedParserUtilities.this.Parser[T]
5723 ===> org.kiama.example.oberon0.L0.source.ConstDecl.exp: org.kiama.example.oberon0.L0.source.Expression
5677 ===> org.kiama.example.oberon0.L0.c.CNegExp.<init>(): org.kiama.example.oberon0.L0.c.CNegExp.type
12320 ===> org.kiama.util.Environments.Named.num: Int
6446 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.copy(ident: String,decl: org.kiama.example.oberon0.L3.source.ProcDecl): SymbolTable.this.Procedure
8065 ===> org.kiama.example.obr.ObrTree.NotExp.hashCode(): Int
3979 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.copy$default$3: org.kiama.example.iswim.secd.SECDBase.Code @scala.annotation.unchecked.uncheckedVariance
7959 ===> org.kiama.example.obr.ObrTree.IntExp.toString(): String
1328 ===> org.kiama.example.RISC.RISCISA.Comment.<init>(text: String): org.kiama.example.RISC.RISCISA.Comment
4761 ===> org.kiama.example.lambda2.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
9806 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.copy(Name: String): org.kiama.example.picojava.AbstractSyntax.UnknownDecl
12543 ===> org.kiama.util.ParserUtilitiesTests.Tup5.toString(): String
5108 ===> org.kiama.example.lambda3.AST.FreshQuery.apply(n: org.kiama.rewriting.NominalAST.Name,e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.FreshQuery
8632 ===> org.kiama.example.obr.RISCTree.Local.hashCode(): Int
5764 ===> org.kiama.example.oberon0.L0.source.TypeDecl.copy$default$1: org.kiama.example.oberon0.base.source.IdnDef @scala.annotation.unchecked.uncheckedVariance
12209 ===> org.kiama.rewriting.UniplateTests.varexp: org.kiama.example.imperative.AST.Div
1051 ===> org.kiama.example.RISC.RISCISA.STB.im: org.kiama.example.RISC.RISCISA.Imm
7473 ===> org.kiama.example.obr.ObrTree.IntParam.productArity: Int
4693 ===> org.kiama.example.lambda2.AST.FunType.canEqual(x$1: Any): Boolean
11728 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3072 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.toString(): String
8452 ===> org.kiama.example.obr.RISCTree.CmpltW.toString(): String
1439 ===> org.kiama.example.dataflow.DataflowAST.Block.toString(): String
3652 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.canEqual(x$1: Any): Boolean
11248 ===> org.kiama.rewriting.CallbackRewriter.$anon.apply(t: CallbackRewriter.this.Term): Option[CallbackRewriter.this.Term]
10755 ===> org.kiama.example.transform.AST.VarDecl.toString(): String
6965 ===> org.kiama.example.oberon0.L4.source.FieldExp.unapply(x$0: org.kiama.example.oberon0.L4.source.FieldExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L4.source.FieldIdn)]
7147 ===> org.kiama.example.oberon0.base.c.CBlock.productArity: Int
5709 ===> org.kiama.example.oberon0.L0.c.CIdnExp.canEqual(x$1: Any): Boolean
11158 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.fix: org.kiama.output.Side
5881 ===> org.kiama.example.oberon0.L0.source.LeExp.left: org.kiama.example.oberon0.L0.source.Expression
6739 ===> org.kiama.example.oberon0.L4.NameAnalyser.$init$(): Unit
1581 ===> org.kiama.example.imperative.AST.Num.productIterator: Iterator[Any]
2478 ===> org.kiama.example.iswim.compiler.Syntax.Return.toString(): String
9891 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.declBc: org.kiama.example.picojava.AbstractSyntax.VarDecl
10688 ===> org.kiama.example.til.AST.Ne.unapply(x$0: org.kiama.example.til.AST.Ne): Option[(org.kiama.example.til.AST.Exp, org.kiama.example.til.AST.Exp)]
1387 ===> org.kiama.example.dataflow.DataflowAST.While.body: org.kiama.example.dataflow.DataflowAST.Stm
7771 ===> org.kiama.example.obr.ObrTree.TryStmt.canEqual(x$1: Any): Boolean
343 ===> org.kiama.attribution.AttributionTests.Base.k4: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
11827 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9701 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productIterator: Iterator[Any]
905 ===> org.kiama.example.RISC.RISCISA.ORI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ORI
4847 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.example.lambda2.AST.Bind, B1 >: org.kiama.example.lambda2.AST.Exp](x$1: A1,default: A1 => B1): B1
9356 ===> org.kiama.example.obr.SymbolTable.RecordType.equals(x$1: Any): Boolean
10633 ===> org.kiama.example.til.AST.Sub.l: org.kiama.example.til.AST.Exp
12439 ===> org.kiama.util.WhitespaceParser.parsingWhitespace_$eq(x$1: Boolean): Unit
9985 ===> org.kiama.example.prolog.Interpreter.varsof(t: org.kiama.example.prolog.PrologTree.Term): Set[String]
3231 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.copy(): org.kiama.example.iswim.secd.IntegerOps.Rem
4524 ===> org.kiama.example.lambda2.AST.Num.toString(): String
7505 ===> org.kiama.example.obr.ObrTree.ArrayVar.copy(idn: org.kiama.example.obr.ObrTree.Identifier,size: Int): org.kiama.example.obr.ObrTree.ArrayVar
5757 ===> org.kiama.example.oberon0.L0.source.VarDecl.apply(idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L0.source.VarDecl
1123 ===> org.kiama.example.RISC.RISCISA.WRD.unapply(x$0: org.kiama.example.RISC.RISCISA.WRD): Option[org.kiama.example.RISC.RISCISA.RegNo]
10353 ===> org.kiama.example.til.AST.Program.readResolve(): Object
9031 ===> org.kiama.example.obr.SPARCTree.LdW.productPrefix: String
9104 ===> org.kiama.example.obr.SPARCTree.RemW.productArity: Int
6373 ===> org.kiama.example.oberon0.L2.source.ValCond.productArity: Int
3715 ===> org.kiama.example.iswim.secd.SECDBase.GetType.hashCode(): Int
10281 ===> org.kiama.example.repmin.Fork.copy$default$2: org.kiama.example.repmin.Tree @scala.annotation.unchecked.uncheckedVariance
3990 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productElement(x$1: Int): Any
4837 ===> org.kiama.example.lambda2.LazySubstEvaluator.<init>(): org.kiama.example.lambda2.LazySubstEvaluator
5078 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productPrefix: String
9305 ===> org.kiama.example.obr.SymbolTable.IntType.<init>(): org.kiama.example.obr.SymbolTable.IntType.type
2784 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.canEqual(x$1: Any): Boolean
6369 ===> org.kiama.example.oberon0.L2.source.ValCond.<init>(value: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L2.source.ValCond
7013 ===> org.kiama.example.oberon0.base.Driver.section(emitter: org.kiama.util.Emitter,name: String): Unit
11624 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.$anonfun.applyOrElse[A1 <: Rewriter.this.Term, B1 >: Rewriter.this.Term](x$1: A1,default: A1 => B1): B1
9811 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productIterator: Iterator[Any]
3048 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.canEqual(x$1: Any): Boolean
4123 ===> org.kiama.example.iswim.secd.StackOps.Swap.apply(n: Int,m: Int): org.kiama.example.iswim.secd.StackOps.Swap
2904 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.toString(): String
10880 ===> org.kiama.machine.Machine.stateTToT[T, U >: T](t: Machine.this.State[T]): U
5361 ===> org.kiama.example.oberon0.L0.c.CInitDecl.readResolve(): Object
11370 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.readResolve(): Object
6167 ===> org.kiama.example.oberon0.L1.Parser.statementDef: Parser.this.PackratParser[org.kiama.example.oberon0.base.source.Statement]
2616 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productIterator: Iterator[Any]
6641 ===> org.kiama.example.oberon0.L3.source.ProcDecl.<init>(idndef: org.kiama.example.oberon0.base.source.IdnDef,params: List[org.kiama.example.oberon0.L3.source.FPSection],body: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L3.source.ProcDecl
8492 ===> org.kiama.example.obr.RISCTree.IntDatum.apply(num: Int): org.kiama.example.obr.RISCTree.IntDatum
9926 ===> org.kiama.example.prolog.Interpreter.TermGoal.productArity: Int
10909 ===> org.kiama.machine.Machine.updates: List[Machine.this.Update]
3302 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
7389 ===> org.kiama.example.oberon0.drivers.A3Phases.tasklevel: Int
7399 ===> org.kiama.example.obr.Driver.usage: String
8018 ===> org.kiama.example.obr.ObrTree.ModExp.unapply(x$0: org.kiama.example.obr.ObrTree.ModExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
5581 ===> org.kiama.example.oberon0.L0.c.CMulExp.left: org.kiama.example.oberon0.base.c.CExpression
3324 ===> org.kiama.example.iswim.secd.RecordOps.Fields.toString(): String
3428 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.code: org.kiama.example.iswim.secd.SECDBase.Code
3465 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.<init>(): org.kiama.example.iswim.secd.SECDBase.FunctionSpec.type
3543 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.canEqual(x$1: Any): Boolean
287 ===> org.kiama.attribution.AttributionTests.PairTree.productArity: Int
2776 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.unapply(x$0: org.kiama.example.iswim.secd.BooleanOps.PushTrue): Boolean
3204 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productElement(x$1: Int): Any
10969 ===> org.kiama.output.Prefix.hashCode(): Int
3458 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productArity: Int
849 ===> org.kiama.example.RISC.RISCISA.AND.productArity: Int
7615 ===> org.kiama.example.obr.ObrTree.AssignStmt.<init>(left: org.kiama.example.obr.ObrTree.AssignNode,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AssignStmt
1023 ===> org.kiama.example.RISC.RISCISA.POP.<init>(): org.kiama.example.RISC.RISCISA.POP.type
3114 ===> org.kiama.example.iswim.secd.IOOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
3656 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.<init>(): org.kiama.example.iswim.secd.SECDBase.PushMachineException.type
3825 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productPrefix: String
969 ===> org.kiama.example.RISC.RISCISA.LDW.toString(): String
8275 ===> org.kiama.example.obr.RISCTree.LabelDef.readResolve(): Object
9892 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.cInB: org.kiama.example.picojava.AbstractSyntax.Use
10873 ===> org.kiama.machine.Machine.State.isUndefined: Boolean
3917 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.productElement(x$1: Int): Any
5333 ===> org.kiama.example.oberon0.L0.c.CNamedType.productIterator: Iterator[Any]
7623 ===> org.kiama.example.obr.ObrTree.AssignStmt.canEqual(x$1: Any): Boolean
11405 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.unapply(x$0: org.kiama.rewriting.SupportPositionalRewriterTests.Leaf): Option[Int]
9878 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.byInBB: org.kiama.example.picojava.AbstractSyntax.Use
8329 ===> org.kiama.example.obr.RISCTree.Read.copy(): org.kiama.example.obr.RISCTree.Read
6804 ===> org.kiama.example.oberon0.L4.SymbolTable.isRecord(e: SymbolTable.this.Entity): Boolean
8712 ===> org.kiama.example.obr.SPARCTree.<init>(): org.kiama.example.obr.SPARCTree.type
10944 ===> org.kiama.output.RightAssoc.<init>(): org.kiama.output.RightAssoc.type
4789 ===> org.kiama.example.lambda2.Evaluator.eval(exp: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Exp
10576 ===> org.kiama.example.til.AST.Mul.l: org.kiama.example.til.AST.Exp
6444 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.decl: org.kiama.example.oberon0.L3.source.ProcDecl
12318 ===> org.kiama.util.Environments.Named.$init$(): Unit
7371 ===> org.kiama.example.oberon0.drivers.A1Phases.tasklevel: Int
2678 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr,c: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.ThrowTo
9324 ===> org.kiama.example.obr.SymbolTable.BoolType.unapply(x$0: org.kiama.example.obr.SymbolTable.BoolType): Boolean
306 ===> org.kiama.attribution.AttributionTests.TripleTree.productIterator: Iterator[Any]
2076 ===> org.kiama.example.iswim.compiler.Syntax.Minus.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Minus): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
4535 ===> org.kiama.example.lambda2.AST.Var.productIterator: Iterator[Any]
10110 ===> org.kiama.example.prolog.PrologTree.Pred.ts: List[org.kiama.example.prolog.PrologTree.Term]
5149 ===> org.kiama.example.lambda3.AST.SwapQuery.toString(): String
3343 ===> org.kiama.example.iswim.secd.RecordOps.GetField.apply(): org.kiama.example.iswim.secd.RecordOps.GetField
7369 ===> org.kiama.example.oberon0.drivers.A1Phases.artefact: String
10262 ===> org.kiama.example.prolog.Subst.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8074 ===> org.kiama.example.obr.ObrTree.OrExp.right: org.kiama.example.obr.ObrTree.Expression
9781 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.equals(x$1: Any): Boolean
1192 ===> org.kiama.example.RISC.RISCISA.BNE.toString(): String
2387 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.hashCode(): Int
2509 ===> org.kiama.example.iswim.compiler.Syntax.If.productPrefix: String
3083 ===> org.kiama.example.iswim.secd.IOOps.Write.productPrefix: String
7365 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.semisep(l: List[org.kiama.example.oberon0.base.source.SourceASTNode],sep: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
4718 ===> org.kiama.example.lambda2.AST.Op.eval(l: Int,r: Int): Int
56 ===> org.kiama.attribution.AttributionBase.$anon.optName: Option[String]
2982 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productArity: Int
663 ===> org.kiama.example.RISC.RISCISA.MUL.toString(): String
9339 ===> org.kiama.example.obr.SymbolTable.ArrayType.<init>(): org.kiama.example.obr.SymbolTable.ArrayType.type
542 ===> org.kiama.example.RISC.RISCISA.MVN.productIterator: Iterator[Any]
8485 ===> org.kiama.example.obr.RISCTree.IntDatum.productIterator: Iterator[Any]
12304 ===> org.kiama.util.StringEmitter.emit(any: Any): Unit
3634 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productIterator: Iterator[Any]
2714 ===> org.kiama.example.iswim.compiler.Syntax.Val.readResolve(): Object
5708 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productIterator: Iterator[Any]
11594 ===> org.kiama.rewriting.Rewriter.$anon.oneProduct(p: Product): Option[Rewriter.this.Term]
4285 ===> org.kiama.example.json.JSONTree.JString.copy(value: String): org.kiama.example.json.JSONTree.JString
1739 ===> org.kiama.example.imperative.AST.Seqn.vars: Set[org.kiama.example.imperative.AST.Idn]
4050 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.toString(): String
1873 ===> org.kiama.example.imperative.Imperative.setup(args: Array[String]): Boolean
5386 ===> org.kiama.example.oberon0.L0.c.CAssignment.productArity: Int
836 ===> org.kiama.example.RISC.RISCISA.CHKI.apply(b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.CHKI
8283 ===> org.kiama.example.obr.RISCTree.Ret.hashCode(): Int
11426 ===> org.kiama.rewriting.PositionedRewriterTests.pl2f: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
1272 ===> org.kiama.example.RISC.RISCISA.BR.toString(): String
11349 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionalRewriter.Term): Boolean
5410 ===> org.kiama.example.oberon0.L0.c.CEqExp.productElement(x$1: Int): Any
12502 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n1: ParserUtilitiesTests.this.Node
8826 ===> org.kiama.example.obr.SPARCTree.Ret.productArity: Int
12257 ===> org.kiama.util.CompilerBase.$init$(): Unit
734 ===> org.kiama.example.RISC.RISCISA.DIVI.equals(x$1: Any): Boolean
2519 ===> org.kiama.example.iswim.compiler.Syntax.If.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr,thn: org.kiama.example.iswim.compiler.Syntax.Expr,els: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.If
8474 ===> org.kiama.example.obr.RISCTree.DivW.toString(): String
11698 ===> org.kiama.rewriting.Rewriter.<init>(): org.kiama.rewriting.Rewriter.type
1045 ===> org.kiama.example.RISC.RISCISA.STW.toString(): String
2643 ===> org.kiama.example.iswim.compiler.Syntax.Match.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Match): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, List[org.kiama.example.iswim.compiler.Syntax.MatchClause])]
1991 ===> org.kiama.example.iswim.compiler.Syntax.Variable.copy(s: String): org.kiama.example.iswim.compiler.Syntax.Variable
12347 ===> org.kiama.util.Environments.UnknownEntity.equals(x$1: Any): Boolean
5856 ===> org.kiama.example.oberon0.L0.source.NeExp.equals(x$1: Any): Boolean
1350 ===> org.kiama.example.dataflow.Variables.uses: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
5536 ===> org.kiama.example.oberon0.L0.c.CAddExp.<init>(): org.kiama.example.oberon0.L0.c.CAddExp.type
3574 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productIterator: Iterator[Any]
11243 ===> org.kiama.<init>(): org.kiama.package.type
6971 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productPrefix: String
11495 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.<init>(i: Int): org.kiama.rewriting.SupportPositionedRewriterTests.Leaf
11557 ===> org.kiama.rewriting.Rewriter.id: Rewriter.this.Strategy
7270 ===> org.kiama.example.oberon0.base.source.ModuleDecl.idnuse: org.kiama.example.oberon0.base.source.IdnUse
78 ===> org.kiama.attribution.Attribution.CachedParamAttribute.optName: Option[String]
9174 ===> org.kiama.example.obr.SPARCTree.Label.toString(): String
5199 ===> org.kiama.example.oberon0.L0.Parser.keywordStrings: List[String]
44 ===> org.kiama.attribution.AttributionBase.CircularAttribute.memo: java.util.IdentityHashMap[T,U]
1783 ===> org.kiama.example.imperative.AST.While.productArity: Int
7470 ===> org.kiama.example.obr.ObrTree.IntParam.copy(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IntParam
10785 ===> org.kiama.example.transform.AST.Factor.<init>(exp: org.kiama.example.transform.AST.PrimExp): org.kiama.example.transform.AST.Factor
1106 ===> org.kiama.example.RISC.RISCISA.RD.unapply(x$0: org.kiama.example.RISC.RISCISA.RD): Option[org.kiama.example.RISC.RISCISA.RegNo]
12452 ===> org.kiama.util.ParserUtilitiesTests.Node.productIterator: Iterator[Any]
8383 ===> org.kiama.example.obr.RISCTree.CmpeqW.l: org.kiama.example.obr.RISCTree.Datum
4248 ===> org.kiama.example.json.JSONTree.JObject.readResolve(): Object
10187 ===> org.kiama.example.prolog.SymbolTable.Variable.canEqual(x$1: Any): Boolean
2967 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.c: org.kiama.example.iswim.secd.SECDBase.Code
2157 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.NotEqual
6491 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productElement(x$1: Int): Any
5812 ===> org.kiama.example.oberon0.L0.source.Assignment.toString(): String
4313 ===> org.kiama.example.json.JSONTree.JNumber.toString(): String
3349 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productArity: Int
99 ===> org.kiama.attribution.Attribution.attr[T <: AnyRef, U](name: String)(f: T => U): Attribution.this.CachedAttribute[T,U]
4084 ===> org.kiama.example.iswim.secd.StackOps.Pop.equals(x$1: Any): Boolean
6559 ===> org.kiama.example.oberon0.L3.c.CCall.s: String
10583 ===> org.kiama.example.til.AST.Mul.productArity: Int
5120 ===> org.kiama.example.lambda3.AST.SubstQuery.productPrefix: String
3872 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.productElement(x$1: Int): Any
9254 ===> org.kiama.example.obr.SymbolTable.Constant.<init>(): org.kiama.example.obr.SymbolTable.Constant.type
11075 ===> org.kiama.output.PrettyPrinterBase.parens(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
10234 ===> org.kiama.example.prolog.SymbolTable.ListType.canEqual(x$1: Any): Boolean
11183 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.<init>(exp: ParenPrettyPrinterTests.this.Exp,prio: Int): ParenPrettyPrinterTests.this.PostOp
3604 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productIterator: Iterator[Any]
12288 ===> org.kiama.util.JLineConsole.<init>(): org.kiama.util.JLineConsole.type
6871 ===> org.kiama.example.oberon0.L4.c.PrettyPrinter.$init$(): Unit
11973 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
837 ===> org.kiama.example.RISC.RISCISA.CHKI.unapply(x$0: org.kiama.example.RISC.RISCISA.CHKI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
4711 ===> org.kiama.example.lambda2.AST.NoType.equals(x$1: Any): Boolean
3154 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.<init>(n: Int): org.kiama.example.iswim.secd.IntegerOps.PushInt
996 ===> org.kiama.example.RISC.RISCISA.LDB.productArity: Int
788 ===> org.kiama.example.RISC.RISCISA.CMP.copy(b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.CMP
9163 ===> org.kiama.example.obr.SPARCTree.Indexed.canEqual(x$1: Any): Boolean
8564 ===> org.kiama.example.obr.RISCTree.Not.readResolve(): Object
1698 ===> org.kiama.example.imperative.AST.Mul.readResolve(): Object
7504 ===> org.kiama.example.obr.ObrTree.ArrayVar.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,size: Int): org.kiama.example.obr.ObrTree.ArrayVar
11694 ===> org.kiama.rewriting.Rewriter.lastly(s: => Rewriter.this.Strategy,f: => Rewriter.this.Strategy): Rewriter.this.Strategy
12285 ===> org.kiama.util.Console.<init>(): org.kiama.util.Console
4877 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
384 ===> org.kiama.attribution.Decorators.indflt(t: T): U
7293 ===> org.kiama.example.oberon0.base.source.Block.copy(decls: List[org.kiama.example.oberon0.base.source.Declaration],stmts: List[org.kiama.example.oberon0.base.source.Statement]): org.kiama.example.oberon0.base.source.Block
7851 ===> org.kiama.example.obr.ObrTree.BoolExp.unapply(x$0: org.kiama.example.obr.ObrTree.BoolExp): Option[Boolean]
8378 ===> org.kiama.example.obr.RISCTree.Cond.<init>(): org.kiama.example.obr.RISCTree.Cond.type
1409 ===> org.kiama.example.dataflow.DataflowAST.If.copy(cond: org.kiama.example.dataflow.DataflowAST.Var,tru: org.kiama.example.dataflow.DataflowAST.Stm,fls: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.If
11423 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
11136 ===> org.kiama.output.PrettyPrinterTests.Val.productPrefix: String
9883 ===> org.kiama.example.picojava.tests.ErrorTests.<init>(): org.kiama.example.picojava.tests.ErrorTests
776 ===> org.kiama.example.RISC.RISCISA.MODI.equals(x$1: Any): Boolean
6326 ===> org.kiama.example.oberon0.L2.source.ForStatement.readResolve(): Object
12144 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4201 ===> org.kiama.example.iswim.secd.StringOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
10787 ===> org.kiama.example.transform.AST.Factor.copy$default$1: org.kiama.example.transform.AST.PrimExp @scala.annotation.unchecked.uncheckedVariance
10289 ===> org.kiama.example.repmin.Fork.equals(x$1: Any): Boolean
3440 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.equals(x$1: Any): Boolean
2934 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productIterator: Iterator[Any]
10388 ===> org.kiama.example.til.AST.Assign.apply(i: org.kiama.example.til.AST.Id,e: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Assign
8440 ===> org.kiama.example.obr.RISCTree.CmpltW.l: org.kiama.example.obr.RISCTree.Datum
6451 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.productElement(x$1: Int): Any
5733 ===> org.kiama.example.oberon0.L0.source.ConstDecl.hashCode(): Int
6112 ===> org.kiama.example.oberon0.L0.source.NotExp.hashCode(): Int
999 ===> org.kiama.example.RISC.RISCISA.LDB.canEqual(x$1: Any): Boolean
11633 ===> org.kiama.rewriting.Rewriter.repeat1(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2259 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.toString(): String
10332 ===> org.kiama.example.til.ParsingMain.process(reader: java.io.Reader): Any
1564 ===> org.kiama.example.dataflow.Parser.$init$(): Unit
3354 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.toString(): String
10741 ===> org.kiama.example.transform.AST.Program.toString(): String
3287 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.hashCode(): Int
842 ===> org.kiama.example.RISC.RISCISA.AND.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5533 ===> org.kiama.example.oberon0.L0.c.CAddExp.hashCode(): Int
5395 ===> org.kiama.example.oberon0.L0.c.CAssignment.apply(desig: org.kiama.example.oberon0.base.c.CExpression,exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAssignment
10099 ===> org.kiama.example.prolog.PrologTree.Atom.productElement(x$1: Int): Any
1236 ===> org.kiama.example.RISC.RISCISA.BLE.canEqual(x$1: Any): Boolean
12072 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11285 ===> org.kiama.rewriting.NominalAST.Bind.productIterator: Iterator[Any]
5251 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.toString(): String
8370 ===> org.kiama.example.obr.RISCTree.Cond.productPrefix: String
11150 ===> org.kiama.output.PrettyPrinterTests.PVal.<init>(i: Int): PrettyPrinterTests.this.PVal
10393 ===> org.kiama.example.til.AST.IfThen.<init>(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.IfThen
11262 ===> org.kiama.rewriting.NominalAST.Name.productPrefix: String
1151 ===> org.kiama.example.RISC.RISCISA.WRL.equals(x$1: Any): Boolean
620 ===> org.kiama.example.RISC.RISCISA.SUB.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.SUB
5049 ===> org.kiama.example.lambda3.AST.EquivQuery.equals(x$1: Any): Boolean
12632 ===> org.kiama.util.TransformerTests.assertTransformOk[T](str: String,p: TransformerTests.this.Parser[T],t: T => T,result: T): Unit
1197 ===> org.kiama.example.RISC.RISCISA.BLT.<init>(label: Int): org.kiama.example.RISC.RISCISA.BLT
6713 ===> org.kiama.example.oberon0.L3.source.Call.params: List[org.kiama.example.oberon0.L0.source.Expression]
11968 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8310 ===> org.kiama.example.obr.RISCTree.Write.d: org.kiama.example.obr.RISCTree.Datum
3122 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productIterator: Iterator[Any]
9507 ===> org.kiama.example.oneohonecompanies.Company.Dept.canEqual(x$1: Any): Boolean
11203 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.exp: ParenPrettyPrinterTests.this.Exp
3153 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.n: Int
7431 ===> org.kiama.example.obr.ObrTree.ObrInt.<init>(idn1: org.kiama.example.obr.ObrTree.Identifier,decls: List[org.kiama.example.obr.ObrTree.Declaration],stmts: List[org.kiama.example.obr.ObrTree.Statement],idn2: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.ObrInt
6279 ===> org.kiama.example.oberon0.L2.Desugarer.transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
10805 ===> org.kiama.example.transform.AST.BinExp.<init>(left: org.kiama.example.transform.AST.Exp,op: String,right: org.kiama.example.transform.AST.Exp): org.kiama.example.transform.AST.BinExp
8796 ===> org.kiama.example.obr.SPARCTree.LabelDef.productIterator: Iterator[Any]
5631 ===> org.kiama.example.oberon0.L0.c.CModExp.productIterator: Iterator[Any]
11747 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Int](x$1: A1,default: A1 => B1): B1
1686 ===> org.kiama.example.imperative.AST.Mul.productPrefix: String
820 ===> org.kiama.example.RISC.RISCISA.CHKI.b: org.kiama.example.RISC.RISCISA.RegNo
6482 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.ident: String
6304 ===> org.kiama.example.oberon0.L2.source.ForStatement.upper: org.kiama.example.oberon0.L0.source.Expression
6385 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.minvalue: org.kiama.example.oberon0.L0.source.Expression
8004 ===> org.kiama.example.obr.ObrTree.ModExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.ModExp
5657 ===> org.kiama.example.oberon0.L0.c.CAndExp.toString(): String
3352 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.canEqual(x$1: Any): Boolean
2775 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.apply(): org.kiama.example.iswim.secd.BooleanOps.PushTrue
981 ===> org.kiama.example.RISC.RISCISA.LDW.<init>(): org.kiama.example.RISC.RISCISA.LDW.type
6382 ===> org.kiama.example.oberon0.L2.source.ValCond.apply(value: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L2.source.ValCond
11460 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.copy(a: org.kiama.rewriting.SupportPositionedRewriterTests.Node): org.kiama.rewriting.SupportPositionedRewriterTests.One
10822 ===> org.kiama.example.transform.AST.BinExp.readResolve(): Object
8586 ===> org.kiama.example.obr.RISCTree.SubW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.SubW
11266 ===> org.kiama.rewriting.NominalAST.Name.canEqual(x$1: Any): Boolean
8783 ===> org.kiama.example.obr.SPARCTree.Jmp.equals(x$1: Any): Boolean
12450 ===> org.kiama.util.ParserUtilitiesTests.Node.productArity: Int
3181 ===> org.kiama.example.iswim.secd.IntegerOps.Add.toString(): String
10236 ===> org.kiama.example.prolog.SymbolTable.ListType.equals(x$1: Any): Boolean
6510 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productElement(x$1: Int): Any
100 ===> org.kiama.attribution.Attribution.dynAttr[T <: AnyRef, U](optNameDef: Option[String])(f: T => U): Attribution.this.CachedDynamicAttribute[T,U]
10427 ===> org.kiama.example.til.AST.IfElse.toString(): String
3985 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.toString(): String
1691 ===> org.kiama.example.imperative.AST.Mul.hashCode(): Int
8525 ===> org.kiama.example.obr.RISCTree.MulW.equals(x$1: Any): Boolean
1743 ===> org.kiama.example.imperative.AST.Seqn.productArity: Int
5722 ===> org.kiama.example.oberon0.L0.source.ConstDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
5112 ===> org.kiama.example.lambda3.AST.SubstQuery.e1: org.kiama.example.lambda3.AST.Exp
4013 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productElement(x$1: Int): Any
2572 ===> org.kiama.example.iswim.compiler.Syntax.Empty.readResolve(): Object
12091 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11648 ===> org.kiama.rewriting.Rewriter.downup(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
5914 ===> org.kiama.example.oberon0.L0.source.GtExp.<init>(): org.kiama.example.oberon0.L0.source.GtExp.type
6678 ===> org.kiama.example.oberon0.L3.source.ValMode.productPrefix: String
12080 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5211 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.canEqual(x$1: Any): Boolean
2097 ===> org.kiama.example.iswim.compiler.Syntax.Divide.l: org.kiama.example.iswim.compiler.Syntax.Expr
11811 ===> org.kiama.rewriting.RewriterTests.Same.readResolve(): Object
5218 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.readResolve(): Object
1869 ===> org.kiama.example.imperative.ASTNonCase.Div.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Div
9117 ===> org.kiama.example.obr.SPARCTree.SubW.r: org.kiama.example.obr.SPARCTree.Datum
8959 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productPrefix: String
2375 ===> org.kiama.example.iswim.compiler.Syntax.Let.readResolve(): Object
7671 ===> org.kiama.example.obr.ObrTree.IfStmt.thens: List[org.kiama.example.obr.ObrTree.Statement]
1199 ===> org.kiama.example.RISC.RISCISA.BLT.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
4624 ===> org.kiama.example.lambda2.AST.Let.<init>(): org.kiama.example.lambda2.AST.Let.type
7110 ===> org.kiama.example.oberon0.base.c.CVarDecl.canEqual(x$1: Any): Boolean
7272 ===> org.kiama.example.oberon0.base.source.ModuleDecl.copy(idndef: org.kiama.example.oberon0.base.source.IdnDef,block: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.base.source.ModuleDecl
7774 ===> org.kiama.example.obr.ObrTree.TryStmt.equals(x$1: Any): Boolean
6716 ===> org.kiama.example.oberon0.L3.source.Call.copy$default$1: org.kiama.example.oberon0.base.source.IdnUse @scala.annotation.unchecked.uncheckedVariance
6053 ===> org.kiama.example.oberon0.L0.source.ModExp.toString(): String
7007 ===> org.kiama.example.oberon0.base.Driver.printastFlagDefault: Boolean
6838 ===> org.kiama.example.oberon0.L4.c.CIndexExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
6939 ===> org.kiama.example.oberon0.L4.source.FieldList.canEqual(x$1: Any): Boolean
12056 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7324 ===> org.kiama.example.oberon0.base.source.Identifier.<init>(): org.kiama.example.oberon0.base.source.Identifier
9921 ===> org.kiama.example.prolog.Interpreter.TermGoal.term: org.kiama.example.prolog.PrologTree.Term
8222 ===> org.kiama.example.obr.RISCTree.Beq.readResolve(): Object
1828 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
7902 ===> org.kiama.example.obr.ObrTree.GreaterExp.hashCode(): Int
7337 ===> org.kiama.example.oberon0.base.source.IdnDef.equals(x$1: Any): Boolean
7821 ===> org.kiama.example.obr.ObrTree.AndExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
10511 ===> org.kiama.example.til.AST.Id.copy(s: String): org.kiama.example.til.AST.Id
6534 ===> org.kiama.example.oberon0.L3.c.CVoidType.hashCode(): Int
82 ===> org.kiama.attribution.Attribution.CachedParamAttribute.apply(arg: A): Attribution.this.Attribute[T,U]
4921 ===> org.kiama.example.lambda2.ParLazyUpdateEvaluator.<init>(): org.kiama.example.lambda2.ParLazyUpdateEvaluator
3025 ===> org.kiama.example.iswim.secd.HeapOps.Get.unapply(x$0: org.kiama.example.iswim.secd.HeapOps.Get): Boolean
1444 ===> org.kiama.example.dataflow.DataflowAST.Return.<init>(ret: org.kiama.example.dataflow.DataflowAST.Var): org.kiama.example.dataflow.DataflowAST.Return
9095 ===> org.kiama.example.obr.SPARCTree.Not.unapply(x$0: org.kiama.example.obr.SPARCTree.Not): Option[org.kiama.example.obr.SPARCTree.Datum]
1128 ===> org.kiama.example.RISC.RISCISA.WRH.toString(): String
1640 ===> org.kiama.example.imperative.AST.Add.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Add
8723 ===> org.kiama.example.obr.SPARCTree.SPARC.productIterator: Iterator[Any]
6473 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.hashCode(): Int
5673 ===> org.kiama.example.oberon0.L0.c.CNegExp.canEqual(x$1: Any): Boolean
875 ===> org.kiama.example.RISC.RISCISA.ANDI.equals(x$1: Any): Boolean
4944 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2684 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
3228 ===> org.kiama.example.iswim.secd.IntegerOps.Div.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.Div): Boolean
2782 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productElement(x$1: Int): Any
2362 ===> org.kiama.example.iswim.compiler.Syntax.Let.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
9374 ===> org.kiama.example.obr.SymbolTable.RecordTypes.toString(): String
111 ===> org.kiama.attribution.Attribution.childAttr[T <: org.kiama.attribution.Attributable, U](f: T => (org.kiama.attribution.Attributable => U)): Attribution.this.CachedAttribute[T,U]
12554 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n5: ParserUtilitiesTests.this.Node
12403 ===> org.kiama.util.Messaging.Record.apply(pos: scala.util.parsing.input.Position,message: String): org.kiama.util.Messaging.Record
2332 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.equals(x$1: Any): Boolean
11764 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5216 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.apply(ident: String,decl: org.kiama.example.oberon0.base.source.ModuleDecl): SymbolTable.this.Module
565 ===> org.kiama.example.RISC.RISCISA.MVNI.hashCode(): Int
11229 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productPrefix: String
9699 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.productArity: Int
3638 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.equals(x$1: Any): Boolean
6731 ===> org.kiama.example.oberon0.L3.source.PrettyPrinter.$init$(): Unit
8404 ===> org.kiama.example.obr.RISCTree.CmpneW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpneW
2264 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.BoolVal): Option[Boolean]
3807 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productIterator: Iterator[Any]
1850 ===> org.kiama.example.imperative.ASTNonCase.Neg.<init>(e: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Neg
674 ===> org.kiama.example.RISC.RISCISA.MUL.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MUL
10680 ===> org.kiama.example.til.AST.Ne.productIterator: Iterator[Any]
5579 ===> org.kiama.example.oberon0.L0.c.COrExp.unapply(x$0: org.kiama.example.oberon0.L0.c.COrExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
9830 ===> org.kiama.example.picojava.NameResolution.decl: org.kiama.example.picojava.AbstractSyntax.Access => org.kiama.example.picojava.AbstractSyntax.Decl
9482 ===> org.kiama.example.oneohonecompanies.Company.Company.productPrefix: String
9458 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.equals(x$1: Any): Boolean
5892 ===> org.kiama.example.oberon0.L0.source.LeExp.hashCode(): Int
9262 ===> org.kiama.example.obr.SymbolTable.Unknown.productArity: Int
3254 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.equals(x$1: Any): Boolean
10021 ===> org.kiama.example.prolog.PrologTree.Fact.bdy: List[org.kiama.example.prolog.PrologTree.Term]
8389 ===> org.kiama.example.obr.RISCTree.CmpeqW.productPrefix: String
6362 ===> org.kiama.example.oberon0.L2.source.Case.<init>(): org.kiama.example.oberon0.L2.source.Case.type
8124 ===> org.kiama.example.obr.ObrTree.SlashExp.equals(x$1: Any): Boolean
2269 ===> org.kiama.example.iswim.compiler.Syntax.Not.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
6698 ===> org.kiama.example.oberon0.L3.source.FPSection.copy$default$3: org.kiama.example.oberon0.L0.source.TypeDef @scala.annotation.unchecked.uncheckedVariance
6263 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productElement(x$1: Int): Any
5853 ===> org.kiama.example.oberon0.L0.source.NeExp.canEqual(x$1: Any): Boolean
348 ===> org.kiama.attribution.AttributionTests.rootupd(in: AttributionTests.this.Tree => Int): org.kiama.==>[AttributionTests.this.Tree,Int]
11580 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
9028 ===> org.kiama.example.obr.SPARCTree.LdW.<init>(mem: org.kiama.example.obr.SPARCTree.Address): org.kiama.example.obr.SPARCTree.LdW
2895 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.readResolve(): Object
10436 ===> org.kiama.example.til.AST.While.copy$default$2: Seq[org.kiama.example.til.AST.Stat] @scala.annotation.unchecked.uncheckedVariance
11373 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.<init>(l: org.kiama.rewriting.SupportPositionalRewriterTests.Node,r: org.kiama.rewriting.SupportPositionalRewriterTests.Node): org.kiama.rewriting.SupportPositionalRewriterTests.Two
2864 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productPrefix: String
3369 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.toString(): String
1770 ===> org.kiama.example.imperative.AST.Asgn.<init>(): org.kiama.example.imperative.AST.Asgn.type
12147 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4273 ===> org.kiama.example.json.JSONTree.JArray.productIterator: Iterator[Any]
5487 ===> org.kiama.example.oberon0.L0.c.CGtExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
4756 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
4422 ===> org.kiama.example.lambda.AST.Var.readResolve(): Object
8031 ===> org.kiama.example.obr.ObrTree.NegExp.equals(x$1: Any): Boolean
5424 ===> org.kiama.example.oberon0.L0.c.CNeExp.priority: Int
8241 ===> org.kiama.example.obr.RISCTree.Bne.readResolve(): Object
11507 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.toString(): String
4838 ===> org.kiama.example.lambda2.Par.$init$(): Unit
10192 ===> org.kiama.example.prolog.SymbolTable.Variable.toString(): String
4567 ===> org.kiama.example.lambda2.AST.App.e2: org.kiama.example.lambda2.AST.Exp
2161 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productArity: Int
10178 ===> org.kiama.example.prolog.SymbolTable.Predicate.readResolve(): Object
4404 ===> org.kiama.example.lambda.AST.Num.unapply(x$0: org.kiama.example.lambda.AST.Num): Option[Int]
11223 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.unapply(x$0: ParenPrettyPrinterTests.this.PreOp): Option[(ParenPrettyPrinterTests.this.Exp, Int)]
5052 ===> org.kiama.example.lambda3.AST.EquivQuery.apply(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.EquivQuery
3532 ===> org.kiama.example.iswim.secd.SECDBase.Enter.apply(nms: List[org.kiama.example.iswim.secd.SECDBase.Name]): org.kiama.example.iswim.secd.SECDBase.Enter
1602 ===> org.kiama.example.imperative.AST.Var.productIterator: Iterator[Any]
3970 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.toString(): String
1218 ===> org.kiama.example.RISC.RISCISA.BGE.productElement(x$1: Int): Any
5378 ===> org.kiama.example.oberon0.L0.c.CTypeDef.readResolve(): Object
4912 ===> org.kiama.example.lambda2.ParLazySubstEvaluator.<init>(): org.kiama.example.lambda2.ParLazySubstEvaluator
7181 ===> org.kiama.example.oberon0.base.c.CStrType.canEqual(x$1: Any): Boolean
1905 ===> org.kiama.example.imperative.Generator.genStmt(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Stmt]
9101 ===> org.kiama.example.obr.SPARCTree.RemW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
10677 ===> org.kiama.example.til.AST.Ne.productPrefix: String
9281 ===> org.kiama.example.obr.SymbolTable.Multiple.hashCode(): Int
2747 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.toString(): String
11188 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.copy$default$1: ParenPrettyPrinterTests.this.Exp @scala.annotation.unchecked.uncheckedVariance
6687 ===> org.kiama.example.oberon0.L3.source.ValMode.toString(): String
1671 ===> org.kiama.example.imperative.AST.Sub.hashCode(): Int
9898 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.declBf: org.kiama.example.picojava.AbstractSyntax.VarDecl
7440 ===> org.kiama.example.obr.ObrTree.ObrInt.productIterator: Iterator[Any]
9476 ===> org.kiama.example.obr.tests.ObrNumberingTest.<init>(): org.kiama.example.obr.tests.ObrNumberingTest
958 ===> org.kiama.example.RISC.RISCISA.XORI.hashCode(): Int
10779 ===> org.kiama.example.transform.AST.BinExpR.<init>(): org.kiama.example.transform.AST.BinExpR.type
3510 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.hashCode(): Int
9437 ===> org.kiama.example.obr.SymbolTable.UnknownType.toString(): String
9193 ===> org.kiama.example.obr.SemanticAnalysis.<init>(): org.kiama.example.obr.SemanticAnalysis.type
4061 ===> org.kiama.example.iswim.secd.SECDBase.$anon.<init>(): SECDBase.this.State[org.kiama.example.iswim.secd.SECDBase.Code]{def toDoc: SECDBase.this.Doc}
3609 ===> org.kiama.example.iswim.secd.SECDBase.Resume.<init>(): org.kiama.example.iswim.secd.SECDBase.Resume.type
8401 ===> org.kiama.example.obr.RISCTree.CmpeqW.readResolve(): Object
4317 ===> org.kiama.example.json.JSONTree.JTrue.<init>(): org.kiama.example.json.JSONTree.JTrue
10804 ===> org.kiama.example.transform.AST.BinExp.right: org.kiama.example.transform.AST.Exp
5404 ===> org.kiama.example.oberon0.L0.c.CEqExp.priority: Int
1918 ===> org.kiama.example.iswim.compiler.CodeGenerator.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.compiler.Syntax.Binding): Boolean
2028 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productArity: Int
2921 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.<init>(): org.kiama.example.iswim.secd.ConversionOps.ToBoolean.type
3211 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.toString(): String
9959 ===> org.kiama.example.prolog.Interpreter.MatchGoal.<init>(left: org.kiama.example.prolog.PrologTree.Term,right: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.MatchGoal
5168 ===> org.kiama.example.oberon0.L0.CCodeGenerator.mangle(s: String): String
6556 ===> org.kiama.example.oberon0.L3.c.CAddrType.apply(basetype: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.L3.c.CAddrType
5942 ===> org.kiama.example.oberon0.L0.source.AddExp.left: org.kiama.example.oberon0.L0.source.Expression
7346 ===> org.kiama.example.oberon0.base.source.IdnUse.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
11083 ===> org.kiama.output.PrettyPrinterBase.percent: PrettyPrinterBase.this.Doc
10657 ===> org.kiama.example.til.AST.Eq.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
11186 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.op: String
10760 ===> org.kiama.example.transform.AST.VarDecl.unapply(x$0: org.kiama.example.transform.AST.VarDecl): Option[String]
7545 ===> org.kiama.example.obr.ObrTree.EnumVar.copy$default$2: List[org.kiama.example.obr.ObrTree.EnumConst] @scala.annotation.unchecked.uncheckedVariance
3414 ===> org.kiama.example.iswim.secd.SECDBase.<init>(): org.kiama.example.iswim.secd.SECDBase.type
120 ===> org.kiama.attribution.UncachedAttribution.UncachedAttribute.apply(t: T): U
9016 ===> org.kiama.example.obr.SPARCTree.IntDatum.productElement(x$1: Int): Any
10563 ===> org.kiama.example.til.AST.Str.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
10144 ===> org.kiama.example.prolog.SemanticAnalysis.check(n: org.kiama.example.prolog.PrologTree.SourceNode): Unit
12098 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11688 ===> org.kiama.rewriting.Rewriter.everywherebu(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
5646 ===> org.kiama.example.oberon0.L0.c.CAndExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
4417 ===> org.kiama.example.lambda.AST.Var.equals(x$1: Any): Boolean
153 ===> org.kiama.attribution.AttributionTests.Pair.productIterator: Iterator[Any]
1965 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.toString(): String
6299 ===> org.kiama.example.oberon0.L2.TypeAnalyser.$init$(): Unit
3108 ===> org.kiama.example.iswim.secd.IOOps.Read.apply(): org.kiama.example.iswim.secd.IOOps.Read
4694 ===> org.kiama.example.lambda2.AST.FunType.hashCode(): Int
1967 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.<init>(): org.kiama.example.iswim.compiler.Syntax.IswimProg.type
10451 ===> org.kiama.example.til.AST.For.f: org.kiama.example.til.AST.Exp
11512 ===> org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition.lineContents: String
3338 ===> org.kiama.example.iswim.secd.RecordOps.GetField.hashCode(): Int
10885 ===> org.kiama.machine.Machine.ParamUpdater.$eq$colon$eq(u: U): Boolean
1886 ===> org.kiama.example.imperative.Generator.genIdn: org.scalacheck.Gen[String]
6056 ===> org.kiama.example.oberon0.L0.source.ModExp.toString(): String
5563 ===> org.kiama.example.oberon0.L0.c.COrExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.COrExp
11521 ===> org.kiama.rewriting.Rewriter.Strategy.$less$times(q: => Rewriter.this.Strategy): Rewriter.this.Strategy
7089 ===> org.kiama.example.oberon0.base.c.CInclude.productIterator: Iterator[Any]
4919 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8634 ===> org.kiama.example.obr.RISCTree.Local.equals(x$1: Any): Boolean
3419 ===> org.kiama.example.iswim.secd.SECDBase.ByteCode.<init>(): org.kiama.example.iswim.secd.SECDBase.ByteCode
2916 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productIterator: Iterator[Any]
1130 ===> org.kiama.example.RISC.RISCISA.WRH.productPrefix: String
167 ===> org.kiama.attribution.AttributionTests.Leaf.productPrefix: String
2169 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.toString(): String
5048 ===> org.kiama.example.lambda3.AST.EquivQuery.toString(): String
690 ===> org.kiama.example.RISC.RISCISA.MULI.canEqual(x$1: Any): Boolean
3643 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.readResolve(): Object
11872 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7773 ===> org.kiama.example.obr.ObrTree.TryStmt.toString(): String
6586 ===> org.kiama.example.oberon0.L3.c.CStrExp.canEqual(x$1: Any): Boolean
4143 ===> org.kiama.example.iswim.secd.StringOps.PushString.equals(x$1: Any): Boolean
250 ===> org.kiama.attribution.AttributionTests.GenSeqTree.copy(v: scala.collection.GenSeq[AttributionTests.this.Tree]): AttributionTests.this.GenSeqTree
12086 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4469 ===> org.kiama.example.lambda.AST.Sub.productPrefix: String
8010 ===> org.kiama.example.obr.ObrTree.ModExp.productIterator: Iterator[Any]
471 ===> org.kiama.example.RISC.RISC.SP: RISC.this.ParamUpdater[org.kiama.example.RISC.RISCISA.RegNo,Int]
1791 ===> org.kiama.example.imperative.AST.While.toString(): String
4150 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.copy(): org.kiama.example.iswim.secd.StringOps.StringTypeValue
10611 ===> org.kiama.example.til.AST.Div.apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Div
10304 ===> org.kiama.example.repmin.Leaf.hashCode(): Int
904 ===> org.kiama.example.RISC.RISCISA.ORI.im: org.kiama.example.RISC.RISCISA.Imm
2504 ===> org.kiama.example.iswim.compiler.Syntax.If.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr,thn: org.kiama.example.iswim.compiler.Syntax.Expr,els: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.If
7133 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.toString(): String
5688 ===> org.kiama.example.oberon0.L0.c.CNotExp.productPrefix: String
8115 ===> org.kiama.example.obr.ObrTree.SlashExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
11808 ===> org.kiama.rewriting.RewriterTests.Same.canEqual(x$1: Any): Boolean
8718 ===> org.kiama.example.obr.SPARCTree.SPARC.copy$default$1: List[org.kiama.example.obr.SPARCTree.Item] @scala.annotation.unchecked.uncheckedVariance
550 ===> org.kiama.example.RISC.RISCISA.MVN.readResolve(): Object
1678 ===> org.kiama.example.imperative.AST.Sub.readResolve(): Object
6148 ===> org.kiama.example.oberon0.L0.source.IdnExp.equals(x$1: Any): Boolean
5457 ===> org.kiama.example.oberon0.L0.c.CLtExp.toString(): String
5122 ===> org.kiama.example.lambda3.AST.SubstQuery.productElement(x$1: Int): Any
6968 ===> org.kiama.example.oberon0.L4.source.FieldIdn.<init>(ident: String): org.kiama.example.oberon0.L4.source.FieldIdn
11527 ===> org.kiama.rewriting.Rewriter.Strategy.$plus(q: => Rewriter.this.Strategy): Rewriter.this.PlusStrategy
6273 ===> org.kiama.example.oberon0.L1.source.WhileStatement.readResolve(): Object
11627 ===> org.kiama.rewriting.Rewriter.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
2660 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.CallCC): Option[org.kiama.example.iswim.compiler.Syntax.Expr]
10261 ===> org.kiama.example.prolog.Subst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9469 ===> org.kiama.example.obr.tests.ObrExecTests.exectest(name: String,dirname: String,spec: (String, List[Int], Int)): Unit
4389 ===> org.kiama.example.lambda.AST.Num.i: Int
7489 ===> org.kiama.example.obr.ObrTree.BoolVar.productPrefix: String
3013 ===> org.kiama.example.iswim.secd.HeapOps.Get.copy(): org.kiama.example.iswim.secd.HeapOps.Get
12568 ===> org.kiama.util.ParserUtilitiesTests.Tup6.canEqual(x$1: Any): Boolean
2951 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productPrefix: String
1764 ===> org.kiama.example.imperative.AST.Asgn.productElement(x$1: Int): Any
3186 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.copy(): org.kiama.example.iswim.secd.IntegerOps.Sub
11869 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1565 ===> org.kiama.example.imperative.AST.<init>(): org.kiama.example.imperative.AST.type
897 ===> org.kiama.example.RISC.RISCISA.OR.<init>(): org.kiama.example.RISC.RISCISA.OR.type
11338 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.line: Int
12019 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4559 ===> org.kiama.example.lambda2.AST.Lam.toString(): String
4178 ===> org.kiama.example.iswim.secd.StringOps.StringValue.<init>(): StringOps.this.StringValue.type
6301 ===> org.kiama.example.oberon0.L2.TypeAnalyser.exptypeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
5138 ===> org.kiama.example.lambda3.AST.SwapQuery.copy$default$1: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name) @scala.annotation.unchecked.uncheckedVariance
10383 ===> org.kiama.example.til.AST.Assign.hashCode(): Int
4217 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
10687 ===> org.kiama.example.til.AST.Ne.apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Ne
248 ===> org.kiama.attribution.AttributionTests.GenSeqTree.v: scala.collection.GenSeq[AttributionTests.this.Tree]
11561 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
2562 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productElement(x$1: Int): Any
4925 ===> org.kiama.example.lambda2.PrettyPrinter.pretty(t: org.kiama.example.lambda2.AST.Exp): String
10011 ===> org.kiama.example.prolog.PrologTree.Program.<init>(): org.kiama.example.prolog.PrologTree.Program.type
7644 ===> org.kiama.example.obr.ObrTree.ExitStmt.apply(): org.kiama.example.obr.ObrTree.ExitStmt
1342 ===> org.kiama.example.RISC.RISCISA.Comment.unapply(x$0: org.kiama.example.RISC.RISCISA.Comment): Option[String]
6776 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.hashCode(): Int
4194 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.equals(x$1: Any): Boolean
4830 ===> org.kiama.example.lambda2.LambdaTests.assertSame(mech: String,e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp): Unit
9569 ===> org.kiama.example.oneohonecompanies.Company.DU.apply(d: org.kiama.example.oneohonecompanies.Company.Dept): org.kiama.example.oneohonecompanies.Company.DU
10441 ===> org.kiama.example.til.AST.While.canEqual(x$1: Any): Boolean
1533 ===> org.kiama.example.dataflow.DataflowForTests.<init>(): org.kiama.example.dataflow.DataflowForTests
1340 ===> org.kiama.example.RISC.RISCISA.Comment.toString(): String
7034 ===> org.kiama.example.oberon0.base.TranslatingDriver.pprintcastFlag: Boolean
2495 ===> org.kiama.example.iswim.compiler.Syntax.Apply.equals(x$1: Any): Boolean
3145 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.unapply(x$0: org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual): Boolean
3069 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productIterator: Iterator[Any]
5835 ===> org.kiama.example.oberon0.L0.source.EqExp.hashCode(): Int
6457 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.toString(): String
9847 ===> org.kiama.example.picojava.TypeAnalysis.isUnknown: org.kiama.example.picojava.AbstractSyntax.Decl => Boolean
4991 ===> org.kiama.example.lambda3.AST.Var.equals(x$1: Any): Boolean
4314 ===> org.kiama.example.json.JSONTree.JNumber.apply(value: Double): org.kiama.example.json.JSONTree.JNumber
892 ===> org.kiama.example.RISC.RISCISA.OR.productElement(x$1: Int): Any
8741 ===> org.kiama.example.obr.SPARCTree.Beq.productArity: Int
8906 ===> org.kiama.example.obr.SPARCTree.Cond.canEqual(x$1: Any): Boolean
3556 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productElement(x$1: Int): Any
723 ===> org.kiama.example.RISC.RISCISA.DIVI.toString(): String
2936 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.hashCode(): Int
9790 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3056 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.readResolve(): Object
6256 ===> org.kiama.example.oberon0.L1.source.WhileStatement.block: org.kiama.example.oberon0.base.source.Block
10001 ===> org.kiama.example.prolog.PrologTree.Program.copy(cs: List[org.kiama.example.prolog.PrologTree.Clause]): org.kiama.example.prolog.PrologTree.Program
10827 ===> org.kiama.example.transform.AST.Num.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
4051 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.apply(): SECDBase.this.EmptyCont
6547 ===> org.kiama.example.oberon0.L3.c.CAddrType.productArity: Int
8382 ===> org.kiama.example.obr.RISCTree.Cond.readResolve(): Object
9375 ===> org.kiama.example.obr.SymbolTable.RecordTypes.apply(): org.kiama.example.obr.SymbolTable.RecordTypes
136 ===> org.kiama.attribution.UncachedAttribution.paramAttr[A, T <: AnyRef, U](f: A => (T => U)): UncachedAttribution.this.UncachedParamAttribute[A,T,U]
2581 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.canEqual(x$1: Any): Boolean
937 ===> org.kiama.example.RISC.RISCISA.XOR.hashCode(): Int
6335 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productPrefix: String
12401 ===> org.kiama.util.Messaging.Record.<init>(): org.kiama.util.Messaging.Record.type
10668 ===> org.kiama.example.til.AST.Eq.apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Eq
755 ===> org.kiama.example.RISC.RISCISA.MOD.equals(x$1: Any): Boolean
4489 ===> org.kiama.example.lambda.Evaluator.normal: org.kiama.rewriting.Rewriter.Strategy
390 ===> org.kiama.attribution.DynamicAttributionTests.Pair.left: DynamicAttributionTests.this.Tree
9748 ===> org.kiama.example.picojava.AbstractSyntax.Use.apply(Name: String): org.kiama.example.picojava.AbstractSyntax.Use
7798 ===> org.kiama.example.obr.ObrTree.Catch.stmts: List[org.kiama.example.obr.ObrTree.Statement]
1262 ===> org.kiama.example.RISC.RISCISA.BR.toString(): String
2341 ===> org.kiama.example.iswim.compiler.Syntax.Binding.copy(v: org.kiama.example.iswim.compiler.Syntax.Variable,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Binding
7377 ===> org.kiama.example.oberon0.drivers.A2aPhases.tasklevel: Int
2043 ===> org.kiama.example.iswim.compiler.Syntax.Plus.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Plus
7564 ===> org.kiama.example.obr.ObrTree.EnumConst.productArity: Int
8560 ===> org.kiama.example.obr.RISCTree.Not.<init>(): org.kiama.example.obr.RISCTree.Not.type
2932 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productArity: Int
4319 ===> org.kiama.example.json.JSONTree.JTrue.productPrefix: String
8867 ===> org.kiama.example.obr.SPARCTree.Write.toString(): String
6541 ===> org.kiama.example.oberon0.L3.c.CVoidType.readResolve(): Object
9876 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.declAAx: org.kiama.example.picojava.AbstractSyntax.VarDecl
12232 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.genNeg(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Neg]
10493 ===> org.kiama.example.til.AST.Write.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
7079 ===> org.kiama.example.oberon0.base.c.CProgram.apply(includes: List[org.kiama.example.oberon0.base.c.CInclude],decls: List[org.kiama.example.oberon0.base.c.CDeclaration]): org.kiama.example.oberon0.base.c.CProgram
3109 ===> org.kiama.example.iswim.secd.IOOps.Read.unapply(x$0: org.kiama.example.iswim.secd.IOOps.Read): Boolean
11768 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
12248 ===> org.kiama.rewriting.UniplateTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8197 ===> org.kiama.example.obr.RISCTree.RISCProg.equals(x$1: Any): Boolean
5464 ===> org.kiama.example.oberon0.L0.c.CLeExp.priority: Int
9298 ===> org.kiama.example.obr.SymbolTable.IntType.productPrefix: String
11008 ===> org.kiama.output.ParenPrettyPrinter.noparens(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side): Boolean
622 ===> org.kiama.example.RISC.RISCISA.SUB.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.SUB
8801 ===> org.kiama.example.obr.SPARCTree.LabelDef.<init>(): org.kiama.example.obr.SPARCTree.LabelDef.type
10073 ===> org.kiama.example.prolog.PrologTree.Var.readResolve(): Object
10602 ===> org.kiama.example.til.AST.Div.productArity: Int
3911 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.readResolve(): Object
9641 ===> org.kiama.example.picojava.AbstractSyntax.Block.equals(x$1: Any): Boolean
7014 ===> org.kiama.example.oberon0.base.Driver.driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
11967 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1889 ===> org.kiama.example.imperative.Generator.genNeg(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Neg]
6697 ===> org.kiama.example.oberon0.L3.source.FPSection.copy$default$2: List[org.kiama.example.oberon0.base.source.IdnDef] @scala.annotation.unchecked.uncheckedVariance
9289 ===> org.kiama.example.obr.SymbolTable.WORDSIZE: Int
11556 ===> org.kiama.rewriting.Rewriter.fail: Rewriter.this.Strategy
11371 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.l: org.kiama.rewriting.SupportPositionalRewriterTests.Node
8334 ===> org.kiama.example.obr.RISCTree.Read.canEqual(x$1: Any): Boolean
5937 ===> org.kiama.example.oberon0.L0.source.GeExp.readResolve(): Object
8678 ===> org.kiama.example.obr.RISCTree.lastlab_$eq(x$1: Int): Unit
7609 ===> org.kiama.example.obr.ObrTree.ExnConst.apply(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.ExnConst
9493 ===> org.kiama.example.oneohonecompanies.Company.Company.unapply(x$0: org.kiama.example.oneohonecompanies.Company.Company): Option[List[org.kiama.example.oneohonecompanies.Company.Dept]]
6691 ===> org.kiama.example.oberon0.L3.source.FPSection.mode: org.kiama.example.oberon0.L3.source.Mode
10848 ===> org.kiama.example.transform.AST.Var.productIterator: Iterator[Any]
2700 ===> org.kiama.example.iswim.compiler.Syntax.Val.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Val
9500 ===> org.kiama.example.oneohonecompanies.Company.Dept.copy$default$1: org.kiama.example.oneohonecompanies.Company.Name @scala.annotation.unchecked.uncheckedVariance
8468 ===> org.kiama.example.obr.RISCTree.DivW.productIterator: Iterator[Any]
9147 ===> org.kiama.example.obr.SPARCTree.Local.equals(x$1: Any): Boolean
2496 ===> org.kiama.example.iswim.compiler.Syntax.Apply.<init>(): org.kiama.example.iswim.compiler.Syntax.Apply.type
11797 ===> org.kiama.rewriting.RewriterTests.Equal.productElement(x$1: Int): Any
12508 ===> org.kiama.util.ParserUtilitiesTests.Tup4.copy$default$1: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
4414 ===> org.kiama.example.lambda.AST.Var.productIterator: Iterator[Any]
5879 ===> org.kiama.example.oberon0.L0.source.LtExp.unapply(x$0: org.kiama.example.oberon0.L0.source.LtExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
1788 ===> org.kiama.example.imperative.AST.While.toString(): String
8193 ===> org.kiama.example.obr.RISCTree.RISCProg.productIterator: Iterator[Any]
5699 ===> org.kiama.example.oberon0.L0.c.CNotExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CNotExp): Option[org.kiama.example.oberon0.base.c.CExpression]
7084 ===> org.kiama.example.oberon0.base.c.CInclude.copy(s: String): org.kiama.example.oberon0.base.c.CInclude
11778 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6726 ===> org.kiama.example.oberon0.L3.source.Call.<init>(): org.kiama.example.oberon0.L3.source.Call.type
2014 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.canEqual(x$1: Any): Boolean
2116 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.l: org.kiama.example.iswim.compiler.Syntax.Expr
3256 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.toString(): String
12274 ===> org.kiama.util.TestCompiler.dosanitisation: Boolean
4860 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5396 ===> org.kiama.example.oberon0.L0.c.CAssignment.unapply(x$0: org.kiama.example.oberon0.L0.c.CAssignment): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
11834 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9866 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.declRz: org.kiama.example.picojava.AbstractSyntax.VarDecl
5888 ===> org.kiama.example.oberon0.L0.source.LeExp.productArity: Int
5134 ===> org.kiama.example.lambda3.AST.SwapQuery.e: org.kiama.example.lambda3.AST.Exp
3035 ===> org.kiama.example.iswim.secd.HeapOps.Put.toString(): String
8318 ===> org.kiama.example.obr.RISCTree.Write.canEqual(x$1: Any): Boolean
5057 ===> org.kiama.example.lambda3.AST.EvalQuery.execute: EvalQuery.this.T
11923 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10480 ===> org.kiama.example.til.AST.Read.productIterator: Iterator[Any]
6689 ===> org.kiama.example.oberon0.L3.source.ValMode.unapply(x$0: org.kiama.example.oberon0.L3.source.ValMode): Boolean
11357 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.copy$default$1: org.kiama.rewriting.SupportPositionalRewriterTests.Node @scala.annotation.unchecked.uncheckedVariance
3520 ===> org.kiama.example.iswim.secd.SECDBase.Enter.copy(nms: List[org.kiama.example.iswim.secd.SECDBase.Name]): org.kiama.example.iswim.secd.SECDBase.Enter
6367 ===> org.kiama.example.oberon0.L2.source.Condition.<init>(): org.kiama.example.oberon0.L2.source.Condition
8953 ===> org.kiama.example.obr.SPARCTree.CmpgtW.l: org.kiama.example.obr.SPARCTree.Datum
11350 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.PositionalRewriter.Term,org.kiama.rewriting.PositionalRewriter.Strategy] with Serializable
8274 ===> org.kiama.example.obr.RISCTree.LabelDef.unapply(x$0: org.kiama.example.obr.RISCTree.LabelDef): Option[org.kiama.example.obr.RISCTree.Label]
4479 ===> org.kiama.example.lambda.AST.Sub.apply(m: org.kiama.example.lambda.AST.Exp,x: org.kiama.example.lambda.AST.Idn,n: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.Sub
3012 ===> org.kiama.example.iswim.secd.HeapOps.Get.<init>(): org.kiama.example.iswim.secd.HeapOps.Get
5166 ===> org.kiama.example.lambda3.LambdaTests.mkparsetest(s: String,r: String): Unit
3787 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue
1605 ===> org.kiama.example.imperative.AST.Var.equals(x$1: Any): Boolean
117 ===> org.kiama.attribution.UncachedAttribution.$init$(): Unit
393 ===> org.kiama.attribution.DynamicAttributionTests.Pair.copy(left: DynamicAttributionTests.this.Tree,right: DynamicAttributionTests.this.Tree): DynamicAttributionTests.this.Pair
8616 ===> org.kiama.example.obr.RISCTree.SequenceDatum.equals(x$1: Any): Boolean
7910 ===> org.kiama.example.obr.ObrTree.IdnExp.idn: org.kiama.example.obr.ObrTree.Identifier
451 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[DynamicAttributionTests.this.Tree,Int] with Serializable
2376 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
12601 ===> org.kiama.util.REPLBase.main(args: Array[String]): Unit
5131 ===> org.kiama.example.lambda3.AST.SubstQuery.unapply(x$0: org.kiama.example.lambda3.AST.SubstQuery): Option[(org.kiama.rewriting.NominalAST.Name, org.kiama.example.lambda3.AST.Exp, org.kiama.example.lambda3.AST.Exp)]
3704 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.toString(): String
7418 ===> org.kiama.example.obr.TreeTestDriver.<init>(): org.kiama.example.obr.TreeTestDriver
4706 ===> org.kiama.example.lambda2.AST.NoType.productElement(x$1: Int): Any
2331 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.toString(): String
8871 ===> org.kiama.example.obr.SPARCTree.Write.apply(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Write
2149 ===> org.kiama.example.iswim.compiler.Syntax.Equal.<init>(): org.kiama.example.iswim.compiler.Syntax.Equal.type
1760 ===> org.kiama.example.imperative.AST.Asgn.copy$default$1: org.kiama.example.imperative.AST.Var @scala.annotation.unchecked.uncheckedVariance
6342 ===> org.kiama.example.oberon0.L2.source.CaseStatement.equals(x$1: Any): Boolean
11873 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5020 ===> org.kiama.example.lambda3.AST.Lam.copy$default$1: org.kiama.rewriting.NominalAST.Bind @scala.annotation.unchecked.uncheckedVariance
891 ===> org.kiama.example.RISC.RISCISA.OR.productArity: Int
12346 ===> org.kiama.util.Environments.UnknownEntity.toString(): String
2080 ===> org.kiama.example.iswim.compiler.Syntax.Times.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Times
5169 ===> org.kiama.example.oberon0.L0.CCodeGenerator.translate(t: CCodeGenerator.this.Type): org.kiama.example.oberon0.base.c.CType
1516 ===> org.kiama.example.dataflow.For.canEqual(x$1: Any): Boolean
5584 ===> org.kiama.example.oberon0.L0.c.CMulExp.priority: Int
12131 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2357 ===> org.kiama.example.iswim.compiler.Syntax.Let.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
2194 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LessEq
2291 ===> org.kiama.example.iswim.compiler.Syntax.And.productElement(x$1: Int): Any
6851 ===> org.kiama.example.oberon0.L4.c.CIndexExp.readResolve(): Object
11325 ===> org.kiama.rewriting.PositionalRewriterTests.pl1: org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{val line: Int; val column: Int}
530 ===> org.kiama.example.RISC.RISCISA.MVN.a: org.kiama.example.RISC.RISCISA.RegNo
4037 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.unapply(x$0: SECDBase.this.PrimValue): Option[org.kiama.example.iswim.secd.SECDBase.Code]
2938 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.<init>(): org.kiama.example.iswim.secd.ConversionOps.ConversionError.type
10587 ===> org.kiama.example.til.AST.Mul.hashCode(): Int
10296 ===> org.kiama.example.repmin.Leaf.<init>(value: Int): org.kiama.example.repmin.Leaf
12444 ===> org.kiama.util.ParserUtilitiesTests.<init>(): org.kiama.util.ParserUtilitiesTests
3848 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.toString(): String
4460 ===> org.kiama.example.lambda.AST.App.readResolve(): Object
9566 ===> org.kiama.example.oneohonecompanies.Company.DU.equals(x$1: Any): Boolean
6468 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productPrefix: String
4612 ===> org.kiama.example.lambda2.AST.Let.copy$default$1: org.kiama.example.lambda2.AST.Idn @scala.annotation.unchecked.uncheckedVariance
11799 ===> org.kiama.rewriting.RewriterTests.Equal.canEqual(x$1: Any): Boolean
4281 ===> org.kiama.example.json.JSONTree.JArray.unapply(x$0: org.kiama.example.json.JSONTree.JArray): Option[Vector[org.kiama.example.json.JSONTree.JValue]]
3 ===> org.kiama.attribution.Attributable.parent_$eq(x$1: org.kiama.attribution.Attributable): Unit
7436 ===> org.kiama.example.obr.ObrTree.ObrInt.copy$default$4: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
12157 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11120 ===> org.kiama.output.PrettyPrinter.line: PrettyPrinter.this.Doc
12500 ===> org.kiama.util.ParserUtilitiesTests.Tup3.unapply(x$0: ParserUtilitiesTests.this.Tup3): Option[(ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node)]
835 ===> org.kiama.example.RISC.RISCISA.CHKI.toString(): String
198 ===> org.kiama.attribution.AttributionTests.EitherTree.<init>(e: Either[AttributionTests.this.Pair,AttributionTests.this.Leaf]): AttributionTests.this.EitherTree
5172 ===> org.kiama.example.oberon0.L0.CCodeGenerator.translate(e: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.base.c.CExpression
3087 ===> org.kiama.example.iswim.secd.IOOps.Write.canEqual(x$1: Any): Boolean
11542 ===> org.kiama.rewriting.Rewriter.rule(f: org.kiama.==>[Rewriter.this.Term,Rewriter.this.Term]): Rewriter.this.Strategy
8697 ===> org.kiama.example.obr.SPARCEncoder.encode(i: org.kiama.example.obr.SPARCTree.Item): Unit
4952 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5181 ===> org.kiama.example.oberon0.L0.NameAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
1368 ===> org.kiama.example.dataflow.DataflowAST.Assign.right: org.kiama.example.dataflow.DataflowAST.Var
154 ===> org.kiama.attribution.AttributionTests.Pair.canEqual(x$1: Any): Boolean
10150 ===> org.kiama.example.prolog.SemanticAnalysis.entityin: org.kiama.example.prolog.PrologTree.SourceNode => org.kiama.example.prolog.SymbolTable.Entity
5911 ===> org.kiama.example.oberon0.L0.source.GtExp.hashCode(): Int
9384 ===> org.kiama.example.obr.SymbolTable.EnumType.productPrefix: String
11309 ===> org.kiama.rewriting.NominalRewriter.HasVar.unapply(t: Product): Option[org.kiama.rewriting.NominalAST.Name]
8113 ===> org.kiama.example.obr.ObrTree.SlashExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.SlashExp
9450 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.copy(s: String): SyntaxAnalysis.this.Pos
7919 ===> org.kiama.example.obr.ObrTree.IdnExp.hashCode(): Int
11318 ===> org.kiama.rewriting.PositionedRewriter.<init>(): org.kiama.rewriting.PositionedRewriter
9410 ===> org.kiama.example.obr.SymbolTable.EnumTypes.unapply(x$0: org.kiama.example.obr.SymbolTable.EnumTypes): Boolean
8014 ===> org.kiama.example.obr.ObrTree.ModExp.equals(x$1: Any): Boolean
4552 ===> org.kiama.example.lambda2.AST.Lam.copy$default$3: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
9731 ===> org.kiama.example.picojava.AbstractSyntax.Access.<init>(): org.kiama.example.picojava.AbstractSyntax.Access
5124 ===> org.kiama.example.lambda3.AST.SubstQuery.canEqual(x$1: Any): Boolean
6107 ===> org.kiama.example.oberon0.L0.source.NotExp.productPrefix: String
161 ===> org.kiama.attribution.AttributionTests.Pair.unapply(x$0: AttributionTests.this.Pair): Option[(AttributionTests.this.Tree, AttributionTests.this.Tree)]
10561 ===> org.kiama.example.til.AST.Str.toString(): String
2838 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.<init>(): org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.type
9925 ===> org.kiama.example.prolog.Interpreter.TermGoal.productPrefix: String
11935 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3612 ===> org.kiama.example.iswim.secd.SECDBase.Resume.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.Resume): Boolean
4292 ===> org.kiama.example.json.JSONTree.JString.hashCode(): Int
1506 ===> org.kiama.example.dataflow.For.copy$default$3: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
4175 ===> org.kiama.example.iswim.secd.StringOps.StringValue.canEqual(x$1: Any): Boolean
6636 ===> org.kiama.example.oberon0.L3.c.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
12035 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12029 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
612 ===> org.kiama.example.RISC.RISCISA.ADDI.unapply(x$0: org.kiama.example.RISC.RISCISA.ADDI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
8006 ===> org.kiama.example.obr.ObrTree.ModExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
5643 ===> org.kiama.example.oberon0.L0.c.CAndExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAndExp
2497 ===> org.kiama.example.iswim.compiler.Syntax.Apply.toString(): String
8835 ===> org.kiama.example.obr.SPARCTree.Ret.apply(): org.kiama.example.obr.SPARCTree.Ret
4109 ===> org.kiama.example.iswim.secd.StackOps.Swap.<init>(n: Int,m: Int): org.kiama.example.iswim.secd.StackOps.Swap
5505 ===> org.kiama.example.oberon0.L0.c.CGeExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CGeExp
10376 ===> org.kiama.example.til.AST.Assign.copy$default$1: org.kiama.example.til.AST.Id @scala.annotation.unchecked.uncheckedVariance
4699 ===> org.kiama.example.lambda2.AST.FunType.apply(t1: org.kiama.example.lambda2.AST.Type,t2: org.kiama.example.lambda2.AST.Type): org.kiama.example.lambda2.AST.FunType
10796 ===> org.kiama.example.transform.AST.Factor.<init>(): org.kiama.example.transform.AST.Factor.type
7629 ===> org.kiama.example.obr.ObrTree.AssignStmt.apply(left: org.kiama.example.obr.ObrTree.AssignNode,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AssignStmt
9007 ===> org.kiama.example.obr.SPARCTree.DivW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.DivW
3548 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.toString(): String
6288 ===> org.kiama.example.oberon0.L2.Desugarer.condsToExp(ns: List[org.kiama.example.oberon0.L2.source.Condition]): org.kiama.example.oberon0.L0.source.Expression
1345 ===> org.kiama.example.dataflow.ControlFlow.succ: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Stm]
1141 ===> org.kiama.example.RISC.RISCISA.WRH.readResolve(): Object
4162 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.unapply(x$0: org.kiama.example.iswim.secd.StringOps.StringTypeValue): Boolean
4160 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.toString(): String
7710 ===> org.kiama.example.obr.ObrTree.ReturnStmt.copy(value: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.ReturnStmt
7897 ===> org.kiama.example.obr.ObrTree.GreaterExp.productPrefix: String
8198 ===> org.kiama.example.obr.RISCTree.RISCProg.<init>(): org.kiama.example.obr.RISCTree.RISCProg.type
11727 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
979 ===> org.kiama.example.RISC.RISCISA.LDW.hashCode(): Int
9115 ===> org.kiama.example.obr.SPARCTree.RemW.readResolve(): Object
8071 ===> org.kiama.example.obr.ObrTree.NotExp.unapply(x$0: org.kiama.example.obr.ObrTree.NotExp): Option[org.kiama.example.obr.ObrTree.Expression]
11480 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.copy$default$2: org.kiama.rewriting.SupportPositionedRewriterTests.Node @scala.annotation.unchecked.uncheckedVariance
4845 ===> org.kiama.example.lambda2.Par.lookupb(x: org.kiama.example.lambda2.AST.Idn,ds: List[org.kiama.example.lambda2.AST.Bind]): Option[org.kiama.example.lambda2.AST.Exp]
1968 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.toString(): String
4977 ===> org.kiama.example.lambda3.AST.Num.apply(i: Int): org.kiama.example.lambda3.AST.Num
9570 ===> org.kiama.example.oneohonecompanies.Company.DU.unapply(x$0: org.kiama.example.oneohonecompanies.Company.DU): Option[org.kiama.example.oneohonecompanies.Company.Dept]
1160 ===> org.kiama.example.RISC.RISCISA.Branch.disp_$eq(x$1: org.kiama.example.RISC.RISCISA.Disp): Unit
8816 ===> org.kiama.example.obr.SPARCTree.Read.toString(): String
9939 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.right: org.kiama.example.prolog.PrologTree.Term
5523 ===> org.kiama.example.oberon0.L0.c.CAddExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAddExp
794 ===> org.kiama.example.RISC.RISCISA.CMP.hashCode(): Int
3820 ===> org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue.message: String
6040 ===> org.kiama.example.oberon0.L0.source.DivExp.readResolve(): Object
9068 ===> org.kiama.example.obr.SPARCTree.NegW.productArity: Int
7022 ===> org.kiama.example.oberon0.base.TransformingDriver.printiastFlag_$eq(x$1: Boolean): Unit
2794 ===> org.kiama.example.iswim.secd.BooleanOps.Test.ce: org.kiama.example.iswim.secd.SECDBase.CodeSegment
2472 ===> org.kiama.example.iswim.compiler.Syntax.Return.productIterator: Iterator[Any]
11509 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.unapply(x$0: org.kiama.rewriting.SupportPositionedRewriterTests.Leaf): Option[Int]
2908 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.apply(): org.kiama.example.iswim.secd.ConversionOps.ToInt
12292 ===> org.kiama.util.ReaderConsole.reader: java.io.BufferedReader
11724 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10200 ===> org.kiama.example.prolog.SymbolTable.AtomType.productPrefix: String
7819 ===> org.kiama.example.obr.ObrTree.AndExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.AndExp
5968 ===> org.kiama.example.oberon0.L0.source.SubExp.productArity: Int
4674 ===> org.kiama.example.lambda2.AST.IntType.canEqual(x$1: Any): Boolean
668 ===> org.kiama.example.RISC.RISCISA.MUL.productIterator: Iterator[Any]
8768 ===> org.kiama.example.obr.SPARCTree.Bne.toString(): String
314 ===> org.kiama.attribution.AttributionTests.TripleTree.unapply(x$0: AttributionTests.this.TripleTree): Option[(AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)]
11251 ===> org.kiama.rewriting.CallbackRewriter.rule(f: org.kiama.==>[CallbackRewriter.this.Term,CallbackRewriter.this.Term]): CallbackRewriter.this.Strategy
8011 ===> org.kiama.example.obr.ObrTree.ModExp.canEqual(x$1: Any): Boolean
7355 ===> org.kiama.example.oberon0.base.source.IdnUse.<init>(): org.kiama.example.oberon0.base.source.IdnUse.type
1556 ===> org.kiama.example.dataflow.Optimise.<init>(): org.kiama.example.dataflow.Optimise.type
6324 ===> org.kiama.example.oberon0.L2.source.ForStatement.apply(idn: org.kiama.example.oberon0.L0.source.IdnExp,lower: org.kiama.example.oberon0.L0.source.Expression,upper: org.kiama.example.oberon0.L0.source.Expression,by: Option[org.kiama.example.oberon0.L0.source.Expression],block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L2.source.ForStatement
4264 ===> org.kiama.example.json.JSONTree.JName.unapply(x$0: org.kiama.example.json.JSONTree.JName): Option[String]
4346 ===> org.kiama.example.json.JSONTree.JFalse.readResolve(): Object
9123 ===> org.kiama.example.obr.SPARCTree.SubW.productArity: Int
2988 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.apply(s: ExceptionHandler.this.Stack,e: ExceptionHandler.this.Environment,c: org.kiama.example.iswim.secd.SECDBase.Code,d: ExceptionHandler.this.Dump,h: ExceptionHandler.this.Handler): ExceptionHandler.this.ExnContValue
4604 ===> org.kiama.example.lambda2.AST.Opn.unapply(x$0: org.kiama.example.lambda2.AST.Opn): Option[(org.kiama.example.lambda2.AST.Exp, org.kiama.example.lambda2.AST.Op, org.kiama.example.lambda2.AST.Exp)]
4348 ===> org.kiama.example.json.JSONTree.JNull.copy(): org.kiama.example.json.JSONTree.JNull
8807 ===> org.kiama.example.obr.SPARCTree.Read.<init>(mem: org.kiama.example.obr.SPARCTree.Address): org.kiama.example.obr.SPARCTree.Read
6028 ===> org.kiama.example.oberon0.L0.source.DivExp.productPrefix: String
6108 ===> org.kiama.example.oberon0.L0.source.NotExp.productArity: Int
5356 ===> org.kiama.example.oberon0.L0.c.CInitDecl.equals(x$1: Any): Boolean
130 ===> org.kiama.attribution.UncachedAttribution.$anon.optName: Option[String]
6868 ===> org.kiama.example.oberon0.L4.c.CFieldExp.apply(record: org.kiama.example.oberon0.base.c.CExpression,field: String): org.kiama.example.oberon0.L4.c.CFieldExp
6062 ===> org.kiama.example.oberon0.L0.source.AndExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.AndExp
12377 ===> org.kiama.util.IO.FileNotFoundException.toString(): String
4667 ===> org.kiama.example.lambda2.AST.Type.<init>(): org.kiama.example.lambda2.AST.Type
8719 ===> org.kiama.example.obr.SPARCTree.SPARC.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
3677 ===> org.kiama.example.iswim.secd.SECDBase.PushType.readResolve(): Object
3034 ===> org.kiama.example.iswim.secd.HeapOps.Put.hashCode(): Int
1240 ===> org.kiama.example.RISC.RISCISA.BLE.toString(): String
8390 ===> org.kiama.example.obr.RISCTree.CmpeqW.productArity: Int
12030 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1341 ===> org.kiama.example.RISC.RISCISA.Comment.apply(text: String): org.kiama.example.RISC.RISCISA.Comment
262 ===> org.kiama.attribution.AttributionTests.GenSeqTree.apply(v: scala.collection.GenSeq[AttributionTests.this.Tree]): AttributionTests.this.GenSeqTree
12628 ===> org.kiama.util.RegexParserTests.assertParseOk[T](str: String,p: RegexParserTests.this.Parser[T],result: T): Unit
3097 ===> org.kiama.example.iswim.secd.IOOps.Read.copy(): org.kiama.example.iswim.secd.IOOps.Read
2094 ===> org.kiama.example.iswim.compiler.Syntax.Times.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Times
7271 ===> org.kiama.example.oberon0.base.source.ModuleDecl.<init>(idndef: org.kiama.example.oberon0.base.source.IdnDef,block: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.base.source.ModuleDecl
7617 ===> org.kiama.example.obr.ObrTree.AssignStmt.copy$default$1: org.kiama.example.obr.ObrTree.AssignNode @scala.annotation.unchecked.uncheckedVariance
9973 ===> org.kiama.example.prolog.Interpreter.MatchGoal.apply(left: org.kiama.example.prolog.PrologTree.Term,right: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.MatchGoal
11565 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
12376 ===> org.kiama.util.IO.FileNotFoundException.<init>(): org.kiama.util.IO.FileNotFoundException.type
7206 ===> org.kiama.example.oberon0.base.c.CArrayType.apply(size: Int,elemtype: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.base.c.CArrayType
2220 ===> org.kiama.example.iswim.compiler.Syntax.Greater.productIterator: Iterator[Any]
8423 ===> org.kiama.example.obr.RISCTree.CmpgtW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpgtW
3121 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.productElement(x$1: Int): Any
1434 ===> org.kiama.example.dataflow.DataflowAST.Block.canEqual(x$1: Any): Boolean
11892 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4019 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.unapply(x$0: SECDBase.this.ClosureValue): Option[(org.kiama.example.iswim.secd.SECDBase.Name, org.kiama.example.iswim.secd.SECDBase.Code, SECDBase.this.Environment)]
196 ===> org.kiama.attribution.AttributionTests.Unused.readResolve(): Object
3646 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.copy(me: org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue): org.kiama.example.iswim.secd.SECDBase.PushMachineException
394 ===> org.kiama.attribution.DynamicAttributionTests.Pair.copy$default$1: DynamicAttributionTests.this.Tree @scala.annotation.unchecked.uncheckedVariance
8513 ===> org.kiama.example.obr.RISCTree.MulW.r: org.kiama.example.obr.RISCTree.Datum
6187 ===> org.kiama.example.oberon0.L1.c.CIfStatement.apply(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CIfStatement
8800 ===> org.kiama.example.obr.SPARCTree.LabelDef.equals(x$1: Any): Boolean
8853 ===> org.kiama.example.obr.SPARCTree.StW.toString(): String
725 ===> org.kiama.example.RISC.RISCISA.DIVI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5061 ===> org.kiama.example.lambda3.AST.EvalQuery.productArity: Int
9871 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.declAz: org.kiama.example.picojava.AbstractSyntax.VarDecl
8365 ===> org.kiama.example.obr.RISCTree.Cond.<init>(cond: org.kiama.example.obr.RISCTree.Datum,t: org.kiama.example.obr.RISCTree.Datum,f: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Cond
344 ===> org.kiama.attribution.AttributionTests.Base.k5: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
9937 ===> org.kiama.example.prolog.Interpreter.TermGoal.readResolve(): Object
4176 ===> org.kiama.example.iswim.secd.StringOps.StringValue.hashCode(): Int
1152 ===> org.kiama.example.RISC.RISCISA.WRL.<init>(): org.kiama.example.RISC.RISCISA.WRL.type
11489 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.Two.type
3501 ===> org.kiama.example.iswim.secd.SECDBase.App.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.App): Boolean
2066 ===> org.kiama.example.iswim.compiler.Syntax.Minus.productArity: Int
2650 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productArity: Int
3852 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.<init>(): org.kiama.example.iswim.secd.SECDBase.TypeError
12092 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2927 ===> org.kiama.example.iswim.secd.ConversionOps.processBoolean: scala.util.matching.Regex
6219 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productElement(x$1: Int): Any
3298 ===> org.kiama.example.iswim.secd.RecordOps.<init>(): org.kiama.example.iswim.secd.RecordOps.type
4801 ===> org.kiama.example.lambda2.Evaluators.mechanisms: scala.collection.immutable.Set[String]
3895 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.UnexpectedExit): Boolean
8367 ===> org.kiama.example.obr.RISCTree.Cond.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
9619 ===> org.kiama.example.picojava.AbstractSyntax.Program.productElement(x$1: Int): Any
4594 ===> org.kiama.example.lambda2.AST.Opn.productArity: Int
5142 ===> org.kiama.example.lambda3.AST.SwapQuery.productElement(x$1: Int): Any
5897 ===> org.kiama.example.oberon0.L0.source.LeExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.LeExp
11566 ===> org.kiama.rewriting.Rewriter.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
4627 ===> org.kiama.example.lambda2.AST.Let.unapply(x$0: org.kiama.example.lambda2.AST.Let): Option[(org.kiama.example.lambda2.AST.Idn, org.kiama.example.lambda2.AST.Type, org.kiama.example.lambda2.AST.Exp, org.kiama.example.lambda2.AST.Exp)]
11523 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.apply(t1: Rewriter.this.Term): Option[Rewriter.this.Term]
12049 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5379 ===> org.kiama.example.oberon0.L0.c.CAssignment.desig: org.kiama.example.oberon0.base.c.CExpression
4581 ===> org.kiama.example.lambda2.AST.App.toString(): String
5989 ===> org.kiama.example.oberon0.L0.source.OrExp.productIterator: Iterator[Any]
1413 ===> org.kiama.example.dataflow.DataflowAST.If.productPrefix: String
10340 ===> org.kiama.example.til.AST.Program.copy$default$1: Seq[org.kiama.example.til.AST.Stat] @scala.annotation.unchecked.uncheckedVariance
311 ===> org.kiama.attribution.AttributionTests.TripleTree.<init>(): AttributionTests.this.TripleTree.type
5972 ===> org.kiama.example.oberon0.L0.source.SubExp.hashCode(): Int
4712 ===> org.kiama.example.lambda2.AST.NoType.<init>(): org.kiama.example.lambda2.AST.NoType.type
3845 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.hashCode(): Int
5896 ===> org.kiama.example.oberon0.L0.source.LeExp.toString(): String
10403 ===> org.kiama.example.til.AST.IfThen.toString(): String
7491 ===> org.kiama.example.obr.ObrTree.BoolVar.productElement(x$1: Int): Any
12087 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1842 ===> org.kiama.example.imperative.ASTNonCase.Num.toString(): String
759 ===> org.kiama.example.RISC.RISCISA.MOD.unapply(x$0: org.kiama.example.RISC.RISCISA.MOD): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
11620 ===> org.kiama.rewriting.Rewriter.$anonfun.applyOrElse[A1 <: Rewriter.this.Term, B1 >: Rewriter.this.Strategy](x$1: A1,default: A1 => B1): B1
2823 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.<init>(): org.kiama.example.iswim.secd.BooleanOps.Equals.type
10818 ===> org.kiama.example.transform.AST.BinExp.<init>(): org.kiama.example.transform.AST.BinExp.type
6956 ===> org.kiama.example.oberon0.L4.source.FieldExp.productElement(x$1: Int): Any
1517 ===> org.kiama.example.dataflow.For.hashCode(): Int
1927 ===> org.kiama.example.iswim.compiler.Parser.Pos.copy(s: String): Parser.this.Pos
11322 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{}
10509 ===> org.kiama.example.til.AST.Id.<init>(s: String): org.kiama.example.til.AST.Id
5392 ===> org.kiama.example.oberon0.L0.c.CAssignment.equals(x$1: Any): Boolean
5219 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.ident: String
4335 ===> org.kiama.example.json.JSONTree.JFalse.productArity: Int
1205 ===> org.kiama.example.RISC.RISCISA.BLT.hashCode(): Int
8668 ===> org.kiama.example.obr.RISCTree.Label.hashCode(): Int
11355 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.<init>(a: org.kiama.rewriting.SupportPositionalRewriterTests.Node): org.kiama.rewriting.SupportPositionalRewriterTests.One
8511 ===> org.kiama.example.obr.RISCTree.LdW.readResolve(): Object
223 ===> org.kiama.attribution.AttributionTests.ListTree.hashCode(): Int
7326 ===> org.kiama.example.oberon0.base.source.IdnDef.ident: String
9219 ===> org.kiama.example.obr.SymbolTable.Variable.<init>(tipe: org.kiama.example.obr.SymbolTable.Type): org.kiama.example.obr.SymbolTable.Variable
6129 ===> org.kiama.example.oberon0.L0.source.IntExp.hashCode(): Int
6911 ===> org.kiama.example.oberon0.L4.source.IndexExp.readResolve(): Object
3323 ===> org.kiama.example.iswim.secd.RecordOps.Fields.hashCode(): Int
2596 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productElement(x$1: Int): Any
2247 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.GreaterEq): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
8824 ===> org.kiama.example.obr.SPARCTree.Ret.copy(): org.kiama.example.obr.SPARCTree.Ret
6762 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.toString(): String
9708 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.apply(Variable: org.kiama.example.picojava.AbstractSyntax.Access,Value: org.kiama.example.picojava.AbstractSyntax.Exp): org.kiama.example.picojava.AbstractSyntax.AssignStmt
11650 ===> org.kiama.rewriting.Rewriter.downupS(s: => Rewriter.this.Strategy,stop: => Rewriter.this.Strategy => Rewriter.this.Strategy): Rewriter.this.Strategy
8841 ===> org.kiama.example.obr.SPARCTree.StW.copy(mem: org.kiama.example.obr.SPARCTree.Address,d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.StW
10683 ===> org.kiama.example.til.AST.Ne.toString(): String
7860 ===> org.kiama.example.obr.ObrTree.EqualExp.productArity: Int
540 ===> org.kiama.example.RISC.RISCISA.MVN.productArity: Int
450 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.isDefinedAt(x$1: DynamicAttributionTests.this.Tree): Boolean
2431 ===> org.kiama.example.iswim.compiler.Syntax.Import.copy(fn: String): org.kiama.example.iswim.compiler.Syntax.Import
1825 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
12179 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10588 ===> org.kiama.example.til.AST.Mul.toString(): String
11238 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.toString(): String
8261 ===> org.kiama.example.obr.RISCTree.LabelDef.copy(lab: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.LabelDef
7370 ===> org.kiama.example.oberon0.drivers.A1Phases.langlevel: Int
3809 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.hashCode(): Int
10522 ===> org.kiama.example.til.AST.Id.apply(s: String): org.kiama.example.til.AST.Id
11951 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11021 ===> org.kiama.output.PrettyPrinterBase.pretty$default$2: PrettyPrinterBase.this.Width @scala.annotation.unchecked.uncheckedVariance
3710 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productPrefix: String
8 ===> org.kiama.attribution.Attributable.prev[T]: T
7861 ===> org.kiama.example.obr.ObrTree.EqualExp.productElement(x$1: Int): Any
429 ===> org.kiama.attribution.DynamicAttributionTests.Unused.copy$default$1: Boolean @scala.annotation.unchecked.uncheckedVariance
12277 ===> org.kiama.util.TestCompiler.filetest(name: String,rp: String,console: org.kiama.util.Console,extra: String,cmd: Array[String],rt: String): Unit
9543 ===> org.kiama.example.oneohonecompanies.Company.PU.productArity: Int
11798 ===> org.kiama.rewriting.RewriterTests.Equal.productIterator: Iterator[Any]
1263 ===> org.kiama.example.RISC.RISCISA.BR.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
9778 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.canEqual(x$1: Any): Boolean
12027 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7212 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.productPrefix: String
10085 ===> org.kiama.example.prolog.PrologTree.Integer.equals(x$1: Any): Boolean
9062 ===> org.kiama.example.obr.SPARCTree.MulW.readResolve(): Object
8556 ===> org.kiama.example.obr.RISCTree.Not.canEqual(x$1: Any): Boolean
3946 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productArity: Int
197 ===> org.kiama.attribution.AttributionTests.EitherTree.e: Either[AttributionTests.this.Pair,AttributionTests.this.Leaf]
9800 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.toString(): String
8049 ===> org.kiama.example.obr.ObrTree.NotEqualExp.toString(): String
8754 ===> org.kiama.example.obr.SPARCTree.Bne.dest: org.kiama.example.obr.SPARCTree.Label
5009 ===> org.kiama.example.lambda3.AST.App.hashCode(): Int
10128 ===> org.kiama.example.prolog.PrologTree.Cut.<init>(): org.kiama.example.prolog.PrologTree.Cut
9001 ===> org.kiama.example.obr.SPARCTree.DivW.canEqual(x$1: Any): Boolean
11588 ===> org.kiama.rewriting.Rewriter.$anon.allRewritable(r: org.kiama.rewriting.Rewritable): Option[Rewriter.this.Term]
1707 ===> org.kiama.example.imperative.AST.Div.productPrefix: String
9676 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.copy$default$1: org.kiama.example.picojava.AbstractSyntax.Access @scala.annotation.unchecked.uncheckedVariance
6378 ===> org.kiama.example.oberon0.L2.source.ValCond.toString(): String
5066 ===> org.kiama.example.lambda3.AST.EvalQuery.toString(): String
10847 ===> org.kiama.example.transform.AST.Var.productElement(x$1: Int): Any
10849 ===> org.kiama.example.transform.AST.Var.canEqual(x$1: Any): Boolean
1687 ===> org.kiama.example.imperative.AST.Mul.productArity: Int
10817 ===> org.kiama.example.transform.AST.BinExp.equals(x$1: Any): Boolean
3464 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.equals(x$1: Any): Boolean
7906 ===> org.kiama.example.obr.ObrTree.GreaterExp.toString(): String
11699 ===> org.kiama.rewriting.RewriterClassTests.<init>(): org.kiama.rewriting.RewriterClassTests
7406 ===> org.kiama.example.obr.Driver.execFlag: Boolean
7176 ===> org.kiama.example.oberon0.base.c.CStrType.copy(): org.kiama.example.oberon0.base.c.CStrType
12520 ===> org.kiama.util.ParserUtilitiesTests.Tup4.<init>(): ParserUtilitiesTests.this.Tup4.type
10695 ===> org.kiama.example.til.TIL1_1Tests.f: org.kiama.example.til.AST.Id
2648 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
7300 ===> org.kiama.example.oberon0.base.source.Block.canEqual(x$1: Any): Boolean
37 ===> org.kiama.attribution.AttributionBase.CircularState.IN_CIRCLE: Boolean
12182 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10075 ===> org.kiama.example.prolog.PrologTree.Integer.<init>(v: Int): org.kiama.example.prolog.PrologTree.Integer
8277 ===> org.kiama.example.obr.RISCTree.Ret.copy(): org.kiama.example.obr.RISCTree.Ret
9006 ===> org.kiama.example.obr.SPARCTree.DivW.toString(): String
4065 ===> org.kiama.example.iswim.secd.SECDBase.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
1361 ===> org.kiama.example.dataflow.LivenessImpl.ocount_$eq(x$1: Int): Unit
9232 ===> org.kiama.example.obr.SymbolTable.Variable.equals(x$1: Any): Boolean
7242 ===> org.kiama.example.oberon0.base.c.CExpression.<init>(): org.kiama.example.oberon0.base.c.CExpression
7437 ===> org.kiama.example.obr.ObrTree.ObrInt.productPrefix: String
8172 ===> org.kiama.example.obr.RISCTransformation.exitlab: org.kiama.example.obr.RISCTree.Label
12305 ===> org.kiama.util.StringEmitter.emitln(any: Any): Unit
696 ===> org.kiama.example.RISC.RISCISA.MULI.unapply(x$0: org.kiama.example.RISC.RISCISA.MULI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
10158 ===> org.kiama.example.prolog.SemanticTestDriver.<init>(): org.kiama.example.prolog.SemanticTestDriver
10753 ===> org.kiama.example.transform.AST.VarDecl.canEqual(x$1: Any): Boolean
8385 ===> org.kiama.example.obr.RISCTree.CmpeqW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpeqW
8778 ===> org.kiama.example.obr.SPARCTree.Jmp.productElement(x$1: Int): Any
10786 ===> org.kiama.example.transform.AST.Factor.copy(exp: org.kiama.example.transform.AST.PrimExp): org.kiama.example.transform.AST.Factor
4531 ===> org.kiama.example.lambda2.AST.Var.copy$default$1: org.kiama.example.lambda2.AST.Idn @scala.annotation.unchecked.uncheckedVariance
170 ===> org.kiama.attribution.AttributionTests.Leaf.productIterator: Iterator[Any]
1636 ===> org.kiama.example.imperative.AST.Binary.depth: Int
6813 ===> org.kiama.example.oberon0.L4.TypeAnalyser.fieldListsToFields(fls: List[org.kiama.example.oberon0.L4.source.FieldList]): List[TypeAnalyser.this.Field]
4032 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productIterator: Iterator[Any]
535 ===> org.kiama.example.RISC.RISCISA.MVN.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
1336 ===> org.kiama.example.RISC.RISCISA.Comment.canEqual(x$1: Any): Boolean
3251 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.canEqual(x$1: Any): Boolean
337 ===> org.kiama.attribution.AttributionTests.count_$eq(x$1: Int): Unit
2207 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.toString(): String
3460 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.productIterator: Iterator[Any]
2379 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.copy(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LetRec
12170 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9532 ===> org.kiama.example.oneohonecompanies.Company.Employee.<init>(): org.kiama.example.oneohonecompanies.Company.Employee.type
10435 ===> org.kiama.example.til.AST.While.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
9459 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.<init>(): SyntaxAnalysis.this.Pos.type
10452 ===> org.kiama.example.til.AST.For.t: org.kiama.example.til.AST.Exp
4397 ===> org.kiama.example.lambda.AST.Num.productIterator: Iterator[Any]
1331 ===> org.kiama.example.RISC.RISCISA.Comment.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
9531 ===> org.kiama.example.oneohonecompanies.Company.Employee.equals(x$1: Any): Boolean
1711 ===> org.kiama.example.imperative.AST.Div.canEqual(x$1: Any): Boolean
771 ===> org.kiama.example.RISC.RISCISA.MODI.productArity: Int
580 ===> org.kiama.example.RISC.RISCISA.ADD.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.ADD
4227 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
6981 ===> org.kiama.example.oberon0.L4.source.FieldIdn.apply(ident: String): org.kiama.example.oberon0.L4.source.FieldIdn
4001 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.envir_$eq(x$1: SECDBase.this.Environment): Unit
6587 ===> org.kiama.example.oberon0.L3.c.CStrExp.hashCode(): Int
11179 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.unapply(x$0: ParenPrettyPrinterTests.this.InOp): Option[(ParenPrettyPrinterTests.this.Exp, ParenPrettyPrinterTests.this.Exp, Int, org.kiama.output.Side)]
2432 ===> org.kiama.example.iswim.compiler.Syntax.Import.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
9287 ===> org.kiama.example.obr.SymbolTable.Multiple.unapply(x$0: org.kiama.example.obr.SymbolTable.Multiple): Boolean
1100 ===> org.kiama.example.RISC.RISCISA.RD.canEqual(x$1: Any): Boolean
5127 ===> org.kiama.example.lambda3.AST.SubstQuery.equals(x$1: Any): Boolean
6616 ===> org.kiama.example.oberon0.L3.c.CDerefExp.priority: Int
4167 ===> org.kiama.example.iswim.secd.StringOps.StringValue.toString(): String
116 ===> org.kiama.attribution.Attribution.<init>(): org.kiama.attribution.Attribution.type
6156 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.blockToDoc$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
8516 ===> org.kiama.example.obr.RISCTree.MulW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
11911 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4781 ===> org.kiama.example.lambda2.Analysis.env: org.kiama.example.lambda2.AST.Exp => List[(org.kiama.example.lambda2.AST.Idn, org.kiama.example.lambda2.AST.Type)]
4189 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productArity: Int
11801 ===> org.kiama.rewriting.RewriterTests.Equal.toString(): String
4758 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5068 ===> org.kiama.example.lambda3.AST.EvalQuery.<init>(): org.kiama.example.lambda3.AST.EvalQuery.type
172 ===> org.kiama.attribution.AttributionTests.Leaf.hashCode(): Int
1958 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Stmt] @scala.annotation.unchecked.uncheckedVariance
6455 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.equals(x$1: Any): Boolean
12370 ===> org.kiama.util.IO.FileNotFoundException.productArity: Int
2771 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.toString(): String
5743 ===> org.kiama.example.oberon0.L0.source.VarDecl.<init>(idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L0.source.VarDecl
7831 ===> org.kiama.example.obr.ObrTree.AndExp.<init>(): org.kiama.example.obr.ObrTree.AndExp.type
11341 ===> org.kiama.rewriting.PositionalRewriterTests.o: org.kiama.rewriting.SupportPositionalRewriterTests.One
5477 ===> org.kiama.example.oberon0.L0.c.CLeExp.toString(): String
10793 ===> org.kiama.example.transform.AST.Factor.hashCode(): Int
8689 ===> org.kiama.example.obr.SPARCEncoder.arg2reg: String("%o1")
4839 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3907 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.<init>(): org.kiama.example.iswim.secd.SECDBase.DumpEmpty.type
2905 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.equals(x$1: Any): Boolean
3712 ===> org.kiama.example.iswim.secd.SECDBase.GetType.productElement(x$1: Int): Any
5540 ===> org.kiama.example.oberon0.L0.c.CAddExp.readResolve(): Object
1077 ===> org.kiama.example.RISC.RISCISA.PSH.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
1607 ===> org.kiama.example.imperative.AST.Var.toString(): String
2300 ===> org.kiama.example.iswim.compiler.Syntax.And.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.And): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
6007 ===> org.kiama.example.oberon0.L0.source.MulExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
6890 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.apply(size: org.kiama.example.oberon0.L0.source.Expression,tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L4.source.ArrayTypeDef
9200 ===> org.kiama.example.obr.SemanticAnalysis.initEnv: scala.collection.immutable.Map[String,org.kiama.example.obr.SymbolTable.Constant]
11304 ===> org.kiama.rewriting.NominalRewriter.$anonfun.applyOrElse[A1 <: NominalRewriter.this.Term, B1 >: NominalRewriter.this.Term](x$1: A1,default: A1 => B1): B1
3627 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.ResumeFromDump): Boolean
2749 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Primitives): Option[List[org.kiama.example.iswim.compiler.Syntax.Variable]]
8776 ===> org.kiama.example.obr.SPARCTree.Jmp.productPrefix: String
1705 ===> org.kiama.example.imperative.AST.Div.copy$default$1: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
6119 ===> org.kiama.example.oberon0.L0.source.NotExp.readResolve(): Object
2922 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.toString(): String
6318 ===> org.kiama.example.oberon0.L2.source.ForStatement.canEqual(x$1: Any): Boolean
8849 ===> org.kiama.example.obr.SPARCTree.StW.hashCode(): Int
2058 ===> org.kiama.example.iswim.compiler.Syntax.Plus.readResolve(): Object
666 ===> org.kiama.example.RISC.RISCISA.MUL.productArity: Int
9615 ===> org.kiama.example.picojava.AbstractSyntax.Program.copy(Block: org.kiama.example.picojava.AbstractSyntax.Block): org.kiama.example.picojava.AbstractSyntax.Program
7230 ===> org.kiama.example.oberon0.base.c.CReturn.productArity: Int
11073 ===> org.kiama.output.PrettyPrinterBase.enclose(l: PrettyPrinterBase.this.Doc,d: PrettyPrinterBase.this.Doc,r: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
5094 ===> org.kiama.example.lambda3.AST.FreshQuery.execute: FreshQuery.this.T
10190 ===> org.kiama.example.prolog.SymbolTable.Variable.equals(x$1: Any): Boolean
3478 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.productIterator: Iterator[Any]
8205 ===> org.kiama.example.obr.RISCTree.Beq.dest: org.kiama.example.obr.RISCTree.Label
6265 ===> org.kiama.example.oberon0.L1.source.WhileStatement.canEqual(x$1: Any): Boolean
1751 ===> org.kiama.example.imperative.AST.Seqn.toString(): String
8105 ===> org.kiama.example.obr.ObrTree.PlusExp.equals(x$1: Any): Boolean
4026 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
1131 ===> org.kiama.example.RISC.RISCISA.WRH.productArity: Int
578 ===> org.kiama.example.RISC.RISCISA.ADD.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.ADD
3312 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.toString(): String
8739 ===> org.kiama.example.obr.SPARCTree.Beq.copy$default$2: org.kiama.example.obr.SPARCTree.Label @scala.annotation.unchecked.uncheckedVariance
2325 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productPrefix: String
9519 ===> org.kiama.example.oneohonecompanies.Company.Employee.<init>(n: org.kiama.example.oneohonecompanies.Company.Name,a: org.kiama.example.oneohonecompanies.Company.Address,s: org.kiama.example.oneohonecompanies.Company.Salary): org.kiama.example.oneohonecompanies.Company.Employee
12447 ===> org.kiama.util.ParserUtilitiesTests.Node.copy(i: Int): ParserUtilitiesTests.this.Node
6106 ===> org.kiama.example.oberon0.L0.source.NotExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
4231 ===> org.kiama.example.json.JSONTree.JValue.<init>(): org.kiama.example.json.JSONTree.JValue
2378 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LetRec
9408 ===> org.kiama.example.obr.SymbolTable.EnumTypes.toString(): String
12319 ===> org.kiama.util.Environments.Named.ident: String
10129 ===> org.kiama.example.prolog.PrologTree.Cut.toString(): String
4686 ===> org.kiama.example.lambda2.AST.FunType.copy(t1: org.kiama.example.lambda2.AST.Type,t2: org.kiama.example.lambda2.AST.Type): org.kiama.example.lambda2.AST.FunType
9195 ===> org.kiama.example.obr.SemanticAnalysis.enumconstnum: org.kiama.example.obr.ObrTree.EnumConst => Int
9889 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.AinB: org.kiama.example.picojava.AbstractSyntax.Use
6354 ===> org.kiama.example.oberon0.L2.source.Case.productPrefix: String
4340 ===> org.kiama.example.json.JSONTree.JFalse.toString(): String
3355 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.equals(x$1: Any): Boolean
11376 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.copy$default$2: org.kiama.rewriting.SupportPositionalRewriterTests.Node @scala.annotation.unchecked.uncheckedVariance
1872 ===> org.kiama.example.imperative.Imperative.<init>(): org.kiama.example.imperative.Imperative.type
12420 ===> org.kiama.util.ParserUtilities.handleWhiteSpace(in: ParserUtilities.this.Input): Int
7588 ===> org.kiama.example.obr.ObrTree.IntConst.toString(): String
1877 ===> org.kiama.example.imperative.ImperativeTests.p: org.kiama.example.imperative.AST.Seqn
482 ===> org.kiama.example.RISC.RISC.control(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
3731 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productElement(x$1: Int): Any
5938 ===> org.kiama.example.oberon0.L0.source.SumExpression.op: String
5384 ===> org.kiama.example.oberon0.L0.c.CAssignment.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
1124 ===> org.kiama.example.RISC.RISCISA.WRD.readResolve(): Object
11660 ===> org.kiama.rewriting.Rewriter.reduce(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
5553 ===> org.kiama.example.oberon0.L0.c.CSubExp.hashCode(): Int
11386 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.toString(): String
5352 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productIterator: Iterator[Any]
763 ===> org.kiama.example.RISC.RISCISA.MODI.im: org.kiama.example.RISC.RISCISA.Imm
4409 ===> org.kiama.example.lambda.AST.Var.copy(x: org.kiama.example.lambda.AST.Idn): org.kiama.example.lambda.AST.Var
12485 ===> org.kiama.util.ParserUtilitiesTests.Tup3.copy(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup3
1771 ===> org.kiama.example.imperative.AST.Asgn.toString(): String
11617 ===> org.kiama.rewriting.Rewriter.count(f: org.kiama.==>[Rewriter.this.Term,Int]): Rewriter.this.Term => Int
11887 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
6973 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productElement(x$1: Int): Any
11700 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6206 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.<init>(): org.kiama.example.oberon0.L1.c.CIfElseStatement.type
5204 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.copy(ident: String,decl: org.kiama.example.oberon0.base.source.ModuleDecl): SymbolTable.this.Module
4412 ===> org.kiama.example.lambda.AST.Var.productArity: Int
1451 ===> org.kiama.example.dataflow.DataflowAST.Return.canEqual(x$1: Any): Boolean
11790 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12486 ===> org.kiama.util.ParserUtilitiesTests.Tup3.copy$default$1: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
4392 ===> org.kiama.example.lambda.AST.Num.copy(i: Int): org.kiama.example.lambda.AST.Num
12071 ===> org.kiama.rewriting.RewriterTests.f(y: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
5913 ===> org.kiama.example.oberon0.L0.source.GtExp.equals(x$1: Any): Boolean
4367 ===> org.kiama.example.json.PrettyPrinting.$init$(): Unit
6792 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.productElement(x$1: Int): Any
9840 ===> org.kiama.example.picojava.NullObjects.unknownDecl: org.kiama.attribution.Attributable => org.kiama.example.picojava.AbstractSyntax.UnknownDecl
5297 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.copy$default$3: Int @scala.annotation.unchecked.uncheckedVariance
1511 ===> org.kiama.example.dataflow.For.copy(init: org.kiama.example.dataflow.DataflowAST.Stm,c: org.kiama.example.dataflow.DataflowAST.Stm,inc: org.kiama.example.dataflow.DataflowAST.Stm,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.For
6472 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.canEqual(x$1: Any): Boolean
5615 ===> org.kiama.example.oberon0.L0.c.CDivExp.equals(x$1: Any): Boolean
9440 ===> org.kiama.example.obr.SymbolTable.UnknownType.toString(): String
146 ===> org.kiama.attribution.AttributionTests.Pair.<init>(left: AttributionTests.this.Tree,right: AttributionTests.this.Tree): AttributionTests.this.Pair
7042 ===> org.kiama.example.oberon0.base.TestDriver.langlevel: Int
9772 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.copy(Value: String): org.kiama.example.picojava.AbstractSyntax.BooleanLiteral
11111 ===> org.kiama.output.PrettyPrinter.$init$(): Unit
9360 ===> org.kiama.example.obr.SymbolTable.RecordType.unapply(x$0: org.kiama.example.obr.SymbolTable.RecordType): Option[List[org.kiama.example.obr.ObrTree.Identifier]]
8302 ===> org.kiama.example.obr.RISCTree.StW.hashCode(): Int
11531 ===> org.kiama.rewriting.Rewriter.PlusStrategy.<init>(p: => Rewriter.this.Strategy,q: => Rewriter.this.Strategy): Rewriter.this.PlusStrategy
2852 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productIterator: Iterator[Any]
2546 ===> org.kiama.example.iswim.compiler.Syntax.Block.productArity: Int
6569 ===> org.kiama.example.oberon0.L3.c.CCall.canEqual(x$1: Any): Boolean
8585 ===> org.kiama.example.obr.RISCTree.SubW.r: org.kiama.example.obr.RISCTree.Datum
2236 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productPrefix: String
12317 ===> org.kiama.util.Environments.Named.resetCount: Unit
7113 ===> org.kiama.example.oberon0.base.c.CVarDecl.equals(x$1: Any): Boolean
3769 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.apply(): org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue
9013 ===> org.kiama.example.obr.SPARCTree.IntDatum.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
11882 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
823 ===> org.kiama.example.RISC.RISCISA.CHKI.toString(): String
7790 ===> org.kiama.example.obr.ObrTree.TryBody.toString(): String
12053 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3650 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.productElement(x$1: Int): Any
1522 ===> org.kiama.example.dataflow.For.apply(init: org.kiama.example.dataflow.DataflowAST.Stm,c: org.kiama.example.dataflow.DataflowAST.Stm,inc: org.kiama.example.dataflow.DataflowAST.Stm,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.For
9087 ===> org.kiama.example.obr.SPARCTree.Not.productIterator: Iterator[Any]
11178 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.apply(left: ParenPrettyPrinterTests.this.Exp,right: ParenPrettyPrinterTests.this.Exp,prio: Int,fix: org.kiama.output.Side): ParenPrettyPrinterTests.this.InOp
9400 ===> org.kiama.example.obr.SymbolTable.EnumTypes.productPrefix: String
844 ===> org.kiama.example.RISC.RISCISA.AND.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
816 ===> org.kiama.example.RISC.RISCISA.CMPI.toString(): String
5751 ===> org.kiama.example.oberon0.L0.source.VarDecl.canEqual(x$1: Any): Boolean
4827 ===> org.kiama.example.lambda2.LambdaTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3404 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.equals(x$1: Any): Boolean
6618 ===> org.kiama.example.oberon0.L3.c.CDerefExp.copy(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L3.c.CDerefExp
11 ===> org.kiama.attribution.Attributable.next[T]: T
6064 ===> org.kiama.example.oberon0.L0.source.AndExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
6305 ===> org.kiama.example.oberon0.L2.source.ForStatement.by: Option[org.kiama.example.oberon0.L0.source.Expression]
7837 ===> org.kiama.example.obr.ObrTree.BoolExp.<init>(value: Boolean): org.kiama.example.obr.ObrTree.BoolExp
9636 ===> org.kiama.example.picojava.AbstractSyntax.Block.productElement(x$1: Int): Any
8436 ===> org.kiama.example.obr.RISCTree.CmpgtW.toString(): String
2270 ===> org.kiama.example.iswim.compiler.Syntax.Not.productPrefix: String
9834 ===> org.kiama.example.picojava.NameResolution.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.picojava.AbstractSyntax.BlockStmt,org.kiama.example.picojava.AbstractSyntax.Decl] with Serializable
5868 ===> org.kiama.example.oberon0.L0.source.LtExp.productPrefix: String
4605 ===> org.kiama.example.lambda2.AST.Opn.readResolve(): Object
10756 ===> org.kiama.example.transform.AST.VarDecl.equals(x$1: Any): Boolean
6704 ===> org.kiama.example.oberon0.L3.source.FPSection.hashCode(): Int
11861 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4183 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.m: String
6489 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productPrefix: String
9850 ===> org.kiama.example.picojava.TypeAnalysis.isSuperTypeOf: org.kiama.example.picojava.AbstractSyntax.TypeDecl => (org.kiama.example.picojava.AbstractSyntax.TypeDecl => Boolean)
3805 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.productArity: Int
7269 ===> org.kiama.example.oberon0.base.source.ModuleDecl.block: org.kiama.example.oberon0.base.source.Block
10420 ===> org.kiama.example.til.AST.IfElse.productElement(x$1: Int): Any
6900 ===> org.kiama.example.oberon0.L4.source.IndexExp.productArity: Int
9238 ===> org.kiama.example.obr.SymbolTable.Constant.tipe: org.kiama.example.obr.SymbolTable.Type
3415 ===> org.kiama.example.iswim.secd.SECDBase.currPos: scala.util.parsing.input.Position
6509 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.productArity: Int
8017 ===> org.kiama.example.obr.ObrTree.ModExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.ModExp
1978 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productElement(x$1: Int): Any
8043 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productPrefix: String
257 ===> org.kiama.attribution.AttributionTests.GenSeqTree.hashCode(): Int
8101 ===> org.kiama.example.obr.ObrTree.PlusExp.productIterator: Iterator[Any]
8135 ===> org.kiama.example.obr.ObrTree.StarExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
6958 ===> org.kiama.example.oberon0.L4.source.FieldExp.canEqual(x$1: Any): Boolean
10193 ===> org.kiama.example.prolog.SymbolTable.Variable.apply(tipe: org.kiama.example.prolog.SymbolTable.Type): org.kiama.example.prolog.SymbolTable.Variable
10000 ===> org.kiama.example.prolog.PrologTree.Program.<init>(cs: List[org.kiama.example.prolog.PrologTree.Clause]): org.kiama.example.prolog.PrologTree.Program
7954 ===> org.kiama.example.obr.ObrTree.IntExp.canEqual(x$1: Any): Boolean
3566 ===> org.kiama.example.iswim.secd.SECDBase.Exit.readResolve(): Object
11774 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5141 ===> org.kiama.example.lambda3.AST.SwapQuery.productArity: Int
1471 ===> org.kiama.example.dataflow.DataflowAST.Empty.toString(): String
3792 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productIterator: Iterator[Any]
7692 ===> org.kiama.example.obr.ObrTree.LoopStmt.<init>(body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.LoopStmt
2258 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.hashCode(): Int
11831 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4964 ===> org.kiama.example.lambda3.AST.Num.<init>(i: Int): org.kiama.example.lambda3.AST.Num
2262 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.toString(): String
1384 ===> org.kiama.example.dataflow.DataflowAST.Assign.unapply(x$0: org.kiama.example.dataflow.DataflowAST.Assign): Option[(org.kiama.example.dataflow.DataflowAST.Var, org.kiama.example.dataflow.DataflowAST.Var)]
5407 ===> org.kiama.example.oberon0.L0.c.CEqExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
11716 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7419 ===> org.kiama.example.obr.TreeTestDriver.targettreetest(name: String,dirname: String,obrfile: String,tester: (String, org.kiama.util.Emitter, org.kiama.example.obr.RISCTree.RISCNode) => Unit,emitter: org.kiama.util.Emitter): Unit
12589 ===> org.kiama.util.PositionedParserUtilities.parseAndPosition[T](f: PositionedParserUtilities.this.Input => PositionedParserUtilities.this.ParseResult[T],in: PositionedParserUtilities.this.Input): PositionedParserUtilities.this.ParseResult[T]
2238 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productElement(x$1: Int): Any
5515 ===> org.kiama.example.oberon0.L0.c.CGeExp.equals(x$1: Any): Boolean
52 ===> org.kiama.attribution.AttributionBase.ConstantAttribute.<init>(u: => U): AttributionBase.this.ConstantAttribute[T,U]
6171 ===> org.kiama.example.oberon0.L1.c.CIfStatement.cond: org.kiama.example.oberon0.base.c.CExpression
1315 ===> org.kiama.example.RISC.RISCISA.Target.productPrefix: String
6589 ===> org.kiama.example.oberon0.L3.c.CStrExp.equals(x$1: Any): Boolean
871 ===> org.kiama.example.RISC.RISCISA.ANDI.productElement(x$1: Int): Any
8295 ===> org.kiama.example.obr.RISCTree.StW.copy$default$1: org.kiama.example.obr.RISCTree.Address @scala.annotation.unchecked.uncheckedVariance
10049 ===> org.kiama.example.prolog.PrologTree.Rule.toString(): String
6142 ===> org.kiama.example.oberon0.L0.source.IdnExp.productArity: Int
1910 ===> org.kiama.example.imperative.Parser.$init$(): Unit
5316 ===> org.kiama.example.oberon0.L0.SymbolTable.isVariable(e: SymbolTable.this.Entity): Boolean
10039 ===> org.kiama.example.prolog.PrologTree.Rule.<init>(hd: org.kiama.example.prolog.PrologTree.Term,bdy: List[org.kiama.example.prolog.PrologTree.Term]): org.kiama.example.prolog.PrologTree.Rule
3512 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.equals(x$1: Any): Boolean
9487 ===> org.kiama.example.oneohonecompanies.Company.Company.hashCode(): Int
71 ===> org.kiama.attribution.Attribution.CachedAttribute.memo: java.util.IdentityHashMap[T,Option[U]]
10897 ===> org.kiama.machine.Machine.Update.key: AnyRef
11030 ===> org.kiama.output.PrettyPrinterBase.linebreak: PrettyPrinterBase.this.Doc
8142 ===> org.kiama.example.obr.ObrTree.StarExp.toString(): String
11863 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2883 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.productPrefix: String
9156 ===> org.kiama.example.obr.SPARCTree.Indexed.copy(base: org.kiama.example.obr.SPARCTree.Local,offset: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Indexed
9968 ===> org.kiama.example.prolog.Interpreter.MatchGoal.hashCode(): Int
7825 ===> org.kiama.example.obr.ObrTree.AndExp.productElement(x$1: Int): Any
2115 ===> org.kiama.example.iswim.compiler.Syntax.Divide.readResolve(): Object
11807 ===> org.kiama.rewriting.RewriterTests.Same.productIterator: Iterator[Any]
4280 ===> org.kiama.example.json.JSONTree.JArray.apply(values: Vector[org.kiama.example.json.JSONTree.JValue]): org.kiama.example.json.JSONTree.JArray
2023 ===> org.kiama.example.iswim.compiler.Syntax.Negate.e: org.kiama.example.iswim.compiler.Syntax.Expr
8121 ===> org.kiama.example.obr.ObrTree.SlashExp.canEqual(x$1: Any): Boolean
6950 ===> org.kiama.example.oberon0.L4.source.FieldExp.<init>(base: org.kiama.example.oberon0.L0.source.Expression,fieldname: org.kiama.example.oberon0.L4.source.FieldIdn): org.kiama.example.oberon0.L4.source.FieldExp
187 ===> org.kiama.attribution.AttributionTests.Unused.productIterator: Iterator[Any]
7478 ===> org.kiama.example.obr.ObrTree.IntParam.toString(): String
9942 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.copy$default$1: org.kiama.example.prolog.PrologTree.Term @scala.annotation.unchecked.uncheckedVariance
181 ===> org.kiama.attribution.AttributionTests.Unused.<init>(b: Boolean): AttributionTests.this.Unused
3614 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.<init>(): org.kiama.example.iswim.secd.SECDBase.ResumeFromDump
8795 ===> org.kiama.example.obr.SPARCTree.LabelDef.productElement(x$1: Int): Any
5520 ===> org.kiama.example.oberon0.L0.c.CGeExp.readResolve(): Object
8839 ===> org.kiama.example.obr.SPARCTree.StW.d: org.kiama.example.obr.SPARCTree.Datum
10994 ===> org.kiama.output.Infix.toString(): String
4053 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.readResolve(): Object
8231 ===> org.kiama.example.obr.RISCTree.Bne.productElement(x$1: Int): Any
2039 ===> org.kiama.example.iswim.compiler.Syntax.Negate.readResolve(): Object
8245 ===> org.kiama.example.obr.RISCTree.Jmp.copy$default$1: org.kiama.example.obr.RISCTree.Label @scala.annotation.unchecked.uncheckedVariance
571 ===> org.kiama.example.RISC.RISCISA.MVNI.readResolve(): Object
3360 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.readResolve(): Object
5491 ===> org.kiama.example.oberon0.L0.c.CGtExp.productIterator: Iterator[Any]
9321 ===> org.kiama.example.obr.SymbolTable.BoolType.<init>(): org.kiama.example.obr.SymbolTable.BoolType.type
7198 ===> org.kiama.example.oberon0.base.c.CArrayType.productElement(x$1: Int): Any
7155 ===> org.kiama.example.oberon0.base.c.CBlock.toString(): String
11387 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.apply(l: org.kiama.rewriting.SupportPositionalRewriterTests.Node,r: org.kiama.rewriting.SupportPositionalRewriterTests.Node): org.kiama.rewriting.SupportPositionalRewriterTests.Two
11913 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5736 ===> org.kiama.example.oberon0.L0.source.ConstDecl.<init>(): org.kiama.example.oberon0.L0.source.ConstDecl.type
5710 ===> org.kiama.example.oberon0.L0.c.CIdnExp.hashCode(): Int
1567 ===> org.kiama.example.imperative.AST.Exp.value: Double
6609 ===> org.kiama.example.oberon0.L3.c.CAddrExp.<init>(): org.kiama.example.oberon0.L3.c.CAddrExp.type
6777 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.equals(x$1: Any): Boolean
10491 ===> org.kiama.example.til.AST.Write.<init>(e: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Write
3443 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.apply(code: org.kiama.example.iswim.secd.SECDBase.Code): org.kiama.example.iswim.secd.SECDBase.CodeSegment
1149 ===> org.kiama.example.RISC.RISCISA.WRL.canEqual(x$1: Any): Boolean
12469 ===> org.kiama.util.ParserUtilitiesTests.Tup2.productArity: Int
5925 ===> org.kiama.example.oberon0.L0.source.GeExp.productPrefix: String
7297 ===> org.kiama.example.oberon0.base.source.Block.productArity: Int
1231 ===> org.kiama.example.RISC.RISCISA.BLE.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
3250 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productIterator: Iterator[Any]
1813 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
5693 ===> org.kiama.example.oberon0.L0.c.CNotExp.hashCode(): Int
12599 ===> org.kiama.util.REPLBase.emitter: org.kiama.util.Emitter
5895 ===> org.kiama.example.oberon0.L0.source.LeExp.<init>(): org.kiama.example.oberon0.L0.source.LeExp.type
767 ===> org.kiama.example.RISC.RISCISA.MODI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
4872 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1482 ===> org.kiama.example.dataflow.Foreach.productArity: Int
9629 ===> org.kiama.example.picojava.AbstractSyntax.Program.readResolve(): Object
4055 ===> org.kiama.example.iswim.secd.SECDBase.$anon.<init>(): SECDBase.this.State[SECDBase.this.Stack]{def toDoc: SECDBase.this.Doc}
3966 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.canEqual(x$1: Any): Boolean
3798 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.toString(): String
7638 ===> org.kiama.example.obr.ObrTree.ExitStmt.canEqual(x$1: Any): Boolean
9736 ===> org.kiama.example.picojava.AbstractSyntax.Use.copy(Name: String): org.kiama.example.picojava.AbstractSyntax.Use
704 ===> org.kiama.example.RISC.RISCISA.DIV.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.DIV
1016 ===> org.kiama.example.RISC.RISCISA.POP.productPrefix: String
7826 ===> org.kiama.example.obr.ObrTree.AndExp.productIterator: Iterator[Any]
3450 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.bdy: org.kiama.example.iswim.secd.SECDBase.CodeSegment
9685 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.equals(x$1: Any): Boolean
9180 ===> org.kiama.example.obr.SPARCTree.Label.productIterator: Iterator[Any]
2287 ===> org.kiama.example.iswim.compiler.Syntax.And.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
10374 ===> org.kiama.example.til.AST.Assign.<init>(i: org.kiama.example.til.AST.Id,e: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Assign
11934 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4258 ===> org.kiama.example.json.JSONTree.JName.hashCode(): Int
9199 ===> org.kiama.example.obr.SemanticAnalysis.exnconstnum: org.kiama.example.obr.ObrTree.Declaration => Int
4788 ===> org.kiama.example.lambda2.Evaluator.$init$(): Unit
11082 ===> org.kiama.output.PrettyPrinterBase.dollar: PrettyPrinterBase.this.Doc
2524 ===> org.kiama.example.iswim.compiler.Syntax.While.<init>(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.While
2801 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productArity: Int
8122 ===> org.kiama.example.obr.ObrTree.SlashExp.hashCode(): Int
1778 ===> org.kiama.example.imperative.AST.While.vars: Set[org.kiama.example.imperative.AST.Idn]
10101 ===> org.kiama.example.prolog.PrologTree.Atom.canEqual(x$1: Any): Boolean
12222 ===> org.kiama.rewriting.UniplateTests.TestDivsByZero.genDivByZero(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Div]
3191 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.canEqual(x$1: Any): Boolean
6173 ===> org.kiama.example.oberon0.L1.c.CIfStatement.<init>(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CIfStatement
7770 ===> org.kiama.example.obr.ObrTree.TryStmt.productIterator: Iterator[Any]
5162 ===> org.kiama.example.lambda3.LambdaTests.expectQueryPrint[T](str: String,result: String): Unit
11010 ===> org.kiama.output.PrettyPrinterBase.defaultIndent: Int
7568 ===> org.kiama.example.obr.ObrTree.EnumConst.hashCode(): Int
6448 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.copy$default$2: org.kiama.example.oberon0.L3.source.ProcDecl @scala.annotation.unchecked.uncheckedVariance
7626 ===> org.kiama.example.obr.ObrTree.AssignStmt.equals(x$1: Any): Boolean
5147 ===> org.kiama.example.lambda3.AST.SwapQuery.equals(x$1: Any): Boolean
7864 ===> org.kiama.example.obr.ObrTree.EqualExp.hashCode(): Int
8059 ===> org.kiama.example.obr.ObrTree.NotExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
5890 ===> org.kiama.example.oberon0.L0.source.LeExp.productIterator: Iterator[Any]
1826 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3675 ===> org.kiama.example.iswim.secd.SECDBase.PushType.apply(ty: org.kiama.example.iswim.secd.SECDBase.TypeValue): org.kiama.example.iswim.secd.SECDBase.PushType
4640 ===> org.kiama.example.lambda2.AST.Letp.hashCode(): Int
3516 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.TailApp): Boolean
7558 ===> org.kiama.example.obr.ObrTree.EnumVar.readResolve(): Object
8240 ===> org.kiama.example.obr.RISCTree.Bne.unapply(x$0: org.kiama.example.obr.RISCTree.Bne): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Label)]
6748 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.elemtype: SymbolTable.this.Type
8700 ===> org.kiama.example.obr.SPARCEncoder.compare(br: String,l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum,d: org.kiama.example.obr.SPARCTree.Datum): Unit
83 ===> org.kiama.attribution.Attribution.CachedParamAttribute.$anon.<init>(): Attribution.this.Attribute[T,U]{}
2278 ===> org.kiama.example.iswim.compiler.Syntax.Not.<init>(): org.kiama.example.iswim.compiler.Syntax.Not.type
7320 ===> org.kiama.example.oberon0.base.source.EmptyStmt.toString(): String
5572 ===> org.kiama.example.oberon0.L0.c.COrExp.canEqual(x$1: Any): Boolean
2746 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.<init>(): org.kiama.example.iswim.compiler.Syntax.Primitives.type
5380 ===> org.kiama.example.oberon0.L0.c.CAssignment.exp: org.kiama.example.oberon0.base.c.CExpression
8206 ===> org.kiama.example.obr.RISCTree.Beq.<init>(cond: org.kiama.example.obr.RISCTree.Datum,dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Beq
12108 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11494 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.i: Int
9954 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.apply(left: org.kiama.example.prolog.PrologTree.Term,right: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.UnifyGoal
10684 ===> org.kiama.example.til.AST.Ne.equals(x$1: Any): Boolean
10825 ===> org.kiama.example.transform.AST.Num.<init>(value: Int): org.kiama.example.transform.AST.Num
11431 ===> org.kiama.rewriting.PositionedRewriterTests.pts: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
9560 ===> org.kiama.example.oneohonecompanies.Company.DU.productArity: Int
9908 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productPrefix: String
3021 ===> org.kiama.example.iswim.secd.HeapOps.Get.equals(x$1: Any): Boolean
10254 ===> org.kiama.example.prolog.SymbolTable.UnknownType.apply(): org.kiama.example.prolog.SymbolTable.UnknownType
1338 ===> org.kiama.example.RISC.RISCISA.Comment.equals(x$1: Any): Boolean
12287 ===> org.kiama.util.Console.readInt(prompt: String): Int
7881 ===> org.kiama.example.obr.ObrTree.FieldExp.productIterator: Iterator[Any]
8058 ===> org.kiama.example.obr.ObrTree.NotExp.copy(exp: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NotExp
10702 ===> org.kiama.example.til.TIL2_1Main.<init>(): org.kiama.example.til.TIL2_1Main.type
10336 ===> org.kiama.example.til.AST.<init>(): org.kiama.example.til.AST.type
5013 ===> org.kiama.example.lambda3.AST.App.apply(e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.App
6864 ===> org.kiama.example.oberon0.L4.c.CFieldExp.toString(): String
4587 ===> org.kiama.example.lambda2.AST.Opn.e2: org.kiama.example.lambda2.AST.Exp
420 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.equals(x$1: Any): Boolean
11606 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
7412 ===> org.kiama.example.obr.ParserDriver.<init>(): org.kiama.example.obr.ParserDriver
774 ===> org.kiama.example.RISC.RISCISA.MODI.canEqual(x$1: Any): Boolean
8818 ===> org.kiama.example.obr.SPARCTree.Read.<init>(): org.kiama.example.obr.SPARCTree.Read.type
9170 ===> org.kiama.example.obr.SPARCTree.Indexed.unapply(x$0: org.kiama.example.obr.SPARCTree.Indexed): Option[(org.kiama.example.obr.SPARCTree.Local, org.kiama.example.obr.SPARCTree.Datum)]
1195 ===> org.kiama.example.RISC.RISCISA.BNE.readResolve(): Object
10630 ===> org.kiama.example.til.AST.Add.apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Add
9058 ===> org.kiama.example.obr.SPARCTree.MulW.<init>(): org.kiama.example.obr.SPARCTree.MulW.type
7276 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productPrefix: String
10742 ===> org.kiama.example.transform.AST.Program.apply(ops: List[(String, Int)],vars: List[org.kiama.example.transform.AST.VarDecl],expr: org.kiama.example.transform.AST.ExpR): org.kiama.example.transform.AST.Program
2742 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.canEqual(x$1: Any): Boolean
8669 ===> org.kiama.example.obr.RISCTree.Label.toString(): String
12074 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7450 ===> org.kiama.example.obr.ObrTree.Declaration.<init>(): org.kiama.example.obr.ObrTree.Declaration
11815 ===> org.kiama.rewriting.RewriterTests.NotSame.productElement(x$1: Int): Any
10800 ===> org.kiama.example.transform.AST.Factor.readResolve(): Object
11852 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2248 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.readResolve(): Object
2147 ===> org.kiama.example.iswim.compiler.Syntax.Equal.toString(): String
4381 ===> org.kiama.example.json.Rewriter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2768 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productIterator: Iterator[Any]
7331 ===> org.kiama.example.oberon0.base.source.IdnDef.productArity: Int
3091 ===> org.kiama.example.iswim.secd.IOOps.Write.<init>(): org.kiama.example.iswim.secd.IOOps.Write.type
5532 ===> org.kiama.example.oberon0.L0.c.CAddExp.canEqual(x$1: Any): Boolean
8095 ===> org.kiama.example.obr.ObrTree.PlusExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.PlusExp
1286 ===> org.kiama.example.RISC.RISCISA.BSR.equals(x$1: Any): Boolean
2071 ===> org.kiama.example.iswim.compiler.Syntax.Minus.toString(): String
12525 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n1: ParserUtilitiesTests.this.Node
548 ===> org.kiama.example.RISC.RISCISA.MVN.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MVN
12265 ===> org.kiama.util.RegexCompiler.$init$(): Unit
227 ===> org.kiama.attribution.AttributionTests.ListTree.toString(): String
8434 ===> org.kiama.example.obr.RISCTree.CmpgtW.equals(x$1: Any): Boolean
903 ===> org.kiama.example.RISC.RISCISA.ORI.b: org.kiama.example.RISC.RISCISA.RegNo
5953 ===> org.kiama.example.oberon0.L0.source.AddExp.hashCode(): Int
4987 ===> org.kiama.example.lambda3.AST.Var.productElement(x$1: Int): Any
4197 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.apply(m: String): StringOps.this.UserExceptionValue
2361 ===> org.kiama.example.iswim.compiler.Syntax.Let.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Binding] @scala.annotation.unchecked.uncheckedVariance
6669 ===> org.kiama.example.oberon0.L3.source.VarMode.toString(): String
4226 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
5817 ===> org.kiama.example.oberon0.L0.source.BinaryExpression.<init>(): org.kiama.example.oberon0.L0.source.BinaryExpression
814 ===> org.kiama.example.RISC.RISCISA.CMPI.equals(x$1: Any): Boolean
6313 ===> org.kiama.example.oberon0.L2.source.ForStatement.copy$default$5: org.kiama.example.oberon0.base.source.Block @scala.annotation.unchecked.uncheckedVariance
143 ===> org.kiama.attribution.AttributionTests.Tree.<init>(): AttributionTests.this.Tree
4088 ===> org.kiama.example.iswim.secd.StackOps.Pop.unapply(x$0: org.kiama.example.iswim.secd.StackOps.Pop): Option[Int]
1575 ===> org.kiama.example.imperative.AST.Num.depth: Int
12399 ===> org.kiama.util.Messaging.Record.hashCode(): Int
5445 ===> org.kiama.example.oberon0.L0.c.CLtExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CLtExp
7892 ===> org.kiama.example.obr.ObrTree.GreaterExp.right: org.kiama.example.obr.ObrTree.Expression
322 ===> org.kiama.attribution.AttributionTests.QuadTree.productElement(x$1: Int): Any
11288 ===> org.kiama.rewriting.NominalAST.Bind.toString(): String
8976 ===> org.kiama.example.obr.SPARCTree.CmpltW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
5146 ===> org.kiama.example.lambda3.AST.SwapQuery.toString(): String
12009 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
251 ===> org.kiama.attribution.AttributionTests.GenSeqTree.copy$default$1: scala.collection.GenSeq[AttributionTests.this.Tree] @scala.annotation.unchecked.uncheckedVariance
8542 ===> org.kiama.example.obr.RISCTree.NegW.equals(x$1: Any): Boolean
9416 ===> org.kiama.example.obr.SymbolTable.ExnType.productPrefix: String
1150 ===> org.kiama.example.RISC.RISCISA.WRL.hashCode(): Int
6836 ===> org.kiama.example.oberon0.L4.c.CIndexExp.copy(array: org.kiama.example.oberon0.base.c.CExpression,index: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L4.c.CIndexExp
4161 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.apply(): org.kiama.example.iswim.secd.StringOps.StringTypeValue
3693 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.<init>(): org.kiama.example.iswim.secd.SECDBase.RaiseException
1837 ===> org.kiama.example.imperative.ASTNonCase.Num.d: Double
113 ===> org.kiama.attribution.Attribution.tree[T <: org.kiama.attribution.Attributable, U <: org.kiama.attribution.Attributable](optName: Option[String])(f: T => U): Attribution.this.CachedAttribute[T,U]
6563 ===> org.kiama.example.oberon0.L3.c.CCall.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3856 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productArity: Int
4415 ===> org.kiama.example.lambda.AST.Var.canEqual(x$1: Any): Boolean
9584 ===> org.kiama.example.oneohonecompanies.Other.<init>(): org.kiama.example.oneohonecompanies.Other.type
11106 ===> org.kiama.output.PrettyPrinterBase.question: PrettyPrinterBase.this.Doc
9763 ===> org.kiama.example.picojava.AbstractSyntax.Dot.toString(): String
3059 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.hashCode(): Int
10217 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productElement(x$1: Int): Any
8722 ===> org.kiama.example.obr.SPARCTree.SPARC.productElement(x$1: Int): Any
6937 ===> org.kiama.example.oberon0.L4.source.FieldList.productElement(x$1: Int): Any
7859 ===> org.kiama.example.obr.ObrTree.EqualExp.productPrefix: String
6699 ===> org.kiama.example.oberon0.L3.source.FPSection.productPrefix: String
9593 ===> org.kiama.example.oneohonecompanies.Precedence.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7217 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.hashCode(): Int
3619 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productIterator: Iterator[Any]
12419 ===> org.kiama.util.ParserUtilities.result[T](v: => T): ParserUtilities.this.Parser[T]
7741 ===> org.kiama.example.obr.ObrTree.WhileStmt.apply(cond: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.WhileStmt
10648 ===> org.kiama.example.til.AST.Sub.toString(): String
4689 ===> org.kiama.example.lambda2.AST.FunType.productPrefix: String
936 ===> org.kiama.example.RISC.RISCISA.XOR.canEqual(x$1: Any): Boolean
7989 ===> org.kiama.example.obr.ObrTree.MinusExp.productArity: Int
6314 ===> org.kiama.example.oberon0.L2.source.ForStatement.productPrefix: String
7264 ===> org.kiama.example.oberon0.base.c.PrettyPrinter.arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType): PrettyPrinter.this.Doc
228 ===> org.kiama.attribution.AttributionTests.ListTree.apply(l: List[AttributionTests.this.Tree]): AttributionTests.this.ListTree
10355 ===> org.kiama.example.til.AST.Decl.i: org.kiama.example.til.AST.Id
7432 ===> org.kiama.example.obr.ObrTree.ObrInt.copy(idn1: org.kiama.example.obr.ObrTree.Identifier,decls: List[org.kiama.example.obr.ObrTree.Declaration],stmts: List[org.kiama.example.obr.ObrTree.Statement],idn2: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.ObrInt
2896 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.<init>(): org.kiama.example.iswim.secd.ConversionOps.ToInt
5079 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productArity: Int
1349 ===> org.kiama.example.dataflow.ControlFlowImpl.following: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Stm]
10783 ===> org.kiama.example.transform.AST.BinExpR.readResolve(): Object
4609 ===> org.kiama.example.lambda2.AST.Let.e2: org.kiama.example.lambda2.AST.Exp
3031 ===> org.kiama.example.iswim.secd.HeapOps.Put.productElement(x$1: Int): Any
3526 ===> org.kiama.example.iswim.secd.SECDBase.Enter.canEqual(x$1: Any): Boolean
11174 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.toString(): String
2344 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productPrefix: String
8266 ===> org.kiama.example.obr.RISCTree.LabelDef.productIterator: Iterator[Any]
9263 ===> org.kiama.example.obr.SymbolTable.Unknown.productElement(x$1: Int): Any
7474 ===> org.kiama.example.obr.ObrTree.IntParam.productElement(x$1: Int): Any
8187 ===> org.kiama.example.obr.RISCTree.RISCProg.<init>(insns: List[org.kiama.example.obr.RISCTree.Item]): org.kiama.example.obr.RISCTree.RISCProg
2225 ===> org.kiama.example.iswim.compiler.Syntax.Greater.<init>(): org.kiama.example.iswim.compiler.Syntax.Greater.type
11877 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1503 ===> org.kiama.example.dataflow.For.c: org.kiama.example.dataflow.DataflowAST.Stm
1621 ===> org.kiama.example.imperative.AST.Neg.productArity: Int
8571 ===> org.kiama.example.obr.RISCTree.RemW.productPrefix: String
6377 ===> org.kiama.example.oberon0.L2.source.ValCond.hashCode(): Int
6810 ===> org.kiama.example.oberon0.L4.TypeAnalyser.isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type): Boolean
6140 ===> org.kiama.example.oberon0.L0.source.IdnExp.copy$default$1: org.kiama.example.oberon0.base.source.IdnUse @scala.annotation.unchecked.uncheckedVariance
350 ===> org.kiama.attribution.AttributionTests.$anonfun.applyOrElse[A1 <: AttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
4232 ===> org.kiama.example.json.JSONTree.JObject.fields: List[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)]
9990 ===> org.kiama.example.prolog.Main.programtree: org.kiama.example.prolog.PrologTree.Program
10400 ===> org.kiama.example.til.AST.IfThen.productIterator: Iterator[Any]
5804 ===> org.kiama.example.oberon0.L0.source.Assignment.productArity: Int
3361 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.<init>(): org.kiama.example.iswim.secd.RecordOps.RecordTypeValue
3707 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.readResolve(): Object
5893 ===> org.kiama.example.oberon0.L0.source.LeExp.toString(): String
11207 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.fixity: org.kiama.output.Fixity
3225 ===> org.kiama.example.iswim.secd.IntegerOps.Div.<init>(): org.kiama.example.iswim.secd.IntegerOps.Div.type
11558 ===> org.kiama.rewriting.Rewriter.debug(msg: String,emitter: org.kiama.util.Emitter): Rewriter.this.Strategy
859 ===> org.kiama.example.RISC.RISCISA.AND.readResolve(): Object
9077 ===> org.kiama.example.obr.SPARCTree.NegW.apply(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.NegW
8132 ===> org.kiama.example.obr.ObrTree.StarExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.StarExp
10221 ===> org.kiama.example.prolog.SymbolTable.IntegerType.equals(x$1: Any): Boolean
8942 ===> org.kiama.example.obr.SPARCTree.CmpneW.productElement(x$1: Int): Any
661 ===> org.kiama.example.RISC.RISCISA.MUL.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
12578 ===> org.kiama.util.Patterns.HasParent.<init>(): org.kiama.util.Patterns.HasParent.type
2939 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.toString(): String
7852 ===> org.kiama.example.obr.ObrTree.BoolExp.readResolve(): Object
9357 ===> org.kiama.example.obr.SymbolTable.RecordType.<init>(): org.kiama.example.obr.SymbolTable.RecordType.type
10743 ===> org.kiama.example.transform.AST.Program.unapply(x$0: org.kiama.example.transform.AST.Program): Option[(List[(String, Int)], List[org.kiama.example.transform.AST.VarDecl], org.kiama.example.transform.AST.ExpR)]
4623 ===> org.kiama.example.lambda2.AST.Let.equals(x$1: Any): Boolean
10017 ===> org.kiama.example.prolog.PrologTree.Clause.hd: org.kiama.example.prolog.PrologTree.Term
2550 ===> org.kiama.example.iswim.compiler.Syntax.Block.hashCode(): Int
10316 ===> org.kiama.example.repmin.RepminBase.globmin: org.kiama.example.repmin.Tree => Int
12089 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7231 ===> org.kiama.example.oberon0.base.c.CReturn.productElement(x$1: Int): Any
1458 ===> org.kiama.example.dataflow.DataflowAST.Return.unapply(x$0: org.kiama.example.dataflow.DataflowAST.Return): Option[org.kiama.example.dataflow.DataflowAST.Var]
4930 ===> org.kiama.example.lambda2.PrettyPrinter.showbin(l: org.kiama.example.lambda2.AST.Exp,op: String,r: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.PrettyPrinter.Doc
9348 ===> org.kiama.example.obr.SymbolTable.RecordType.copy(fields: List[org.kiama.example.obr.ObrTree.Identifier]): org.kiama.example.obr.SymbolTable.RecordType
7358 ===> org.kiama.example.oberon0.base.source.IdnUse.unapply(x$0: org.kiama.example.oberon0.base.source.IdnUse): Option[String]
6822 ===> org.kiama.example.oberon0.L4.c.CRecordType.productElement(x$1: Int): Any
7356 ===> org.kiama.example.oberon0.base.source.IdnUse.toString(): String
1371 ===> org.kiama.example.dataflow.DataflowAST.Assign.copy$default$1: org.kiama.example.dataflow.DataflowAST.Var @scala.annotation.unchecked.uncheckedVariance
1269 ===> org.kiama.example.RISC.RISCISA.BR.hashCode(): Int
2140 ===> org.kiama.example.iswim.compiler.Syntax.Equal.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
8537 ===> org.kiama.example.obr.RISCTree.NegW.productElement(x$1: Int): Any
6466 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.copy$default$1: org.kiama.example.oberon0.L3.source.Mode @scala.annotation.unchecked.uncheckedVariance
1672 ===> org.kiama.example.imperative.AST.Sub.toString(): String
4337 ===> org.kiama.example.json.JSONTree.JFalse.productIterator: Iterator[Any]
1583 ===> org.kiama.example.imperative.AST.Num.hashCode(): Int
4491 ===> org.kiama.example.lambda.Lambda.setup(args: Array[String]): Boolean
1789 ===> org.kiama.example.imperative.AST.While.equals(x$1: Any): Boolean
563 ===> org.kiama.example.RISC.RISCISA.MVNI.productIterator: Iterator[Any]
5501 ===> org.kiama.example.oberon0.L0.c.CGeExp.left: org.kiama.example.oberon0.base.c.CExpression
1191 ===> org.kiama.example.RISC.RISCISA.BNE.<init>(): org.kiama.example.RISC.RISCISA.BNE.type
2506 ===> org.kiama.example.iswim.compiler.Syntax.If.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
10267 ===> org.kiama.example.prolog.Subst.toString(): String
8765 ===> org.kiama.example.obr.SPARCTree.Bne.toString(): String
5495 ===> org.kiama.example.oberon0.L0.c.CGtExp.equals(x$1: Any): Boolean
6703 ===> org.kiama.example.oberon0.L3.source.FPSection.canEqual(x$1: Any): Boolean
2725 ===> org.kiama.example.iswim.compiler.Syntax.Assign.canEqual(x$1: Any): Boolean
4301 ===> org.kiama.example.json.JSONTree.JNumber.<init>(value: Double): org.kiama.example.json.JSONTree.JNumber
960 ===> org.kiama.example.RISC.RISCISA.XORI.<init>(): org.kiama.example.RISC.RISCISA.XORI.type
10454 ===> org.kiama.example.til.AST.For.<init>(i: org.kiama.example.til.AST.Id,f: org.kiama.example.til.AST.Exp,t: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.For
6095 ===> org.kiama.example.oberon0.L0.source.NegExp.equals(x$1: Any): Boolean
866 ===> org.kiama.example.RISC.RISCISA.ANDI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
6203 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.hashCode(): Int
6506 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
1650 ===> org.kiama.example.imperative.AST.Add.canEqual(x$1: Any): Boolean
11653 ===> org.kiama.rewriting.Rewriter.oncetd(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
10149 ===> org.kiama.example.prolog.SemanticAnalysis.entity: org.kiama.example.prolog.PrologTree.SourceNode => org.kiama.example.prolog.SymbolTable.Entity
7695 ===> org.kiama.example.obr.ObrTree.LoopStmt.productPrefix: String
6575 ===> org.kiama.example.oberon0.L3.c.CCall.apply(s: String,ps: List[org.kiama.example.oberon0.base.c.CExpression]): org.kiama.example.oberon0.L3.c.CCall
7208 ===> org.kiama.example.oberon0.base.c.CArrayType.readResolve(): Object
8810 ===> org.kiama.example.obr.SPARCTree.Read.productPrefix: String
3681 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productArity: Int
5452 ===> org.kiama.example.oberon0.L0.c.CLtExp.canEqual(x$1: Any): Boolean
1366 ===> org.kiama.example.dataflow.DataflowAST.Stm.<init>(): org.kiama.example.dataflow.DataflowAST.Stm
1947 ===> org.kiama.example.iswim.compiler.SemanticAnalysis.envir: org.kiama.example.iswim.compiler.Syntax.Iswim => Map[org.kiama.example.iswim.compiler.Syntax.Variable,org.kiama.example.iswim.compiler.Syntax.Iswim]
1431 ===> org.kiama.example.dataflow.DataflowAST.Block.productArity: Int
4347 ===> org.kiama.example.json.JSONTree.JNull.<init>(): org.kiama.example.json.JSONTree.JNull
1484 ===> org.kiama.example.dataflow.Foreach.productIterator: Iterator[Any]
10164 ===> org.kiama.example.prolog.SymbolTable.Predicate.copy(argtypes: List[org.kiama.example.prolog.SymbolTable.Type]): org.kiama.example.prolog.SymbolTable.Predicate
10788 ===> org.kiama.example.transform.AST.Factor.productPrefix: String
1424 ===> org.kiama.example.dataflow.DataflowAST.If.unapply(x$0: org.kiama.example.dataflow.DataflowAST.If): Option[(org.kiama.example.dataflow.DataflowAST.Var, org.kiama.example.dataflow.DataflowAST.Stm, org.kiama.example.dataflow.DataflowAST.Stm)]
2252 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.copy$default$1: Boolean @scala.annotation.unchecked.uncheckedVariance
12431 ===> org.kiama.util.ParserUtilities.constToTupleFunction5[A, B, C, D, E, R](r: (A, B, C, D, E) => R): ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E] => R
7103 ===> org.kiama.example.oberon0.base.c.CVarDecl.copy(ident: String,tipe: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.base.c.CVarDecl
6959 ===> org.kiama.example.oberon0.L4.source.FieldExp.hashCode(): Int
12163 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2500 ===> org.kiama.example.iswim.compiler.Syntax.Apply.readResolve(): Object
5183 ===> org.kiama.example.oberon0.L0.NameAnalyser.isRvalue(r: org.kiama.example.oberon0.L0.source.IdnExp): Boolean
1020 ===> org.kiama.example.RISC.RISCISA.POP.canEqual(x$1: Any): Boolean
8640 ===> org.kiama.example.obr.RISCTree.Indexed.base: org.kiama.example.obr.RISCTree.Local
7445 ===> org.kiama.example.obr.ObrTree.ObrInt.<init>(): org.kiama.example.obr.ObrTree.ObrInt.type
35 ===> org.kiama.attribution.AttributionBase.Attribute.reportCycle(t: T): U
2912 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.copy(): org.kiama.example.iswim.secd.ConversionOps.ToBoolean
4359 ===> org.kiama.example.json.JSONTree.JNull.apply(): org.kiama.example.json.JSONTree.JNull
10354 ===> org.kiama.example.til.AST.Stat.<init>(): org.kiama.example.til.AST.Stat
3912 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.<init>(): org.kiama.example.iswim.secd.SECDBase.MalformedInstruction
4195 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.<init>(): StringOps.this.UserExceptionValue.type
10887 ===> org.kiama.machine.Machine.ParamState.psname: String
12573 ===> org.kiama.util.ParserUtilitiesTests.Tup6.toString(): String
10445 ===> org.kiama.example.til.AST.While.<init>(): org.kiama.example.til.AST.While.type
5303 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.hashCode(): Int
2785 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.hashCode(): Int
4901 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4073 ===> org.kiama.example.iswim.secd.StackOps.Pop.n: Int
2358 ===> org.kiama.example.iswim.compiler.Syntax.Let.body: org.kiama.example.iswim.compiler.Syntax.Expr
11870 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3205 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.productIterator: Iterator[Any]
3146 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.readResolve(): Object
6410 ===> org.kiama.example.oberon0.L2.source.PrettyPrinter.condsToDoc(conds: List[org.kiama.example.oberon0.L2.source.Condition]): PrettyPrinter.this.Doc
956 ===> org.kiama.example.RISC.RISCISA.XORI.productIterator: Iterator[Any]
11317 ===> org.kiama.rewriting.PositionalRewriter.<init>(): org.kiama.rewriting.PositionalRewriter.type
3885 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productPrefix: String
8263 ===> org.kiama.example.obr.RISCTree.LabelDef.productPrefix: String
6806 ===> org.kiama.example.oberon0.L4.SymbolTable.hasField(t: SymbolTable.this.Type,f: String): Boolean
1913 ===> org.kiama.example.imperative.PrettyPrinter.show(t: org.kiama.example.imperative.AST.ImperativeNode): org.kiama.example.imperative.PrettyPrinter.Doc
2902 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.canEqual(x$1: Any): Boolean
7222 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.apply(): org.kiama.example.oberon0.base.c.CEmptyStmt
11674 ===> org.kiama.rewriting.Rewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[Rewriter.this.Term,Option[Rewriter.this.Term]] with Serializable
6543 ===> org.kiama.example.oberon0.L3.c.CAddrType.<init>(basetype: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.L3.c.CAddrType
8377 ===> org.kiama.example.obr.RISCTree.Cond.equals(x$1: Any): Boolean
800 ===> org.kiama.example.RISC.RISCISA.CMP.readResolve(): Object
8858 ===> org.kiama.example.obr.SPARCTree.Write.<init>(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Write
9362 ===> org.kiama.example.obr.SymbolTable.RecordTypes.<init>(): org.kiama.example.obr.SymbolTable.RecordTypes
9020 ===> org.kiama.example.obr.SPARCTree.IntDatum.toString(): String
11848 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7202 ===> org.kiama.example.oberon0.base.c.CArrayType.toString(): String
2110 ===> org.kiama.example.iswim.compiler.Syntax.Divide.equals(x$1: Any): Boolean
6832 ===> org.kiama.example.oberon0.L4.c.CRecordType.readResolve(): Object
2330 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.hashCode(): Int
8660 ===> org.kiama.example.obr.RISCTree.Label.<init>(num: Int): org.kiama.example.obr.RISCTree.Label
7441 ===> org.kiama.example.obr.ObrTree.ObrInt.canEqual(x$1: Any): Boolean
5313 ===> org.kiama.example.oberon0.L0.SymbolTable.isModule(e: SymbolTable.this.Entity): Boolean
4527 ===> org.kiama.example.lambda2.AST.Num.readResolve(): Object
9658 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.copy$default$3: org.kiama.example.picojava.AbstractSyntax.Block @scala.annotation.unchecked.uncheckedVariance
12323 ===> org.kiama.util.Environments.MultipleEntity.<init>(): Environments.this.MultipleEntity
7148 ===> org.kiama.example.oberon0.base.c.CBlock.productElement(x$1: Int): Any
3128 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.toString(): String
6901 ===> org.kiama.example.oberon0.L4.source.IndexExp.productElement(x$1: Int): Any
2106 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productIterator: Iterator[Any]
8744 ===> org.kiama.example.obr.SPARCTree.Beq.canEqual(x$1: Any): Boolean
10667 ===> org.kiama.example.til.AST.Eq.toString(): String
9489 ===> org.kiama.example.oneohonecompanies.Company.Company.equals(x$1: Any): Boolean
3238 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.toString(): String
2881 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.<init>(): org.kiama.example.iswim.secd.ConversionOps.ToString
5667 ===> org.kiama.example.oberon0.L0.c.CNegExp.copy(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNegExp
12427 ===> org.kiama.util.ParserUtilities.parseResultToTuple6[A, B, C, D, E, F](p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E],F]]): ParserUtilities.this.PackratParser[(A, B, C, D, E, F)]
12605 ===> org.kiama.util.ParsingREPLBase.$init$(): Unit
6199 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.productArity: Int
9663 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.canEqual(x$1: Any): Boolean
11840 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5165 ===> org.kiama.example.lambda3.LambdaTests.mkprinttest(s: String,r: String): Unit
2843 ===> org.kiama.example.iswim.secd.BooleanOps.$init$(): Unit
10575 ===> org.kiama.example.til.AST.Str.readResolve(): Object
2693 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.<init>(): org.kiama.example.iswim.compiler.Syntax.MkRef.type
5679 ===> org.kiama.example.oberon0.L0.c.CNegExp.apply(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNegExp
12093 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11438 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
3598 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.readResolve(): Object
5202 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.decl: org.kiama.example.oberon0.base.source.ModuleDecl
3883 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.message: String
3992 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.canEqual(x$1: Any): Boolean
11369 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.unapply(x$0: org.kiama.rewriting.SupportPositionalRewriterTests.One): Option[org.kiama.rewriting.SupportPositionalRewriterTests.Node]
8024 ===> org.kiama.example.obr.ObrTree.NegExp.productPrefix: String
5529 ===> org.kiama.example.oberon0.L0.c.CAddExp.productArity: Int
2792 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.readResolve(): Object
6934 ===> org.kiama.example.oberon0.L4.source.FieldList.copy$default$2: org.kiama.example.oberon0.L0.source.TypeDef @scala.annotation.unchecked.uncheckedVariance
10631 ===> org.kiama.example.til.AST.Add.unapply(x$0: org.kiama.example.til.AST.Add): Option[(org.kiama.example.til.AST.Exp, org.kiama.example.til.AST.Exp)]
236 ===> org.kiama.attribution.AttributionTests.SetTree.productArity: Int
10323 ===> org.kiama.example.repmin.RepminDec.globmin: org.kiama.example.repmin.Tree => Int
12067 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4555 ===> org.kiama.example.lambda2.AST.Lam.productElement(x$1: Int): Any
2277 ===> org.kiama.example.iswim.compiler.Syntax.Not.equals(x$1: Any): Boolean
828 ===> org.kiama.example.RISC.RISCISA.CHKI.productArity: Int
9808 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.productPrefix: String
7752 ===> org.kiama.example.obr.ObrTree.RaiseStmt.canEqual(x$1: Any): Boolean
8056 ===> org.kiama.example.obr.ObrTree.NotExp.exp: org.kiama.example.obr.ObrTree.Expression
9014 ===> org.kiama.example.obr.SPARCTree.IntDatum.productPrefix: String
7759 ===> org.kiama.example.obr.ObrTree.RaiseStmt.unapply(x$0: org.kiama.example.obr.ObrTree.RaiseStmt): Option[org.kiama.example.obr.ObrTree.Identifier]
2720 ===> org.kiama.example.iswim.compiler.Syntax.Assign.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
5638 ===> org.kiama.example.oberon0.L0.c.CModExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CModExp
3411 ===> org.kiama.example.iswim.secd.RecordOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
10495 ===> org.kiama.example.til.AST.Write.productArity: Int
3830 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.hashCode(): Int
9837 ===> org.kiama.example.picojava.NameResolution.remoteLookup: String => (org.kiama.example.picojava.AbstractSyntax.TypeDecl => org.kiama.example.picojava.AbstractSyntax.Decl)
11751 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5047 ===> org.kiama.example.lambda3.AST.EquivQuery.hashCode(): Int
6786 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.toString(): String
11979 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7572 ===> org.kiama.example.obr.ObrTree.EnumConst.toString(): String
9966 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productIterator: Iterator[Any]
9916 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.<init>(): org.kiama.example.prolog.Interpreter.DisplayGoal.type
11545 ===> org.kiama.rewriting.Rewriter.rulefs(f: org.kiama.==>[Rewriter.this.Term,Rewriter.this.Strategy]): Rewriter.this.Strategy
3644 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.me: org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue
12272 ===> org.kiama.util.CompilerTests.process(ast: Any,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
9279 ===> org.kiama.example.obr.SymbolTable.Multiple.productIterator: Iterator[Any]
5273 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.readResolve(): Object
888 ===> org.kiama.example.RISC.RISCISA.OR.toString(): String
11116 ===> org.kiama.output.PrettyPrinter.Doc.apply(iw: (PrettyPrinter.this.Indent, PrettyPrinter.this.Width)): ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout) => ((PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout)
5619 ===> org.kiama.example.oberon0.L0.c.CDivExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CDivExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
9436 ===> org.kiama.example.obr.SymbolTable.UnknownType.hashCode(): Int
9347 ===> org.kiama.example.obr.SymbolTable.RecordType.toString(): String
6677 ===> org.kiama.example.oberon0.L3.source.ValMode.copy(): org.kiama.example.oberon0.L3.source.ValMode
10529 ===> org.kiama.example.til.AST.Var.productPrefix: String
685 ===> org.kiama.example.RISC.RISCISA.MULI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
12062 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11385 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.Two.type
5928 ===> org.kiama.example.oberon0.L0.source.GeExp.productIterator: Iterator[Any]
9138 ===> org.kiama.example.obr.SPARCTree.Local.copy(offset: Int): org.kiama.example.obr.SPARCTree.Local
2394 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.readResolve(): Object
8361 ===> org.kiama.example.obr.RISCTree.AddW.readResolve(): Object
2617 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.canEqual(x$1: Any): Boolean
12356 ===> org.kiama.util.Environments.define(env: Environments.this.Environment,i: String,e: Environments.this.Entity): Environments.this.Environment
524 ===> org.kiama.example.RISC.RISCISA.MOVI.equals(x$1: Any): Boolean
8679 ===> org.kiama.example.obr.RISCTree.reset(): Unit
847 ===> org.kiama.example.RISC.RISCISA.AND.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.AND
9949 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.hashCode(): Int
7887 ===> org.kiama.example.obr.ObrTree.FieldExp.toString(): String
7525 ===> org.kiama.example.obr.ObrTree.RecordVar.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
9073 ===> org.kiama.example.obr.SPARCTree.NegW.toString(): String
641 ===> org.kiama.example.RISC.RISCISA.SUBI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
11293 ===> org.kiama.rewriting.NominalAST.Bind.unapply(x$0: org.kiama.rewriting.NominalAST.Bind): Option[(org.kiama.rewriting.NominalAST.Name, Any)]
8949 ===> org.kiama.example.obr.SPARCTree.CmpneW.toString(): String
2757 ===> org.kiama.example.iswim.driver.PrettyPrinter.<init>(): org.kiama.example.iswim.driver.PrettyPrinter.type
12264 ===> org.kiama.util.CompilerBase.compile(args: Array[String],console: org.kiama.util.Console): String
5820 ===> org.kiama.example.oberon0.L0.source.RelationalExpression.op: String
3977 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.copy$default$1: SECDBase.this.Stack @scala.annotation.unchecked.uncheckedVariance
6236 ===> org.kiama.example.oberon0.L1.source.IfStatement.<init>(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block,elsifs: List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)],optelse: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.L1.source.IfStatement
681 ===> org.kiama.example.RISC.RISCISA.MULI.toString(): String
7351 ===> org.kiama.example.oberon0.base.source.IdnUse.canEqual(x$1: Any): Boolean
9695 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.copy(Variable: org.kiama.example.picojava.AbstractSyntax.Access,Value: org.kiama.example.picojava.AbstractSyntax.Exp): org.kiama.example.picojava.AbstractSyntax.AssignStmt
617 ===> org.kiama.example.RISC.RISCISA.SUB.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
2307 ===> org.kiama.example.iswim.compiler.Syntax.Or.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
9776 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productElement(x$1: Int): Any
12237 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1394 ===> org.kiama.example.dataflow.DataflowAST.While.productElement(x$1: Int): Any
6157 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.declsToDoc(ds: List[org.kiama.example.oberon0.base.source.Declaration]): PrettyPrinter.this.Doc
12360 ===> org.kiama.util.Environments.isDefinedInInner(env: Environments.this.Environment,i: String): Boolean
8547 ===> org.kiama.example.obr.RISCTree.NegW.readResolve(): Object
3822 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.<init>(): org.kiama.example.iswim.secd.SECDBase.UnboundVariable
10749 ===> org.kiama.example.transform.AST.VarDecl.productPrefix: String
7384 ===> org.kiama.example.oberon0.drivers.A2b.<init>(): org.kiama.example.oberon0.drivers.A2b.type
5225 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productPrefix: String
1481 ===> org.kiama.example.dataflow.Foreach.productPrefix: String
7465 ===> org.kiama.example.obr.ObrTree.IntVar.apply(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IntVar
3504 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.copy(): org.kiama.example.iswim.secd.SECDBase.TailApp
4848 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.example.lambda2.AST.Bind): Boolean
2141 ===> org.kiama.example.iswim.compiler.Syntax.Equal.productPrefix: String
724 ===> org.kiama.example.RISC.RISCISA.DIVI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.DIVI
6470 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productElement(x$1: Int): Any
6612 ===> org.kiama.example.oberon0.L3.c.CAddrExp.unapply(x$0: org.kiama.example.oberon0.L3.c.CAddrExp): Option[org.kiama.example.oberon0.base.c.CExpression]
4746 ===> org.kiama.example.lambda2.AST.SubOp.<init>(): org.kiama.example.lambda2.AST.SubOp.type
952 ===> org.kiama.example.RISC.RISCISA.XORI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
4792 ===> org.kiama.example.lambda2.Evaluator.FreshVar.count: Int
2540 ===> org.kiama.example.iswim.compiler.Syntax.While.readResolve(): Object
1603 ===> org.kiama.example.imperative.AST.Var.canEqual(x$1: Any): Boolean
6284 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4545 ===> org.kiama.example.lambda2.AST.Lam.i: org.kiama.example.lambda2.AST.Idn
9366 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productPrefix: String
8766 ===> org.kiama.example.obr.SPARCTree.Bne.equals(x$1: Any): Boolean
3152 ===> org.kiama.example.iswim.secd.IntegerOps.<init>(): org.kiama.example.iswim.secd.IntegerOps.type
6997 ===> org.kiama.example.oberon0.base.Driver.helpFlag_$eq(x$1: Boolean): Unit
5008 ===> org.kiama.example.lambda3.AST.App.canEqual(x$1: Any): Boolean
11859 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12022 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4821 ===> org.kiama.example.lambda2.LambdaTests.<init>(): org.kiama.example.lambda2.LambdaTests
607 ===> org.kiama.example.RISC.RISCISA.ADDI.hashCode(): Int
10566 ===> org.kiama.example.til.AST.Str.productElement(x$1: Int): Any
1694 ===> org.kiama.example.imperative.AST.Mul.<init>(): org.kiama.example.imperative.AST.Mul.type
10919 ===> org.kiama.machine.Machine.<init>(): org.kiama.machine.Machine.type
7350 ===> org.kiama.example.oberon0.base.source.IdnUse.productIterator: Iterator[Any]
3080 ===> org.kiama.example.iswim.secd.IOOps.<init>(): org.kiama.example.iswim.secd.IOOps.type
1290 ===> org.kiama.example.RISC.RISCISA.BSR.unapply(x$0: org.kiama.example.RISC.RISCISA.BSR): Option[Int]
5696 ===> org.kiama.example.oberon0.L0.c.CNotExp.<init>(): org.kiama.example.oberon0.L0.c.CNotExp.type
8562 ===> org.kiama.example.obr.RISCTree.Not.apply(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Not
6474 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.equals(x$1: Any): Boolean
6629 ===> org.kiama.example.oberon0.L3.c.CDerefExp.toString(): String
2635 ===> org.kiama.example.iswim.compiler.Syntax.Match.productIterator: Iterator[Any]
8155 ===> org.kiama.example.obr.RISCEncoder.getassem: org.kiama.example.RISC.RISCISA.AssemCode
12553 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n4: ParserUtilitiesTests.this.Node
5993 ===> org.kiama.example.oberon0.L0.source.OrExp.equals(x$1: Any): Boolean
4614 ===> org.kiama.example.lambda2.AST.Let.copy$default$3: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
3289 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.<init>(): IntegerOps.this.IntValue.type
6785 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.<init>(ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.Field
11024 ===> org.kiama.output.PrettyPrinterBase.PrettyPrintable.toDoc: PrettyPrinterBase.this.Doc
8769 ===> org.kiama.example.obr.SPARCTree.Bne.apply(cond: org.kiama.example.obr.SPARCTree.Datum,dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Bne
12275 ===> org.kiama.util.TestCompiler.sanitise(s: String): String
2402 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productIterator: Iterator[Any]
8419 ===> org.kiama.example.obr.RISCTree.CmpneW.unapply(x$0: org.kiama.example.obr.RISCTree.CmpneW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
9120 ===> org.kiama.example.obr.SPARCTree.SubW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
5413 ===> org.kiama.example.oberon0.L0.c.CEqExp.hashCode(): Int
5721 ===> org.kiama.example.oberon0.L0.c.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
7867 ===> org.kiama.example.obr.ObrTree.EqualExp.<init>(): org.kiama.example.obr.ObrTree.EqualExp.type
9963 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productPrefix: String
7922 ===> org.kiama.example.obr.ObrTree.IdnExp.<init>(): org.kiama.example.obr.ObrTree.IdnExp.type
263 ===> org.kiama.attribution.AttributionTests.GenSeqTree.unapply(x$0: AttributionTests.this.GenSeqTree): Option[scala.collection.GenSeq[AttributionTests.this.Tree]]
3268 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.hashCode(): Int
854 ===> org.kiama.example.RISC.RISCISA.AND.equals(x$1: Any): Boolean
932 ===> org.kiama.example.RISC.RISCISA.XOR.productPrefix: String
5979 ===> org.kiama.example.oberon0.L0.source.SubExp.readResolve(): Object
1928 ===> org.kiama.example.iswim.compiler.Parser.Pos.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
2428 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.readResolve(): Object
862 ===> org.kiama.example.RISC.RISCISA.ANDI.im: org.kiama.example.RISC.RISCISA.Imm
7179 ===> org.kiama.example.oberon0.base.c.CStrType.productElement(x$1: Int): Any
5749 ===> org.kiama.example.oberon0.L0.source.VarDecl.productElement(x$1: Int): Any
4677 ===> org.kiama.example.lambda2.AST.IntType.equals(x$1: Any): Boolean
6992 ===> org.kiama.example.oberon0.base.CCodeGenerator.translate(s: org.kiama.example.oberon0.base.source.Statement): org.kiama.example.oberon0.base.c.CStatement
8996 ===> org.kiama.example.obr.SPARCTree.DivW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
12630 ===> org.kiama.util.RegexParserTests.assertParseError$default$6[T]: Boolean @scala.annotation.unchecked.uncheckedVariance
11408 ===> org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition.lineContents: String
8216 ===> org.kiama.example.obr.RISCTree.Beq.toString(): String
5997 ===> org.kiama.example.oberon0.L0.source.OrExp.unapply(x$0: org.kiama.example.oberon0.L0.source.OrExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
6594 ===> org.kiama.example.oberon0.L3.c.CStrExp.readResolve(): Object
8591 ===> org.kiama.example.obr.RISCTree.SubW.productArity: Int
5910 ===> org.kiama.example.oberon0.L0.source.GtExp.canEqual(x$1: Any): Boolean
7239 ===> org.kiama.example.oberon0.base.c.CReturn.apply(e: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.base.c.CReturn
7296 ===> org.kiama.example.oberon0.base.source.Block.productPrefix: String
3803 ===> org.kiama.example.iswim.secd.SECDBase.PrimTypeValue.copy(): org.kiama.example.iswim.secd.SECDBase.PrimTypeValue
11822 ===> org.kiama.rewriting.RewriterTests.travtest$default$7: RewriterTests.this.Expecting @scala.annotation.unchecked.uncheckedVariance
268 ===> org.kiama.attribution.AttributionTests.MapTree.copy$default$1: Map[AttributionTests.this.Tree,AttributionTests.this.Tree] @scala.annotation.unchecked.uncheckedVariance
4413 ===> org.kiama.example.lambda.AST.Var.productElement(x$1: Int): Any
4471 ===> org.kiama.example.lambda.AST.Sub.productElement(x$1: Int): Any
9705 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.equals(x$1: Any): Boolean
8759 ===> org.kiama.example.obr.SPARCTree.Bne.productPrefix: String
10775 ===> org.kiama.example.transform.AST.BinExpR.canEqual(x$1: Any): Boolean
10003 ===> org.kiama.example.prolog.PrologTree.Program.productPrefix: String
509 ===> org.kiama.example.RISC.RISCISA.MOVI.a: org.kiama.example.RISC.RISCISA.RegNo
9275 ===> org.kiama.example.obr.SymbolTable.Multiple.copy(): org.kiama.example.obr.SymbolTable.Multiple
10172 ===> org.kiama.example.prolog.SymbolTable.Predicate.toString(): String
3230 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.<init>(): org.kiama.example.iswim.secd.IntegerOps.Rem
9616 ===> org.kiama.example.picojava.AbstractSyntax.Program.copy$default$1: org.kiama.example.picojava.AbstractSyntax.Block @scala.annotation.unchecked.uncheckedVariance
3423 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.<init>(bdy: List[org.kiama.example.iswim.secd.SECDBase.ByteCodeBase]): org.kiama.example.iswim.secd.SECDBase.CodeTree
9967 ===> org.kiama.example.prolog.Interpreter.MatchGoal.canEqual(x$1: Any): Boolean
6045 ===> org.kiama.example.oberon0.L0.source.ModExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
2175 ===> org.kiama.example.iswim.compiler.Syntax.Less.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Less
5226 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productArity: Int
11868 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6986 ===> org.kiama.example.oberon0.L4.source.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
5818 ===> org.kiama.example.oberon0.L0.source.BinaryExpression.left: org.kiama.example.oberon0.L0.source.Expression
60 ===> org.kiama.attribution.AttributionBase.$anon.<init>(): AttributionBase.this.ConstantAttribute[T,U]{}
123 ===> org.kiama.attribution.UncachedAttribution.UncachedParamAttribute.visited: java.util.IdentityHashMap[UncachedAttribution.this.ParamAttributeKey,Unit]
9271 ===> org.kiama.example.obr.SymbolTable.Unknown.apply(): org.kiama.example.obr.SymbolTable.Unknown
3190 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productIterator: Iterator[Any]
1432 ===> org.kiama.example.dataflow.DataflowAST.Block.productElement(x$1: Int): Any
7734 ===> org.kiama.example.obr.ObrTree.WhileStmt.productIterator: Iterator[Any]
11986 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2416 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productPrefix: String
3974 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.s: SECDBase.this.Stack
5447 ===> org.kiama.example.oberon0.L0.c.CLtExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
5670 ===> org.kiama.example.oberon0.L0.c.CNegExp.productArity: Int
3107 ===> org.kiama.example.iswim.secd.IOOps.Read.toString(): String
9205 ===> org.kiama.example.obr.SemanticAnalysis.tipe: org.kiama.example.obr.ObrTree.Expression => org.kiama.example.obr.SymbolTable.Type
6833 ===> org.kiama.example.oberon0.L4.c.CIndexExp.array: org.kiama.example.oberon0.base.c.CExpression
1866 ===> org.kiama.example.imperative.ASTNonCase.Mul.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Mul
10569 ===> org.kiama.example.til.AST.Str.hashCode(): Int
7192 ===> org.kiama.example.oberon0.base.c.CArrayType.<init>(size: Int,elemtype: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.base.c.CArrayType
8838 ===> org.kiama.example.obr.SPARCTree.StW.mem: org.kiama.example.obr.SPARCTree.Address
1213 ===> org.kiama.example.RISC.RISCISA.BGE.<init>(label: Int): org.kiama.example.RISC.RISCISA.BGE
10672 ===> org.kiama.example.til.AST.Ne.r: org.kiama.example.til.AST.Exp
10704 ===> org.kiama.example.til.TIL2_1Tests.x: org.kiama.example.til.AST.Id
6247 ===> org.kiama.example.oberon0.L1.source.IfStatement.hashCode(): Int
2082 ===> org.kiama.example.iswim.compiler.Syntax.Times.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
6402 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.unapply(x$0: org.kiama.example.oberon0.L2.source.MinMaxCond): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
9164 ===> org.kiama.example.obr.SPARCTree.Indexed.hashCode(): Int
10533 ===> org.kiama.example.til.AST.Var.canEqual(x$1: Any): Boolean
3890 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.hashCode(): Int
119 ===> org.kiama.attribution.UncachedAttribution.UncachedAttribute.visited: java.util.IdentityHashMap[T,Unit]
11102 ===> org.kiama.output.PrettyPrinterBase.semi: PrettyPrinterBase.this.Doc
3466 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.toString(): String
1586 ===> org.kiama.example.imperative.AST.Num.<init>(): org.kiama.example.imperative.AST.Num.type
9082 ===> org.kiama.example.obr.SPARCTree.Not.copy(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Not
9498 ===> org.kiama.example.oneohonecompanies.Company.Dept.<init>(n: org.kiama.example.oneohonecompanies.Company.Name,m: org.kiama.example.oneohonecompanies.Company.Manager,su: List[org.kiama.example.oneohonecompanies.Company.SubUnit]): org.kiama.example.oneohonecompanies.Company.Dept
310 ===> org.kiama.attribution.AttributionTests.TripleTree.equals(x$1: Any): Boolean
6926 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.apply(fields: List[org.kiama.example.oberon0.L4.source.FieldList]): org.kiama.example.oberon0.L4.source.RecordTypeDef
9355 ===> org.kiama.example.obr.SymbolTable.RecordType.hashCode(): Int
8089 ===> org.kiama.example.obr.ObrTree.OrExp.apply(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.OrExp
1276 ===> org.kiama.example.RISC.RISCISA.BSR.label: Int
1155 ===> org.kiama.example.RISC.RISCISA.WRL.unapply(x$0: org.kiama.example.RISC.RISCISA.WRL): Boolean
2634 ===> org.kiama.example.iswim.compiler.Syntax.Match.productElement(x$1: Int): Any
1570 ===> org.kiama.example.imperative.AST.Exp.depth: Int
5067 ===> org.kiama.example.lambda3.AST.EvalQuery.equals(x$1: Any): Boolean
9183 ===> org.kiama.example.obr.SPARCTree.Label.equals(x$1: Any): Boolean
1456 ===> org.kiama.example.dataflow.DataflowAST.Return.toString(): String
5375 ===> org.kiama.example.oberon0.L0.c.CTypeDef.toString(): String
616 ===> org.kiama.example.RISC.RISCISA.SUB.c: org.kiama.example.RISC.RISCISA.RegNo
2223 ===> org.kiama.example.iswim.compiler.Syntax.Greater.toString(): String
9928 ===> org.kiama.example.prolog.Interpreter.TermGoal.productIterator: Iterator[Any]
11109 ===> org.kiama.output.PrettyPrinterBase.forwslash: PrettyPrinterBase.this.Doc
3849 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.apply(): org.kiama.example.iswim.secd.SECDBase.StackUnderflow
8958 ===> org.kiama.example.obr.SPARCTree.CmpgtW.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
3622 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.toString(): String
5461 ===> org.kiama.example.oberon0.L0.c.CLeExp.left: org.kiama.example.oberon0.base.c.CExpression
10705 ===> org.kiama.example.til.TIL2_1Tests.y: org.kiama.example.til.AST.Id
2426 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.apply(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetRecStmt
4098 ===> org.kiama.example.iswim.secd.StackOps.Dup.canEqual(x$1: Any): Boolean
3431 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.toString(): String
6969 ===> org.kiama.example.oberon0.L4.source.FieldIdn.copy(ident: String): org.kiama.example.oberon0.L4.source.FieldIdn
9088 ===> org.kiama.example.obr.SPARCTree.Not.canEqual(x$1: Any): Boolean
4702 ===> org.kiama.example.lambda2.AST.NoType.<init>(): org.kiama.example.lambda2.AST.NoType
8888 ===> org.kiama.example.obr.SPARCTree.AddW.equals(x$1: Any): Boolean
4635 ===> org.kiama.example.lambda2.AST.Letp.productPrefix: String
9496 ===> org.kiama.example.oneohonecompanies.Company.Dept.m: org.kiama.example.oneohonecompanies.Company.Manager
10208 ===> org.kiama.example.prolog.SymbolTable.AtomType.toString(): String
256 ===> org.kiama.attribution.AttributionTests.GenSeqTree.canEqual(x$1: Any): Boolean
6330 ===> org.kiama.example.oberon0.L2.source.CaseStatement.<init>(exp: org.kiama.example.oberon0.L0.source.Expression,cases: List[org.kiama.example.oberon0.L2.source.Case],optelse: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.L2.source.CaseStatement
2482 ===> org.kiama.example.iswim.compiler.Syntax.Apply.f: org.kiama.example.iswim.compiler.Syntax.Expr
5565 ===> org.kiama.example.oberon0.L0.c.COrExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.COrExp
1377 ===> org.kiama.example.dataflow.DataflowAST.Assign.canEqual(x$1: Any): Boolean
8166 ===> org.kiama.example.obr.RISCEncoder.arith(op: (org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo) => org.kiama.example.RISC.RISCISA.Instr,l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum,d: org.kiama.example.obr.RISCTree.Datum): Unit
11732 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10675 ===> org.kiama.example.til.AST.Ne.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
7229 ===> org.kiama.example.oberon0.base.c.CReturn.productPrefix: String
5221 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.<init>(ident: String,decl: org.kiama.example.oberon0.L0.source.ConstDecl): SymbolTable.this.Constant
33 ===> org.kiama.attribution.AttributionBase.Attribute.<init>(): AttributionBase.this.Attribute[T,U]
6331 ===> org.kiama.example.oberon0.L2.source.CaseStatement.copy(exp: org.kiama.example.oberon0.L0.source.Expression,cases: List[org.kiama.example.oberon0.L2.source.Case],optelse: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.L2.source.CaseStatement
4806 ===> org.kiama.example.lambda2.Evaluators.setEvaluator(mech: String): Boolean
4142 ===> org.kiama.example.iswim.secd.StringOps.PushString.toString(): String
11631 ===> org.kiama.rewriting.Rewriter.repeat(s: => Rewriter.this.Strategy,n: Int): Rewriter.this.Strategy
6500 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.unapply(x$0: SymbolTable.this.ParamInfo): Option[(org.kiama.example.oberon0.L3.source.Mode, String, SymbolTable.this.Type)]
9002 ===> org.kiama.example.obr.SPARCTree.DivW.hashCode(): Int
3101 ===> org.kiama.example.iswim.secd.IOOps.Read.productIterator: Iterator[Any]
12041 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2343 ===> org.kiama.example.iswim.compiler.Syntax.Binding.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
9188 ===> org.kiama.example.obr.SPARCTree.Label.readResolve(): Object
7479 ===> org.kiama.example.obr.ObrTree.IntParam.equals(x$1: Any): Boolean
10189 ===> org.kiama.example.prolog.SymbolTable.Variable.toString(): String
9046 ===> org.kiama.example.obr.SPARCTree.MulW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.MulW
5007 ===> org.kiama.example.lambda3.AST.App.productIterator: Iterator[Any]
9617 ===> org.kiama.example.picojava.AbstractSyntax.Program.productPrefix: String
2203 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.hashCode(): Int
3776 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productElement(x$1: Int): Any
742 ===> org.kiama.example.RISC.RISCISA.MOD.c: org.kiama.example.RISC.RISCISA.RegNo
10070 ===> org.kiama.example.prolog.PrologTree.Var.toString(): String
11953 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3625 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.toString(): String
9418 ===> org.kiama.example.obr.SymbolTable.ExnType.productElement(x$1: Int): Any
11748 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2836 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.toString(): String
8510 ===> org.kiama.example.obr.RISCTree.LdW.unapply(x$0: org.kiama.example.obr.RISCTree.LdW): Option[org.kiama.example.obr.RISCTree.Address]
7047 ===> org.kiama.example.oberon0.base.TestDriver.processline(line: String,p: Int,q: Int,r: Int): Unit
6249 ===> org.kiama.example.oberon0.L1.source.IfStatement.equals(x$1: Any): Boolean
11237 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.<init>(): ParenPrettyPrinterTests.this.Leaf.type
467 ===> org.kiama.example.RISC.RISC.debug: Boolean
5260 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
1326 ===> org.kiama.example.RISC.RISCISA.Target.readResolve(): Object
10310 ===> org.kiama.example.repmin.Leaf.unapply(x$0: org.kiama.example.repmin.Leaf): Option[Int]
939 ===> org.kiama.example.RISC.RISCISA.XOR.<init>(): org.kiama.example.RISC.RISCISA.XOR.type
6091 ===> org.kiama.example.oberon0.L0.source.NegExp.productIterator: Iterator[Any]
2271 ===> org.kiama.example.iswim.compiler.Syntax.Not.productArity: Int
510 ===> org.kiama.example.RISC.RISCISA.MOVI.b: org.kiama.example.RISC.RISCISA.RegNo
12125 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11147 ===> org.kiama.output.PrettyPrinterTests.Val.unapply(x$0: PrettyPrinterTests.this.Val): Option[Int]
6902 ===> org.kiama.example.oberon0.L4.source.IndexExp.productIterator: Iterator[Any]
138 ===> org.kiama.attribution.UncachedAttribution.childAttr[T <: org.kiama.attribution.Attributable, U](optNameDef: Option[String])(f: T => (org.kiama.attribution.Attributable => U)): UncachedAttribution.this.UncachedAttribute[T,U]
2085 ===> org.kiama.example.iswim.compiler.Syntax.Times.productArity: Int
4418 ===> org.kiama.example.lambda.AST.Var.<init>(): org.kiama.example.lambda.AST.Var.type
1388 ===> org.kiama.example.dataflow.DataflowAST.While.<init>(cond: org.kiama.example.dataflow.DataflowAST.Var,body: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.While
10905 ===> org.kiama.machine.Machine.ParamUpdate.perform: Unit
5187 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.applyOrElse[A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: NameAnalyser.this.Environment](x$1: A1,default: A1 => B1): B1
5179 ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2355 ===> org.kiama.example.iswim.compiler.Syntax.Binding.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Binding): Option[(org.kiama.example.iswim.compiler.Syntax.Variable, org.kiama.example.iswim.compiler.Syntax.Expr)]
10341 ===> org.kiama.example.til.AST.Program.productPrefix: String
302 ===> org.kiama.attribution.AttributionTests.TripleTree.copy$default$1: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree) @scala.annotation.unchecked.uncheckedVariance
1235 ===> org.kiama.example.RISC.RISCISA.BLE.productIterator: Iterator[Any]
7748 ===> org.kiama.example.obr.ObrTree.RaiseStmt.productPrefix: String
6066 ===> org.kiama.example.oberon0.L0.source.AndExp.productPrefix: String
912 ===> org.kiama.example.RISC.RISCISA.ORI.productArity: Int
9693 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.Value: org.kiama.example.picojava.AbstractSyntax.Exp
3571 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.productPrefix: String
12438 ===> org.kiama.util.WhitespaceParser.parsingWhitespace: Boolean
12151 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5863 ===> org.kiama.example.oberon0.L0.source.LtExp.right: org.kiama.example.oberon0.L0.source.Expression
11141 ===> org.kiama.output.PrettyPrinterTests.Val.hashCode(): Int
12621 ===> org.kiama.util.Tests.expectnotsame(expected: Any)(actual: Any): Unit
4236 ===> org.kiama.example.json.JSONTree.JObject.productPrefix: String
6775 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.canEqual(x$1: Any): Boolean
2767 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productElement(x$1: Int): Any
9367 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productArity: Int
6179 ===> org.kiama.example.oberon0.L1.c.CIfStatement.productElement(x$1: Int): Any
2137 ===> org.kiama.example.iswim.compiler.Syntax.Equal.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Equal
6835 ===> org.kiama.example.oberon0.L4.c.CIndexExp.<init>(array: org.kiama.example.oberon0.base.c.CExpression,index: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L4.c.CIndexExp
8813 ===> org.kiama.example.obr.SPARCTree.Read.productIterator: Iterator[Any]
3381 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.productElement(x$1: Int): Any
1521 ===> org.kiama.example.dataflow.For.toString(): String
8292 ===> org.kiama.example.obr.RISCTree.StW.d: org.kiama.example.obr.RISCTree.Datum
9902 ===> org.kiama.example.picojava.tests.ParserTests.<init>(): org.kiama.example.picojava.tests.ParserTests
7244 ===> org.kiama.example.oberon0.base.c.CIntExp.<init>(v: Int): org.kiama.example.oberon0.base.c.CIntExp
11570 ===> org.kiama.rewriting.Rewriter.$anonfun.applyOrElse[A1 <: Rewriter.this.Term, B1 >: Rewriter.this.Term](x$1: A1,default: A1 => B1): B1
5119 ===> org.kiama.example.lambda3.AST.SubstQuery.copy$default$3: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
4547 ===> org.kiama.example.lambda2.AST.Lam.e: org.kiama.example.lambda2.AST.Exp
1356 ===> org.kiama.example.dataflow.Liveness.out: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
11488 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.equals(x$1: Any): Boolean
4216 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
2560 ===> org.kiama.example.iswim.compiler.Syntax.Empty.productPrefix: String
7535 ===> org.kiama.example.obr.ObrTree.RecordVar.<init>(): org.kiama.example.obr.ObrTree.RecordVar.type
4042 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productPrefix: String
740 ===> org.kiama.example.RISC.RISCISA.MOD.a: org.kiama.example.RISC.RISCISA.RegNo
9061 ===> org.kiama.example.obr.SPARCTree.MulW.unapply(x$0: org.kiama.example.obr.SPARCTree.MulW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
6608 ===> org.kiama.example.oberon0.L3.c.CAddrExp.equals(x$1: Any): Boolean
8602 ===> org.kiama.example.obr.RISCTree.SubW.readResolve(): Object
9032 ===> org.kiama.example.obr.SPARCTree.LdW.productArity: Int
226 ===> org.kiama.attribution.AttributionTests.ListTree.<init>(): AttributionTests.this.ListTree.type
1907 ===> org.kiama.example.imperative.ImperativeGen.<init>(): org.kiama.example.imperative.ImperativeGen.type
6799 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.apply(ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.Field
887 ===> org.kiama.example.RISC.RISCISA.OR.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.OR
12615 ===> org.kiama.util.GeneratingREPLBase.process(t: T): Unit
9846 ===> org.kiama.example.picojava.TypeAnalysis.<init>(): org.kiama.example.picojava.TypeAnalysis.type
5794 ===> org.kiama.example.oberon0.L0.source.NamedType.apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L0.source.NamedType
5441 ===> org.kiama.example.oberon0.L0.c.CLtExp.left: org.kiama.example.oberon0.base.c.CExpression
15 ===> org.kiama.attribution.Attributable.index_$eq(x$1: Int): Unit
7481 ===> org.kiama.example.obr.ObrTree.IntParam.toString(): String
3147 ===> org.kiama.example.iswim.secd.IntComparisonOps.$init$(): Unit
7700 ===> org.kiama.example.obr.ObrTree.LoopStmt.hashCode(): Int
5304 ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue.equals(x$1: Any): Boolean
1360 ===> org.kiama.example.dataflow.LivenessImpl.ocount: Int
863 ===> org.kiama.example.RISC.RISCISA.ANDI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ANDI
4645 ===> org.kiama.example.lambda2.AST.Letp.apply(bs: List[org.kiama.example.lambda2.AST.Bind],e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Letp
5376 ===> org.kiama.example.oberon0.L0.c.CTypeDef.apply(decl: org.kiama.example.oberon0.base.c.CVarDecl): org.kiama.example.oberon0.L0.c.CTypeDef
976 ===> org.kiama.example.RISC.RISCISA.LDW.productElement(x$1: Int): Any
1746 ===> org.kiama.example.imperative.AST.Seqn.canEqual(x$1: Any): Boolean
4461 ===> org.kiama.example.lambda.AST.Sub.m: org.kiama.example.lambda.AST.Exp
2606 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.readResolve(): Object
3982 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.<init>(s: SECDBase.this.Stack,e: SECDBase.this.Environment,c: org.kiama.example.iswim.secd.SECDBase.Code,d: SECDBase.this.Dump): SECDBase.this.ContValue
5421 ===> org.kiama.example.oberon0.L0.c.CNeExp.left: org.kiama.example.oberon0.base.c.CExpression
9599 ===> org.kiama.example.oneohonecompanies.SampleCompany.klaus: org.kiama.example.oneohonecompanies.Company.Employee
3376 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.<init>(): org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds
2774 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.toString(): String
2805 ===> org.kiama.example.iswim.secd.BooleanOps.Test.hashCode(): Int
11602 ===> org.kiama.rewriting.Rewriter.$anon.someRewritable(r: org.kiama.rewriting.Rewritable): Option[Rewriter.this.Term]
1609 ===> org.kiama.example.imperative.AST.Var.unapply(x$0: org.kiama.example.imperative.AST.Var): Option[org.kiama.example.imperative.AST.Idn]
11294 ===> org.kiama.rewriting.NominalAST.Bind.readResolve(): Object
3659 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.PushMachineException): Option[org.kiama.example.iswim.secd.SECDBase.MachineExceptionValue]
11922 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5978 ===> org.kiama.example.oberon0.L0.source.SubExp.unapply(x$0: org.kiama.example.oberon0.L0.source.SubExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
7338 ===> org.kiama.example.oberon0.base.source.IdnDef.<init>(): org.kiama.example.oberon0.base.source.IdnDef.type
10171 ===> org.kiama.example.prolog.SymbolTable.Predicate.hashCode(): Int
3498 ===> org.kiama.example.iswim.secd.SECDBase.App.<init>(): org.kiama.example.iswim.secd.SECDBase.App.type
11554 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
4656 ===> org.kiama.example.lambda2.AST.Bind.productElement(x$1: Int): Any
6605 ===> org.kiama.example.oberon0.L3.c.CAddrExp.canEqual(x$1: Any): Boolean
8212 ===> org.kiama.example.obr.RISCTree.Beq.productElement(x$1: Int): Any
2064 ===> org.kiama.example.iswim.compiler.Syntax.Minus.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
2851 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productElement(x$1: Int): Any
6542 ===> org.kiama.example.oberon0.L3.c.CAddrType.basetype: org.kiama.example.oberon0.base.c.CType
4498 ===> org.kiama.example.lambda.Generator.genNum: org.scalacheck.Gen[org.kiama.example.lambda.AST.Num]
12128 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6743 ===> org.kiama.example.oberon0.L4.Parser.typedefDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.TypeDef]
12612 ===> org.kiama.util.GeneratingREPLBase.prompt: String
41 ===> org.kiama.attribution.AttributionBase.CircularAttribute.<init>(init: U,f: T => U): AttributionBase.this.CircularAttribute[T,U]
4092 ===> org.kiama.example.iswim.secd.StackOps.Dup.copy(n: Int): org.kiama.example.iswim.secd.StackOps.Dup
5502 ===> org.kiama.example.oberon0.L0.c.CGeExp.right: org.kiama.example.oberon0.base.c.CExpression
10492 ===> org.kiama.example.til.AST.Write.copy(e: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Write
305 ===> org.kiama.attribution.AttributionTests.TripleTree.productElement(x$1: Int): Any
2917 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.canEqual(x$1: Any): Boolean
514 ===> org.kiama.example.RISC.RISCISA.MOVI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MOVI
12534 ===> org.kiama.util.ParserUtilitiesTests.Tup5.copy$default$3: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
235 ===> org.kiama.attribution.AttributionTests.SetTree.productPrefix: String
3962 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productPrefix: String
10256 ===> org.kiama.example.prolog.SymbolTable.UnknownType.readResolve(): Object
3008 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.toString(): String
30 ===> org.kiama.attribution.Attributable.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7352 ===> org.kiama.example.oberon0.base.source.IdnUse.hashCode(): Int
3140 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.toString(): String
8993 ===> org.kiama.example.obr.SPARCTree.DivW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.DivW
2234 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
7435 ===> org.kiama.example.obr.ObrTree.ObrInt.copy$default$3: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
4185 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.toString(): String
5594 ===> org.kiama.example.oberon0.L0.c.CMulExp.toString(): String
11736 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2188 ===> org.kiama.example.iswim.compiler.Syntax.Less.toString(): String
8196 ===> org.kiama.example.obr.RISCTree.RISCProg.toString(): String
12539 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productElement(x$1: Int): Any
12014 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
242 ===> org.kiama.attribution.AttributionTests.SetTree.equals(x$1: Any): Boolean
5215 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.toString(): String
7096 ===> org.kiama.example.oberon0.base.c.CInclude.apply(s: String): org.kiama.example.oberon0.base.c.CInclude
6460 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.readResolve(): Object
7191 ===> org.kiama.example.oberon0.base.c.CArrayType.elemtype: org.kiama.example.oberon0.base.c.CType
6670 ===> org.kiama.example.oberon0.L3.source.VarMode.equals(x$1: Any): Boolean
10132 ===> org.kiama.example.prolog.PrologTree.Cut.productArity: Int
7738 ===> org.kiama.example.obr.ObrTree.WhileStmt.equals(x$1: Any): Boolean
644 ===> org.kiama.example.RISC.RISCISA.SUBI.productPrefix: String
7789 ===> org.kiama.example.obr.ObrTree.TryBody.hashCode(): Int
11437 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
4315 ===> org.kiama.example.json.JSONTree.JNumber.unapply(x$0: org.kiama.example.json.JSONTree.JNumber): Option[Double]
11777 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4279 ===> org.kiama.example.json.JSONTree.JArray.toString(): String
9580 ===> org.kiama.example.oneohonecompanies.Main.main(args: Array[String]): Unit
2781 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productArity: Int
3914 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.copy(): org.kiama.example.iswim.secd.SECDBase.MalformedInstruction
2059 ===> org.kiama.example.iswim.compiler.Syntax.Minus.l: org.kiama.example.iswim.compiler.Syntax.Expr
5101 ===> org.kiama.example.lambda3.AST.FreshQuery.productIterator: Iterator[Any]
6955 ===> org.kiama.example.oberon0.L4.source.FieldExp.productArity: Int
9295 ===> org.kiama.example.obr.SymbolTable.IntType.storage: Int
301 ===> org.kiama.attribution.AttributionTests.TripleTree.copy(p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.TripleTree
522 ===> org.kiama.example.RISC.RISCISA.MOVI.canEqual(x$1: Any): Boolean
2523 ===> org.kiama.example.iswim.compiler.Syntax.While.body: org.kiama.example.iswim.compiler.Syntax.Expr
4569 ===> org.kiama.example.lambda2.AST.App.copy(e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.App
7928 ===> org.kiama.example.obr.ObrTree.IndexExp.indx: org.kiama.example.obr.ObrTree.Expression
4707 ===> org.kiama.example.lambda2.AST.NoType.productIterator: Iterator[Any]
7263 ===> org.kiama.example.oberon0.base.c.PrettyPrinter.basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType): PrettyPrinter.this.Doc
4048 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.equals(x$1: Any): Boolean
10640 ===> org.kiama.example.til.AST.Sub.productArity: Int
6553 ===> org.kiama.example.oberon0.L3.c.CAddrType.equals(x$1: Any): Boolean
7 ===> org.kiama.attribution.Attributable.prev_$eq(x$1: org.kiama.attribution.Attributable): Unit
1728 ===> org.kiama.example.imperative.AST.Null.canEqual(x$1: Any): Boolean
2442 ===> org.kiama.example.iswim.compiler.Syntax.Import.toString(): String
9140 ===> org.kiama.example.obr.SPARCTree.Local.productPrefix: String
3545 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.toString(): String
9632 ===> org.kiama.example.picojava.AbstractSyntax.Block.copy(BlockStmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]): org.kiama.example.picojava.AbstractSyntax.Block
11960 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
6217 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.productPrefix: String
6923 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.equals(x$1: Any): Boolean
3785 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.ContTypeValue): Boolean
4250 ===> org.kiama.example.json.JSONTree.JName.<init>(s: String): org.kiama.example.json.JSONTree.JName
7847 ===> org.kiama.example.obr.ObrTree.BoolExp.equals(x$1: Any): Boolean
1423 ===> org.kiama.example.dataflow.DataflowAST.If.apply(cond: org.kiama.example.dataflow.DataflowAST.Var,tru: org.kiama.example.dataflow.DataflowAST.Stm,fls: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.If
3842 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productElement(x$1: Int): Any
281 ===> org.kiama.attribution.AttributionTests.MapTree.readResolve(): Object
6350 ===> org.kiama.example.oberon0.L2.source.Case.<init>(conds: List[org.kiama.example.oberon0.L2.source.Condition],block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L2.source.Case
7728 ===> org.kiama.example.obr.ObrTree.WhileStmt.copy(cond: org.kiama.example.obr.ObrTree.Expression,body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.WhileStmt
839 ===> org.kiama.example.RISC.RISCISA.AND.a: org.kiama.example.RISC.RISCISA.RegNo
11656 ===> org.kiama.rewriting.Rewriter.somebu(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
1196 ===> org.kiama.example.RISC.RISCISA.BLT.label: Int
5845 ===> org.kiama.example.oberon0.L0.source.NeExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NeExp
3170 ===> org.kiama.example.iswim.secd.IntegerOps.Add.<init>(): org.kiama.example.iswim.secd.IntegerOps.Add
3859 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.canEqual(x$1: Any): Boolean
8237 ===> org.kiama.example.obr.RISCTree.Bne.<init>(): org.kiama.example.obr.RISCTree.Bne.type
7223 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.unapply(x$0: org.kiama.example.oberon0.base.c.CEmptyStmt): Boolean
9815 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.equals(x$1: Any): Boolean
11630 ===> org.kiama.rewriting.Rewriter.repeat(s: => Rewriter.this.Strategy,c: => Rewriter.this.Strategy): Rewriter.this.Strategy
5753 ===> org.kiama.example.oberon0.L0.source.VarDecl.toString(): String
8296 ===> org.kiama.example.obr.RISCTree.StW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
10475 ===> org.kiama.example.til.AST.Read.copy(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Read
3326 ===> org.kiama.example.iswim.secd.RecordOps.Fields.<init>(): org.kiama.example.iswim.secd.RecordOps.Fields.type
10624 ===> org.kiama.example.til.AST.Add.canEqual(x$1: Any): Boolean
3607 ===> org.kiama.example.iswim.secd.SECDBase.Resume.toString(): String
8175 ===> org.kiama.example.obr.RISCTransformation.exnlab_$eq(x$1: org.kiama.example.obr.RISCTree.Label): Unit
3438 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.canEqual(x$1: Any): Boolean
1203 ===> org.kiama.example.RISC.RISCISA.BLT.productIterator: Iterator[Any]
3142 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.<init>(): org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.type
4262 ===> org.kiama.example.json.JSONTree.JName.toString(): String
3488 ===> org.kiama.example.iswim.secd.SECDBase.App.<init>(): org.kiama.example.iswim.secd.SECDBase.App
3078 ===> org.kiama.example.iswim.secd.HeapOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
7777 ===> org.kiama.example.obr.ObrTree.TryStmt.apply(body: org.kiama.example.obr.ObrTree.TryBody,catches: List[org.kiama.example.obr.ObrTree.Catch]): org.kiama.example.obr.ObrTree.TryStmt
4058 ===> org.kiama.example.iswim.secd.SECDBase.$anon.<init>(): SECDBase.this.State[SECDBase.this.Environment]{def toDoc: SECDBase.this.Doc}
157 ===> org.kiama.attribution.AttributionTests.Pair.equals(x$1: Any): Boolean
9940 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.<init>(left: org.kiama.example.prolog.PrologTree.Term,right: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.UnifyGoal
8583 ===> org.kiama.example.obr.RISCTree.RemW.readResolve(): Object
6018 ===> org.kiama.example.oberon0.L0.source.MulExp.toString(): String
8176 ===> org.kiama.example.obr.RISCTransformation.tempintloc: org.kiama.example.obr.RISCTree.Address
6227 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.apply(cond: org.kiama.example.oberon0.base.c.CExpression,stmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CWhileStatement
3066 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productPrefix: String
4958 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8432 ===> org.kiama.example.obr.RISCTree.CmpgtW.hashCode(): Int
11543 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
5422 ===> org.kiama.example.oberon0.L0.c.CNeExp.right: org.kiama.example.oberon0.base.c.CExpression
8400 ===> org.kiama.example.obr.RISCTree.CmpeqW.unapply(x$0: org.kiama.example.obr.RISCTree.CmpeqW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
6717 ===> org.kiama.example.oberon0.L3.source.Call.copy$default$2: List[org.kiama.example.oberon0.L0.source.Expression] @scala.annotation.unchecked.uncheckedVariance
1633 ===> org.kiama.example.imperative.AST.Binary.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Binary
5900 ===> org.kiama.example.oberon0.L0.source.GtExp.left: org.kiama.example.oberon0.L0.source.Expression
6172 ===> org.kiama.example.oberon0.L1.c.CIfStatement.tstmt: org.kiama.example.oberon0.base.c.CStatement
2326 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.productArity: Int
870 ===> org.kiama.example.RISC.RISCISA.ANDI.productArity: Int
2677 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.toString(): String
7464 ===> org.kiama.example.obr.ObrTree.IntVar.toString(): String
8340 ===> org.kiama.example.obr.RISCTree.Read.apply(): org.kiama.example.obr.RISCTree.Read
4164 ===> org.kiama.example.iswim.secd.StringOps.$init$(): Unit
2369 ===> org.kiama.example.iswim.compiler.Syntax.Let.toString(): String
11390 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.i: Int
359 ===> org.kiama.attribution.Decorators.Chain.in: T => U
8923 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productElement(x$1: Int): Any
10618 ===> org.kiama.example.til.AST.Add.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
3591 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.hashCode(): Int
8575 ===> org.kiama.example.obr.RISCTree.RemW.canEqual(x$1: Any): Boolean
3775 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productArity: Int
2943 ===> org.kiama.example.iswim.secd.ConversionOps.$init$(): Unit
11138 ===> org.kiama.output.PrettyPrinterTests.Val.productElement(x$1: Int): Any
2722 ===> org.kiama.example.iswim.compiler.Syntax.Assign.productArity: Int
1289 ===> org.kiama.example.RISC.RISCISA.BSR.apply(label: Int): org.kiama.example.RISC.RISCISA.BSR
3208 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.toString(): String
3945 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.productPrefix: String
2493 ===> org.kiama.example.iswim.compiler.Syntax.Apply.hashCode(): Int
3519 ===> org.kiama.example.iswim.secd.SECDBase.Enter.<init>(nms: List[org.kiama.example.iswim.secd.SECDBase.Name]): org.kiama.example.iswim.secd.SECDBase.Enter
11500 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productElement(x$1: Int): Any
189 ===> org.kiama.attribution.AttributionTests.Unused.hashCode(): Int
7680 ===> org.kiama.example.obr.ObrTree.IfStmt.productElement(x$1: Int): Any
11908 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
266 ===> org.kiama.attribution.AttributionTests.MapTree.<init>(m: Map[AttributionTests.this.Tree,AttributionTests.this.Tree]): AttributionTests.this.MapTree
6515 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.<init>(): SymbolTable.this.BuiltinProc.type
7598 ===> org.kiama.example.obr.ObrTree.ExnConst.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
4658 ===> org.kiama.example.lambda2.AST.Bind.canEqual(x$1: Any): Boolean
12236 ===> org.kiama.rewriting.UniplateTests.TestDoubleNegSimplification.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10692 ===> org.kiama.example.til.TIL1_1Main.<init>(): org.kiama.example.til.TIL1_1Main.type
8861 ===> org.kiama.example.obr.SPARCTree.Write.productPrefix: String
6741 ===> org.kiama.example.oberon0.L4.NameAnalyser.isLvalue(l: org.kiama.example.oberon0.L0.source.Expression): Boolean
12300 ===> org.kiama.util.StdoutEmitter.$init$(): Unit
8350 ===> org.kiama.example.obr.RISCTree.AddW.productArity: Int
2057 ===> org.kiama.example.iswim.compiler.Syntax.Plus.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Plus): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
10083 ===> org.kiama.example.prolog.PrologTree.Integer.canEqual(x$1: Any): Boolean
10414 ===> org.kiama.example.til.AST.IfElse.copy(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat],f: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.IfElse
2670 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.productElement(x$1: Int): Any
3831 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.equals(x$1: Any): Boolean
9952 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.<init>(): org.kiama.example.prolog.Interpreter.UnifyGoal.type
6253 ===> org.kiama.example.oberon0.L1.source.IfStatement.unapply(x$0: org.kiama.example.oberon0.L1.source.IfStatement): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block, List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)], Option[org.kiama.example.oberon0.base.source.Block])]
1662 ===> org.kiama.example.imperative.AST.Sub.value: Double
6623 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productIterator: Iterator[Any]
11212 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productPrefix: String
7718 ===> org.kiama.example.obr.ObrTree.ReturnStmt.toString(): String
7414 ===> org.kiama.example.obr.ParserDriver.process(ast: org.kiama.example.obr.ObrTree.ObrInt,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
12192 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11846 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3939 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.apply(): org.kiama.example.iswim.secd.SECDBase.MatchError
7112 ===> org.kiama.example.oberon0.base.c.CVarDecl.toString(): String
7799 ===> org.kiama.example.obr.ObrTree.Catch.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,stmts: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.Catch
3827 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.productElement(x$1: Int): Any
194 ===> org.kiama.attribution.AttributionTests.Unused.apply(b: Boolean): AttributionTests.this.Unused
7783 ===> org.kiama.example.obr.ObrTree.TryBody.copy$default$1: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
11151 ===> org.kiama.output.PrettyPrinterTests.PVal.toDoc: PrettyPrinterTests.this.Doc
3318 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productPrefix: String
2403 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.canEqual(x$1: Any): Boolean
5130 ===> org.kiama.example.lambda3.AST.SubstQuery.apply(n: org.kiama.rewriting.NominalAST.Name,e1: org.kiama.example.lambda3.AST.Exp,e2: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.SubstQuery
7841 ===> org.kiama.example.obr.ObrTree.BoolExp.productArity: Int
11814 ===> org.kiama.rewriting.RewriterTests.NotSame.productArity: Int
12432 ===> org.kiama.util.ParserUtilities.constToTupleFunction6[A, B, C, D, E, F, R](r: (A, B, C, D, E, F) => R): ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E],F] => R
4076 ===> org.kiama.example.iswim.secd.StackOps.Pop.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1862 ===> org.kiama.example.imperative.ASTNonCase.Add.toString(): String
433 ===> org.kiama.attribution.DynamicAttributionTests.Unused.productIterator: Iterator[Any]
12600 ===> org.kiama.util.REPLBase.ignoreWhitespaceLines: Boolean
10768 ===> org.kiama.example.transform.AST.BinExpR.copy$default$1: org.kiama.example.transform.AST.Exp @scala.annotation.unchecked.uncheckedVariance
4973 ===> org.kiama.example.lambda3.AST.Num.hashCode(): Int
5618 ===> org.kiama.example.oberon0.L0.c.CDivExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CDivExp
8935 ===> org.kiama.example.obr.SPARCTree.CmpneW.r: org.kiama.example.obr.SPARCTree.Datum
12075 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9135 ===> org.kiama.example.obr.SPARCTree.Address.<init>(): org.kiama.example.obr.SPARCTree.Address
7515 ===> org.kiama.example.obr.ObrTree.ArrayVar.equals(x$1: Any): Boolean
10214 ===> org.kiama.example.prolog.SymbolTable.IntegerType.copy(): org.kiama.example.prolog.SymbolTable.IntegerType
4208 ===> org.kiama.example.iswim.tests.SECDTests.SECD.<init>(code: org.kiama.example.iswim.secd.SECDBase.Code): SECDTests.this.SECD
11534 ===> org.kiama.rewriting.Rewriter.PlusStrategy.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
7619 ===> org.kiama.example.obr.ObrTree.AssignStmt.productPrefix: String
427 ===> org.kiama.attribution.DynamicAttributionTests.Unused.<init>(b: Boolean): DynamicAttributionTests.this.Unused
3029 ===> org.kiama.example.iswim.secd.HeapOps.Put.productPrefix: String
2002 ===> org.kiama.example.iswim.compiler.Syntax.Variable.toString(): String
8215 ===> org.kiama.example.obr.RISCTree.Beq.hashCode(): Int
12453 ===> org.kiama.util.ParserUtilitiesTests.Node.canEqual(x$1: Any): Boolean
6055 ===> org.kiama.example.oberon0.L0.source.ModExp.<init>(): org.kiama.example.oberon0.L0.source.ModExp.type
5589 ===> org.kiama.example.oberon0.L0.c.CMulExp.productArity: Int
8195 ===> org.kiama.example.obr.RISCTree.RISCProg.hashCode(): Int
567 ===> org.kiama.example.RISC.RISCISA.MVNI.<init>(): org.kiama.example.RISC.RISCISA.MVNI.type
1701 ===> org.kiama.example.imperative.AST.Div.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Div
3030 ===> org.kiama.example.iswim.secd.HeapOps.Put.productArity: Int
5157 ===> org.kiama.example.lambda3.Lambda.setup(args: Array[String]): Boolean
243 ===> org.kiama.attribution.AttributionTests.SetTree.<init>(): AttributionTests.this.SetTree.type
2003 ===> org.kiama.example.iswim.compiler.Syntax.Variable.apply(s: String): org.kiama.example.iswim.compiler.Syntax.Variable
4782 ===> org.kiama.example.lambda2.Analysis.tipe: org.kiama.example.lambda2.AST.Exp => org.kiama.example.lambda2.AST.Type
1291 ===> org.kiama.example.RISC.RISCISA.BSR.readResolve(): Object
10665 ===> org.kiama.example.til.AST.Eq.equals(x$1: Any): Boolean
3277 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.<init>(n: Int): IntegerOps.this.IntValue
7883 ===> org.kiama.example.obr.ObrTree.FieldExp.hashCode(): Int
10351 ===> org.kiama.example.til.AST.Program.apply(ss: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.Program
6376 ===> org.kiama.example.oberon0.L2.source.ValCond.canEqual(x$1: Any): Boolean
10059 ===> org.kiama.example.prolog.PrologTree.Var.toString(): String
8219 ===> org.kiama.example.obr.RISCTree.Beq.toString(): String
11429 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
2891 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.<init>(): org.kiama.example.iswim.secd.ConversionOps.ToString.type
10242 ===> org.kiama.example.prolog.SymbolTable.UnknownType.<init>(): org.kiama.example.prolog.SymbolTable.UnknownType
5439 ===> org.kiama.example.oberon0.L0.c.CNeExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CNeExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
1925 ===> org.kiama.example.iswim.compiler.Parser.Pos.s: String
2348 ===> org.kiama.example.iswim.compiler.Syntax.Binding.canEqual(x$1: Any): Boolean
9220 ===> org.kiama.example.obr.SymbolTable.Variable.isconst: Boolean
12118 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4701 ===> org.kiama.example.lambda2.AST.FunType.readResolve(): Object
4136 ===> org.kiama.example.iswim.secd.StringOps.PushString.productPrefix: String
11148 ===> org.kiama.output.PrettyPrinterTests.Val.readResolve(): Object
12303 ===> org.kiama.util.StringEmitter.b: StringBuilder
10772 ===> org.kiama.example.transform.AST.BinExpR.productArity: Int
5397 ===> org.kiama.example.oberon0.L0.c.CAssignment.readResolve(): Object
490 ===> org.kiama.example.RISC.RISCISA.MOV.c: org.kiama.example.RISC.RISCISA.RegNo
4960 ===> org.kiama.example.lambda2.ReduceSubstEvaluator.reducesinlambdas: Boolean
239 ===> org.kiama.attribution.AttributionTests.SetTree.canEqual(x$1: Any): Boolean
4052 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.unapply(x$0: SECDBase.this.EmptyCont): Boolean
3248 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productArity: Int
1952 ===> org.kiama.example.iswim.compiler.Syntax.Iswim.<init>(): org.kiama.example.iswim.compiler.Syntax.Iswim
11520 ===> org.kiama.rewriting.Rewriter.Strategy.apply(r: Rewriter.this.Term): Option[Rewriter.this.Term]
3219 ===> org.kiama.example.iswim.secd.IntegerOps.Div.productElement(x$1: Int): Any
2926 ===> org.kiama.example.iswim.secd.ConversionOps.processInteger: scala.util.matching.Regex
8629 ===> org.kiama.example.obr.RISCTree.Local.productElement(x$1: Int): Any
12060 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9264 ===> org.kiama.example.obr.SymbolTable.Unknown.productIterator: Iterator[Any]
6711 ===> org.kiama.example.oberon0.L3.source.FPSection.readResolve(): Object
716 ===> org.kiama.example.RISC.RISCISA.DIV.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.DIV
4272 ===> org.kiama.example.json.JSONTree.JArray.productElement(x$1: Int): Any
5508 ===> org.kiama.example.oberon0.L0.c.CGeExp.productPrefix: String
1302 ===> org.kiama.example.RISC.RISCISA.RET.hashCode(): Int
195 ===> org.kiama.attribution.AttributionTests.Unused.unapply(x$0: AttributionTests.this.Unused): Option[Boolean]
7794 ===> org.kiama.example.obr.ObrTree.TryBody.apply(stmts: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.TryBody
11335 ===> org.kiama.rewriting.PositionalRewriterTests.pt: org.kiama.rewriting.SupportPositionalRewriterTests.TestPosition{val line: Int; val column: Int}
8407 ===> org.kiama.example.obr.RISCTree.CmpneW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
12434 ===> org.kiama.util.ParserUtilities.keywords(ext: scala.util.matching.Regex,kws: List[String]): ParserUtilities.this.Parser[String]
1753 ===> org.kiama.example.imperative.AST.Seqn.unapply(x$0: org.kiama.example.imperative.AST.Seqn): Option[Seq[org.kiama.example.imperative.AST.Stmt]]
210 ===> org.kiama.attribution.AttributionTests.EitherTree.toString(): String
4041 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.copy(): SECDBase.this.EmptyCont
9621 ===> org.kiama.example.picojava.AbstractSyntax.Program.canEqual(x$1: Any): Boolean
2701 ===> org.kiama.example.iswim.compiler.Syntax.Val.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
10674 ===> org.kiama.example.til.AST.Ne.copy(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Ne
9142 ===> org.kiama.example.obr.SPARCTree.Local.productElement(x$1: Int): Any
3964 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productElement(x$1: Int): Any
5355 ===> org.kiama.example.oberon0.L0.c.CInitDecl.toString(): String
1330 ===> org.kiama.example.RISC.RISCISA.Comment.copy(text: String): org.kiama.example.RISC.RISCISA.Comment
2954 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productIterator: Iterator[Any]
6327 ===> org.kiama.example.oberon0.L2.source.CaseStatement.exp: org.kiama.example.oberon0.L0.source.Expression
8671 ===> org.kiama.example.obr.RISCTree.Label.<init>(): org.kiama.example.obr.RISCTree.Label.type
11366 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.One.type
3621 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.hashCode(): Int
3259 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.readResolve(): Object
6296 ===> org.kiama.example.oberon0.L2.Parser.$init$(): Unit
10513 ===> org.kiama.example.til.AST.Id.productPrefix: String
1239 ===> org.kiama.example.RISC.RISCISA.BLE.<init>(): org.kiama.example.RISC.RISCISA.BLE.type
1731 ===> org.kiama.example.imperative.AST.Null.equals(x$1: Any): Boolean
12353 ===> org.kiama.util.Environments.rootenv(bindings: (String, Environments.this.Entity)*): Environments.this.Environment
4774 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1759 ===> org.kiama.example.imperative.AST.Asgn.copy(v: org.kiama.example.imperative.AST.Var,e: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Asgn
8545 ===> org.kiama.example.obr.RISCTree.NegW.apply(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.NegW
3880 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination): Boolean
5526 ===> org.kiama.example.oberon0.L0.c.CAddExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
2063 ===> org.kiama.example.iswim.compiler.Syntax.Minus.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
12007 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4664 ===> org.kiama.example.lambda2.AST.Bind.apply(i: org.kiama.example.lambda2.AST.Idn,e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Bind
1706 ===> org.kiama.example.imperative.AST.Div.copy$default$2: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
9960 ===> org.kiama.example.prolog.Interpreter.MatchGoal.copy(left: org.kiama.example.prolog.PrologTree.Term,right: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.Interpreter.MatchGoal
9446 ===> org.kiama.example.obr.SyntaxAnalysis.reservedWords: scala.collection.immutable.HashSet[String]
10650 ===> org.kiama.example.til.AST.Sub.unapply(x$0: org.kiama.example.til.AST.Sub): Option[(org.kiama.example.til.AST.Exp, org.kiama.example.til.AST.Exp)]
6208 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.apply(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CIfElseStatement
8704 ===> org.kiama.example.obr.SPARCTransformation.<init>(): org.kiama.example.obr.SPARCTransformation.type
1608 ===> org.kiama.example.imperative.AST.Var.apply(s: org.kiama.example.imperative.AST.Idn): org.kiama.example.imperative.AST.Var
9212 ===> org.kiama.example.obr.SymbolTable.reset(): Unit
5547 ===> org.kiama.example.oberon0.L0.c.CSubExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
11242 ===> org.kiama.output.ParenPrettyPrinterTests.toParenDoc(e: org.kiama.output.PrettyExpression): ParenPrettyPrinterTests.this.Doc
7024 ===> org.kiama.example.oberon0.base.TransformingDriver.pprintiastFlag_$eq(x$1: Boolean): Unit
7045 ===> org.kiama.example.oberon0.base.TestDriver.mktests(proglang: String): Unit
5614 ===> org.kiama.example.oberon0.L0.c.CDivExp.toString(): String
7502 ===> org.kiama.example.obr.ObrTree.ArrayVar.idn: org.kiama.example.obr.ObrTree.Identifier
1370 ===> org.kiama.example.dataflow.DataflowAST.Assign.copy(left: org.kiama.example.dataflow.DataflowAST.Var,right: org.kiama.example.dataflow.DataflowAST.Var): org.kiama.example.dataflow.DataflowAST.Assign
9670 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.ClassDecl): Option[(String, Option[org.kiama.example.picojava.AbstractSyntax.IdnUse], org.kiama.example.picojava.AbstractSyntax.Block)]
10126 ===> org.kiama.example.prolog.PrologTree.Pred.unapply(x$0: org.kiama.example.prolog.PrologTree.Pred): Option[(String, List[org.kiama.example.prolog.PrologTree.Term])]
11365 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.equals(x$1: Any): Boolean
1538 ===> org.kiama.example.dataflow.DataflowForTests.s412: org.kiama.example.dataflow.DataflowAST.Assign
10557 ===> org.kiama.example.til.AST.Num.unapply(x$0: org.kiama.example.til.AST.Num): Option[Int]
3729 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productPrefix: String
2086 ===> org.kiama.example.iswim.compiler.Syntax.Times.productElement(x$1: Int): Any
12478 ===> org.kiama.util.ParserUtilitiesTests.Tup2.apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup2
5955 ===> org.kiama.example.oberon0.L0.source.AddExp.equals(x$1: Any): Boolean
5076 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.copy(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.FreeNamesQuery
8806 ===> org.kiama.example.obr.SPARCTree.Read.mem: org.kiama.example.obr.SPARCTree.Address
980 ===> org.kiama.example.RISC.RISCISA.LDW.equals(x$1: Any): Boolean
1404 ===> org.kiama.example.dataflow.DataflowAST.While.readResolve(): Object
10284 ===> org.kiama.example.repmin.Fork.productElement(x$1: Int): Any
5871 ===> org.kiama.example.oberon0.L0.source.LtExp.productIterator: Iterator[Any]
7848 ===> org.kiama.example.obr.ObrTree.BoolExp.<init>(): org.kiama.example.obr.ObrTree.BoolExp.type
10940 ===> org.kiama.output.LeftAssoc.canEqual(x$1: Any): Boolean
7508 ===> org.kiama.example.obr.ObrTree.ArrayVar.productPrefix: String
1425 ===> org.kiama.example.dataflow.DataflowAST.If.readResolve(): Object
5737 ===> org.kiama.example.oberon0.L0.source.ConstDecl.toString(): String
9122 ===> org.kiama.example.obr.SPARCTree.SubW.productPrefix: String
31 ===> org.kiama.attribution.Attributable.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3384 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.hashCode(): Int
9545 ===> org.kiama.example.oneohonecompanies.Company.PU.productIterator: Iterator[Any]
3592 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.toString(): String
3156 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
3671 ===> org.kiama.example.iswim.secd.SECDBase.PushType.toString(): String
9480 ===> org.kiama.example.oneohonecompanies.Company.Company.copy(depts: List[org.kiama.example.oneohonecompanies.Company.Dept]): org.kiama.example.oneohonecompanies.Company.Company
11804 ===> org.kiama.rewriting.RewriterTests.Same.productPrefix: String
7517 ===> org.kiama.example.obr.ObrTree.ArrayVar.toString(): String
11909 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4679 ===> org.kiama.example.lambda2.AST.IntType.toString(): String
8785 ===> org.kiama.example.obr.SPARCTree.Jmp.toString(): String
2107 ===> org.kiama.example.iswim.compiler.Syntax.Divide.canEqual(x$1: Any): Boolean
10598 ===> org.kiama.example.til.AST.Div.copy(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Div
5763 ===> org.kiama.example.oberon0.L0.source.TypeDecl.copy(idndef: org.kiama.example.oberon0.base.source.IdnDef,tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L0.source.TypeDecl
11829 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2453 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productArity: Int
2368 ===> org.kiama.example.iswim.compiler.Syntax.Let.hashCode(): Int
1407 ===> org.kiama.example.dataflow.DataflowAST.If.fls: org.kiama.example.dataflow.DataflowAST.Stm
8638 ===> org.kiama.example.obr.RISCTree.Local.unapply(x$0: org.kiama.example.obr.RISCTree.Local): Option[Int]
9929 ===> org.kiama.example.prolog.Interpreter.TermGoal.canEqual(x$1: Any): Boolean
6100 ===> org.kiama.example.oberon0.L0.source.NegExp.readResolve(): Object
1410 ===> org.kiama.example.dataflow.DataflowAST.If.copy$default$1: org.kiama.example.dataflow.DataflowAST.Var @scala.annotation.unchecked.uncheckedVariance
2636 ===> org.kiama.example.iswim.compiler.Syntax.Match.canEqual(x$1: Any): Boolean
5639 ===> org.kiama.example.oberon0.L0.c.CModExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CModExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
5281 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.productIterator: Iterator[Any]
988 ===> org.kiama.example.RISC.RISCISA.LDB.im: org.kiama.example.RISC.RISCISA.Imm
1173 ===> org.kiama.example.RISC.RISCISA.BEQ.hashCode(): Int
11730 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2436 ===> org.kiama.example.iswim.compiler.Syntax.Import.productIterator: Iterator[Any]
8500 ===> org.kiama.example.obr.RISCTree.LdW.productArity: Int
9234 ===> org.kiama.example.obr.SymbolTable.Variable.toString(): String
5335 ===> org.kiama.example.oberon0.L0.c.CNamedType.hashCode(): Int
1139 ===> org.kiama.example.RISC.RISCISA.WRH.apply(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRH
1874 ===> org.kiama.example.imperative.Imperative.prompt: String
2172 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.readResolve(): Object
7294 ===> org.kiama.example.oberon0.base.source.Block.copy$default$1: List[org.kiama.example.oberon0.base.source.Declaration] @scala.annotation.unchecked.uncheckedVariance
12489 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productPrefix: String
2777 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.readResolve(): Object
8453 ===> org.kiama.example.obr.RISCTree.CmpltW.equals(x$1: Any): Boolean
2055 ===> org.kiama.example.iswim.compiler.Syntax.Plus.toString(): String
11422 ===> org.kiama.rewriting.PositionedRewriterTests.pl2s: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
772 ===> org.kiama.example.RISC.RISCISA.MODI.productElement(x$1: Int): Any
10088 ===> org.kiama.example.prolog.PrologTree.Integer.apply(v: Int): org.kiama.example.prolog.PrologTree.Integer
2485 ===> org.kiama.example.iswim.compiler.Syntax.Apply.copy(f: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Apply
4039 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.<init>(): SECDBase.this.EmptyCont
247 ===> org.kiama.attribution.AttributionTests.SetTree.readResolve(): Object
3366 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productIterator: Iterator[Any]
12549 ===> org.kiama.util.ParserUtilitiesTests.Tup5.readResolve(): Object
7936 ===> org.kiama.example.obr.ObrTree.IndexExp.productIterator: Iterator[Any]
3749 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.hashCode(): Int
9682 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.canEqual(x$1: Any): Boolean
3596 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.apply(): org.kiama.example.iswim.secd.SECDBase.AppCC
11344 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionalRewriter.Term): Boolean
11382 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.hashCode(): Int
7740 ===> org.kiama.example.obr.ObrTree.WhileStmt.toString(): String
1630 ===> org.kiama.example.imperative.AST.Neg.apply(e: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Neg
5966 ===> org.kiama.example.oberon0.L0.source.SubExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
4616 ===> org.kiama.example.lambda2.AST.Let.productPrefix: String
5429 ===> org.kiama.example.oberon0.L0.c.CNeExp.productArity: Int
6903 ===> org.kiama.example.oberon0.L4.source.IndexExp.canEqual(x$1: Any): Boolean
889 ===> org.kiama.example.RISC.RISCISA.OR.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.OR
7823 ===> org.kiama.example.obr.ObrTree.AndExp.productPrefix: String
6022 ===> org.kiama.example.oberon0.L0.source.DivExp.left: org.kiama.example.oberon0.L0.source.Expression
8957 ===> org.kiama.example.obr.SPARCTree.CmpgtW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
9913 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.hashCode(): Int
4253 ===> org.kiama.example.json.JSONTree.JName.productPrefix: String
11784 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2744 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.toString(): String
7613 ===> org.kiama.example.obr.ObrTree.AssignStmt.left: org.kiama.example.obr.ObrTree.AssignNode
9893 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.AAinBB: org.kiama.example.picojava.AbstractSyntax.Use
11177 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.toString(): String
4770 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12626 ===> org.kiama.util.RegexParserTests.failParseError(f: RegexParserTests.this.Error): Unit
298 ===> org.kiama.attribution.AttributionTests.PairTree.readResolve(): Object
12546 ===> org.kiama.util.ParserUtilitiesTests.Tup5.toString(): String
5481 ===> org.kiama.example.oberon0.L0.c.CGtExp.left: org.kiama.example.oberon0.base.c.CExpression
9325 ===> org.kiama.example.obr.SymbolTable.BoolType.readResolve(): Object
342 ===> org.kiama.attribution.AttributionTests.Base.k3: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
7090 ===> org.kiama.example.oberon0.base.c.CInclude.canEqual(x$1: Any): Boolean
4011 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.productPrefix: String
2222 ===> org.kiama.example.iswim.compiler.Syntax.Greater.hashCode(): Int
5188 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.isDefinedAt(x$1: org.kiama.example.oberon0.base.source.SourceASTNode): Boolean
2016 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.toString(): String
7827 ===> org.kiama.example.obr.ObrTree.AndExp.canEqual(x$1: Any): Boolean
1018 ===> org.kiama.example.RISC.RISCISA.POP.productElement(x$1: Int): Any
4949 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10701 ===> org.kiama.example.til.TIL2_1.declareforvars: org.kiama.rewriting.Rewriter.Strategy
8462 ===> org.kiama.example.obr.RISCTree.DivW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.DivW
5194 ===> org.kiama.example.oberon0.L0.Parser.$init$(): Unit
7262 ===> org.kiama.example.oberon0.base.c.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.c.CASTNode): PrettyPrinter.this.Doc
3094 ===> org.kiama.example.iswim.secd.IOOps.Write.unapply(x$0: org.kiama.example.iswim.secd.IOOps.Write): Boolean
2001 ===> org.kiama.example.iswim.compiler.Syntax.Variable.<init>(): org.kiama.example.iswim.compiler.Syntax.Variable.type
11184 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.priority: Int
9571 ===> org.kiama.example.oneohonecompanies.Company.DU.readResolve(): Object
7233 ===> org.kiama.example.oberon0.base.c.CReturn.canEqual(x$1: Any): Boolean
191 ===> org.kiama.attribution.AttributionTests.Unused.equals(x$1: Any): Boolean
9192 ===> org.kiama.example.obr.SPARCTree.reset(): Unit
10127 ===> org.kiama.example.prolog.PrologTree.Pred.readResolve(): Object
4749 ===> org.kiama.example.lambda2.AST.SubOp.unapply(x$0: org.kiama.example.lambda2.AST.SubOp): Boolean
2351 ===> org.kiama.example.iswim.compiler.Syntax.Binding.equals(x$1: Any): Boolean
8173 ===> org.kiama.example.obr.RISCTransformation.exitlab_$eq(x$1: org.kiama.example.obr.RISCTree.Label): Unit
7308 ===> org.kiama.example.oberon0.base.source.Block.readResolve(): Object
9513 ===> org.kiama.example.oneohonecompanies.Company.Dept.apply(n: org.kiama.example.oneohonecompanies.Company.Name,m: org.kiama.example.oneohonecompanies.Company.Manager,su: List[org.kiama.example.oneohonecompanies.Company.SubUnit]): org.kiama.example.oneohonecompanies.Company.Dept
702 ===> org.kiama.example.RISC.RISCISA.DIV.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
1814 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2839 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.toString(): String
11198 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.<init>(): ParenPrettyPrinterTests.this.PostOp.type
6784 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.tipe: SymbolTable.this.Type
12175 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10157 ===> org.kiama.example.prolog.SemanticTests.<init>(): org.kiama.example.prolog.SemanticTests
1469 ===> org.kiama.example.dataflow.DataflowAST.Empty.equals(x$1: Any): Boolean
6348 ===> org.kiama.example.oberon0.L2.source.Case.conds: List[org.kiama.example.oberon0.L2.source.Condition]
4483 ===> org.kiama.example.lambda.Evaluator.$init$(): Unit
6601 ===> org.kiama.example.oberon0.L3.c.CAddrExp.productPrefix: String
4933 ===> org.kiama.example.lambda2.Reduce.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3971 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.apply(): SECDBase.this.EmptyValue
1182 ===> org.kiama.example.RISC.RISCISA.BNE.toString(): String
8848 ===> org.kiama.example.obr.SPARCTree.StW.canEqual(x$1: Any): Boolean
399 ===> org.kiama.attribution.DynamicAttributionTests.Pair.productIterator: Iterator[Any]
9819 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.UnknownDecl): Option[String]
1940 ===> org.kiama.example.iswim.compiler.Parser.Pos.unapply(x$0: Parser.this.Pos): Option[String]
9589 ===> org.kiama.example.oneohonecompanies.Precedence.bosssalary: org.kiama.example.oneohonecompanies.Company.Node => org.kiama.example.oneohonecompanies.Company.Salary
6613 ===> org.kiama.example.oberon0.L3.c.CAddrExp.readResolve(): Object
9795 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.canEqual(x$1: Any): Boolean
8027 ===> org.kiama.example.obr.ObrTree.NegExp.productIterator: Iterator[Any]
4634 ===> org.kiama.example.lambda2.AST.Letp.copy$default$2: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10719 ===> org.kiama.example.til.TIL2_3.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3487 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.readResolve(): Object
8736 ===> org.kiama.example.obr.SPARCTree.Beq.<init>(cond: org.kiama.example.obr.SPARCTree.Datum,dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Beq
5418 ===> org.kiama.example.oberon0.L0.c.CEqExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CEqExp
7625 ===> org.kiama.example.obr.ObrTree.AssignStmt.toString(): String
7219 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.equals(x$1: Any): Boolean
9958 ===> org.kiama.example.prolog.Interpreter.MatchGoal.right: org.kiama.example.prolog.PrologTree.Term
3330 ===> org.kiama.example.iswim.secd.RecordOps.Fields.readResolve(): Object
1125 ===> org.kiama.example.RISC.RISCISA.WRH.c: org.kiama.example.RISC.RISCISA.RegNo
2329 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.canEqual(x$1: Any): Boolean
8181 ===> org.kiama.example.obr.RISCTransformation.sitems: org.kiama.example.obr.ObrTree.Statement => List[org.kiama.example.obr.RISCTree.Item]
9026 ===> org.kiama.example.obr.SPARCTree.IntDatum.readResolve(): Object
2347 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productIterator: Iterator[Any]
9322 ===> org.kiama.example.obr.SymbolTable.BoolType.toString(): String
4660 ===> org.kiama.example.lambda2.AST.Bind.toString(): String
5813 ===> org.kiama.example.oberon0.L0.source.Assignment.apply(desig: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.Assignment
3509 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.canEqual(x$1: Any): Boolean
2056 ===> org.kiama.example.iswim.compiler.Syntax.Plus.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Plus
9946 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productElement(x$1: Int): Any
12045 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
610 ===> org.kiama.example.RISC.RISCISA.ADDI.toString(): String
2178 ===> org.kiama.example.iswim.compiler.Syntax.Less.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
9492 ===> org.kiama.example.oneohonecompanies.Company.Company.apply(depts: List[org.kiama.example.oneohonecompanies.Company.Dept]): org.kiama.example.oneohonecompanies.Company.Company
12103 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2502 ===> org.kiama.example.iswim.compiler.Syntax.If.thn: org.kiama.example.iswim.compiler.Syntax.Expr
8136 ===> org.kiama.example.obr.ObrTree.StarExp.productPrefix: String
4636 ===> org.kiama.example.lambda2.AST.Letp.productArity: Int
5852 ===> org.kiama.example.oberon0.L0.source.NeExp.productIterator: Iterator[Any]
5350 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productArity: Int
12445 ===> org.kiama.util.ParserUtilitiesTests.Node.i: Int
1306 ===> org.kiama.example.RISC.RISCISA.RET.apply(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RET
8577 ===> org.kiama.example.obr.RISCTree.RemW.toString(): String
5960 ===> org.kiama.example.oberon0.L0.source.AddExp.readResolve(): Object
1492 ===> org.kiama.example.dataflow.Foreach.unapply(x$0: org.kiama.example.dataflow.Foreach): Option[(org.kiama.example.dataflow.DataflowAST.Var, org.kiama.example.dataflow.DataflowAST.Stm)]
2937 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.equals(x$1: Any): Boolean
627 ===> org.kiama.example.RISC.RISCISA.SUB.canEqual(x$1: Any): Boolean
6194 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.copy(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement,estmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CIfElseStatement
7620 ===> org.kiama.example.obr.ObrTree.AssignStmt.productArity: Int
4147 ===> org.kiama.example.iswim.secd.StringOps.PushString.unapply(x$0: org.kiama.example.iswim.secd.StringOps.PushString): Option[String]
10448 ===> org.kiama.example.til.AST.While.unapply(x$0: org.kiama.example.til.AST.While): Option[(org.kiama.example.til.AST.Exp, Seq[org.kiama.example.til.AST.Stat])]
11587 ===> org.kiama.rewriting.Rewriter.$anon.allProduct(p: Product): Option[Rewriter.this.Term]
1313 ===> org.kiama.example.RISC.RISCISA.Target.copy(label: Int): org.kiama.example.RISC.RISCISA.Target
8201 ===> org.kiama.example.obr.RISCTree.RISCProg.unapply(x$0: org.kiama.example.obr.RISCTree.RISCProg): Option[List[org.kiama.example.obr.RISCTree.Item]]
6051 ===> org.kiama.example.oberon0.L0.source.ModExp.canEqual(x$1: Any): Boolean
10925 ===> org.kiama.machine.MachineTests.M.debug: Boolean
1554 ===> org.kiama.example.dataflow.Driver.process(ast: org.kiama.example.dataflow.DataflowAST.Stm,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
5268 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.equals(x$1: Any): Boolean
499 ===> org.kiama.example.RISC.RISCISA.MOV.productElement(x$1: Int): Any
6826 ===> org.kiama.example.oberon0.L4.c.CRecordType.toString(): String
4890 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
10386 ===> org.kiama.example.til.AST.Assign.<init>(): org.kiama.example.til.AST.Assign.type
1811 ===> org.kiama.example.imperative.AST.Sub(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
5330 ===> org.kiama.example.oberon0.L0.c.CNamedType.productPrefix: String
1802 ===> org.kiama.example.imperative.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8716 ===> org.kiama.example.obr.SPARCTree.SPARC.<init>(insns: List[org.kiama.example.obr.SPARCTree.Item],memsize: Int): org.kiama.example.obr.SPARCTree.SPARC
7780 ===> org.kiama.example.obr.ObrTree.TryBody.stmts: List[org.kiama.example.obr.ObrTree.Statement]
2656 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.equals(x$1: Any): Boolean
8313 ===> org.kiama.example.obr.RISCTree.Write.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
11990 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7791 ===> org.kiama.example.obr.ObrTree.TryBody.equals(x$1: Any): Boolean
3668 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productIterator: Iterator[Any]
8110 ===> org.kiama.example.obr.ObrTree.PlusExp.readResolve(): Object
6795 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.hashCode(): Int
9040 ===> org.kiama.example.obr.SPARCTree.LdW.toString(): String
2913 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.productPrefix: String
10980 ===> org.kiama.output.Postfix.readResolve(): Object
3232 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.productPrefix: String
4766 ===> org.kiama.example.lambda2.AST.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8897 ===> org.kiama.example.obr.SPARCTree.Cond.<init>(cond: org.kiama.example.obr.SPARCTree.Datum,t: org.kiama.example.obr.SPARCTree.Datum,f: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Cond
10155 ===> org.kiama.example.prolog.SemanticAnalysis.exptipe: org.kiama.example.prolog.PrologTree.Term => org.kiama.example.prolog.SymbolTable.Type
2441 ===> org.kiama.example.iswim.compiler.Syntax.Import.<init>(): org.kiama.example.iswim.compiler.Syntax.Import.type
1855 ===> org.kiama.example.imperative.ASTNonCase.Binary.l: org.kiama.example.imperative.ASTNonCase.Exp
10526 ===> org.kiama.example.til.AST.Var.<init>(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Var
5349 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productPrefix: String
6030 ===> org.kiama.example.oberon0.L0.source.DivExp.productElement(x$1: Int): Any
12466 ===> org.kiama.util.ParserUtilitiesTests.Tup2.copy$default$1: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
5164 ===> org.kiama.example.lambda3.LambdaTests.mkvaluetest[T](s: String,r: T): Unit
11468 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.toString(): String
5416 ===> org.kiama.example.oberon0.L0.c.CEqExp.<init>(): org.kiama.example.oberon0.L0.c.CEqExp.type
8087 ===> org.kiama.example.obr.ObrTree.OrExp.<init>(): org.kiama.example.obr.ObrTree.OrExp.type
11269 ===> org.kiama.rewriting.NominalAST.Name.<init>(): org.kiama.rewriting.NominalAST.Name.type
2752 ===> org.kiama.example.iswim.driver.Main.usageMessage: String
478 ===> org.kiama.example.RISC.RISC.main: Unit
11359 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productArity: Int
1339 ===> org.kiama.example.RISC.RISCISA.Comment.<init>(): org.kiama.example.RISC.RISCISA.Comment.type
10863 ===> org.kiama.example.transform.Parser.$init$(): Unit
8947 ===> org.kiama.example.obr.SPARCTree.CmpneW.equals(x$1: Any): Boolean
867 ===> org.kiama.example.RISC.RISCISA.ANDI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
2349 ===> org.kiama.example.iswim.compiler.Syntax.Binding.hashCode(): Int
2786 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.toString(): String
8467 ===> org.kiama.example.obr.RISCTree.DivW.productElement(x$1: Int): Any
9274 ===> org.kiama.example.obr.SymbolTable.Multiple.<init>(): org.kiama.example.obr.SymbolTable.Multiple
2235 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
877 ===> org.kiama.example.RISC.RISCISA.ANDI.toString(): String
2829 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.copy(): org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue
732 ===> org.kiama.example.RISC.RISCISA.DIVI.canEqual(x$1: Any): Boolean
4915 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
4024 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.equals(that: Any): Boolean
2578 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productArity: Int
8774 ===> org.kiama.example.obr.SPARCTree.Jmp.copy(dest: org.kiama.example.obr.SPARCTree.Label): org.kiama.example.obr.SPARCTree.Jmp
7988 ===> org.kiama.example.obr.ObrTree.MinusExp.productPrefix: String
10551 ===> org.kiama.example.til.AST.Num.hashCode(): Int
6017 ===> org.kiama.example.oberon0.L0.source.MulExp.<init>(): org.kiama.example.oberon0.L0.source.MulExp.type
2446 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.par: org.kiama.example.iswim.compiler.Syntax.Variable
11220 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.<init>(): ParenPrettyPrinterTests.this.PreOp.type
12616 ===> org.kiama.util.Tests.$init$(): Unit
1099 ===> org.kiama.example.RISC.RISCISA.RD.productIterator: Iterator[Any]
12037 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
4834 ===> org.kiama.example.lambda2.LambdaTests.assertPrettyS(term: String,result: String): Unit
4641 ===> org.kiama.example.lambda2.AST.Letp.toString(): String
12521 ===> org.kiama.util.ParserUtilitiesTests.Tup4.toString(): String
12593 ===> org.kiama.util.PositionedParserUtilities.OnceParser[T](f: PositionedParserUtilities.this.Input => PositionedParserUtilities.this.ParseResult[T]): PositionedParserUtilities.this.Parser[T] with PositionedParserUtilities.this.OnceParser[T]
11133 ===> org.kiama.output.PrettyPrinterTests.Val.<init>(i: Int): PrettyPrinterTests.this.Val
12516 ===> org.kiama.util.ParserUtilitiesTests.Tup4.canEqual(x$1: Any): Boolean
5353 ===> org.kiama.example.oberon0.L0.c.CInitDecl.canEqual(x$1: Any): Boolean
1964 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.hashCode(): Int
2959 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.<init>(): org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.type
2825 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.apply(): org.kiama.example.iswim.secd.BooleanOps.Equals
4503 ===> org.kiama.example.lambda.Generator.genLamExp(sz: Int): org.scalacheck.Gen[org.kiama.example.lambda.AST.Lam]
6479 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.readResolve(): Object
1755 ===> org.kiama.example.imperative.AST.Asgn.v: org.kiama.example.imperative.AST.Var
1715 ===> org.kiama.example.imperative.AST.Div.<init>(): org.kiama.example.imperative.AST.Div.type
2987 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.toString(): String
10167 ===> org.kiama.example.prolog.SymbolTable.Predicate.productArity: Int
3561 ===> org.kiama.example.iswim.secd.SECDBase.Exit.equals(x$1: Any): Boolean
12218 ===> org.kiama.rewriting.UniplateTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.example.imperative.AST.Idn](x$1: A1,default: A1 => B1): B1
6910 ===> org.kiama.example.oberon0.L4.source.IndexExp.unapply(x$0: org.kiama.example.oberon0.L4.source.IndexExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
10840 ===> org.kiama.example.transform.AST.Num.readResolve(): Object
8311 ===> org.kiama.example.obr.RISCTree.Write.<init>(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.Write
2345 ===> org.kiama.example.iswim.compiler.Syntax.Binding.productArity: Int
12608 ===> org.kiama.util.ParsingREPLBase.process(t: T): Unit
12464 ===> org.kiama.util.ParserUtilitiesTests.Tup2.<init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup2
12325 ===> org.kiama.util.Environments.MultipleEntity.productPrefix: String
3266 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productIterator: Iterator[Any]
7627 ===> org.kiama.example.obr.ObrTree.AssignStmt.<init>(): org.kiama.example.obr.ObrTree.AssignStmt.type
7325 ===> org.kiama.example.oberon0.base.source.Identifier.ident: String
9544 ===> org.kiama.example.oneohonecompanies.Company.PU.productElement(x$1: Int): Any
6286 ===> org.kiama.example.oberon0.L2.Desugarer.casesToIf(ce: org.kiama.example.oberon0.L0.source.IdnExp,cases: List[org.kiama.example.oberon0.L2.source.Case],optelse: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.L1.source.IfStatement
6213 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.<init>(cond: org.kiama.example.oberon0.base.c.CExpression,stmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CWhileStatement
2585 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.<init>(): org.kiama.example.iswim.compiler.Syntax.Tuple.type
4725 ===> org.kiama.example.lambda2.AST.AddOp.productIterator: Iterator[Any]
1390 ===> org.kiama.example.dataflow.DataflowAST.While.copy$default$1: org.kiama.example.dataflow.DataflowAST.Var @scala.annotation.unchecked.uncheckedVariance
2856 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.<init>(): BooleanOps.this.TrueValue.type
5546 ===> org.kiama.example.oberon0.L0.c.CSubExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
8544 ===> org.kiama.example.obr.RISCTree.NegW.toString(): String
10842 ===> org.kiama.example.transform.AST.Var.<init>(name: String): org.kiama.example.transform.AST.Var
6365 ===> org.kiama.example.oberon0.L2.source.Case.unapply(x$0: org.kiama.example.oberon0.L2.source.Case): Option[(List[org.kiama.example.oberon0.L2.source.Condition], org.kiama.example.oberon0.base.source.Block)]
307 ===> org.kiama.attribution.AttributionTests.TripleTree.canEqual(x$1: Any): Boolean
3888 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productIterator: Iterator[Any]
1785 ===> org.kiama.example.imperative.AST.While.productIterator: Iterator[Any]
1882 ===> org.kiama.example.imperative.Generator.genInteger: org.scalacheck.Gen[org.kiama.example.imperative.AST.Num]
4277 ===> org.kiama.example.json.JSONTree.JArray.equals(x$1: Any): Boolean
11723 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11791 ===> org.kiama.rewriting.RewriterTests.Num.<init>(i: Int): Num
4637 ===> org.kiama.example.lambda2.AST.Letp.productElement(x$1: Int): Any
4521 ===> org.kiama.example.lambda2.AST.Num.toString(): String
7965 ===> org.kiama.example.obr.ObrTree.LessExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.LessExp
8969 ===> org.kiama.example.obr.SPARCTree.CmpgtW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpgtW
5898 ===> org.kiama.example.oberon0.L0.source.LeExp.unapply(x$0: org.kiama.example.oberon0.L0.source.LeExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
10018 ===> org.kiama.example.prolog.PrologTree.Clause.bdy: List[org.kiama.example.prolog.PrologTree.Term]
11993 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4499 ===> org.kiama.example.lambda.Generator.genIdn: org.scalacheck.Gen[String]
5449 ===> org.kiama.example.oberon0.L0.c.CLtExp.productArity: Int
6222 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.hashCode(): Int
11661 ===> org.kiama.rewriting.Rewriter.x: Rewriter.this.Strategy
2060 ===> org.kiama.example.iswim.compiler.Syntax.Minus.r: org.kiama.example.iswim.compiler.Syntax.Expr
11637 ===> org.kiama.rewriting.Rewriter.doloop(s: => Rewriter.this.Strategy,c: => Rewriter.this.Strategy): Rewriter.this.Strategy
11164 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.copy$default$1: ParenPrettyPrinterTests.this.Exp @scala.annotation.unchecked.uncheckedVariance
12112 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5230 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.hashCode(): Int
3469 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.readResolve(): Object
3374 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.unapply(x$0: org.kiama.example.iswim.secd.RecordOps.RecordTypeValue): Boolean
11513 ===> org.kiama.rewriting.Rewritable.$init$(): Unit
7676 ===> org.kiama.example.obr.ObrTree.IfStmt.copy$default$2: List[org.kiama.example.obr.ObrTree.Statement] @scala.annotation.unchecked.uncheckedVariance
11763 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2820 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.hashCode(): Int
8775 ===> org.kiama.example.obr.SPARCTree.Jmp.copy$default$1: org.kiama.example.obr.SPARCTree.Label @scala.annotation.unchecked.uncheckedVariance
5819 ===> org.kiama.example.oberon0.L0.source.BinaryExpression.right: org.kiama.example.oberon0.L0.source.Expression
3554 ===> org.kiama.example.iswim.secd.SECDBase.Exit.productPrefix: String
383 ===> org.kiama.attribution.Decorators.error(t: T): Nothing
1935 ===> org.kiama.example.iswim.compiler.Parser.Pos.toString(): String
3661 ===> org.kiama.example.iswim.secd.SECDBase.PushType.ty: org.kiama.example.iswim.secd.SECDBase.TypeValue
8072 ===> org.kiama.example.obr.ObrTree.NotExp.readResolve(): Object
737 ===> org.kiama.example.RISC.RISCISA.DIVI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.DIVI
8066 ===> org.kiama.example.obr.ObrTree.NotExp.toString(): String
11469 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.equals(x$1: Any): Boolean
1096 ===> org.kiama.example.RISC.RISCISA.RD.productPrefix: String
3551 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.readResolve(): Object
3403 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.hashCode(): Int
8685 ===> org.kiama.example.obr.SPARCEncoder.resetavailregs(): Unit
4962 ===> org.kiama.example.lambda3.AST.Exp.<init>(): org.kiama.example.lambda3.AST.Exp
3305 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productElement(x$1: Int): Any
2417 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.productArity: Int
6750 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.toString(): String
1358 ===> org.kiama.example.dataflow.LivenessImpl.icount: Int
3340 ===> org.kiama.example.iswim.secd.RecordOps.GetField.equals(x$1: Any): Boolean
2491 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productIterator: Iterator[Any]
11224 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.readResolve(): Object
12276 ===> org.kiama.util.TestCompiler.filetests(name: String,path: String,srcext: String,resext: String,optinext: Option[String],indefault: String,argslist: List[Array[String]]): Unit
5081 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.productIterator: Iterator[Any]
3633 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.productElement(x$1: Int): Any
4000 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.envir: SECDBase.this.Environment
9882 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.ast: org.kiama.example.picojava.AbstractSyntax.Program
834 ===> org.kiama.example.RISC.RISCISA.CHKI.<init>(): org.kiama.example.RISC.RISCISA.CHKI.type
6702 ===> org.kiama.example.oberon0.L3.source.FPSection.productIterator: Iterator[Any]
9974 ===> org.kiama.example.prolog.Interpreter.MatchGoal.unapply(x$0: org.kiama.example.prolog.Interpreter.MatchGoal): Option[(org.kiama.example.prolog.PrologTree.Term, org.kiama.example.prolog.PrologTree.Term)]
4703 ===> org.kiama.example.lambda2.AST.NoType.copy(): org.kiama.example.lambda2.AST.NoType
3184 ===> org.kiama.example.iswim.secd.IntegerOps.Add.readResolve(): Object
10955 ===> org.kiama.output.NonAssoc.productArity: Int
9660 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.productArity: Int
6916 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productPrefix: String
2754 ===> org.kiama.example.iswim.driver.Main.processArgs(args: List[String]): Boolean
1717 ===> org.kiama.example.imperative.AST.Div.apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Div
3348 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productPrefix: String
5213 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.equals(x$1: Any): Boolean
5203 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.<init>(ident: String,decl: org.kiama.example.oberon0.base.source.ModuleDecl): SymbolTable.this.Module
4218 ===> org.kiama.example.iswim.tests.SECDTests.$anon.verify: Unit
9455 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.productIterator: Iterator[Any]
735 ===> org.kiama.example.RISC.RISCISA.DIVI.<init>(): org.kiama.example.RISC.RISCISA.DIVI.type
8243 ===> org.kiama.example.obr.RISCTree.Jmp.<init>(dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Jmp
8930 ===> org.kiama.example.obr.SPARCTree.CmpeqW.toString(): String
5701 ===> org.kiama.example.oberon0.L0.c.CIdnExp.i: String
3925 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.MalformedInstruction): Boolean
2090 ===> org.kiama.example.iswim.compiler.Syntax.Times.toString(): String
10859 ===> org.kiama.example.transform.Analysis.ast: org.kiama.example.transform.AST.ExpR => org.kiama.example.transform.AST.Exp
7438 ===> org.kiama.example.obr.ObrTree.ObrInt.productArity: Int
2800 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productPrefix: String
4866 ===> org.kiama.example.lambda2.ParLazy.$init$(): Unit
6660 ===> org.kiama.example.oberon0.L3.source.Mode.<init>(): org.kiama.example.oberon0.L3.source.Mode
5756 ===> org.kiama.example.oberon0.L0.source.VarDecl.toString(): String
1321 ===> org.kiama.example.RISC.RISCISA.Target.equals(x$1: Any): Boolean
6653 ===> org.kiama.example.oberon0.L3.source.ProcDecl.toString(): String
2130 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.<init>(): org.kiama.example.iswim.compiler.Syntax.Remainder.type
11331 ===> org.kiama.rewriting.PositionalRewriterTests.l2: org.kiama.rewriting.SupportPositionalRewriterTests.Leaf
5087 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.toString(): String
4948 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3732 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.productIterator: Iterator[Any]
8517 ===> org.kiama.example.obr.RISCTree.MulW.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
5102 ===> org.kiama.example.lambda3.AST.FreshQuery.canEqual(x$1: Any): Boolean
2629 ===> org.kiama.example.iswim.compiler.Syntax.Match.copy(ctrl: org.kiama.example.iswim.compiler.Syntax.Expr,clauses: List[org.kiama.example.iswim.compiler.Syntax.MatchClause]): org.kiama.example.iswim.compiler.Syntax.Match
218 ===> org.kiama.attribution.AttributionTests.ListTree.productPrefix: String
5266 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.canEqual(x$1: Any): Boolean
4424 ===> org.kiama.example.lambda.AST.Lam.e: org.kiama.example.lambda.AST.Exp
4647 ===> org.kiama.example.lambda2.AST.Letp.readResolve(): Object
507 ===> org.kiama.example.RISC.RISCISA.MOV.unapply(x$0: org.kiama.example.RISC.RISCISA.MOV): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
6490 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productArity: Int
7573 ===> org.kiama.example.obr.ObrTree.EnumConst.apply(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.EnumConst
8745 ===> org.kiama.example.obr.SPARCTree.Beq.hashCode(): Int
8915 ===> org.kiama.example.obr.SPARCTree.CmpeqW.l: org.kiama.example.obr.SPARCTree.Datum
2600 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.toString(): String
7784 ===> org.kiama.example.obr.ObrTree.TryBody.productPrefix: String
12310 ===> org.kiama.util.FileEmitter.close(): Unit
11515 ===> org.kiama.rewriting.Rewritable.deconstruct: Seq[org.kiama.rewriting.Rewriter.Term]
8696 ===> org.kiama.example.obr.SPARCEncoder.prologue(memsize: Int): Unit
4998 ===> org.kiama.example.lambda3.AST.App.e2: org.kiama.example.lambda3.AST.Exp
1295 ===> org.kiama.example.RISC.RISCISA.RET.toString(): String
2411 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.readResolve(): Object
9475 ===> org.kiama.example.obr.tests.ObrExecTests.exceptionsExecTests: List[(String, List[Int], Int)]
11452 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.PositionedRewriter.Term, B1 >: Option[org.kiama.rewriting.PositionedRewriter.Term]](x$1: A1,default: A1 => B1): B1
5324 ===> org.kiama.example.oberon0.L0.TypeAnalyser.deftypeDef: org.kiama.example.oberon0.L0.source.TypeDef => TypeAnalyser.this.Type
12123 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1616 ===> org.kiama.example.imperative.AST.Neg.depth: Int
4171 ===> org.kiama.example.iswim.secd.StringOps.StringValue.productPrefix: String
12116 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3770 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue): Boolean
801 ===> org.kiama.example.RISC.RISCISA.CMPI.b: org.kiama.example.RISC.RISCISA.RegNo
5249 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.equals(x$1: Any): Boolean
3665 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productPrefix: String
1832 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
851 ===> org.kiama.example.RISC.RISCISA.AND.productIterator: Iterator[Any]
8203 ===> org.kiama.example.obr.RISCTree.Item.<init>(): org.kiama.example.obr.RISCTree.Item
1582 ===> org.kiama.example.imperative.AST.Num.canEqual(x$1: Any): Boolean
9821 ===> org.kiama.example.picojava.ErrorCheck.<init>(): org.kiama.example.picojava.ErrorCheck.type
6970 ===> org.kiama.example.oberon0.L4.source.FieldIdn.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
7686 ===> org.kiama.example.obr.ObrTree.IfStmt.<init>(): org.kiama.example.obr.ObrTree.IfStmt.type
11311 ===> org.kiama.rewriting.NominalRewriter.Binding.unapply(b: org.kiama.rewriting.NominalAST.Bind): Option[(org.kiama.rewriting.NominalAST.Name, NominalRewriter.this.Term)]
1497 ===> org.kiama.example.dataflow.DataflowForeach.$anonfun.applyOrElse[A1 <: org.kiama.example.dataflow.DataflowAST.Stm, B1 >: Set[org.kiama.example.dataflow.DataflowAST.Stm]](x$1: A1,default: A1 => B1): B1
4138 ===> org.kiama.example.iswim.secd.StringOps.PushString.productElement(x$1: Int): Any
11321 ===> org.kiama.rewriting.PositionalRewriterTests.<init>(): org.kiama.rewriting.PositionalRewriterTests
7057 ===> org.kiama.example.oberon0.base.Transformer.$init$(): Unit
7098 ===> org.kiama.example.oberon0.base.c.CInclude.readResolve(): Object
5711 ===> org.kiama.example.oberon0.L0.c.CIdnExp.toString(): String
5185 ===> org.kiama.example.oberon0.L0.NameAnalyser.envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
6907 ===> org.kiama.example.oberon0.L4.source.IndexExp.<init>(): org.kiama.example.oberon0.L4.source.IndexExp.type
8502 ===> org.kiama.example.obr.RISCTree.LdW.productIterator: Iterator[Any]
498 ===> org.kiama.example.RISC.RISCISA.MOV.productArity: Int
2073 ===> org.kiama.example.iswim.compiler.Syntax.Minus.<init>(): org.kiama.example.iswim.compiler.Syntax.Minus.type
691 ===> org.kiama.example.RISC.RISCISA.MULI.hashCode(): Int
7114 ===> org.kiama.example.oberon0.base.c.CVarDecl.<init>(): org.kiama.example.oberon0.base.c.CVarDecl.type
9338 ===> org.kiama.example.obr.SymbolTable.ArrayType.equals(x$1: Any): Boolean
6633 ===> org.kiama.example.oberon0.L3.c.PrettyPrinter.$init$(): Unit
7461 ===> org.kiama.example.obr.ObrTree.IntVar.toString(): String
692 ===> org.kiama.example.RISC.RISCISA.MULI.equals(x$1: Any): Boolean
9003 ===> org.kiama.example.obr.SPARCTree.DivW.toString(): String
5905 ===> org.kiama.example.oberon0.L0.source.GtExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
11003 ===> org.kiama.output.PrettyUnaryExpression.op: String
4648 ===> org.kiama.example.lambda2.AST.Bind.i: org.kiama.example.lambda2.AST.Idn
9965 ===> org.kiama.example.prolog.Interpreter.MatchGoal.productElement(x$1: Int): Any
8306 ===> org.kiama.example.obr.RISCTree.StW.toString(): String
1840 ===> org.kiama.example.imperative.ASTNonCase.Num.deconstruct: List[Double]
8860 ===> org.kiama.example.obr.SPARCTree.Write.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
12036 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4328 ===> org.kiama.example.json.JSONTree.JTrue.toString(): String
5436 ===> org.kiama.example.oberon0.L0.c.CNeExp.<init>(): org.kiama.example.oberon0.L0.c.CNeExp.type
1396 ===> org.kiama.example.dataflow.DataflowAST.While.canEqual(x$1: Any): Boolean
2729 ===> org.kiama.example.iswim.compiler.Syntax.Assign.<init>(): org.kiama.example.iswim.compiler.Syntax.Assign.type
2601 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.equals(x$1: Any): Boolean
6086 ===> org.kiama.example.oberon0.L0.source.NegExp.copy(exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NegExp
8161 ===> org.kiama.example.obr.RISCEncoder.exitlab: Int
7993 ===> org.kiama.example.obr.ObrTree.MinusExp.hashCode(): Int
4134 ===> org.kiama.example.iswim.secd.StringOps.PushString.copy(s: String): org.kiama.example.iswim.secd.StringOps.PushString
6980 ===> org.kiama.example.oberon0.L4.source.FieldIdn.toString(): String
11449 ===> org.kiama.rewriting.PositionedRewriterTests.r: org.kiama.rewriting.PositionedRewriter.Strategy
5616 ===> org.kiama.example.oberon0.L0.c.CDivExp.<init>(): org.kiama.example.oberon0.L0.c.CDivExp.type
6486 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.copy$default$1: org.kiama.example.oberon0.L3.source.Mode @scala.annotation.unchecked.uncheckedVariance
5140 ===> org.kiama.example.lambda3.AST.SwapQuery.productPrefix: String
662 ===> org.kiama.example.RISC.RISCISA.MUL.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MUL
2084 ===> org.kiama.example.iswim.compiler.Syntax.Times.productPrefix: String
9542 ===> org.kiama.example.oneohonecompanies.Company.PU.productPrefix: String
7935 ===> org.kiama.example.obr.ObrTree.IndexExp.productElement(x$1: Int): Any
11204 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.prio: Int
11823 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5800 ===> org.kiama.example.oberon0.L0.source.Assignment.copy(desig: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.Assignment
1419 ===> org.kiama.example.dataflow.DataflowAST.If.toString(): String
2530 ===> org.kiama.example.iswim.compiler.Syntax.While.productElement(x$1: Int): Any
5359 ===> org.kiama.example.oberon0.L0.c.CInitDecl.apply(decl: org.kiama.example.oberon0.base.c.CVarDecl,e: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CInitDecl
3221 ===> org.kiama.example.iswim.secd.IntegerOps.Div.canEqual(x$1: Any): Boolean
12407 ===> org.kiama.util.Messaging.sortedmessages: Seq[org.kiama.util.Messaging.Record]
1700 ===> org.kiama.example.imperative.AST.Div.r: org.kiama.example.imperative.AST.Exp
6353 ===> org.kiama.example.oberon0.L2.source.Case.copy$default$2: org.kiama.example.oberon0.base.source.Block @scala.annotation.unchecked.uncheckedVariance
2488 ===> org.kiama.example.iswim.compiler.Syntax.Apply.productPrefix: String
9825 ===> org.kiama.example.picojava.ErrorCheck.isQualified: org.kiama.example.picojava.AbstractSyntax.IdnUse => Boolean
6372 ===> org.kiama.example.oberon0.L2.source.ValCond.productPrefix: String
10676 ===> org.kiama.example.til.AST.Ne.copy$default$2: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
94 ===> org.kiama.attribution.Attribution.CachedDynamicAttribute.block(b: => Any): Unit
6635 ===> org.kiama.example.oberon0.L3.c.PrettyPrinter.basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType): PrettyPrinter.this.Doc
8561 ===> org.kiama.example.obr.RISCTree.Not.toString(): String
7168 ===> org.kiama.example.oberon0.base.c.CIntType.toString(): String
886 ===> org.kiama.example.RISC.RISCISA.OR.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
7067 ===> org.kiama.example.oberon0.base.c.CProgram.copy$default$1: List[org.kiama.example.oberon0.base.c.CInclude] @scala.annotation.unchecked.uncheckedVariance
1518 ===> org.kiama.example.dataflow.For.toString(): String
11168 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.productPrefix: String
2672 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.canEqual(x$1: Any): Boolean
4726 ===> org.kiama.example.lambda2.AST.AddOp.canEqual(x$1: Any): Boolean
534 ===> org.kiama.example.RISC.RISCISA.MVN.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
4800 ===> org.kiama.example.lambda2.Evaluators.evalmap: scala.collection.immutable.Map[String,org.kiama.example.lambda2.Reduce]
4893 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11343 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.PositionalRewriter.Term, B1 >: org.kiama.rewriting.PositionalRewriter.Term](x$1: A1,default: A1 => B1): B1
2594 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.productPrefix: String
526 ===> org.kiama.example.RISC.RISCISA.MOVI.toString(): String
7314 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productIterator: Iterator[Any]
6665 ===> org.kiama.example.oberon0.L3.source.VarMode.productElement(x$1: Int): Any
11678 ===> org.kiama.rewriting.Rewriter.ispropersubterm: Rewriter.this.Strategy
6913 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.<init>(fields: List[org.kiama.example.oberon0.L4.source.FieldList]): org.kiama.example.oberon0.L4.source.RecordTypeDef
12620 ===> org.kiama.util.Tests.expectsame(expected: Any)(actual: Any): Unit
3454 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.copy$default$1: Option[org.kiama.example.iswim.secd.SECDBase.Name] @scala.annotation.unchecked.uncheckedVariance
12545 ===> org.kiama.util.ParserUtilitiesTests.Tup5.<init>(): ParserUtilitiesTests.this.Tup5.type
10815 ===> org.kiama.example.transform.AST.BinExp.hashCode(): Int
3767 ===> org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.ClosureTypeValue.type
6160 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode): PrettyPrinter.this.Doc
4740 ===> org.kiama.example.lambda2.AST.SubOp.productElement(x$1: Int): Any
927 ===> org.kiama.example.RISC.RISCISA.XOR.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
3472 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.toDoc: org.kiama.example.iswim.driver.PrettyPrinter.Doc
1157 ===> org.kiama.example.RISC.RISCISA.Branch.<init>(): org.kiama.example.RISC.RISCISA.Branch
9171 ===> org.kiama.example.obr.SPARCTree.Indexed.readResolve(): Object
6268 ===> org.kiama.example.oberon0.L1.source.WhileStatement.equals(x$1: Any): Boolean
3586 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.productPrefix: String
664 ===> org.kiama.example.RISC.RISCISA.MUL.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MUL
9004 ===> org.kiama.example.obr.SPARCTree.DivW.equals(x$1: Any): Boolean
3060 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.equals(that: Any): Boolean
11628 ===> org.kiama.rewriting.Rewriter.attempt(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
10102 ===> org.kiama.example.prolog.PrologTree.Atom.hashCode(): Int
6262 ===> org.kiama.example.oberon0.L1.source.WhileStatement.productArity: Int
846 ===> org.kiama.example.RISC.RISCISA.AND.toString(): String
6127 ===> org.kiama.example.oberon0.L0.source.IntExp.productIterator: Iterator[Any]
10238 ===> org.kiama.example.prolog.SymbolTable.ListType.toString(): String
4177 ===> org.kiama.example.iswim.secd.StringOps.StringValue.equals(x$1: Any): Boolean
11641 ===> org.kiama.rewriting.Rewriter.where(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
10411 ===> org.kiama.example.til.AST.IfElse.t: Seq[org.kiama.example.til.AST.Stat]
10691 ===> org.kiama.example.til.TIL1_1.whiteSpace: scala.util.matching.Regex
9906 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.copy(ps: Set[(String, org.kiama.example.prolog.PrologTree.Term)]): org.kiama.example.prolog.Interpreter.DisplayGoal
6484 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.<init>(mode: org.kiama.example.oberon0.L3.source.Mode,ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.ParamInfo
4295 ===> org.kiama.example.json.JSONTree.JString.<init>(): org.kiama.example.json.JSONTree.JString.type
3724 ===> org.kiama.example.iswim.secd.SECDBase.Value.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
6519 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.readResolve(): Object
1659 ===> org.kiama.example.imperative.AST.Sub.l: org.kiama.example.imperative.AST.Exp
11573 ===> org.kiama.rewriting.Rewriter.Term.unapply(t: Any): Option[(Any, Seq[Any])]
4737 ===> org.kiama.example.lambda2.AST.SubOp.copy(): org.kiama.example.lambda2.AST.SubOp
809 ===> org.kiama.example.RISC.RISCISA.CMPI.productArity: Int
8007 ===> org.kiama.example.obr.ObrTree.ModExp.productPrefix: String
3660 ===> org.kiama.example.iswim.secd.SECDBase.PushMachineException.readResolve(): Object
11977 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10965 ===> org.kiama.output.Prefix.productArity: Int
7164 ===> org.kiama.example.oberon0.base.c.CIntType.productElement(x$1: Int): Any
9462 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.unapply(x$0: SyntaxAnalysis.this.Pos): Option[String]
415 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productElement(x$1: Int): Any
581 ===> org.kiama.example.RISC.RISCISA.ADD.productPrefix: String
7196 ===> org.kiama.example.oberon0.base.c.CArrayType.productPrefix: String
12352 ===> org.kiama.util.Environments.UnknownEntity.readResolve(): Object
2623 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.apply(p: org.kiama.example.iswim.compiler.Syntax.Pattern,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MatchClause
9604 ===> org.kiama.example.oneohonecompanies.SampleCompany.dev1: org.kiama.example.oneohonecompanies.Company.Dept
11276 ===> org.kiama.rewriting.NominalAST.Bind.name: org.kiama.rewriting.NominalAST.Name
8938 ===> org.kiama.example.obr.SPARCTree.CmpneW.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
9270 ===> org.kiama.example.obr.SymbolTable.Unknown.toString(): String
5250 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.<init>(): SymbolTable.this.Variable.type
6715 ===> org.kiama.example.oberon0.L3.source.Call.copy(idnuse: org.kiama.example.oberon0.base.source.IdnUse,params: List[org.kiama.example.oberon0.L0.source.Expression]): org.kiama.example.oberon0.L3.source.Call
8091 ===> org.kiama.example.obr.ObrTree.OrExp.readResolve(): Object
8218 ===> org.kiama.example.obr.RISCTree.Beq.<init>(): org.kiama.example.obr.RISCTree.Beq.type
4338 ===> org.kiama.example.json.JSONTree.JFalse.canEqual(x$1: Any): Boolean
11127 ===> org.kiama.output.PrettyPrinter.pretty$default$2: PrettyPrinter.this.Width @scala.annotation.unchecked.uncheckedVariance
2787 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.equals(x$1: Any): Boolean
10342 ===> org.kiama.example.til.AST.Program.productArity: Int
8225 ===> org.kiama.example.obr.RISCTree.Bne.<init>(cond: org.kiama.example.obr.RISCTree.Datum,dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Bne
9447 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.s: String
4705 ===> org.kiama.example.lambda2.AST.NoType.productArity: Int
1134 ===> org.kiama.example.RISC.RISCISA.WRH.canEqual(x$1: Any): Boolean
106 ===> org.kiama.attribution.Attribution.$anon.<init>(): Attribution.this.CachedParamAttribute[A,T,U]{}
9548 ===> org.kiama.example.oneohonecompanies.Company.PU.toString(): String
9377 ===> org.kiama.example.obr.SymbolTable.RecordTypes.readResolve(): Object
6230 ===> org.kiama.example.oberon0.L1.c.PrettyPrinter.$init$(): Unit
10209 ===> org.kiama.example.prolog.SymbolTable.AtomType.apply(): org.kiama.example.prolog.SymbolTable.AtomType
1876 ===> org.kiama.example.imperative.ImperativeTests.<init>(): org.kiama.example.imperative.ImperativeTests
8020 ===> org.kiama.example.obr.ObrTree.NegExp.exp: org.kiama.example.obr.ObrTree.Expression
6321 ===> org.kiama.example.oberon0.L2.source.ForStatement.equals(x$1: Any): Boolean
6394 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.productIterator: Iterator[Any]
11098 ===> org.kiama.output.PrettyPrinterBase.rbracket: PrettyPrinterBase.this.Doc
10410 ===> org.kiama.example.til.AST.IfElse.e: org.kiama.example.til.AST.Exp
2439 ===> org.kiama.example.iswim.compiler.Syntax.Import.toString(): String
4373 ===> org.kiama.example.json.Rewriter.<init>(): org.kiama.example.json.Rewriter.type
12348 ===> org.kiama.util.Environments.UnknownEntity.<init>(): Environments.this.UnknownEntity.type
8672 ===> org.kiama.example.obr.RISCTree.Label.toString(): String
5483 ===> org.kiama.example.oberon0.L0.c.CGtExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CGtExp
354 ===> org.kiama.attribution.AttributionTests.$anon.apply(t: AttributionTests.this.Tree): Int
1429 ===> org.kiama.example.dataflow.DataflowAST.Block.copy$default$1: List[org.kiama.example.dataflow.DataflowAST.Stm] @scala.annotation.unchecked.uncheckedVariance
850 ===> org.kiama.example.RISC.RISCISA.AND.productElement(x$1: Int): Any
2941 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.unapply(x$0: org.kiama.example.iswim.secd.ConversionOps.ConversionError): Boolean
2294 ===> org.kiama.example.iswim.compiler.Syntax.And.hashCode(): Int
7634 ===> org.kiama.example.obr.ObrTree.ExitStmt.productPrefix: String
2093 ===> org.kiama.example.iswim.compiler.Syntax.Times.toString(): String
8472 ===> org.kiama.example.obr.RISCTree.DivW.equals(x$1: Any): Boolean
1598 ===> org.kiama.example.imperative.AST.Var.copy$default$1: org.kiama.example.imperative.AST.Idn @scala.annotation.unchecked.uncheckedVariance
4784 ===> org.kiama.example.lambda2.Analysis.tipe2: org.kiama.example.lambda2.AST.Exp => org.kiama.example.lambda2.AST.Type
689 ===> org.kiama.example.RISC.RISCISA.MULI.productIterator: Iterator[Any]
3593 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.equals(x$1: Any): Boolean
10216 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productArity: Int
9760 ===> org.kiama.example.picojava.AbstractSyntax.Dot.productIterator: Iterator[Any]
3321 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productIterator: Iterator[Any]
4704 ===> org.kiama.example.lambda2.AST.NoType.productPrefix: String
9665 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.toString(): String
11476 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.r: org.kiama.rewriting.SupportPositionedRewriterTests.Node
9505 ===> org.kiama.example.oneohonecompanies.Company.Dept.productElement(x$1: Int): Any
5135 ===> org.kiama.example.lambda3.AST.SwapQuery.<init>(tr: (org.kiama.rewriting.NominalAST.Name, org.kiama.rewriting.NominalAST.Name),e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.SwapQuery
549 ===> org.kiama.example.RISC.RISCISA.MVN.unapply(x$0: org.kiama.example.RISC.RISCISA.MVN): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
12088 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11456 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionedRewriter.Term): Boolean
3479 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.canEqual(x$1: Any): Boolean
11687 ===> org.kiama.rewriting.Rewriter.isinnernode: Rewriter.this.Strategy
1325 ===> org.kiama.example.RISC.RISCISA.Target.unapply(x$0: org.kiama.example.RISC.RISCISA.Target): Option[Int]
2520 ===> org.kiama.example.iswim.compiler.Syntax.If.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.If): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
9434 ===> org.kiama.example.obr.SymbolTable.UnknownType.productIterator: Iterator[Any]
11717 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2382 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productPrefix: String
5077 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.copy$default$1: org.kiama.example.lambda3.AST.Exp @scala.annotation.unchecked.uncheckedVariance
5474 ===> org.kiama.example.oberon0.L0.c.CLeExp.toString(): String
10995 ===> org.kiama.output.Infix.apply(side: org.kiama.output.Side): org.kiama.output.Infix
10975 ===> org.kiama.output.Postfix.productElement(x$1: Int): Any
9332 ===> org.kiama.example.obr.SymbolTable.ArrayType.productPrefix: String
11536 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy
8232 ===> org.kiama.example.obr.RISCTree.Bne.productIterator: Iterator[Any]
6962 ===> org.kiama.example.oberon0.L4.source.FieldExp.<init>(): org.kiama.example.oberon0.L4.source.FieldExp.type
1544 ===> org.kiama.example.dataflow.DataflowTests.s1: org.kiama.example.dataflow.DataflowAST.Assign
11508 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.apply(i: Int): org.kiama.rewriting.SupportPositionedRewriterTests.Leaf
8965 ===> org.kiama.example.obr.SPARCTree.CmpgtW.toString(): String
6807 ===> org.kiama.example.oberon0.L4.TypeAnalyser.$init$(): Unit
3860 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.hashCode(): Int
3514 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.toString(): String
5160 ===> org.kiama.example.lambda3.LambdaTests.<init>(): org.kiama.example.lambda3.LambdaTests
3425 ===> org.kiama.example.iswim.secd.SECDBase.CodeTree.<init>(): org.kiama.example.iswim.secd.SECDBase.CodeTree.type
1006 ===> org.kiama.example.RISC.RISCISA.LDB.readResolve(): Object
6269 ===> org.kiama.example.oberon0.L1.source.WhileStatement.<init>(): org.kiama.example.oberon0.L1.source.WhileStatement.type
9486 ===> org.kiama.example.oneohonecompanies.Company.Company.canEqual(x$1: Any): Boolean
11643 ===> org.kiama.rewriting.Rewriter.breadthfirst(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2162 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.productElement(x$1: Int): Any
12129 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9814 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.toString(): String
8038 ===> org.kiama.example.obr.ObrTree.NotEqualExp.right: org.kiama.example.obr.ObrTree.Expression
11995 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8658 ===> org.kiama.example.obr.RISCTree.Indexed.readResolve(): Object
6979 ===> org.kiama.example.oberon0.L4.source.FieldIdn.<init>(): org.kiama.example.oberon0.L4.source.FieldIdn.type
10240 ===> org.kiama.example.prolog.SymbolTable.ListType.unapply(x$0: org.kiama.example.prolog.SymbolTable.ListType): Boolean
10652 ===> org.kiama.example.til.AST.Eq.l: org.kiama.example.til.AST.Exp
10669 ===> org.kiama.example.til.AST.Eq.unapply(x$0: org.kiama.example.til.AST.Eq): Option[(org.kiama.example.til.AST.Exp, org.kiama.example.til.AST.Exp)]
1836 ===> org.kiama.example.imperative.ASTNonCase.Exp.<init>(): org.kiama.example.imperative.ASTNonCase.Exp
6439 ===> org.kiama.example.oberon0.L3.Parser.declarationsDef: Parser.this.PackratParser[List[org.kiama.example.oberon0.base.source.Declaration]]
2295 ===> org.kiama.example.iswim.compiler.Syntax.And.toString(): String
5453 ===> org.kiama.example.oberon0.L0.c.CLtExp.hashCode(): Int
10748 ===> org.kiama.example.transform.AST.VarDecl.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
2780 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.productPrefix: String
6364 ===> org.kiama.example.oberon0.L2.source.Case.apply(conds: List[org.kiama.example.oberon0.L2.source.Condition],block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L2.source.Case
4476 ===> org.kiama.example.lambda.AST.Sub.equals(x$1: Any): Boolean
10519 ===> org.kiama.example.til.AST.Id.equals(x$1: Any): Boolean
6098 ===> org.kiama.example.oberon0.L0.source.NegExp.apply(exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NegExp
7298 ===> org.kiama.example.oberon0.base.source.Block.productElement(x$1: Int): Any
5573 ===> org.kiama.example.oberon0.L0.c.COrExp.hashCode(): Int
11291 ===> org.kiama.rewriting.NominalAST.Bind.toString(): String
6012 ===> org.kiama.example.oberon0.L0.source.MulExp.productIterator: Iterator[Any]
4120 ===> org.kiama.example.iswim.secd.StackOps.Swap.equals(x$1: Any): Boolean
5524 ===> org.kiama.example.oberon0.L0.c.CAddExp.priority: Int
12006 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6020 ===> org.kiama.example.oberon0.L0.source.MulExp.unapply(x$0: org.kiama.example.oberon0.L0.source.MulExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
5499 ===> org.kiama.example.oberon0.L0.c.CGtExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CGtExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
10627 ===> org.kiama.example.til.AST.Add.equals(x$1: Any): Boolean
11770 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
12567 ===> org.kiama.util.ParserUtilitiesTests.Tup6.productIterator: Iterator[Any]
5440 ===> org.kiama.example.oberon0.L0.c.CNeExp.readResolve(): Object
10378 ===> org.kiama.example.til.AST.Assign.productPrefix: String
4852 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5768 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productElement(x$1: Int): Any
5222 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.copy(ident: String,decl: org.kiama.example.oberon0.L0.source.ConstDecl): SymbolTable.this.Constant
10255 ===> org.kiama.example.prolog.SymbolTable.UnknownType.unapply(x$0: org.kiama.example.prolog.SymbolTable.UnknownType): Boolean
10080 ===> org.kiama.example.prolog.PrologTree.Integer.productArity: Int
5054 ===> org.kiama.example.lambda3.AST.EquivQuery.readResolve(): Object
11454 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.PositionedRewriter.Term,org.kiama.rewriting.PositionedRewriter.Strategy] with Serializable
9383 ===> org.kiama.example.obr.SymbolTable.EnumType.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
2854 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.hashCode(): Int
2892 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.toString(): String
2511 ===> org.kiama.example.iswim.compiler.Syntax.If.productElement(x$1: Int): Any
11984 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4783 ===> org.kiama.example.lambda2.Analysis.lookup(name: org.kiama.example.lambda2.AST.Idn): org.kiama.example.lambda2.AST.Exp => Option[org.kiama.example.lambda2.AST.Lam]
7447 ===> org.kiama.example.obr.ObrTree.ObrInt.apply(idn1: org.kiama.example.obr.ObrTree.Identifier,decls: List[org.kiama.example.obr.ObrTree.Declaration],stmts: List[org.kiama.example.obr.ObrTree.Statement],idn2: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.ObrInt
12349 ===> org.kiama.util.Environments.UnknownEntity.toString(): String
6214 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.copy(cond: org.kiama.example.oberon0.base.c.CExpression,stmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CWhileStatement
3937 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.<init>(): org.kiama.example.iswim.secd.SECDBase.MatchError.type
10750 ===> org.kiama.example.transform.AST.VarDecl.productArity: Int
6026 ===> org.kiama.example.oberon0.L0.source.DivExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
10215 ===> org.kiama.example.prolog.SymbolTable.IntegerType.productPrefix: String
11832 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9272 ===> org.kiama.example.obr.SymbolTable.Unknown.unapply(x$0: org.kiama.example.obr.SymbolTable.Unknown): Boolean
12551 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n2: ParserUtilitiesTests.this.Node
11690 ===> org.kiama.rewriting.Rewriter.everywhere(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
5486 ===> org.kiama.example.oberon0.L0.c.CGtExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
1740 ===> org.kiama.example.imperative.AST.Seqn.copy(ss: Seq[org.kiama.example.imperative.AST.Stmt]): org.kiama.example.imperative.AST.Seqn
9019 ===> org.kiama.example.obr.SPARCTree.IntDatum.hashCode(): Int
9290 ===> org.kiama.example.obr.SymbolTable.TypeBase.<init>(): org.kiama.example.obr.SymbolTable.TypeBase
10852 ===> org.kiama.example.transform.AST.Var.equals(x$1: Any): Boolean
10306 ===> org.kiama.example.repmin.Leaf.equals(x$1: Any): Boolean
10506 ===> org.kiama.example.til.AST.Write.readResolve(): Object
7128 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.productArity: Int
11471 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.toString(): String
11626 ===> org.kiama.rewriting.Rewriter.$anonfun.$anonfun.isDefinedAt(x$1: Rewriter.this.Term): Boolean
7801 ===> org.kiama.example.obr.ObrTree.Catch.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
6043 ===> org.kiama.example.oberon0.L0.source.ModExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.ModExp
1211 ===> org.kiama.example.RISC.RISCISA.BLT.readResolve(): Object
12540 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productIterator: Iterator[Any]
541 ===> org.kiama.example.RISC.RISCISA.MVN.productElement(x$1: Int): Any
6841 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productElement(x$1: Int): Any
11999 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5773 ===> org.kiama.example.oberon0.L0.source.TypeDecl.equals(x$1: Any): Boolean
11231 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.productElement(x$1: Int): Any
11705 ===> org.kiama.rewriting.RewriterClassTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10012 ===> org.kiama.example.prolog.PrologTree.Program.toString(): String
4722 ===> org.kiama.example.lambda2.AST.AddOp.productPrefix: String
11876 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8457 ===> org.kiama.example.obr.RISCTree.CmpltW.unapply(x$0: org.kiama.example.obr.RISCTree.CmpltW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
11173 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.hashCode(): Int
4680 ===> org.kiama.example.lambda2.AST.IntType.apply(): org.kiama.example.lambda2.AST.IntType
5789 ===> org.kiama.example.oberon0.L0.source.NamedType.hashCode(): Int
11867 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4103 ===> org.kiama.example.iswim.secd.StackOps.Dup.toString(): String
3700 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.hashCode(): Int
4822 ===> org.kiama.example.lambda2.LambdaTests.assertType(e: org.kiama.example.lambda2.AST.Exp,aname: String,a: org.kiama.example.lambda2.AST.Exp => org.kiama.example.lambda2.AST.Type,line: Int,col: Int,msg: String): Unit
3139 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.hashCode(): Int
9719 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productElement(x$1: Int): Any
2470 ===> org.kiama.example.iswim.compiler.Syntax.Return.productArity: Int
8359 ===> org.kiama.example.obr.RISCTree.AddW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.AddW
3319 ===> org.kiama.example.iswim.secd.RecordOps.Fields.productArity: Int
949 ===> org.kiama.example.RISC.RISCISA.XORI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.XORI
5241 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3869 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.copy(): org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination
9435 ===> org.kiama.example.obr.SymbolTable.UnknownType.canEqual(x$1: Any): Boolean
11836 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5358 ===> org.kiama.example.oberon0.L0.c.CInitDecl.toString(): String
8285 ===> org.kiama.example.obr.RISCTree.Ret.equals(x$1: Any): Boolean
4824 ===> org.kiama.example.lambda2.LambdaTests.canon(x: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Exp
12203 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7536 ===> org.kiama.example.obr.ObrTree.RecordVar.toString(): String
6163 ===> org.kiama.example.oberon0.L1.CCodeGenerator.$init$(): Unit
9777 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.productIterator: Iterator[Any]
4850 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
4554 ===> org.kiama.example.lambda2.AST.Lam.productArity: Int
9136 ===> org.kiama.example.obr.SPARCTree.Local.offset: Int
10505 ===> org.kiama.example.til.AST.Write.unapply(x$0: org.kiama.example.til.AST.Write): Option[org.kiama.example.til.AST.Exp]
2390 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.<init>(): org.kiama.example.iswim.compiler.Syntax.LetRec.type
7834 ===> org.kiama.example.obr.ObrTree.AndExp.unapply(x$0: org.kiama.example.obr.ObrTree.AndExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
10604 ===> org.kiama.example.til.AST.Div.productIterator: Iterator[Any]
517 ===> org.kiama.example.RISC.RISCISA.MOVI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
11379 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productElement(x$1: Int): Any
11498 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productPrefix: String
6989 ===> org.kiama.example.oberon0.base.CCodeGenerator.$init$(): Unit
11578 ===> org.kiama.rewriting.Rewriter.child(i: Int,s: Rewriter.this.Strategy): Rewriter.this.Strategy
11664 ===> org.kiama.rewriting.Rewriter.alldownup2(s1: => Rewriter.this.Strategy,s2: => Rewriter.this.Strategy): Rewriter.this.Strategy
9029 ===> org.kiama.example.obr.SPARCTree.LdW.copy(mem: org.kiama.example.obr.SPARCTree.Address): org.kiama.example.obr.SPARCTree.LdW
280 ===> org.kiama.attribution.AttributionTests.MapTree.unapply(x$0: AttributionTests.this.MapTree): Option[Map[AttributionTests.this.Tree,AttributionTests.this.Tree]]
873 ===> org.kiama.example.RISC.RISCISA.ANDI.canEqual(x$1: Any): Boolean
5927 ===> org.kiama.example.oberon0.L0.source.GeExp.productElement(x$1: Int): Any
1703 ===> org.kiama.example.imperative.AST.Div.divsbyzero: Int
7593 ===> org.kiama.example.obr.ObrTree.IntConst.unapply(x$0: org.kiama.example.obr.ObrTree.IntConst): Option[(org.kiama.example.obr.ObrTree.Identifier, Int)]
1346 ===> org.kiama.example.dataflow.ControlFlow.following: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Stm]
11881 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5129 ===> org.kiama.example.lambda3.AST.SubstQuery.toString(): String
10051 ===> org.kiama.example.prolog.PrologTree.Rule.<init>(): org.kiama.example.prolog.PrologTree.Rule.type
479 ===> org.kiama.example.RISC.RISC.execute(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
8041 ===> org.kiama.example.obr.ObrTree.NotEqualExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
9202 ===> org.kiama.example.obr.SemanticAnalysis.envout: org.kiama.example.obr.ObrTree.ObrNode => org.kiama.example.obr.SymbolTable.Environment
6927 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.unapply(x$0: org.kiama.example.oberon0.L4.source.RecordTypeDef): Option[List[org.kiama.example.oberon0.L4.source.FieldList]]
1758 ===> org.kiama.example.imperative.AST.Asgn.vars: Set[org.kiama.example.imperative.AST.Idn]
543 ===> org.kiama.example.RISC.RISCISA.MVN.canEqual(x$1: Any): Boolean
11397 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productIterator: Iterator[Any]
11925 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1661 ===> org.kiama.example.imperative.AST.Sub.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Sub
4229 ===> org.kiama.example.iswim.tests.SemanticAnalysisTests.<init>(): org.kiama.example.iswim.tests.SemanticAnalysisTests
5163 ===> org.kiama.example.lambda3.LambdaTests.expectQueryParse(str: String,result: String): Unit
11084 ===> org.kiama.output.PrettyPrinterBase.caret: PrettyPrinterBase.this.Doc
3373 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.apply(): org.kiama.example.iswim.secd.RecordOps.RecordTypeValue
10227 ===> org.kiama.example.prolog.SymbolTable.ListType.<init>(): org.kiama.example.prolog.SymbolTable.ListType
8784 ===> org.kiama.example.obr.SPARCTree.Jmp.<init>(): org.kiama.example.obr.SPARCTree.Jmp.type
10703 ===> org.kiama.example.til.TIL2_1Tests.<init>(): org.kiama.example.til.TIL2_1Tests
8184 ===> org.kiama.example.obr.RISCTree.<init>(): org.kiama.example.obr.RISCTree.type
10502 ===> org.kiama.example.til.AST.Write.<init>(): org.kiama.example.til.AST.Write.type
1948 ===> org.kiama.example.iswim.compiler.SemanticAnalysis.envirOut: org.kiama.example.iswim.compiler.Syntax.Iswim => Map[org.kiama.example.iswim.compiler.Syntax.Variable,org.kiama.example.iswim.compiler.Syntax.Iswim]
4482 ===> org.kiama.example.lambda.Parser.$init$(): Unit
8961 ===> org.kiama.example.obr.SPARCTree.CmpgtW.productElement(x$1: Int): Any
2569 ===> org.kiama.example.iswim.compiler.Syntax.Empty.toString(): String
3400 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productElement(x$1: Int): Any
7120 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.args: List[org.kiama.example.oberon0.base.c.CDeclaration]
6619 ===> org.kiama.example.oberon0.L3.c.CDerefExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
5634 ===> org.kiama.example.oberon0.L0.c.CModExp.toString(): String
10767 ===> org.kiama.example.transform.AST.BinExpR.copy(left: org.kiama.example.transform.AST.Exp,op: String,right: org.kiama.example.transform.AST.ExpR): org.kiama.example.transform.AST.BinExpR
4863 ===> org.kiama.example.lambda2.Par.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8937 ===> org.kiama.example.obr.SPARCTree.CmpneW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpneW
1545 ===> org.kiama.example.dataflow.DataflowTests.s2: org.kiama.example.dataflow.DataflowAST.Assign
1904 ===> org.kiama.example.imperative.Generator.genInternalStmt(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Stmt]
1974 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.copy(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.ExprStmt
782 ===> org.kiama.example.RISC.RISCISA.CMP.b: org.kiama.example.RISC.RISCISA.RegNo
5257 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.tipe: org.kiama.example.oberon0.L0.source.TypeDecl
10328 ===> org.kiama.example.til.Main.main(args: Array[String]): Unit
4799 ===> org.kiama.example.lambda2.Evaluators.<init>(): org.kiama.example.lambda2.Evaluators.type
588 ===> org.kiama.example.RISC.RISCISA.ADD.<init>(): org.kiama.example.RISC.RISCISA.ADD.type
8139 ===> org.kiama.example.obr.ObrTree.StarExp.productIterator: Iterator[Any]
4385 ===> org.kiama.example.json.RewritingTests.company: org.kiama.example.json.JSONTree.JValue
6905 ===> org.kiama.example.oberon0.L4.source.IndexExp.toString(): String
1127 ===> org.kiama.example.RISC.RISCISA.WRH.<init>(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRH
7322 ===> org.kiama.example.oberon0.base.source.EmptyStmt.unapply(x$0: org.kiama.example.oberon0.base.source.EmptyStmt): Boolean
11954 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9250 ===> org.kiama.example.obr.SymbolTable.Constant.canEqual(x$1: Any): Boolean
2174 ===> org.kiama.example.iswim.compiler.Syntax.Less.r: org.kiama.example.iswim.compiler.Syntax.Expr
12402 ===> org.kiama.util.Messaging.Record.toString(): String
10138 ===> org.kiama.example.prolog.PrologTree.Cut.<init>(): org.kiama.example.prolog.PrologTree.Cut.type
4210 ===> org.kiama.example.iswim.tests.SECDTests.SECD.program: org.kiama.example.iswim.secd.SECDBase.CodeSegment
11399 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.hashCode(): Int
803 ===> org.kiama.example.RISC.RISCISA.CMPI.<init>(b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.CMPI
2548 ===> org.kiama.example.iswim.compiler.Syntax.Block.productIterator: Iterator[Any]
965 ===> org.kiama.example.RISC.RISCISA.LDW.a: org.kiama.example.RISC.RISCISA.RegNo
8320 ===> org.kiama.example.obr.RISCTree.Write.toString(): String
9649 ===> org.kiama.example.picojava.AbstractSyntax.Decl.<init>(Name: String): org.kiama.example.picojava.AbstractSyntax.Decl
5161 ===> org.kiama.example.lambda3.LambdaTests.expectQuery[T](str: String,result: T): Unit
5085 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.equals(x$1: Any): Boolean
868 ===> org.kiama.example.RISC.RISCISA.ANDI.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
11180 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.readResolve(): Object
8868 ===> org.kiama.example.obr.SPARCTree.Write.equals(x$1: Any): Boolean
8147 ===> org.kiama.example.obr.ObrTree.StarExp.unapply(x$0: org.kiama.example.obr.ObrTree.StarExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
10005 ===> org.kiama.example.prolog.PrologTree.Program.productElement(x$1: Int): Any
1245 ===> org.kiama.example.RISC.RISCISA.BGT.<init>(label: Int): org.kiama.example.RISC.RISCISA.BGT
1990 ===> org.kiama.example.iswim.compiler.Syntax.Variable.<init>(s: String): org.kiama.example.iswim.compiler.Syntax.Variable
8114 ===> org.kiama.example.obr.ObrTree.SlashExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.SlashExp
9315 ===> org.kiama.example.obr.SymbolTable.BoolType.productArity: Int
4979 ===> org.kiama.example.lambda3.AST.Num.readResolve(): Object
2795 ===> org.kiama.example.iswim.secd.BooleanOps.Test.<init>(ct: org.kiama.example.iswim.secd.SECDBase.CodeSegment,ce: org.kiama.example.iswim.secd.SECDBase.CodeSegment): org.kiama.example.iswim.secd.BooleanOps.Test
2474 ===> org.kiama.example.iswim.compiler.Syntax.Return.hashCode(): Int
1187 ===> org.kiama.example.RISC.RISCISA.BNE.productIterator: Iterator[Any]
1391 ===> org.kiama.example.dataflow.DataflowAST.While.copy$default$2: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
11144 ===> org.kiama.output.PrettyPrinterTests.Val.<init>(): PrettyPrinterTests.this.Val.type
11201 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.unapply(x$0: ParenPrettyPrinterTests.this.PostOp): Option[(ParenPrettyPrinterTests.this.Exp, Int)]
4188 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.productPrefix: String
703 ===> org.kiama.example.RISC.RISCISA.DIV.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
8379 ===> org.kiama.example.obr.RISCTree.Cond.toString(): String
8449 ===> org.kiama.example.obr.RISCTree.CmpltW.productIterator: Iterator[Any]
7081 ===> org.kiama.example.oberon0.base.c.CProgram.readResolve(): Object
3090 ===> org.kiama.example.iswim.secd.IOOps.Write.equals(x$1: Any): Boolean
10228 ===> org.kiama.example.prolog.SymbolTable.ListType.toString(): String
10476 ===> org.kiama.example.til.AST.Read.copy$default$1: org.kiama.example.til.AST.Id @scala.annotation.unchecked.uncheckedVariance
6074 ===> org.kiama.example.oberon0.L0.source.AndExp.<init>(): org.kiama.example.oberon0.L0.source.AndExp.type
1098 ===> org.kiama.example.RISC.RISCISA.RD.productElement(x$1: Int): Any
1416 ===> org.kiama.example.dataflow.DataflowAST.If.productIterator: Iterator[Any]
10477 ===> org.kiama.example.til.AST.Read.productPrefix: String
4394 ===> org.kiama.example.lambda.AST.Num.productPrefix: String
5963 ===> org.kiama.example.oberon0.L0.source.SubExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.SubExp
7066 ===> org.kiama.example.oberon0.base.c.CProgram.copy(includes: List[org.kiama.example.oberon0.base.c.CInclude],decls: List[org.kiama.example.oberon0.base.c.CDeclaration]): org.kiama.example.oberon0.base.c.CProgram
6610 ===> org.kiama.example.oberon0.L3.c.CAddrExp.toString(): String
2587 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.apply(fields: List[org.kiama.example.iswim.compiler.Syntax.Expr]): org.kiama.example.iswim.compiler.Syntax.Tuple
12142 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7996 ===> org.kiama.example.obr.ObrTree.MinusExp.<init>(): org.kiama.example.obr.ObrTree.MinusExp.type
9930 ===> org.kiama.example.prolog.Interpreter.TermGoal.hashCode(): Int
3887 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedExit.productElement(x$1: Int): Any
4368 ===> org.kiama.example.json.PrettyPrinting.defaultIndent: Int
8016 ===> org.kiama.example.obr.ObrTree.ModExp.toString(): String
5393 ===> org.kiama.example.oberon0.L0.c.CAssignment.<init>(): org.kiama.example.oberon0.L0.c.CAssignment.type
6046 ===> org.kiama.example.oberon0.L0.source.ModExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
6651 ===> org.kiama.example.oberon0.L3.source.ProcDecl.canEqual(x$1: Any): Boolean
6811 ===> org.kiama.example.oberon0.L4.TypeAnalyser.entityFromDecl(n: org.kiama.example.oberon0.base.source.IdnDef,i: String): TypeAnalyser.this.Entity
10754 ===> org.kiama.example.transform.AST.VarDecl.hashCode(): Int
2731 ===> org.kiama.example.iswim.compiler.Syntax.Assign.apply(r: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Assign
4657 ===> org.kiama.example.lambda2.AST.Bind.productIterator: Iterator[Any]
2799 ===> org.kiama.example.iswim.secd.BooleanOps.Test.copy$default$2: org.kiama.example.iswim.secd.SECDBase.CodeSegment @scala.annotation.unchecked.uncheckedVariance
389 ===> org.kiama.attribution.DynamicAttributionTests.Tree.<init>(): DynamicAttributionTests.this.Tree
6877 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.copy(size: org.kiama.example.oberon0.L0.source.Expression,tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L4.source.ArrayTypeDef
5176 ===> org.kiama.example.oberon0.L0.Desugarer.nameOf(i: org.kiama.example.oberon0.base.source.Identifier,isdef: Boolean): org.kiama.example.oberon0.base.source.Identifier
10820 ===> org.kiama.example.transform.AST.BinExp.apply(left: org.kiama.example.transform.AST.Exp,op: String,right: org.kiama.example.transform.AST.Exp): org.kiama.example.transform.AST.BinExp
7210 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.<init>(): org.kiama.example.oberon0.base.c.CEmptyStmt
1726 ===> org.kiama.example.imperative.AST.Null.productElement(x$1: Int): Any
11334 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
2733 ===> org.kiama.example.iswim.compiler.Syntax.Assign.readResolve(): Object
7899 ===> org.kiama.example.obr.ObrTree.GreaterExp.productElement(x$1: Int): Any
9010 ===> org.kiama.example.obr.SPARCTree.IntDatum.num: Int
10231 ===> org.kiama.example.prolog.SymbolTable.ListType.productArity: Int
6948 ===> org.kiama.example.oberon0.L4.source.FieldExp.base: org.kiama.example.oberon0.L0.source.Expression
11896 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7643 ===> org.kiama.example.obr.ObrTree.ExitStmt.toString(): String
11762 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
12252 ===> org.kiama.rewriting.UniplateTests.OptimiseAdd.genIntAdd(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Add]
5654 ===> org.kiama.example.oberon0.L0.c.CAndExp.toString(): String
1303 ===> org.kiama.example.RISC.RISCISA.RET.equals(x$1: Any): Boolean
10798 ===> org.kiama.example.transform.AST.Factor.apply(exp: org.kiama.example.transform.AST.PrimExp): org.kiama.example.transform.AST.Factor
5011 ===> org.kiama.example.lambda3.AST.App.<init>(): org.kiama.example.lambda3.AST.App.type
11297 ===> org.kiama.rewriting.NominalAST.GenName.counter: Int
11901 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4631 ===> org.kiama.example.lambda2.AST.Letp.<init>(bs: List[org.kiama.example.lambda2.AST.Bind],e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Letp
2847 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.toString(): String
3725 ===> org.kiama.example.iswim.secd.SECDBase.TypeValue.<init>(): org.kiama.example.iswim.secd.SECDBase.TypeValue
5971 ===> org.kiama.example.oberon0.L0.source.SubExp.canEqual(x$1: Any): Boolean
7566 ===> org.kiama.example.obr.ObrTree.EnumConst.productIterator: Iterator[Any]
3271 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.toString(): String
9499 ===> org.kiama.example.oneohonecompanies.Company.Dept.copy(n: org.kiama.example.oneohonecompanies.Company.Name,m: org.kiama.example.oneohonecompanies.Company.Manager,su: List[org.kiama.example.oneohonecompanies.Company.SubUnit]): org.kiama.example.oneohonecompanies.Company.Dept
9655 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.copy(Name: String,Superclass: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse],Body: org.kiama.example.picojava.AbstractSyntax.Block): org.kiama.example.picojava.AbstractSyntax.ClassDecl
2533 ===> org.kiama.example.iswim.compiler.Syntax.While.hashCode(): Int
6876 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.<init>(size: org.kiama.example.oberon0.L0.source.Expression,tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L4.source.ArrayTypeDef
10617 ===> org.kiama.example.til.AST.Add.copy(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Add
7815 ===> org.kiama.example.obr.ObrTree.Catch.readResolve(): Object
3950 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.hashCode(): Int
1420 ===> org.kiama.example.dataflow.DataflowAST.If.equals(x$1: Any): Boolean
8119 ===> org.kiama.example.obr.ObrTree.SlashExp.productElement(x$1: Int): Any
4391 ===> org.kiama.example.lambda.AST.Num.toString(): String
7395 ===> org.kiama.example.oberon0.drivers.A4Phases.tasklevel: Int
5096 ===> org.kiama.example.lambda3.AST.FreshQuery.copy$default$1: org.kiama.rewriting.NominalAST.Name @scala.annotation.unchecked.uncheckedVariance
10935 ===> org.kiama.output.LeftAssoc.<init>(): org.kiama.output.LeftAssoc.type
9092 ===> org.kiama.example.obr.SPARCTree.Not.<init>(): org.kiama.example.obr.SPARCTree.Not.type
10252 ===> org.kiama.example.prolog.SymbolTable.UnknownType.<init>(): org.kiama.example.prolog.SymbolTable.UnknownType.type
10203 ===> org.kiama.example.prolog.SymbolTable.AtomType.productIterator: Iterator[Any]
1052 ===> org.kiama.example.RISC.RISCISA.STB.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.STB
856 ===> org.kiama.example.RISC.RISCISA.AND.toString(): String
8917 ===> org.kiama.example.obr.SPARCTree.CmpeqW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpeqW
10769 ===> org.kiama.example.transform.AST.BinExpR.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
5559 ===> org.kiama.example.oberon0.L0.c.CSubExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CSubExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
10366 ===> org.kiama.example.til.AST.Decl.equals(x$1: Any): Boolean
8569 ===> org.kiama.example.obr.RISCTree.RemW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
8792 ===> org.kiama.example.obr.SPARCTree.LabelDef.copy$default$1: org.kiama.example.obr.SPARCTree.Label @scala.annotation.unchecked.uncheckedVariance
1094 ===> org.kiama.example.RISC.RISCISA.RD.copy(a: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.RD
683 ===> org.kiama.example.RISC.RISCISA.MULI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
7604 ===> org.kiama.example.obr.ObrTree.ExnConst.hashCode(): Int
4112 ===> org.kiama.example.iswim.secd.StackOps.Swap.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
12058 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11190 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productPrefix: String
12451 ===> org.kiama.util.ParserUtilitiesTests.Node.productElement(x$1: Int): Any
333 ===> org.kiama.attribution.AttributionTests.s: AttributionTests.this.Pair
7071 ===> org.kiama.example.oberon0.base.c.CProgram.productElement(x$1: Int): Any
447 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.isDefinedAt(x$1: DynamicAttributionTests.this.Tree): Boolean
12017 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11944 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1984 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.<init>(): org.kiama.example.iswim.compiler.Syntax.ExprStmt.type
6153 ===> org.kiama.example.oberon0.L0.source.IdnExp.readResolve(): Object
5886 ===> org.kiama.example.oberon0.L0.source.LeExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
6366 ===> org.kiama.example.oberon0.L2.source.Case.readResolve(): Object
6920 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.canEqual(x$1: Any): Boolean
10868 ===> org.kiama.machine.Machine.debug: Boolean
3099 ===> org.kiama.example.iswim.secd.IOOps.Read.productArity: Int
1374 ===> org.kiama.example.dataflow.DataflowAST.Assign.productArity: Int
10915 ===> org.kiama.machine.Machine.reset: Unit
4154 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productIterator: Iterator[Any]
8463 ===> org.kiama.example.obr.RISCTree.DivW.copy$default$1: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
10016 ===> org.kiama.example.prolog.PrologTree.Clause.<init>(): org.kiama.example.prolog.PrologTree.Clause
4938 ===> org.kiama.example.lambda2.ReduceEvaluator.<init>(): org.kiama.example.lambda2.ReduceEvaluator
625 ===> org.kiama.example.RISC.RISCISA.SUB.productElement(x$1: Int): Any
4956 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
11442 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
4891 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7836 ===> org.kiama.example.obr.ObrTree.BoolExp.value: Boolean
11402 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.<init>(): org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.type
5189 ===> org.kiama.example.oberon0.L0.NameAnalyser.envout(out: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
874 ===> org.kiama.example.RISC.RISCISA.ANDI.hashCode(): Int
9045 ===> org.kiama.example.obr.SPARCTree.MulW.r: org.kiama.example.obr.SPARCTree.Datum
1858 ===> org.kiama.example.imperative.ASTNonCase.Binary.arity: Int
2290 ===> org.kiama.example.iswim.compiler.Syntax.And.productArity: Int
9517 ===> org.kiama.example.oneohonecompanies.Company.Employee.a: org.kiama.example.oneohonecompanies.Company.Address
10191 ===> org.kiama.example.prolog.SymbolTable.Variable.<init>(): org.kiama.example.prolog.SymbolTable.Variable.type
5785 ===> org.kiama.example.oberon0.L0.source.NamedType.productArity: Int
12416 ===> org.kiama.util.ParserUtilities.any: ParserUtilities.this.PackratParser[Char]
5580 ===> org.kiama.example.oberon0.L0.c.COrExp.readResolve(): Object
2666 ===> org.kiama.example.iswim.compiler.Syntax.ThrowTo.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr,c: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.ThrowTo
4826 ===> org.kiama.example.lambda2.LambdaTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
1335 ===> org.kiama.example.RISC.RISCISA.Comment.productIterator: Iterator[Any]
6174 ===> org.kiama.example.oberon0.L1.c.CIfStatement.copy(cond: org.kiama.example.oberon0.base.c.CExpression,tstmt: org.kiama.example.oberon0.base.c.CStatement): org.kiama.example.oberon0.L1.c.CIfStatement
2214 ===> org.kiama.example.iswim.compiler.Syntax.Greater.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Greater
9334 ===> org.kiama.example.obr.SymbolTable.ArrayType.productElement(x$1: Int): Any
8013 ===> org.kiama.example.obr.ObrTree.ModExp.toString(): String
1219 ===> org.kiama.example.RISC.RISCISA.BGE.productIterator: Iterator[Any]
10212 ===> org.kiama.example.prolog.SymbolTable.IntegerType.<init>(): org.kiama.example.prolog.SymbolTable.IntegerType
3282 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productPrefix: String
9857 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.createAst(subtree: org.kiama.example.picojava.AbstractSyntax.ClassDecl): org.kiama.example.picojava.AbstractSyntax.ClassDecl
6235 ===> org.kiama.example.oberon0.L1.source.IfStatement.optelse: Option[org.kiama.example.oberon0.base.source.Block]
9644 ===> org.kiama.example.picojava.AbstractSyntax.Block.apply(BlockStmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]): org.kiama.example.picojava.AbstractSyntax.Block
12161 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
4419 ===> org.kiama.example.lambda.AST.Var.toString(): String
6337 ===> org.kiama.example.oberon0.L2.source.CaseStatement.productElement(x$1: Int): Any
2424 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.<init>(): org.kiama.example.iswim.compiler.Syntax.LetRecStmt.type
12249 ===> org.kiama.rewriting.UniplateTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5382 ===> org.kiama.example.oberon0.L0.c.CAssignment.copy(desig: org.kiama.example.oberon0.base.c.CExpression,exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAssignment
5252 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.apply(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDef): SymbolTable.this.Variable
7990 ===> org.kiama.example.obr.ObrTree.MinusExp.productElement(x$1: Int): Any
6155 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.blockToDoc(b: org.kiama.example.oberon0.base.source.Block,beginend: Boolean): PrettyPrinter.this.Doc
3187 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.productPrefix: String
2850 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.productArity: Int
115 ===> org.kiama.attribution.Attribution.tree[T <: org.kiama.attribution.Attributable, U <: org.kiama.attribution.Attributable](name: String)(f: T => U): Attribution.this.CachedAttribute[T,U]
2983 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.productElement(x$1: Int): Any
519 ===> org.kiama.example.RISC.RISCISA.MOVI.productArity: Int
2652 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.productIterator: Iterator[Any]
10260 ===> org.kiama.example.prolog.Subst.apply[T <: org.kiama.rewriting.Rewriter.Term](t: T): T
3935 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.hashCode(): Int
898 ===> org.kiama.example.RISC.RISCISA.OR.toString(): String
7008 ===> org.kiama.example.oberon0.base.Driver.pprintastFlagDefault: Boolean
1351 ===> org.kiama.example.dataflow.Variables.defines: org.kiama.example.dataflow.DataflowAST.Stm => Set[org.kiama.example.dataflow.DataflowAST.Var]
9957 ===> org.kiama.example.prolog.Interpreter.MatchGoal.left: org.kiama.example.prolog.PrologTree.Term
11377 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productPrefix: String
4458 ===> org.kiama.example.lambda.AST.App.apply(l: org.kiama.example.lambda.AST.Exp,r: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.App
2638 ===> org.kiama.example.iswim.compiler.Syntax.Match.toString(): String
6752 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
8003 ===> org.kiama.example.obr.ObrTree.ModExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.ModExp
1584 ===> org.kiama.example.imperative.AST.Num.toString(): String
7303 ===> org.kiama.example.oberon0.base.source.Block.equals(x$1: Any): Boolean
10307 ===> org.kiama.example.repmin.Leaf.<init>(): org.kiama.example.repmin.Leaf.type
11289 ===> org.kiama.rewriting.NominalAST.Bind.equals(x$1: Any): Boolean
10292 ===> org.kiama.example.repmin.Fork.apply(left: org.kiama.example.repmin.Tree,right: org.kiama.example.repmin.Tree): org.kiama.example.repmin.Fork
6758 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.canEqual(x$1: Any): Boolean
8611 ===> org.kiama.example.obr.RISCTree.SequenceDatum.productElement(x$1: Int): Any
10042 ===> org.kiama.example.prolog.PrologTree.Rule.copy$default$2: List[org.kiama.example.prolog.PrologTree.Term] @scala.annotation.unchecked.uncheckedVariance
5556 ===> org.kiama.example.oberon0.L0.c.CSubExp.<init>(): org.kiama.example.oberon0.L0.c.CSubExp.type
4276 ===> org.kiama.example.json.JSONTree.JArray.toString(): String
4140 ===> org.kiama.example.iswim.secd.StringOps.PushString.canEqual(x$1: Any): Boolean
1034 ===> org.kiama.example.RISC.RISCISA.STW.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
3953 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.toString(): String
7681 ===> org.kiama.example.obr.ObrTree.IfStmt.productIterator: Iterator[Any]
1161 ===> org.kiama.example.RISC.RISCISA.Branch.toString(): String
5805 ===> org.kiama.example.oberon0.L0.source.Assignment.productElement(x$1: Int): Any
9703 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.hashCode(): Int
4519 ===> org.kiama.example.lambda2.AST.Num.canEqual(x$1: Any): Boolean
12408 ===> org.kiama.util.Messaging.message(value: scala.util.parsing.input.Positional,message: String): Unit
8749 ===> org.kiama.example.obr.SPARCTree.Beq.toString(): String
5947 ===> org.kiama.example.oberon0.L0.source.AddExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
4170 ===> org.kiama.example.iswim.secd.StringOps.StringValue.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
7905 ===> org.kiama.example.obr.ObrTree.GreaterExp.<init>(): org.kiama.example.obr.ObrTree.GreaterExp.type
9089 ===> org.kiama.example.obr.SPARCTree.Not.hashCode(): Int
7606 ===> org.kiama.example.obr.ObrTree.ExnConst.equals(x$1: Any): Boolean
12308 ===> org.kiama.util.StringEmitter.result(): String
12094 ===> org.kiama.rewriting.RewriterTests.f(y: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
4060 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toString(): String
8738 ===> org.kiama.example.obr.SPARCTree.Beq.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
9308 ===> org.kiama.example.obr.SymbolTable.IntType.unapply(x$0: org.kiama.example.obr.SymbolTable.IntType): Boolean
11818 ===> org.kiama.rewriting.RewriterTests.NotSame.hashCode(): Int
6637 ===> org.kiama.example.oberon0.L3.source.ProcDecl.idndef: org.kiama.example.oberon0.base.source.IdnDef
9099 ===> org.kiama.example.obr.SPARCTree.RemW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.RemW
2969 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.copy$default$2: ExceptionHandler.this.Environment @scala.annotation.unchecked.uncheckedVariance
5371 ===> org.kiama.example.oberon0.L0.c.CTypeDef.hashCode(): Int
452 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.applyOrElse[A1 <: DynamicAttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
11596 ===> org.kiama.rewriting.Rewriter.$anon.oneTraversable[CC[U] <: Traversable[U]](t: CC[Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term],Rewriter.this.Term,CC[Rewriter.this.Term]]): Option[CC[Rewriter.this.Term]]
472 ===> org.kiama.example.RISC.RISC.LNK: RISC.this.ParamUpdater[org.kiama.example.RISC.RISCISA.RegNo,Int]
6278 ===> org.kiama.example.oberon0.L2.Desugarer.$init$(): Unit
10392 ===> org.kiama.example.til.AST.IfThen.t: Seq[org.kiama.example.til.AST.Stat]
3978 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.copy$default$2: SECDBase.this.Environment @scala.annotation.unchecked.uncheckedVariance
10494 ===> org.kiama.example.til.AST.Write.productPrefix: String
1063 ===> org.kiama.example.RISC.RISCISA.STB.hashCode(): Int
4127 ===> org.kiama.example.iswim.secd.StackOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
3635 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.canEqual(x$1: Any): Boolean
855 ===> org.kiama.example.RISC.RISCISA.AND.<init>(): org.kiama.example.RISC.RISCISA.AND.type
1568 ===> org.kiama.example.imperative.AST.Exp.vars: Set[org.kiama.example.imperative.AST.Idn]
8051 ===> org.kiama.example.obr.ObrTree.NotEqualExp.<init>(): org.kiama.example.obr.ObrTree.NotEqualExp.type
12495 ===> org.kiama.util.ParserUtilitiesTests.Tup3.toString(): String
5289 ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType.readResolve(): Object
11374 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.copy(l: org.kiama.rewriting.SupportPositionalRewriterTests.Node,r: org.kiama.rewriting.SupportPositionalRewriterTests.Node): org.kiama.rewriting.SupportPositionalRewriterTests.Two
6514 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.equals(x$1: Any): Boolean
5493 ===> org.kiama.example.oberon0.L0.c.CGtExp.hashCode(): Int
2866 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.productElement(x$1: Int): Any
5025 ===> org.kiama.example.lambda3.AST.Lam.canEqual(x$1: Any): Boolean
1912 ===> org.kiama.example.imperative.PrettyPrinter.pretty(t: org.kiama.example.imperative.AST.ImperativeNode): String
1046 ===> org.kiama.example.RISC.RISCISA.STW.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.STW
3963 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productArity: Int
9823 ===> org.kiama.example.picojava.ErrorCheck.collectErrors: scala.collection.mutable.Buffer[String] => (org.kiama.attribution.Attributable => Unit)
2997 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.<init>(): org.kiama.example.iswim.secd.HeapOps.Alloc
4029 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.productPrefix: String
1347 ===> org.kiama.example.dataflow.ControlFlowImpl.$init$(): Unit
11592 ===> org.kiama.rewriting.Rewriter.$anon.<init>(): Rewriter.this.Strategy{}
1264 ===> org.kiama.example.RISC.RISCISA.BR.productPrefix: String
6037 ===> org.kiama.example.oberon0.L0.source.DivExp.toString(): String
422 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.toString(): String
4090 ===> org.kiama.example.iswim.secd.StackOps.Dup.n: Int
2830 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.productPrefix: String
11927 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4096 ===> org.kiama.example.iswim.secd.StackOps.Dup.productElement(x$1: Int): Any
11470 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.One.type
8164 ===> org.kiama.example.obr.RISCEncoder.encode(i: org.kiama.example.obr.RISCTree.Item): Unit
10799 ===> org.kiama.example.transform.AST.Factor.unapply(x$0: org.kiama.example.transform.AST.Factor): Option[org.kiama.example.transform.AST.PrimExp]
7992 ===> org.kiama.example.obr.ObrTree.MinusExp.canEqual(x$1: Any): Boolean
7347 ===> org.kiama.example.oberon0.base.source.IdnUse.productPrefix: String
9998 ===> org.kiama.example.prolog.PrologTree.SourceNode.<init>(): org.kiama.example.prolog.PrologTree.SourceNode
12362 ===> org.kiama.util.Environments.lookup(env: Environments.this.Environment,i: String,e: Environments.this.Entity,scope: Boolean): Environments.this.Entity
2151 ===> org.kiama.example.iswim.compiler.Syntax.Equal.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Equal
11192 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.productElement(x$1: Int): Any
2221 ===> org.kiama.example.iswim.compiler.Syntax.Greater.canEqual(x$1: Any): Boolean
923 ===> org.kiama.example.RISC.RISCISA.XOR.a: org.kiama.example.RISC.RISCISA.RegNo
12380 ===> org.kiama.util.IO.FileNotFoundException.readResolve(): Object
19 ===> org.kiama.attribution.Attributable.lastChild[T]: T
8373 ===> org.kiama.example.obr.RISCTree.Cond.productIterator: Iterator[Any]
9162 ===> org.kiama.example.obr.SPARCTree.Indexed.productIterator: Iterator[Any]
12296 ===> org.kiama.util.Emitter.<init>(): org.kiama.util.Emitter
8731 ===> org.kiama.example.obr.SPARCTree.SPARC.unapply(x$0: org.kiama.example.obr.SPARCTree.SPARC): Option[(List[org.kiama.example.obr.SPARCTree.Item], Int)]
7354 ===> org.kiama.example.oberon0.base.source.IdnUse.equals(x$1: Any): Boolean
7138 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.unapply(x$0: org.kiama.example.oberon0.base.c.CFunctionDecl): Option[(org.kiama.example.oberon0.base.c.CVarDecl, List[org.kiama.example.oberon0.base.c.CDeclaration], org.kiama.example.oberon0.base.c.CBlock)]
11857 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
8809 ===> org.kiama.example.obr.SPARCTree.Read.copy$default$1: org.kiama.example.obr.SPARCTree.Address @scala.annotation.unchecked.uncheckedVariance
11380 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Two.productIterator: Iterator[Any]
488 ===> org.kiama.example.RISC.RISCISA.MOV.a: org.kiama.example.RISC.RISCISA.RegNo
5311 ===> org.kiama.example.oberon0.L0.SymbolTable.defenvPairs: List[(String, SymbolTable.this.Entity)]
11368 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.apply(a: org.kiama.rewriting.SupportPositionalRewriterTests.Node): org.kiama.rewriting.SupportPositionalRewriterTests.One
4514 ===> org.kiama.example.lambda2.AST.Num.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
8927 ===> org.kiama.example.obr.SPARCTree.CmpeqW.toString(): String
5210 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productIterator: Iterator[Any]
417 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.canEqual(x$1: Any): Boolean
10035 ===> org.kiama.example.prolog.PrologTree.Fact.unapply(x$0: org.kiama.example.prolog.PrologTree.Fact): Option[org.kiama.example.prolog.PrologTree.Term]
9900 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.declA: org.kiama.example.picojava.AbstractSyntax.ClassDecl
5045 ===> org.kiama.example.lambda3.AST.EquivQuery.productIterator: Iterator[Any]
6010 ===> org.kiama.example.oberon0.L0.source.MulExp.productArity: Int
2857 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.toString(): String
10867 ===> org.kiama.machine.Machine.<init>(name: String,emitter: org.kiama.util.Emitter): org.kiama.machine.Machine
4862 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1145 ===> org.kiama.example.RISC.RISCISA.WRL.productPrefix: String
9364 ===> org.kiama.example.obr.SymbolTable.RecordTypes.iscompatible(other: org.kiama.example.obr.SymbolTable.TypeBase): Boolean
2206 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.<init>(): org.kiama.example.iswim.compiler.Syntax.LessEq.type
6772 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.productArity: Int
9668 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.toString(): String
9884 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.<init>(): org.kiama.example.picojava.tests.InheritanceNameResolutionTests
5560 ===> org.kiama.example.oberon0.L0.c.CSubExp.readResolve(): Object
7805 ===> org.kiama.example.obr.ObrTree.Catch.productElement(x$1: Int): Any
6150 ===> org.kiama.example.oberon0.L0.source.IdnExp.toString(): String
12301 ===> org.kiama.util.StdoutEmitter.emitter: org.kiama.util.Emitter
3422 ===> org.kiama.example.iswim.secd.SECDBase.nextInstNumber: org.kiama.example.iswim.secd.SECDBase.ByteCode => Int
8538 ===> org.kiama.example.obr.RISCTree.NegW.productIterator: Iterator[Any]
3309 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.toString(): String
252 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productPrefix: String
600 ===> org.kiama.example.RISC.RISCISA.ADDI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
11172 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.canEqual(x$1: Any): Boolean
5930 ===> org.kiama.example.oberon0.L0.source.GeExp.hashCode(): Int
3717 ===> org.kiama.example.iswim.secd.SECDBase.GetType.equals(x$1: Any): Boolean
11964 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2171 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.NotEqual): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
6622 ===> org.kiama.example.oberon0.L3.c.CDerefExp.productElement(x$1: Int): Any
1322 ===> org.kiama.example.RISC.RISCISA.Target.<init>(): org.kiama.example.RISC.RISCISA.Target.type
59 ===> org.kiama.attribution.AttributionBase.constant[T <: AnyRef, U](optNameDef: Option[String])(u: => U): AttributionBase.this.Attribute[T,U]
2920 ===> org.kiama.example.iswim.secd.ConversionOps.ToBoolean.equals(x$1: Any): Boolean
790 ===> org.kiama.example.RISC.RISCISA.CMP.productArity: Int
2745 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.equals(x$1: Any): Boolean
1033 ===> org.kiama.example.RISC.RISCISA.STW.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.STW
6908 ===> org.kiama.example.oberon0.L4.source.IndexExp.toString(): String
11249 ===> org.kiama.rewriting.CallbackRewriter.strategyf(f: CallbackRewriter.this.Term => Option[CallbackRewriter.this.Term]): CallbackRewriter.this.Strategy
5320 ===> org.kiama.example.oberon0.L0.TypeAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
2971 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.copy$default$4: ExceptionHandler.this.Dump @scala.annotation.unchecked.uncheckedVariance
1162 ===> org.kiama.example.RISC.RISCISA.Branch.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
7967 ===> org.kiama.example.obr.ObrTree.LessExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
8068 ===> org.kiama.example.obr.ObrTree.NotExp.<init>(): org.kiama.example.obr.ObrTree.NotExp.type
10651 ===> org.kiama.example.til.AST.Sub.readResolve(): Object
5152 ===> org.kiama.example.lambda3.AST.SwapQuery.readResolve(): Object
10287 ===> org.kiama.example.repmin.Fork.hashCode(): Int
4477 ===> org.kiama.example.lambda.AST.Sub.<init>(): org.kiama.example.lambda.AST.Sub.type
2156 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.NotEqual
6817 ===> org.kiama.example.oberon0.L4.c.CRecordType.<init>(fields: List[org.kiama.example.oberon0.base.c.CVarDecl]): org.kiama.example.oberon0.L4.c.CRecordType
2821 ===> org.kiama.example.iswim.secd.BooleanOps.Equals.toString(): String
3346 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.<init>(): org.kiama.example.iswim.secd.RecordOps.UnpackRecord
8532 ===> org.kiama.example.obr.RISCTree.NegW.<init>(d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.NegW
9728 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.WhileStmt): Option[(org.kiama.example.picojava.AbstractSyntax.Exp, org.kiama.example.picojava.AbstractSyntax.Stmt)]
4132 ===> org.kiama.example.iswim.secd.StringOps.PushString.s: String
4428 ===> org.kiama.example.lambda.AST.Lam.copy$default$1: org.kiama.example.lambda.AST.Idn @scala.annotation.unchecked.uncheckedVariance
4887 ===> org.kiama.example.lambda2.ParLazy.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
11665 ===> org.kiama.rewriting.Rewriter.alltdfold(s1: => Rewriter.this.Strategy,s2: => Rewriter.this.Strategy): Rewriter.this.Strategy
1790 ===> org.kiama.example.imperative.AST.While.<init>(): org.kiama.example.imperative.AST.While.type
10082 ===> org.kiama.example.prolog.PrologTree.Integer.productIterator: Iterator[Any]
11142 ===> org.kiama.output.PrettyPrinterTests.Val.toString(): String
11820 ===> org.kiama.rewriting.RewriterTests.NotSame.readResolve(): Object
4003 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.hashCode(): Int
12560 ===> org.kiama.util.ParserUtilitiesTests.Tup6.copy$default$3: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
4842 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2237 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.productArity: Int
11772 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12205 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5891 ===> org.kiama.example.oberon0.L0.source.LeExp.canEqual(x$1: Any): Boolean
2449 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.copy(par: org.kiama.example.iswim.compiler.Syntax.Variable,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Lambda
3999 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.bdy: org.kiama.example.iswim.secd.SECDBase.Code
7006 ===> org.kiama.example.oberon0.base.Driver.helpFlagDefault: Boolean
79 ===> org.kiama.attribution.Attribution.CachedParamAttribute.memo: scala.collection.mutable.HashMap[Attribution.this.ParamAttributeKey,Option[U]]
9024 ===> org.kiama.example.obr.SPARCTree.IntDatum.apply(num: Int): org.kiama.example.obr.SPARCTree.IntDatum
2412 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]
12523 ===> org.kiama.util.ParserUtilitiesTests.Tup4.unapply(x$0: ParserUtilitiesTests.this.Tup4): Option[(ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node, ParserUtilitiesTests.this.Node)]
5437 ===> org.kiama.example.oberon0.L0.c.CNeExp.toString(): String
6058 ===> org.kiama.example.oberon0.L0.source.ModExp.unapply(x$0: org.kiama.example.oberon0.L0.source.ModExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
4577 ===> org.kiama.example.lambda2.AST.App.hashCode(): Int
11595 ===> org.kiama.rewriting.Rewriter.$anon.oneRewritable(r: org.kiama.rewriting.Rewritable): Option[Rewriter.this.Term]
3106 ===> org.kiama.example.iswim.secd.IOOps.Read.<init>(): org.kiama.example.iswim.secd.IOOps.Read.type
10896 ===> org.kiama.machine.Machine.Update.perform: Unit
5705 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productPrefix: String
2846 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.<init>(): BooleanOps.this.TrueValue
12580 ===> org.kiama.util.Positioned.$init$(): Unit
1792 ===> org.kiama.example.imperative.AST.While.apply(e: org.kiama.example.imperative.AST.Exp,b: org.kiama.example.imperative.AST.Stmt): org.kiama.example.imperative.AST.While
1696 ===> org.kiama.example.imperative.AST.Mul.apply(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Mul
5606 ===> org.kiama.example.oberon0.L0.c.CDivExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
5610 ===> org.kiama.example.oberon0.L0.c.CDivExp.productElement(x$1: Int): Any
899 ===> org.kiama.example.RISC.RISCISA.OR.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.OR
6116 ===> org.kiama.example.oberon0.L0.source.NotExp.toString(): String
804 ===> org.kiama.example.RISC.RISCISA.CMPI.toString(): String
2765 ===> org.kiama.example.iswim.secd.BooleanOps.PushTrue.productPrefix: String
6176 ===> org.kiama.example.oberon0.L1.c.CIfStatement.copy$default$2: org.kiama.example.oberon0.base.c.CStatement @scala.annotation.unchecked.uncheckedVariance
8677 ===> org.kiama.example.obr.RISCTree.lastlab: Int
12426 ===> org.kiama.util.ParserUtilities.parseResultToTuple5[A, B, C, D, E](p: ParserUtilities.this.Parser[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E]]): ParserUtilities.this.PackratParser[(A, B, C, D, E)]
11061 ===> org.kiama.output.PrettyPrinterBase.lsep(ds: Seq[PrettyPrinterBase.this.Doc],sep: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
3483 ===> org.kiama.example.iswim.secd.SECDBase.MkClosures.<init>(): org.kiama.example.iswim.secd.SECDBase.MkClosures.type
8153 ===> org.kiama.example.obr.RISCEncoder.resetcode(): Unit
1765 ===> org.kiama.example.imperative.AST.Asgn.productIterator: Iterator[Any]
6215 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
8529 ===> org.kiama.example.obr.RISCTree.MulW.unapply(x$0: org.kiama.example.obr.RISCTree.MulW): Option[(org.kiama.example.obr.RISCTree.Datum, org.kiama.example.obr.RISCTree.Datum)]
1247 ===> org.kiama.example.RISC.RISCISA.BGT.copy(label: Int): org.kiama.example.RISC.RISCISA.Branch
9376 ===> org.kiama.example.obr.SymbolTable.RecordTypes.unapply(x$0: org.kiama.example.obr.SymbolTable.RecordTypes): Boolean
1911 ===> org.kiama.example.imperative.PrettyPrinter.<init>(): org.kiama.example.imperative.PrettyPrinter.type
102 ===> org.kiama.attribution.Attribution.$anon.optName: Option[String]
9657 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.copy$default$2: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse] @scala.annotation.unchecked.uncheckedVariance
3493 ===> org.kiama.example.iswim.secd.SECDBase.App.productIterator: Iterator[Any]
9645 ===> org.kiama.example.picojava.AbstractSyntax.Block.unapply(x$0: org.kiama.example.picojava.AbstractSyntax.Block): Option[Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]]
1032 ===> org.kiama.example.RISC.RISCISA.STW.toString(): String
880 ===> org.kiama.example.RISC.RISCISA.ANDI.readResolve(): Object
2242 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.toString(): String
11992 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3334 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productArity: Int
7621 ===> org.kiama.example.obr.ObrTree.AssignStmt.productElement(x$1: Int): Any
9813 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.hashCode(): Int
3984 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.equals(that: Any): Boolean
2274 ===> org.kiama.example.iswim.compiler.Syntax.Not.canEqual(x$1: Any): Boolean
2454 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.productElement(x$1: Int): Any
5240 ===> org.kiama.example.oberon0.L0.SymbolTable.Variable.copy(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDef): SymbolTable.this.Variable
3552 ===> org.kiama.example.iswim.secd.SECDBase.Exit.<init>(): org.kiama.example.iswim.secd.SECDBase.Exit
9226 ===> org.kiama.example.obr.SymbolTable.Variable.productArity: Int
721 ===> org.kiama.example.RISC.RISCISA.DIVI.im: org.kiama.example.RISC.RISCISA.Imm
7397 ===> org.kiama.example.oberon0.drivers.A4Tests.<init>(): org.kiama.example.oberon0.drivers.A4Tests
10720 ===> org.kiama.example.til.TIL2_3Main.<init>(): org.kiama.example.til.TIL2_3Main.type
6164 ===> org.kiama.example.oberon0.L1.CCodeGenerator.translate(s: org.kiama.example.oberon0.base.source.Statement): org.kiama.example.oberon0.base.c.CStatement
7978 ===> org.kiama.example.obr.ObrTree.LessExp.toString(): String
8900 ===> org.kiama.example.obr.SPARCTree.Cond.copy$default$2: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
8926 ===> org.kiama.example.obr.SPARCTree.CmpeqW.hashCode(): Int
9918 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.apply(ps: Set[(String, org.kiama.example.prolog.PrologTree.Term)]): org.kiama.example.prolog.Interpreter.DisplayGoal
12386 ===> org.kiama.util.Messaging.<init>(): org.kiama.util.Messaging.type
765 ===> org.kiama.example.RISC.RISCISA.MODI.toString(): String
403 ===> org.kiama.attribution.DynamicAttributionTests.Pair.equals(x$1: Any): Boolean
11074 ===> org.kiama.output.PrettyPrinterBase.braces(d: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
347 ===> org.kiama.attribution.AttributionTests.Base.k8: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
11117 ===> org.kiama.output.PrettyPrinter.Doc.$less$greater(e: PrettyPrinter.this.Doc): PrettyPrinter.this.Doc
6656 ===> org.kiama.example.oberon0.L3.source.ProcDecl.toString(): String
10921 ===> org.kiama.machine.InconsistentUpdateException.<init>(m: org.kiama.machine.Machine,u: org.kiama.machine.Machine#Update,v: T): org.kiama.machine.InconsistentUpdateException[T]
4334 ===> org.kiama.example.json.JSONTree.JFalse.productPrefix: String
2995 ===> org.kiama.example.iswim.secd.ExceptionHandler.raiseException(ex: org.kiama.example.iswim.secd.SECDBase.ExceptionValue): Unit
9236 ===> org.kiama.example.obr.SymbolTable.Variable.unapply(x$0: org.kiama.example.obr.SymbolTable.Variable): Option[org.kiama.example.obr.SymbolTable.Type]
10072 ===> org.kiama.example.prolog.PrologTree.Var.unapply(x$0: org.kiama.example.prolog.PrologTree.Var): Option[String]
4427 ===> org.kiama.example.lambda.AST.Lam.copy(x: org.kiama.example.lambda.AST.Idn,e: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.Lam
5840 ===> org.kiama.example.oberon0.L0.source.EqExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.EqExp
5521 ===> org.kiama.example.oberon0.L0.c.CAddExp.left: org.kiama.example.oberon0.base.c.CExpression
410 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.<init>(value: Int): DynamicAttributionTests.this.Leaf
1793 ===> org.kiama.example.imperative.AST.While.unapply(x$0: org.kiama.example.imperative.AST.While): Option[(org.kiama.example.imperative.AST.Exp, org.kiama.example.imperative.AST.Stmt)]
4366 ===> org.kiama.example.json.ParsingTests.<init>(): org.kiama.example.json.ParsingTests
2589 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.readResolve(): Object
486 ===> org.kiama.example.RISC.RISCISA.Assembler.<init>(): org.kiama.example.RISC.RISCISA.Assembler
2385 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.productIterator: Iterator[Any]
12046 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6837 ===> org.kiama.example.oberon0.L4.c.CIndexExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
11362 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.canEqual(x$1: Any): Boolean
4180 ===> org.kiama.example.iswim.secd.StringOps.StringValue.apply(s: String): StringOps.this.StringValue
6234 ===> org.kiama.example.oberon0.L1.source.IfStatement.elsifs: List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)]
5027 ===> org.kiama.example.lambda3.AST.Lam.equals(x$1: Any): Boolean
7689 ===> org.kiama.example.obr.ObrTree.IfStmt.unapply(x$0: org.kiama.example.obr.ObrTree.IfStmt): Option[(org.kiama.example.obr.ObrTree.Expression, List[org.kiama.example.obr.ObrTree.Statement], List[org.kiama.example.obr.ObrTree.Statement])]
11943 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10170 ===> org.kiama.example.prolog.SymbolTable.Predicate.canEqual(x$1: Any): Boolean
10983 ===> org.kiama.output.Infix.copy(side: org.kiama.output.Side): org.kiama.output.Infix
11324 ===> org.kiama.rewriting.PositionalRewriterTests.$anon.column: Int
1165 ===> org.kiama.example.RISC.RISCISA.BEQ.<init>(label: Int): org.kiama.example.RISC.RISCISA.BEQ
4813 ===> org.kiama.example.lambda2.Lambda.prompt: String
1535 ===> org.kiama.example.dataflow.DataflowForTests.s2: org.kiama.example.dataflow.DataflowAST.Assign
10450 ===> org.kiama.example.til.AST.For.i: org.kiama.example.til.AST.Id
205 ===> org.kiama.attribution.AttributionTests.EitherTree.canEqual(x$1: Any): Boolean
8238 ===> org.kiama.example.obr.RISCTree.Bne.toString(): String
585 ===> org.kiama.example.RISC.RISCISA.ADD.canEqual(x$1: Any): Boolean
9633 ===> org.kiama.example.picojava.AbstractSyntax.Block.copy$default$1: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt] @scala.annotation.unchecked.uncheckedVariance
8319 ===> org.kiama.example.obr.RISCTree.Write.hashCode(): Int
3016 ===> org.kiama.example.iswim.secd.HeapOps.Get.productElement(x$1: Int): Any
11501 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.productIterator: Iterator[Any]
6935 ===> org.kiama.example.oberon0.L4.source.FieldList.productPrefix: String
12613 ===> org.kiama.util.GeneratingREPLBase.generator: org.scalacheck.Arbitrary[T]
2887 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.canEqual(x$1: Any): Boolean
10344 ===> org.kiama.example.til.AST.Program.productIterator: Iterator[Any]
9600 ===> org.kiama.example.oneohonecompanies.SampleCompany.ray: org.kiama.example.oneohonecompanies.Company.Employee
9520 ===> org.kiama.example.oneohonecompanies.Company.Employee.copy(n: org.kiama.example.oneohonecompanies.Company.Name,a: org.kiama.example.oneohonecompanies.Company.Address,s: org.kiama.example.oneohonecompanies.Company.Salary): org.kiama.example.oneohonecompanies.Company.Employee
5322 ===> org.kiama.example.oberon0.L0.TypeAnalyser.tipeDef: org.kiama.example.oberon0.L0.source.Expression => TypeAnalyser.this.Type
5469 ===> org.kiama.example.oberon0.L0.c.CLeExp.productArity: Int
4118 ===> org.kiama.example.iswim.secd.StackOps.Swap.hashCode(): Int
3258 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.IntTypeValue): Boolean
4352 ===> org.kiama.example.json.JSONTree.JNull.productIterator: Iterator[Any]
4093 ===> org.kiama.example.iswim.secd.StackOps.Dup.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
6663 ===> org.kiama.example.oberon0.L3.source.VarMode.productPrefix: String
9824 ===> org.kiama.example.picojava.ErrorCheck.record: (scala.collection.mutable.Buffer[String], String) => org.kiama.example.picojava.AbstractSyntax.ASTNode => Unit
1316 ===> org.kiama.example.RISC.RISCISA.Target.productArity: Int
7194 ===> org.kiama.example.oberon0.base.c.CArrayType.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
12456 ===> org.kiama.util.ParserUtilitiesTests.Node.equals(x$1: Any): Boolean
11200 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.apply(exp: ParenPrettyPrinterTests.this.Exp,prio: Int): ParenPrettyPrinterTests.this.PostOp
11629 ===> org.kiama.rewriting.Rewriter.repeat(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
638 ===> org.kiama.example.RISC.RISCISA.SUBI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.SUBI
8892 ===> org.kiama.example.obr.SPARCTree.AddW.unapply(x$0: org.kiama.example.obr.SPARCTree.AddW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
10321 ===> org.kiama.example.repmin.RepminDec.$anonfun.applyOrElse[A1 <: org.kiama.example.repmin.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
4989 ===> org.kiama.example.lambda3.AST.Var.canEqual(x$1: Any): Boolean
7056 ===> org.kiama.example.oberon0.base.Parser.keywordStrings: List[String]
9605 ===> org.kiama.example.oneohonecompanies.SampleCompany.dev: org.kiama.example.oneohonecompanies.Company.Dept
6141 ===> org.kiama.example.oberon0.L0.source.IdnExp.productPrefix: String
12606 ===> org.kiama.util.ParsingREPLBase.processline(line: String): Unit
5787 ===> org.kiama.example.oberon0.L0.source.NamedType.productIterator: Iterator[Any]
6930 ===> org.kiama.example.oberon0.L4.source.FieldList.tipe: org.kiama.example.oberon0.L0.source.TypeDef
1665 ===> org.kiama.example.imperative.AST.Sub.copy$default$2: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
9291 ===> org.kiama.example.obr.SymbolTable.TypeBase.iscompatible(other: org.kiama.example.obr.SymbolTable.TypeBase): Boolean
3861 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.equals(x$1: Any): Boolean
799 ===> org.kiama.example.RISC.RISCISA.CMP.unapply(x$0: org.kiama.example.RISC.RISCISA.CMP): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo)]
4374 ===> org.kiama.example.json.Rewriter.total(c: org.kiama.example.json.JSONTree.JValue): Double
2284 ===> org.kiama.example.iswim.compiler.Syntax.And.r: org.kiama.example.iswim.compiler.Syntax.Expr
11654 ===> org.kiama.rewriting.Rewriter.oncebu(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
12482 ===> org.kiama.util.ParserUtilitiesTests.Tup3.n2: ParserUtilitiesTests.this.Node
11510 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Leaf.readResolve(): Object
7760 ===> org.kiama.example.obr.ObrTree.RaiseStmt.readResolve(): Object
9609 ===> org.kiama.example.oneohonecompanies.Total.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,Double] with Serializable
4899 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
11711 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
971 ===> org.kiama.example.RISC.RISCISA.LDW.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
9311 ===> org.kiama.example.obr.SymbolTable.BoolType.storage: Int
1446 ===> org.kiama.example.dataflow.DataflowAST.Return.copy$default$1: org.kiama.example.dataflow.DataflowAST.Var @scala.annotation.unchecked.uncheckedVariance
334 ===> org.kiama.attribution.AttributionTests.t: AttributionTests.this.Pair
11477 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.<init>(l: org.kiama.rewriting.SupportPositionedRewriterTests.Node,r: org.kiama.rewriting.SupportPositionedRewriterTests.Node): org.kiama.rewriting.SupportPositionedRewriterTests.Two
1485 ===> org.kiama.example.dataflow.Foreach.canEqual(x$1: Any): Boolean
7021 ===> org.kiama.example.oberon0.base.TransformingDriver.printiastFlag: Boolean
8028 ===> org.kiama.example.obr.ObrTree.NegExp.canEqual(x$1: Any): Boolean
8822 ===> org.kiama.example.obr.SPARCTree.Read.readResolve(): Object
1914 ===> org.kiama.example.imperative.PrettyPrinter.showbin(l: org.kiama.example.imperative.AST.ImperativeNode,op: String,r: org.kiama.example.imperative.AST.ImperativeNode): org.kiama.example.imperative.PrettyPrinter.Doc
1938 ===> org.kiama.example.iswim.compiler.Parser.Pos.toString(): String
7976 ===> org.kiama.example.obr.ObrTree.LessExp.equals(x$1: Any): Boolean
3304 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.productArity: Int
9050 ===> org.kiama.example.obr.SPARCTree.MulW.productPrefix: String
6120 ===> org.kiama.example.oberon0.L0.source.IntExp.v: Int
6760 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.equals(x$1: Any): Boolean
142 ===> org.kiama.attribution.AttributionTests.<init>(): org.kiama.attribution.AttributionTests
8289 ===> org.kiama.example.obr.RISCTree.Ret.unapply(x$0: org.kiama.example.obr.RISCTree.Ret): Boolean
7698 ===> org.kiama.example.obr.ObrTree.LoopStmt.productIterator: Iterator[Any]
1081 ===> org.kiama.example.RISC.RISCISA.PSH.productElement(x$1: Int): Any
1657 ===> org.kiama.example.imperative.AST.Add.unapply(x$0: org.kiama.example.imperative.AST.Add): Option[(org.kiama.example.imperative.AST.Exp, org.kiama.example.imperative.AST.Exp)]
8332 ===> org.kiama.example.obr.RISCTree.Read.productElement(x$1: Int): Any
3076 ===> org.kiama.example.iswim.secd.HeapOps.evalInst: PartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
3672 ===> org.kiama.example.iswim.secd.SECDBase.PushType.equals(x$1: Any): Boolean
4678 ===> org.kiama.example.lambda2.AST.IntType.<init>(): org.kiama.example.lambda2.AST.IntType.type
3065 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.copy(): HeapOps.this.RefValue
319 ===> org.kiama.attribution.AttributionTests.QuadTree.copy$default$1: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree) @scala.annotation.unchecked.uncheckedVariance
3719 ===> org.kiama.example.iswim.secd.SECDBase.GetType.toString(): String
6839 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productPrefix: String
1074 ===> org.kiama.example.RISC.RISCISA.PSH.toString(): String
4976 ===> org.kiama.example.lambda3.AST.Num.toString(): String
2409 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.apply(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetStmt
4810 ===> org.kiama.example.lambda2.InnermostSubstEvaluator.reducesinlambdas: Boolean
12517 ===> org.kiama.util.ParserUtilitiesTests.Tup4.hashCode(): Int
5622 ===> org.kiama.example.oberon0.L0.c.CModExp.right: org.kiama.example.oberon0.base.c.CExpression
12206 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5949 ===> org.kiama.example.oberon0.L0.source.AddExp.productArity: Int
10197 ===> org.kiama.example.prolog.SymbolTable.AtomType.<init>(): org.kiama.example.prolog.SymbolTable.AtomType
7287 ===> org.kiama.example.oberon0.base.source.ModuleDecl.unapply(x$0: org.kiama.example.oberon0.base.source.ModuleDecl): Option[(org.kiama.example.oberon0.base.source.IdnDef, org.kiama.example.oberon0.base.source.Block, org.kiama.example.oberon0.base.source.IdnUse)]
8287 ===> org.kiama.example.obr.RISCTree.Ret.toString(): String
4209 ===> org.kiama.example.iswim.tests.SECDTests.SECD.primTable: Map[org.kiama.example.iswim.secd.SECDBase.Name,org.kiama.example.iswim.secd.SECDBase.Value]
6008 ===> org.kiama.example.oberon0.L0.source.MulExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
428 ===> org.kiama.attribution.DynamicAttributionTests.Unused.copy(b: Boolean): DynamicAttributionTests.this.Unused
7659 ===> org.kiama.example.obr.ObrTree.ForStmt.productElement(x$1: Int): Any
3692 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.readResolve(): Object
658 ===> org.kiama.example.RISC.RISCISA.MUL.c: org.kiama.example.RISC.RISCISA.RegNo
9611 ===> org.kiama.example.oneohonecompanies.Total.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4996 ===> org.kiama.example.lambda3.AST.Var.readResolve(): Object
5587 ===> org.kiama.example.oberon0.L0.c.CMulExp.copy$default$2: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
12016 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
5664 ===> org.kiama.example.oberon0.L0.c.CNegExp.<init>(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CNegExp
6642 ===> org.kiama.example.oberon0.L3.source.ProcDecl.copy(idndef: org.kiama.example.oberon0.base.source.IdnDef,params: List[org.kiama.example.oberon0.L3.source.FPSection],body: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L3.source.ProcDecl
6951 ===> org.kiama.example.oberon0.L4.source.FieldExp.copy(base: org.kiama.example.oberon0.L0.source.Expression,fieldname: org.kiama.example.oberon0.L4.source.FieldIdn): org.kiama.example.oberon0.L4.source.FieldExp
4760 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
10556 ===> org.kiama.example.til.AST.Num.apply(n: Int): org.kiama.example.til.AST.Num
9072 ===> org.kiama.example.obr.SPARCTree.NegW.hashCode(): Int
10700 ===> org.kiama.example.til.TIL2_1.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2267 ===> org.kiama.example.iswim.compiler.Syntax.Not.<init>(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Not
8015 ===> org.kiama.example.obr.ObrTree.ModExp.<init>(): org.kiama.example.obr.ObrTree.ModExp.type
6069 ===> org.kiama.example.oberon0.L0.source.AndExp.productIterator: Iterator[Any]
1894 ===> org.kiama.example.imperative.Generator.genInternalExp(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Exp]
7417 ===> org.kiama.example.obr.SemanticDriver.process(ast: org.kiama.example.obr.ObrTree.ObrInt,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
8344 ===> org.kiama.example.obr.RISCTree.AddW.r: org.kiama.example.obr.RISCTree.Datum
4651 ===> org.kiama.example.lambda2.AST.Bind.copy(i: org.kiama.example.lambda2.AST.Idn,e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Bind
1382 ===> org.kiama.example.dataflow.DataflowAST.Assign.toString(): String
8494 ===> org.kiama.example.obr.RISCTree.IntDatum.readResolve(): Object
1474 ===> org.kiama.example.dataflow.DataflowAST.Empty.readResolve(): Object
11176 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.<init>(): ParenPrettyPrinterTests.this.InOp.type
2038 ===> org.kiama.example.iswim.compiler.Syntax.Negate.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Negate): Option[org.kiama.example.iswim.compiler.Syntax.Expr]
10422 ===> org.kiama.example.til.AST.IfElse.canEqual(x$1: Any): Boolean
3696 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productArity: Int
12465 ===> org.kiama.util.ParserUtilitiesTests.Tup2.copy(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup2
6145 ===> org.kiama.example.oberon0.L0.source.IdnExp.canEqual(x$1: Any): Boolean
2413 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.<init>(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding]): org.kiama.example.iswim.compiler.Syntax.LetRecStmt
9773 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
5761 ===> org.kiama.example.oberon0.L0.source.TypeDecl.tipe: org.kiama.example.oberon0.L0.source.TypeDef
7898 ===> org.kiama.example.obr.ObrTree.GreaterExp.productArity: Int
7724 ===> org.kiama.example.obr.ObrTree.ReturnStmt.readResolve(): Object
9842 ===> org.kiama.example.picojava.Parser.whiteSpace: scala.util.matching.Regex
2285 ===> org.kiama.example.iswim.compiler.Syntax.And.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.And
8405 ===> org.kiama.example.obr.RISCTree.CmpneW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpneW
7923 ===> org.kiama.example.obr.ObrTree.IdnExp.toString(): String
12330 ===> org.kiama.util.Environments.MultipleEntity.hashCode(): Int
8799 ===> org.kiama.example.obr.SPARCTree.LabelDef.toString(): String
10399 ===> org.kiama.example.til.AST.IfThen.productElement(x$1: Int): Any
11278 ===> org.kiama.rewriting.NominalAST.Bind.<init>(name: org.kiama.rewriting.NominalAST.Name,term: Any): org.kiama.rewriting.NominalAST.Bind
3492 ===> org.kiama.example.iswim.secd.SECDBase.App.productElement(x$1: Int): Any
9033 ===> org.kiama.example.obr.SPARCTree.LdW.productElement(x$1: Int): Any
9595 ===> org.kiama.example.oneohonecompanies.SampleCompany.craig: org.kiama.example.oneohonecompanies.Company.Employee
12329 ===> org.kiama.util.Environments.MultipleEntity.canEqual(x$1: Any): Boolean
4043 ===> org.kiama.example.iswim.secd.SECDBase.EmptyCont.productArity: Int
11987 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
7548 ===> org.kiama.example.obr.ObrTree.EnumVar.productElement(x$1: Int): Any
10380 ===> org.kiama.example.til.AST.Assign.productElement(x$1: Int): Any
11016 ===> org.kiama.output.PrettyPrinterBase.DocOps.$less$bslash$greater(e: PrettyPrinterBase.this.Doc): PrettyPrinterBase.this.Doc
1631 ===> org.kiama.example.imperative.AST.Neg.unapply(x$0: org.kiama.example.imperative.AST.Neg): Option[org.kiama.example.imperative.AST.Exp]
8637 ===> org.kiama.example.obr.RISCTree.Local.apply(offset: Int): org.kiama.example.obr.RISCTree.Local
12512 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productPrefix: String
7893 ===> org.kiama.example.obr.ObrTree.GreaterExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.GreaterExp
9461 ===> org.kiama.example.obr.SyntaxAnalysis.Pos.apply(s: String): SyntaxAnalysis.this.Pos
1073 ===> org.kiama.example.RISC.RISCISA.PSH.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.PSH
6658 ===> org.kiama.example.oberon0.L3.source.ProcDecl.unapply(x$0: org.kiama.example.oberon0.L3.source.ProcDecl): Option[(org.kiama.example.oberon0.base.source.IdnDef, List[org.kiama.example.oberon0.L3.source.FPSection], org.kiama.example.oberon0.base.source.Block, org.kiama.example.oberon0.base.source.IdnUse)]
2812 ===> org.kiama.example.iswim.secd.BooleanOps.Test.readResolve(): Object
8220 ===> org.kiama.example.obr.RISCTree.Beq.apply(cond: org.kiama.example.obr.RISCTree.Datum,dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Beq
5825 ===> org.kiama.example.oberon0.L0.source.EqExp.right: org.kiama.example.oberon0.L0.source.Expression
285 ===> org.kiama.attribution.AttributionTests.PairTree.copy$default$1: (AttributionTests.this.Tree, AttributionTests.this.Tree) @scala.annotation.unchecked.uncheckedVariance
1756 ===> org.kiama.example.imperative.AST.Asgn.e: org.kiama.example.imperative.AST.Exp
9255 ===> org.kiama.example.obr.SymbolTable.Constant.toString(): String
10782 ===> org.kiama.example.transform.AST.BinExpR.unapply(x$0: org.kiama.example.transform.AST.BinExpR): Option[(org.kiama.example.transform.AST.Exp, String, org.kiama.example.transform.AST.ExpR)]
3159 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.productElement(x$1: Int): Any
11841 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7376 ===> org.kiama.example.oberon0.drivers.A2aPhases.langlevel: Int
3536 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.<init>(nms: List[org.kiama.example.iswim.secd.SECDBase.Name]): org.kiama.example.iswim.secd.SECDBase.BindPrims
12000 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
10878 ===> org.kiama.machine.Machine.State.$eq$colon$eq(t: T): Boolean
6679 ===> org.kiama.example.oberon0.L3.source.ValMode.productArity: Int
6195 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
12614 ===> org.kiama.util.GeneratingREPLBase.processline(line: String): Unit
10453 ===> org.kiama.example.til.AST.For.b: Seq[org.kiama.example.til.AST.Stat]
10283 ===> org.kiama.example.repmin.Fork.productArity: Int
8709 ===> org.kiama.example.obr.SPARCTransformation.ditems: org.kiama.example.obr.ObrTree.Declaration => List[org.kiama.example.obr.SPARCTree.Item]
7033 ===> org.kiama.example.oberon0.base.TranslatingDriver.printcastFlag_$eq(x$1: Boolean): Unit
1334 ===> org.kiama.example.RISC.RISCISA.Comment.productElement(x$1: Int): Any
9654 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.<init>(Name: String,Superclass: Option[org.kiama.example.picojava.AbstractSyntax.IdnUse],Body: org.kiama.example.picojava.AbstractSyntax.Block): org.kiama.example.picojava.AbstractSyntax.ClassDecl
5958 ===> org.kiama.example.oberon0.L0.source.AddExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.AddExp
5084 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.toString(): String
693 ===> org.kiama.example.RISC.RISCISA.MULI.<init>(): org.kiama.example.RISC.RISCISA.MULI.type
5123 ===> org.kiama.example.lambda3.AST.SubstQuery.productIterator: Iterator[Any]
7357 ===> org.kiama.example.oberon0.base.source.IdnUse.apply(ident: String): org.kiama.example.oberon0.base.source.IdnUse
5401 ===> org.kiama.example.oberon0.L0.c.CEqExp.left: org.kiama.example.oberon0.base.c.CExpression
12474 ===> org.kiama.util.ParserUtilitiesTests.Tup2.toString(): String
4525 ===> org.kiama.example.lambda2.AST.Num.apply(n: Int): org.kiama.example.lambda2.AST.Num
3618 ===> org.kiama.example.iswim.secd.SECDBase.ResumeFromDump.productElement(x$1: Int): Any
7974 ===> org.kiama.example.obr.ObrTree.LessExp.hashCode(): Int
4168 ===> org.kiama.example.iswim.secd.StringOps.StringValue.getType: org.kiama.example.iswim.secd.SECDBase.TypeValue
9597 ===> org.kiama.example.oneohonecompanies.SampleCompany.ralf: org.kiama.example.oneohonecompanies.Company.Employee
9267 ===> org.kiama.example.obr.SymbolTable.Unknown.toString(): String
12581 ===> org.kiama.util.Positioned.start: scala.util.parsing.input.Position
5810 ===> org.kiama.example.oberon0.L0.source.Assignment.equals(x$1: Any): Boolean
6582 ===> org.kiama.example.oberon0.L3.c.CStrExp.productPrefix: String
9382 ===> org.kiama.example.obr.SymbolTable.EnumType.copy(ident: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.SymbolTable.EnumType
655 ===> org.kiama.example.RISC.RISCISA.SUBI.readResolve(): Object
9750 ===> org.kiama.example.picojava.AbstractSyntax.Use.readResolve(): Object
11528 ===> org.kiama.rewriting.Rewriter.Strategy.$less(lr: => Rewriter.this.PlusStrategy): Rewriter.this.Strategy
2888 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.hashCode(): Int
6121 ===> org.kiama.example.oberon0.L0.source.IntExp.<init>(v: Int): org.kiama.example.oberon0.L0.source.IntExp
10360 ===> org.kiama.example.til.AST.Decl.productArity: Int
9385 ===> org.kiama.example.obr.SymbolTable.EnumType.productArity: Int
12291 ===> org.kiama.util.ReaderConsole.$init$(): Unit
10286 ===> org.kiama.example.repmin.Fork.canEqual(x$1: Any): Boolean
6957 ===> org.kiama.example.oberon0.L4.source.FieldExp.productIterator: Iterator[Any]
3222 ===> org.kiama.example.iswim.secd.IntegerOps.Div.hashCode(): Int
4596 ===> org.kiama.example.lambda2.AST.Opn.productIterator: Iterator[Any]
11916 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3774 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.productPrefix: String
7036 ===> org.kiama.example.oberon0.base.TranslatingDriver.printcastFlagDefault: Boolean
3853 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.message: String
2654 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.hashCode(): Int
4516 ===> org.kiama.example.lambda2.AST.Num.productArity: Int
2373 ===> org.kiama.example.iswim.compiler.Syntax.Let.apply(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Let
6576 ===> org.kiama.example.oberon0.L3.c.CCall.unapply(x$0: org.kiama.example.oberon0.L3.c.CCall): Option[(String, List[org.kiama.example.oberon0.base.c.CExpression])]
1875 ===> org.kiama.example.imperative.Imperative.process(s: org.kiama.example.imperative.AST.Stmt): Unit
10953 ===> org.kiama.output.NonAssoc.<init>(): org.kiama.output.NonAssoc.type
1298 ===> org.kiama.example.RISC.RISCISA.RET.productArity: Int
9820 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.readResolve(): Object
11719 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
9868 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.yInR: org.kiama.example.picojava.AbstractSyntax.Use
7854 ===> org.kiama.example.obr.ObrTree.EqualExp.right: org.kiama.example.obr.ObrTree.Expression
8654 ===> org.kiama.example.obr.RISCTree.Indexed.<init>(): org.kiama.example.obr.RISCTree.Indexed.type
9523 ===> org.kiama.example.oneohonecompanies.Company.Employee.copy$default$3: org.kiama.example.oneohonecompanies.Company.Salary @scala.annotation.unchecked.uncheckedVariance
602 ===> org.kiama.example.RISC.RISCISA.ADDI.productPrefix: String
2515 ===> org.kiama.example.iswim.compiler.Syntax.If.toString(): String
8714 ===> org.kiama.example.obr.SPARCTree.SPARC.insns: List[org.kiama.example.obr.SPARCTree.Item]
7501 ===> org.kiama.example.obr.ObrTree.BoolVar.readResolve(): Object
6742 ===> org.kiama.example.oberon0.L4.Parser.$init$(): Unit
10402 ===> org.kiama.example.til.AST.IfThen.hashCode(): Int
10996 ===> org.kiama.output.Infix.unapply(x$0: org.kiama.output.Infix): Option[org.kiama.output.Side]
7612 ===> org.kiama.example.obr.ObrTree.Statement.<init>(): org.kiama.example.obr.ObrTree.Statement
7969 ===> org.kiama.example.obr.ObrTree.LessExp.productPrefix: String
4446 ===> org.kiama.example.lambda.AST.App.copy(l: org.kiama.example.lambda.AST.Exp,r: org.kiama.example.lambda.AST.Exp): org.kiama.example.lambda.AST.App
7030 ===> org.kiama.example.oberon0.base.TranslatingDriver.$init$(): Unit
11095 ===> org.kiama.output.PrettyPrinterBase.rbrace: PrettyPrinterBase.this.Doc
4972 ===> org.kiama.example.lambda3.AST.Num.canEqual(x$1: Any): Boolean
8046 ===> org.kiama.example.obr.ObrTree.NotEqualExp.productIterator: Iterator[Any]
3490 ===> org.kiama.example.iswim.secd.SECDBase.App.productPrefix: String
885 ===> org.kiama.example.RISC.RISCISA.OR.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
3991 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.productIterator: Iterator[Any]
8952 ===> org.kiama.example.obr.SPARCTree.CmpneW.readResolve(): Object
1972 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.e: org.kiama.example.iswim.compiler.Syntax.Expr
8481 ===> org.kiama.example.obr.RISCTree.IntDatum.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
6599 ===> org.kiama.example.oberon0.L3.c.CAddrExp.copy(exp: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L3.c.CAddrExp
10061 ===> org.kiama.example.prolog.PrologTree.Var.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
11129 ===> org.kiama.output.PrettyPrinterTests.l: List[PrettyPrinterTests.this.Doc]
11113 ===> org.kiama.output.PrettyPrinter.prune(c: (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout): (PrettyPrinter.this.PPosition, PrettyPrinter.this.Dq) => PrettyPrinter.this.Remaining => PrettyPrinter.this.Layout
4083 ===> org.kiama.example.iswim.secd.StackOps.Pop.toString(): String
5552 ===> org.kiama.example.oberon0.L0.c.CSubExp.canEqual(x$1: Any): Boolean
11214 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.productElement(x$1: Int): Any
11947 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7382 ===> org.kiama.example.oberon0.drivers.A2bPhases.langlevel: Int
5341 ===> org.kiama.example.oberon0.L0.c.CNamedType.unapply(x$0: org.kiama.example.oberon0.L0.c.CNamedType): Option[String]
12332 ===> org.kiama.util.Environments.MultipleEntity.equals(x$1: Any): Boolean
10843 ===> org.kiama.example.transform.AST.Var.copy(name: String): org.kiama.example.transform.AST.Var
9036 ===> org.kiama.example.obr.SPARCTree.LdW.hashCode(): Int
7673 ===> org.kiama.example.obr.ObrTree.IfStmt.<init>(cond: org.kiama.example.obr.ObrTree.Expression,thens: List[org.kiama.example.obr.ObrTree.Statement],elses: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.IfStmt
1208 ===> org.kiama.example.RISC.RISCISA.BLT.toString(): String
9055 ===> org.kiama.example.obr.SPARCTree.MulW.hashCode(): Int
12530 ===> org.kiama.util.ParserUtilitiesTests.Tup5.<init>(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup5
6345 ===> org.kiama.example.oberon0.L2.source.CaseStatement.apply(exp: org.kiama.example.oberon0.L0.source.Expression,cases: List[org.kiama.example.oberon0.L2.source.Case],optelse: Option[org.kiama.example.oberon0.base.source.Block]): org.kiama.example.oberon0.L2.source.CaseStatement
3317 ===> org.kiama.example.iswim.secd.RecordOps.Fields.copy(): org.kiama.example.iswim.secd.RecordOps.Fields
4369 ===> org.kiama.example.json.PrettyPrinting.pretty(t: org.kiama.example.json.JSONTree.JValue): String
10960 ===> org.kiama.output.NonAssoc.toString(): String
1408 ===> org.kiama.example.dataflow.DataflowAST.If.<init>(cond: org.kiama.example.dataflow.DataflowAST.Var,tru: org.kiama.example.dataflow.DataflowAST.Stm,fls: org.kiama.example.dataflow.DataflowAST.Stm): org.kiama.example.dataflow.DataflowAST.If
11260 ===> org.kiama.rewriting.NominalAST.Name.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
6224 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.equals(x$1: Any): Boolean
6492 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.productIterator: Iterator[Any]
1378 ===> org.kiama.example.dataflow.DataflowAST.Assign.hashCode(): Int
10131 ===> org.kiama.example.prolog.PrologTree.Cut.productPrefix: String
10186 ===> org.kiama.example.prolog.SymbolTable.Variable.productIterator: Iterator[Any]
4261 ===> org.kiama.example.json.JSONTree.JName.<init>(): org.kiama.example.json.JSONTree.JName.type
7076 ===> org.kiama.example.oberon0.base.c.CProgram.equals(x$1: Any): Boolean
10020 ===> org.kiama.example.prolog.PrologTree.Fact.<init>(hd: org.kiama.example.prolog.PrologTree.Term): org.kiama.example.prolog.PrologTree.Fact
8852 ===> org.kiama.example.obr.SPARCTree.StW.<init>(): org.kiama.example.obr.SPARCTree.StW.type
10721 ===> org.kiama.example.til.TIL2_3Tests.<init>(): org.kiama.example.til.TIL2_3Tests
5519 ===> org.kiama.example.oberon0.L0.c.CGeExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CGeExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
7495 ===> org.kiama.example.obr.ObrTree.BoolVar.toString(): String
9696 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.copy$default$1: org.kiama.example.picojava.AbstractSyntax.Access @scala.annotation.unchecked.uncheckedVariance
10043 ===> org.kiama.example.prolog.PrologTree.Rule.productPrefix: String
12563 ===> org.kiama.util.ParserUtilitiesTests.Tup6.copy$default$6: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
9190 ===> org.kiama.example.obr.SPARCTree.lastlab: Int
11866 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
408 ===> org.kiama.attribution.DynamicAttributionTests.Pair.readResolve(): Object
8278 ===> org.kiama.example.obr.RISCTree.Ret.productPrefix: String
2705 ===> org.kiama.example.iswim.compiler.Syntax.Val.productIterator: Iterator[Any]
2859 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.unapply(x$0: BooleanOps.this.TrueValue): Boolean
5174 ===> org.kiama.example.oberon0.L0.Desugarer.transform(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.source.ModuleDecl
6849 ===> org.kiama.example.oberon0.L4.c.CIndexExp.apply(array: org.kiama.example.oberon0.base.c.CExpression,index: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L4.c.CIndexExp
973 ===> org.kiama.example.RISC.RISCISA.LDW.copy$default$3: org.kiama.example.RISC.RISCISA.Imm @scala.annotation.unchecked.uncheckedVariance
5829 ===> org.kiama.example.oberon0.L0.source.EqExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
5566 ===> org.kiama.example.oberon0.L0.c.COrExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
3695 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.productPrefix: String
10111 ===> org.kiama.example.prolog.PrologTree.Pred.<init>(s: String,ts: List[org.kiama.example.prolog.PrologTree.Term]): org.kiama.example.prolog.PrologTree.Pred
4593 ===> org.kiama.example.lambda2.AST.Opn.productPrefix: String
7865 ===> org.kiama.example.obr.ObrTree.EqualExp.toString(): String
11396 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.productElement(x$1: Int): Any
5625 ===> org.kiama.example.oberon0.L0.c.CModExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CModExp
11597 ===> org.kiama.rewriting.Rewriter.$anon.oneMap[CC[V, W] <: Map[V,W]](t: CC[Rewriter.this.Term,Rewriter.this.Term])(implicit cbf: scala.collection.generic.CanBuildFrom[CC[Rewriter.this.Term,Rewriter.this.Term],(Rewriter.this.Term, Rewriter.this.Term),CC[Rewriter.this.Term,Rewriter.this.Term]]): Option[CC[Rewriter.this.Term,Rewriter.this.Term]]
11299 ===> org.kiama.rewriting.NominalAST.GenName.apply(oldname: org.kiama.rewriting.NominalAST.Name): org.kiama.rewriting.NominalAST.Name
10079 ===> org.kiama.example.prolog.PrologTree.Integer.productPrefix: String
414 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.productArity: Int
8291 ===> org.kiama.example.obr.RISCTree.StW.mem: org.kiama.example.obr.RISCTree.Address
12404 ===> org.kiama.util.Messaging.Record.unapply(x$0: org.kiama.util.Messaging.Record): Option[(scala.util.parsing.input.Position, String)]
2566 ===> org.kiama.example.iswim.compiler.Syntax.Empty.toString(): String
12497 ===> org.kiama.util.ParserUtilitiesTests.Tup3.<init>(): ParserUtilitiesTests.this.Tup3.type
5200 ===> org.kiama.example.oberon0.L0.SymbolTable.$init$(): Unit
4669 ===> org.kiama.example.lambda2.AST.IntType.copy(): org.kiama.example.lambda2.AST.IntType
8442 ===> org.kiama.example.obr.RISCTree.CmpltW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpltW
2457 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.hashCode(): Int
4271 ===> org.kiama.example.json.JSONTree.JArray.productArity: Int
3315 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.readResolve(): Object
279 ===> org.kiama.attribution.AttributionTests.MapTree.apply(m: Map[AttributionTests.this.Tree,AttributionTests.this.Tree]): AttributionTests.this.MapTree
6859 ===> org.kiama.example.oberon0.L4.c.CFieldExp.productArity: Int
9833 ===> org.kiama.example.picojava.NameResolution.finddecl(t: org.kiama.attribution.Attributable,name: String,blockstmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]): org.kiama.example.picojava.AbstractSyntax.Decl
4684 ===> org.kiama.example.lambda2.AST.FunType.t2: org.kiama.example.lambda2.AST.Type
6204 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.toString(): String
8782 ===> org.kiama.example.obr.SPARCTree.Jmp.toString(): String
7968 ===> org.kiama.example.obr.ObrTree.LessExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
1983 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.equals(x$1: Any): Boolean
11241 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.readResolve(): Object
8439 ===> org.kiama.example.obr.RISCTree.CmpgtW.readResolve(): Object
9083 ===> org.kiama.example.obr.SPARCTree.Not.copy$default$1: org.kiama.example.obr.SPARCTree.Datum @scala.annotation.unchecked.uncheckedVariance
5601 ===> org.kiama.example.oberon0.L0.c.CDivExp.left: org.kiama.example.oberon0.base.c.CExpression
7596 ===> org.kiama.example.obr.ObrTree.ExnConst.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.ExnConst
28 ===> org.kiama.attribution.Attributable.deepclone[T <: org.kiama.attribution.Attributable](t: T): T
2536 ===> org.kiama.example.iswim.compiler.Syntax.While.<init>(): org.kiama.example.iswim.compiler.Syntax.While.type
11447 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.PositionedRewriter.Term, B1 >: org.kiama.rewriting.PositionedRewriter.Term](x$1: A1,default: A1 => B1): B1
289 ===> org.kiama.attribution.AttributionTests.PairTree.productIterator: Iterator[Any]
5623 ===> org.kiama.example.oberon0.L0.c.CModExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CModExp
12127 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
457 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[DynamicAttributionTests.this.Tree,Int] with Serializable
7916 ===> org.kiama.example.obr.ObrTree.IdnExp.productElement(x$1: Int): Any
10499 ===> org.kiama.example.til.AST.Write.hashCode(): Int
11789 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
9307 ===> org.kiama.example.obr.SymbolTable.IntType.apply(): org.kiama.example.obr.SymbolTable.IntType
6942 ===> org.kiama.example.oberon0.L4.source.FieldList.equals(x$1: Any): Boolean
6419 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translateActualParam(p: org.kiama.example.oberon0.L0.source.Expression,mode: org.kiama.example.oberon0.L3.source.Mode): org.kiama.example.oberon0.base.c.CExpression
1587 ===> org.kiama.example.imperative.AST.Num.toString(): String
2633 ===> org.kiama.example.iswim.compiler.Syntax.Match.productArity: Int
10329 ===> org.kiama.example.til.Main.process(reader: java.io.Reader): Any
118 ===> org.kiama.attribution.UncachedAttribution.UncachedAttribute.<init>(f: T => U): UncachedAttribution.this.UncachedAttribute[T,U]
6949 ===> org.kiama.example.oberon0.L4.source.FieldExp.fieldname: org.kiama.example.oberon0.L4.source.FieldIdn
7914 ===> org.kiama.example.obr.ObrTree.IdnExp.productPrefix: String
6536 ===> org.kiama.example.oberon0.L3.c.CVoidType.equals(x$1: Any): Boolean
7221 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.toString(): String
11518 ===> org.kiama.rewriting.Rewriter.$init$(): Unit
3265 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.productElement(x$1: Int): Any
3161 ===> org.kiama.example.iswim.secd.IntegerOps.PushInt.canEqual(x$1: Any): Boolean
10559 ===> org.kiama.example.til.AST.Str.s: String
11937 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2148 ===> org.kiama.example.iswim.compiler.Syntax.Equal.equals(x$1: Any): Boolean
10922 ===> org.kiama.machine.MachineTests.<init>(): org.kiama.machine.MachineTests
5398 ===> org.kiama.example.oberon0.L0.c.CBinaryExpression.op: String
6281 ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7776 ===> org.kiama.example.obr.ObrTree.TryStmt.toString(): String
11522 ===> org.kiama.rewriting.Rewriter.Strategy.$anon.<init>(): Rewriter.this.Strategy
2645 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.e: org.kiama.example.iswim.compiler.Syntax.Expr
11125 ===> org.kiama.output.PrettyPrinter.nest$default$2: PrettyPrinter.this.Indent @scala.annotation.unchecked.uncheckedVariance
8297 ===> org.kiama.example.obr.RISCTree.StW.productPrefix: String
12624 ===> org.kiama.util.RegexParserTests.$init$(): Unit
6447 ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
6655 ===> org.kiama.example.oberon0.L3.source.ProcDecl.<init>(): org.kiama.example.oberon0.L3.source.ProcDecl.type
596 ===> org.kiama.example.RISC.RISCISA.ADDI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ADDI
10923 ===> org.kiama.machine.MachineTests.memitter: org.kiama.util.StringEmitter
9910 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productElement(x$1: Int): Any
7426 ===> org.kiama.example.obr.ObrTree.ObrNode.<init>(): org.kiama.example.obr.ObrTree.ObrNode
8349 ===> org.kiama.example.obr.RISCTree.AddW.productPrefix: String
3357 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.toString(): String
6183 ===> org.kiama.example.oberon0.L1.c.CIfStatement.toString(): String
3296 ===> org.kiama.example.iswim.secd.IntegerOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
6972 ===> org.kiama.example.oberon0.L4.source.FieldIdn.productArity: Int
5207 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productPrefix: String
12618 ===> org.kiama.util.Tests.failExpectedTest[T](expected: T,found: T,description: String): Unit
512 ===> org.kiama.example.RISC.RISCISA.MOVI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MOVI
7778 ===> org.kiama.example.obr.ObrTree.TryStmt.unapply(x$0: org.kiama.example.obr.ObrTree.TryStmt): Option[(org.kiama.example.obr.ObrTree.TryBody, List[org.kiama.example.obr.ObrTree.Catch])]
9249 ===> org.kiama.example.obr.SymbolTable.Constant.productIterator: Iterator[Any]
12598 ===> org.kiama.util.REPLBase.$init$(): Unit
140 ===> org.kiama.attribution.UncachedAttribution.childAttr[T <: org.kiama.attribution.Attributable, U](name: String)(f: T => (org.kiama.attribution.Attributable => U)): UncachedAttribution.this.UncachedAttribute[T,U]
1625 ===> org.kiama.example.imperative.AST.Neg.hashCode(): Int
6384 ===> org.kiama.example.oberon0.L2.source.ValCond.readResolve(): Object
605 ===> org.kiama.example.RISC.RISCISA.ADDI.productIterator: Iterator[Any]
2712 ===> org.kiama.example.iswim.compiler.Syntax.Val.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Val
11591 ===> org.kiama.rewriting.Rewriter.one(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2549 ===> org.kiama.example.iswim.compiler.Syntax.Block.canEqual(x$1: Any): Boolean
8728 ===> org.kiama.example.obr.SPARCTree.SPARC.<init>(): org.kiama.example.obr.SPARCTree.SPARC.type
9176 ===> org.kiama.example.obr.SPARCTree.Label.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
11610 ===> org.kiama.rewriting.Rewriter.memo(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
8415 ===> org.kiama.example.obr.RISCTree.CmpneW.equals(x$1: Any): Boolean
3740 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue): Boolean
12341 ===> org.kiama.util.Environments.UnknownEntity.productArity: Int
4748 ===> org.kiama.example.lambda2.AST.SubOp.apply(): org.kiama.example.lambda2.AST.SubOp
9411 ===> org.kiama.example.obr.SymbolTable.EnumTypes.readResolve(): Object
6982 ===> org.kiama.example.oberon0.L4.source.FieldIdn.unapply(x$0: org.kiama.example.oberon0.L4.source.FieldIdn): Option[String]
3068 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.productElement(x$1: Int): Any
11274 ===> org.kiama.rewriting.NominalAST.Name.$lessinit$greater$default$2: Option[Int] @scala.annotation.unchecked.uncheckedVariance
11639 ===> org.kiama.rewriting.Rewriter.loopiter(s: Int => Rewriter.this.Strategy,low: Int,high: Int): Rewriter.this.Strategy
11842 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
3902 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.productElement(x$1: Int): Any
8335 ===> org.kiama.example.obr.RISCTree.Read.hashCode(): Int
8627 ===> org.kiama.example.obr.RISCTree.Local.productPrefix: String
6117 ===> org.kiama.example.oberon0.L0.source.NotExp.apply(exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NotExp
9671 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.readResolve(): Object
7955 ===> org.kiama.example.obr.ObrTree.IntExp.hashCode(): Int
12481 ===> org.kiama.util.ParserUtilitiesTests.Tup3.n1: ParserUtilitiesTests.this.Node
7141 ===> org.kiama.example.oberon0.base.c.CBlock.stmts: List[org.kiama.example.oberon0.base.c.CStatement]
7434 ===> org.kiama.example.obr.ObrTree.ObrInt.copy$default$2: List[org.kiama.example.obr.ObrTree.Declaration] @scala.annotation.unchecked.uncheckedVariance
3930 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.productPrefix: String
8726 ===> org.kiama.example.obr.SPARCTree.SPARC.toString(): String
4610 ===> org.kiama.example.lambda2.AST.Let.<init>(i: org.kiama.example.lambda2.AST.Idn,t: org.kiama.example.lambda2.AST.Type,e1: org.kiama.example.lambda2.AST.Exp,e2: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Let
1550 ===> org.kiama.example.dataflow.DataflowTests.s4: org.kiama.example.dataflow.DataflowAST.While
4278 ===> org.kiama.example.json.JSONTree.JArray.<init>(): org.kiama.example.json.JSONTree.JArray.type
12247 ===> org.kiama.rewriting.UniplateTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6891 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.unapply(x$0: org.kiama.example.oberon0.L4.source.ArrayTypeDef): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.TypeDef)]
1651 ===> org.kiama.example.imperative.AST.Add.hashCode(): Int
7557 ===> org.kiama.example.obr.ObrTree.EnumVar.unapply(x$0: org.kiama.example.obr.ObrTree.EnumVar): Option[(org.kiama.example.obr.ObrTree.Identifier, List[org.kiama.example.obr.ObrTree.EnumConst])]
10595 ===> org.kiama.example.til.AST.Div.l: org.kiama.example.til.AST.Exp
6706 ===> org.kiama.example.oberon0.L3.source.FPSection.equals(x$1: Any): Boolean
12031 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2195 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.LessEq
8307 ===> org.kiama.example.obr.RISCTree.StW.apply(mem: org.kiama.example.obr.RISCTree.Address,d: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.StW
9702 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.canEqual(x$1: Any): Boolean
2873 ===> org.kiama.example.iswim.secd.BooleanOps.FalseValue.apply(): BooleanOps.this.FalseValue
6211 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.cond: org.kiama.example.oberon0.base.c.CExpression
5882 ===> org.kiama.example.oberon0.L0.source.LeExp.right: org.kiama.example.oberon0.L0.source.Expression
8099 ===> org.kiama.example.obr.ObrTree.PlusExp.productArity: Int
4399 ===> org.kiama.example.lambda.AST.Num.hashCode(): Int
6567 ===> org.kiama.example.oberon0.L3.c.CCall.productElement(x$1: Int): Any
10464 ===> org.kiama.example.til.AST.For.canEqual(x$1: Any): Boolean
10892 ===> org.kiama.machine.Machine.ParamState.value(t: T): U
255 ===> org.kiama.attribution.AttributionTests.GenSeqTree.productIterator: Iterator[Any]
669 ===> org.kiama.example.RISC.RISCISA.MUL.canEqual(x$1: Any): Boolean
908 ===> org.kiama.example.RISC.RISCISA.ORI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
10632 ===> org.kiama.example.til.AST.Add.readResolve(): Object
647 ===> org.kiama.example.RISC.RISCISA.SUBI.productIterator: Iterator[Any]
1742 ===> org.kiama.example.imperative.AST.Seqn.productPrefix: String
7966 ===> org.kiama.example.obr.ObrTree.LessExp.copy(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.LessExp
3640 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.toString(): String
6967 ===> org.kiama.example.oberon0.L4.source.FieldIdn.ident: String
8441 ===> org.kiama.example.obr.RISCTree.CmpltW.r: org.kiama.example.obr.RISCTree.Datum
9631 ===> org.kiama.example.picojava.AbstractSyntax.Block.<init>(BlockStmts: Seq[org.kiama.example.picojava.AbstractSyntax.BlockStmt]): org.kiama.example.picojava.AbstractSyntax.Block
7174 ===> org.kiama.example.oberon0.base.c.CIntType.readResolve(): Object
7156 ===> org.kiama.example.oberon0.base.c.CBlock.apply(decls: List[org.kiama.example.oberon0.base.c.CDeclaration],stmts: List[org.kiama.example.oberon0.base.c.CStatement]): org.kiama.example.oberon0.base.c.CBlock
11091 ===> org.kiama.output.PrettyPrinterBase.backquote: PrettyPrinterBase.this.Doc
11195 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.hashCode(): Int
4963 ===> org.kiama.example.lambda3.AST.Num.i: Int
5922 ===> org.kiama.example.oberon0.L0.source.GeExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.GeExp
1318 ===> org.kiama.example.RISC.RISCISA.Target.productIterator: Iterator[Any]
7797 ===> org.kiama.example.obr.ObrTree.Catch.idn: org.kiama.example.obr.ObrTree.Identifier
6143 ===> org.kiama.example.oberon0.L0.source.IdnExp.productElement(x$1: Int): Any
2756 ===> org.kiama.example.iswim.driver.Main.$anon.debug: Boolean
6495 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.toString(): String
9962 ===> org.kiama.example.prolog.Interpreter.MatchGoal.copy$default$2: org.kiama.example.prolog.PrologTree.Term @scala.annotation.unchecked.uncheckedVariance
1675 ===> org.kiama.example.imperative.AST.Sub.toString(): String
7402 ===> org.kiama.example.obr.Driver.spillRISCAssemFlag: Boolean
646 ===> org.kiama.example.RISC.RISCISA.SUBI.productElement(x$1: Int): Any
810 ===> org.kiama.example.RISC.RISCISA.CMPI.productElement(x$1: Int): Any
8751 ===> org.kiama.example.obr.SPARCTree.Beq.unapply(x$0: org.kiama.example.obr.SPARCTree.Beq): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Label)]
17 ===> org.kiama.attribution.Attributable.hasChildren: Boolean
7482 ===> org.kiama.example.obr.ObrTree.IntParam.apply(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IntParam
329 ===> org.kiama.attribution.AttributionTests.QuadTree.toString(): String
3968 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.equals(x$1: Any): Boolean
1970 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.IswimProg): Option[List[org.kiama.example.iswim.compiler.Syntax.Stmt]]
4759 ===> org.kiama.example.lambda2.AST.Lam(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy,s3: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
2305 ===> org.kiama.example.iswim.compiler.Syntax.Or.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Or
2686 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.productArity: Int
6946 ===> org.kiama.example.oberon0.L4.source.FieldList.unapply(x$0: org.kiama.example.oberon0.L4.source.FieldList): Option[(List[String], org.kiama.example.oberon0.L0.source.TypeDef)]
7102 ===> org.kiama.example.oberon0.base.c.CVarDecl.<init>(ident: String,tipe: org.kiama.example.oberon0.base.c.CType): org.kiama.example.oberon0.base.c.CVarDecl
8699 ===> org.kiama.example.obr.SPARCEncoder.arith3(opcode: String,l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum,d: org.kiama.example.obr.SPARCTree.Datum): Unit
1119 ===> org.kiama.example.RISC.RISCISA.WRD.equals(x$1: Any): Boolean
3582 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.Lookup): Option[org.kiama.example.iswim.secd.SECDBase.Name]
2293 ===> org.kiama.example.iswim.compiler.Syntax.And.canEqual(x$1: Any): Boolean
1447 ===> org.kiama.example.dataflow.DataflowAST.Return.productPrefix: String
10606 ===> org.kiama.example.til.AST.Div.hashCode(): Int
5755 ===> org.kiama.example.oberon0.L0.source.VarDecl.<init>(): org.kiama.example.oberon0.L0.source.VarDecl.type
11655 ===> org.kiama.rewriting.Rewriter.sometd(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2804 ===> org.kiama.example.iswim.secd.BooleanOps.Test.canEqual(x$1: Any): Boolean
4129 ===> org.kiama.example.iswim.secd.StackOps.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
9869 ===> org.kiama.example.picojava.tests.BasicNameResolutionTests.yInA: org.kiama.example.picojava.AbstractSyntax.Use
7046 ===> org.kiama.example.oberon0.base.TestDriver.sanitise(s: String): String
1076 ===> org.kiama.example.RISC.RISCISA.PSH.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
7315 ===> org.kiama.example.oberon0.base.source.EmptyStmt.canEqual(x$1: Any): Boolean
8686 ===> org.kiama.example.obr.SPARCEncoder.selectreg(): Int
11432 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.<init>(): org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{}
6432 ===> org.kiama.example.oberon0.L3.NameAnalyser.envin(in: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
9269 ===> org.kiama.example.obr.SymbolTable.Unknown.<init>(): org.kiama.example.obr.SymbolTable.Unknown.type
10058 ===> org.kiama.example.prolog.PrologTree.Var.<init>(s: String): org.kiama.example.prolog.PrologTree.Var
10715 ===> org.kiama.example.til.TIL2_3.$init$(): Unit
3028 ===> org.kiama.example.iswim.secd.HeapOps.Put.copy(): org.kiama.example.iswim.secd.HeapOps.Put
1851 ===> org.kiama.example.imperative.ASTNonCase.Neg.arity: Int
984 ===> org.kiama.example.RISC.RISCISA.LDW.unapply(x$0: org.kiama.example.RISC.RISCISA.LDW): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
7108 ===> org.kiama.example.oberon0.base.c.CVarDecl.productElement(x$1: Int): Any
6111 ===> org.kiama.example.oberon0.L0.source.NotExp.canEqual(x$1: Any): Boolean
5593 ===> org.kiama.example.oberon0.L0.c.CMulExp.hashCode(): Int
2906 ===> org.kiama.example.iswim.secd.ConversionOps.ToInt.<init>(): org.kiama.example.iswim.secd.ConversionOps.ToInt.type
4059 ===> org.kiama.example.iswim.secd.SECDBase.$anon.toDoc: SECDBase.this.Doc
1008 ===> org.kiama.example.RISC.RISCISA.POP.b: org.kiama.example.RISC.RISCISA.RegNo
1863 ===> org.kiama.example.imperative.ASTNonCase.Sub.<init>(l: org.kiama.example.imperative.ASTNonCase.Exp,r: org.kiama.example.imperative.ASTNonCase.Exp): org.kiama.example.imperative.ASTNonCase.Sub
6947 ===> org.kiama.example.oberon0.L4.source.FieldList.readResolve(): Object
1865 ===> org.kiama.example.imperative.ASTNonCase.Sub.toString(): String
10774 ===> org.kiama.example.transform.AST.BinExpR.productIterator: Iterator[Any]
5263 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productArity: Int
1087 ===> org.kiama.example.RISC.RISCISA.PSH.toString(): String
6413 ===> org.kiama.example.oberon0.L3.CCodeGenerator.translate(m: org.kiama.example.oberon0.base.source.ModuleDecl): org.kiama.example.oberon0.base.c.CProgram
10685 ===> org.kiama.example.til.AST.Ne.<init>(): org.kiama.example.til.AST.Ne.type
5704 ===> org.kiama.example.oberon0.L0.c.CIdnExp.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3006 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.equals(x$1: Any): Boolean
1473 ===> org.kiama.example.dataflow.DataflowAST.Empty.unapply(x$0: org.kiama.example.dataflow.DataflowAST.Empty): Boolean
8922 ===> org.kiama.example.obr.SPARCTree.CmpeqW.productArity: Int
216 ===> org.kiama.attribution.AttributionTests.ListTree.copy(l: List[AttributionTests.this.Tree]): AttributionTests.this.ListTree
4840 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
10130 ===> org.kiama.example.prolog.PrologTree.Cut.copy(): org.kiama.example.prolog.PrologTree.Cut
1776 ===> org.kiama.example.imperative.AST.While.b: org.kiama.example.imperative.AST.Stmt
491 ===> org.kiama.example.RISC.RISCISA.MOV.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5548 ===> org.kiama.example.oberon0.L0.c.CSubExp.productPrefix: String
5656 ===> org.kiama.example.oberon0.L0.c.CAndExp.<init>(): org.kiama.example.oberon0.L0.c.CAndExp.type
551 ===> org.kiama.example.RISC.RISCISA.MVNI.a: org.kiama.example.RISC.RISCISA.RegNo
697 ===> org.kiama.example.RISC.RISCISA.MULI.readResolve(): Object
11463 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.productArity: Int
1412 ===> org.kiama.example.dataflow.DataflowAST.If.copy$default$3: org.kiama.example.dataflow.DataflowAST.Stm @scala.annotation.unchecked.uncheckedVariance
3247 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.productPrefix: String
1468 ===> org.kiama.example.dataflow.DataflowAST.Empty.toString(): String
12550 ===> org.kiama.util.ParserUtilitiesTests.Tup6.n1: ParserUtilitiesTests.this.Node
3244 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.readResolve(): Object
11782 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2630 ===> org.kiama.example.iswim.compiler.Syntax.Match.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
3680 ===> org.kiama.example.iswim.secd.SECDBase.MkUserException.productPrefix: String
5173 ===> org.kiama.example.oberon0.L0.Desugarer.$init$(): Unit
5319 ===> org.kiama.example.oberon0.L0.TypeAnalyser.$init$(): Unit
5258 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.<init>(ident: String,tipe: org.kiama.example.oberon0.L0.source.TypeDecl): SymbolTable.this.UserType
5073 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.e: org.kiama.example.lambda3.AST.Exp
2841 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.unapply(x$0: org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue): Boolean
10405 ===> org.kiama.example.til.AST.IfThen.<init>(): org.kiama.example.til.AST.IfThen.type
3291 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.apply(n: Int): IntegerOps.this.IntValue
6240 ===> org.kiama.example.oberon0.L1.source.IfStatement.copy$default$3: List[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)] @scala.annotation.unchecked.uncheckedVariance
4865 ===> org.kiama.example.lambda2.ParEagerSubstEvaluator.<init>(): org.kiama.example.lambda2.ParEagerSubstEvaluator
9098 ===> org.kiama.example.obr.SPARCTree.RemW.r: org.kiama.example.obr.SPARCTree.Datum
9146 ===> org.kiama.example.obr.SPARCTree.Local.toString(): String
3429 ===> org.kiama.example.iswim.secd.SECDBase.CodeSegment.<init>(code: org.kiama.example.iswim.secd.SECDBase.Code): org.kiama.example.iswim.secd.SECDBase.CodeSegment
7313 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productElement(x$1: Int): Any
128 ===> org.kiama.attribution.UncachedAttribution.attr[T <: AnyRef, U](optNameDef: Option[String])(f: T => U): UncachedAttribution.this.UncachedAttribute[T,U]
373 ===> org.kiama.attribution.Decorators.Chain.<init>(): org.kiama.attribution.Decorators.Chain.type
11239 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.apply(i: Int): ParenPrettyPrinterTests.this.Leaf
10833 ===> org.kiama.example.transform.AST.Num.hashCode(): Int
730 ===> org.kiama.example.RISC.RISCISA.DIVI.productElement(x$1: Int): Any
5463 ===> org.kiama.example.oberon0.L0.c.CLeExp.<init>(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CLeExp
11931 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5957 ===> org.kiama.example.oberon0.L0.source.AddExp.toString(): String
7162 ===> org.kiama.example.oberon0.base.c.CIntType.productPrefix: String
8898 ===> org.kiama.example.obr.SPARCTree.Cond.copy(cond: org.kiama.example.obr.SPARCTree.Datum,t: org.kiama.example.obr.SPARCTree.Datum,f: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Cond
11659 ===> org.kiama.rewriting.Rewriter.innermost2(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
6673 ===> org.kiama.example.oberon0.L3.source.VarMode.apply(): org.kiama.example.oberon0.L3.source.VarMode
10637 ===> org.kiama.example.til.AST.Sub.copy$default$1: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
4997 ===> org.kiama.example.lambda3.AST.App.e1: org.kiama.example.lambda3.AST.Exp
12499 ===> org.kiama.util.ParserUtilitiesTests.Tup3.apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup3
2186 ===> org.kiama.example.iswim.compiler.Syntax.Less.equals(x$1: Any): Boolean
5470 ===> org.kiama.example.oberon0.L0.c.CLeExp.productElement(x$1: Int): Any
11292 ===> org.kiama.rewriting.NominalAST.Bind.apply(name: org.kiama.rewriting.NominalAST.Name,term: Any): org.kiama.rewriting.NominalAST.Bind
5088 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.apply(e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.FreeNamesQuery
402 ===> org.kiama.attribution.DynamicAttributionTests.Pair.toString(): String
9488 ===> org.kiama.example.oneohonecompanies.Company.Company.toString(): String
9799 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.<init>(): org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.type
1971 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.readResolve(): Object
9651 ===> org.kiama.example.picojava.AbstractSyntax.ClassDecl.Name: String
11519 ===> org.kiama.rewriting.Rewriter.Strategy.<init>(): Rewriter.this.Strategy
1900 ===> org.kiama.example.imperative.Generator.genAsgn(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Asgn]
712 ===> org.kiama.example.RISC.RISCISA.DIV.hashCode(): Int
1323 ===> org.kiama.example.RISC.RISCISA.Target.toString(): String
496 ===> org.kiama.example.RISC.RISCISA.MOV.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOV
6320 ===> org.kiama.example.oberon0.L2.source.ForStatement.toString(): String
1985 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.toString(): String
6681 ===> org.kiama.example.oberon0.L3.source.ValMode.productIterator: Iterator[Any]
273 ===> org.kiama.attribution.AttributionTests.MapTree.canEqual(x$1: Any): Boolean
10823 ===> org.kiama.example.transform.AST.PrimExp.<init>(): org.kiama.example.transform.AST.PrimExp
2848 ===> org.kiama.example.iswim.secd.BooleanOps.TrueValue.copy(): BooleanOps.this.TrueValue
11600 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
8137 ===> org.kiama.example.obr.ObrTree.StarExp.productArity: Int
11398 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.canEqual(x$1: Any): Boolean
2962 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.unapply(x$0: org.kiama.example.iswim.secd.ExceptionHandler.SetHandler): Boolean
6918 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.productElement(x$1: Int): Any
10854 ===> org.kiama.example.transform.AST.Var.toString(): String
5332 ===> org.kiama.example.oberon0.L0.c.CNamedType.productElement(x$1: Int): Any
6800 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.unapply(x$0: SymbolTable.this.Field): Option[(String, SymbolTable.this.Type)]
8896 ===> org.kiama.example.obr.SPARCTree.Cond.f: org.kiama.example.obr.SPARCTree.Datum
12015 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
2882 ===> org.kiama.example.iswim.secd.ConversionOps.ToString.copy(): org.kiama.example.iswim.secd.ConversionOps.ToString
9445 ===> org.kiama.example.obr.SyntaxAnalysis.whiteSpace: scala.util.matching.Regex
2152 ===> org.kiama.example.iswim.compiler.Syntax.Equal.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Equal): Option[(org.kiama.example.iswim.compiler.Syntax.Expr, org.kiama.example.iswim.compiler.Syntax.Expr)]
3905 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.hashCode(): Int
2483 ===> org.kiama.example.iswim.compiler.Syntax.Apply.e: org.kiama.example.iswim.compiler.Syntax.Expr
11905 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7340 ===> org.kiama.example.oberon0.base.source.IdnDef.apply(ident: String): org.kiama.example.oberon0.base.source.IdnDef
11140 ===> org.kiama.output.PrettyPrinterTests.Val.canEqual(x$1: Any): Boolean
3497 ===> org.kiama.example.iswim.secd.SECDBase.App.equals(x$1: Any): Boolean
11225 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.i: Int
66 ===> org.kiama.attribution.Attribution.MemoState.<init>(): Attribution.this.MemoState.type
10232 ===> org.kiama.example.prolog.SymbolTable.ListType.productElement(x$1: Int): Any
758 ===> org.kiama.example.RISC.RISCISA.MOD.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOD
10976 ===> org.kiama.output.Postfix.productIterator: Iterator[Any]
5446 ===> org.kiama.example.oberon0.L0.c.CLtExp.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
4067 ===> org.kiama.example.iswim.secd.SECDBase.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
9240 ===> org.kiama.example.obr.SymbolTable.Constant.<init>(tipe: org.kiama.example.obr.SymbolTable.Type,value: Int): org.kiama.example.obr.SymbolTable.Constant
2614 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.productArity: Int
12010 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
624 ===> org.kiama.example.RISC.RISCISA.SUB.productArity: Int
770 ===> org.kiama.example.RISC.RISCISA.MODI.productPrefix: String
2451 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
8123 ===> org.kiama.example.obr.ObrTree.SlashExp.toString(): String
7318 ===> org.kiama.example.oberon0.base.source.EmptyStmt.equals(x$1: Any): Boolean
8060 ===> org.kiama.example.obr.ObrTree.NotExp.productPrefix: String
5778 ===> org.kiama.example.oberon0.L0.source.TypeDecl.readResolve(): Object
204 ===> org.kiama.attribution.AttributionTests.EitherTree.productIterator: Iterator[Any]
3706 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.RaiseException): Boolean
7523 ===> org.kiama.example.obr.ObrTree.RecordVar.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,fields: List[org.kiama.example.obr.ObrTree.Identifier]): org.kiama.example.obr.ObrTree.RecordVar
9259 ===> org.kiama.example.obr.SymbolTable.Unknown.<init>(): org.kiama.example.obr.SymbolTable.Unknown
9909 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.productArity: Int
1937 ===> org.kiama.example.iswim.compiler.Parser.Pos.<init>(): Parser.this.Pos.type
6223 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.toString(): String
6878 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
3879 ===> org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination.apply(): org.kiama.example.iswim.secd.SECDBase.UnexpectedTermination
8495 ===> org.kiama.example.obr.RISCTree.LdW.mem: org.kiama.example.obr.RISCTree.Address
10654 ===> org.kiama.example.til.AST.Eq.<init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Eq
5402 ===> org.kiama.example.oberon0.L0.c.CEqExp.right: org.kiama.example.oberon0.base.c.CExpression
2583 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.toString(): String
9051 ===> org.kiama.example.obr.SPARCTree.MulW.productArity: Int
1277 ===> org.kiama.example.RISC.RISCISA.BSR.<init>(label: Int): org.kiama.example.RISC.RISCISA.BSR
9988 ===> org.kiama.example.prolog.Main.<init>(): org.kiama.example.prolog.Main.type
4927 ===> org.kiama.example.lambda2.PrettyPrinter.show(t: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.PrettyPrinter.Doc
9363 ===> org.kiama.example.obr.SymbolTable.RecordTypes.toString(): String
1193 ===> org.kiama.example.RISC.RISCISA.BNE.apply(label: Int): org.kiama.example.RISC.RISCISA.BNE
3965 ===> org.kiama.example.iswim.secd.SECDBase.EmptyValue.productIterator: Iterator[Any]
699 ===> org.kiama.example.RISC.RISCISA.DIV.b: org.kiama.example.RISC.RISCISA.RegNo
4717 ===> org.kiama.example.lambda2.AST.Op.<init>(): org.kiama.example.lambda2.AST.Op
2486 ===> org.kiama.example.iswim.compiler.Syntax.Apply.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
8179 ===> org.kiama.example.obr.RISCTransformation.exnloc_$eq(x$1: org.kiama.example.obr.RISCTree.Address): Unit
10268 ===> org.kiama.example.prolog.Subst.<init>(): org.kiama.example.prolog.Subst.type
6332 ===> org.kiama.example.oberon0.L2.source.CaseStatement.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
4158 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.equals(x$1: Any): Boolean
7520 ===> org.kiama.example.obr.ObrTree.ArrayVar.readResolve(): Object
5766 ===> org.kiama.example.oberon0.L0.source.TypeDecl.productPrefix: String
4843 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
358 ===> org.kiama.attribution.Decorators.down[T <: org.kiama.attribution.Attributable, U](a: org.kiama.==>[T,U]): org.kiama.attribution.Attribution.CachedAttribute[T,U]
2736 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.copy(nms: List[org.kiama.example.iswim.compiler.Syntax.Variable]): org.kiama.example.iswim.compiler.Syntax.Primitives
7285 ===> org.kiama.example.oberon0.base.source.ModuleDecl.toString(): String
3534 ===> org.kiama.example.iswim.secd.SECDBase.Enter.readResolve(): Object
9904 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.ps: Set[(String, org.kiama.example.prolog.PrologTree.Term)]
4859 ===> org.kiama.example.lambda2.Par.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2571 ===> org.kiama.example.iswim.compiler.Syntax.Empty.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.Empty): Boolean
10474 ===> org.kiama.example.til.AST.Read.<init>(i: org.kiama.example.til.AST.Id): org.kiama.example.til.AST.Read
4179 ===> org.kiama.example.iswim.secd.StringOps.StringValue.toString(): String
2081 ===> org.kiama.example.iswim.compiler.Syntax.Times.copy(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Times
2992 ===> org.kiama.example.iswim.secd.ExceptionHandler.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
11575 ===> org.kiama.rewriting.Rewriter.constrcache: scala.collection.mutable.WeakHashMap[Class[_],java.lang.reflect.Constructor[_]]
8144 ===> org.kiama.example.obr.ObrTree.StarExp.<init>(): org.kiama.example.obr.ObrTree.StarExp.type
3138 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.canEqual(x$1: Any): Boolean
9209 ===> org.kiama.example.obr.SymbolTable.<init>(): org.kiama.example.obr.SymbolTable.type
12483 ===> org.kiama.util.ParserUtilitiesTests.Tup3.n3: ParserUtilitiesTests.this.Node
5015 ===> org.kiama.example.lambda3.AST.App.readResolve(): Object
7539 ===> org.kiama.example.obr.ObrTree.RecordVar.readResolve(): Object
8304 ===> org.kiama.example.obr.RISCTree.StW.equals(x$1: Any): Boolean
3134 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.productPrefix: String
3410 ===> org.kiama.example.iswim.secd.RecordOps.evalInst: org.kiama.==>[org.kiama.example.iswim.secd.SECDBase.Code,Unit]
11219 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.equals(x$1: Any): Boolean
9730 ===> org.kiama.example.picojava.AbstractSyntax.Exp.<init>(): org.kiama.example.picojava.AbstractSyntax.Exp
2978 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.toString(): String
8967 ===> org.kiama.example.obr.SPARCTree.CmpgtW.<init>(): org.kiama.example.obr.SPARCTree.CmpgtW.type
12396 ===> org.kiama.util.Messaging.Record.productElement(x$1: Int): Any
12574 ===> org.kiama.util.ParserUtilitiesTests.Tup6.apply(n1: ParserUtilitiesTests.this.Node,n2: ParserUtilitiesTests.this.Node,n3: ParserUtilitiesTests.this.Node,n4: ParserUtilitiesTests.this.Node,n5: ParserUtilitiesTests.this.Node,n6: ParserUtilitiesTests.this.Node): ParserUtilitiesTests.this.Tup6
1574 ===> org.kiama.example.imperative.AST.Num.value: Double
5645 ===> org.kiama.example.oberon0.L0.c.CAndExp.copy(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CAndExp
3667 ===> org.kiama.example.iswim.secd.SECDBase.PushType.productElement(x$1: Int): Any
10143 ===> org.kiama.example.prolog.SemanticAnalysis.<init>(): org.kiama.example.prolog.SemanticAnalysis.type
4270 ===> org.kiama.example.json.JSONTree.JArray.productPrefix: String
8608 ===> org.kiama.example.obr.RISCTree.SequenceDatum.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
7205 ===> org.kiama.example.oberon0.base.c.CArrayType.toString(): String
10390 ===> org.kiama.example.til.AST.Assign.readResolve(): Object
10908 ===> org.kiama.machine.Machine.ParamUpdate.toString(): String
6259 ===> org.kiama.example.oberon0.L1.source.WhileStatement.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
10293 ===> org.kiama.example.repmin.Fork.unapply(x$0: org.kiama.example.repmin.Fork): Option[(org.kiama.example.repmin.Tree, org.kiama.example.repmin.Tree)]
6565 ===> org.kiama.example.oberon0.L3.c.CCall.productPrefix: String
9222 ===> org.kiama.example.obr.SymbolTable.Variable.locn: Int
6308 ===> org.kiama.example.oberon0.L2.source.ForStatement.copy(idn: org.kiama.example.oberon0.L0.source.IdnExp,lower: org.kiama.example.oberon0.L0.source.Expression,upper: org.kiama.example.oberon0.L0.source.Expression,by: Option[org.kiama.example.oberon0.L0.source.Expression],block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L2.source.ForStatement
6593 ===> org.kiama.example.oberon0.L3.c.CStrExp.unapply(x$0: org.kiama.example.oberon0.L3.c.CStrExp): Option[String]
4619 ===> org.kiama.example.lambda2.AST.Let.productIterator: Iterator[Any]
12351 ===> org.kiama.util.Environments.UnknownEntity.unapply(x$0: Environments.this.UnknownEntity): Boolean
2993 ===> org.kiama.example.iswim.secd.ExceptionHandler.$anonfun.applyOrElse[A1 <: org.kiama.example.iswim.secd.SECDBase.Code, B1 >: Unit](x$1: A1,default: A1 => B1): B1
5987 ===> org.kiama.example.oberon0.L0.source.OrExp.productArity: Int
8420 ===> org.kiama.example.obr.RISCTree.CmpneW.readResolve(): Object
6787 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.copy(ident: String,tipe: SymbolTable.this.Type): SymbolTable.this.Field
11668 ===> org.kiama.rewriting.Rewriter.manytd(s: Rewriter.this.Strategy): Rewriter.this.Strategy
3123 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThan.canEqual(x$1: Any): Boolean
2165 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.hashCode(): Int
7228 ===> org.kiama.example.oberon0.base.c.CReturn.copy$default$1: org.kiama.example.oberon0.base.c.CExpression @scala.annotation.unchecked.uncheckedVariance
6881 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.productArity: Int
9197 ===> org.kiama.example.obr.SemanticAnalysis.indexOutOfBoundsExn: Int
5929 ===> org.kiama.example.oberon0.L0.source.GeExp.canEqual(x$1: Any): Boolean
3151 ===> org.kiama.example.iswim.secd.IntComparisonOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
8802 ===> org.kiama.example.obr.SPARCTree.LabelDef.toString(): String
10069 ===> org.kiama.example.prolog.PrologTree.Var.<init>(): org.kiama.example.prolog.PrologTree.Var.type
11821 ===> org.kiama.rewriting.RewriterTests.travtest(basemsg: String,testmsg: String,trav: => org.kiama.rewriting.Rewriter.Strategy => org.kiama.rewriting.Rewriter.Strategy,rewl: org.kiama.rewriting.Rewriter.Strategy,term: org.kiama.rewriting.Rewriter.Term,result: Option[org.kiama.rewriting.Rewriter.Term],expecting: RewriterTests.this.Expecting): Unit
378 ===> org.kiama.attribution.Decorators.idf[T, U]: (T => U) => org.kiama.==>[T,U]
7278 ===> org.kiama.example.oberon0.base.source.ModuleDecl.productElement(x$1: Int): Any
2363 ===> org.kiama.example.iswim.compiler.Syntax.Let.productPrefix: String
8268 ===> org.kiama.example.obr.RISCTree.LabelDef.hashCode(): Int
11255 ===> org.kiama.rewriting.NominalAST.Name.base: String
7675 ===> org.kiama.example.obr.ObrTree.IfStmt.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
11651 ===> org.kiama.rewriting.Rewriter.downupS(s1: => Rewriter.this.Strategy,s2: => Rewriter.this.Strategy,stop: => Rewriter.this.Strategy => Rewriter.this.Strategy): Rewriter.this.Strategy
1807 ===> org.kiama.example.imperative.AST.Add(s1: => org.kiama.rewriting.Rewriter.Strategy,s2: => org.kiama.rewriting.Rewriter.Strategy): org.kiama.rewriting.Rewriter.Strategy
10751 ===> org.kiama.example.transform.AST.VarDecl.productElement(x$1: Int): Any
10504 ===> org.kiama.example.til.AST.Write.apply(e: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Write
10709 ===> org.kiama.example.til.TIL2_2.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
3402 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.canEqual(x$1: Any): Boolean
7628 ===> org.kiama.example.obr.ObrTree.AssignStmt.toString(): String
865 ===> org.kiama.example.RISC.RISCISA.ANDI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.ANDI
9242 ===> org.kiama.example.obr.SymbolTable.Constant.isassignable: Boolean
1763 ===> org.kiama.example.imperative.AST.Asgn.productArity: Int
11537 ===> org.kiama.rewriting.Rewriter.$anon.apply(t: Rewriter.this.Term): Option[Rewriter.this.Term]
680 ===> org.kiama.example.RISC.RISCISA.MULI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MULI
6710 ===> org.kiama.example.oberon0.L3.source.FPSection.unapply(x$0: org.kiama.example.oberon0.L3.source.FPSection): Option[(org.kiama.example.oberon0.L3.source.Mode, List[org.kiama.example.oberon0.base.source.IdnDef], org.kiama.example.oberon0.L0.source.TypeDef)]
8951 ===> org.kiama.example.obr.SPARCTree.CmpneW.unapply(x$0: org.kiama.example.obr.SPARCTree.CmpneW): Option[(org.kiama.example.obr.SPARCTree.Datum, org.kiama.example.obr.SPARCTree.Datum)]
3089 ===> org.kiama.example.iswim.secd.IOOps.Write.toString(): String
7087 ===> org.kiama.example.oberon0.base.c.CInclude.productArity: Int
4618 ===> org.kiama.example.lambda2.AST.Let.productElement(x$1: Int): Any
6003 ===> org.kiama.example.oberon0.L0.source.MulExp.left: org.kiama.example.oberon0.L0.source.Expression
2459 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.equals(x$1: Any): Boolean
3703 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.<init>(): org.kiama.example.iswim.secd.SECDBase.RaiseException.type
1282 ===> org.kiama.example.RISC.RISCISA.BSR.productElement(x$1: Int): Any
695 ===> org.kiama.example.RISC.RISCISA.MULI.apply(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MULI
3399 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productArity: Int
7679 ===> org.kiama.example.obr.ObrTree.IfStmt.productArity: Int
6426 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.isDefinedAt(x$1: org.kiama.example.oberon0.base.source.SourceASTNode): Boolean
5019 ===> org.kiama.example.lambda3.AST.Lam.copy(b: org.kiama.rewriting.NominalAST.Bind): org.kiama.example.lambda3.AST.Lam
3174 ===> org.kiama.example.iswim.secd.IntegerOps.Add.productElement(x$1: Int): Any
9881 ===> org.kiama.example.picojava.tests.DotNameResolutionTests.declBB: org.kiama.example.picojava.AbstractSyntax.ClassDecl
9899 ===> org.kiama.example.picojava.tests.InheritanceNameResolutionTests.declAA: org.kiama.example.picojava.AbstractSyntax.ClassDecl
5433 ===> org.kiama.example.oberon0.L0.c.CNeExp.hashCode(): Int
4939 ===> org.kiama.example.lambda2.ReduceEvaluator.reducesinlambdas: Boolean
2637 ===> org.kiama.example.iswim.compiler.Syntax.Match.hashCode(): Int
10273 ===> org.kiama.example.prolog.Unifier.unify(t1: org.kiama.example.prolog.PrologTree.Term,t2: org.kiama.example.prolog.PrologTree.Term): Option[org.kiama.example.prolog.Subst]
2297 ===> org.kiama.example.iswim.compiler.Syntax.And.<init>(): org.kiama.example.iswim.compiler.Syntax.And.type
9011 ===> org.kiama.example.obr.SPARCTree.IntDatum.<init>(num: Int): org.kiama.example.obr.SPARCTree.IntDatum
11270 ===> org.kiama.rewriting.NominalAST.Name.toString(): String
6888 ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef.<init>(): org.kiama.example.oberon0.L4.source.ArrayTypeDef.type
9680 ===> org.kiama.example.picojava.AbstractSyntax.VarDecl.productElement(x$1: Int): Any
4072 ===> org.kiama.example.iswim.secd.StackOps.<init>(): org.kiama.example.iswim.secd.StackOps.type
11647 ===> org.kiama.rewriting.Rewriter.bottomupS(s: => Rewriter.this.Strategy,stop: => Rewriter.this.Strategy => Rewriter.this.Strategy): Rewriter.this.Strategy
11548 ===> org.kiama.rewriting.Rewriter.build(t: => Rewriter.this.Term): Rewriter.this.Strategy
11793 ===> org.kiama.rewriting.RewriterTests.Expecting.<init>(): RewriterTests.this.Expecting
6038 ===> org.kiama.example.oberon0.L0.source.DivExp.apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.DivExp
6537 ===> org.kiama.example.oberon0.L3.c.CVoidType.<init>(): org.kiama.example.oberon0.L3.c.CVoidType.type
1774 ===> org.kiama.example.imperative.AST.Asgn.readResolve(): Object
1042 ===> org.kiama.example.RISC.RISCISA.STW.hashCode(): Int
6128 ===> org.kiama.example.oberon0.L0.source.IntExp.canEqual(x$1: Any): Boolean
6346 ===> org.kiama.example.oberon0.L2.source.CaseStatement.unapply(x$0: org.kiama.example.oberon0.L2.source.CaseStatement): Option[(org.kiama.example.oberon0.L0.source.Expression, List[org.kiama.example.oberon0.L2.source.Case], Option[org.kiama.example.oberon0.base.source.Block])]
11256 ===> org.kiama.rewriting.NominalAST.Name.opti: Option[Int]
3261 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.message: String
1421 ===> org.kiama.example.dataflow.DataflowAST.If.<init>(): org.kiama.example.dataflow.DataflowAST.If.type
1745 ===> org.kiama.example.imperative.AST.Seqn.productIterator: Iterator[Any]
2977 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.equals(that: Any): Boolean
5609 ===> org.kiama.example.oberon0.L0.c.CDivExp.productArity: Int
5362 ===> org.kiama.example.oberon0.L0.c.CTypeDef.decl: org.kiama.example.oberon0.base.c.CVarDecl
7716 ===> org.kiama.example.obr.ObrTree.ReturnStmt.canEqual(x$1: Any): Boolean
5653 ===> org.kiama.example.oberon0.L0.c.CAndExp.hashCode(): Int
4715 ===> org.kiama.example.lambda2.AST.NoType.unapply(x$0: org.kiama.example.lambda2.AST.NoType): Boolean
2360 ===> org.kiama.example.iswim.compiler.Syntax.Let.copy(bind: List[org.kiama.example.iswim.compiler.Syntax.Binding],body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Let
1966 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.equals(x$1: Any): Boolean
7237 ===> org.kiama.example.oberon0.base.c.CReturn.<init>(): org.kiama.example.oberon0.base.c.CReturn.type
11741 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1028 ===> org.kiama.example.RISC.RISCISA.STW.a: org.kiama.example.RISC.RISCISA.RegNo
1257 ===> org.kiama.example.RISC.RISCISA.BGT.apply(label: Int): org.kiama.example.RISC.RISCISA.BGT
9718 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.productArity: Int
11825 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4288 ===> org.kiama.example.json.JSONTree.JString.productArity: Int
896 ===> org.kiama.example.RISC.RISCISA.OR.equals(x$1: Any): Boolean
6192 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.estmt: org.kiama.example.oberon0.base.c.CStatement
4293 ===> org.kiama.example.json.JSONTree.JString.toString(): String
946 ===> org.kiama.example.RISC.RISCISA.XORI.im: org.kiama.example.RISC.RISCISA.Imm
6229 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.readResolve(): Object
11444 ===> org.kiama.rewriting.PositionedRewriterTests.pof: org.kiama.rewriting.SupportPositionedRewriterTests.TestPosition{val line: Int; val column: Int}
4212 ===> org.kiama.example.iswim.tests.SECDTests.SECD.verify: Unit
6131 ===> org.kiama.example.oberon0.L0.source.IntExp.equals(x$1: Any): Boolean
8580 ===> org.kiama.example.obr.RISCTree.RemW.toString(): String
4364 ===> org.kiama.example.json.Driver.usage: String
6303 ===> org.kiama.example.oberon0.L2.source.ForStatement.lower: org.kiama.example.oberon0.L0.source.Expression
168 ===> org.kiama.attribution.AttributionTests.Leaf.productArity: Int
6257 ===> org.kiama.example.oberon0.L1.source.WhileStatement.<init>(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block): org.kiama.example.oberon0.L1.source.WhileStatement
9711 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.Condition: org.kiama.example.picojava.AbstractSyntax.Exp
2393 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.LetRec): Option[(List[org.kiama.example.iswim.compiler.Syntax.Binding], org.kiama.example.iswim.compiler.Syntax.Expr)]
3019 ===> org.kiama.example.iswim.secd.HeapOps.Get.hashCode(): Int
10548 ===> org.kiama.example.til.AST.Num.productElement(x$1: Int): Any
7657 ===> org.kiama.example.obr.ObrTree.ForStmt.productPrefix: String
5650 ===> org.kiama.example.oberon0.L0.c.CAndExp.productElement(x$1: Int): Any
848 ===> org.kiama.example.RISC.RISCISA.AND.productPrefix: String
12280 ===> org.kiama.util.TestCompiler.$anon.<init>(): java.io.FilenameFilter
10797 ===> org.kiama.example.transform.AST.Factor.toString(): String
1954 ===> org.kiama.example.iswim.compiler.Syntax.Stmt.<init>(): org.kiama.example.iswim.compiler.Syntax.Stmt
11167 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.copy$default$4: org.kiama.output.Side @scala.annotation.unchecked.uncheckedVariance
12527 ===> org.kiama.util.ParserUtilitiesTests.Tup5.n3: ParserUtilitiesTests.this.Node
8647 ===> org.kiama.example.obr.RISCTree.Indexed.productArity: Int
4820 ===> org.kiama.example.lambda2.Lambda.process(e: org.kiama.example.lambda2.AST.Exp): Unit
4318 ===> org.kiama.example.json.JSONTree.JTrue.copy(): org.kiama.example.json.JSONTree.JTrue
2931 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.productPrefix: String
9239 ===> org.kiama.example.obr.SymbolTable.Constant.value: Int
10791 ===> org.kiama.example.transform.AST.Factor.productIterator: Iterator[Any]
6932 ===> org.kiama.example.oberon0.L4.source.FieldList.copy(idndefs: List[String],tipe: org.kiama.example.oberon0.L0.source.TypeDef): org.kiama.example.oberon0.L4.source.FieldList
11865 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7170 ===> org.kiama.example.oberon0.base.c.CIntType.<init>(): org.kiama.example.oberon0.base.c.CIntType.type
163 ===> org.kiama.attribution.AttributionTests.Leaf.value: Int
11682 ===> org.kiama.rewriting.Rewriter.issuperterm: Rewriter.this.Strategy
4007 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.copy(pn: org.kiama.example.iswim.secd.SECDBase.Name,bdy: org.kiama.example.iswim.secd.SECDBase.Code,envir: SECDBase.this.Environment): SECDBase.this.ClosureValue
8875 ===> org.kiama.example.obr.SPARCTree.AddW.l: org.kiama.example.obr.SPARCTree.Datum
5539 ===> org.kiama.example.oberon0.L0.c.CAddExp.unapply(x$0: org.kiama.example.oberon0.L0.c.CAddExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
5528 ===> org.kiama.example.oberon0.L0.c.CAddExp.productPrefix: String
4896 ===> org.kiama.example.lambda2.ParLazy.rename: org.kiama.rewriting.Rewriter.Strategy
3356 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.<init>(): org.kiama.example.iswim.secd.RecordOps.UnpackRecord.type
11094 ===> org.kiama.output.PrettyPrinterBase.lbrace: PrettyPrinterBase.this.Doc
7335 ===> org.kiama.example.oberon0.base.source.IdnDef.hashCode(): Int
9832 ===> org.kiama.example.picojava.NameResolution.localLookup: String => (org.kiama.attribution.Attributable => org.kiama.example.picojava.AbstractSyntax.Decl)
2743 ===> org.kiama.example.iswim.compiler.Syntax.Primitives.hashCode(): Int
8427 ===> org.kiama.example.obr.RISCTree.CmpgtW.productPrefix: String
22 ===> org.kiama.attribution.Attributable.$minus$greater[T, U](a: T => U)(implicit b: Attributable.this.type => T): U
6190 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.cond: org.kiama.example.oberon0.base.c.CExpression
7385 ===> org.kiama.example.oberon0.drivers.A2bTests.<init>(): org.kiama.example.oberon0.drivers.A2bTests
3344 ===> org.kiama.example.iswim.secd.RecordOps.GetField.unapply(x$0: org.kiama.example.iswim.secd.RecordOps.GetField): Boolean
8645 ===> org.kiama.example.obr.RISCTree.Indexed.copy$default$2: org.kiama.example.obr.RISCTree.Datum @scala.annotation.unchecked.uncheckedVariance
12505 ===> org.kiama.util.ParserUtilitiesTests.Tup4.n4: ParserUtilitiesTests.this.Node
7648 ===> org.kiama.example.obr.ObrTree.ForStmt.min: org.kiama.example.obr.ObrTree.Expression
8630 ===> org.kiama.example.obr.RISCTree.Local.productIterator: Iterator[Any]
9752 ===> org.kiama.example.picojava.AbstractSyntax.Dot.IdnUse: org.kiama.example.picojava.AbstractSyntax.IdnUse
6067 ===> org.kiama.example.oberon0.L0.source.AndExp.productArity: Int
5637 ===> org.kiama.example.oberon0.L0.c.CModExp.toString(): String
2292 ===> org.kiama.example.iswim.compiler.Syntax.And.productIterator: Iterator[Any]
2577 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.productPrefix: String
6768 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.toString(): String
3313 ===> org.kiama.example.iswim.secd.RecordOps.MkRecord.apply(n: Int): org.kiama.example.iswim.secd.RecordOps.MkRecord
5456 ===> org.kiama.example.oberon0.L0.c.CLtExp.<init>(): org.kiama.example.oberon0.L0.c.CLtExp.type
9340 ===> org.kiama.example.obr.SymbolTable.ArrayType.toString(): String
726 ===> org.kiama.example.RISC.RISCISA.DIVI.copy$default$2: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
12446 ===> org.kiama.util.ParserUtilitiesTests.Node.<init>(i: Int): ParserUtilitiesTests.this.Node
8889 ===> org.kiama.example.obr.SPARCTree.AddW.<init>(): org.kiama.example.obr.SPARCTree.AddW.type
4710 ===> org.kiama.example.lambda2.AST.NoType.toString(): String
2953 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.productElement(x$1: Int): Any
6322 ===> org.kiama.example.oberon0.L2.source.ForStatement.<init>(): org.kiama.example.oberon0.L2.source.ForStatement.type
7769 ===> org.kiama.example.obr.ObrTree.TryStmt.productElement(x$1: Int): Any
3796 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.equals(x$1: Any): Boolean
7527 ===> org.kiama.example.obr.ObrTree.RecordVar.productPrefix: String
10883 ===> org.kiama.machine.Machine.ParamUpdater.<init>(state: Machine.this.ParamState[T,U],t: T): Machine.this.ParamUpdater[T,U]
9483 ===> org.kiama.example.oneohonecompanies.Company.Company.productArity: Int
1044 ===> org.kiama.example.RISC.RISCISA.STW.<init>(): org.kiama.example.RISC.RISCISA.STW.type
5107 ===> org.kiama.example.lambda3.AST.FreshQuery.toString(): String
1237 ===> org.kiama.example.RISC.RISCISA.BLE.hashCode(): Int
7639 ===> org.kiama.example.obr.ObrTree.ExitStmt.hashCode(): Int
10997 ===> org.kiama.output.Infix.readResolve(): Object
2427 ===> org.kiama.example.iswim.compiler.Syntax.LetRecStmt.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.LetRecStmt): Option[List[org.kiama.example.iswim.compiler.Syntax.Binding]]
8842 ===> org.kiama.example.obr.SPARCTree.StW.copy$default$1: org.kiama.example.obr.SPARCTree.Address @scala.annotation.unchecked.uncheckedVariance
11609 ===> org.kiama.rewriting.Rewriter.rewrite[T](s: => Rewriter.this.Strategy)(t: T): T
11012 ===> org.kiama.output.PrettyPrinterBase.DocOps.$init$(): Unit
2128 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.toString(): String
7387 ===> org.kiama.example.oberon0.drivers.A3Phases.artefact: String
8032 ===> org.kiama.example.obr.ObrTree.NegExp.<init>(): org.kiama.example.obr.ObrTree.NegExp.type
12538 ===> org.kiama.util.ParserUtilitiesTests.Tup5.productArity: Int
1555 ===> org.kiama.example.dataflow.Main.<init>(): org.kiama.example.dataflow.Main.type
10322 ===> org.kiama.example.repmin.RepminDec.$anonfun.isDefinedAt(x$1: org.kiama.example.repmin.Tree): Boolean
8695 ===> org.kiama.example.obr.SPARCEncoder.opnd(a: org.kiama.example.obr.SPARCTree.Address): String
11245 ===> org.kiama.rewriting.CallbackRewriter.rewriting[T <: CallbackRewriter.this.Term](oldTerm: T,newTerm: T): T
4152 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productArity: Int
9296 ===> org.kiama.example.obr.SymbolTable.IntType.toString(): String
1320 ===> org.kiama.example.RISC.RISCISA.Target.hashCode(): Int
69 ===> org.kiama.attribution.Attribution.resetMemo(): Unit
11227 ===> org.kiama.output.ParenPrettyPrinterTests.Leaf.copy(i: Int): ParenPrettyPrinterTests.this.Leaf
8594 ===> org.kiama.example.obr.RISCTree.SubW.canEqual(x$1: Any): Boolean
11287 ===> org.kiama.rewriting.NominalAST.Bind.hashCode(): Int
3327 ===> org.kiama.example.iswim.secd.RecordOps.Fields.toString(): String
5036 ===> org.kiama.example.lambda3.AST.EquivQuery.e2: org.kiama.example.lambda3.AST.Exp
9784 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.apply(Value: String): org.kiama.example.picojava.AbstractSyntax.BooleanLiteral
2590 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.ns: List[org.kiama.example.iswim.compiler.Syntax.Variable]
2994 ===> org.kiama.example.iswim.secd.ExceptionHandler.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
3743 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.copy(): org.kiama.example.iswim.secd.SECDBase.TypeTypeValue
2473 ===> org.kiama.example.iswim.compiler.Syntax.Return.canEqual(x$1: Any): Boolean
2103 ===> org.kiama.example.iswim.compiler.Syntax.Divide.productPrefix: String
11450 ===> org.kiama.rewriting.PositionedRewriterTests.check(no: org.kiama.rewriting.SupportPositionedRewriterTests.One): Unit
1677 ===> org.kiama.example.imperative.AST.Sub.unapply(x$0: org.kiama.example.imperative.AST.Sub): Option[(org.kiama.example.imperative.AST.Exp, org.kiama.example.imperative.AST.Exp)]
4255 ===> org.kiama.example.json.JSONTree.JName.productElement(x$1: Int): Any
4028 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.copy$default$1: org.kiama.example.iswim.secd.SECDBase.Code @scala.annotation.unchecked.uncheckedVariance
6266 ===> org.kiama.example.oberon0.L1.source.WhileStatement.hashCode(): Int
7452 ===> org.kiama.example.obr.ObrTree.IntVar.<init>(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.IntVar
547 ===> org.kiama.example.RISC.RISCISA.MVN.toString(): String
8876 ===> org.kiama.example.obr.SPARCTree.AddW.r: org.kiama.example.obr.SPARCTree.Datum
1523 ===> org.kiama.example.dataflow.For.unapply(x$0: org.kiama.example.dataflow.For): Option[(org.kiama.example.dataflow.DataflowAST.Stm, org.kiama.example.dataflow.DataflowAST.Stm, org.kiama.example.dataflow.DataflowAST.Stm, org.kiama.example.dataflow.DataflowAST.Stm)]
5714 ===> org.kiama.example.oberon0.L0.c.CIdnExp.toString(): String
1442 ===> org.kiama.example.dataflow.DataflowAST.Block.readResolve(): Object
5228 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.productIterator: Iterator[Any]
409 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.value: Int
7197 ===> org.kiama.example.oberon0.base.c.CArrayType.productArity: Int
5608 ===> org.kiama.example.oberon0.L0.c.CDivExp.productPrefix: String
345 ===> org.kiama.attribution.AttributionTests.Base.k6: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
8565 ===> org.kiama.example.obr.RISCTree.RemW.l: org.kiama.example.obr.RISCTree.Datum
4906 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
1376 ===> org.kiama.example.dataflow.DataflowAST.Assign.productIterator: Iterator[Any]
5208 ===> org.kiama.example.oberon0.L0.SymbolTable.Module.productArity: Int
2296 ===> org.kiama.example.iswim.compiler.Syntax.And.equals(x$1: Any): Boolean
6572 ===> org.kiama.example.oberon0.L3.c.CCall.equals(x$1: Any): Boolean
2460 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.<init>(): org.kiama.example.iswim.compiler.Syntax.Lambda.type
2466 ===> org.kiama.example.iswim.compiler.Syntax.Return.<init>(res: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Return
12558 ===> org.kiama.util.ParserUtilitiesTests.Tup6.copy$default$1: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
10592 ===> org.kiama.example.til.AST.Mul.apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Mul
11912 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
1129 ===> org.kiama.example.RISC.RISCISA.WRH.copy(c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.WRH
11011 ===> org.kiama.output.PrettyPrinterBase.defaultWidth: Int
8519 ===> org.kiama.example.obr.RISCTree.MulW.productArity: Int
8990 ===> org.kiama.example.obr.SPARCTree.CmpltW.readResolve(): Object
9175 ===> org.kiama.example.obr.SPARCTree.Label.copy(num: Int): org.kiama.example.obr.SPARCTree.Label
1174 ===> org.kiama.example.RISC.RISCISA.BEQ.equals(x$1: Any): Boolean
7624 ===> org.kiama.example.obr.ObrTree.AssignStmt.hashCode(): Int
8864 ===> org.kiama.example.obr.SPARCTree.Write.productIterator: Iterator[Any]
224 ===> org.kiama.attribution.AttributionTests.ListTree.toString(): String
7817 ===> org.kiama.example.obr.ObrTree.AndExp.left: org.kiama.example.obr.ObrTree.Expression
4969 ===> org.kiama.example.lambda3.AST.Num.productArity: Int
3502 ===> org.kiama.example.iswim.secd.SECDBase.App.readResolve(): Object
7161 ===> org.kiama.example.oberon0.base.c.CIntType.copy(): org.kiama.example.oberon0.base.c.CIntType
8971 ===> org.kiama.example.obr.SPARCTree.CmpgtW.readResolve(): Object
364 ===> org.kiama.attribution.Decorators.Chain.copy$default$1[T, U]: T => U @scala.annotation.unchecked.uncheckedVariance
6779 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.toString(): String
2437 ===> org.kiama.example.iswim.compiler.Syntax.Import.canEqual(x$1: Any): Boolean
1562 ===> org.kiama.example.dataflow.Optimise.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
6383 ===> org.kiama.example.oberon0.L2.source.ValCond.unapply(x$0: org.kiama.example.oberon0.L2.source.ValCond): Option[org.kiama.example.oberon0.L0.source.Expression]
9069 ===> org.kiama.example.obr.SPARCTree.NegW.productElement(x$1: Int): Any
5314 ===> org.kiama.example.oberon0.L0.SymbolTable.isConstant(e: SymbolTable.this.Entity): Boolean
6850 ===> org.kiama.example.oberon0.L4.c.CIndexExp.unapply(x$0: org.kiama.example.oberon0.L4.c.CIndexExp): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CExpression)]
808 ===> org.kiama.example.RISC.RISCISA.CMPI.productPrefix: String
12150 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2170 ===> org.kiama.example.iswim.compiler.Syntax.NotEqual.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.NotEqual
9261 ===> org.kiama.example.obr.SymbolTable.Unknown.productPrefix: String
1892 ===> org.kiama.example.imperative.Generator.genMul(sz: Int): org.scalacheck.Gen[org.kiama.example.imperative.AST.Mul]
8992 ===> org.kiama.example.obr.SPARCTree.DivW.r: org.kiama.example.obr.SPARCTree.Datum
10850 ===> org.kiama.example.transform.AST.Var.hashCode(): Int
2187 ===> org.kiama.example.iswim.compiler.Syntax.Less.<init>(): org.kiama.example.iswim.compiler.Syntax.Less.type
6267 ===> org.kiama.example.oberon0.L1.source.WhileStatement.toString(): String
3926 ===> org.kiama.example.iswim.secd.SECDBase.MalformedInstruction.readResolve(): Object
8117 ===> org.kiama.example.obr.ObrTree.SlashExp.productPrefix: String
5544 ===> org.kiama.example.oberon0.L0.c.CSubExp.priority: Int
4502 ===> org.kiama.example.lambda.Generator.genLeafExp: org.scalacheck.Gen[org.kiama.example.lambda.AST.Exp with Product with Serializable]
11305 ===> org.kiama.rewriting.NominalRewriter.$anonfun.isDefinedAt(x$1: NominalRewriter.this.Term): Boolean
4602 ===> org.kiama.example.lambda2.AST.Opn.toString(): String
6988 ===> org.kiama.example.oberon0.base.Analyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
7080 ===> org.kiama.example.oberon0.base.c.CProgram.unapply(x$0: org.kiama.example.oberon0.base.c.CProgram): Option[(List[org.kiama.example.oberon0.base.c.CInclude], List[org.kiama.example.oberon0.base.c.CDeclaration])]
6312 ===> org.kiama.example.oberon0.L2.source.ForStatement.copy$default$4: Option[org.kiama.example.oberon0.L0.source.Expression] @scala.annotation.unchecked.uncheckedVariance
6782 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.readResolve(): Object
7220 ===> org.kiama.example.oberon0.base.c.CEmptyStmt.<init>(): org.kiama.example.oberon0.base.c.CEmptyStmt.type
10481 ===> org.kiama.example.til.AST.Read.canEqual(x$1: Any): Boolean
746 ===> org.kiama.example.RISC.RISCISA.MOD.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,c: org.kiama.example.RISC.RISCISA.RegNo): org.kiama.example.RISC.RISCISA.MOD
10413 ===> org.kiama.example.til.AST.IfElse.<init>(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat],f: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.IfElse
8936 ===> org.kiama.example.obr.SPARCTree.CmpneW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpneW
8692 ===> org.kiama.example.obr.SPARCEncoder.label(lab: String): Unit
11108 ===> org.kiama.output.PrettyPrinterBase.dot: PrettyPrinterBase.this.Doc
4035 ===> org.kiama.example.iswim.secd.SECDBase.PrimValue.toString(): String
3525 ===> org.kiama.example.iswim.secd.SECDBase.Enter.productIterator: Iterator[Any]
1090 ===> org.kiama.example.RISC.RISCISA.PSH.readResolve(): Object
1684 ===> org.kiama.example.imperative.AST.Mul.copy$default$1: org.kiama.example.imperative.AST.Exp @scala.annotation.unchecked.uncheckedVariance
11206 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.priority: Int
11202 ===> org.kiama.output.ParenPrettyPrinterTests.PostOp.readResolve(): Object
990 ===> org.kiama.example.RISC.RISCISA.LDB.toString(): String
5105 ===> org.kiama.example.lambda3.AST.FreshQuery.equals(x$1: Any): Boolean
6767 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.<init>(fields: List[SymbolTable.this.Field]): SymbolTable.this.RecordType
4745 ===> org.kiama.example.lambda2.AST.SubOp.equals(x$1: Any): Boolean
2955 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.canEqual(x$1: Any): Boolean
3337 ===> org.kiama.example.iswim.secd.RecordOps.GetField.canEqual(x$1: Any): Boolean
523 ===> org.kiama.example.RISC.RISCISA.MOVI.hashCode(): Int
12387 ===> org.kiama.util.Messaging.Record.pos: scala.util.parsing.input.Position
679 ===> org.kiama.example.RISC.RISCISA.MULI.im: org.kiama.example.RISC.RISCISA.Imm
12333 ===> org.kiama.util.Environments.MultipleEntity.<init>(): Environments.this.MultipleEntity.type
6343 ===> org.kiama.example.oberon0.L2.source.CaseStatement.<init>(): org.kiama.example.oberon0.L2.source.CaseStatement.type
4238 ===> org.kiama.example.json.JSONTree.JObject.productElement(x$1: Int): Any
7018 ===> org.kiama.example.oberon0.base.Driver.consumeast(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
4883 ===> org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11722 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
336 ===> org.kiama.attribution.AttributionTests.count: Int
5726 ===> org.kiama.example.oberon0.L0.source.ConstDecl.copy$default$1: org.kiama.example.oberon0.base.source.IdnDef @scala.annotation.unchecked.uncheckedVariance
8364 ===> org.kiama.example.obr.RISCTree.Cond.f: org.kiama.example.obr.RISCTree.Datum
7514 ===> org.kiama.example.obr.ObrTree.ArrayVar.toString(): String
10961 ===> org.kiama.output.NonAssoc.readResolve(): Object
4256 ===> org.kiama.example.json.JSONTree.JName.productIterator: Iterator[Any]
7810 ===> org.kiama.example.obr.ObrTree.Catch.equals(x$1: Any): Boolean
2456 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.canEqual(x$1: Any): Boolean
6789 ===> org.kiama.example.oberon0.L4.SymbolTable.Field.copy$default$2: SymbolTable.this.Type @scala.annotation.unchecked.uncheckedVariance
5867 ===> org.kiama.example.oberon0.L0.source.LtExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
11612 ===> org.kiama.rewriting.Rewriter.$anon.cache: scala.collection.mutable.HashMap[Rewriter.this.Term,Option[Rewriter.this.Term]]
9817 ===> org.kiama.example.picojava.AbstractSyntax.UnknownDecl.toString(): String
7200 ===> org.kiama.example.oberon0.base.c.CArrayType.canEqual(x$1: Any): Boolean
792 ===> org.kiama.example.RISC.RISCISA.CMP.productIterator: Iterator[Any]
9301 ===> org.kiama.example.obr.SymbolTable.IntType.productIterator: Iterator[Any]
6522 ===> org.kiama.example.oberon0.L3.TypeAnalyser.check(n: org.kiama.example.oberon0.base.source.SourceASTNode): Unit
8005 ===> org.kiama.example.obr.ObrTree.ModExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
10615 ===> org.kiama.example.til.AST.Add.r: org.kiama.example.til.AST.Exp
8914 ===> org.kiama.example.obr.SPARCTree.Cond.readResolve(): Object
9762 ===> org.kiama.example.picojava.AbstractSyntax.Dot.hashCode(): Int
5377 ===> org.kiama.example.oberon0.L0.c.CTypeDef.unapply(x$0: org.kiama.example.oberon0.L0.c.CTypeDef): Option[org.kiama.example.oberon0.base.c.CVarDecl]
8567 ===> org.kiama.example.obr.RISCTree.RemW.<init>(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.RemW
480 ===> org.kiama.example.RISC.RISC.arithmetic(instr: org.kiama.example.RISC.RISCISA.Instr): Unit
12354 ===> org.kiama.util.Environments.enter(env: Environments.this.Environment): Environments.this.Environment
3113 ===> org.kiama.example.iswim.secd.IOOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
6146 ===> org.kiama.example.oberon0.L0.source.IdnExp.hashCode(): Int
12440 ===> org.kiama.util.WhitespaceParser.parseWhitespace(in: WhitespaceParser.this.Input): WhitespaceParser.this.ParseResult[Any]
7499 ===> org.kiama.example.obr.ObrTree.BoolVar.apply(idn: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.ObrTree.BoolVar
10141 ===> org.kiama.example.prolog.PrologTree.Cut.unapply(x$0: org.kiama.example.prolog.PrologTree.Cut): Boolean
148 ===> org.kiama.attribution.AttributionTests.Pair.copy$default$1: AttributionTests.this.Tree @scala.annotation.unchecked.uncheckedVariance
6809 ===> org.kiama.example.oberon0.L4.TypeAnalyser.rootconstexpDef: org.kiama.example.oberon0.L0.source.Expression => Boolean
2189 ===> org.kiama.example.iswim.compiler.Syntax.Less.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Less
7372 ===> org.kiama.example.oberon0.drivers.A1.<init>(): org.kiama.example.oberon0.drivers.A1.type
4198 ===> org.kiama.example.iswim.secd.StringOps.UserExceptionValue.unapply(x$0: StringOps.this.UserExceptionValue): Option[String]
8891 ===> org.kiama.example.obr.SPARCTree.AddW.apply(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.AddW
3898 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.message: String
1571 ===> org.kiama.example.imperative.AST.Exp.intadds: Int
1959 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productPrefix: String
1841 ===> org.kiama.example.imperative.ASTNonCase.Num.reconstruct(cs: Array[org.kiama.rewriting.Rewriter.Term]): org.kiama.example.imperative.ASTNonCase.Exp
11572 ===> org.kiama.rewriting.Rewriter.Term.<init>(): Rewriter.this.Term.type
10821 ===> org.kiama.example.transform.AST.BinExp.unapply(x$0: org.kiama.example.transform.AST.BinExp): Option[(org.kiama.example.transform.AST.Exp, String, org.kiama.example.transform.AST.Exp)]
7421 ===> org.kiama.example.obr.TreeTestDriver.checkintdatums(expected: List[Int])(title: String,emitter: org.kiama.util.Emitter,code: org.kiama.example.obr.RISCTree.RISCNode): Unit
5933 ===> org.kiama.example.oberon0.L0.source.GeExp.<init>(): org.kiama.example.oberon0.L0.source.GeExp.type
8856 ===> org.kiama.example.obr.SPARCTree.StW.readResolve(): Object
7023 ===> org.kiama.example.oberon0.base.TransformingDriver.pprintiastFlag: Boolean
6617 ===> org.kiama.example.oberon0.L3.c.CDerefExp.op: String
9218 ===> org.kiama.example.obr.SymbolTable.Variable.tipe: org.kiama.example.obr.SymbolTable.Type
12448 ===> org.kiama.util.ParserUtilitiesTests.Node.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1062 ===> org.kiama.example.RISC.RISCISA.STB.canEqual(x$1: Any): Boolean
2564 ===> org.kiama.example.iswim.compiler.Syntax.Empty.canEqual(x$1: Any): Boolean
6644 ===> org.kiama.example.oberon0.L3.source.ProcDecl.copy$default$2: List[org.kiama.example.oberon0.L3.source.FPSection] @scala.annotation.unchecked.uncheckedVariance
7828 ===> org.kiama.example.obr.ObrTree.AndExp.hashCode(): Int
12189 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
11735 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
70 ===> org.kiama.attribution.Attribution.CachedAttribute.<init>(f: T => U): Attribution.this.CachedAttribute[T,U]
3741 ===> org.kiama.example.iswim.secd.SECDBase.EmptyTypeValue.readResolve(): Object
1681 ===> org.kiama.example.imperative.AST.Mul.<init>(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Mul
2015 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.hashCode(): Int
10358 ===> org.kiama.example.til.AST.Decl.copy$default$1: org.kiama.example.til.AST.Id @scala.annotation.unchecked.uncheckedVariance
5035 ===> org.kiama.example.lambda3.AST.EquivQuery.e1: org.kiama.example.lambda3.AST.Exp
10999 ===> org.kiama.output.PrettyOperatorExpression.fixity: org.kiama.output.Fixity
11638 ===> org.kiama.rewriting.Rewriter.loopiter(i: => Rewriter.this.Strategy,c: => Rewriter.this.Strategy,s: => Rewriter.this.Strategy): Rewriter.this.Strategy
2695 ===> org.kiama.example.iswim.compiler.Syntax.MkRef.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.MkRef
6387 ===> org.kiama.example.oberon0.L2.source.MinMaxCond.<init>(minvalue: org.kiama.example.oberon0.L0.source.Expression,maxvalue: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L2.source.MinMaxCond
2842 ===> org.kiama.example.iswim.secd.BooleanOps.BooleanTypeValue.readResolve(): Object
3333 ===> org.kiama.example.iswim.secd.RecordOps.GetField.productPrefix: String
1214 ===> org.kiama.example.RISC.RISCISA.BGE.toString(): String
7321 ===> org.kiama.example.oberon0.base.source.EmptyStmt.apply(): org.kiama.example.oberon0.base.source.EmptyStmt
4764 ===> org.kiama.example.lambda2.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
1467 ===> org.kiama.example.dataflow.DataflowAST.Empty.hashCode(): Int
3567 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.nm: org.kiama.example.iswim.secd.SECDBase.Name
6662 ===> org.kiama.example.oberon0.L3.source.VarMode.copy(): org.kiama.example.oberon0.L3.source.VarMode
9185 ===> org.kiama.example.obr.SPARCTree.Label.toString(): String
11310 ===> org.kiama.rewriting.NominalRewriter.Binding.<init>(): NominalRewriter.this.Binding.type
5016 ===> org.kiama.example.lambda3.AST.Lam.b: org.kiama.rewriting.NominalAST.Bind
4520 ===> org.kiama.example.lambda2.AST.Num.hashCode(): Int
5732 ===> org.kiama.example.oberon0.L0.source.ConstDecl.canEqual(x$1: Any): Boolean
9855 ===> org.kiama.example.picojava.benchmark.PicoJavaBenchmark.<init>(): org.kiama.example.picojava.benchmark.PicoJavaBenchmark.type
9466 ===> org.kiama.example.obr.tests.ObrParserTests.<init>(): org.kiama.example.obr.tests.ObrParserTests
10470 ===> org.kiama.example.til.AST.For.apply(i: org.kiama.example.til.AST.Id,f: org.kiama.example.til.AST.Exp,t: org.kiama.example.til.AST.Exp,b: Seq[org.kiama.example.til.AST.Stat]): org.kiama.example.til.AST.For
3993 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.<init>(): SECDBase.this.ContValue.type
8877 ===> org.kiama.example.obr.SPARCTree.AddW.<init>(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.AddW
2184 ===> org.kiama.example.iswim.compiler.Syntax.Less.hashCode(): Int
7693 ===> org.kiama.example.obr.ObrTree.LoopStmt.copy(body: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.LoopStmt
11143 ===> org.kiama.output.PrettyPrinterTests.Val.equals(x$1: Any): Boolean
8064 ===> org.kiama.example.obr.ObrTree.NotExp.canEqual(x$1: Any): Boolean
12392 ===> org.kiama.util.Messaging.Record.copy$default$1: scala.util.parsing.input.Position @scala.annotation.unchecked.uncheckedVariance
1175 ===> org.kiama.example.RISC.RISCISA.BEQ.<init>(): org.kiama.example.RISC.RISCISA.BEQ.type
5072 ===> org.kiama.example.lambda3.AST.EvalQuery.readResolve(): Object
2599 ===> org.kiama.example.iswim.compiler.Syntax.Pattern.hashCode(): Int
7088 ===> org.kiama.example.oberon0.base.c.CInclude.productElement(x$1: Int): Any
7857 ===> org.kiama.example.obr.ObrTree.EqualExp.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
2576 ===> org.kiama.example.iswim.compiler.Syntax.Tuple.copy$default$1: List[org.kiama.example.iswim.compiler.Syntax.Expr] @scala.annotation.unchecked.uncheckedVariance
3453 ===> org.kiama.example.iswim.secd.SECDBase.FunctionSpec.copy(fn: Option[org.kiama.example.iswim.secd.SECDBase.Name],pn: org.kiama.example.iswim.secd.SECDBase.Name,bdy: org.kiama.example.iswim.secd.SECDBase.CodeSegment): org.kiama.example.iswim.secd.SECDBase.FunctionSpec
4665 ===> org.kiama.example.lambda2.AST.Bind.unapply(x$0: org.kiama.example.lambda2.AST.Bind): Option[(org.kiama.example.lambda2.AST.Idn, org.kiama.example.lambda2.AST.Exp)]
1379 ===> org.kiama.example.dataflow.DataflowAST.Assign.toString(): String
8158 ===> org.kiama.example.obr.RISCEncoder.lasttemp: Int(26)
4871 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2083 ===> org.kiama.example.iswim.compiler.Syntax.Times.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
12051 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3747 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.productIterator: Iterator[Any]
11358 ===> org.kiama.rewriting.SupportPositionalRewriterTests.One.productPrefix: String
12514 ===> org.kiama.util.ParserUtilitiesTests.Tup4.productElement(x$1: Int): Any
4247 ===> org.kiama.example.json.JSONTree.JObject.unapply(x$0: org.kiama.example.json.JSONTree.JObject): Option[List[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)]]
7646 ===> org.kiama.example.obr.ObrTree.ExitStmt.readResolve(): Object
5826 ===> org.kiama.example.oberon0.L0.source.EqExp.<init>(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.EqExp
8346 ===> org.kiama.example.obr.RISCTree.AddW.copy(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.AddW
3936 ===> org.kiama.example.iswim.secd.SECDBase.MatchError.equals(x$1: Any): Boolean
698 ===> org.kiama.example.RISC.RISCISA.DIV.a: org.kiama.example.RISC.RISCISA.RegNo
9141 ===> org.kiama.example.obr.SPARCTree.Local.productArity: Int
2430 ===> org.kiama.example.iswim.compiler.Syntax.Import.<init>(fn: String): org.kiama.example.iswim.compiler.Syntax.Import
4595 ===> org.kiama.example.lambda2.AST.Opn.productElement(x$1: Int): Any
7550 ===> org.kiama.example.obr.ObrTree.EnumVar.canEqual(x$1: Any): Boolean
6105 ===> org.kiama.example.oberon0.L0.source.NotExp.copy(exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NotExp
10062 ===> org.kiama.example.prolog.PrologTree.Var.productPrefix: String
1268 ===> org.kiama.example.RISC.RISCISA.BR.canEqual(x$1: Any): Boolean
9109 ===> org.kiama.example.obr.SPARCTree.RemW.toString(): String
8033 ===> org.kiama.example.obr.ObrTree.NegExp.toString(): String
9094 ===> org.kiama.example.obr.SPARCTree.Not.apply(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Not
5399 ===> org.kiama.example.oberon0.L0.c.CBinaryExpression.<init>(op: String): org.kiama.example.oberon0.L0.c.CBinaryExpression
395 ===> org.kiama.attribution.DynamicAttributionTests.Pair.copy$default$2: DynamicAttributionTests.this.Tree @scala.annotation.unchecked.uncheckedVariance
10105 ===> org.kiama.example.prolog.PrologTree.Atom.toString(): String
8493 ===> org.kiama.example.obr.RISCTree.IntDatum.unapply(x$0: org.kiama.example.obr.RISCTree.IntDatum): Option[Int]
5512 ===> org.kiama.example.oberon0.L0.c.CGeExp.canEqual(x$1: Any): Boolean
12172 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
8520 ===> org.kiama.example.obr.RISCTree.MulW.productElement(x$1: Int): Any
2462 ===> org.kiama.example.iswim.compiler.Syntax.Lambda.apply(par: org.kiama.example.iswim.compiler.Syntax.Variable,body: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Lambda
10724 ===> org.kiama.example.transform.AST.Program.ops: List[(String, Int)]
651 ===> org.kiama.example.RISC.RISCISA.SUBI.<init>(): org.kiama.example.RISC.RISCISA.SUBI.type
5327 ===> org.kiama.example.oberon0.L0.c.CNamedType.<init>(ident: String): org.kiama.example.oberon0.L0.c.CNamedType
9553 ===> org.kiama.example.oneohonecompanies.Company.PU.unapply(x$0: org.kiama.example.oneohonecompanies.Company.PU): Option[org.kiama.example.oneohonecompanies.Company.Employee]
2150 ===> org.kiama.example.iswim.compiler.Syntax.Equal.toString(): String
5837 ===> org.kiama.example.oberon0.L0.source.EqExp.equals(x$1: Any): Boolean
4016 ===> org.kiama.example.iswim.secd.SECDBase.ClosureValue.<init>(): SECDBase.this.ClosureValue.type
10367 ===> org.kiama.example.til.AST.Decl.<init>(): org.kiama.example.til.AST.Decl.type
1430 ===> org.kiama.example.dataflow.DataflowAST.Block.productPrefix: String
922 ===> org.kiama.example.RISC.RISCISA.ORI.readResolve(): Object
7490 ===> org.kiama.example.obr.ObrTree.BoolVar.productArity: Int
4265 ===> org.kiama.example.json.JSONTree.JName.readResolve(): Object
11472 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.apply(a: org.kiama.rewriting.SupportPositionedRewriterTests.Node): org.kiama.rewriting.SupportPositionedRewriterTests.One
5848 ===> org.kiama.example.oberon0.L0.source.NeExp.copy$default$2: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
7551 ===> org.kiama.example.obr.ObrTree.EnumVar.hashCode(): Int
8771 ===> org.kiama.example.obr.SPARCTree.Bne.readResolve(): Object
10305 ===> org.kiama.example.repmin.Leaf.toString(): String
108 ===> org.kiama.attribution.Attribution.paramAttr[A, T <: AnyRef, U](f: A => (T => U)): Attribution.this.CachedParamAttribute[A,T,U]
4105 ===> org.kiama.example.iswim.secd.StackOps.Dup.unapply(x$0: org.kiama.example.iswim.secd.StackOps.Dup): Option[Int]
7054 ===> org.kiama.example.oberon0.base.Parser.declarationsDef: Parser.this.PackratParser[List[org.kiama.example.oberon0.base.source.Declaration]]
7688 ===> org.kiama.example.obr.ObrTree.IfStmt.apply(cond: org.kiama.example.obr.ObrTree.Expression,thens: List[org.kiama.example.obr.ObrTree.Statement],elses: List[org.kiama.example.obr.ObrTree.Statement]): org.kiama.example.obr.ObrTree.IfStmt
9244 ===> org.kiama.example.obr.SymbolTable.Constant.copy$default$1: org.kiama.example.obr.SymbolTable.Type @scala.annotation.unchecked.uncheckedVariance
6493 ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo.canEqual(x$1: Any): Boolean
4628 ===> org.kiama.example.lambda2.AST.Let.readResolve(): Object
1483 ===> org.kiama.example.dataflow.Foreach.productElement(x$1: Int): Any
4091 ===> org.kiama.example.iswim.secd.StackOps.Dup.<init>(n: Int): org.kiama.example.iswim.secd.StackOps.Dup
2177 ===> org.kiama.example.iswim.compiler.Syntax.Less.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
6021 ===> org.kiama.example.oberon0.L0.source.MulExp.readResolve(): Object
5541 ===> org.kiama.example.oberon0.L0.c.CSubExp.left: org.kiama.example.oberon0.base.c.CExpression
11216 ===> org.kiama.output.ParenPrettyPrinterTests.PreOp.canEqual(x$1: Any): Boolean
6747 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.size: Int
1610 ===> org.kiama.example.imperative.AST.Var.readResolve(): Object
577 ===> org.kiama.example.RISC.RISCISA.ADD.copy$default$3: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
5731 ===> org.kiama.example.oberon0.L0.source.ConstDecl.productIterator: Iterator[Any]
1238 ===> org.kiama.example.RISC.RISCISA.BLE.equals(x$1: Any): Boolean
7471 ===> org.kiama.example.obr.ObrTree.IntParam.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
9206 ===> org.kiama.example.obr.SemanticAnalysis.exptipe: org.kiama.example.obr.ObrTree.Expression => Set[org.kiama.example.obr.SymbolTable.TypeBase]
7896 ===> org.kiama.example.obr.ObrTree.GreaterExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
10963 ===> org.kiama.output.Prefix.<init>(): org.kiama.output.Prefix.type
6753 ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType.copy$default$2: SymbolTable.this.Type @scala.annotation.unchecked.uncheckedVariance
7701 ===> org.kiama.example.obr.ObrTree.LoopStmt.toString(): String
8508 ===> org.kiama.example.obr.RISCTree.LdW.toString(): String
5604 ===> org.kiama.example.oberon0.L0.c.CDivExp.priority: Int
10988 ===> org.kiama.output.Infix.productIterator: Iterator[Any]
12603 ===> org.kiama.util.REPLBase.prompt: String
10265 ===> org.kiama.example.prolog.Subst.$anon.<init>(): org.kiama.example.prolog.Subst{}
10856 ===> org.kiama.example.transform.AST.Var.unapply(x$0: org.kiama.example.transform.AST.Var): Option[String]
10977 ===> org.kiama.output.Postfix.canEqual(x$1: Any): Boolean
7562 ===> org.kiama.example.obr.ObrTree.EnumConst.copy$default$1: org.kiama.example.obr.ObrTree.Identifier @scala.annotation.unchecked.uncheckedVariance
12159 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7410 ===> org.kiama.example.obr.Driver.process(ast: org.kiama.example.obr.ObrTree.ObrInt,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Boolean
5090 ===> org.kiama.example.lambda3.AST.FreeNamesQuery.readResolve(): Object
9425 ===> org.kiama.example.obr.SymbolTable.ExnType.apply(): org.kiama.example.obr.SymbolTable.ExnType
1392 ===> org.kiama.example.dataflow.DataflowAST.While.productPrefix: String
10382 ===> org.kiama.example.til.AST.Assign.canEqual(x$1: Any): Boolean
12164 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8183 ===> org.kiama.example.obr.RISCTransformation.datum: org.kiama.example.obr.ObrTree.Expression => org.kiama.example.obr.RISCTree.Datum
5170 ===> org.kiama.example.oberon0.L0.CCodeGenerator.translate(d: org.kiama.example.oberon0.base.source.Declaration): List[org.kiama.example.oberon0.base.c.CDeclaration]
635 ===> org.kiama.example.RISC.RISCISA.SUBI.a: org.kiama.example.RISC.RISCISA.RegNo
6995 ===> org.kiama.example.oberon0.base.Driver.usageMessage: String
9738 ===> org.kiama.example.picojava.AbstractSyntax.Use.productPrefix: String
2475 ===> org.kiama.example.iswim.compiler.Syntax.Return.toString(): String
7567 ===> org.kiama.example.obr.ObrTree.EnumConst.canEqual(x$1: Any): Boolean
12388 ===> org.kiama.util.Messaging.Record.message: String
4294 ===> org.kiama.example.json.JSONTree.JString.equals(x$1: Any): Boolean
6014 ===> org.kiama.example.oberon0.L0.source.MulExp.hashCode(): Int
3837 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.<init>(): org.kiama.example.iswim.secd.SECDBase.StackUnderflow
4429 ===> org.kiama.example.lambda.AST.Lam.copy$default$2: org.kiama.example.lambda.AST.Exp @scala.annotation.unchecked.uncheckedVariance
11839 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7832 ===> org.kiama.example.obr.ObrTree.AndExp.toString(): String
7146 ===> org.kiama.example.oberon0.base.c.CBlock.productPrefix: String
10673 ===> org.kiama.example.til.AST.Ne.<init>(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Ne
8417 ===> org.kiama.example.obr.RISCTree.CmpneW.toString(): String
5234 ===> org.kiama.example.oberon0.L0.SymbolTable.Constant.apply(ident: String,decl: org.kiama.example.oberon0.L0.source.ConstDecl): SymbolTable.this.Constant
11466 ===> org.kiama.rewriting.SupportPositionedRewriterTests.One.canEqual(x$1: Any): Boolean
6162 ===> org.kiama.example.oberon0.L0.source.PrettyPrinter.toParenDoc(e: org.kiama.output.PrettyExpression): PrettyPrinter.this.Doc
2026 ===> org.kiama.example.iswim.compiler.Syntax.Negate.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
841 ===> org.kiama.example.RISC.RISCISA.AND.c: org.kiama.example.RISC.RISCISA.RegNo
4570 ===> org.kiama.example.lambda2.AST.App.copy$default$1: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
6631 ===> org.kiama.example.oberon0.L3.c.CDerefExp.unapply(x$0: org.kiama.example.oberon0.L3.c.CDerefExp): Option[org.kiama.example.oberon0.base.c.CExpression]
6212 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.stmt: org.kiama.example.oberon0.base.c.CStatement
8540 ===> org.kiama.example.obr.RISCTree.NegW.hashCode(): Int
9477 ===> org.kiama.example.oneohonecompanies.Company.<init>(): org.kiama.example.oneohonecompanies.Company.type
7361 ===> org.kiama.example.oberon0.base.source.PrettyPrinter.declsection(d: org.kiama.example.oberon0.base.source.Declaration): String
914 ===> org.kiama.example.RISC.RISCISA.ORI.productIterator: Iterator[Any]
7311 ===> org.kiama.example.oberon0.base.source.EmptyStmt.productPrefix: String
8165 ===> org.kiama.example.obr.RISCEncoder.compare(op: Int => org.kiama.example.RISC.RISCISA.Instr,l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum,d: org.kiama.example.obr.RISCTree.Datum): Unit
5912 ===> org.kiama.example.oberon0.L0.source.GtExp.toString(): String
10466 ===> org.kiama.example.til.AST.For.toString(): String
10458 ===> org.kiama.example.til.AST.For.copy$default$3: org.kiama.example.til.AST.Exp @scala.annotation.unchecked.uncheckedVariance
10007 ===> org.kiama.example.prolog.PrologTree.Program.canEqual(x$1: Any): Boolean
1216 ===> org.kiama.example.RISC.RISCISA.BGE.productPrefix: String
3983 ===> org.kiama.example.iswim.secd.SECDBase.ContValue.hashCode(): Int
12196 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
2790 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.apply(): org.kiama.example.iswim.secd.BooleanOps.PushFalse
1252 ===> org.kiama.example.RISC.RISCISA.BGT.canEqual(x$1: Any): Boolean
11453 ===> org.kiama.rewriting.PositionedRewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.PositionedRewriter.Term): Boolean
9152 ===> org.kiama.example.obr.SPARCTree.Local.readResolve(): Object
6433 ===> org.kiama.example.oberon0.L3.NameAnalyser.envoutl(out: org.kiama.example.oberon0.base.source.SourceASTNode => NameAnalyser.this.Environment): org.kiama.==>[org.kiama.example.oberon0.base.source.SourceASTNode,NameAnalyser.this.Environment]
8399 ===> org.kiama.example.obr.RISCTree.CmpeqW.apply(l: org.kiama.example.obr.RISCTree.Datum,r: org.kiama.example.obr.RISCTree.Datum): org.kiama.example.obr.RISCTree.CmpeqW
8499 ===> org.kiama.example.obr.RISCTree.LdW.productPrefix: String
4108 ===> org.kiama.example.iswim.secd.StackOps.Swap.m: Int
4738 ===> org.kiama.example.lambda2.AST.SubOp.productPrefix: String
623 ===> org.kiama.example.RISC.RISCISA.SUB.productPrefix: String
9725 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.<init>(): org.kiama.example.picojava.AbstractSyntax.WhileStmt.type
1979 ===> org.kiama.example.iswim.compiler.Syntax.ExprStmt.productIterator: Iterator[Any]
165 ===> org.kiama.attribution.AttributionTests.Leaf.copy(value: Int): AttributionTests.this.Leaf
6071 ===> org.kiama.example.oberon0.L0.source.AndExp.hashCode(): Int
9578 ===> org.kiama.example.oneohonecompanies.Depth.depth(c: org.kiama.example.oneohonecompanies.Company.Company): Int
1829 ===> org.kiama.example.imperative.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
4378 ===> org.kiama.example.json.Rewriter.cut(c: org.kiama.example.json.JSONTree.JValue): org.kiama.example.json.JSONTree.JValue
3790 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productArity: Int
3053 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.toString(): String
7092 ===> org.kiama.example.oberon0.base.c.CInclude.toString(): String
299 ===> org.kiama.attribution.AttributionTests.TripleTree.p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)
4449 ===> org.kiama.example.lambda.AST.App.productPrefix: String
7101 ===> org.kiama.example.oberon0.base.c.CVarDecl.tipe: org.kiama.example.oberon0.base.c.CType
3398 ===> org.kiama.example.iswim.secd.RecordOps.RecordValue.productPrefix: String
3773 ===> org.kiama.example.iswim.secd.SECDBase.ContTypeValue.copy(): org.kiama.example.iswim.secd.SECDBase.ContTypeValue
9227 ===> org.kiama.example.obr.SymbolTable.Variable.productElement(x$1: Int): Any
677 ===> org.kiama.example.RISC.RISCISA.MULI.a: org.kiama.example.RISC.RISCISA.RegNo
1856 ===> org.kiama.example.imperative.ASTNonCase.Binary.r: org.kiama.example.imperative.ASTNonCase.Exp
11022 ===> org.kiama.output.PrettyPrinterBase.pretty_any(a: Any): PrettyPrinterBase.this.Layout
12008 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12331 ===> org.kiama.util.Environments.MultipleEntity.toString(): String
12187 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5351 ===> org.kiama.example.oberon0.L0.c.CInitDecl.productElement(x$1: Int): Any
9331 ===> org.kiama.example.obr.SymbolTable.ArrayType.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1260 ===> org.kiama.example.RISC.RISCISA.BR.label: Int
2250 ===> org.kiama.example.iswim.compiler.Syntax.BoolVal.<init>(b: Boolean): org.kiama.example.iswim.compiler.Syntax.BoolVal
6251 ===> org.kiama.example.oberon0.L1.source.IfStatement.toString(): String
6857 ===> org.kiama.example.oberon0.L4.c.CFieldExp.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
2180 ===> org.kiama.example.iswim.compiler.Syntax.Less.productArity: Int
1820 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
3580 ===> org.kiama.example.iswim.secd.SECDBase.Lookup.toString(): String
3350 ===> org.kiama.example.iswim.secd.RecordOps.UnpackRecord.productElement(x$1: Int): Any
1470 ===> org.kiama.example.dataflow.DataflowAST.Empty.<init>(): org.kiama.example.dataflow.DataflowAST.Empty.type
9243 ===> org.kiama.example.obr.SymbolTable.Constant.copy(tipe: org.kiama.example.obr.SymbolTable.Type,value: Int): org.kiama.example.obr.SymbolTable.Constant
11028 ===> org.kiama.output.PrettyPrinterBase.text(t: String): PrettyPrinterBase.this.Doc
9945 ===> org.kiama.example.prolog.Interpreter.UnifyGoal.productArity: Int
7044 ===> org.kiama.example.oberon0.base.TestDriver.tasklevel: Int
6507 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.copy$default$2: List[SymbolTable.this.ParamInfo] @scala.annotation.unchecked.uncheckedVariance
4546 ===> org.kiama.example.lambda2.AST.Lam.t: org.kiama.example.lambda2.AST.Type
3214 ===> org.kiama.example.iswim.secd.IntegerOps.Mult.readResolve(): Object
10479 ===> org.kiama.example.til.AST.Read.productElement(x$1: Int): Any
441 ===> org.kiama.attribution.DynamicAttributionTests.Unused.unapply(x$0: DynamicAttributionTests.this.Unused): Option[Boolean]
7722 ===> org.kiama.example.obr.ObrTree.ReturnStmt.apply(value: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.ReturnStmt
8129 ===> org.kiama.example.obr.ObrTree.SlashExp.readResolve(): Object
10869 ===> org.kiama.machine.Machine.State.sname: String
12113 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
5959 ===> org.kiama.example.oberon0.L0.source.AddExp.unapply(x$0: org.kiama.example.oberon0.L0.source.AddExp): Option[(org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.L0.source.Expression)]
11424 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.line: Int
1804 ===> org.kiama.example.imperative.AST.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Strategy] with Serializable
1716 ===> org.kiama.example.imperative.AST.Div.toString(): String
3857 ===> org.kiama.example.iswim.secd.SECDBase.TypeError.productElement(x$1: Int): Any
9919 ===> org.kiama.example.prolog.Interpreter.DisplayGoal.unapply(x$0: org.kiama.example.prolog.Interpreter.DisplayGoal): Option[Set[(String, org.kiama.example.prolog.PrologTree.Term)]]
3694 ===> org.kiama.example.iswim.secd.SECDBase.RaiseException.copy(): org.kiama.example.iswim.secd.SECDBase.RaiseException
3043 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.copy(): org.kiama.example.iswim.secd.HeapOps.RefTypeValue
6302 ===> org.kiama.example.oberon0.L2.source.ForStatement.idn: org.kiama.example.oberon0.L0.source.IdnExp
10053 ===> org.kiama.example.prolog.PrologTree.Rule.apply(hd: org.kiama.example.prolog.PrologTree.Term,bdy: List[org.kiama.example.prolog.PrologTree.Term]): org.kiama.example.prolog.PrologTree.Rule
11684 ===> org.kiama.rewriting.Rewriter.isleaf: Rewriter.this.Strategy
2201 ===> org.kiama.example.iswim.compiler.Syntax.LessEq.productIterator: Iterator[Any]
9201 ===> org.kiama.example.obr.SemanticAnalysis.env: org.kiama.example.obr.ObrTree.ObrNode => org.kiama.example.obr.SymbolTable.Environment
11915 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
5990 ===> org.kiama.example.oberon0.L0.source.OrExp.canEqual(x$1: Any): Boolean
10962 ===> org.kiama.output.Fixity.<init>(): org.kiama.output.Fixity
6745 ===> org.kiama.example.oberon0.L4.Parser.keywordStrings: List[String]
4946 ===> org.kiama.example.lambda2.ReduceSubst.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
963 ===> org.kiama.example.RISC.RISCISA.XORI.unapply(x$0: org.kiama.example.RISC.RISCISA.XORI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
9592 ===> org.kiama.example.oneohonecompanies.Precedence.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Boolean](x$1: A1,default: A1 => B1): B1
3789 ===> org.kiama.example.iswim.secd.SECDBase.ExceptionTypeValue.productPrefix: String
6719 ===> org.kiama.example.oberon0.L3.source.Call.productArity: Int
10438 ===> org.kiama.example.til.AST.While.productArity: Int
7000 ===> org.kiama.example.oberon0.base.Driver.pprintastFlag: Boolean
160 ===> org.kiama.attribution.AttributionTests.Pair.apply(left: AttributionTests.this.Tree,right: AttributionTests.this.Tree): AttributionTests.this.Pair
9245 ===> org.kiama.example.obr.SymbolTable.Constant.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
8402 ===> org.kiama.example.obr.RISCTree.CmpneW.l: org.kiama.example.obr.RISCTree.Datum
10678 ===> org.kiama.example.til.AST.Ne.productArity: Int
10589 ===> org.kiama.example.til.AST.Mul.equals(x$1: Any): Boolean
8093 ===> org.kiama.example.obr.ObrTree.PlusExp.right: org.kiama.example.obr.ObrTree.Expression
9130 ===> org.kiama.example.obr.SPARCTree.SubW.<init>(): org.kiama.example.obr.SPARCTree.SubW.type
5192 ===> org.kiama.example.oberon0.L0.NameAnalyser.$anonfun.isDefinedAt(x$1: org.kiama.example.oberon0.base.source.SourceASTNode): Boolean
6469 ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter.productArity: Int
11847 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
14 ===> org.kiama.attribution.Attributable.index: Int
5196 ===> org.kiama.example.oberon0.L0.Parser.typedefDef: Parser.this.PackratParser[org.kiama.example.oberon0.L0.source.TypeDef]
10811 ===> org.kiama.example.transform.AST.BinExp.productArity: Int
6524 ===> org.kiama.example.oberon0.L3.TypeAnalyser.parammode(u: org.kiama.example.oberon0.base.source.IdnUse,i: Int): org.kiama.example.oberon0.L3.source.Mode
7423 ===> org.kiama.example.obr.TreeTestDriver.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: Unit](x$1: A1,default: A1 => B1): B1
9369 ===> org.kiama.example.obr.SymbolTable.RecordTypes.productIterator: Iterator[Any]
4151 ===> org.kiama.example.iswim.secd.StringOps.StringTypeValue.productPrefix: String
8207 ===> org.kiama.example.obr.RISCTree.Beq.copy(cond: org.kiama.example.obr.RISCTree.Datum,dest: org.kiama.example.obr.RISCTree.Label): org.kiama.example.obr.RISCTree.Beq
11491 ===> org.kiama.rewriting.SupportPositionedRewriterTests.Two.apply(l: org.kiama.rewriting.SupportPositionedRewriterTests.Node,r: org.kiama.rewriting.SupportPositionedRewriterTests.Node): org.kiama.rewriting.SupportPositionedRewriterTests.Two
9801 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.apply(Name: String): org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl
10708 ===> org.kiama.example.til.TIL2_2.transform(ast: org.kiama.example.til.AST.Program): org.kiama.example.til.AST.Program
3226 ===> org.kiama.example.iswim.secd.IntegerOps.Div.toString(): String
1512 ===> org.kiama.example.dataflow.For.productPrefix: String
11787 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3074 ===> org.kiama.example.iswim.secd.HeapOps.RefValue.unapply(x$0: HeapOps.this.RefValue): Boolean
164 ===> org.kiama.attribution.AttributionTests.Leaf.<init>(value: Int): AttributionTests.this.Leaf
10416 ===> org.kiama.example.til.AST.IfElse.copy$default$2: Seq[org.kiama.example.til.AST.Stat] @scala.annotation.unchecked.uncheckedVariance
4632 ===> org.kiama.example.lambda2.AST.Letp.copy(bs: List[org.kiama.example.lambda2.AST.Bind],e: org.kiama.example.lambda2.AST.Exp): org.kiama.example.lambda2.AST.Letp
553 ===> org.kiama.example.RISC.RISCISA.MVNI.im: org.kiama.example.RISC.RISCISA.Imm
3662 ===> org.kiama.example.iswim.secd.SECDBase.PushType.<init>(ty: org.kiama.example.iswim.secd.SECDBase.TypeValue): org.kiama.example.iswim.secd.SECDBase.PushType
7041 ===> org.kiama.example.oberon0.base.TestDriver.$init$(): Unit
572 ===> org.kiama.example.RISC.RISCISA.ADD.a: org.kiama.example.RISC.RISCISA.RegNo
12289 ===> org.kiama.util.JLineConsole.terminal: jline.Terminal
12436 ===> org.kiama.util.WhitespaceParser.skipWhitespace: Boolean
9710 ===> org.kiama.example.picojava.AbstractSyntax.AssignStmt.readResolve(): Object
2030 ===> org.kiama.example.iswim.compiler.Syntax.Negate.productIterator: Iterator[Any]
11760 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10810 ===> org.kiama.example.transform.AST.BinExp.productPrefix: String
6102 ===> org.kiama.example.oberon0.L0.source.NotExp.<init>(exp: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.NotExp
6430 ===> org.kiama.example.oberon0.L3.NameAnalyser.$anonfun.applyOrElse[A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: NameAnalyser.this.Environment](x$1: A1,default: A1 => B1): B1
10146 ===> org.kiama.example.prolog.SemanticAnalysis.defenv: org.kiama.example.prolog.SymbolTable.Environment
739 ===> org.kiama.example.RISC.RISCISA.DIVI.readResolve(): Object
8887 ===> org.kiama.example.obr.SPARCTree.AddW.toString(): String
4861 ===> org.kiama.example.lambda2.Par.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7743 ===> org.kiama.example.obr.ObrTree.WhileStmt.readResolve(): Object
12028 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7927 ===> org.kiama.example.obr.ObrTree.IndexExp.idn: org.kiama.example.obr.ObrTree.Identifier
4818 ===> org.kiama.example.lambda2.Lambda.Command.<init>(): org.kiama.example.lambda2.Lambda.Command.type
8664 ===> org.kiama.example.obr.RISCTree.Label.productArity: Int
818 ===> org.kiama.example.RISC.RISCISA.CMPI.unapply(x$0: org.kiama.example.RISC.RISCISA.CMPI): Option[(org.kiama.example.RISC.RISCISA.RegNo, org.kiama.example.RISC.RISCISA.Imm)]
3364 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.productArity: Int
4492 ===> org.kiama.example.lambda.Lambda.prompt: String
5498 ===> org.kiama.example.oberon0.L0.c.CGtExp.apply(left: org.kiama.example.oberon0.base.c.CExpression,right: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.L0.c.CGtExp
2391 ===> org.kiama.example.iswim.compiler.Syntax.LetRec.toString(): String
894 ===> org.kiama.example.RISC.RISCISA.OR.canEqual(x$1: Any): Boolean
5746 ===> org.kiama.example.oberon0.L0.source.VarDecl.copy$default$2: org.kiama.example.oberon0.L0.source.TypeDef @scala.annotation.unchecked.uncheckedVariance
9328 ===> org.kiama.example.obr.SymbolTable.ArrayType.storage: Int
7333 ===> org.kiama.example.oberon0.base.source.IdnDef.productIterator: Iterator[Any]
5706 ===> org.kiama.example.oberon0.L0.c.CIdnExp.productArity: Int
4207 ===> org.kiama.example.iswim.tests.SECDTests.<init>(): org.kiama.example.iswim.tests.SECDTests
10515 ===> org.kiama.example.til.AST.Id.productElement(x$1: Int): Any
3910 ===> org.kiama.example.iswim.secd.SECDBase.DumpEmpty.unapply(x$0: org.kiama.example.iswim.secd.SECDBase.DumpEmpty): Boolean
7280 ===> org.kiama.example.oberon0.base.source.ModuleDecl.canEqual(x$1: Any): Boolean
8873 ===> org.kiama.example.obr.SPARCTree.Write.readResolve(): Object
4639 ===> org.kiama.example.lambda2.AST.Letp.canEqual(x$1: Any): Boolean
8265 ===> org.kiama.example.obr.RISCTree.LabelDef.productElement(x$1: Int): Any
3243 ===> org.kiama.example.iswim.secd.IntegerOps.Rem.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.Rem): Boolean
2551 ===> org.kiama.example.iswim.compiler.Syntax.Block.toString(): String
7063 ===> org.kiama.example.oberon0.base.c.CProgram.includes: List[org.kiama.example.oberon0.base.c.CInclude]
3004 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.hashCode(): Int
7149 ===> org.kiama.example.oberon0.base.c.CBlock.productIterator: Iterator[Any]
5032 ===> org.kiama.example.lambda3.AST.Lam.readResolve(): Object
2655 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.toString(): String
8557 ===> org.kiama.example.obr.RISCTree.Not.hashCode(): Int
7785 ===> org.kiama.example.obr.ObrTree.TryBody.productArity: Int
6766 ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType.fields: List[SymbolTable.this.Field]
11443 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
3049 ===> org.kiama.example.iswim.secd.HeapOps.RefTypeValue.hashCode(): Int
6205 ===> org.kiama.example.oberon0.L1.c.CIfElseStatement.equals(x$1: Any): Boolean
9741 ===> org.kiama.example.picojava.AbstractSyntax.Use.productIterator: Iterator[Any]
1709 ===> org.kiama.example.imperative.AST.Div.productElement(x$1: Int): Any
10579 ===> org.kiama.example.til.AST.Mul.copy(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp): org.kiama.example.til.AST.Mul
308 ===> org.kiama.attribution.AttributionTests.TripleTree.hashCode(): Int
8075 ===> org.kiama.example.obr.ObrTree.OrExp.<init>(left: org.kiama.example.obr.ObrTree.Expression,right: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.OrExp
6000 ===> org.kiama.example.oberon0.L0.source.ProdExpression.<init>(op: String): org.kiama.example.oberon0.L0.source.ProdExpression
3257 ===> org.kiama.example.iswim.secd.IntegerOps.IntTypeValue.apply(): org.kiama.example.iswim.secd.IntegerOps.IntTypeValue
4804 ===> org.kiama.example.lambda2.Evaluators.evaluator: org.kiama.example.lambda2.Reduce
6915 ===> org.kiama.example.oberon0.L4.source.RecordTypeDef.copy$default$1: List[org.kiama.example.oberon0.L4.source.FieldList] @scala.annotation.unchecked.uncheckedVariance
464 ===> org.kiama.attribution.DynamicAttributionTests.$anonfun.applyOrElse[A1 <: DynamicAttributionTests.this.Tree, B1 >: Int](x$1: A1,default: A1 => B1): B1
2484 ===> org.kiama.example.iswim.compiler.Syntax.Apply.<init>(f: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Apply
8202 ===> org.kiama.example.obr.RISCTree.RISCProg.readResolve(): Object
7082 ===> org.kiama.example.oberon0.base.c.CInclude.s: String
11619 ===> org.kiama.rewriting.Rewriter.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[Rewriter.this.Term,Rewriter.this.Strategy] with Serializable
7407 ===> org.kiama.example.obr.Driver.execFlag_$eq(x$1: Boolean): Unit
2553 ===> org.kiama.example.iswim.compiler.Syntax.Block.<init>(): org.kiama.example.iswim.compiler.Syntax.Block.type
557 ===> org.kiama.example.RISC.RISCISA.MVNI.copy$default$1: org.kiama.example.RISC.RISCISA.RegNo @scala.annotation.unchecked.uncheckedVariance
1601 ===> org.kiama.example.imperative.AST.Var.productElement(x$1: Int): Any
7323 ===> org.kiama.example.oberon0.base.source.EmptyStmt.readResolve(): Object
4716 ===> org.kiama.example.lambda2.AST.NoType.readResolve(): Object
11246 ===> org.kiama.rewriting.CallbackRewriter.dispatch(s: CallbackRewriter.this.Strategy): CallbackRewriter.this.Strategy
4959 ===> org.kiama.example.lambda2.ReduceSubstEvaluator.<init>(): org.kiama.example.lambda2.ReduceSubstEvaluator
4904 ===> org.kiama.example.lambda2.ParLazy.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
5022 ===> org.kiama.example.lambda3.AST.Lam.productArity: Int
3077 ===> org.kiama.example.iswim.secd.HeapOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
2117 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.r: org.kiama.example.iswim.compiler.Syntax.Expr
12077 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9379 ===> org.kiama.example.obr.SymbolTable.EnumType.<init>(ident: org.kiama.example.obr.ObrTree.Identifier): org.kiama.example.obr.SymbolTable.EnumType
10937 ===> org.kiama.output.LeftAssoc.productArity: Int
10174 ===> org.kiama.example.prolog.SymbolTable.Predicate.<init>(): org.kiama.example.prolog.SymbolTable.Predicate.type
3345 ===> org.kiama.example.iswim.secd.RecordOps.GetField.readResolve(): Object
7953 ===> org.kiama.example.obr.ObrTree.IntExp.productIterator: Iterator[Any]
12266 ===> org.kiama.util.RegexCompiler.parser: RegexCompiler.this.Parser[T]
9182 ===> org.kiama.example.obr.SPARCTree.Label.hashCode(): Int
7199 ===> org.kiama.example.oberon0.base.c.CArrayType.productIterator: Iterator[Any]
5414 ===> org.kiama.example.oberon0.L0.c.CEqExp.toString(): String
1071 ===> org.kiama.example.RISC.RISCISA.PSH.b: org.kiama.example.RISC.RISCISA.RegNo
9854 ===> org.kiama.example.picojava.TypeAnalysis.isValue: org.kiama.example.picojava.AbstractSyntax.Exp => Boolean
7822 ===> org.kiama.example.obr.ObrTree.AndExp.copy$default$2: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
2625 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.readResolve(): Object
7342 ===> org.kiama.example.oberon0.base.source.IdnDef.readResolve(): Object
7344 ===> org.kiama.example.oberon0.base.source.IdnUse.<init>(ident: String): org.kiama.example.oberon0.base.source.IdnUse
8022 ===> org.kiama.example.obr.ObrTree.NegExp.copy(exp: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.NegExp
5312 ===> org.kiama.example.oberon0.L0.SymbolTable.isError(e: SymbolTable.this.Entity): Boolean
1229 ===> org.kiama.example.RISC.RISCISA.BLE.<init>(label: Int): org.kiama.example.RISC.RISCISA.BLE
175 ===> org.kiama.attribution.AttributionTests.Leaf.<init>(): AttributionTests.this.Leaf.type
7122 ===> org.kiama.example.oberon0.base.c.CFunctionDecl.<init>(decl: org.kiama.example.oberon0.base.c.CVarDecl,args: List[org.kiama.example.oberon0.base.c.CDeclaration],body: org.kiama.example.oberon0.base.c.CBlock): org.kiama.example.oberon0.base.c.CFunctionDecl
4864 ===> org.kiama.example.lambda2.ParEagerSubst.$init$(): Unit
853 ===> org.kiama.example.RISC.RISCISA.AND.hashCode(): Int
11254 ===> org.kiama.rewriting.NominalAST.<init>(): org.kiama.rewriting.NominalAST.type
3602 ===> org.kiama.example.iswim.secd.SECDBase.Resume.productArity: Int
10327 ===> org.kiama.example.til.Main.$init$(): Unit
4357 ===> org.kiama.example.json.JSONTree.JNull.<init>(): org.kiama.example.json.JSONTree.JNull.type
9086 ===> org.kiama.example.obr.SPARCTree.Not.productElement(x$1: Int): Any
6640 ===> org.kiama.example.oberon0.L3.source.ProcDecl.idnuse: org.kiama.example.oberon0.base.source.IdnUse
12622 ===> org.kiama.util.Tests.assertMessage(index: Int,line: Int,column: Int,msg: String): Unit
11646 ===> org.kiama.rewriting.Rewriter.bottomup(s: => Rewriter.this.Strategy): Rewriter.this.Strategy
943 ===> org.kiama.example.RISC.RISCISA.XOR.readResolve(): Object
4233 ===> org.kiama.example.json.JSONTree.JObject.<init>(fields: List[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)]): org.kiama.example.json.JSONTree.JObject
10108 ===> org.kiama.example.prolog.PrologTree.Atom.readResolve(): Object
6333 ===> org.kiama.example.oberon0.L2.source.CaseStatement.copy$default$2: List[org.kiama.example.oberon0.L2.source.Case] @scala.annotation.unchecked.uncheckedVariance
766 ===> org.kiama.example.RISC.RISCISA.MODI.copy(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.MODI
8598 ===> org.kiama.example.obr.RISCTree.SubW.<init>(): org.kiama.example.obr.RISCTree.SubW.type
2087 ===> org.kiama.example.iswim.compiler.Syntax.Times.productIterator: Iterator[Any]
2229 ===> org.kiama.example.iswim.compiler.Syntax.Greater.readResolve(): Object
12490 ===> org.kiama.util.ParserUtilitiesTests.Tup3.productArity: Int
3840 ===> org.kiama.example.iswim.secd.SECDBase.StackUnderflow.productPrefix: String
10135 ===> org.kiama.example.prolog.PrologTree.Cut.canEqual(x$1: Any): Boolean
4211 ===> org.kiama.example.iswim.tests.SECDTests.SECD.init: Unit
4975 ===> org.kiama.example.lambda3.AST.Num.<init>(): org.kiama.example.lambda3.AST.Num.type
7729 ===> org.kiama.example.obr.ObrTree.WhileStmt.copy$default$1: org.kiama.example.obr.ObrTree.Expression @scala.annotation.unchecked.uncheckedVariance
7165 ===> org.kiama.example.oberon0.base.c.CIntType.productIterator: Iterator[Any]
9217 ===> org.kiama.example.obr.SymbolTable.Entity.locn: Int
4421 ===> org.kiama.example.lambda.AST.Var.unapply(x$0: org.kiama.example.lambda.AST.Var): Option[org.kiama.example.lambda.AST.Idn]
7451 ===> org.kiama.example.obr.ObrTree.IntVar.idn: org.kiama.example.obr.ObrTree.Identifier
574 ===> org.kiama.example.RISC.RISCISA.ADD.c: org.kiama.example.RISC.RISCISA.RegNo
9793 ===> org.kiama.example.picojava.AbstractSyntax.PrimitiveDecl.productElement(x$1: Int): Any
9786 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.readResolve(): Object
9770 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.Value: String
8655 ===> org.kiama.example.obr.RISCTree.Indexed.toString(): String
3133 ===> org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual.copy(): org.kiama.example.iswim.secd.IntComparisonOps.LessThanOrEqual
8250 ===> org.kiama.example.obr.RISCTree.Jmp.canEqual(x$1: Any): Boolean
11686 ===> org.kiama.rewriting.Rewriter.leaves(s: => Rewriter.this.Strategy,isleaf: => Rewriter.this.Strategy,skip: Rewriter.this.Strategy => Rewriter.this.Strategy): Rewriter.this.Strategy
2998 ===> org.kiama.example.iswim.secd.HeapOps.Alloc.copy(): org.kiama.example.iswim.secd.HeapOps.Alloc
1243 ===> org.kiama.example.RISC.RISCISA.BLE.readResolve(): Object
6562 ===> org.kiama.example.oberon0.L3.c.CCall.copy(s: String,ps: List[org.kiama.example.oberon0.base.c.CExpression]): org.kiama.example.oberon0.L3.c.CCall
10918 ===> org.kiama.machine.Machine.run: Unit
11888 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
12588 ===> org.kiama.util.PositionedParserUtilities.$init$(): Unit
12583 ===> org.kiama.util.Positioned.setStart(p: scala.util.parsing.input.Position): Positioned.this.type
135 ===> org.kiama.attribution.UncachedAttribution.$anon.optName: Option[String]
2802 ===> org.kiama.example.iswim.secd.BooleanOps.Test.productElement(x$1: Int): Any
7209 ===> org.kiama.example.oberon0.base.c.CStatement.<init>(): org.kiama.example.oberon0.base.c.CStatement
9983 ===> org.kiama.example.prolog.Interpreter.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
796 ===> org.kiama.example.RISC.RISCISA.CMP.<init>(): org.kiama.example.RISC.RISCISA.CMP.type
7696 ===> org.kiama.example.obr.ObrTree.LoopStmt.productArity: Int
7884 ===> org.kiama.example.obr.ObrTree.FieldExp.toString(): String
11574 ===> org.kiama.rewriting.Rewriter.para[T](f: (Any, Seq[T]) => T): Any => T
341 ===> org.kiama.attribution.AttributionTests.Base.k2: org.kiama.attribution.AttributionTests.Base.ParamAttributeKey
3508 ===> org.kiama.example.iswim.secd.SECDBase.TailApp.productIterator: Iterator[Any]
7496 ===> org.kiama.example.obr.ObrTree.BoolVar.equals(x$1: Any): Boolean
9373 ===> org.kiama.example.obr.SymbolTable.RecordTypes.<init>(): org.kiama.example.obr.SymbolTable.RecordTypes.type
2707 ===> org.kiama.example.iswim.compiler.Syntax.Val.hashCode(): Int
1922 ===> org.kiama.example.iswim.compiler.CodeGenerator.code: org.kiama.example.iswim.compiler.Syntax.Iswim => org.kiama.example.iswim.secd.SECDBase.CodeTree
3954 ===> org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive.apply(): org.kiama.example.iswim.secd.SECDBase.NonExistentPrimitive
6725 ===> org.kiama.example.oberon0.L3.source.Call.equals(x$1: Any): Boolean
7227 ===> org.kiama.example.oberon0.base.c.CReturn.copy(e: org.kiama.example.oberon0.base.c.CExpression): org.kiama.example.oberon0.base.c.CReturn
2129 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.equals(x$1: Any): Boolean
300 ===> org.kiama.attribution.AttributionTests.TripleTree.<init>(p: (AttributionTests.this.Tree, AttributionTests.this.Tree, AttributionTests.this.Tree)): AttributionTests.this.TripleTree
4124 ===> org.kiama.example.iswim.secd.StackOps.Swap.unapply(x$0: org.kiama.example.iswim.secd.StackOps.Swap): Option[(Int, Int)]
173 ===> org.kiama.attribution.AttributionTests.Leaf.toString(): String
3629 ===> org.kiama.example.iswim.secd.SECDBase.PushEmpty.<init>(): org.kiama.example.iswim.secd.SECDBase.PushEmpty
4713 ===> org.kiama.example.lambda2.AST.NoType.toString(): String
1251 ===> org.kiama.example.RISC.RISCISA.BGT.productIterator: Iterator[Any]
2401 ===> org.kiama.example.iswim.compiler.Syntax.LetStmt.productElement(x$1: Int): Any
2879 ===> org.kiama.example.iswim.secd.BooleanOps.$anonfun.isDefinedAt(x$1: org.kiama.example.iswim.secd.SECDBase.Code): Boolean
4600 ===> org.kiama.example.lambda2.AST.Opn.equals(x$1: Any): Boolean
9783 ===> org.kiama.example.picojava.AbstractSyntax.BooleanLiteral.toString(): String
2958 ===> org.kiama.example.iswim.secd.ExceptionHandler.SetHandler.equals(x$1: Any): Boolean
214 ===> org.kiama.attribution.AttributionTests.ListTree.l: List[AttributionTests.this.Tree]
10890 ===> org.kiama.machine.Machine.ParamState.undefine(t: T): Unit
1327 ===> org.kiama.example.RISC.RISCISA.Comment.text: String
2758 ===> org.kiama.example.iswim.driver.SECD.<init>(code: org.kiama.example.iswim.secd.SECDBase.CodeTree): org.kiama.example.iswim.driver.SECD
7554 ===> org.kiama.example.obr.ObrTree.EnumVar.<init>(): org.kiama.example.obr.ObrTree.EnumVar.type
4613 ===> org.kiama.example.lambda2.AST.Let.copy$default$2: org.kiama.example.lambda2.AST.Type @scala.annotation.unchecked.uncheckedVariance
8315 ===> org.kiama.example.obr.RISCTree.Write.productArity: Int
8270 ===> org.kiama.example.obr.RISCTree.LabelDef.equals(x$1: Any): Boolean
2612 ===> org.kiama.example.iswim.compiler.Syntax.MatchClause.copy$default$2: org.kiama.example.iswim.compiler.Syntax.Expr @scala.annotation.unchecked.uncheckedVariance
11416 ===> org.kiama.rewriting.PositionedRewriterTests.$anon.column: Int
4585 ===> org.kiama.example.lambda2.AST.Opn.e1: org.kiama.example.lambda2.AST.Exp
12395 ===> org.kiama.util.Messaging.Record.productArity: Int
5984 ===> org.kiama.example.oberon0.L0.source.OrExp.copy$default$1: org.kiama.example.oberon0.L0.source.Expression @scala.annotation.unchecked.uncheckedVariance
9351 ===> org.kiama.example.obr.SymbolTable.RecordType.productArity: Int
12042 ===> org.kiama.rewriting.RewriterTests.innermosttest(imost: => org.kiama.rewriting.Rewriter.Strategy => org.kiama.rewriting.Rewriter.Strategy): Unit
3542 ===> org.kiama.example.iswim.secd.SECDBase.BindPrims.productIterator: Iterator[Any]
1748 ===> org.kiama.example.imperative.AST.Seqn.toString(): String
3198 ===> org.kiama.example.iswim.secd.IntegerOps.Sub.unapply(x$0: org.kiama.example.iswim.secd.IntegerOps.Sub): Boolean
7908 ===> org.kiama.example.obr.ObrTree.GreaterExp.unapply(x$0: org.kiama.example.obr.ObrTree.GreaterExp): Option[(org.kiama.example.obr.ObrTree.Expression, org.kiama.example.obr.ObrTree.Expression)]
5821 ===> org.kiama.example.oberon0.L0.source.RelationalExpression.<init>(op: String): org.kiama.example.oberon0.L0.source.RelationalExpression
4773 ===> org.kiama.example.lambda2.AST.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Strategy](x$1: A1,default: A1 => B1): B1
7957 ===> org.kiama.example.obr.ObrTree.IntExp.equals(x$1: Any): Boolean
5100 ===> org.kiama.example.lambda3.AST.FreshQuery.productElement(x$1: Int): Any
368 ===> org.kiama.attribution.Decorators.Chain.productElement(x$1: Int): Any
3368 ===> org.kiama.example.iswim.secd.RecordOps.RecordTypeValue.hashCode(): Int
6228 ===> org.kiama.example.oberon0.L1.c.CWhileStatement.unapply(x$0: org.kiama.example.oberon0.L1.c.CWhileStatement): Option[(org.kiama.example.oberon0.base.c.CExpression, org.kiama.example.oberon0.base.c.CStatement)]
4885 ===> org.kiama.example.lambda2.ParLazy.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
10426 ===> org.kiama.example.til.AST.IfElse.<init>(): org.kiama.example.til.AST.IfElse.type
919 ===> org.kiama.example.RISC.RISCISA.ORI.toString(): String
2303 ===> org.kiama.example.iswim.compiler.Syntax.Or.r: org.kiama.example.iswim.compiler.Syntax.Expr
9342 ===> org.kiama.example.obr.SymbolTable.ArrayType.unapply(x$0: org.kiama.example.obr.SymbolTable.ArrayType): Option[Int]
12617 ===> org.kiama.util.Tests.same(v1: Any,v2: Any): Boolean
10106 ===> org.kiama.example.prolog.PrologTree.Atom.apply(s: String): org.kiama.example.prolog.PrologTree.Atom
5262 ===> org.kiama.example.oberon0.L0.SymbolTable.UserType.productPrefix: String
2438 ===> org.kiama.example.iswim.compiler.Syntax.Import.hashCode(): Int
2011 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.productArity: Int
947 ===> org.kiama.example.RISC.RISCISA.XORI.<init>(a: org.kiama.example.RISC.RISCISA.RegNo,b: org.kiama.example.RISC.RISCISA.RegNo,im: org.kiama.example.RISC.RISCISA.Imm): org.kiama.example.RISC.RISCISA.XORI
10866 ===> org.kiama.machine.Machine.name: String
1344 ===> org.kiama.example.RISC.RISCISA.prettyprint(emitter: org.kiama.util.Emitter,code: org.kiama.example.RISC.RISCISA.AssemCode): Unit
10270 ===> org.kiama.example.prolog.Subst.$anon.<init>(): org.kiama.example.prolog.Subst{}
12572 ===> org.kiama.util.ParserUtilitiesTests.Tup6.<init>(): ParserUtilitiesTests.this.Tup6.type
11965 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
2717 ===> org.kiama.example.iswim.compiler.Syntax.Assign.<init>(r: org.kiama.example.iswim.compiler.Syntax.Expr,e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Assign
628 ===> org.kiama.example.RISC.RISCISA.SUB.hashCode(): Int
3748 ===> org.kiama.example.iswim.secd.SECDBase.TypeTypeValue.canEqual(x$1: Any): Boolean
9112 ===> org.kiama.example.obr.SPARCTree.RemW.toString(): String
10243 ===> org.kiama.example.prolog.SymbolTable.UnknownType.copy(): org.kiama.example.prolog.SymbolTable.UnknownType
5550 ===> org.kiama.example.oberon0.L0.c.CSubExp.productElement(x$1: Int): Any
8503 ===> org.kiama.example.obr.RISCTree.LdW.canEqual(x$1: Any): Boolean
9392 ===> org.kiama.example.obr.SymbolTable.EnumType.toString(): String
2230 ===> org.kiama.example.iswim.compiler.Syntax.GreaterEq.l: org.kiama.example.iswim.compiler.Syntax.Expr
9715 ===> org.kiama.example.picojava.AbstractSyntax.WhileStmt.copy$default$1: org.kiama.example.picojava.AbstractSyntax.Exp @scala.annotation.unchecked.uncheckedVariance
4994 ===> org.kiama.example.lambda3.AST.Var.apply(x: org.kiama.rewriting.NominalAST.Name): org.kiama.example.lambda3.AST.Var
3389 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.unapply(x$0: org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds): Boolean
10456 ===> org.kiama.example.til.AST.For.copy$default$1: org.kiama.example.til.AST.Id @scala.annotation.unchecked.uncheckedVariance
9903 ===> org.kiama.example.prolog.Interpreter.<init>(): org.kiama.example.prolog.Interpreter.type
4234 ===> org.kiama.example.json.JSONTree.JObject.copy(fields: List[(org.kiama.example.json.JSONTree.JName, org.kiama.example.json.JSONTree.JValue)]): org.kiama.example.json.JSONTree.JObject
1359 ===> org.kiama.example.dataflow.LivenessImpl.icount_$eq(x$1: Int): Unit
7381 ===> org.kiama.example.oberon0.drivers.A2bPhases.artefact: String
8662 ===> org.kiama.example.obr.RISCTree.Label.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
8730 ===> org.kiama.example.obr.SPARCTree.SPARC.apply(insns: List[org.kiama.example.obr.SPARCTree.Item],memsize: Int): org.kiama.example.obr.SPARCTree.SPARC
4606 ===> org.kiama.example.lambda2.AST.Let.i: org.kiama.example.lambda2.AST.Idn
2323 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.copy(s: String): org.kiama.example.iswim.compiler.Syntax.StringVal
11348 ===> org.kiama.rewriting.PositionalRewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.PositionalRewriter.Term, B1 >: Option[org.kiama.rewriting.PositionalRewriter.Term]](x$1: A1,default: A1 => B1): B1
5329 ===> org.kiama.example.oberon0.L0.c.CNamedType.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
5093 ===> org.kiama.example.lambda3.AST.FreshQuery.<init>(n: org.kiama.rewriting.NominalAST.Name,e: org.kiama.example.lambda3.AST.Exp): org.kiama.example.lambda3.AST.FreshQuery
183 ===> org.kiama.attribution.AttributionTests.Unused.copy$default$1: Boolean @scala.annotation.unchecked.uncheckedVariance
6840 ===> org.kiama.example.oberon0.L4.c.CIndexExp.productArity: Int
1962 ===> org.kiama.example.iswim.compiler.Syntax.IswimProg.productIterator: Iterator[Any]
295 ===> org.kiama.attribution.AttributionTests.PairTree.toString(): String
10147 ===> org.kiama.example.prolog.SemanticAnalysis.envin: org.kiama.example.prolog.PrologTree.SourceNode => org.kiama.example.prolog.SymbolTable.Environment
3390 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.readResolve(): Object
2134 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.readResolve(): Object
12261 ===> org.kiama.util.CompilerBase.driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter): Unit
4653 ===> org.kiama.example.lambda2.AST.Bind.copy$default$2: org.kiama.example.lambda2.AST.Exp @scala.annotation.unchecked.uncheckedVariance
4219 ===> org.kiama.example.iswim.tests.SECDTests.$anon.<init>(): SECDTests.this.SECD
2945 ===> org.kiama.example.iswim.secd.ConversionOps.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.example.iswim.secd.SECDBase.Code,Unit] with Serializable
7641 ===> org.kiama.example.obr.ObrTree.ExitStmt.equals(x$1: Any): Boolean
1227 ===> org.kiama.example.RISC.RISCISA.BGE.readResolve(): Object
8997 ===> org.kiama.example.obr.SPARCTree.DivW.productPrefix: String
9607 ===> org.kiama.example.oneohonecompanies.Total.<init>(): org.kiama.example.oneohonecompanies.Total.type
6441 ===> org.kiama.example.oberon0.L3.Parser.keywordStrings: List[String]
1950 ===> org.kiama.example.iswim.compiler.SemanticAnalysis.isSemanticallyCorrect: org.kiama.example.iswim.compiler.Syntax.Iswim => Boolean
12176 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
7530 ===> org.kiama.example.obr.ObrTree.RecordVar.productIterator: Iterator[Any]
10543 ===> org.kiama.example.til.AST.Num.<init>(n: Int): org.kiama.example.til.AST.Num
12562 ===> org.kiama.util.ParserUtilitiesTests.Tup6.copy$default$5: ParserUtilitiesTests.this.Node @scala.annotation.unchecked.uncheckedVariance
7889 ===> org.kiama.example.obr.ObrTree.FieldExp.unapply(x$0: org.kiama.example.obr.ObrTree.FieldExp): Option[(org.kiama.example.obr.ObrTree.Identifier, org.kiama.example.obr.ObrTree.Identifier)]
10763 ===> org.kiama.example.transform.AST.BinExpR.left: org.kiama.example.transform.AST.Exp
10894 ===> org.kiama.machine.Machine.paramUpdaterToU[T, U, V >: U](up: Machine.this.ParamUpdater[T,U]): V
1643 ===> org.kiama.example.imperative.AST.Add.copy(l: org.kiama.example.imperative.AST.Exp,r: org.kiama.example.imperative.AST.Exp): org.kiama.example.imperative.AST.Add
9501 ===> org.kiama.example.oneohonecompanies.Company.Dept.copy$default$2: org.kiama.example.oneohonecompanies.Company.Manager @scala.annotation.unchecked.uncheckedVariance
5038 ===> org.kiama.example.lambda3.AST.EquivQuery.execute: EquivQuery.this.T
2322 ===> org.kiama.example.iswim.compiler.Syntax.StringVal.<init>(s: String): org.kiama.example.iswim.compiler.Syntax.StringVal
6718 ===> org.kiama.example.oberon0.L3.source.Call.productPrefix: String
5713 ===> org.kiama.example.oberon0.L0.c.CIdnExp.<init>(): org.kiama.example.oberon0.L0.c.CIdnExp.type
11159 ===> org.kiama.output.ParenPrettyPrinterTests.InOp.<init>(left: ParenPrettyPrinterTests.this.Exp,right: ParenPrettyPrinterTests.this.Exp,prio: Int,fix: org.kiama.output.Side): ParenPrettyPrinterTests.this.InOp
371 ===> org.kiama.attribution.Decorators.Chain.hashCode(): Int
10902 ===> org.kiama.machine.Machine.ScalarUpdate.value: Any
10230 ===> org.kiama.example.prolog.SymbolTable.ListType.productPrefix: String
7289 ===> org.kiama.example.oberon0.base.source.Statement.<init>(): org.kiama.example.oberon0.base.source.Statement
8012 ===> org.kiama.example.obr.ObrTree.ModExp.hashCode(): Int
6182 ===> org.kiama.example.oberon0.L1.c.CIfStatement.hashCode(): Int
11608 ===> org.kiama.rewriting.Rewriter.$anon.congruenceProduct(p: Product,ss: Rewriter.this.Strategy*): Option[Rewriter.this.Term]
477 ===> org.kiama.example.RISC.RISC.init: Unit
10077 ===> org.kiama.example.prolog.PrologTree.Integer.copy(v: Int): org.kiama.example.prolog.PrologTree.Integer
11845 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
6334 ===> org.kiama.example.oberon0.L2.source.CaseStatement.copy$default$3: Option[org.kiama.example.oberon0.base.source.Block] @scala.annotation.unchecked.uncheckedVariance
2973 ===> org.kiama.example.iswim.secd.ExceptionHandler.ExnContValue.d: ExceptionHandler.this.Dump
1720 ===> org.kiama.example.imperative.AST.Stmt.<init>(): org.kiama.example.imperative.AST.Stmt
2021 ===> org.kiama.example.iswim.compiler.Syntax.NumVal.unapply(x$0: org.kiama.example.iswim.compiler.Syntax.NumVal): Option[Int]
12421 ===> org.kiama.util.ParserUtilities.wrap[T, U](p: => ParserUtilities.this.Parser[T],f: T => Either[U,String]): ParserUtilities.this.Parser[U]
9336 ===> org.kiama.example.obr.SymbolTable.ArrayType.canEqual(x$1: Any): Boolean
10903 ===> org.kiama.machine.Machine.ScalarUpdate.toString(): String
603 ===> org.kiama.example.RISC.RISCISA.ADDI.productArity: Int
11783 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7665 ===> org.kiama.example.obr.ObrTree.ForStmt.<init>(): org.kiama.example.obr.ObrTree.ForStmt.type
594 ===> org.kiama.example.RISC.RISCISA.ADDI.b: org.kiama.example.RISC.RISCISA.RegNo
292 ===> org.kiama.attribution.AttributionTests.PairTree.toString(): String
9143 ===> org.kiama.example.obr.SPARCTree.Local.productIterator: Iterator[Any]
504 ===> org.kiama.example.RISC.RISCISA.MOV.<init>(): org.kiama.example.RISC.RISCISA.MOV.type
339 ===> org.kiama.attribution.AttributionTests.Base.n: AttributionTests.this.Leaf
1690 ===> org.kiama.example.imperative.AST.Mul.canEqual(x$1: Any): Boolean
3594 ===> org.kiama.example.iswim.secd.SECDBase.AppCC.<init>(): org.kiama.example.iswim.secd.SECDBase.AppCC.type
5831 ===> org.kiama.example.oberon0.L0.source.EqExp.productArity: Int
12311 ===> org.kiama.util.Environments.$init$(): Unit
3292 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.unapply(x$0: IntegerOps.this.IntValue): Option[Int]
10446 ===> org.kiama.example.til.AST.While.toString(): String
5945 ===> org.kiama.example.oberon0.L0.source.AddExp.copy(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression): org.kiama.example.oberon0.L0.source.AddExp
2342 ===> org.kiama.example.iswim.compiler.Syntax.Binding.copy$default$1: org.kiama.example.iswim.compiler.Syntax.Variable @scala.annotation.unchecked.uncheckedVariance
7946 ===> org.kiama.example.obr.ObrTree.IntExp.num: Int
2132 ===> org.kiama.example.iswim.compiler.Syntax.Remainder.apply(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Remainder
9608 ===> org.kiama.example.oneohonecompanies.Total.total(c: org.kiama.example.oneohonecompanies.Company.Company): Double
2046 ===> org.kiama.example.iswim.compiler.Syntax.Plus.productPrefix: String
11401 ===> org.kiama.rewriting.SupportPositionalRewriterTests.Leaf.equals(x$1: Any): Boolean
1304 ===> org.kiama.example.RISC.RISCISA.RET.<init>(): org.kiama.example.RISC.RISCISA.RET.type
12134 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
8298 ===> org.kiama.example.obr.RISCTree.StW.productArity: Int
2659 ===> org.kiama.example.iswim.compiler.Syntax.CallCC.apply(e: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.CallCC
3270 ===> org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.<init>(): org.kiama.example.iswim.secd.IntegerOps.DivisionByZero.type
3284 ===> org.kiama.example.iswim.secd.IntegerOps.IntValue.productElement(x$1: Int): Any
11938 ===> org.kiama.rewriting.RewriterTests.$anonfun.applyOrElse[A1 <: org.kiama.rewriting.Rewriter.Term, B1 >: org.kiama.rewriting.Rewriter.Term](x$1: A1,default: A1 => B1): B1
7510 ===> org.kiama.example.obr.ObrTree.ArrayVar.productElement(x$1: Int): Any
10288 ===> org.kiama.example.repmin.Fork.toString(): String
12327 ===> org.kiama.util.Environments.MultipleEntity.productElement(x$1: Int): Any
6848 ===> org.kiama.example.oberon0.L4.c.CIndexExp.toString(): String
10713 ===> org.kiama.example.til.TIL2_2Main.<init>(): org.kiama.example.til.TIL2_2Main.type
11978 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
9223 ===> org.kiama.example.obr.SymbolTable.Variable.copy(tipe: org.kiama.example.obr.SymbolTable.Type): org.kiama.example.obr.SymbolTable.Variable
7074 ===> org.kiama.example.oberon0.base.c.CProgram.hashCode(): Int
10275 ===> org.kiama.example.repmin.Tree.<init>(): org.kiama.example.repmin.Tree
10535 ===> org.kiama.example.til.AST.Var.toString(): String
4920 ===> org.kiama.example.lambda2.ParLazyUpdate.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
3387 ===> org.kiama.example.iswim.secd.RecordOps.FieldOutOfBounds.toString(): String
424 ===> org.kiama.attribution.DynamicAttributionTests.Leaf.unapply(x$0: DynamicAttributionTests.this.Leaf): Option[Int]
2935 ===> org.kiama.example.iswim.secd.ConversionOps.ConversionError.canEqual(x$1: Any): Boolean
8635 ===> org.kiama.example.obr.RISCTree.Local.<init>(): org.kiama.example.obr.RISCTree.Local.type
8918 ===> org.kiama.example.obr.SPARCTree.CmpeqW.copy(l: org.kiama.example.obr.SPARCTree.Datum,r: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.CmpeqW
4252 ===> org.kiama.example.json.JSONTree.JName.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3836 ===> org.kiama.example.iswim.secd.SECDBase.UnboundVariable.readResolve(): Object
9836 ===> org.kiama.example.picojava.NameResolution.$anonfun.isDefinedAt(x$1: org.kiama.example.picojava.AbstractSyntax.BlockStmt): Boolean
7929 ===> org.kiama.example.obr.ObrTree.IndexExp.<init>(idn: org.kiama.example.obr.ObrTree.Identifier,indx: org.kiama.example.obr.ObrTree.Expression): org.kiama.example.obr.ObrTree.IndexExp
5782 ===> org.kiama.example.oberon0.L0.source.NamedType.copy(idnuse: org.kiama.example.oberon0.base.source.IdnUse): org.kiama.example.oberon0.L0.source.NamedType
6517 ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc.apply(ident: String,params: List[SymbolTable.this.ParamInfo]): SymbolTable.this.BuiltinProc
10516 ===> org.kiama.example.til.AST.Id.productIterator: Iterator[Any]
9495 ===> org.kiama.example.oneohonecompanies.Company.Dept.n: org.kiama.example.oneohonecompanies.Company.Name
831 ===> org.kiama.example.RISC.RISCISA.CHKI.canEqual(x$1: Any): Boolean
11883 ===> org.kiama.rewriting.RewriterTests.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[org.kiama.rewriting.Rewriter.Term,org.kiama.rewriting.Rewriter.Term] with Serializable
6239 ===> org.kiama.example.oberon0.L1.source.IfStatement.copy$default$2: org.kiama.example.oberon0.base.source.Block @scala.annotation.unchecked.uncheckedVariance
10250 ===> org.kiama.example.prolog.SymbolTable.UnknownType.toString(): String
532 ===> org.kiama.example.RISC.RISCISA.MVN.c: org.kiama.example.RISC.RISCISA.RegNo
10950 ===> org.kiama.output.RightAssoc.hashCode(): Int
2789 ===> org.kiama.example.iswim.secd.BooleanOps.PushFalse.toString(): String
2213 ===> org.kiama.example.iswim.compiler.Syntax.Greater.<init>(l: org.kiama.example.iswim.compiler.Syntax.Expr,r: org.kiama.example.iswim.compiler.Syntax.Expr): org.kiama.example.iswim.compiler.Syntax.Greater
2276 ===> org.kiama.example.iswim.compiler.Syntax.Not.toString(): String
11319 ===> org.kiama.rewriting.PositionedRewriter.rewriting[T <: PositionedRewriter.this.Term](oldTerm: T,newTerm: T): T
385 ===> org.kiama.attribution.Decorators.outdflt(t: T): U
3329 ===> org.kiama.example.iswim.secd.RecordOps.Fields.unapply(x$0: org.kiama.example.iswim.secd.RecordOps.Fields): Boolean
8859 ===> org.kiama.example.obr.SPARCTree.Write.copy(d: org.kiama.example.obr.SPARCTree.Datum): org.kiama.example.obr.SPARCTree.Write
12011 ===> org.kiama.rewriting.RewriterTests.$anonfun.isDefinedAt(x$1: org.kiama.rewriting.Rewriter.Term): Boolean
4621 ===> org.kiama.example.lambda2.AST.Let.hashCode(): Int
10682 ===> org.kiama.example.til.AST.Ne.hashCode(): Int
