1299 ===> phantm.ast.Trees.Throw.apply(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Throw
4861 ===> phantm.symbols.IfaceConstantSymbol.<init>(is: phantm.symbols.IfaceSymbol,name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.IfaceConstantSymbol
4731 ===> phantm.phases.CollectSymbols.copy$default$2: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
5330 ===> phantm.types.StringKey.hashCode(): Int
5075 ===> phantm.types.TypeTransferFunction.checkFCalls(fcall_params: List[phantm.cfg.Trees.SimpleValue],sym: phantm.symbols.FunctionSymbol,pos: phantm.util.Positional,obj: Option[phantm.types.TObjectRef],forceInline: Boolean): phantm.types.Type
3453 ===> phantm.cfg.Trees.TempID.unapply(x$0: phantm.cfg.Trees.TempID): Option[String]
2078 ===> phantm.ast.Trees.BooleanXor.productPrefix: String
4396 ===> phantm.phases.ASTIntegrityChecks.toString(): String
4942 ===> phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment
447 ===> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
5793 ===> phantm.util.Reporter.Error.readResolve(): Object
33 ===> phantm.Settings.inlineMode: phantm.InlineMode
4096 ===> phantm.cfg.Trees.LEQ.toString(): String
458 ===> phantm.ast.Trees.Program.toString(): String
3484 ===> phantm.cfg.Trees.VariableVar.apply(v: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableVar
1124 ===> phantm.ast.Trees.FunctionDecl.productArity: Int
4931 ===> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
625 ===> phantm.ast.Trees.THObject.unapply(x$0: phantm.ast.Trees.THObject): Option[phantm.ast.Trees.ClassRef]
50 ===> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
5685 ===> phantm.util.GlobalAnalysisResults.summary: Map[phantm.symbols.FunctionSymbol,Int]
5259 ===> phantm.types.ObjectStore.productElement(x$1: Int): Any
4105 ===> phantm.cfg.Trees.GEQ.toString(): String
918 ===> phantm.ast.Trees.StaticMethodRef.readResolve(): Object
4745 ===> phantm.phases.TypeAnalyzingPhase.<init>(): phantm.phases.TypeAnalyzingPhase.type
5705 ===> phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression
5183 ===> phantm.types.ObjectIdUse.<init>(): phantm.types.ObjectIdUse.type
3840 ===> phantm.cfg.Trees.Ternary.elze: phantm.cfg.Trees.SimpleValue
4349 ===> phantm.phases.APIExportingPhase.description: String
1336 ===> phantm.ast.Trees.Alternatives.blocks: List[phantm.ast.Trees.Expression]
4903 ===> phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol]
2090 ===> phantm.ast.Trees.BooleanXor.readResolve(): Object
1340 ===> phantm.ast.Trees.Alternatives.productPrefix: String
1665 ===> phantm.ast.Trees.SimpleVariable.apply(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
1979 ===> phantm.ast.Trees.PreInc.toString(): String
4441 ===> phantm.phases.CFGGenerator.apply(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.CFGGenerator
3553 ===> phantm.cfg.Trees.VariableClassProperty.toString(): String
4925 ===> phantm.symbols.ArgumentSymbol.<init>(name: String,byref: Boolean,optional: Boolean): phantm.symbols.ArgumentSymbol
3464 ===> phantm.cfg.Trees.ClassProperty.hashCode(): Int
1459 ===> phantm.ast.Trees.Switch.productArity: Int
327 ===> phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
5823 ===> phantm.util.Reporter.error(msg: String): Boolean
1609 ===> phantm.ast.Trees.Foreach.asbyref: Boolean
1940 ===> phantm.ast.Trees.Concat.toString(): String
5933 ===> phantm.util.UFloat.productElement(x$1: Int): Any
5634 ===> phantm.util.ConstantsResolver.toString(): String
1797 ===> phantm.ast.Trees.ExpandArray.<init>(vars: List[Option[phantm.ast.Trees.Variable]],expr: phantm.ast.Trees.Expression): phantm.ast.Trees.ExpandArray
2181 ===> phantm.ast.Trees.ShiftRight.<init>(): phantm.ast.Trees.ShiftRight.type
1372 ===> phantm.ast.Trees.If.elze: Option[phantm.ast.Trees.Statement]
1281 ===> phantm.ast.Trees.Catch.toString(): String
1046 ===> phantm.ast.Trees.OAIdentifier.productElement(x$1: Int): Any
1027 ===> phantm.ast.Trees.CallArg.productElement(x$1: Int): Any
4918 ===> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
5045 ===> phantm.types.TypeTransferFunction.apply(node: phantm.cfg.Trees.Statement,envInit: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
3286 ===> phantm.cfg.Trees.AssumeNotProperty.canEqual(x$1: Any): Boolean
1148 ===> phantm.ast.Trees.NamespaceStart.<init>(): phantm.ast.Trees.NamespaceStart.type
3242 ===> phantm.cfg.Trees.IsScalar.productArity: Int
2356 ===> phantm.ast.Trees.Silence.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Silence
3776 ===> phantm.cfg.Trees.ArrayCurKey.productPrefix: String
5632 ===> phantm.util.ConstantsResolver.equals(x$1: Any): Boolean
1135 ===> phantm.ast.Trees.FunctionDecl.readResolve(): Object
2862 ===> phantm.ast.Trees.MCMethod.hashCode(): Int
5667 ===> phantm.util.DumpCollector.unapply(x$0: phantm.util.DumpCollector): Option[(String, phantm.phases.PhasesContext)]
5993 ===> phantm.util.UFalse.hashCode(): Int
4557 ===> phantm.phases.PhaseException.ph: phantm.phases.Phase
3987 ===> phantm.cfg.Trees.CONCAT.<init>(): phantm.cfg.Trees.CONCAT.type
5451 ===> phantm.types.TBoolean.<init>(): phantm.types.TBoolean.type
3365 ===> phantm.cfg.Trees.FuncRef.canEqual(x$1: Any): Boolean
4222 ===> phantm.cfg.Trees.stringRepr(tree: phantm.cfg.Trees.Tree): String
3448 ===> phantm.cfg.Trees.TempID.hashCode(): Int
5668 ===> phantm.util.DumpCollector.readResolve(): Object
1151 ===> phantm.ast.Trees.NamespaceStart.unapply(x$0: phantm.ast.Trees.NamespaceStart): Option[phantm.ast.Trees.NSIdentifier]
1355 ===> phantm.ast.Trees.Block.copy(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
4471 ===> phantm.phases.CallGraphGeneration.CallGraph.entry: phantm.cfg.VertexImp[Int]
4765 ===> phantm.phases.TypeFlowAnalysis.productElement(x$1: Int): Any
4157 ===> phantm.cfg.Trees.NOTIDENTICAL.readResolve(): Object
3586 ===> phantm.cfg.Trees.PHPLong.unapply(x$0: phantm.cfg.Trees.PHPLong): Option[Long]
5882 ===> phantm.util.UObject.productElement(x$1: Int): Any
1285 ===> phantm.ast.Trees.Throw.ex: phantm.ast.Trees.Expression
3658 ===> phantm.cfg.Trees.PHPFalse.toString(): String
1279 ===> phantm.ast.Trees.Catch.equals(x$1: Any): Boolean
1741 ===> phantm.ast.Trees.DynamicObjectProperty.property: phantm.ast.Trees.Expression
3751 ===> phantm.cfg.Trees.ArrayNext.<init>(): phantm.cfg.Trees.ArrayNext.type
1805 ===> phantm.ast.Trees.ExpandArray.canEqual(x$1: Any): Boolean
5218 ===> phantm.types.ObjectIdDump.canEqual(x$1: Any): Boolean
5142 ===> phantm.types.TClass.<init>(cs: phantm.symbols.ClassSymbol): phantm.types.TClass
4671 ===> phantm.phases.PureStatementsChecks.apply(node: phantm.ast.Trees.Tree,ctx: phantm.phases.PhasesContext): phantm.phases.PureStatementsChecks
2929 ===> phantm.cfg.LabeledDirectedGraph.$minus$eq(from: LabeledDirectedGraph.this.Vertex,lab: LabelType,to: LabeledDirectedGraph.this.Vertex): Unit
1943 ===> phantm.ast.Trees.Concat.toString(): String
4584 ===> phantm.phases.PhaseSeq.canEqual(x$1: Any): Boolean
3210 ===> phantm.cfg.Trees.IsBool.hashCode(): Int
640 ===> phantm.ast.Trees.MFPublic.productElement(x$1: Int): Any
1075 ===> phantm.ast.Trees.OAArray.indexes: List[Option[phantm.ast.Trees.Expression]]
4009 ===> phantm.cfg.Trees.INSTANCEOF.productElement(x$1: Int): Any
5631 ===> phantm.util.ConstantsResolver.toString(): String
4381 ===> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree): phantm.phases.ASTIntegrityChecks
3999 ===> phantm.cfg.Trees.MOD.productArity: Int
4976 ===> phantm.types.TypeFlowAnalyzer.productPrefix: String
4541 ===> phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
4099 ===> phantm.cfg.Trees.LEQ.productElement(x$1: Int): Any
5551 ===> phantm.types.TBottom.productPrefix: String
5526 ===> phantm.types.TResource.hashCode(): Int
5617 ===> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
1011 ===> phantm.ast.Trees.Label.hashCode(): Int
1001 ===> phantm.ast.Trees.InitVariable.readResolve(): Object
3614 ===> phantm.cfg.Trees.PHPString.equals(x$1: Any): Boolean
2420 ===> phantm.ast.Trees.Execute.apply(value: String): phantm.ast.Trees.Execute
2898 ===> phantm.cfg.ASTToCFG.Emit.statementBetween(from: Vertex,stat: phantm.cfg.Trees.Statement,to: Vertex): Unit
4368 ===> phantm.phases.CheckContext.productIterator: Iterator[Any]
3766 ===> phantm.cfg.Trees.ArrayCurElement.equals(x$1: Any): Boolean
5200 ===> phantm.types.ObjectIdTmp.productIterator: Iterator[Any]
3122 ===> phantm.cfg.Trees.AssignBinary.readResolve(): Object
4872 ===> phantm.symbols.LookupResult.productArity: Int
4353 ===> phantm.phases.APIImportationPhase.description: String
1271 ===> phantm.ast.Trees.Catch.copy$default$3: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
3841 ===> phantm.cfg.Trees.Ternary.<init>(cond: phantm.cfg.Trees.SimpleValue,then: phantm.cfg.Trees.SimpleValue,elze: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Ternary
4163 ===> phantm.cfg.Trees.BOOLEANNOT.productElement(x$1: Int): Any
4655 ===> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
1613 ===> phantm.ast.Trees.Foreach.<init>(what: phantm.ast.Trees.Expression,as: phantm.ast.Trees.Variable,asbyref: Boolean,key: Option[phantm.ast.Trees.Variable],keybyref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Foreach
4301 ===> phantm.helpers.CFGGraphs.productElement(x$1: Int): Any
4240 ===> phantm.dataflow.StronglyConnectedComponents.Node.vindex: Int
4283 ===> phantm.helpers.CheckContext.toString(): String
3599 ===> phantm.cfg.Trees.PHPFloat.<init>(): phantm.cfg.Trees.PHPFloat.type
3432 ===> phantm.cfg.Trees.ClassRefUnknown.hashCode(): Int
5164 ===> phantm.types.TFunction.ret: phantm.types.Type
1341 ===> phantm.ast.Trees.Alternatives.productArity: Int
5837 ===> phantm.util.ErrorException.copy$default$3: Int @scala.annotation.unchecked.uncheckedVariance
3011 ===> phantm.cfg.LabeledDirectedGraphImp.Group.followGraph(vinit: LabeledDirectedGraphImp.this.Vertex): Unit
3952 ===> phantm.cfg.Trees.PLUS.toString(): String
2586 ===> phantm.ast.Trees.ClassConstant.unapply(x$0: phantm.ast.Trees.ClassConstant): Option[(phantm.ast.Trees.ClassRef, phantm.ast.Trees.Identifier)]
4967 ===> phantm.types.TypeFlowAnalyzer.notice(msg: String,pos: phantm.util.Positional): Unit
653 ===> phantm.ast.Trees.MFProtected.toString(): String
2992 ===> phantm.cfg.LabeledDirectedGraphImp.escape(s: String): String
2541 ===> phantm.ast.Trees.Require.productElement(x$1: Int): Any
4525 ===> phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol]
3994 ===> phantm.cfg.Trees.CONCAT.hashCode(): Int
256 ===> phantm.annotations.SourceAnnotations.Parser.Entry.equals(x$1: Any): Boolean
4280 ===> phantm.helpers.CheckContext.toString(): String
3555 ===> phantm.cfg.Trees.VariableClassProperty.unapply(x$0: phantm.cfg.Trees.VariableClassProperty): Option[(phantm.cfg.Trees.ClassRef, phantm.cfg.Trees.SimpleValue)]
3127 ===> phantm.cfg.Trees.Error.productArity: Int
1732 ===> phantm.ast.Trees.ObjectProperty.hashCode(): Int
5935 ===> phantm.util.UFloat.canEqual(x$1: Any): Boolean
2408 ===> phantm.ast.Trees.Execute.copy(value: String): phantm.ast.Trees.Execute
4183 ===> phantm.cfg.Trees.PREINC.canEqual(x$1: Any): Boolean
85 ===> phantm.InlineLeaves.toString(): String
3081 ===> phantm.cfg.Trees.AssignUnary.variable: phantm.cfg.Trees.Variable
1452 ===> phantm.ast.Trees.Switch.expr: phantm.ast.Trees.Expression
175 ===> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
3693 ===> phantm.cfg.Trees.PHPEmptyArray.productArity: Int
2776 ===> phantm.ast.Trees.PHPNull.toString(): String
321 ===> phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
3205 ===> phantm.cfg.Trees.IsBool.productPrefix: String
3197 ===> phantm.cfg.Trees.IsFloat.productArity: Int
382 ===> phantm.ast.STToAST.ctor_arguments(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
1483 ===> phantm.ast.Trees.Break.<init>(): phantm.ast.Trees.Break.type
2134 ===> phantm.ast.Trees.BitwiseXor.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
330 ===> phantm.ast.STToAST.method_body(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement]
3176 ===> phantm.cfg.Trees.Empty.readResolve(): Object
2138 ===> phantm.ast.Trees.BitwiseXor.productIterator: Iterator[Any]
2214 ===> phantm.ast.Trees.BitwiseNot.equals(x$1: Any): Boolean
2345 ===> phantm.ast.Trees.Cast.productIterator: Iterator[Any]
2414 ===> phantm.ast.Trees.Execute.canEqual(x$1: Any): Boolean
1705 ===> phantm.ast.Trees.NextArrayEntry.<init>(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry
4418 ===> phantm.phases.CFGGenerationPhase.name: String
1244 ===> phantm.ast.Trees.InterfaceDecl.readResolve(): Object
4778 ===> phantm.symbols.Symbolic.opt_sym_$eq(x$1: Option[phantm.symbols.Symbol]): Unit
912 ===> phantm.ast.Trees.StaticMethodRef.toString(): String
5431 ===> phantm.types.TFloat.toString(): String
3726 ===> phantm.cfg.Trees.Cast.copy$default$1: phantm.ast.Trees.CastType @scala.annotation.unchecked.uncheckedVariance
3306 ===> phantm.cfg.Trees.Print.toString(): String
786 ===> phantm.ast.Trees.DynamicClassRef.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3310 ===> phantm.cfg.Trees.Return.rhs: phantm.cfg.Trees.SimpleValue
1815 ===> phantm.ast.Trees.Assign.value: phantm.ast.Trees.Expression
4954 ===> phantm.types.TypeFlowAnalyzer.cfg: phantm.cfg.ControlFlowGraph
204 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.<init>(): phantm.annotations.SourceAnnotations.Parser.AnyEntry.type
4738 ===> phantm.phases.CollectSymbols.toString(): String
4708 ===> phantm.phases.CollectSymbols.ifaceCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.InterfaceDecl]
3397 ===> phantm.cfg.Trees.ClassRefFixed.productPrefix: String
2050 ===> phantm.ast.Trees.BooleanAnd.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd
4119 ===> phantm.cfg.Trees.GT.canEqual(x$1: Any): Boolean
3833 ===> phantm.cfg.Trees.ClassConstant.<init>(): phantm.cfg.Trees.ClassConstant.type
3822 ===> phantm.cfg.Trees.ClassConstant.<init>(cl: phantm.cfg.Trees.ClassRef,name: phantm.ast.Trees.Identifier): phantm.cfg.Trees.ClassConstant
2844 ===> phantm.ast.Trees.MCFunction.productElement(x$1: Int): Any
5909 ===> phantm.util.UString.readResolve(): Object
194 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.copy(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyEntry
2615 ===> phantm.ast.Trees.FunctionCall.productElement(x$1: Int): Any
1300 ===> phantm.ast.Trees.Throw.unapply(x$0: phantm.ast.Trees.Throw): Option[phantm.ast.Trees.Expression]
4556 ===> phantm.phases.Phase.followedBy(phase: phantm.phases.Phase): phantm.phases.PhaseSeq
1132 ===> phantm.ast.Trees.FunctionDecl.toString(): String
2785 ===> phantm.ast.Trees.MCFile.productIterator: Iterator[Any]
953 ===> phantm.ast.Trees.CastArray.hashCode(): Int
3907 ===> phantm.cfg.Trees.MethodCall.productIterator: Iterator[Any]
1956 ===> phantm.ast.Trees.Mod.productIterator: Iterator[Any]
3549 ===> phantm.cfg.Trees.VariableClassProperty.canEqual(x$1: Any): Boolean
232 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productElement(x$1: Int): Any
3747 ===> phantm.cfg.Trees.ArrayNext.productIterator: Iterator[Any]
2576 ===> phantm.ast.Trees.ClassConstant.productArity: Int
5893 ===> phantm.util.UString.str: String
5280 ===> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
644 ===> phantm.ast.Trees.MFPublic.toString(): String
4979 ===> phantm.types.TypeFlowAnalyzer.productIterator: Iterator[Any]
1886 ===> phantm.ast.Trees.Minus.toString(): String
2062 ===> phantm.ast.Trees.BooleanOr.productIterator: Iterator[Any]
4500 ===> phantm.phases.CallGraphGeneration.apply(node: phantm.ast.Trees.Tree,context: phantm.phases.CGContext,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration
3121 ===> phantm.cfg.Trees.AssignBinary.unapply(x$0: phantm.cfg.Trees.AssignBinary): Option[(phantm.cfg.Trees.Variable, phantm.cfg.Trees.SimpleValue, phantm.cfg.Trees.BinaryOperator, phantm.cfg.Trees.SimpleValue)]
2468 ===> phantm.ast.Trees.Closure.productArity: Int
5879 ===> phantm.util.UObject.copy$default$3: Map[phantm.util.UValue,phantm.util.UValue] @scala.annotation.unchecked.uncheckedVariance
5511 ===> phantm.types.TAny.productPrefix: String
3561 ===> phantm.cfg.Trees.NoVar.productElement(x$1: Int): Any
1867 ===> phantm.ast.Trees.Plus.toString(): String
3309 ===> phantm.cfg.Trees.Print.readResolve(): Object
726 ===> phantm.ast.Trees.Identifier.copy(value: String): phantm.ast.Trees.Identifier
2658 ===> phantm.ast.Trees.StaticMethodCall.productIterator: Iterator[Any]
790 ===> phantm.ast.Trees.DynamicClassRef.productIterator: Iterator[Any]
705 ===> phantm.ast.Trees.NSCurrent.value: String
1575 ===> phantm.ast.Trees.Html.copy(content: String): phantm.ast.Trees.Html
5651 ===> phantm.util.DumpCollector.constants: phantm.util.Unserializer
2638 ===> phantm.ast.Trees.MethodCall.canEqual(x$1: Any): Boolean
5671 ===> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext): Option[phantm.ast.Trees.Scalar]
5290 ===> phantm.types.TRealObject.singleton: Boolean
2137 ===> phantm.ast.Trees.BitwiseXor.productElement(x$1: Int): Any
4307 ===> phantm.helpers.CFGGraphs.<init>(): phantm.helpers.CFGGraphs.type
1814 ===> phantm.ast.Trees.Assign.vari: phantm.ast.Trees.Variable
2384 ===> phantm.ast.Trees.Exit.<init>(): phantm.ast.Trees.Exit.type
3050 ===> phantm.cfg.Trees.Unset.copy$default$1: phantm.cfg.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
3805 ===> phantm.cfg.Trees.Constant.<init>(cs: phantm.symbols.ConstantSymbol): phantm.cfg.Trees.Constant
246 ===> phantm.annotations.SourceAnnotations.Parser.Entry.copy(s: String,t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.Entry
2246 ===> phantm.ast.Trees.Identical.productArity: Int
5773 ===> phantm.util.Reporter.Error.tags: Set[phantm.util.ErrorTag]
4643 ===> phantm.phases.PhasesRunner.reporter: phantm.util.Reporter
5502 ===> phantm.types.TStringLit.toString(): String
57 ===> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
2743 ===> phantm.ast.Trees.PHPFloat.<init>(): phantm.ast.Trees.PHPFloat.type
1901 ===> phantm.ast.Trees.Div.hashCode(): Int
3897 ===> phantm.cfg.Trees.MethodCall.id: phantm.ast.Trees.Identifier
2024 ===> phantm.ast.Trees.PostDec.productIterator: Iterator[Any]
3740 ===> phantm.cfg.Trees.ArrayNext.ar: phantm.cfg.Trees.SimpleValue
5832 ===> phantm.util.ErrorException.ntn: Int
4997 ===> phantm.types.TypeHelpers.<init>(): phantm.types.TypeHelpers.type
1533 ===> phantm.ast.Trees.Global.equals(x$1: Any): Boolean
4595 ===> phantm.phases.PhasesContext.files: List[String]
777 ===> phantm.ast.Trees.VarClassRef.equals(x$1: Any): Boolean
5189 ===> phantm.types.ObjectIdUse.canEqual(x$1: Any): Boolean
983 ===> phantm.ast.Trees.InitVariable.v: phantm.ast.Trees.Variable
3046 ===> phantm.cfg.Trees.Statement.uniqueID_$eq(x$1: Int): Unit
3410 ===> phantm.cfg.Trees.ClassRefCalledClass.toString(): String
3103 ===> phantm.cfg.Trees.AssignBinary.binOp: phantm.cfg.Trees.BinaryOperator
3071 ===> phantm.cfg.Trees.Assign.productElement(x$1: Int): Any
2653 ===> phantm.ast.Trees.StaticMethodCall.copy$default$2: phantm.ast.Trees.MethodRef @scala.annotation.unchecked.uncheckedVariance
3228 ===> phantm.cfg.Trees.IsString.hashCode(): Int
43 ===> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
3933 ===> phantm.cfg.Trees.New.readResolve(): Object
5851 ===> phantm.util.UnserializeException.<init>(msg: String): phantm.util.UnserializeException
855 ===> phantm.ast.Trees.DynamicFunctionRef.productArity: Int
400 ===> phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
2646 ===> phantm.ast.Trees.MethodCall.readResolve(): Object
4505 ===> phantm.phases.DumpsCollectionPhase.description: String
1839 ===> phantm.ast.Trees.Clone.productPrefix: String
5196 ===> phantm.types.ObjectIdTmp.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
4061 ===> phantm.cfg.Trees.BITWISEXOR.productPrefix: String
3110 ===> phantm.cfg.Trees.AssignBinary.copy$default$4: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
497 ===> phantm.ast.Trees.MethodDecl.copy$default$3: List[phantm.ast.Trees.ArgumentDecl] @scala.annotation.unchecked.uncheckedVariance
2713 ===> phantm.ast.Trees.PHPFalse.readResolve(): Object
2482 ===> phantm.ast.Trees.Isset.copy(vs: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Isset
3798 ===> phantm.cfg.Trees.ArrayCurIsValid.equals(x$1: Any): Boolean
3389 ===> phantm.cfg.Trees.ClassRefDynamic.apply(sv: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ClassRefDynamic
300 ===> phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
5711 ===> phantm.util.IncludeResolver.copy(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext): phantm.util.IncludeResolver
5871 ===> phantm.util.UObject.i: Int
1191 ===> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
2382 ===> phantm.ast.Trees.Exit.toString(): String
309 ===> phantm.ast.ASTTraversal.<init>(root: phantm.ast.Trees.Tree,initCtx: UserDataType): phantm.ast.ASTTraversal[UserDataType]
2054 ===> phantm.ast.Trees.BooleanOr.rhs: phantm.ast.Trees.Expression
2327 ===> phantm.ast.Trees.Ternary.canEqual(x$1: Any): Boolean
3400 ===> phantm.cfg.Trees.ClassRefFixed.productIterator: Iterator[Any]
1213 ===> phantm.ast.Trees.ClassDecl.canEqual(x$1: Any): Boolean
2973 ===> phantm.cfg.EdgeImp.readResolve(): Object
5360 ===> phantm.types.TArray.<init>(): phantm.types.TArray
604 ===> phantm.ast.Trees.THArray.productElement(x$1: Int): Any
617 ===> phantm.ast.Trees.THObject.productIterator: Iterator[Any]
3915 ===> phantm.cfg.Trees.MethodCall.readResolve(): Object
5100 ===> phantm.types.TypeTransferFunction.toString(): String
788 ===> phantm.ast.Trees.DynamicClassRef.productArity: Int
376 ===> phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl
4141 ===> phantm.cfg.Trees.NOTEQUALS.toString(): String
1790 ===> phantm.ast.Trees.ListVar.<init>(): phantm.ast.Trees.ListVar.type
5371 ===> phantm.types.TArray.setAnyString(typ: phantm.types.Type): phantm.types.TArray
4539 ===> phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
4340 ===> phantm.parser.Parser.<init>(filename: String): phantm.parser.Parser
2174 ===> phantm.ast.Trees.ShiftRight.productArity: Int
1435 ===> phantm.ast.Trees.For.copy$default$1: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
2796 ===> phantm.ast.Trees.MCLine.copy(): phantm.ast.Trees.MCLine
5044 ===> phantm.types.TypeTransferFunction.uninitToNull(t: phantm.types.Type): phantm.types.Type
1508 ===> phantm.ast.Trees.Return.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1442 ===> phantm.ast.Trees.For.productIterator: Iterator[Any]
1682 ===> phantm.ast.Trees.VariableVariable.apply(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
502 ===> phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any
5698 ===> phantm.util.IncludeResolver.apply(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext): phantm.util.IncludeResolver
5579 ===> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
5653 ===> phantm.util.DumpCollector.copy(path: String,ctx: phantm.phases.PhasesContext): phantm.util.DumpCollector
159 ===> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
4845 ===> phantm.symbols.MVProtected.<init>(): phantm.symbols.MVProtected.type
1735 ===> phantm.ast.Trees.ObjectProperty.<init>(): phantm.ast.Trees.ObjectProperty.type
2528 ===> phantm.ast.Trees.Include.<init>(): phantm.ast.Trees.Include.type
5110 ===> phantm.types.TypeTransferFunction.$lessinit$greater$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
4101 ===> phantm.cfg.Trees.LEQ.canEqual(x$1: Any): Boolean
17 ===> phantm.Settings.importAPI: Boolean
2303 ===> phantm.ast.Trees.InstanceOf.productArity: Int
526 ===> phantm.ast.Trees.PropertyDecl.hashCode(): Int
570 ===> phantm.ast.Trees.ConstantDecl.unapply(x$0: phantm.ast.Trees.ConstantDecl): Option[(phantm.ast.Trees.NSIdentifier, phantm.ast.Trees.Expression)]
4159 ===> phantm.cfg.Trees.BOOLEANNOT.<init>(): phantm.cfg.Trees.BOOLEANNOT.type
3091 ===> phantm.cfg.Trees.AssignUnary.productElement(x$1: Int): Any
5395 ===> phantm.types.TInt.<init>(): phantm.types.TInt.type
158 ===> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
1990 ===> phantm.ast.Trees.PostInc.productIterator: Iterator[Any]
4075 ===> phantm.cfg.Trees.SHIFTLEFT.hashCode(): Int
4852 ===> phantm.symbols.PropertySymbol.cs: phantm.symbols.ClassSymbol
181 ===> phantm.annotations.AnnotationsStore.getReturnType(fs: phantm.symbols.FunctionSymbol): phantm.types.Type
878 ===> phantm.ast.Trees.StaticFunctionRef.equals(x$1: Any): Boolean
2708 ===> phantm.ast.Trees.PHPFalse.equals(x$1: Any): Boolean
3618 ===> phantm.cfg.Trees.PHPString.unapply(x$0: phantm.cfg.Trees.PHPString): Option[String]
1552 ===> phantm.ast.Trees.Static.toString(): String
1884 ===> phantm.ast.Trees.Minus.equals(x$1: Any): Boolean
4520 ===> phantm.phases.MethodGraphGeneration.MethodGraph.vToSym: scala.collection.immutable.Map[phantm.cfg.VertexImp[String],phantm.symbols.MethodSymbol]
13 ===> phantm.Main.usage: Unit
1900 ===> phantm.ast.Trees.Div.canEqual(x$1: Any): Boolean
3839 ===> phantm.cfg.Trees.Ternary.then: phantm.cfg.Trees.SimpleValue
146 ===> phantm.Settings.$lessinit$greater$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
880 ===> phantm.ast.Trees.StaticFunctionRef.toString(): String
3067 ===> phantm.cfg.Trees.Assign.copy$default$1: phantm.cfg.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
4704 ===> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
3577 ===> phantm.cfg.Trees.PHPLong.productArity: Int
1394 ===> phantm.ast.Trees.While.copy(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement): phantm.ast.Trees.While
1233 ===> phantm.ast.Trees.InterfaceDecl.productArity: Int
4498 ===> phantm.phases.CallGraphGeneration.<init>(): phantm.phases.CallGraphGeneration.type
5948 ===> phantm.util.UObjRef.productPrefix: String
3970 ===> phantm.cfg.Trees.MULT.toString(): String
2640 ===> phantm.ast.Trees.MethodCall.toString(): String
4882 ===> phantm.symbols.LookupResult.unapply[T](x$0: phantm.symbols.LookupResult[T]): Option[(Option[T], Option[phantm.symbols.MemberVisibility], Boolean)]
3997 ===> phantm.cfg.Trees.MOD.toString(): String
668 ===> phantm.ast.Trees.MFFinal.productIterator: Iterator[Any]
2702 ===> phantm.ast.Trees.PHPFalse.productArity: Int
386 ===> phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess]
1619 ===> phantm.ast.Trees.Foreach.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
5210 ===> phantm.types.ObjectIdDump.<init>(offset: Int): phantm.types.ObjectIdDump
42 ===> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
2514 ===> phantm.ast.Trees.Include.path: phantm.ast.Trees.Expression
4005 ===> phantm.cfg.Trees.INSTANCEOF.<init>(): phantm.cfg.Trees.INSTANCEOF.type
4772 ===> phantm.phases.TypeFlowAnalysis.toString(): String
1728 ===> phantm.ast.Trees.ObjectProperty.productArity: Int
2515 ===> phantm.ast.Trees.Include.once: Boolean
1400 ===> phantm.ast.Trees.While.productIterator: Iterator[Any]
2617 ===> phantm.ast.Trees.FunctionCall.canEqual(x$1: Any): Boolean
1640 ===> phantm.ast.Trees.Void.canEqual(x$1: Any): Boolean
5312 ===> phantm.types.TRealObject.toString(): String
4581 ===> phantm.phases.PhaseSeq.productArity: Int
6026 ===> phantm.util.Unserializer.toScalarMap: scala.collection.immutable.Map[String,phantm.ast.Trees.Scalar]
5334 ===> phantm.types.StringKey.apply(v: String): phantm.types.StringKey
5331 ===> phantm.types.StringKey.equals(x$1: Any): Boolean
4815 ===> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
551 ===> phantm.ast.Trees.ClassConstantDecl.unapply(x$0: phantm.ast.Trees.ClassConstantDecl): Option[(phantm.ast.Trees.Identifier, phantm.ast.Trees.Expression)]
1816 ===> phantm.ast.Trees.Assign.byref: Boolean
4114 ===> phantm.cfg.Trees.GT.toString(): String
512 ===> phantm.ast.Trees.MethodDecl.readResolve(): Object
479 ===> phantm.ast.Trees.ArgumentDecl.canEqual(x$1: Any): Boolean
4332 ===> phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit
1411 ===> phantm.ast.Trees.DoWhile.cond: phantm.ast.Trees.Expression
2297 ===> phantm.ast.Trees.InstanceOf.rhs: phantm.ast.Trees.ClassRef
2328 ===> phantm.ast.Trees.Ternary.hashCode(): Int
235 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.hashCode(): Int
1497 ===> phantm.ast.Trees.Continue.hashCode(): Int
3685 ===> phantm.cfg.Trees.PHPThis.<init>(): phantm.cfg.Trees.PHPThis.type
1366 ===> phantm.ast.Trees.Block.toString(): String
2757 ===> phantm.ast.Trees.PHPString.hashCode(): Int
1845 ===> phantm.ast.Trees.Clone.toString(): String
3961 ===> phantm.cfg.Trees.MINUS.toString(): String
3895 ===> phantm.cfg.Trees.StaticMethodCall.readResolve(): Object
2112 ===> phantm.ast.Trees.BitwiseOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseOr
37 ===> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
1905 ===> phantm.ast.Trees.Div.toString(): String
5267 ===> phantm.types.ObjectStore.unapply(x$0: phantm.types.ObjectStore): Option[Map[phantm.types.ObjectId,phantm.types.TRealObject]]
5270 ===> phantm.types.TAnyObject.<init>(): phantm.types.TAnyObject.type
894 ===> phantm.ast.Trees.DynamicMethodRef.hashCode(): Int
79 ===> phantm.InlineLeaves.productPrefix: String
3153 ===> phantm.cfg.Trees.Assume.<init>(): phantm.cfg.Trees.Assume.type
3666 ===> phantm.cfg.Trees.PHPNull.productElement(x$1: Int): Any
3684 ===> phantm.cfg.Trees.PHPThis.equals(x$1: Any): Boolean
1410 ===> phantm.ast.Trees.DoWhile.body: phantm.ast.Trees.Statement
431 ===> phantm.ast.STToAST.copy$default$2: phantm.parser.ParseNode @scala.annotation.unchecked.uncheckedVariance
2655 ===> phantm.ast.Trees.StaticMethodCall.productPrefix: String
2562 ===> phantm.ast.Trees.Constant.toString(): String
2864 ===> phantm.ast.Trees.MCMethod.equals(x$1: Any): Boolean
5206 ===> phantm.types.ObjectIdTmp.apply(offset: Int): phantm.types.ObjectIdTmp
4758 ===> phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean
4524 ===> phantm.phases.MethodGraphGeneration.execute: Unit
273 ===> phantm.annotations.SourceAnnotations.Parser.importTypeDefs(comment: String): Unit
131 ===> phantm.Settings.apply$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
614 ===> phantm.ast.Trees.THObject.productPrefix: String
5869 ===> phantm.util.UArray.unapply(x$0: phantm.util.UArray): Option[Map[phantm.util.UValue,phantm.util.UValue]]
4447 ===> phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
2242 ===> phantm.ast.Trees.Identical.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Identical
3785 ===> phantm.cfg.Trees.ArrayCurKey.apply(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurKey
4926 ===> phantm.types.BaseTypeEnvironment.<init>(): phantm.types.BaseTypeEnvironment.type
3437 ===> phantm.cfg.Trees.ClassRefUnknown.unapply(x$0: phantm.cfg.Trees.ClassRefUnknown): Boolean
2061 ===> phantm.ast.Trees.BooleanOr.productElement(x$1: Int): Any
2219 ===> phantm.ast.Trees.BitwiseNot.readResolve(): Object
2689 ===> phantm.ast.Trees.PHPTrue.productIterator: Iterator[Any]
1068 ===> phantm.ast.Trees.OAExpression.equals(x$1: Any): Boolean
2883 ===> phantm.ast.Trees.MCNamespace.unapply(x$0: phantm.ast.Trees.MCNamespace): Boolean
5808 ===> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
5642 ===> phantm.util.DumpCollector.lineNr: Int
5063 ===> phantm.types.TypeTransferFunction.fixTmpObjects(t: phantm.types.Type,sv: phantm.cfg.Trees.SimpleValue): phantm.types.Type
4406 ===> phantm.phases.ASTCollector.afterDump_$eq(x$1: Boolean): Unit
1020 ===> phantm.ast.Trees.CallArg.forceref: Boolean
2896 ===> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
5085 ===> phantm.types.TypeTransferFunction.copy$default$2: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
3742 ===> phantm.cfg.Trees.ArrayNext.copy(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayNext
1501 ===> phantm.ast.Trees.Continue.toString(): String
2407 ===> phantm.ast.Trees.Execute.<init>(value: String): phantm.ast.Trees.Execute
4270 ===> phantm.helpers.CFGGraph.<init>(): phantm.helpers.CFGGraph
3765 ===> phantm.cfg.Trees.ArrayCurElement.hashCode(): Int
903 ===> phantm.ast.Trees.StaticMethodRef.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef
3436 ===> phantm.cfg.Trees.ClassRefUnknown.apply(): phantm.cfg.Trees.ClassRefUnknown
1643 ===> phantm.ast.Trees.Void.equals(x$1: Any): Boolean
5584 ===> phantm.util.API.Reader.APIPos.elem: scala.xml.Node
2786 ===> phantm.ast.Trees.MCFile.canEqual(x$1: Any): Boolean
5576 ===> phantm.types.TUnion.equals(t: Any): Boolean
4402 ===> phantm.phases.ASTPruningPhase.description: String
346 ===> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
141 ===> phantm.Settings.$lessinit$greater$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
1080 ===> phantm.ast.Trees.OAArray.productPrefix: String
5120 ===> phantm.types.RecProtection.objectDepthDepth_$eq(x$1: Int): Unit
901 ===> phantm.ast.Trees.DynamicMethodRef.readResolve(): Object
5010 ===> phantm.types.TypeLattice.join(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeLattice.Env, phantm.types.Type)
5707 ===> phantm.util.IncludeResolver.pathExists(p: String): Option[String]
4326 ===> phantm.helpers.Main.usage: Unit
3792 ===> phantm.cfg.Trees.ArrayCurIsValid.productPrefix: String
3600 ===> phantm.cfg.Trees.PHPFloat.toString(): String
2661 ===> phantm.ast.Trees.StaticMethodCall.toString(): String
2739 ===> phantm.ast.Trees.PHPFloat.canEqual(x$1: Any): Boolean
66 ===> phantm.Settings.toString(): String
152 ===> phantm.Settings.$lessinit$greater$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
4167 ===> phantm.cfg.Trees.BOOLEANNOT.readResolve(): Object
3973 ===> phantm.cfg.Trees.MULT.productElement(x$1: Int): Any
5374 ===> phantm.types.TArray.injectAnyInt(typ: phantm.types.Type): phantm.types.TArray
4736 ===> phantm.phases.CollectSymbols.canEqual(x$1: Any): Boolean
4892 ===> phantm.symbols.IfaceSymbol.lookupConstant(name: String): Option[phantm.symbols.IfaceConstantSymbol]
4668 ===> phantm.phases.PureStatementsChecks.equals(x$1: Any): Boolean
3302 ===> phantm.cfg.Trees.Print.canEqual(x$1: Any): Boolean
282 ===> phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit
467 ===> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
2014 ===> phantm.ast.Trees.PreDec.apply(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreDec
2557 ===> phantm.ast.Trees.Constant.productArity: Int
755 ===> phantm.ast.Trees.NSIdentifier.hashCode(): Int
1875 ===> phantm.ast.Trees.Minus.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
6022 ===> phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar
4908 ===> phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol]
305 ===> phantm.ast.ASTSimpleTraversal.visit(tr: phantm.ast.Trees.Tree): Boolean
779 ===> phantm.ast.Trees.VarClassRef.toString(): String
538 ===> phantm.ast.Trees.ClassConstantDecl.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
2077 ===> phantm.ast.Trees.BooleanXor.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2639 ===> phantm.ast.Trees.MethodCall.hashCode(): Int
2686 ===> phantm.ast.Trees.PHPTrue.productPrefix: String
2055 ===> phantm.ast.Trees.BooleanOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanOr
1198 ===> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
2147 ===> phantm.ast.Trees.BitwiseXor.readResolve(): Object
4959 ===> phantm.types.TypeFlowAnalyzer.baseEnvInit: phantm.types.TypeEnvironment
5298 ===> phantm.types.TRealObject.equals(o: Any): Boolean
5722 ===> phantm.util.JavaListIteratorWrapper.iter: java.util.Iterator[A]
2657 ===> phantm.ast.Trees.StaticMethodCall.productElement(x$1: Int): Any
3320 ===> phantm.cfg.Trees.Return.equals(x$1: Any): Boolean
4295 ===> phantm.helpers.CFGGraphs.execute: Unit
3096 ===> phantm.cfg.Trees.AssignUnary.<init>(): phantm.cfg.Trees.AssignUnary.type
380 ===> phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]]
852 ===> phantm.ast.Trees.DynamicFunctionRef.copy(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicFunctionRef
4801 ===> phantm.symbols.Scope.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
1889 ===> phantm.ast.Trees.Minus.readResolve(): Object
2729 ===> phantm.ast.Trees.PHPInteger.unapply(x$0: phantm.ast.Trees.PHPInteger): Option[Long]
296 ===> phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef
2808 ===> phantm.ast.Trees.MCLine.unapply(x$0: phantm.ast.Trees.MCLine): Boolean
3406 ===> phantm.cfg.Trees.ClassRefFixed.apply(cs: phantm.symbols.ClassSymbol): phantm.cfg.Trees.ClassRefFixed
1496 ===> phantm.ast.Trees.Continue.canEqual(x$1: Any): Boolean
5056 ===> phantm.types.TypeTransferFunction.constructObject(ocs: Option[phantm.symbols.ClassSymbol],params: List[phantm.cfg.Trees.SimpleValue],node: phantm.cfg.Trees.Statement): phantm.types.Type
4662 ===> phantm.phases.PureStatementsChecks.productArity: Int
4517 ===> phantm.phases.MethodGraphGeneration.MethodGraph.entry: phantm.cfg.VertexImp[String]
3816 ===> phantm.cfg.Trees.Constant.toString(): String
4924 ===> phantm.symbols.ArgumentSymbol.optional_$eq(x$1: Boolean): Unit
5219 ===> phantm.types.ObjectIdDump.hashCode(): Int
4074 ===> phantm.cfg.Trees.SHIFTLEFT.canEqual(x$1: Any): Boolean
1305 ===> phantm.ast.Trees.Goto.copy$default$1: phantm.ast.Trees.Label @scala.annotation.unchecked.uncheckedVariance
2036 ===> phantm.ast.Trees.BooleanAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd
3580 ===> phantm.cfg.Trees.PHPLong.canEqual(x$1: Any): Boolean
1081 ===> phantm.ast.Trees.OAArray.productArity: Int
5558 ===> phantm.types.TBottom.readResolve(): Object
3774 ===> phantm.cfg.Trees.ArrayCurKey.copy(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurKey
5317 ===> phantm.types.ArrayKey.vToString: String
4888 ===> phantm.symbols.IfaceSymbol.constants: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceConstantSymbol]
2221 ===> phantm.ast.Trees.Equal.rhs: phantm.ast.Trees.Expression
3556 ===> phantm.cfg.Trees.VariableClassProperty.readResolve(): Object
882 ===> phantm.ast.Trees.StaticFunctionRef.unapply(x$0: phantm.ast.Trees.StaticFunctionRef): Option[phantm.ast.Trees.NSIdentifier]
3850 ===> phantm.cfg.Trees.Ternary.canEqual(x$1: Any): Boolean
3791 ===> phantm.cfg.Trees.ArrayCurIsValid.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
1809 ===> phantm.ast.Trees.ExpandArray.<init>(): phantm.ast.Trees.ExpandArray.type
2159 ===> phantm.ast.Trees.ShiftLeft.hashCode(): Int
61 ===> phantm.Settings.productArity: Int
765 ===> phantm.ast.Trees.ClassRef.<init>(): phantm.ast.Trees.ClassRef
5342 ===> phantm.types.IntKey.copy$default$1: Long @scala.annotation.unchecked.uncheckedVariance
5552 ===> phantm.types.TBottom.productArity: Int
1444 ===> phantm.ast.Trees.For.hashCode(): Int
652 ===> phantm.ast.Trees.MFProtected.hashCode(): Int
707 ===> phantm.ast.Trees.NSCurrent.productArity: Int
4820 ===> phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol
3130 ===> phantm.cfg.Trees.Error.canEqual(x$1: Any): Boolean
192 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.t: phantm.types.Type
5192 ===> phantm.types.ObjectIdTmp.offset: Int
5151 ===> phantm.types.TClass.canEqual(x$1: Any): Boolean
4675 ===> phantm.phases.SymbolsChecksPhase.name: String
4011 ===> phantm.cfg.Trees.INSTANCEOF.canEqual(x$1: Any): Boolean
2636 ===> phantm.ast.Trees.MethodCall.productElement(x$1: Int): Any
5387 ===> phantm.types.TNumeric.productPrefix: String
4460 ===> phantm.phases.CGContext.equals(x$1: Any): Boolean
3028 ===> phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit
2549 ===> phantm.ast.Trees.Require.apply(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Require
2871 ===> phantm.ast.Trees.MCNamespace.copy(): phantm.ast.Trees.MCNamespace
5175 ===> phantm.types.TFunction.hashCode(): Int
3869 ===> phantm.cfg.Trees.FunctionCall.hashCode(): Int
3462 ===> phantm.cfg.Trees.ClassProperty.productIterator: Iterator[Any]
302 ===> phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable
5216 ===> phantm.types.ObjectIdDump.productElement(x$1: Int): Any
2815 ===> phantm.ast.Trees.MCDir.productIterator: Iterator[Any]
2647 ===> phantm.ast.Trees.StaticMethodCall.cl: phantm.ast.Trees.ClassRef
550 ===> phantm.ast.Trees.ClassConstantDecl.apply(v: phantm.ast.Trees.Identifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ClassConstantDecl
976 ===> phantm.ast.Trees.CastUnset.productArity: Int
902 ===> phantm.ast.Trees.StaticMethodRef.id: phantm.ast.Trees.Identifier
4057 ===> phantm.cfg.Trees.BITWISEOR.hashCode(): Int
5859 ===> phantm.util.UArray.productArity: Int
2885 ===> phantm.cfg.ASTToCFG.<init>(): phantm.cfg.ASTToCFG.type
898 ===> phantm.ast.Trees.DynamicMethodRef.toString(): String
771 ===> phantm.ast.Trees.VarClassRef.productArity: Int
2473 ===> phantm.ast.Trees.Closure.toString(): String
3010 ===> phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer
1763 ===> phantm.ast.Trees.ClassProperty.copy$default$1: phantm.ast.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
4742 ===> phantm.phases.CollectSymbols.apply(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols
4428 ===> phantm.phases.CFGGenerator.copy(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.CFGGenerator
1791 ===> phantm.ast.Trees.ListVar.toString(): String
2506 ===> phantm.ast.Trees.Empty.hashCode(): Int
6008 ===> phantm.util.Unserializer.uidToOId: Map[Int,phantm.types.ObjectId]
5313 ===> phantm.types.TRealObject.toText(e: phantm.types.TypeEnvironment): String
5098 ===> phantm.types.TypeTransferFunction.equals(x$1: Any): Boolean
1598 ===> phantm.ast.Trees.Unset.canEqual(x$1: Any): Boolean
1681 ===> phantm.ast.Trees.VariableVariable.toString(): String
5012 ===> phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject)
2020 ===> phantm.ast.Trees.PostDec.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
3772 ===> phantm.cfg.Trees.ArrayCurKey.ar: phantm.cfg.Trees.SimpleValue
3128 ===> phantm.cfg.Trees.Error.productElement(x$1: Int): Any
5661 ===> phantm.util.DumpCollector.hashCode(): Int
5157 ===> phantm.types.TClass.unapply(x$0: phantm.types.TClass): Option[phantm.symbols.ClassSymbol]
5343 ===> phantm.types.IntKey.productPrefix: String
1489 ===> phantm.ast.Trees.Continue.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Continue
4187 ===> phantm.cfg.Trees.POSTINC.toString(): String
4886 ===> phantm.symbols.IfaceSymbol.<init>(name: String,parents: List[phantm.symbols.IfaceSymbol]): phantm.symbols.IfaceSymbol
4841 ===> phantm.symbols.MVPublic.stricterThan(o: phantm.symbols.MemberVisibility): Boolean
4555 ===> phantm.phases.Phase.toString(): String
5562 ===> phantm.types.TUninitialized.productArity: Int
3257 ===> phantm.cfg.Trees.IsResource.readResolve(): Object
2151 ===> phantm.ast.Trees.ShiftLeft.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftLeft
2543 ===> phantm.ast.Trees.Require.canEqual(x$1: Any): Boolean
2674 ===> phantm.ast.Trees.VoidExpr.canEqual(x$1: Any): Boolean
542 ===> phantm.ast.Trees.ClassConstantDecl.productElement(x$1: Int): Any
4195 ===> phantm.cfg.Trees.PREDEC.<init>(): phantm.cfg.Trees.PREDEC.type
3451 ===> phantm.cfg.Trees.TempID.toString(): String
377 ===> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
4544 ===> phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef
4794 ===> phantm.symbols.ID.c: Int
2485 ===> phantm.ast.Trees.Isset.productArity: Int
1579 ===> phantm.ast.Trees.Html.productElement(x$1: Int): Any
5769 ===> phantm.util.ENotice.readResolve(): Object
1657 ===> phantm.ast.Trees.SimpleVariable.productElement(x$1: Int): Any
5437 ===> phantm.types.TFloatLit.copy$default$1: Float @scala.annotation.unchecked.uncheckedVariance
2853 ===> phantm.ast.Trees.MCFunction.unapply(x$0: phantm.ast.Trees.MCFunction): Boolean
5119 ===> phantm.types.RecProtection.objectDepthDepth: Int
4593 ===> phantm.phases.PhaseSeq.$lessinit$greater$default$1: Seq[phantm.phases.Phase] @scala.annotation.unchecked.uncheckedVariance
1726 ===> phantm.ast.Trees.ObjectProperty.copy$default$2: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
5340 ===> phantm.types.IntKey.vToString: String
4285 ===> phantm.helpers.CheckContext.unapply(x$0: phantm.helpers.CheckContext): Boolean
2227 ===> phantm.ast.Trees.Equal.productArity: Int
4857 ===> phantm.symbols.IfaceMethodSymbol.is: phantm.symbols.IfaceSymbol
1058 ===> phantm.ast.Trees.OAExpression.<init>(exp: phantm.ast.Trees.Expression): phantm.ast.Trees.OAExpression
344 ===> phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable]
3552 ===> phantm.cfg.Trees.VariableClassProperty.<init>(): phantm.cfg.Trees.VariableClassProperty.type
4551 ===> phantm.phases.Phase.<init>(): phantm.phases.Phase
274 ===> phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type]
733 ===> phantm.ast.Trees.Identifier.hashCode(): Int
4080 ===> phantm.cfg.Trees.SHIFTRIGHT.productArity: Int
1919 ===> phantm.ast.Trees.Mult.canEqual(x$1: Any): Boolean
2963 ===> phantm.cfg.EdgeImp.productArity: Int
2388 ===> phantm.ast.Trees.Exit.readResolve(): Object
650 ===> phantm.ast.Trees.MFProtected.productIterator: Iterator[Any]
2058 ===> phantm.ast.Trees.BooleanOr.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3174 ===> phantm.cfg.Trees.Empty.hashCode(): Int
1995 ===> phantm.ast.Trees.PostInc.<init>(): phantm.ast.Trees.PostInc.type
240 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.apply(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyIntEntry
475 ===> phantm.ast.Trees.ArgumentDecl.productPrefix: String
503 ===> phantm.ast.Trees.MethodDecl.productIterator: Iterator[Any]
5684 ===> phantm.util.GlobalAnalysisResults.reachableFromMain_$eq(x$1: Map[phantm.symbols.FunctionSymbol,Set[phantm.symbols.FunctionSymbol]]): Unit
2190 ===> phantm.ast.Trees.BooleanNot.productPrefix: String
2606 ===> phantm.ast.Trees.New.readResolve(): Object
2878 ===> phantm.ast.Trees.MCNamespace.toString(): String
5973 ===> phantm.util.URealRef.<init>(): phantm.util.URealRef.type
5429 ===> phantm.types.TFloat.canEqual(x$1: Any): Boolean
3100 ===> phantm.cfg.Trees.AssignUnary.readResolve(): Object
4350 ===> phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
5527 ===> phantm.types.TResource.toString(): String
5027 ===> phantm.types.TypeLattice.readResolve(): Object
448 ===> phantm.ast.Trees.Program.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program
11 ===> phantm.Main.handleArgs(args: List[String]): Unit
5043 ===> phantm.types.TypeTransferFunction.removeUninit(removeInArrays: Boolean)(t: phantm.types.Type): phantm.types.Type
1861 ===> phantm.ast.Trees.Plus.productIterator: Iterator[Any]
4850 ===> phantm.symbols.MethodSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.MethodSymbol
4721 ===> phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit
4032 ===> phantm.cfg.Trees.BOOLEANXOR.<init>(): phantm.cfg.Trees.BOOLEANXOR.type
3358 ===> phantm.cfg.Trees.FuncRef.<init>(id: phantm.ast.Trees.NSIdentifier): phantm.cfg.Trees.FuncRef
259 ===> phantm.annotations.SourceAnnotations.Parser.Entry.apply(s: String,t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.Entry
5826 ===> phantm.util.Reporter.notice(msg: String): Boolean
2620 ===> phantm.ast.Trees.FunctionCall.equals(x$1: Any): Boolean
4658 ===> phantm.phases.PureStatementsChecks.copy(node: phantm.ast.Trees.Tree,ctx: phantm.phases.PhasesContext): phantm.phases.PureStatementsChecks
2609 ===> phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
3899 ===> phantm.cfg.Trees.MethodCall.<init>(receiver: phantm.cfg.Trees.SimpleValue,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.MethodCall
4621 ===> phantm.phases.PhasesContext.equals(x$1: Any): Boolean
4001 ===> phantm.cfg.Trees.MOD.productIterator: Iterator[Any]
1047 ===> phantm.ast.Trees.OAIdentifier.productIterator: Iterator[Any]
203 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.equals(x$1: Any): Boolean
3739 ===> phantm.cfg.Trees.Cast.readResolve(): Object
3095 ===> phantm.cfg.Trees.AssignUnary.equals(x$1: Any): Boolean
4561 ===> phantm.phases.PhaseException.copy$default$1: phantm.phases.Phase @scala.annotation.unchecked.uncheckedVariance
4180 ===> phantm.cfg.Trees.PREINC.productArity: Int
5472 ===> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
2228 ===> phantm.ast.Trees.Equal.productElement(x$1: Int): Any
687 ===> phantm.ast.Trees.NSNone.productArity: Int
1925 ===> phantm.ast.Trees.Mult.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mult
2267 ===> phantm.ast.Trees.Smaller.productIterator: Iterator[Any]
5610 ===> phantm.util.API.Writer.simpleTyp(name: String): String
402 ===> phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]])
4984 ===> phantm.types.TypeFlowAnalyzer.<init>(): phantm.types.TypeFlowAnalyzer.type
3330 ===> phantm.cfg.Trees.Skip.productIterator: Iterator[Any]
5357 ===> phantm.types.TArray.globalString: phantm.types.Type
5024 ===> phantm.types.TypeLattice.canEqual(x$1: Any): Boolean
3515 ===> phantm.cfg.Trees.NextArrayEntry.equals(x$1: Any): Boolean
3137 ===> phantm.cfg.Trees.Error.readResolve(): Object
5695 ===> phantm.util.IncludeResolver.inclsInstr_$eq(x$1: scala.collection.immutable.Map[(String, Int),Set[String]]): Unit
5757 ===> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
21 ===> phantm.Settings.displayIncludes: Boolean
1013 ===> phantm.ast.Trees.Label.equals(x$1: Any): Boolean
5968 ===> phantm.util.URealRef.productIterator: Iterator[Any]
3260 ===> phantm.cfg.Trees.AssumeProperty.<init>(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeProperty
139 ===> phantm.Settings.$lessinit$greater$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
1759 ===> phantm.ast.Trees.ClassProperty.cl: phantm.ast.Trees.ClassRef
1777 ===> phantm.ast.Trees.ClassProperty.readResolve(): Object
2125 ===> phantm.ast.Trees.BitwiseOr.toString(): String
3317 ===> phantm.cfg.Trees.Return.productIterator: Iterator[Any]
576 ===> phantm.ast.Trees.CFNormal.productElement(x$1: Int): Any
3801 ===> phantm.cfg.Trees.ArrayCurIsValid.apply(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurIsValid
5915 ===> phantm.util.UInt.productArity: Int
3361 ===> phantm.cfg.Trees.FuncRef.productPrefix: String
1553 ===> phantm.ast.Trees.Static.apply(vars: List[phantm.ast.Trees.InitVariable]): phantm.ast.Trees.Static
2838 ===> phantm.ast.Trees.MCClass.unapply(x$0: phantm.ast.Trees.MCClass): Boolean
3131 ===> phantm.cfg.Trees.Error.hashCode(): Int
5805 ===> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
3355 ===> phantm.cfg.Trees.Identifier.unapply(x$0: phantm.cfg.Trees.Identifier): Option[phantm.symbols.VariableSymbol]
4930 ===> phantm.types.BaseTypeEnvironment.toString(): String
123 ===> phantm.Settings.apply$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
2451 ===> phantm.ast.Trees.Eval.equals(x$1: Any): Boolean
3191 ===> phantm.cfg.Trees.IsInt.canEqual(x$1: Any): Boolean
5327 ===> phantm.types.StringKey.productElement(x$1: Int): Any
964 ===> phantm.ast.Trees.CastBool.readResolve(): Object
2630 ===> phantm.ast.Trees.MethodCall.copy(obj: phantm.ast.Trees.Expression,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.MethodCall
5064 ===> phantm.types.TypeTransferFunction.fixType(t: phantm.types.Type): phantm.types.Type
3594 ===> phantm.cfg.Trees.PHPFloat.productElement(x$1: Int): Any
3587 ===> phantm.cfg.Trees.PHPLong.readResolve(): Object
5983 ===> phantm.util.UNull.canEqual(x$1: Any): Boolean
128 ===> phantm.Settings.apply$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
2260 ===> phantm.ast.Trees.Smaller.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Smaller
3080 ===> phantm.cfg.Trees.Assign.readResolve(): Object
1044 ===> phantm.ast.Trees.OAIdentifier.productPrefix: String
4887 ===> phantm.symbols.IfaceSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceMethodSymbol]
3323 ===> phantm.cfg.Trees.Return.apply(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Return
5746 ===> phantm.util.Positional.col_$eq(x$1: Int): Unit
4004 ===> phantm.cfg.Trees.MOD.readResolve(): Object
3589 ===> phantm.cfg.Trees.PHPFloat.<init>(value: Float): phantm.cfg.Trees.PHPFloat
2496 ===> phantm.ast.Trees.Isset.readResolve(): Object
4614 ===> phantm.phases.PhasesContext.productPrefix: String
3371 ===> phantm.cfg.Trees.FuncRef.apply(id: phantm.ast.Trees.NSIdentifier): phantm.cfg.Trees.FuncRef
2957 ===> phantm.cfg.EdgeImp.toString(): String
233 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productIterator: Iterator[Any]
4730 ===> phantm.phases.CollectSymbols.copy$default$1: phantm.ast.Trees.Tree @scala.annotation.unchecked.uncheckedVariance
4113 ===> phantm.cfg.Trees.GT.<init>(): phantm.cfg.Trees.GT.type
2032 ===> phantm.ast.Trees.PostDec.unapply(x$0: phantm.ast.Trees.PostDec): Option[phantm.ast.Trees.Variable]
4152 ===> phantm.cfg.Trees.NOTIDENTICAL.productArity: Int
4274 ===> phantm.helpers.CheckContext.productPrefix: String
5782 ===> phantm.util.Reporter.Error.copy$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
5589 ===> phantm.util.API.Reader.APIPos.productPrefix: String
2649 ===> phantm.ast.Trees.StaticMethodCall.args: List[phantm.ast.Trees.CallArg]
5336 ===> phantm.types.StringKey.readResolve(): Object
3187 ===> phantm.cfg.Trees.IsInt.productPrefix: String
4050 ===> phantm.cfg.Trees.BITWISEOR.<init>(): phantm.cfg.Trees.BITWISEOR.type
3558 ===> phantm.cfg.Trees.NoVar.copy(): phantm.cfg.Trees.NoVar
1042 ===> phantm.ast.Trees.OAIdentifier.copy(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.OAIdentifier
2025 ===> phantm.ast.Trees.PostDec.canEqual(x$1: Any): Boolean
5503 ===> phantm.types.TStringLit.equals(x$1: Any): Boolean
5385 ===> phantm.types.TNumeric.<init>(): phantm.types.TNumeric.type
36 ===> phantm.Settings.<init>(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
3923 ===> phantm.cfg.Trees.New.productArity: Int
3163 ===> phantm.cfg.Trees.Isset.productIterator: Iterator[Any]
2306 ===> phantm.ast.Trees.InstanceOf.canEqual(x$1: Any): Boolean
2360 ===> phantm.ast.Trees.Silence.productArity: Int
365 ===> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
5127 ===> phantm.types.Type.toText: String
1275 ===> phantm.ast.Trees.Catch.productIterator: Iterator[Any]
2363 ===> phantm.ast.Trees.Silence.canEqual(x$1: Any): Boolean
1890 ===> phantm.ast.Trees.Div.lhs: phantm.ast.Trees.Expression
5825 ===> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
3567 ===> phantm.cfg.Trees.NoVar.toString(): String
2288 ===> phantm.ast.Trees.SmallerEqual.hashCode(): Int
2465 ===> phantm.ast.Trees.Closure.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
4063 ===> phantm.cfg.Trees.BITWISEXOR.productElement(x$1: Int): Any
925 ===> phantm.ast.Trees.CastInt.canEqual(x$1: Any): Boolean
824 ===> phantm.ast.Trees.CalledClass.hashCode(): Int
2988 ===> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(v: LabeledDirectedGraphImp.this.Vertex): Unit
2157 ===> phantm.ast.Trees.ShiftLeft.productIterator: Iterator[Any]
2849 ===> phantm.ast.Trees.MCFunction.equals(x$1: Any): Boolean
3904 ===> phantm.cfg.Trees.MethodCall.productPrefix: String
5979 ===> phantm.util.UNull.productPrefix: String
5350 ===> phantm.types.IntKey.<init>(): phantm.types.IntKey.type
1600 ===> phantm.ast.Trees.Unset.toString(): String
2520 ===> phantm.ast.Trees.Include.productPrefix: String
5444 ===> phantm.types.TFloatLit.toString(): String
4667 ===> phantm.phases.PureStatementsChecks.toString(): String
1295 ===> phantm.ast.Trees.Throw.toString(): String
5504 ===> phantm.types.TStringLit.<init>(): phantm.types.TStringLit.type
3756 ===> phantm.cfg.Trees.ArrayCurElement.ar: phantm.cfg.Trees.SimpleValue
1427 ===> phantm.ast.Trees.DoWhile.unapply(x$0: phantm.ast.Trees.DoWhile): Option[(phantm.ast.Trees.Statement, phantm.ast.Trees.Expression)]
360 ===> phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean)
299 ===> phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef
2358 ===> phantm.ast.Trees.Silence.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4748 ===> phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
4206 ===> phantm.cfg.Trees.POSTDEC.productPrefix: String
5115 ===> phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type
359 ===> phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
301 ===> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
5923 ===> phantm.util.UInt.toString(): String
5361 ===> phantm.types.TArray.<init>(global: phantm.types.Type): phantm.types.TArray
4347 ===> phantm.phases.APIExportingPhase.<init>(): phantm.phases.APIExportingPhase.type
3102 ===> phantm.cfg.Trees.AssignBinary.lhs: phantm.cfg.Trees.SimpleValue
4688 ===> phantm.phases.SymContext.copy$default$2: Option[phantm.symbols.ClassSymbol] @scala.annotation.unchecked.uncheckedVariance
5354 ===> phantm.types.IntKey.readResolve(): Object
627 ===> phantm.ast.Trees.MemberFlag.<init>(): phantm.ast.Trees.MemberFlag
4241 ===> phantm.dataflow.StronglyConnectedComponents.Node.vindex_$eq(x$1: Int): Unit
2450 ===> phantm.ast.Trees.Eval.toString(): String
5798 ===> phantm.util.Reporter.endTicks: Unit
1479 ===> phantm.ast.Trees.Break.canEqual(x$1: Any): Boolean
565 ===> phantm.ast.Trees.ConstantDecl.toString(): String
708 ===> phantm.ast.Trees.NSCurrent.productElement(x$1: Int): Any
4451 ===> phantm.phases.CGContext.copy(scope: Option[phantm.symbols.FunctionSymbol]): phantm.phases.CGContext
1045 ===> phantm.ast.Trees.OAIdentifier.productArity: Int
5940 ===> phantm.util.UFloat.toString(): String
5645 ===> phantm.util.DumpCollector.files_$eq(x$1: List[String]): Unit
2882 ===> phantm.ast.Trees.MCNamespace.apply(): phantm.ast.Trees.MCNamespace
3996 ===> phantm.cfg.Trees.MOD.<init>(): phantm.cfg.Trees.MOD.type
4372 ===> phantm.phases.CheckContext.equals(x$1: Any): Boolean
2243 ===> phantm.ast.Trees.Identical.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3107 ===> phantm.cfg.Trees.AssignBinary.copy$default$1: phantm.cfg.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
2312 ===> phantm.ast.Trees.InstanceOf.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.ClassRef): phantm.ast.Trees.InstanceOf
892 ===> phantm.ast.Trees.DynamicMethodRef.productIterator: Iterator[Any]
5908 ===> phantm.util.UString.unapply(x$0: phantm.util.UString): Option[String]
118 ===> phantm.Settings.apply$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
2167 ===> phantm.ast.Trees.ShiftRight.lhs: phantm.ast.Trees.Expression
5715 ===> phantm.util.IncludeResolver.productArity: Int
888 ===> phantm.ast.Trees.DynamicMethodRef.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1176 ===> phantm.ast.Trees.Import.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
2063 ===> phantm.ast.Trees.BooleanOr.canEqual(x$1: Any): Boolean
5494 ===> phantm.types.TStringLit.copy(value: String): phantm.types.TStringLit
2177 ===> phantm.ast.Trees.ShiftRight.canEqual(x$1: Any): Boolean
2645 ===> phantm.ast.Trees.MethodCall.unapply(x$0: phantm.ast.Trees.MethodCall): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.MethodRef, List[phantm.ast.Trees.CallArg])]
5676 ===> phantm.util.GlobalAnalysisResults.inlineCache_$eq(x$1: Map[phantm.symbols.FunctionSymbol,Map[List[phantm.types.Type],(phantm.types.Type, phantm.types.ObjectStore)]]): Unit
1071 ===> phantm.ast.Trees.OAExpression.apply(exp: phantm.ast.Trees.Expression): phantm.ast.Trees.OAExpression
68 ===> phantm.InlineMode.<init>(): phantm.InlineMode
712 ===> phantm.ast.Trees.NSCurrent.toString(): String
3307 ===> phantm.cfg.Trees.Print.apply(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Print
3296 ===> phantm.cfg.Trees.Print.copy(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Print
2624 ===> phantm.ast.Trees.FunctionCall.unapply(x$0: phantm.ast.Trees.FunctionCall): Option[(phantm.ast.Trees.FunctionRef, List[phantm.ast.Trees.CallArg])]
392 ===> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
5017 ===> phantm.types.TypeLattice.meet(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeEnvironment, phantm.types.Type)
4916 ===> phantm.symbols.ConstantSymbol.name: String
5048 ===> phantm.types.TypeTransferFunction.getClassSymbol(cr: phantm.cfg.Trees.ClassRef): Option[phantm.symbols.ClassSymbol]
55 ===> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
1737 ===> phantm.ast.Trees.ObjectProperty.apply(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty
2325 ===> phantm.ast.Trees.Ternary.productElement(x$1: Int): Any
3373 ===> phantm.cfg.Trees.FuncRef.readResolve(): Object
552 ===> phantm.ast.Trees.ClassConstantDecl.readResolve(): Object
3509 ===> phantm.cfg.Trees.NextArrayEntry.productPrefix: String
5772 ===> phantm.util.Reporter.Error.pos: phantm.util.Positional
5449 ===> phantm.types.TFloatLit.unapply(x$0: phantm.types.TFloatLit): Option[Float]
1284 ===> phantm.ast.Trees.Catch.readResolve(): Object
1072 ===> phantm.ast.Trees.OAExpression.unapply(x$0: phantm.ast.Trees.OAExpression): Option[phantm.ast.Trees.Expression]
4983 ===> phantm.types.TypeFlowAnalyzer.equals(x$1: Any): Boolean
2318 ===> phantm.ast.Trees.Ternary.<init>(cond: phantm.ast.Trees.Expression,then: Option[phantm.ast.Trees.Expression],elze: phantm.ast.Trees.Expression): phantm.ast.Trees.Ternary
5883 ===> phantm.util.UObject.productIterator: Iterator[Any]
624 ===> phantm.ast.Trees.THObject.apply(cl: phantm.ast.Trees.ClassRef): phantm.ast.Trees.THObject
3957 ===> phantm.cfg.Trees.PLUS.canEqual(x$1: Any): Boolean
3728 ===> phantm.cfg.Trees.Cast.productPrefix: String
3601 ===> phantm.cfg.Trees.PHPFloat.apply(value: Float): phantm.cfg.Trees.PHPFloat
1173 ===> phantm.ast.Trees.Import.to: String
2566 ===> phantm.ast.Trees.Constant.apply(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant
3625 ===> phantm.cfg.Trees.PHPTrue.productIterator: Iterator[Any]
4389 ===> phantm.phases.ASTIntegrityChecks.productElement(x$1: Int): Any
4208 ===> phantm.cfg.Trees.POSTDEC.productElement(x$1: Int): Any
1505 ===> phantm.ast.Trees.Return.expr: phantm.ast.Trees.Expression
31 ===> phantm.Settings.exportCGPath: Option[String]
4588 ===> phantm.phases.PhaseSeq.<init>(): phantm.phases.PhaseSeq.type
1037 ===> phantm.ast.Trees.CallArg.readResolve(): Object
2644 ===> phantm.ast.Trees.MethodCall.apply(obj: phantm.ast.Trees.Expression,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.MethodCall
821 ===> phantm.ast.Trees.CalledClass.productElement(x$1: Int): Any
340 ===> phantm.ast.STToAST.interface_extends_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
3289 ===> phantm.cfg.Trees.AssumeNotProperty.<init>(): phantm.cfg.Trees.AssumeNotProperty.type
5716 ===> phantm.util.IncludeResolver.productElement(x$1: Int): Any
4913 ===> phantm.symbols.ClassSymbol.getConstants: List[phantm.symbols.ClassConstantSymbol]
3082 ===> phantm.cfg.Trees.AssignUnary.unOp: phantm.cfg.Trees.UnaryOperator
2041 ===> phantm.ast.Trees.BooleanAnd.productArity: Int
3479 ===> phantm.cfg.Trees.VariableVar.canEqual(x$1: Any): Boolean
4085 ===> phantm.cfg.Trees.SHIFTRIGHT.readResolve(): Object
4175 ===> phantm.cfg.Trees.BITSIWENOT.hashCode(): Int
5497 ===> phantm.types.TStringLit.productArity: Int
970 ===> phantm.ast.Trees.CastObject.canEqual(x$1: Any): Boolean
2570 ===> phantm.ast.Trees.ClassConstant.const: phantm.ast.Trees.Identifier
345 ===> phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
1746 ===> phantm.ast.Trees.DynamicObjectProperty.productPrefix: String
5083 ===> phantm.types.TypeTransferFunction.copy(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction
208 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.readResolve(): Object
3544 ===> phantm.cfg.Trees.VariableClassProperty.copy$default$2: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
4341 ===> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
1663 ===> phantm.ast.Trees.SimpleVariable.<init>(): phantm.ast.Trees.SimpleVariable.type
1565 ===> phantm.ast.Trees.Echo.hashCode(): Int
2773 ===> phantm.ast.Trees.PHPNull.toString(): String
2843 ===> phantm.ast.Trees.MCFunction.productArity: Int
3863 ===> phantm.cfg.Trees.FunctionCall.copy$default$2: List[phantm.cfg.Trees.SimpleValue] @scala.annotation.unchecked.uncheckedVariance
1607 ===> phantm.ast.Trees.Foreach.what: phantm.ast.Trees.Expression
2162 ===> phantm.ast.Trees.ShiftLeft.<init>(): phantm.ast.Trees.ShiftLeft.type
4046 ===> phantm.cfg.Trees.BITWISEAND.productIterator: Iterator[Any]
3881 ===> phantm.cfg.Trees.StaticMethodCall.copy$default$1: phantm.cfg.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
5047 ===> phantm.types.TypeTransferFunction.meet(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
4781 ===> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
2906 ===> phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier
5545 ===> phantm.types.TTop.canEqual(x$1: Any): Boolean
1699 ===> phantm.ast.Trees.ArrayEntry.<init>(): phantm.ast.Trees.ArrayEntry.type
3026 ===> phantm.cfg.LabeledDirectedGraphImp.Group.unapply(x$0: LabeledDirectedGraphImp.this.Group): Option[(String, LabeledDirectedGraphImp.this.Vertex)]
1542 ===> phantm.ast.Trees.Static.copy$default$1: List[phantm.ast.Trees.InitVariable] @scala.annotation.unchecked.uncheckedVariance
2378 ===> phantm.ast.Trees.Exit.productElement(x$1: Int): Any
3086 ===> phantm.cfg.Trees.AssignUnary.copy$default$1: phantm.cfg.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
5370 ===> phantm.types.TArray.setAnyInt(typ: phantm.types.Type): phantm.types.TArray
1707 ===> phantm.ast.Trees.NextArrayEntry.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5586 ===> phantm.util.API.Reader.APIPos.pos: scala.xml.NodeSeq
2767 ===> phantm.ast.Trees.PHPNull.productPrefix: String
4773 ===> phantm.phases.TypeFlowAnalysis.apply(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.TypeFlowAnalysis
3968 ===> phantm.cfg.Trees.MINUS.readResolve(): Object
849 ===> phantm.ast.Trees.VarFunctionRef.readResolve(): Object
5951 ===> phantm.util.UObjRef.productIterator: Iterator[Any]
1683 ===> phantm.ast.Trees.VariableVariable.unapply(x$0: phantm.ast.Trees.VariableVariable): Option[phantm.ast.Trees.Expression]
2551 ===> phantm.ast.Trees.Require.readResolve(): Object
3322 ===> phantm.cfg.Trees.Return.toString(): String
2240 ===> phantm.ast.Trees.Identical.rhs: phantm.ast.Trees.Expression
5781 ===> phantm.util.Reporter.Error.copy$default$2: phantm.util.Positional @scala.annotation.unchecked.uncheckedVariance
3005 ===> phantm.cfg.LabeledDirectedGraphImp.Group.subgroups: List[LabeledDirectedGraphImp.this.Group]
3965 ===> phantm.cfg.Trees.MINUS.productIterator: Iterator[Any]
5984 ===> phantm.util.UNull.hashCode(): Int
1562 ===> phantm.ast.Trees.Echo.productElement(x$1: Int): Any
2195 ===> phantm.ast.Trees.BooleanNot.hashCode(): Int
4921 ===> phantm.symbols.ArgumentSymbol.name: String
4463 ===> phantm.phases.CGContext.apply(scope: Option[phantm.symbols.FunctionSymbol]): phantm.phases.CGContext
1652 ===> phantm.ast.Trees.SimpleVariable.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
856 ===> phantm.ast.Trees.DynamicFunctionRef.productElement(x$1: Int): Any
207 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.unapply(x$0: phantm.annotations.SourceAnnotations.Parser.AnyEntry): Option[phantm.types.Type]
1828 ===> phantm.ast.Trees.Assign.toString(): String
2802 ===> phantm.ast.Trees.MCLine.hashCode(): Int
2868 ===> phantm.ast.Trees.MCMethod.unapply(x$0: phantm.ast.Trees.MCMethod): Boolean
2042 ===> phantm.ast.Trees.BooleanAnd.productElement(x$1: Int): Any
4725 ===> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
2235 ===> phantm.ast.Trees.Equal.toString(): String
5105 ===> phantm.types.TypeTransferFunction.apply$default$6: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
909 ===> phantm.ast.Trees.StaticMethodRef.productIterator: Iterator[Any]
4858 ===> phantm.symbols.IfaceMethodSymbol.visibility: phantm.symbols.MemberVisibility
1155 ===> phantm.ast.Trees.Namespaced.<init>(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
1349 ===> phantm.ast.Trees.Alternatives.toString(): String
3051 ===> phantm.cfg.Trees.Unset.productPrefix: String
4656 ===> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
4515 ===> phantm.phases.MethodGraphGeneration.<init>(ctx: phantm.phases.PhasesContext): phantm.phases.MethodGraphGeneration
3569 ===> phantm.cfg.Trees.NoVar.unapply(x$0: phantm.cfg.Trees.NoVar): Boolean
3690 ===> phantm.cfg.Trees.PHPEmptyArray.<init>(): phantm.cfg.Trees.PHPEmptyArray
2760 ===> phantm.ast.Trees.PHPString.<init>(): phantm.ast.Trees.PHPString.type
1156 ===> phantm.ast.Trees.Namespaced.copy(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
1585 ===> phantm.ast.Trees.Html.<init>(): phantm.ast.Trees.Html.type
2836 ===> phantm.ast.Trees.MCClass.toString(): String
1473 ===> phantm.ast.Trees.Break.copy(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Break
2398 ===> phantm.ast.Trees.Array.hashCode(): Int
3977 ===> phantm.cfg.Trees.MULT.readResolve(): Object
4683 ===> phantm.phases.SymContext.cl: Option[phantm.symbols.ClassSymbol]
2146 ===> phantm.ast.Trees.BitwiseXor.unapply(x$0: phantm.ast.Trees.BitwiseXor): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
5601 ===> phantm.util.API.Reader.APIPos.readResolve(): Object
4728 ===> phantm.phases.CollectSymbols.execute: Unit
452 ===> phantm.ast.Trees.Program.productPrefix: String
4478 ===> phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex
4154 ===> phantm.cfg.Trees.NOTIDENTICAL.productIterator: Iterator[Any]
594 ===> phantm.ast.Trees.CFFinal.productElement(x$1: Int): Any
4459 ===> phantm.phases.CGContext.toString(): String
4816 ===> phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit
1810 ===> phantm.ast.Trees.ExpandArray.toString(): String
578 ===> phantm.ast.Trees.CFNormal.canEqual(x$1: Any): Boolean
4853 ===> phantm.symbols.PropertySymbol.visibility: phantm.symbols.MemberVisibility
496 ===> phantm.ast.Trees.MethodDecl.copy$default$2: List[phantm.ast.Trees.MemberFlag] @scala.annotation.unchecked.uncheckedVariance
2411 ===> phantm.ast.Trees.Execute.productArity: Int
4636 ===> phantm.phases.PhasesContext.apply$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
554 ===> phantm.ast.Trees.ConstantDecl.value: phantm.ast.Trees.Expression
2751 ===> phantm.ast.Trees.PHPString.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
2987 ===> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
3285 ===> phantm.cfg.Trees.AssumeNotProperty.productIterator: Iterator[Any]
4035 ===> phantm.cfg.Trees.BOOLEANXOR.productArity: Int
2582 ===> phantm.ast.Trees.ClassConstant.equals(x$1: Any): Boolean
3943 ===> phantm.cfg.Trees.Clone.hashCode(): Int
5355 ===> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
3797 ===> phantm.cfg.Trees.ArrayCurIsValid.hashCode(): Int
4953 ===> phantm.types.TypeEnvironment.typeToString(t: phantm.types.Type): String
4184 ===> phantm.cfg.Trees.PREINC.hashCode(): Int
2523 ===> phantm.ast.Trees.Include.productIterator: Iterator[Any]
1338 ===> phantm.ast.Trees.Alternatives.copy(blocks: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Alternatives
929 ===> phantm.ast.Trees.CastString.<init>(): phantm.ast.Trees.CastString.type
1041 ===> phantm.ast.Trees.OAIdentifier.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.OAIdentifier
706 ===> phantm.ast.Trees.NSCurrent.productPrefix: String
5373 ===> phantm.types.TArray.injectAnyString(typ: phantm.types.Type): phantm.types.TArray
4826 ===> phantm.symbols.FunctionSymbol.<init>(name: String): phantm.symbols.FunctionSymbol
3030 ===> phantm.cfg.LabeledDirectedGraphImp.inEdges(v: LabeledDirectedGraphImp.this.Vertex): Set[phantm.cfg.EdgeImp[LabelType]]
251 ===> phantm.annotations.SourceAnnotations.Parser.Entry.productElement(x$1: Int): Any
3858 ===> phantm.cfg.Trees.FunctionCall.fun: phantm.cfg.Trees.FuncRef
603 ===> phantm.ast.Trees.THArray.productArity: Int
3047 ===> phantm.cfg.Trees.Unset.variable: phantm.cfg.Trees.Variable
3853 ===> phantm.cfg.Trees.Ternary.<init>(): phantm.cfg.Trees.Ternary.type
2530 ===> phantm.ast.Trees.Include.apply(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Include
2870 ===> phantm.ast.Trees.MCNamespace.<init>(): phantm.ast.Trees.MCNamespace
3676 ===> phantm.cfg.Trees.PHPThis.<init>(): phantm.cfg.Trees.PHPThis
3892 ===> phantm.cfg.Trees.StaticMethodCall.toString(): String
3224 ===> phantm.cfg.Trees.IsString.productArity: Int
2635 ===> phantm.ast.Trees.MethodCall.productArity: Int
4084 ===> phantm.cfg.Trees.SHIFTRIGHT.hashCode(): Int
2738 ===> phantm.ast.Trees.PHPFloat.productIterator: Iterator[Any]
2200 ===> phantm.ast.Trees.BooleanNot.apply(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
2965 ===> phantm.cfg.EdgeImp.productIterator: Iterator[Any]
1297 ===> phantm.ast.Trees.Throw.<init>(): phantm.ast.Trees.Throw.type
3568 ===> phantm.cfg.Trees.NoVar.apply(): phantm.cfg.Trees.NoVar
893 ===> phantm.ast.Trees.DynamicMethodRef.canEqual(x$1: Any): Boolean
3708 ===> phantm.cfg.Trees.SubTypeOf.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
3282 ===> phantm.cfg.Trees.AssumeNotProperty.productPrefix: String
1211 ===> phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any
138 ===> phantm.Settings.$lessinit$greater$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
571 ===> phantm.ast.Trees.ConstantDecl.readResolve(): Object
4990 ===> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$6: phantm.types.TypeEnvironment @scala.annotation.unchecked.uncheckedVariance
5540 ===> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
3303 ===> phantm.cfg.Trees.Print.hashCode(): Int
6027 ===> phantm.util.Unserializer.toTypeMap: scala.collection.immutable.Map[String,phantm.types.Type]
3215 ===> phantm.cfg.Trees.IsArray.productArity: Int
1480 ===> phantm.ast.Trees.Break.hashCode(): Int
2000 ===> phantm.ast.Trees.PreDec.rhs: phantm.ast.Trees.Variable
3817 ===> phantm.cfg.Trees.Constant.apply(cs: phantm.symbols.ConstantSymbol): phantm.cfg.Trees.Constant
2697 ===> phantm.ast.Trees.PHPTrue.unapply(x$0: phantm.ast.Trees.PHPTrue): Boolean
1871 ===> phantm.ast.Trees.Minus.lhs: phantm.ast.Trees.Expression
4586 ===> phantm.phases.PhaseSeq.toString(): String
3520 ===> phantm.cfg.Trees.NextArrayEntry.readResolve(): Object
1913 ===> phantm.ast.Trees.Mult.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2053 ===> phantm.ast.Trees.BooleanOr.lhs: phantm.ast.Trees.Expression
2503 ===> phantm.ast.Trees.Empty.productElement(x$1: Int): Any
691 ===> phantm.ast.Trees.NSNone.hashCode(): Int
1789 ===> phantm.ast.Trees.ListVar.equals(x$1: Any): Boolean
1203 ===> phantm.ast.Trees.ClassDecl.copy$default$3: Option[phantm.ast.Trees.StaticClassRef] @scala.annotation.unchecked.uncheckedVariance
5138 ===> phantm.types.TAnyClass.canEqual(x$1: Any): Boolean
4327 ===> phantm.helpers.STGraph.<init>(): phantm.helpers.STGraph
5309 ===> phantm.types.TRealObject.setSingleton: phantm.types.TRealObject
4323 ===> phantm.helpers.Main.input_$eq(x$1: Option[String]): Unit
3098 ===> phantm.cfg.Trees.AssignUnary.apply(variable: phantm.cfg.Trees.Variable,unOp: phantm.cfg.Trees.UnaryOperator,expr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignUnary
561 ===> phantm.ast.Trees.ConstantDecl.productElement(x$1: Int): Any
4868 ===> phantm.symbols.LookupResult.copy$default$1[T]: Option[T] @scala.annotation.unchecked.uncheckedVariance
4177 ===> phantm.cfg.Trees.PREINC.<init>(): phantm.cfg.Trees.PREINC.type
1463 ===> phantm.ast.Trees.Switch.hashCode(): Int
5406 ===> phantm.types.TIntLit.<init>(value: Long): phantm.types.TIntLit
4025 ===> phantm.cfg.Trees.BOOLEANOR.productPrefix: String
3665 ===> phantm.cfg.Trees.PHPNull.productArity: Int
1946 ===> phantm.ast.Trees.Concat.readResolve(): Object
1800 ===> phantm.ast.Trees.ExpandArray.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5677 ===> phantm.util.GlobalAnalysisResults.inlineHeaps: Map[phantm.symbols.FunctionSymbol,phantm.types.ObjectStore]
5209 ===> phantm.types.ObjectIdDump.offset: Int
3864 ===> phantm.cfg.Trees.FunctionCall.productPrefix: String
562 ===> phantm.ast.Trees.ConstantDecl.productIterator: Iterator[Any]
4499 ===> phantm.phases.CallGraphGeneration.toString(): String
4943 ===> phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
649 ===> phantm.ast.Trees.MFProtected.productElement(x$1: Int): Any
3800 ===> phantm.cfg.Trees.ArrayCurIsValid.toString(): String
3627 ===> phantm.cfg.Trees.PHPTrue.hashCode(): Int
5709 ===> phantm.util.IncludeResolver.notfound(p: String): phantm.ast.Trees.Expression
2985 ===> phantm.cfg.LabeledDirectedGraphImp.counter: Int
5838 ===> phantm.util.ErrorException.copy$default$4: Int @scala.annotation.unchecked.uncheckedVariance
5600 ===> phantm.util.API.Reader.APIPos.unapply(x$0: Reader.this.APIPos): Option[scala.xml.Node]
5104 ===> phantm.types.TypeTransferFunction.apply$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
677 ===> phantm.ast.Trees.MFStatic.productIterator: Iterator[Any]
5154 ===> phantm.types.TClass.<init>(): phantm.types.TClass.type
1752 ===> phantm.ast.Trees.DynamicObjectProperty.toString(): String
1766 ===> phantm.ast.Trees.ClassProperty.productArity: Int
1606 ===> phantm.ast.Trees.Unset.readResolve(): Object
2226 ===> phantm.ast.Trees.Equal.productPrefix: String
5205 ===> phantm.types.ObjectIdTmp.toString(): String
4309 ===> phantm.helpers.CFGGraphs.apply(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.helpers.CFGGraphs
1453 ===> phantm.ast.Trees.Switch.cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
5902 ===> phantm.util.UString.hashCode(): Int
4608 ===> phantm.phases.PhasesContext.copy$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
2856 ===> phantm.ast.Trees.MCMethod.copy(): phantm.ast.Trees.MCMethod
5461 ===> phantm.types.TTrue.<init>(): phantm.types.TTrue.type
5203 ===> phantm.types.ObjectIdTmp.equals(x$1: Any): Boolean
4832 ===> phantm.symbols.FunctionSymbol.toString(): String
981 ===> phantm.ast.Trees.CastUnset.toString(): String
3656 ===> phantm.cfg.Trees.PHPFalse.equals(x$1: Any): Boolean
3141 ===> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
2534 ===> phantm.ast.Trees.Require.once: Boolean
5981 ===> phantm.util.UNull.productElement(x$1: Int): Any
4786 ===> phantm.symbols.Symbol.userland: Boolean
3483 ===> phantm.cfg.Trees.VariableVar.toString(): String
1506 ===> phantm.ast.Trees.Return.<init>(expr: phantm.ast.Trees.Expression): phantm.ast.Trees.Return
408 ===> phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int
2309 ===> phantm.ast.Trees.InstanceOf.equals(x$1: Any): Boolean
1296 ===> phantm.ast.Trees.Throw.equals(x$1: Any): Boolean
4674 ===> phantm.phases.SymbolsChecksPhase.<init>(): phantm.phases.SymbolsChecksPhase.type
4638 ===> phantm.phases.PhasesContext.apply$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
1468 ===> phantm.ast.Trees.Switch.apply(expr: phantm.ast.Trees.Expression,cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]): phantm.ast.Trees.Switch
1205 ===> phantm.ast.Trees.ClassDecl.copy$default$5: List[phantm.ast.Trees.MethodDecl] @scala.annotation.unchecked.uncheckedVariance
994 ===> phantm.ast.Trees.InitVariable.hashCode(): Int
930 ===> phantm.ast.Trees.CastString.productPrefix: String
1953 ===> phantm.ast.Trees.Mod.productPrefix: String
823 ===> phantm.ast.Trees.CalledClass.canEqual(x$1: Any): Boolean
5193 ===> phantm.types.ObjectIdTmp.<init>(offset: Int): phantm.types.ObjectIdTmp
919 ===> phantm.ast.Trees.CastType.<init>(): phantm.ast.Trees.CastType
5236 ===> phantm.types.ObjectId.canEqual(x$1: Any): Boolean
2711 ===> phantm.ast.Trees.PHPFalse.apply(): phantm.ast.Trees.PHPFalse
2690 ===> phantm.ast.Trees.PHPTrue.canEqual(x$1: Any): Boolean
4793 ===> phantm.symbols.ID.<init>(): phantm.symbols.ID.type
2218 ===> phantm.ast.Trees.BitwiseNot.unapply(x$0: phantm.ast.Trees.BitwiseNot): Option[phantm.ast.Trees.Expression]
5750 ===> phantm.util.Positional.col_end_$eq(x$1: Int): Unit
2936 ===> phantm.cfg.VertexImp.out_$eq(x$1: Set[phantm.cfg.EdgeImp[L]]): Unit
5976 ===> phantm.util.URealRef.unapply(x$0: phantm.util.URealRef): Option[Int]
1626 ===> phantm.ast.Trees.Foreach.hashCode(): Int
4342 ===> phantm.parser.Parser.comments_$eq(x$1: List[(phantm.util.Positional, String)]): Unit
1277 ===> phantm.ast.Trees.Catch.hashCode(): Int
2279 ===> phantm.ast.Trees.SmallerEqual.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.SmallerEqual
56 ===> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
711 ===> phantm.ast.Trees.NSCurrent.hashCode(): Int
3150 ===> phantm.cfg.Trees.Assume.canEqual(x$1: Any): Boolean
2156 ===> phantm.ast.Trees.ShiftLeft.productElement(x$1: Int): Any
1523 ===> phantm.ast.Trees.Global.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Global
156 ===> phantm.Settings.readResolve(): Object
3366 ===> phantm.cfg.Trees.FuncRef.hashCode(): Int
3481 ===> phantm.cfg.Trees.VariableVar.equals(x$1: Any): Boolean
2932 ===> phantm.cfg.VertexImp.<init>(name: String): phantm.cfg.VertexImp[L]
6019 ===> phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey
5803 ===> phantm.util.Reporter.error(msg: String): Boolean
520 ===> phantm.ast.Trees.PropertyDecl.copy$default$3: Option[phantm.ast.Trees.Expression] @scala.annotation.unchecked.uncheckedVariance
2698 ===> phantm.ast.Trees.PHPTrue.readResolve(): Object
1246 ===> phantm.ast.Trees.Try.catches: List[phantm.ast.Trees.Catch]
4592 ===> phantm.phases.PhaseSeq.apply$default$1: Seq[phantm.phases.Phase] @scala.annotation.unchecked.uncheckedVariance
1222 ===> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
2038 ===> phantm.ast.Trees.BooleanAnd.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5797 ===> phantm.util.Reporter.tick: Unit
3784 ===> phantm.cfg.Trees.ArrayCurKey.toString(): String
326 ===> phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])
2093 ===> phantm.ast.Trees.BitwiseAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseAnd
3482 ===> phantm.cfg.Trees.VariableVar.<init>(): phantm.cfg.Trees.VariableVar.type
1747 ===> phantm.ast.Trees.DynamicObjectProperty.productArity: Int
5112 ===> phantm.types.TypeWideningFunction.<init>(): phantm.types.TypeWideningFunction
3877 ===> phantm.cfg.Trees.StaticMethodCall.id: phantm.ast.Trees.Identifier
2224 ===> phantm.ast.Trees.Equal.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
6006 ===> phantm.util.Unserializer.valueStore: List[phantm.util.UValue]
772 ===> phantm.ast.Trees.VarClassRef.productElement(x$1: Int): Any
5392 ===> phantm.types.TNumeric.hashCode(): Int
531 ===> phantm.ast.Trees.PropertyDecl.apply(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
4464 ===> phantm.phases.CGContext.unapply(x$0: phantm.phases.CGContext): Option[Option[phantm.symbols.FunctionSymbol]]
51 ===> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
3548 ===> phantm.cfg.Trees.VariableClassProperty.productIterator: Iterator[Any]
1292 ===> phantm.ast.Trees.Throw.productIterator: Iterator[Any]
3113 ===> phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any
1313 ===> phantm.ast.Trees.Goto.equals(x$1: Any): Boolean
2210 ===> phantm.ast.Trees.BitwiseNot.productIterator: Iterator[Any]
3070 ===> phantm.cfg.Trees.Assign.productArity: Int
4140 ===> phantm.cfg.Trees.NOTEQUALS.<init>(): phantm.cfg.Trees.NOTEQUALS.type
628 ===> phantm.ast.Trees.MFAbstract.<init>(): phantm.ast.Trees.MFAbstract.type
4827 ===> phantm.symbols.FunctionSymbol.args: scala.collection.mutable.HashMap[String,phantm.symbols.ArgumentSymbol]
46 ===> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
1197 ===> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
5501 ===> phantm.types.TStringLit.hashCode(): Int
4938 ===> phantm.types.TypeEnvironment.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[(phantm.cfg.Trees.SimpleVariable, phantm.types.Type),(phantm.types.ArrayKey, phantm.types.Type)] with Serializable
485 ===> phantm.ast.Trees.ArgumentDecl.apply(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
2952 ===> phantm.cfg.EdgeImp.v1: phantm.cfg.VertexImp[L]
4779 ===> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
3662 ===> phantm.cfg.Trees.PHPNull.<init>(): phantm.cfg.Trees.PHPNull
2834 ===> phantm.ast.Trees.MCClass.equals(x$1: Any): Boolean
4398 ===> phantm.phases.ASTIntegrityChecks.unapply(x$0: phantm.phases.ASTIntegrityChecks): Option[(phantm.ast.Trees.Tree, phantm.phases.CheckContext)]
2351 ===> phantm.ast.Trees.Cast.toString(): String
5962 ===> phantm.util.URealRef.<init>(i: Int): phantm.util.URealRef
3188 ===> phantm.cfg.Trees.IsInt.productArity: Int
1399 ===> phantm.ast.Trees.While.productElement(x$1: Int): Any
1377 ===> phantm.ast.Trees.If.copy$default$3: Option[phantm.ast.Trees.Statement] @scala.annotation.unchecked.uncheckedVariance
2453 ===> phantm.ast.Trees.Eval.toString(): String
4108 ===> phantm.cfg.Trees.GEQ.productElement(x$1: Int): Any
2295 ===> phantm.ast.Trees.SmallerEqual.readResolve(): Object
3905 ===> phantm.cfg.Trees.MethodCall.productArity: Int
3704 ===> phantm.cfg.Trees.SubTypeOf.lhs: phantm.cfg.Trees.SimpleValue
4735 ===> phantm.phases.CollectSymbols.productIterator: Iterator[Any]
3396 ===> phantm.cfg.Trees.ClassRefFixed.copy$default$1: phantm.symbols.ClassSymbol @scala.annotation.unchecked.uncheckedVariance
3748 ===> phantm.cfg.Trees.ArrayNext.canEqual(x$1: Any): Boolean
80 ===> phantm.InlineLeaves.productArity: Int
2531 ===> phantm.ast.Trees.Include.unapply(x$0: phantm.ast.Trees.Include): Option[(phantm.ast.Trees.Expression, Boolean)]
1431 ===> phantm.ast.Trees.For.step: phantm.ast.Trees.Statement
4456 ===> phantm.phases.CGContext.productIterator: Iterator[Any]
2289 ===> phantm.ast.Trees.SmallerEqual.toString(): String
5423 ===> phantm.types.TFloat.<init>(): phantm.types.TFloat.type
3605 ===> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
1049 ===> phantm.ast.Trees.OAIdentifier.hashCode(): Int
4509 ===> phantm.phases.IncludesConstantsResolutionPhase.description: String
286 ===> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
1897 ===> phantm.ast.Trees.Div.productArity: Int
3043 ===> phantm.cfg.Trees.nextStatementID: Int
4972 ===> phantm.types.TypeFlowAnalyzer.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
3700 ===> phantm.cfg.Trees.PHPEmptyArray.toString(): String
4799 ===> phantm.symbols.Scope.variables_$eq(x$1: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]): Unit
5743 ===> phantm.util.Positional.line: Int
5005 ===> phantm.types.TypeLattice.leq(envx: phantm.types.TypeLattice.Env,envy: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
3835 ===> phantm.cfg.Trees.ClassConstant.apply(cl: phantm.cfg.Trees.ClassRef,name: phantm.ast.Trees.Identifier): phantm.cfg.Trees.ClassConstant
82 ===> phantm.InlineLeaves.productIterator: Iterator[Any]
1103 ===> phantm.ast.Trees.OAMethod.canEqual(x$1: Any): Boolean
3810 ===> phantm.cfg.Trees.Constant.productElement(x$1: Int): Any
5096 ===> phantm.types.TypeTransferFunction.hashCode(): Int
2498 ===> phantm.ast.Trees.Empty.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Empty
3891 ===> phantm.cfg.Trees.StaticMethodCall.<init>(): phantm.cfg.Trees.StaticMethodCall.type
3852 ===> phantm.cfg.Trees.Ternary.equals(x$1: Any): Boolean
1819 ===> phantm.ast.Trees.Assign.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
1537 ===> phantm.ast.Trees.Global.unapply(x$0: phantm.ast.Trees.Global): Option[List[phantm.ast.Trees.Variable]]
867 ===> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
3936 ===> phantm.cfg.Trees.Clone.copy(obj: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Clone
1439 ===> phantm.ast.Trees.For.productPrefix: String
1689 ===> phantm.ast.Trees.ArrayEntry.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3607 ===> phantm.cfg.Trees.PHPString.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
2160 ===> phantm.ast.Trees.ShiftLeft.toString(): String
4909 ===> phantm.symbols.ClassSymbol.lookupProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol]
211 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.copy(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyStringEntry
5272 ===> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
2488 ===> phantm.ast.Trees.Isset.canEqual(x$1: Any): Boolean
1218 ===> phantm.ast.Trees.ClassDecl.toString(): String
2083 ===> phantm.ast.Trees.BooleanXor.hashCode(): Int
5804 ===> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
4376 ===> phantm.phases.CheckContext.unapply(x$0: phantm.phases.CheckContext): Option[(Boolean, Boolean)]
1390 ===> phantm.ast.Trees.If.readResolve(): Object
3295 ===> phantm.cfg.Trees.Print.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Print
2818 ===> phantm.ast.Trees.MCDir.toString(): String
3711 ===> phantm.cfg.Trees.SubTypeOf.productArity: Int
4649 ===> phantm.phases.PureStatementsPhase.description: String
793 ===> phantm.ast.Trees.DynamicClassRef.toString(): String
3990 ===> phantm.cfg.Trees.CONCAT.productArity: Int
5901 ===> phantm.util.UString.canEqual(x$1: Any): Boolean
2128 ===> phantm.ast.Trees.BitwiseOr.readResolve(): Object
4585 ===> phantm.phases.PhaseSeq.hashCode(): Int
1337 ===> phantm.ast.Trees.Alternatives.<init>(blocks: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Alternatives
730 ===> phantm.ast.Trees.Identifier.productElement(x$1: Int): Any
4276 ===> phantm.helpers.CheckContext.productElement(x$1: Int): Any
3935 ===> phantm.cfg.Trees.Clone.<init>(obj: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Clone
1345 ===> phantm.ast.Trees.Alternatives.hashCode(): Int
523 ===> phantm.ast.Trees.PropertyDecl.productElement(x$1: Int): Any
5276 ===> phantm.types.TObjectRef.id: phantm.types.ObjectId
4254 ===> phantm.dataflow.StronglyConnectedComponents.getComponents: scala.collection.immutable.Set[StronglyConnectedComponents.this.SCC]
567 ===> phantm.ast.Trees.ConstantDecl.<init>(): phantm.ast.Trees.ConstantDecl.type
5133 ===> phantm.types.TAnyClass.toString(): String
428 ===> phantm.ast.STToAST.notyet(n: phantm.parser.ParseNode): Nothing
1488 ===> phantm.ast.Trees.Continue.level: phantm.ast.Trees.Expression
944 ===> phantm.ast.Trees.CastDouble.hashCode(): Int
3523 ===> phantm.cfg.Trees.ObjectProperty.<init>(obj: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ObjectProperty
5911 ===> phantm.util.UInt.<init>(v: Int): phantm.util.UInt
877 ===> phantm.ast.Trees.StaticFunctionRef.toString(): String
163 ===> phantm.annotations.FunctionTypeAnnotation.ftyps_$eq(x$1: scala.collection.immutable.Set[phantm.types.FunctionType]): Unit
2047 ===> phantm.ast.Trees.BooleanAnd.equals(x$1: Any): Boolean
5301 ===> phantm.types.TRealObject.lookupField(index: String): phantm.types.Type
4701 ===> phantm.phases.SymContext.unapply(x$0: phantm.phases.SymContext): Option[(phantm.symbols.Scope, Option[phantm.symbols.ClassSymbol], Option[phantm.symbols.IfaceSymbol])]
4138 ===> phantm.cfg.Trees.IDENTICAL.hashCode(): Int
3395 ===> phantm.cfg.Trees.ClassRefFixed.copy(cs: phantm.symbols.ClassSymbol): phantm.cfg.Trees.ClassRefFixed
1821 ===> phantm.ast.Trees.Assign.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
2772 ===> phantm.ast.Trees.PHPNull.hashCode(): Int
828 ===> phantm.ast.Trees.CalledClass.toString(): String
5861 ===> phantm.util.UArray.productIterator: Iterator[Any]
3650 ===> phantm.cfg.Trees.PHPFalse.productPrefix: String
4191 ===> phantm.cfg.Trees.POSTINC.productIterator: Iterator[Any]
180 ===> phantm.annotations.AnnotationsStore.restoreFunctionAnnotations(fs: phantm.symbols.FunctionSymbol,annots: (List[phantm.types.TFunction], List[phantm.types.Type])): Unit
5030 ===> phantm.types.TypeTransferFunction.collectAnnotations: Boolean
3819 ===> phantm.cfg.Trees.Constant.readResolve(): Object
281 ===> phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type)
5122 ===> phantm.types.Type.equals(t: phantm.types.Type): Boolean
5062 ===> phantm.types.TypeTransferFunction.typesDiff(et: phantm.types.Type,vt: phantm.types.Type): ((String, String), Boolean)
419 ===> phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
4193 ===> phantm.cfg.Trees.POSTINC.hashCode(): Int
4574 ===> phantm.phases.PhaseException.readResolve(): Object
3985 ===> phantm.cfg.Trees.DIV.hashCode(): Int
974 ===> phantm.ast.Trees.CastUnset.<init>(): phantm.ast.Trees.CastUnset.type
234 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.canEqual(x$1: Any): Boolean
5314 ===> phantm.types.ArrayKey.<init>(): phantm.types.ArrayKey.type
396 ===> phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
869 ===> phantm.ast.Trees.StaticFunctionRef.copy(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
3298 ===> phantm.cfg.Trees.Print.productPrefix: String
5443 ===> phantm.types.TFloatLit.hashCode(): Int
2605 ===> phantm.ast.Trees.New.unapply(x$0: phantm.ast.Trees.New): Option[(phantm.ast.Trees.ClassRef, List[phantm.ast.Trees.CallArg])]
1502 ===> phantm.ast.Trees.Continue.apply(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Continue
5535 ===> phantm.types.TNull.canEqual(x$1: Any): Boolean
4338 ===> phantm.lattice.Lattice.meet(env: Lattice.this.Env,x: Lattice.this.E,y: Lattice.this.E): (Lattice.this.Env, Lattice.this.E)
690 ===> phantm.ast.Trees.NSNone.canEqual(x$1: Any): Boolean
92 ===> phantm.InlineFull.canEqual(x$1: Any): Boolean
4764 ===> phantm.phases.TypeFlowAnalysis.productArity: Int
1783 ===> phantm.ast.Trees.ListVar.productArity: Int
5006 ===> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
3493 ===> phantm.cfg.Trees.ArrayEntry.productPrefix: String
5942 ===> phantm.util.UFloat.unapply(x$0: phantm.util.UFloat): Option[Float]
5093 ===> phantm.types.TypeTransferFunction.productElement(x$1: Int): Any
5037 ===> phantm.types.TypeTransferFunction.error(msg: String,pos: phantm.util.Positional): Unit
3764 ===> phantm.cfg.Trees.ArrayCurElement.canEqual(x$1: Any): Boolean
3770 ===> phantm.cfg.Trees.ArrayCurElement.unapply(x$0: phantm.cfg.Trees.ArrayCurElement): Option[phantm.cfg.Trees.SimpleValue]
1178 ===> phantm.ast.Trees.Import.productPrefix: String
2131 ===> phantm.ast.Trees.BitwiseXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseXor
2720 ===> phantm.ast.Trees.PHPInteger.productElement(x$1: Int): Any
4176 ===> phantm.cfg.Trees.BITSIWENOT.readResolve(): Object
1231 ===> phantm.ast.Trees.InterfaceDecl.copy$default$4: List[phantm.ast.Trees.ClassConstantDecl] @scala.annotation.unchecked.uncheckedVariance
1441 ===> phantm.ast.Trees.For.productElement(x$1: Int): Any
911 ===> phantm.ast.Trees.StaticMethodRef.hashCode(): Int
4632 ===> phantm.phases.PhasesContext.$lessinit$greater$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
4957 ===> phantm.types.TypeFlowAnalyzer.inlined: Boolean
1257 ===> phantm.ast.Trees.Try.toString(): String
437 ===> phantm.ast.STToAST.hashCode(): Int
4875 ===> phantm.symbols.LookupResult.canEqual(x$1: Any): Boolean
4473 ===> phantm.phases.CallGraphGeneration.CallGraph.mainCallPositions_$eq(x$1: scala.collection.immutable.Map[phantm.symbols.FunctionSymbol,Set[phantm.util.Positional]]): Unit
954 ===> phantm.ast.Trees.CastArray.toString(): String
1247 ===> phantm.ast.Trees.Try.<init>(body: phantm.ast.Trees.Statement,catches: List[phantm.ast.Trees.Catch]): phantm.ast.Trees.Try
4851 ===> phantm.symbols.MethodSymbol.registerPredefVariables: Unit
3186 ===> phantm.cfg.Trees.IsInt.<init>(): phantm.cfg.Trees.IsInt.type
5809 ===> phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean
3917 ===> phantm.cfg.Trees.New.params: List[phantm.cfg.Trees.SimpleValue]
935 ===> phantm.ast.Trees.CastString.hashCode(): Int
2938 ===> phantm.cfg.VertexImp.copy[L](name: String): phantm.cfg.VertexImp[L]
3057 ===> phantm.cfg.Trees.Unset.equals(x$1: Any): Boolean
3978 ===> phantm.cfg.Trees.DIV.<init>(): phantm.cfg.Trees.DIV.type
3634 ===> phantm.cfg.Trees.PHPAny.<init>(): phantm.cfg.Trees.PHPAny
539 ===> phantm.ast.Trees.ClassConstantDecl.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2732 ===> phantm.ast.Trees.PHPFloat.<init>(value: Float): phantm.ast.Trees.PHPFloat
2287 ===> phantm.ast.Trees.SmallerEqual.canEqual(x$1: Any): Boolean
4374 ===> phantm.phases.CheckContext.toString(): String
4247 ===> phantm.dataflow.StronglyConnectedComponents.Node.vSeq_$eq(x$1: IndexedSeq[StronglyConnectedComponents.this.Vertex]): Unit
438 ===> phantm.ast.STToAST.toString(): String
2336 ===> phantm.ast.Trees.Cast.typ: phantm.ast.Trees.CastType
2075 ===> phantm.ast.Trees.BooleanXor.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanXor
303 ===> phantm.ast.DummyContext.<init>(): phantm.ast.DummyContext
1560 ===> phantm.ast.Trees.Echo.productPrefix: String
4150 ===> phantm.cfg.Trees.NOTIDENTICAL.toString(): String
2590 ===> phantm.ast.Trees.New.<init>(cl: phantm.ast.Trees.ClassRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.New
5332 ===> phantm.types.StringKey.<init>(): phantm.types.StringKey.type
2872 ===> phantm.ast.Trees.MCNamespace.productPrefix: String
3535 ===> phantm.cfg.Trees.ObjectProperty.toString(): String
1066 ===> phantm.ast.Trees.OAExpression.hashCode(): Int
5158 ===> phantm.types.TClass.readResolve(): Object
581 ===> phantm.ast.Trees.CFNormal.readResolve(): Object
5241 ===> phantm.types.ObjectId.toString(): String
4469 ===> phantm.phases.CallGraphGeneration.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CGContext,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration
3603 ===> phantm.cfg.Trees.PHPFloat.readResolve(): Object
3069 ===> phantm.cfg.Trees.Assign.productPrefix: String
4715 ===> phantm.phases.CollectSymbols.classList_$eq(x$1: List[(phantm.symbols.ClassSymbol, phantm.ast.Trees.ClassDecl)]): Unit
134 ===> phantm.Settings.$lessinit$greater$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1573 ===> phantm.ast.Trees.Html.content: String
5365 ===> phantm.types.TArray.injectByType(indtyp: phantm.types.Type,typ: phantm.types.Type): phantm.types.TArray
3926 ===> phantm.cfg.Trees.New.canEqual(x$1: Any): Boolean
3570 ===> phantm.cfg.Trees.NoVar.readResolve(): Object
3374 ===> phantm.cfg.Trees.ClassRef.<init>(): phantm.cfg.Trees.ClassRef
214 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productArity: Int
4622 ===> phantm.phases.PhasesContext.<init>(): phantm.phases.PhasesContext.type
2845 ===> phantm.ast.Trees.MCFunction.productIterator: Iterator[Any]
884 ===> phantm.ast.Trees.MethodRef.<init>(): phantm.ast.Trees.MethodRef
5720 ===> phantm.util.IncludeResolver.toString(): String
1422 ===> phantm.ast.Trees.DoWhile.toString(): String
4575 ===> phantm.phases.PhaseSeq.list: Seq[phantm.phases.Phase]
1981 ===> phantm.ast.Trees.PreInc.unapply(x$0: phantm.ast.Trees.PreInc): Option[phantm.ast.Trees.Variable]
2979 ===> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
2241 ===> phantm.ast.Trees.Identical.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Identical
4037 ===> phantm.cfg.Trees.BOOLEANXOR.productIterator: Iterator[Any]
4635 ===> phantm.phases.PhasesContext.apply$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
231 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productArity: Int
5628 ===> phantm.util.ConstantsResolver.productIterator: Iterator[Any]
2350 ===> phantm.ast.Trees.Cast.<init>(): phantm.ast.Trees.Cast.type
5344 ===> phantm.types.IntKey.productArity: Int
1282 ===> phantm.ast.Trees.Catch.apply(cl: phantm.ast.Trees.ClassRef,v: phantm.ast.Trees.SimpleVariable,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Catch
1272 ===> phantm.ast.Trees.Catch.productPrefix: String
529 ===> phantm.ast.Trees.PropertyDecl.<init>(): phantm.ast.Trees.PropertyDecl.type
3946 ===> phantm.cfg.Trees.Clone.toString(): String
3275 ===> phantm.cfg.Trees.AssumeProperty.readResolve(): Object
5398 ===> phantm.types.TInt.productArity: Int
3925 ===> phantm.cfg.Trees.New.productIterator: Iterator[Any]
3476 ===> phantm.cfg.Trees.VariableVar.productArity: Int
93 ===> phantm.InlineFull.hashCode(): Int
4624 ===> phantm.phases.PhasesContext.apply(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
3906 ===> phantm.cfg.Trees.MethodCall.productElement(x$1: Int): Any
1358 ===> phantm.ast.Trees.Block.productArity: Int
2762 ===> phantm.ast.Trees.PHPString.apply(value: String): phantm.ast.Trees.PHPString
1714 ===> phantm.ast.Trees.NextArrayEntry.toString(): String
4250 ===> phantm.dataflow.StronglyConnectedComponents.SCC.vs: Set[StronglyConnectedComponents.this.Vertex]
3418 ===> phantm.cfg.Trees.ClassRefCalledClass.equals(x$1: Any): Boolean
3472 ===> phantm.cfg.Trees.VariableVar.<init>(v: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableVar
4279 ===> phantm.helpers.CheckContext.hashCode(): Int
932 ===> phantm.ast.Trees.CastString.productElement(x$1: Int): Any
2902 ===> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
5659 ===> phantm.util.DumpCollector.productIterator: Iterator[Any]
4094 ===> phantm.cfg.Trees.LT.readResolve(): Object
1494 ===> phantm.ast.Trees.Continue.productElement(x$1: Int): Any
5018 ===> phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
673 ===> phantm.ast.Trees.MFStatic.<init>(): phantm.ast.Trees.MFStatic.type
5578 ===> phantm.types.TUnion.toString(): String
1811 ===> phantm.ast.Trees.ExpandArray.apply(vars: List[Option[phantm.ast.Trees.Variable]],expr: phantm.ast.Trees.Expression): phantm.ast.Trees.ExpandArray
1323 ===> phantm.ast.Trees.LabelDecl.productPrefix: String
997 ===> phantm.ast.Trees.InitVariable.<init>(): phantm.ast.Trees.InitVariable.type
1420 ===> phantm.ast.Trees.DoWhile.canEqual(x$1: Any): Boolean
122 ===> phantm.Settings.apply$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
766 ===> phantm.ast.Trees.VarClassRef.v: phantm.ast.Trees.Variable
1932 ===> phantm.ast.Trees.Concat.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
290 ===> phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl
3274 ===> phantm.cfg.Trees.AssumeProperty.unapply(x$0: phantm.cfg.Trees.AssumeProperty): Option[(phantm.cfg.Trees.Property, List[phantm.cfg.Trees.Variable])]
2486 ===> phantm.ast.Trees.Isset.productElement(x$1: Int): Any
2413 ===> phantm.ast.Trees.Execute.productIterator: Iterator[Any]
4393 ===> phantm.phases.ASTIntegrityChecks.toString(): String
5054 ===> phantm.types.TypeTransferFunction.$anonfun.applyOrElse[A1 <: (phantm.types.ArrayKey, phantm.types.Type), B1 >: (phantm.types.ArrayKey, phantm.types.Type) with phantm.types.IntKey](x$1: A1,default: A1 => B1): B1
5490 ===> phantm.types.TString.readResolve(): Object
4020 ===> phantm.cfg.Trees.BOOLEANAND.canEqual(x$1: Any): Boolean
5131 ===> phantm.types.TAnyClass.<init>(): phantm.types.TAnyClass.type
1254 ===> phantm.ast.Trees.Try.productIterator: Iterator[Any]
5029 ===> phantm.types.TypeTransferFunction.ctx: phantm.phases.PhasesContext
3398 ===> phantm.cfg.Trees.ClassRefFixed.productArity: Int
4573 ===> phantm.phases.PhaseException.unapply(x$0: phantm.phases.PhaseException): Option[(phantm.phases.Phase, String)]
1528 ===> phantm.ast.Trees.Global.productElement(x$1: Int): Any
4840 ===> phantm.symbols.MVPublic.toString(): String
5132 ===> phantm.types.TAnyClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
2614 ===> phantm.ast.Trees.FunctionCall.productArity: Int
2701 ===> phantm.ast.Trees.PHPFalse.productPrefix: String
5913 ===> phantm.util.UInt.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1753 ===> phantm.ast.Trees.DynamicObjectProperty.equals(x$1: Any): Boolean
3649 ===> phantm.cfg.Trees.PHPFalse.copy(): phantm.cfg.Trees.PHPFalse
2835 ===> phantm.ast.Trees.MCClass.<init>(): phantm.ast.Trees.MCClass.type
5244 ===> phantm.types.ObjectId.readResolve(): Object
3052 ===> phantm.cfg.Trees.Unset.productArity: Int
4572 ===> phantm.phases.PhaseException.apply(ph: phantm.phases.Phase,error: String): phantm.phases.PhaseException
1079 ===> phantm.ast.Trees.OAArray.copy$default$2: List[Option[phantm.ast.Trees.Expression]] @scala.annotation.unchecked.uncheckedVariance
3190 ===> phantm.cfg.Trees.IsInt.productIterator: Iterator[Any]
5583 ===> phantm.util.API.Reader.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader
2967 ===> phantm.cfg.EdgeImp.hashCode(): Int
2935 ===> phantm.cfg.VertexImp.out: Set[phantm.cfg.EdgeImp[L]]
3837 ===> phantm.cfg.Trees.ClassConstant.readResolve(): Object
5672 ===> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
5900 ===> phantm.util.UString.productIterator: Iterator[Any]
4408 ===> phantm.phases.ASTCollector.functionsDecls_$eq(x$1: List[phantm.ast.Trees.FunctionDecl]): Unit
322 ===> phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
20 ===> phantm.Settings.displayFixPoint: Boolean
4385 ===> phantm.phases.ASTIntegrityChecks.copy$default$1: phantm.ast.Trees.Tree @scala.annotation.unchecked.uncheckedVariance
1101 ===> phantm.ast.Trees.OAMethod.productElement(x$1: Int): Any
3644 ===> phantm.cfg.Trees.PHPAny.toString(): String
803 ===> phantm.ast.Trees.StaticClassRef.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
2340 ===> phantm.ast.Trees.Cast.copy$default$1: phantm.ast.Trees.CastType @scala.annotation.unchecked.uncheckedVariance
525 ===> phantm.ast.Trees.PropertyDecl.canEqual(x$1: Any): Boolean
1893 ===> phantm.ast.Trees.Div.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Div
4290 ===> phantm.helpers.CFGGraphs.result: String
1149 ===> phantm.ast.Trees.NamespaceStart.toString(): String
989 ===> phantm.ast.Trees.InitVariable.productPrefix: String
318 ===> phantm.ast.STToAST.S(n: phantm.parser.ParseNode): phantm.ast.Trees.Program
4134 ===> phantm.cfg.Trees.IDENTICAL.productArity: Int
5489 ===> phantm.types.TString.toString(): String
5359 ===> phantm.types.TArray.global: phantm.types.Type
3956 ===> phantm.cfg.Trees.PLUS.productIterator: Iterator[Any]
535 ===> phantm.ast.Trees.ClassConstantDecl.value: phantm.ast.Trees.Expression
3494 ===> phantm.cfg.Trees.ArrayEntry.productArity: Int
147 ===> phantm.Settings.$lessinit$greater$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
5563 ===> phantm.types.TUninitialized.productElement(x$1: Int): Any
796 ===> phantm.ast.Trees.DynamicClassRef.toString(): String
5278 ===> phantm.types.TObjectRef.toString(): String
1510 ===> phantm.ast.Trees.Return.productArity: Int
1445 ===> phantm.ast.Trees.For.toString(): String
2478 ===> phantm.ast.Trees.Closure.unapply(x$0: phantm.ast.Trees.Closure): Option[(List[phantm.ast.Trees.ArgumentDecl], List[phantm.ast.Trees.ArgumentDecl], Boolean, phantm.ast.Trees.Statement)]
4862 ===> phantm.symbols.LookupResult.ms: Option[T]
1764 ===> phantm.ast.Trees.ClassProperty.copy$default$2: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
5704 ===> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
3431 ===> phantm.cfg.Trees.ClassRefUnknown.canEqual(x$1: Any): Boolean
4948 ===> phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
3993 ===> phantm.cfg.Trees.CONCAT.canEqual(x$1: Any): Boolean
874 ===> phantm.ast.Trees.StaticFunctionRef.productIterator: Iterator[Any]
4277 ===> phantm.helpers.CheckContext.productIterator: Iterator[Any]
2718 ===> phantm.ast.Trees.PHPInteger.productPrefix: String
3944 ===> phantm.cfg.Trees.Clone.equals(x$1: Any): Boolean
2436 ===> phantm.ast.Trees.Print.toString(): String
1099 ===> phantm.ast.Trees.OAMethod.productPrefix: String
2354 ===> phantm.ast.Trees.Cast.readResolve(): Object
1085 ===> phantm.ast.Trees.OAArray.hashCode(): Int
863 ===> phantm.ast.Trees.DynamicFunctionRef.toString(): String
4526 ===> phantm.phases.NamespaceResolverPhase.<init>(): phantm.phases.NamespaceResolverPhase.type
2085 ===> phantm.ast.Trees.BooleanXor.equals(x$1: Any): Boolean
3629 ===> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue.type
5792 ===> phantm.util.Reporter.Error.unapply(x$0: Reporter.this.Error): Option[(String, phantm.util.Positional, Set[phantm.util.ErrorTag])]
4362 ===> phantm.phases.CheckContext.copy(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
3894 ===> phantm.cfg.Trees.StaticMethodCall.unapply(x$0: phantm.cfg.Trees.StaticMethodCall): Option[(phantm.cfg.Trees.ClassRef, phantm.ast.Trees.Identifier, List[phantm.cfg.Trees.SimpleValue])]
4753 ===> phantm.phases.TypeFlowAnalysis.<init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.TypeFlowAnalysis
5565 ===> phantm.types.TUninitialized.canEqual(x$1: Any): Boolean
2953 ===> phantm.cfg.EdgeImp.lab: L
1464 ===> phantm.ast.Trees.Switch.toString(): String
5938 ===> phantm.util.UFloat.equals(x$1: Any): Boolean
3243 ===> phantm.cfg.Trees.IsScalar.productElement(x$1: Int): Any
2480 ===> phantm.ast.Trees.Isset.vs: List[phantm.ast.Trees.Variable]
5713 ===> phantm.util.IncludeResolver.copy$default$2: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
4617 ===> phantm.phases.PhasesContext.productIterator: Iterator[Any]
5858 ===> phantm.util.UArray.productPrefix: String
5590 ===> phantm.util.API.Reader.APIPos.productArity: Int
4226 ===> phantm.dataflow.AnalysisAlgorithm.pass(transferFun: phantm.dataflow.TransferFunction[E,S]): Unit
1228 ===> phantm.ast.Trees.InterfaceDecl.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
1651 ===> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
6021 ===> phantm.util.Unserializer.recursionLimit_$eq(x$1: Int): Unit
4197 ===> phantm.cfg.Trees.PREDEC.productPrefix: String
2555 ===> phantm.ast.Trees.Constant.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
4474 ===> phantm.phases.CallGraphGeneration.CallGraph.osymToV: scala.collection.immutable.Map[Option[phantm.symbols.FunctionSymbol],phantm.phases.CallGraphGeneration.CallGraph.Vertex]
4596 ===> phantm.phases.PhasesContext.includedFiles: Set[String]
1306 ===> phantm.ast.Trees.Goto.productPrefix: String
5446 ===> phantm.types.TFloatLit.<init>(): phantm.types.TFloatLit.type
2415 ===> phantm.ast.Trees.Execute.hashCode(): Int
4538 ===> phantm.phases.NSResolver.nsContext_$eq(x$1: phantm.ast.Trees.NSIdentifier): Unit
1964 ===> phantm.ast.Trees.Mod.unapply(x$0: phantm.ast.Trees.Mod): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
4639 ===> phantm.phases.PhasesContext.apply$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
4506 ===> phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
1208 ===> phantm.ast.Trees.ClassDecl.copy$default$8: List[phantm.ast.Trees.ClassConstantDecl] @scala.annotation.unchecked.uncheckedVariance
3475 ===> phantm.cfg.Trees.VariableVar.productPrefix: String
5735 ===> phantm.util.JavaListIteratorWrapper.<init>(): phantm.util.JavaListIteratorWrapper.type
3528 ===> phantm.cfg.Trees.ObjectProperty.productArity: Int
1091 ===> phantm.ast.Trees.OAArray.unapply(x$0: phantm.ast.Trees.OAArray): Option[(phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]])]
405 ===> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
2430 ===> phantm.ast.Trees.Print.productIterator: Iterator[Any]
3193 ===> phantm.cfg.Trees.IsInt.toString(): String
2504 ===> phantm.ast.Trees.Empty.productIterator: Iterator[Any]
5460 ===> phantm.types.TBoolean.readResolve(): Object
5556 ===> phantm.types.TBottom.hashCode(): Int
1425 ===> phantm.ast.Trees.DoWhile.toString(): String
5761 ===> phantm.util.ENotice.<init>(): phantm.util.ENotice.type
5974 ===> phantm.util.URealRef.toString(): String
1478 ===> phantm.ast.Trees.Break.productIterator: Iterator[Any]
917 ===> phantm.ast.Trees.StaticMethodRef.unapply(x$0: phantm.ast.Trees.StaticMethodRef): Option[phantm.ast.Trees.Identifier]
3219 ===> phantm.cfg.Trees.IsArray.hashCode(): Int
1536 ===> phantm.ast.Trees.Global.apply(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Global
412 ===> phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
5088 ===> phantm.types.TypeTransferFunction.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
4097 ===> phantm.cfg.Trees.LEQ.productPrefix: String
1261 ===> phantm.ast.Trees.Try.apply(body: phantm.ast.Trees.Statement,catches: List[phantm.ast.Trees.Catch]): phantm.ast.Trees.Try
38 ===> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
727 ===> phantm.ast.Trees.Identifier.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
4143 ===> phantm.cfg.Trees.NOTEQUALS.productArity: Int
2385 ===> phantm.ast.Trees.Exit.toString(): String
2766 ===> phantm.ast.Trees.PHPNull.copy(): phantm.ast.Trees.PHPNull
4600 ===> phantm.phases.PhasesContext.symbol: Option[phantm.symbols.Symbol]
5435 ===> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
5420 ===> phantm.types.TIntLit.apply(value: Long): phantm.types.TIntLit
1170 ===> phantm.ast.Trees.Namespaced.unapply(x$0: phantm.ast.Trees.Namespaced): Option[(phantm.ast.Trees.NSIdentifier, List[phantm.ast.Trees.Statement])]
2931 ===> phantm.cfg.VertexImp.name_$eq(x$1: String): Unit
4221 ===> phantm.cfg.Trees.SILENCE.readResolve(): Object
1734 ===> phantm.ast.Trees.ObjectProperty.equals(x$1: Any): Boolean
4424 ===> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
409 ===> phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
753 ===> phantm.ast.Trees.NSIdentifier.productIterator: Iterator[Any]
5783 ===> phantm.util.Reporter.Error.productPrefix: String
3921 ===> phantm.cfg.Trees.New.copy$default$2: List[phantm.cfg.Trees.SimpleValue] @scala.annotation.unchecked.uncheckedVariance
2930 ===> phantm.cfg.VertexImp.name: String
5058 ===> phantm.types.TypeTransferFunction.typeError(pos: phantm.util.Positional,etyp: phantm.types.Type,vtyp: phantm.types.Type): Unit
5148 ===> phantm.types.TClass.productArity: Int
764 ===> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
2628 ===> phantm.ast.Trees.MethodCall.args: List[phantm.ast.Trees.CallArg]
2577 ===> phantm.ast.Trees.ClassConstant.productElement(x$1: Int): Any
4223 ===> phantm.dataflow.AnalysisAlgorithm.<init>(transferFun: phantm.dataflow.TransferFunction[E,S],bottomEnv: E,baseEnv: E,cfg: phantm.cfg.LabeledDirectedGraphImp[S]): phantm.dataflow.AnalysisAlgorithm[E,S]
4812 ===> phantm.symbols.GlobalSymbols.constants_$eq(x$1: scala.collection.mutable.HashMap[String,phantm.symbols.ConstantSymbol]): Unit
697 ===> phantm.ast.Trees.NSGlobal.productArity: Int
5967 ===> phantm.util.URealRef.productElement(x$1: Int): Any
5204 ===> phantm.types.ObjectIdTmp.<init>(): phantm.types.ObjectIdTmp.type
3942 ===> phantm.cfg.Trees.Clone.canEqual(x$1: Any): Boolean
2756 ===> phantm.ast.Trees.PHPString.canEqual(x$1: Any): Boolean
5427 ===> phantm.types.TFloat.productElement(x$1: Int): Any
1837 ===> phantm.ast.Trees.Clone.copy(obj: phantm.ast.Trees.Expression): phantm.ast.Trees.Clone
2933 ===> phantm.cfg.VertexImp.in: Set[phantm.cfg.EdgeImp[L]]
2425 ===> phantm.ast.Trees.Print.copy(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Print
5846 ===> phantm.util.ErrorException.<init>(): phantm.util.ErrorException.type
3890 ===> phantm.cfg.Trees.StaticMethodCall.equals(x$1: Any): Boolean
5265 ===> phantm.types.ObjectStore.toString(): String
1443 ===> phantm.ast.Trees.For.canEqual(x$1: Any): Boolean
2030 ===> phantm.ast.Trees.PostDec.toString(): String
4076 ===> phantm.cfg.Trees.SHIFTLEFT.readResolve(): Object
1908 ===> phantm.ast.Trees.Div.readResolve(): Object
1070 ===> phantm.ast.Trees.OAExpression.toString(): String
1538 ===> phantm.ast.Trees.Global.readResolve(): Object
2007 ===> phantm.ast.Trees.PreDec.productIterator: Iterator[Any]
2791 ===> phantm.ast.Trees.MCFile.toString(): String
5311 ===> phantm.types.TRealObject.injectAnyField(typ: phantm.types.Type): phantm.types.TRealObject
1635 ===> phantm.ast.Trees.Void.copy(): phantm.ast.Trees.Void
1671 ===> phantm.ast.Trees.VariableVariable.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1848 ===> phantm.ast.Trees.Clone.toString(): String
2693 ===> phantm.ast.Trees.PHPTrue.equals(x$1: Any): Boolean
1719 ===> phantm.ast.Trees.NextArrayEntry.unapply(x$0: phantm.ast.Trees.NextArrayEntry): Option[phantm.ast.Trees.Expression]
1706 ===> phantm.ast.Trees.NextArrayEntry.copy(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry
5266 ===> phantm.types.ObjectStore.apply(store: Map[phantm.types.ObjectId,phantm.types.TRealObject]): phantm.types.ObjectStore
261 ===> phantm.annotations.SourceAnnotations.Parser.Entry.readResolve(): Object
5612 ===> phantm.util.API.Writer.escapeVal(s: String): String
3731 ===> phantm.cfg.Trees.Cast.productIterator: Iterator[Any]
5095 ===> phantm.types.TypeTransferFunction.canEqual(x$1: Any): Boolean
4950 ===> phantm.types.TypeEnvironment.checkMonotonicity(vrtx: TypeEnvironment.this.Vertex,e: phantm.types.TypeEnvironment,ctx: phantm.phases.PhasesContext,inEdges: Iterable[(phantm.cfg.Trees.Statement, phantm.types.TypeEnvironment)]): Unit
2094 ===> phantm.ast.Trees.BitwiseAnd.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseAnd
4315 ===> phantm.helpers.Lint.<init>(): phantm.helpers.Lint
719 ===> phantm.ast.Trees.NSResolved.productIterator: Iterator[Any]
5036 ===> phantm.types.TypeTransferFunction.notice(msg: String,pos: phantm.util.Positional): Unit
3802 ===> phantm.cfg.Trees.ArrayCurIsValid.unapply(x$0: phantm.cfg.Trees.ArrayCurIsValid): Option[phantm.cfg.Trees.SimpleValue]
3167 ===> phantm.cfg.Trees.Isset.readResolve(): Object
5588 ===> phantm.util.API.Reader.APIPos.copy$default$1: scala.xml.Node @scala.annotation.unchecked.uncheckedVariance
378 ===> phantm.ast.STToAST.lexical_vars(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
5109 ===> phantm.types.TypeTransferFunction.$lessinit$greater$default$6: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
2013 ===> phantm.ast.Trees.PreDec.toString(): String
513 ===> phantm.ast.Trees.PropertyDecl.v: phantm.ast.Trees.Identifier
1350 ===> phantm.ast.Trees.Alternatives.apply(blocks: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Alternatives
3181 ===> phantm.cfg.Trees.IsNull.productIterator: Iterator[Any]
1633 ===> phantm.ast.Trees.Foreach.readResolve(): Object
1236 ===> phantm.ast.Trees.InterfaceDecl.canEqual(x$1: Any): Boolean
2216 ===> phantm.ast.Trees.BitwiseNot.toString(): String
1591 ===> phantm.ast.Trees.Unset.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Unset
1863 ===> phantm.ast.Trees.Plus.hashCode(): Int
1751 ===> phantm.ast.Trees.DynamicObjectProperty.hashCode(): Int
2165 ===> phantm.ast.Trees.ShiftLeft.unapply(x$0: phantm.ast.Trees.ShiftLeft): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
1723 ===> phantm.ast.Trees.ObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty
1860 ===> phantm.ast.Trees.Plus.productElement(x$1: Int): Any
5074 ===> phantm.types.TypeTransferFunction.limitType(typ: phantm.types.Type,l: Int): phantm.types.Type
1986 ===> phantm.ast.Trees.PostInc.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
2406 ===> phantm.ast.Trees.Execute.value: String
2464 ===> phantm.ast.Trees.Closure.copy$default$2: List[phantm.ast.Trees.ArgumentDecl] @scala.annotation.unchecked.uncheckedVariance
495 ===> phantm.ast.Trees.MethodDecl.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
3813 ===> phantm.cfg.Trees.Constant.hashCode(): Int
1559 ===> phantm.ast.Trees.Echo.copy$default$1: List[phantm.ast.Trees.Expression] @scala.annotation.unchecked.uncheckedVariance
6029 ===> phantm.util.Unserializer.consumeFloat: Float
1975 ===> phantm.ast.Trees.PreInc.hashCode(): Int
5920 ===> phantm.util.UInt.toString(): String
681 ===> phantm.ast.Trees.MFStatic.readResolve(): Object
1474 ===> phantm.ast.Trees.Break.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4900 ===> phantm.symbols.ClassSymbol.static_properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
5639 ===> phantm.util.DumpCollector.ctx: phantm.phases.PhasesContext
1138 ===> phantm.ast.Trees.NamespaceStart.copy(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NamespaceStart
1825 ===> phantm.ast.Trees.Assign.productIterator: Iterator[Any]
1690 ===> phantm.ast.Trees.ArrayEntry.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2852 ===> phantm.ast.Trees.MCFunction.apply(): phantm.ast.Trees.MCFunction
3675 ===> phantm.cfg.Trees.PHPNull.readResolve(): Object
65 ===> phantm.Settings.hashCode(): Int
5874 ===> phantm.util.UObject.entries_$eq(x$1: Map[phantm.util.UValue,phantm.util.UValue]): Unit
5400 ===> phantm.types.TInt.productIterator: Iterator[Any]
4117 ===> phantm.cfg.Trees.GT.productElement(x$1: Int): Any
5877 ===> phantm.util.UObject.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1770 ===> phantm.ast.Trees.ClassProperty.hashCode(): Int
3655 ===> phantm.cfg.Trees.PHPFalse.hashCode(): Int
641 ===> phantm.ast.Trees.MFPublic.productIterator: Iterator[Any]
5644 ===> phantm.util.DumpCollector.files: List[String]
4919 ===> phantm.symbols.VariableSymbol.name: String
5633 ===> phantm.util.ConstantsResolver.<init>(): phantm.util.ConstantsResolver.type
1558 ===> phantm.ast.Trees.Echo.copy(exprs: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Echo
4951 ===> phantm.types.TypeEnvironment.equals(e: Any): Boolean
2118 ===> phantm.ast.Trees.BitwiseOr.productElement(x$1: Int): Any
3166 ===> phantm.cfg.Trees.Isset.toString(): String
3066 ===> phantm.cfg.Trees.Assign.copy(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
368 ===> phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
426 ===> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
2365 ===> phantm.ast.Trees.Silence.toString(): String
4091 ===> phantm.cfg.Trees.LT.productIterator: Iterator[Any]
548 ===> phantm.ast.Trees.ClassConstantDecl.<init>(): phantm.ast.Trees.ClassConstantDecl.type
5323 ===> phantm.types.StringKey.copy(v: String): phantm.types.StringKey
1490 ===> phantm.ast.Trees.Continue.copy(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Continue
381 ===> phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable]
5697 ===> phantm.util.IncludeResolver.consumeInt: Int
3315 ===> phantm.cfg.Trees.Return.productArity: Int
5812 ===> phantm.util.Reporter.clearTag(tag: phantm.util.ErrorTag): Unit
2222 ===> phantm.ast.Trees.Equal.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal
4017 ===> phantm.cfg.Trees.BOOLEANAND.productArity: Int
2634 ===> phantm.ast.Trees.MethodCall.productPrefix: String
3273 ===> phantm.cfg.Trees.AssumeProperty.apply(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeProperty
4703 ===> phantm.phases.CollectSymbols.node: phantm.ast.Trees.Tree
5328 ===> phantm.types.StringKey.productIterator: Iterator[Any]
1332 ===> phantm.ast.Trees.LabelDecl.toString(): String
3223 ===> phantm.cfg.Trees.IsString.productPrefix: String
3291 ===> phantm.cfg.Trees.AssumeNotProperty.apply(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeNotProperty
2897 ===> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
2353 ===> phantm.ast.Trees.Cast.unapply(x$0: phantm.ast.Trees.Cast): Option[(phantm.ast.Trees.CastType, phantm.ast.Trees.Expression)]
658 ===> phantm.ast.Trees.MFPrivate.productElement(x$1: Int): Any
71 ===> phantm.InlineNone.productArity: Int
5581 ===> phantm.util.API.<init>(): phantm.util.API.type
1454 ===> phantm.ast.Trees.Switch.<init>(expr: phantm.ast.Trees.Expression,cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]): phantm.ast.Trees.Switch
5510 ===> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
1772 ===> phantm.ast.Trees.ClassProperty.equals(x$1: Any): Boolean
4603 ===> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
3536 ===> phantm.cfg.Trees.ObjectProperty.apply(obj: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ObjectProperty
4933 ===> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
560 ===> phantm.ast.Trees.ConstantDecl.productArity: Int
3796 ===> phantm.cfg.Trees.ArrayCurIsValid.canEqual(x$1: Any): Boolean
1686 ===> phantm.ast.Trees.ArrayEntry.index: phantm.ast.Trees.Expression
897 ===> phantm.ast.Trees.DynamicMethodRef.<init>(): phantm.ast.Trees.DynamicMethodRef.type
3347 ===> phantm.cfg.Trees.Identifier.productElement(x$1: Int): Any
5975 ===> phantm.util.URealRef.apply(i: Int): phantm.util.URealRef
1660 ===> phantm.ast.Trees.SimpleVariable.hashCode(): Int
3868 ===> phantm.cfg.Trees.FunctionCall.canEqual(x$1: Any): Boolean
2274 ===> phantm.ast.Trees.Smaller.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Smaller
439 ===> phantm.ast.STToAST.equals(x$1: Any): Boolean
5995 ===> phantm.util.UFalse.readResolve(): Object
45 ===> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
948 ===> phantm.ast.Trees.CastArray.productPrefix: String
3209 ===> phantm.cfg.Trees.IsBool.canEqual(x$1: Any): Boolean
3836 ===> phantm.cfg.Trees.ClassConstant.unapply(x$0: phantm.cfg.Trees.ClassConstant): Option[(phantm.cfg.Trees.ClassRef, phantm.ast.Trees.Identifier)]
2817 ===> phantm.ast.Trees.MCDir.hashCode(): Int
1982 ===> phantm.ast.Trees.PreInc.readResolve(): Object
2584 ===> phantm.ast.Trees.ClassConstant.toString(): String
4783 ===> phantm.symbols.Symbol.id: Int
4014 ===> phantm.cfg.Trees.BOOLEANAND.<init>(): phantm.cfg.Trees.BOOLEANAND.type
3932 ===> phantm.cfg.Trees.New.unapply(x$0: phantm.cfg.Trees.New): Option[(phantm.cfg.Trees.ClassRef, List[phantm.cfg.Trees.SimpleValue])]
2827 ===> phantm.ast.Trees.MCClass.productPrefix: String
3848 ===> phantm.cfg.Trees.Ternary.productElement(x$1: Int): Any
1977 ===> phantm.ast.Trees.PreInc.equals(x$1: Any): Boolean
5239 ===> phantm.types.ObjectId.equals(x$1: Any): Boolean
1378 ===> phantm.ast.Trees.If.productPrefix: String
3736 ===> phantm.cfg.Trees.Cast.toString(): String
4805 ===> phantm.symbols.GlobalSymbols.classes: scala.collection.mutable.HashMap[String,phantm.symbols.ClassSymbol]
3002 ===> phantm.cfg.LabeledDirectedGraphImp.Group.n: Int
3871 ===> phantm.cfg.Trees.FunctionCall.<init>(): phantm.cfg.Trees.FunctionCall.type
374 ===> phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement]
422 ===> phantm.ast.STToAST.exit_expr(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression]
453 ===> phantm.ast.Trees.Program.productArity: Int
3000 ===> phantm.cfg.LabeledDirectedGraphImp.Group.vertIn: LabeledDirectedGraphImp.this.Vertex
5789 ===> phantm.util.Reporter.Error.<init>(): Reporter.this.Error.type
511 ===> phantm.ast.Trees.MethodDecl.unapply(x$0: phantm.ast.Trees.MethodDecl): Option[(phantm.ast.Trees.Identifier, List[phantm.ast.Trees.MemberFlag], List[phantm.ast.Trees.ArgumentDecl], Boolean, Option[phantm.ast.Trees.Statement])]
2734 ===> phantm.ast.Trees.PHPFloat.copy$default$1: Float @scala.annotation.unchecked.uncheckedVariance
1227 ===> phantm.ast.Trees.InterfaceDecl.copy(name: phantm.ast.Trees.NSIdentifier,interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.InterfaceDecl
5888 ===> phantm.util.UObject.<init>(): phantm.util.UObject.type
1855 ===> phantm.ast.Trees.Plus.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus
2142 ===> phantm.ast.Trees.BitwiseXor.equals(x$1: Any): Boolean
3959 ===> phantm.cfg.Trees.PLUS.readResolve(): Object
3294 ===> phantm.cfg.Trees.Print.rhs: phantm.cfg.Trees.SimpleValue
410 ===> phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
4203 ===> phantm.cfg.Trees.PREDEC.readResolve(): Object
2107 ===> phantm.ast.Trees.BitwiseAnd.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseAnd
5065 ===> phantm.types.TypeTransferFunction.expOrRef(v1: phantm.cfg.Trees.SimpleValue,typs: phantm.types.Type*): phantm.types.Type
1123 ===> phantm.ast.Trees.FunctionDecl.productPrefix: String
3930 ===> phantm.cfg.Trees.New.toString(): String
4495 ===> phantm.phases.CallGraphGeneration.hashCode(): Int
1357 ===> phantm.ast.Trees.Block.productPrefix: String
2703 ===> phantm.ast.Trees.PHPFalse.productElement(x$1: Int): Any
5934 ===> phantm.util.UFloat.productIterator: Iterator[Any]
1458 ===> phantm.ast.Trees.Switch.productPrefix: String
3145 ===> phantm.cfg.Trees.Assume.copy$default$3: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
5493 ===> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
3832 ===> phantm.cfg.Trees.ClassConstant.equals(x$1: Any): Boolean
703 ===> phantm.ast.Trees.NSGlobal.readResolve(): Object
3078 ===> phantm.cfg.Trees.Assign.apply(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
5952 ===> phantm.util.UObjRef.canEqual(x$1: Any): Boolean
4227 ===> phantm.dataflow.AnalysisAlgorithm.detectUnreachable(transferFun: phantm.dataflow.TransferFunction[E,S]): List[S]
4537 ===> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
4885 ===> phantm.symbols.IfaceSymbol.parents: List[phantm.symbols.IfaceSymbol]
5031 ===> phantm.types.TypeTransferFunction.collectGlobals: Boolean
2569 ===> phantm.ast.Trees.ClassConstant.cl: phantm.ast.Trees.ClassRef
6028 ===> phantm.util.Unserializer.consumeInt: Int
4016 ===> phantm.cfg.Trees.BOOLEANAND.productPrefix: String
3233 ===> phantm.cfg.Trees.IsObject.productArity: Int
636 ===> phantm.ast.Trees.MFAbstract.readResolve(): Object
1684 ===> phantm.ast.Trees.VariableVariable.readResolve(): Object
4577 ===> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
4650 ===> phantm.phases.PureStatementsPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
1611 ===> phantm.ast.Trees.Foreach.keybyref: Boolean
2937 ===> phantm.cfg.VertexImp.toString(): String
2223 ===> phantm.ast.Trees.Equal.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal
1658 ===> phantm.ast.Trees.SimpleVariable.productIterator: Iterator[Any]
5867 ===> phantm.util.UArray.toString(): String
2650 ===> phantm.ast.Trees.StaticMethodCall.<init>(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
3073 ===> phantm.cfg.Trees.Assign.canEqual(x$1: Any): Boolean
966 ===> phantm.ast.Trees.CastObject.productPrefix: String
4202 ===> phantm.cfg.Trees.PREDEC.hashCode(): Int
5954 ===> phantm.util.UObjRef.toString(): String
2599 ===> phantm.ast.Trees.New.hashCode(): Int
4487 ===> phantm.phases.CallGraphGeneration.copy$default$1: phantm.ast.Trees.Tree @scala.annotation.unchecked.uncheckedVariance
2518 ===> phantm.ast.Trees.Include.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5257 ===> phantm.types.ObjectStore.productPrefix: String
4288 ===> phantm.helpers.CFGGraphs.pctx: phantm.phases.PhasesContext
872 ===> phantm.ast.Trees.StaticFunctionRef.productArity: Int
1014 ===> phantm.ast.Trees.Label.<init>(): phantm.ast.Trees.Label.type
2426 ===> phantm.ast.Trees.Print.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5762 ===> phantm.util.ENotice.productPrefix: String
4559 ===> phantm.phases.PhaseException.<init>(ph: phantm.phases.Phase,error: String): phantm.phases.PhaseException
2299 ===> phantm.ast.Trees.InstanceOf.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.ClassRef): phantm.ast.Trees.InstanceOf
4214 ===> phantm.cfg.Trees.SILENCE.toString(): String
3778 ===> phantm.cfg.Trees.ArrayCurKey.productElement(x$1: Int): Any
4672 ===> phantm.phases.PureStatementsChecks.unapply(x$0: phantm.phases.PureStatementsChecks): Option[(phantm.ast.Trees.Tree, phantm.phases.PhasesContext)]
4610 ===> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
5693 ===> phantm.util.IncludeResolver.end: Unit
5214 ===> phantm.types.ObjectIdDump.productPrefix: String
5925 ===> phantm.util.UInt.unapply(x$0: phantm.util.UInt): Option[Int]
731 ===> phantm.ast.Trees.Identifier.productIterator: Iterator[Any]
3027 ===> phantm.cfg.LabeledDirectedGraphImp.Group.readResolve(): Object
5635 ===> phantm.util.ConstantsResolver.apply(ast: phantm.ast.Trees.Program,issueErrors: Boolean,ctx: phantm.phases.PhasesContext): phantm.util.ConstantsResolver
1370 ===> phantm.ast.Trees.If.cond: phantm.ast.Trees.Expression
2120 ===> phantm.ast.Trees.BitwiseOr.canEqual(x$1: Any): Boolean
1117 ===> phantm.ast.Trees.FunctionDecl.<init>(name: phantm.ast.Trees.NSIdentifier,args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.FunctionDecl
5546 ===> phantm.types.TTop.hashCode(): Int
4760 ===> phantm.phases.TypeFlowAnalysis.copy(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.TypeFlowAnalysis
3900 ===> phantm.cfg.Trees.MethodCall.copy(receiver: phantm.cfg.Trees.SimpleValue,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.MethodCall
2742 ===> phantm.ast.Trees.PHPFloat.equals(x$1: Any): Boolean
3352 ===> phantm.cfg.Trees.Identifier.<init>(): phantm.cfg.Trees.Identifier.type
1870 ===> phantm.ast.Trees.Plus.readResolve(): Object
3664 ===> phantm.cfg.Trees.PHPNull.productPrefix: String
1661 ===> phantm.ast.Trees.SimpleVariable.toString(): String
4296 ===> phantm.helpers.CFGGraphs.copy(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.helpers.CFGGraphs
2281 ===> phantm.ast.Trees.SmallerEqual.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
716 ===> phantm.ast.Trees.NSResolved.productPrefix: String
563 ===> phantm.ast.Trees.ConstantDecl.canEqual(x$1: Any): Boolean
2510 ===> phantm.ast.Trees.Empty.toString(): String
5379 ===> phantm.types.TArray.toString(): String
3405 ===> phantm.cfg.Trees.ClassRefFixed.toString(): String
88 ===> phantm.InlineFull.productPrefix: String
1820 ===> phantm.ast.Trees.Assign.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2417 ===> phantm.ast.Trees.Execute.equals(x$1: Any): Boolean
3236 ===> phantm.cfg.Trees.IsObject.canEqual(x$1: Any): Boolean
506 ===> phantm.ast.Trees.MethodDecl.toString(): String
1621 ===> phantm.ast.Trees.Foreach.productPrefix: String
3386 ===> phantm.cfg.Trees.ClassRefDynamic.equals(x$1: Any): Boolean
1401 ===> phantm.ast.Trees.While.canEqual(x$1: Any): Boolean
5687 ===> phantm.util.GlobalAnalysisResults.inlineStack: Set[phantm.symbols.FunctionSymbol]
866 ===> phantm.ast.Trees.DynamicFunctionRef.readResolve(): Object
3134 ===> phantm.cfg.Trees.Error.toString(): String
1762 ===> phantm.ast.Trees.ClassProperty.copy(cl: phantm.ast.Trees.ClassRef,property: phantm.ast.Trees.Variable): phantm.ast.Trees.ClassProperty
3240 ===> phantm.cfg.Trees.IsScalar.<init>(): phantm.cfg.Trees.IsScalar.type
1398 ===> phantm.ast.Trees.While.productArity: Int
5531 ===> phantm.types.TNull.productPrefix: String
2723 ===> phantm.ast.Trees.PHPInteger.hashCode(): Int
913 ===> phantm.ast.Trees.StaticMethodRef.equals(x$1: Any): Boolean
1584 ===> phantm.ast.Trees.Html.equals(x$1: Any): Boolean
111 ===> phantm.Settings.unapply(x$0: phantm.Settings): Option[(Int, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, List[String], List[String], Set[String], Set[String], List[String], List[String], Option[String], Option[String], Option[String], phantm.InlineMode, Boolean, Boolean)]
2487 ===> phantm.ast.Trees.Isset.productIterator: Iterator[Any]
2972 ===> phantm.cfg.EdgeImp.unapply[L](x$0: phantm.cfg.EdgeImp[L]): Option[(phantm.cfg.VertexImp[L], L, phantm.cfg.VertexImp[L])]
700 ===> phantm.ast.Trees.NSGlobal.canEqual(x$1: Any): Boolean
4759 ===> phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean
3495 ===> phantm.cfg.Trees.ArrayEntry.productElement(x$1: Int): Any
4825 ===> phantm.symbols.FunctionSymbol.name: String
3971 ===> phantm.cfg.Trees.MULT.productPrefix: String
1642 ===> phantm.ast.Trees.Void.toString(): String
2329 ===> phantm.ast.Trees.Ternary.toString(): String
4128 ===> phantm.cfg.Trees.EQUALS.canEqual(x$1: Any): Boolean
3221 ===> phantm.cfg.Trees.IsArray.readResolve(): Object
3360 ===> phantm.cfg.Trees.FuncRef.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
5021 ===> phantm.types.TypeLattice.productArity: Int
1493 ===> phantm.ast.Trees.Continue.productArity: Int
81 ===> phantm.InlineLeaves.productElement(x$1: Int): Any
3021 ===> phantm.cfg.LabeledDirectedGraphImp.Group.toString(): String
1182 ===> phantm.ast.Trees.Import.canEqual(x$1: Any): Boolean
1853 ===> phantm.ast.Trees.Plus.rhs: phantm.ast.Trees.Expression
1465 ===> phantm.ast.Trees.Switch.equals(x$1: Any): Boolean
1892 ===> phantm.ast.Trees.Div.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Div
253 ===> phantm.annotations.SourceAnnotations.Parser.Entry.canEqual(x$1: Any): Boolean
1874 ===> phantm.ast.Trees.Minus.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
854 ===> phantm.ast.Trees.DynamicFunctionRef.productPrefix: String
616 ===> phantm.ast.Trees.THObject.productElement(x$1: Int): Any
1973 ===> phantm.ast.Trees.PreInc.productIterator: Iterator[Any]
5089 ===> phantm.types.TypeTransferFunction.copy$default$6: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
4685 ===> phantm.phases.SymContext.<init>(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
4944 ===> phantm.types.TypeEnvironment.setObject(id: phantm.types.ObjectId,ot: phantm.types.TRealObject): phantm.types.TypeEnvironment
2765 ===> phantm.ast.Trees.PHPNull.<init>(): phantm.ast.Trees.PHPNull
1930 ===> phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
1532 ===> phantm.ast.Trees.Global.toString(): String
2683 ===> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
3035 ===> phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer
5363 ===> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
4790 ===> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
3235 ===> phantm.cfg.Trees.IsObject.productIterator: Iterator[Any]
1666 ===> phantm.ast.Trees.SimpleVariable.unapply(x$0: phantm.ast.Trees.SimpleVariable): Option[phantm.ast.Trees.Identifier]
1407 ===> phantm.ast.Trees.While.apply(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement): phantm.ast.Trees.While
5519 ===> phantm.types.TResource.<init>(): phantm.types.TResource.type
4563 ===> phantm.phases.PhaseException.productPrefix: String
2981 ===> phantm.cfg.LabeledDirectedGraphImp.edges: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
5450 ===> phantm.types.TFloatLit.readResolve(): Object
2258 ===> phantm.ast.Trees.Smaller.lhs: phantm.ast.Trees.Expression
5689 ===> phantm.util.IncludeResolver.<init>(): phantm.util.IncludeResolver.type
199 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productIterator: Iterator[Any]
490 ===> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
4819 ===> phantm.symbols.GlobalSymbols.lookupConstant(n: String): Option[phantm.symbols.ConstantSymbol]
689 ===> phantm.ast.Trees.NSNone.productIterator: Iterator[Any]
2716 ===> phantm.ast.Trees.PHPInteger.copy(value: Long): phantm.ast.Trees.PHPInteger
4178 ===> phantm.cfg.Trees.PREINC.toString(): String
2004 ===> phantm.ast.Trees.PreDec.productPrefix: String
5778 ===> phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean
5367 ===> phantm.types.TArray.inject(index: phantm.types.ArrayKey,typ: phantm.types.Type,maybe: Boolean): phantm.types.TArray
633 ===> phantm.ast.Trees.MFAbstract.canEqual(x$1: Any): Boolean
5287 ===> phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
3547 ===> phantm.cfg.Trees.VariableClassProperty.productElement(x$1: Int): Any
1491 ===> phantm.ast.Trees.Continue.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
861 ===> phantm.ast.Trees.DynamicFunctionRef.equals(x$1: Any): Boolean
2778 ===> phantm.ast.Trees.PHPNull.unapply(x$0: phantm.ast.Trees.PHPNull): Boolean
4365 ===> phantm.phases.CheckContext.productPrefix: String
2143 ===> phantm.ast.Trees.BitwiseXor.<init>(): phantm.ast.Trees.BitwiseXor.type
2905 ===> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
3953 ===> phantm.cfg.Trees.PLUS.productPrefix: String
4848 ===> phantm.symbols.MethodSymbol.cs: phantm.symbols.ClassSymbol
4409 ===> phantm.phases.ASTCollector.classesDecls: List[phantm.ast.Trees.ClassDecl]
4189 ===> phantm.cfg.Trees.POSTINC.productArity: Int
1826 ===> phantm.ast.Trees.Assign.canEqual(x$1: Any): Boolean
4941 ===> phantm.types.TypeEnvironment.lookup(v: phantm.cfg.Trees.SimpleVariable): Option[phantm.types.Type]
5412 ===> phantm.types.TIntLit.productElement(x$1: Int): Any
3611 ===> phantm.cfg.Trees.PHPString.productIterator: Iterator[Any]
2949 ===> phantm.cfg.VertexImp.apply[L](name: String): phantm.cfg.VertexImp[L]
3362 ===> phantm.cfg.Trees.FuncRef.productArity: Int
4960 ===> phantm.types.TypeFlowAnalyzer.thisObj: Option[phantm.types.TObjectRef]
486 ===> phantm.ast.Trees.ArgumentDecl.unapply(x$0: phantm.ast.Trees.ArgumentDecl): Option[(phantm.ast.Trees.SimpleVariable, Option[phantm.ast.Trees.TypeHint], Option[phantm.ast.Trees.Expression], Boolean)]
3539 ===> phantm.cfg.Trees.VariableClassProperty.cl: phantm.cfg.Trees.ClassRef
2234 ===> phantm.ast.Trees.Equal.<init>(): phantm.ast.Trees.Equal.type
5366 ===> phantm.types.TArray.depth(env: phantm.types.TypeEnvironment): Int
384 ===> phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression
1824 ===> phantm.ast.Trees.Assign.productElement(x$1: Int): Any
4231 ===> phantm.dataflow.Environment.<init>(): phantm.dataflow.Environment[E,S]
3903 ===> phantm.cfg.Trees.MethodCall.copy$default$3: List[phantm.cfg.Trees.SimpleValue] @scala.annotation.unchecked.uncheckedVariance
4467 ===> phantm.phases.CallGraphGeneration.context: phantm.phases.CGContext
5870 ===> phantm.util.UArray.readResolve(): Object
3229 ===> phantm.cfg.Trees.IsString.toString(): String
5566 ===> phantm.types.TUninitialized.hashCode(): Int
3893 ===> phantm.cfg.Trees.StaticMethodCall.apply(cl: phantm.cfg.Trees.ClassRef,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.StaticMethodCall
3038 ===> phantm.cfg.Trees.<init>(): phantm.cfg.Trees.type
4093 ===> phantm.cfg.Trees.LT.hashCode(): Int
48 ===> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
3248 ===> phantm.cfg.Trees.IsScalar.readResolve(): Object
977 ===> phantm.ast.Trees.CastUnset.productElement(x$1: Int): Any
5927 ===> phantm.util.UFloat.str: Float
3335 ===> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
1495 ===> phantm.ast.Trees.Continue.productIterator: Iterator[Any]
5568 ===> phantm.types.TUninitialized.readResolve(): Object
6002 ===> phantm.util.UTrue.hashCode(): Int
1776 ===> phantm.ast.Trees.ClassProperty.unapply(x$0: phantm.ast.Trees.ClassProperty): Option[(phantm.ast.Trees.ClassRef, phantm.ast.Trees.Variable)]
2010 ===> phantm.ast.Trees.PreDec.toString(): String
5580 ===> phantm.types.TUnion.hashCode(): Int
2455 ===> phantm.ast.Trees.Eval.unapply(x$0: phantm.ast.Trees.Eval): Option[phantm.ast.Trees.Expression]
5070 ===> phantm.types.TypeTransferFunction.getCheckType$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
3846 ===> phantm.cfg.Trees.Ternary.productPrefix: String
5140 ===> phantm.types.TAnyClass.readResolve(): Object
3714 ===> phantm.cfg.Trees.SubTypeOf.canEqual(x$1: Any): Boolean
3216 ===> phantm.cfg.Trees.IsArray.productElement(x$1: Int): Any
2779 ===> phantm.ast.Trees.PHPNull.readResolve(): Object
3155 ===> phantm.cfg.Trees.Assume.apply(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
3604 ===> phantm.cfg.Trees.PHPString.value: String
2253 ===> phantm.ast.Trees.Identical.<init>(): phantm.ast.Trees.Identical.type
4784 ===> phantm.symbols.Symbol.overwriteable: Boolean
1630 ===> phantm.ast.Trees.Foreach.toString(): String
5079 ===> phantm.types.TypeTransferFunction.checkFCalls$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
2452 ===> phantm.ast.Trees.Eval.<init>(): phantm.ast.Trees.Eval.type
4670 ===> phantm.phases.PureStatementsChecks.toString(): String
4863 ===> phantm.symbols.LookupResult.visibError: Option[phantm.symbols.MemberVisibility]
3674 ===> phantm.cfg.Trees.PHPNull.unapply(x$0: phantm.cfg.Trees.PHPNull): Boolean
4528 ===> phantm.phases.NamespaceResolverPhase.description: String
3072 ===> phantm.cfg.Trees.Assign.productIterator: Iterator[Any]
5050 ===> phantm.types.TypeTransferFunction.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[(phantm.types.ArrayKey, phantm.types.Type),(phantm.types.ArrayKey, phantm.types.Type) with phantm.types.IntKey] with Serializable
1965 ===> phantm.ast.Trees.Mod.readResolve(): Object
242 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.readResolve(): Object
4835 ===> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
5841 ===> phantm.util.ErrorException.productElement(x$1: Int): Any
1985 ===> phantm.ast.Trees.PostInc.copy(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostInc
270 ===> phantm.annotations.SourceAnnotations.Parser.contains(comment: String,tag: String): Boolean
5410 ===> phantm.types.TIntLit.productPrefix: String
2828 ===> phantm.ast.Trees.MCClass.productArity: Int
3251 ===> phantm.cfg.Trees.IsResource.productArity: Int
1530 ===> phantm.ast.Trees.Global.canEqual(x$1: Any): Boolean
676 ===> phantm.ast.Trees.MFStatic.productElement(x$1: Int): Any
4319 ===> phantm.helpers.Main.output_$eq(x$1: Option[String]): Unit
4762 ===> phantm.phases.TypeFlowAnalysis.copy$default$2: phantm.ast.Trees.Tree @scala.annotation.unchecked.uncheckedVariance
2362 ===> phantm.ast.Trees.Silence.productIterator: Iterator[Any]
355 ===> phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch]
449 ===> phantm.ast.Trees.Program.combine(p2: phantm.ast.Trees.Program): phantm.ast.Trees.Program
1878 ===> phantm.ast.Trees.Minus.productArity: Int
1008 ===> phantm.ast.Trees.Label.productElement(x$1: Int): Any
1090 ===> phantm.ast.Trees.OAArray.apply(array: phantm.ast.Trees.OAScalar,indexes: List[Option[phantm.ast.Trees.Expression]]): phantm.ast.Trees.OAArray
1243 ===> phantm.ast.Trees.InterfaceDecl.unapply(x$0: phantm.ast.Trees.InterfaceDecl): Option[(phantm.ast.Trees.NSIdentifier, List[phantm.ast.Trees.StaticClassRef], List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.ClassConstantDecl])]
54 ===> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
168 ===> phantm.annotations.FunctionAnnotation.shouldInline_$eq(x$1: Boolean): Unit
3847 ===> phantm.cfg.Trees.Ternary.productArity: Int
599 ===> phantm.ast.Trees.CFFinal.readResolve(): Object
5068 ===> phantm.types.TypeTransferFunction.typeFromBinOP(v1: phantm.cfg.Trees.SimpleValue,op: phantm.cfg.Trees.BinaryOperator,v2: phantm.cfg.Trees.SimpleValue): phantm.types.Type
1220 ===> phantm.ast.Trees.ClassDecl.unapply(x$0: phantm.ast.Trees.ClassDecl): Option[(phantm.ast.Trees.NSIdentifier, phantm.ast.Trees.ClassFlag, Option[phantm.ast.Trees.StaticClassRef], List[phantm.ast.Trees.StaticClassRef], List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])]
3879 ===> phantm.cfg.Trees.StaticMethodCall.<init>(cl: phantm.cfg.Trees.ClassRef,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.StaticMethodCall
5561 ===> phantm.types.TUninitialized.productPrefix: String
1352 ===> phantm.ast.Trees.Alternatives.readResolve(): Object
1976 ===> phantm.ast.Trees.PreInc.toString(): String
2104 ===> phantm.ast.Trees.BitwiseAnd.equals(x$1: Any): Boolean
4137 ===> phantm.cfg.Trees.IDENTICAL.canEqual(x$1: Any): Boolean
4534 ===> phantm.phases.NSResolver.<init>(ast: phantm.ast.Trees.Program,constants: Set[phantm.ast.Trees.NSIdentifier],functions: Set[phantm.ast.Trees.NSIdentifier]): phantm.phases.NSResolver
2401 ===> phantm.ast.Trees.Array.<init>(): phantm.ast.Trees.Array.type
2857 ===> phantm.ast.Trees.MCMethod.productPrefix: String
347 ===> phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
5570 ===> phantm.types.TUnion.apply(ts: Iterable[phantm.types.Type]): phantm.types.Type
2910 ===> phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement]
4448 ===> phantm.phases.CallGraphPhase.flag(osym: Option[phantm.symbols.FunctionSymbol],inline: Boolean): Unit
4390 ===> phantm.phases.ASTIntegrityChecks.productIterator: Iterator[Any]
2149 ===> phantm.ast.Trees.ShiftLeft.rhs: phantm.ast.Trees.Expression
4211 ===> phantm.cfg.Trees.POSTDEC.hashCode(): Int
4653 ===> phantm.phases.PureStatementsChecks.<init>(node: phantm.ast.Trees.Tree,ctx: phantm.phases.PhasesContext): phantm.phases.PureStatementsChecks
3542 ===> phantm.cfg.Trees.VariableClassProperty.copy(cl: phantm.cfg.Trees.ClassRef,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableClassProperty
3830 ===> phantm.cfg.Trees.ClassConstant.canEqual(x$1: Any): Boolean
3059 ===> phantm.cfg.Trees.Unset.toString(): String
4692 ===> phantm.phases.SymContext.productElement(x$1: Int): Any
2429 ===> phantm.ast.Trees.Print.productElement(x$1: Int): Any
362 ===> phantm.ast.STToAST.foreach_optional_arg(n: phantm.parser.ParseNode): Option[(phantm.ast.Trees.Variable, Boolean)]
2133 ===> phantm.ast.Trees.BitwiseXor.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3399 ===> phantm.cfg.Trees.ClassRefFixed.productElement(x$1: Int): Any
4746 ===> phantm.phases.TypeAnalyzingPhase.name: String
1475 ===> phantm.ast.Trees.Break.productPrefix: String
2355 ===> phantm.ast.Trees.Silence.value: phantm.ast.Trees.Expression
5448 ===> phantm.types.TFloatLit.apply(value: Float): phantm.types.TFloatLit
926 ===> phantm.ast.Trees.CastInt.hashCode(): Int
5755 ===> phantm.util.Positional.setPos(line: Int,col: Int,file: String): Positional.this.type
4923 ===> phantm.symbols.ArgumentSymbol.optional: Boolean
250 ===> phantm.annotations.SourceAnnotations.Parser.Entry.productArity: Int
3638 ===> phantm.cfg.Trees.PHPAny.productElement(x$1: Int): Any
1266 ===> phantm.ast.Trees.Catch.body: phantm.ast.Trees.Statement
1745 ===> phantm.ast.Trees.DynamicObjectProperty.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4565 ===> phantm.phases.PhaseException.productElement(x$1: Int): Any
263 ===> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
5180 ===> phantm.types.TFunction.unapply(x$0: phantm.types.TFunction): Option[(List[(phantm.types.Type, Boolean, Boolean)], phantm.types.Type)]
2333 ===> phantm.ast.Trees.Ternary.apply(cond: phantm.ast.Trees.Expression,then: Option[phantm.ast.Trees.Expression],elze: phantm.ast.Trees.Expression): phantm.ast.Trees.Ternary
5215 ===> phantm.types.ObjectIdDump.productArity: Int
2154 ===> phantm.ast.Trees.ShiftLeft.productPrefix: String
1021 ===> phantm.ast.Trees.CallArg.<init>(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
655 ===> phantm.ast.Trees.MFPrivate.<init>(): phantm.ast.Trees.MFPrivate.type
212 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.copy$default$1: phantm.types.Type @scala.annotation.unchecked.uncheckedVariance
1733 ===> phantm.ast.Trees.ObjectProperty.toString(): String
15 ===> phantm.Settings.format: String
686 ===> phantm.ast.Trees.NSNone.productPrefix: String
2271 ===> phantm.ast.Trees.Smaller.equals(x$1: Any): Boolean
2899 ===> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
5046 ===> phantm.types.TypeTransferFunction.leq(t1: phantm.types.Type,t2: phantm.types.Type): Boolean
4531 ===> phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
4026 ===> phantm.cfg.Trees.BOOLEANOR.productArity: Int
533 ===> phantm.ast.Trees.PropertyDecl.readResolve(): Object
5282 ===> phantm.types.TObjectRef.hashCode(): Int
3703 ===> phantm.cfg.Trees.PHPEmptyArray.readResolve(): Object
2548 ===> phantm.ast.Trees.Require.toString(): String
3318 ===> phantm.cfg.Trees.Return.canEqual(x$1: Any): Boolean
1438 ===> phantm.ast.Trees.For.copy$default$4: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
4711 ===> phantm.phases.CollectSymbols.classesToPass_$eq(x$1: List[phantm.ast.Trees.ClassDecl]): Unit
2497 ===> phantm.ast.Trees.Empty.v: phantm.ast.Trees.Variable
5333 ===> phantm.types.StringKey.toString(): String
110 ===> phantm.Settings.apply(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
2695 ===> phantm.ast.Trees.PHPTrue.toString(): String
2292 ===> phantm.ast.Trees.SmallerEqual.toString(): String
3466 ===> phantm.cfg.Trees.ClassProperty.<init>(): phantm.cfg.Trees.ClassProperty.type
1320 ===> phantm.ast.Trees.LabelDecl.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.LabelDecl
713 ===> phantm.ast.Trees.NSCurrent.readResolve(): Object
4331 ===> phantm.helpers.STGraph.getId: Int
4261 ===> phantm.helpers.ASTGraph.<init>(): phantm.helpers.ASTGraph
4975 ===> phantm.types.TypeFlowAnalyzer.copy$default$7: Option[phantm.types.TObjectRef] @scala.annotation.unchecked.uncheckedVariance
3686 ===> phantm.cfg.Trees.PHPThis.toString(): String
411 ===> phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
5868 ===> phantm.util.UArray.apply(entries: Map[phantm.util.UValue,phantm.util.UValue]): phantm.util.UArray
4877 ===> phantm.symbols.LookupResult.toString(): String
2135 ===> phantm.ast.Trees.BitwiseXor.productPrefix: String
87 ===> phantm.InlineFull.<init>(): phantm.InlineFull.type
1650 ===> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
2196 ===> phantm.ast.Trees.BooleanNot.toString(): String
2477 ===> phantm.ast.Trees.Closure.apply(args: List[phantm.ast.Trees.ArgumentDecl],imports: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Closure
3008 ===> phantm.cfg.LabeledDirectedGraphImp.Group.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
4038 ===> phantm.cfg.Trees.BOOLEANXOR.canEqual(x$1: Any): Boolean
4375 ===> phantm.phases.CheckContext.apply(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
2726 ===> phantm.ast.Trees.PHPInteger.<init>(): phantm.ast.Trees.PHPInteger.type
1813 ===> phantm.ast.Trees.ExpandArray.readResolve(): Object
5884 ===> phantm.util.UObject.canEqual(x$1: Any): Boolean
2741 ===> phantm.ast.Trees.PHPFloat.toString(): String
1331 ===> phantm.ast.Trees.LabelDecl.<init>(): phantm.ast.Trees.LabelDecl.type
1029 ===> phantm.ast.Trees.CallArg.canEqual(x$1: Any): Boolean
73 ===> phantm.InlineNone.productIterator: Iterator[Any]
4928 ===> phantm.types.BaseTypeEnvironment.equals(e: Any): Boolean
1083 ===> phantm.ast.Trees.OAArray.productIterator: Iterator[Any]
5619 ===> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
2984 ===> phantm.cfg.LabeledDirectedGraphImp.E: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
4116 ===> phantm.cfg.Trees.GT.productArity: Int
189 ===> phantm.annotations.SourceAnnotations.Parser.identToType(name: String): phantm.types.Type
939 ===> phantm.ast.Trees.CastDouble.productPrefix: String
3461 ===> phantm.cfg.Trees.ClassProperty.productElement(x$1: Int): Any
879 ===> phantm.ast.Trees.StaticFunctionRef.<init>(): phantm.ast.Trees.StaticFunctionRef.type
1012 ===> phantm.ast.Trees.Label.toString(): String
558 ===> phantm.ast.Trees.ConstantDecl.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
6003 ===> phantm.util.UTrue.toString(): String
5225 ===> phantm.types.ObjectIdDump.readResolve(): Object
1310 ===> phantm.ast.Trees.Goto.canEqual(x$1: Any): Boolean
4079 ===> phantm.cfg.Trees.SHIFTRIGHT.productPrefix: String
1144 ===> phantm.ast.Trees.NamespaceStart.canEqual(x$1: Any): Boolean
4388 ===> phantm.phases.ASTIntegrityChecks.productArity: Int
1025 ===> phantm.ast.Trees.CallArg.productPrefix: String
258 ===> phantm.annotations.SourceAnnotations.Parser.Entry.toString(): String
3793 ===> phantm.cfg.Trees.ArrayCurIsValid.productArity: Int
4430 ===> phantm.phases.CFGGenerator.copy$default$2: phantm.ast.Trees.Tree @scala.annotation.unchecked.uncheckedVariance
678 ===> phantm.ast.Trees.MFStatic.canEqual(x$1: Any): Boolean
3678 ===> phantm.cfg.Trees.PHPThis.productPrefix: String
1022 ===> phantm.ast.Trees.CallArg.copy(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
3207 ===> phantm.cfg.Trees.IsBool.productElement(x$1: Int): Any
2001 ===> phantm.ast.Trees.PreDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreDec
5491 ===> phantm.types.TStringLit.value: String
4817 ===> phantm.symbols.GlobalSymbols.lookupFunction(n: String): Option[phantm.symbols.FunctionSymbol]
6011 ===> phantm.util.Unserializer.objectsStore_$eq(x$1: Map[phantm.types.ObjectId,phantm.types.TRealObject]): Unit
4024 ===> phantm.cfg.Trees.BOOLEANOR.toString(): String
238 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.<init>(): phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.type
1907 ===> phantm.ast.Trees.Div.unapply(x$0: phantm.ast.Trees.Div): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
2145 ===> phantm.ast.Trees.BitwiseXor.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseXor
1325 ===> phantm.ast.Trees.LabelDecl.productElement(x$1: Int): Any
2434 ===> phantm.ast.Trees.Print.equals(x$1: Any): Boolean
783 ===> phantm.ast.Trees.DynamicClassRef.ex: phantm.ast.Trees.Expression
433 ===> phantm.ast.STToAST.productArity: Int
1934 ===> phantm.ast.Trees.Concat.productPrefix: String
740 ===> phantm.ast.Trees.Identifier.readResolve(): Object
5742 ===> phantm.util.Positional.$init$(): Unit
4564 ===> phantm.phases.PhaseException.productArity: Int
2409 ===> phantm.ast.Trees.Execute.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3537 ===> phantm.cfg.Trees.ObjectProperty.unapply(x$0: phantm.cfg.Trees.ObjectProperty): Option[(phantm.cfg.Trees.SimpleValue, phantm.cfg.Trees.SimpleValue)]
1498 ===> phantm.ast.Trees.Continue.toString(): String
3578 ===> phantm.cfg.Trees.PHPLong.productElement(x$1: Int): Any
1961 ===> phantm.ast.Trees.Mod.<init>(): phantm.ast.Trees.Mod.type
2346 ===> phantm.ast.Trees.Cast.canEqual(x$1: Any): Boolean
4354 ===> phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
2925 ===> phantm.cfg.LabeledDirectedGraph.$plus$eq(from: LabeledDirectedGraph.this.Vertex,lab: LabelType,to: LabeledDirectedGraph.this.Vertex): Unit
5123 ===> phantm.types.Type.depth(env: phantm.types.TypeEnvironment): Int
5235 ===> phantm.types.ObjectId.productIterator: Iterator[Any]
1667 ===> phantm.ast.Trees.SimpleVariable.readResolve(): Object
688 ===> phantm.ast.Trees.NSNone.productElement(x$1: Int): Any
784 ===> phantm.ast.Trees.DynamicClassRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef
5399 ===> phantm.types.TInt.productElement(x$1: Int): Any
3645 ===> phantm.cfg.Trees.PHPAny.apply(): phantm.cfg.Trees.PHPAny
5470 ===> phantm.types.TTrue.readResolve(): Object
4036 ===> phantm.cfg.Trees.BOOLEANXOR.productElement(x$1: Int): Any
924 ===> phantm.ast.Trees.CastInt.productIterator: Iterator[Any]
5998 ===> phantm.util.UTrue.productArity: Int
5335 ===> phantm.types.StringKey.unapply(x$0: phantm.types.StringKey): Option[String]
1578 ===> phantm.ast.Trees.Html.productArity: Int
6000 ===> phantm.util.UTrue.productIterator: Iterator[Any]
3803 ===> phantm.cfg.Trees.ArrayCurIsValid.readResolve(): Object
899 ===> phantm.ast.Trees.DynamicMethodRef.apply(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef
2721 ===> phantm.ast.Trees.PHPInteger.productIterator: Iterator[Any]
5729 ===> phantm.util.JavaListIteratorWrapper.productElement(x$1: Int): Any
2454 ===> phantm.ast.Trees.Eval.apply(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Eval
5721 ===> phantm.util.IncludeResolver.equals(x$1: Any): Boolean
5060 ===> phantm.types.TypeTransferFunction.filterErrors(t: phantm.types.Type): Boolean
965 ===> phantm.ast.Trees.CastObject.<init>(): phantm.ast.Trees.CastObject.type
1980 ===> phantm.ast.Trees.PreInc.apply(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreInc
3642 ===> phantm.cfg.Trees.PHPAny.equals(x$1: Any): Boolean
4313 ===> phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit
3356 ===> phantm.cfg.Trees.Identifier.readResolve(): Object
3264 ===> phantm.cfg.Trees.AssumeProperty.productPrefix: String
1434 ===> phantm.ast.Trees.For.copy(init: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression,step: phantm.ast.Trees.Statement,then: phantm.ast.Trees.Statement): phantm.ast.Trees.For
1778 ===> phantm.ast.Trees.ListVar.vars: List[Option[phantm.ast.Trees.Variable]]
5339 ===> phantm.types.IntKey.toString(): String
4098 ===> phantm.cfg.Trees.LEQ.productArity: Int
197 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productArity: Int
3032 ===> phantm.cfg.LabeledDirectedGraphImp.toString(): String
4243 ===> phantm.dataflow.StronglyConnectedComponents.Node.lowlink_$eq(x$1: Int): Unit
4010 ===> phantm.cfg.Trees.INSTANCEOF.productIterator: Iterator[Any]
3140 ===> phantm.cfg.Trees.Assume.rhs: phantm.cfg.Trees.SimpleValue
1511 ===> phantm.ast.Trees.Return.productElement(x$1: Int): Any
5543 ===> phantm.types.TTop.productElement(x$1: Int): Any
3722 ===> phantm.cfg.Trees.Cast.to: phantm.ast.Trees.CastType
4568 ===> phantm.phases.PhaseException.hashCode(): Int
868 ===> phantm.ast.Trees.StaticFunctionRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
103 ===> phantm.InlineManual.toString(): String
3504 ===> phantm.cfg.Trees.ArrayEntry.readResolve(): Object
4971 ===> phantm.types.TypeFlowAnalyzer.copy$default$3: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
3945 ===> phantm.cfg.Trees.Clone.<init>(): phantm.cfg.Trees.Clone.type
5242 ===> phantm.types.ObjectId.apply(pos: Int,typ: phantm.types.ObjectIdType): phantm.types.ObjectId
4934 ===> phantm.types.TypeEnvironment.<init>(map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type],scope: Option[phantm.symbols.ClassSymbol],store: phantm.types.ObjectStore): phantm.types.TypeEnvironment
494 ===> phantm.ast.Trees.MethodDecl.copy(name: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.MethodDecl
30 ===> phantm.Settings.exportAPIPath: Option[String]
853 ===> phantm.ast.Trees.DynamicFunctionRef.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1872 ===> phantm.ast.Trees.Minus.rhs: phantm.ast.Trees.Expression
2859 ===> phantm.ast.Trees.MCMethod.productElement(x$1: Int): Any
2752 ===> phantm.ast.Trees.PHPString.productPrefix: String
2471 ===> phantm.ast.Trees.Closure.canEqual(x$1: Any): Boolean
843 ===> phantm.ast.Trees.VarFunctionRef.toString(): String
5572 ===> phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type]
714 ===> phantm.ast.Trees.NSResolved.<init>(): phantm.ast.Trees.NSResolved.type
3004 ===> phantm.cfg.LabeledDirectedGraphImp.Group.vertOut_$eq(x$1: Option[LabeledDirectedGraphImp.this.Vertex]): Unit
613 ===> phantm.ast.Trees.THObject.copy$default$1: phantm.ast.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
2209 ===> phantm.ast.Trees.BitwiseNot.productElement(x$1: Int): Any
747 ===> phantm.ast.Trees.NSIdentifier.copy(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
3379 ===> phantm.cfg.Trees.ClassRefDynamic.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
2677 ===> phantm.ast.Trees.VoidExpr.equals(x$1: Any): Boolean
2550 ===> phantm.ast.Trees.Require.unapply(x$0: phantm.ast.Trees.Require): Option[(phantm.ast.Trees.Expression, Boolean)]
367 ===> phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
2526 ===> phantm.ast.Trees.Include.toString(): String
245 ===> phantm.annotations.SourceAnnotations.Parser.Entry.<init>(s: String,t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.Entry
723 ===> phantm.ast.Trees.NSResolved.readResolve(): Object
5492 ===> phantm.types.TStringLit.<init>(value: String): phantm.types.TStringLit
5606 ===> phantm.util.API.Writer.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Writer
3106 ===> phantm.cfg.Trees.AssignBinary.copy(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
3767 ===> phantm.cfg.Trees.ArrayCurElement.<init>(): phantm.cfg.Trees.ArrayCurElement.type
2662 ===> phantm.ast.Trees.StaticMethodCall.equals(x$1: Any): Boolean
5146 ===> phantm.types.TClass.copy$default$1: phantm.symbols.ClassSymbol @scala.annotation.unchecked.uncheckedVariance
2887 ===> phantm.cfg.ASTToCFG.FreshName.<init>(): FreshName.type
2458 ===> phantm.ast.Trees.Closure.imports: List[phantm.ast.Trees.ArgumentDecl]
5091 ===> phantm.types.TypeTransferFunction.productPrefix: String
4127 ===> phantm.cfg.Trees.EQUALS.productIterator: Iterator[Any]
3160 ===> phantm.cfg.Trees.Isset.productPrefix: String
5019 ===> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
5307 ===> phantm.types.TRealObject.injectField(index: String,typ: phantm.types.Type,weak: Boolean,forceWeak: Boolean): phantm.types.TRealObject
3342 ===> phantm.cfg.Trees.Identifier.toString(): String
4680 ===> phantm.phases.SymbolsCollectionPhase.description: String
3194 ===> phantm.cfg.Trees.IsInt.readResolve(): Object
1199 ===> phantm.ast.Trees.ClassDecl.<init>(name: phantm.ast.Trees.NSIdentifier,flags: phantm.ast.Trees.ClassFlag,parent: Option[phantm.ast.Trees.StaticClassRef],interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],static_props: List[phantm.ast.Trees.PropertyDecl],props: List[phantm.ast.Trees.PropertyDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.ClassDecl
5801 ===> phantm.util.Reporter.errors: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]
946 ===> phantm.ast.Trees.CastDouble.readResolve(): Object
1781 ===> phantm.ast.Trees.ListVar.copy$default$1: List[Option[phantm.ast.Trees.Variable]] @scala.annotation.unchecked.uncheckedVariance
3643 ===> phantm.cfg.Trees.PHPAny.<init>(): phantm.cfg.Trees.PHPAny.type
4465 ===> phantm.phases.CGContext.readResolve(): Object
3142 ===> phantm.cfg.Trees.Assume.copy(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
5233 ===> phantm.types.ObjectId.productArity: Int
4743 ===> phantm.phases.CollectSymbols.unapply(x$0: phantm.phases.CollectSymbols): Option[(phantm.ast.Trees.Tree, phantm.phases.PhasesContext)]
3799 ===> phantm.cfg.Trees.ArrayCurIsValid.<init>(): phantm.cfg.Trees.ArrayCurIsValid.type
4316 ===> phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
2323 ===> phantm.ast.Trees.Ternary.productPrefix: String
2841 ===> phantm.ast.Trees.MCFunction.copy(): phantm.ast.Trees.MCFunction
5076 ===> phantm.types.TypeTransferFunction.protoErrors(ftyp: phantm.types.FunctionType): Int
4654 ===> phantm.phases.PureStatementsChecks.checkPures(stmts: List[phantm.ast.Trees.Statement]): Unit
4717 ===> phantm.phases.CollectSymbols.ifaceList_$eq(x$1: List[(phantm.symbols.IfaceSymbol, phantm.ast.Trees.InterfaceDecl)]): Unit
1241 ===> phantm.ast.Trees.InterfaceDecl.toString(): String
873 ===> phantm.ast.Trees.StaticFunctionRef.productElement(x$1: Int): Any
398 ===> phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
951 ===> phantm.ast.Trees.CastArray.productIterator: Iterator[Any]
339 ===> phantm.ast.STToAST.extends_from(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.StaticClassRef]
2797 ===> phantm.ast.Trees.MCLine.productPrefix: String
3367 ===> phantm.cfg.Trees.FuncRef.toString(): String
845 ===> phantm.ast.Trees.VarFunctionRef.<init>(): phantm.ast.Trees.VarFunctionRef.type
737 ===> phantm.ast.Trees.Identifier.toString(): String
4664 ===> phantm.phases.PureStatementsChecks.productIterator: Iterator[Any]
4491 ===> phantm.phases.CallGraphGeneration.productArity: Int
2833 ===> phantm.ast.Trees.MCClass.toString(): String
1221 ===> phantm.ast.Trees.ClassDecl.readResolve(): Object
5452 ===> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
5646 ===> phantm.util.DumpCollector.functions: Map[String,(String, Int)]
4599 ===> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
1145 ===> phantm.ast.Trees.NamespaceStart.hashCode(): Int
1786 ===> phantm.ast.Trees.ListVar.canEqual(x$1: Any): Boolean
4737 ===> phantm.phases.CollectSymbols.hashCode(): Int
5299 ===> phantm.types.TRealObject.depth(e: phantm.types.TypeEnvironment): Int
1426 ===> phantm.ast.Trees.DoWhile.apply(body: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression): phantm.ast.Trees.DoWhile
325 ===> phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])
5904 ===> phantm.util.UString.equals(x$1: Any): Boolean
2641 ===> phantm.ast.Trees.MethodCall.equals(x$1: Any): Boolean
848 ===> phantm.ast.Trees.VarFunctionRef.unapply(x$0: phantm.ast.Trees.VarFunctionRef): Option[phantm.ast.Trees.Variable]
291 ===> phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl
2676 ===> phantm.ast.Trees.VoidExpr.toString(): String
3245 ===> phantm.cfg.Trees.IsScalar.canEqual(x$1: Any): Boolean
2922 ===> phantm.cfg.LabeledDirectedGraph.V: Set[LabeledDirectedGraph.this.Vertex]
5249 ===> phantm.types.ObjectStore.lookup(id: phantm.types.ObjectId): phantm.types.TRealObject
5099 ===> phantm.types.TypeTransferFunction.<init>(): phantm.types.TypeTransferFunction.type
2651 ===> phantm.ast.Trees.StaticMethodCall.copy(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
4771 ===> phantm.phases.TypeFlowAnalysis.<init>(): phantm.phases.TypeFlowAnalysis.type
3705 ===> phantm.cfg.Trees.SubTypeOf.cl: phantm.cfg.Trees.ClassRef
174 ===> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
1139 ===> phantm.ast.Trees.NamespaceStart.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
1050 ===> phantm.ast.Trees.OAIdentifier.toString(): String
4477 ===> phantm.phases.CallGraphGeneration.CallGraph.vToOsym_$eq(x$1: scala.collection.immutable.Map[phantm.phases.CallGraphGeneration.CallGraph.Vertex,Option[phantm.symbols.FunctionSymbol]]): Unit
3673 ===> phantm.cfg.Trees.PHPNull.apply(): phantm.cfg.Trees.PHPNull
1419 ===> phantm.ast.Trees.DoWhile.productIterator: Iterator[Any]
3928 ===> phantm.cfg.Trees.New.equals(x$1: Any): Boolean
5949 ===> phantm.util.UObjRef.productArity: Int
692 ===> phantm.ast.Trees.NSNone.toString(): String
4734 ===> phantm.phases.CollectSymbols.productElement(x$1: Int): Any
4510 ===> phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
5834 ===> phantm.util.ErrorException.copy(en: Int,nn: Int,etn: Int,ntn: Int): phantm.util.ErrorException
105 ===> phantm.Settings.<init>(): phantm.Settings.type
1948 ===> phantm.ast.Trees.Mod.rhs: phantm.ast.Trees.Expression
1032 ===> phantm.ast.Trees.CallArg.equals(x$1: Any): Boolean
5524 ===> phantm.types.TResource.productIterator: Iterator[Any]
1185 ===> phantm.ast.Trees.Import.equals(x$1: Any): Boolean
2102 ===> phantm.ast.Trees.BitwiseAnd.hashCode(): Int
3647 ===> phantm.cfg.Trees.PHPAny.readResolve(): Object
492 ===> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
3316 ===> phantm.cfg.Trees.Return.productElement(x$1: Int): Any
3581 ===> phantm.cfg.Trees.PHPLong.hashCode(): Int
1096 ===> phantm.ast.Trees.OAMethod.copy(name: phantm.ast.Trees.ObjectAccess,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.OAMethod
3754 ===> phantm.cfg.Trees.ArrayNext.unapply(x$0: phantm.cfg.Trees.ArrayNext): Option[phantm.cfg.Trees.SimpleValue]
984 ===> phantm.ast.Trees.InitVariable.init: Option[phantm.ast.Trees.Expression]
1564 ===> phantm.ast.Trees.Echo.canEqual(x$1: Any): Boolean
3862 ===> phantm.cfg.Trees.FunctionCall.copy$default$1: phantm.cfg.Trees.FuncRef @scala.annotation.unchecked.uncheckedVariance
1755 ===> phantm.ast.Trees.DynamicObjectProperty.toString(): String
5156 ===> phantm.types.TClass.apply(cs: phantm.symbols.ClassSymbol): phantm.types.TClass
4698 ===> phantm.phases.SymContext.<init>(): phantm.phases.SymContext.type
4682 ===> phantm.phases.SymContext.varScope: phantm.symbols.Scope
3633 ===> phantm.cfg.Trees.PHPTrue.readResolve(): Object
2876 ===> phantm.ast.Trees.MCNamespace.canEqual(x$1: Any): Boolean
6013 ===> phantm.util.Unserializer.chars_$eq(x$1: List[Char]): Unit
3562 ===> phantm.cfg.Trees.NoVar.productIterator: Iterator[Any]
4645 ===> phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq
312 ===> phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit
4236 ===> phantm.dataflow.StronglyConnectedComponents.Node.v: StronglyConnectedComponents.this.Vertex
2527 ===> phantm.ast.Trees.Include.equals(x$1: Any): Boolean
5787 ===> phantm.util.Reporter.Error.canEqual(x$1: Any): Boolean
2546 ===> phantm.ast.Trees.Require.equals(x$1: Any): Boolean
5512 ===> phantm.types.TAny.productArity: Int
2704 ===> phantm.ast.Trees.PHPFalse.productIterator: Iterator[Any]
5022 ===> phantm.types.TypeLattice.productElement(x$1: Int): Any
403 ===> phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar
1334 ===> phantm.ast.Trees.LabelDecl.unapply(x$0: phantm.ast.Trees.LabelDecl): Option[phantm.ast.Trees.Identifier]
1100 ===> phantm.ast.Trees.OAMethod.productArity: Int
2499 ===> phantm.ast.Trees.Empty.copy(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Empty
4977 ===> phantm.types.TypeFlowAnalyzer.productArity: Int
14 ===> phantm.Settings.verbosity: Int
2567 ===> phantm.ast.Trees.Constant.unapply(x$0: phantm.ast.Trees.Constant): Option[phantm.ast.Trees.NSIdentifier]
4583 ===> phantm.phases.PhaseSeq.productIterator: Iterator[Any]
5288 ===> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
363 ===> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
3951 ===> phantm.cfg.Trees.PLUS.<init>(): phantm.cfg.Trees.PLUS.type
487 ===> phantm.ast.Trees.ArgumentDecl.readResolve(): Object
1193 ===> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
811 ===> phantm.ast.Trees.StaticClassRef.equals(x$1: Any): Boolean
3854 ===> phantm.cfg.Trees.Ternary.toString(): String
2800 ===> phantm.ast.Trees.MCLine.productIterator: Iterator[Any]
3383 ===> phantm.cfg.Trees.ClassRefDynamic.productIterator: Iterator[Any]
4936 ===> phantm.types.TypeEnvironment.<init>(): phantm.types.TypeEnvironment
2249 ===> phantm.ast.Trees.Identical.canEqual(x$1: Any): Boolean
4401 ===> phantm.phases.ASTPruningPhase.name: String
3152 ===> phantm.cfg.Trees.Assume.equals(x$1: Any): Boolean
1451 ===> phantm.ast.Trees.For.readResolve(): Object
2591 ===> phantm.ast.Trees.New.copy(cl: phantm.ast.Trees.ClassRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.New
759 ===> phantm.ast.Trees.NSIdentifier.toString(): String
3713 ===> phantm.cfg.Trees.SubTypeOf.productIterator: Iterator[Any]
5162 ===> phantm.types.TFunctionAny.ret: phantm.types.TAny.type
2164 ===> phantm.ast.Trees.ShiftLeft.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftLeft
735 ===> phantm.ast.Trees.Identifier.equals(x$1: Any): Boolean
3468 ===> phantm.cfg.Trees.ClassProperty.apply(symbol: phantm.symbols.PropertySymbol): phantm.cfg.Trees.ClassProperty
2854 ===> phantm.ast.Trees.MCFunction.readResolve(): Object
955 ===> phantm.ast.Trees.CastArray.readResolve(): Object
4792 ===> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
2440 ===> phantm.ast.Trees.Eval.value: phantm.ast.Trees.Expression
5821 ===> phantm.util.Reporter.get: phantm.util.Reporter
4828 ===> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
2396 ===> phantm.ast.Trees.Array.productIterator: Iterator[Any]
3771 ===> phantm.cfg.Trees.ArrayCurElement.readResolve(): Object
2788 ===> phantm.ast.Trees.MCFile.toString(): String
1531 ===> phantm.ast.Trees.Global.hashCode(): Int
1518 ===> phantm.ast.Trees.Return.toString(): String
597 ===> phantm.ast.Trees.CFFinal.hashCode(): Int
978 ===> phantm.ast.Trees.CastUnset.productIterator: Iterator[Any]
2079 ===> phantm.ast.Trees.BooleanXor.productArity: Int
1774 ===> phantm.ast.Trees.ClassProperty.toString(): String
16 ===> phantm.Settings.resolveIncludes: Boolean
5001 ===> phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type
6007 ===> phantm.util.Unserializer.valueStore_$eq(x$1: List[phantm.util.UValue]): Unit
5194 ===> phantm.types.ObjectIdTmp.toString(): String
4756 ===> phantm.phases.TypeFlowAnalysis.getCFG(sym: Option[phantm.symbols.FunctionSymbol]): phantm.cfg.ControlFlowGraph
348 ===> phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
5681 ===> phantm.util.GlobalAnalysisResults.endGlobals: Option[phantm.types.TypeEnvironment]
2332 ===> phantm.ast.Trees.Ternary.toString(): String
2285 ===> phantm.ast.Trees.SmallerEqual.productElement(x$1: Int): Any
2825 ===> phantm.ast.Trees.MCClass.<init>(): phantm.ast.Trees.MCClass
3339 ===> phantm.cfg.Trees.Identifier.<init>(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier
5482 ===> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
720 ===> phantm.ast.Trees.NSResolved.canEqual(x$1: Any): Boolean
2877 ===> phantm.ast.Trees.MCNamespace.hashCode(): Int
1603 ===> phantm.ast.Trees.Unset.toString(): String
5251 ===> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
5907 ===> phantm.util.UString.apply(str: String): phantm.util.UString
5202 ===> phantm.types.ObjectIdTmp.hashCode(): Int
3293 ===> phantm.cfg.Trees.AssumeNotProperty.readResolve(): Object
4932 ===> phantm.types.TypeEnvironment.scope: Option[phantm.symbols.ClassSymbol]
500 ===> phantm.ast.Trees.MethodDecl.productPrefix: String
2277 ===> phantm.ast.Trees.SmallerEqual.lhs: phantm.ast.Trees.Expression
5591 ===> phantm.util.API.Reader.APIPos.productElement(x$1: Int): Any
3433 ===> phantm.cfg.Trees.ClassRefUnknown.equals(x$1: Any): Boolean
4836 ===> phantm.symbols.FunctionSymbol.getArguments: List[phantm.symbols.ArgumentSymbol]
3138 ===> phantm.cfg.Trees.Assume.lhs: phantm.cfg.Trees.SimpleValue
5691 ===> phantm.util.IncludeResolver.deepNess_$eq(x$1: Int): Unit
508 ===> phantm.ast.Trees.MethodDecl.<init>(): phantm.ast.Trees.MethodDecl.type
1688 ===> phantm.ast.Trees.ArrayEntry.copy(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
1356 ===> phantm.ast.Trees.Block.copy$default$1: List[phantm.ast.Trees.Statement] @scala.annotation.unchecked.uncheckedVariance
3090 ===> phantm.cfg.Trees.AssignUnary.productArity: Int
1516 ===> phantm.ast.Trees.Return.equals(x$1: Any): Boolean
1293 ===> phantm.ast.Trees.Throw.canEqual(x$1: Any): Boolean
6001 ===> phantm.util.UTrue.canEqual(x$1: Any): Boolean
4693 ===> phantm.phases.SymContext.productIterator: Iterator[Any]
4228 ===> phantm.dataflow.AnalysisAlgorithm.computeFixpoint(ctx: phantm.phases.PhasesContext): Unit
3329 ===> phantm.cfg.Trees.Skip.productElement(x$1: Int): Any
1053 ===> phantm.ast.Trees.OAIdentifier.toString(): String
2043 ===> phantm.ast.Trees.BooleanAnd.productIterator: Iterator[Any]
3006 ===> phantm.cfg.LabeledDirectedGraphImp.Group.subgroups_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
155 ===> phantm.Settings.$lessinit$greater$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
2031 ===> phantm.ast.Trees.PostDec.apply(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostDec
424 ===> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
1782 ===> phantm.ast.Trees.ListVar.productPrefix: String
2073 ===> phantm.ast.Trees.BooleanXor.rhs: phantm.ast.Trees.Expression
3414 ===> phantm.cfg.Trees.ClassRefCalledClass.productElement(x$1: Int): Any
5806 ===> phantm.util.Reporter.notice(msg: String): Boolean
2193 ===> phantm.ast.Trees.BooleanNot.productIterator: Iterator[Any]
4907 ===> phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit
1794 ===> phantm.ast.Trees.ListVar.readResolve(): Object
3652 ===> phantm.cfg.Trees.PHPFalse.productElement(x$1: Int): Any
1104 ===> phantm.ast.Trees.OAMethod.hashCode(): Int
3702 ===> phantm.cfg.Trees.PHPEmptyArray.unapply(x$0: phantm.cfg.Trees.PHPEmptyArray): Boolean
4489 ===> phantm.phases.CallGraphGeneration.copy$default$3: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
2002 ===> phantm.ast.Trees.PreDec.copy(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreDec
5072 ===> phantm.types.TypeTransferFunction.backPatchType(sv: phantm.cfg.Trees.SimpleValue,typ: phantm.types.Type): phantm.types.Type
2427 ===> phantm.ast.Trees.Print.productPrefix: String
2296 ===> phantm.ast.Trees.InstanceOf.lhs: phantm.ast.Trees.Expression
5049 ===> phantm.types.TypeTransferFunction.typeFromSV(sv: phantm.cfg.Trees.SimpleValue): phantm.types.Type
4597 ===> phantm.phases.PhasesContext.includedFiles_$eq(x$1: Set[String]): Unit
1647 ===> phantm.ast.Trees.Void.unapply(x$0: phantm.ast.Trees.Void): Boolean
5103 ===> phantm.types.TypeTransferFunction.apply$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
1329 ===> phantm.ast.Trees.LabelDecl.toString(): String
679 ===> phantm.ast.Trees.MFStatic.hashCode(): Int
1969 ===> phantm.ast.Trees.PreInc.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
4027 ===> phantm.cfg.Trees.BOOLEANOR.productElement(x$1: Int): Any
1551 ===> phantm.ast.Trees.Static.<init>(): phantm.ast.Trees.Static.type
818 ===> phantm.ast.Trees.CalledClass.copy(): phantm.ast.Trees.CalledClass
4549 ===> phantm.phases.ParsingPhase.description: String
1107 ===> phantm.ast.Trees.OAMethod.<init>(): phantm.ast.Trees.OAMethod.type
1703 ===> phantm.ast.Trees.ArrayEntry.readResolve(): Object
3511 ===> phantm.cfg.Trees.NextArrayEntry.productElement(x$1: Int): Any
1616 ===> phantm.ast.Trees.Foreach.copy$default$2: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
5734 ===> phantm.util.JavaListIteratorWrapper.equals(x$1: Any): Boolean
2792 ===> phantm.ast.Trees.MCFile.apply(): phantm.ast.Trees.MCFile
2179 ===> phantm.ast.Trees.ShiftRight.toString(): String
1009 ===> phantm.ast.Trees.Label.productIterator: Iterator[Any]
4015 ===> phantm.cfg.Trees.BOOLEANAND.toString(): String
4282 ===> phantm.helpers.CheckContext.<init>(): phantm.helpers.CheckContext.type
736 ===> phantm.ast.Trees.Identifier.<init>(): phantm.ast.Trees.Identifier.type
3613 ===> phantm.cfg.Trees.PHPString.hashCode(): Int
1472 ===> phantm.ast.Trees.Break.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Break
5484 ===> phantm.types.TString.productArity: Int
1259 ===> phantm.ast.Trees.Try.<init>(): phantm.ast.Trees.Try.type
3168 ===> phantm.cfg.Trees.Empty.<init>(): phantm.cfg.Trees.Empty.type
2266 ===> phantm.ast.Trees.Smaller.productElement(x$1: Int): Any
5532 ===> phantm.types.TNull.productArity: Int
3883 ===> phantm.cfg.Trees.StaticMethodCall.copy$default$3: List[phantm.cfg.Trees.SimpleValue] @scala.annotation.unchecked.uncheckedVariance
4598 ===> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
5618 ===> phantm.util.ConstantsResolver.<init>(ast: phantm.ast.Trees.Program,issueErrors: Boolean,ctx: phantm.phases.PhasesContext): phantm.util.ConstantsResolver
1583 ===> phantm.ast.Trees.Html.toString(): String
2419 ===> phantm.ast.Trees.Execute.toString(): String
3998 ===> phantm.cfg.Trees.MOD.productPrefix: String
5466 ===> phantm.types.TTrue.productIterator: Iterator[Any]
5464 ===> phantm.types.TTrue.productArity: Int
3637 ===> phantm.cfg.Trees.PHPAny.productArity: Int
279 ===> phantm.annotations.SourceAnnotations.Parser.shouldInline(comment: String): Boolean
2394 ===> phantm.ast.Trees.Array.productArity: Int
2830 ===> phantm.ast.Trees.MCClass.productIterator: Iterator[Any]
1526 ===> phantm.ast.Trees.Global.productPrefix: String
337 ===> phantm.ast.STToAST.member_modifier(n: phantm.parser.ParseNode): phantm.ast.Trees.MemberFlag
2421 ===> phantm.ast.Trees.Execute.unapply(x$0: phantm.ast.Trees.Execute): Option[String]
63 ===> phantm.Settings.productIterator: Iterator[Any]
2652 ===> phantm.ast.Trees.StaticMethodCall.copy$default$1: phantm.ast.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
921 ===> phantm.ast.Trees.CastInt.productPrefix: String
1256 ===> phantm.ast.Trees.Try.hashCode(): Int
1504 ===> phantm.ast.Trees.Continue.readResolve(): Object
589 ===> phantm.ast.Trees.CFAbstract.toString(): String
3 ===> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
2456 ===> phantm.ast.Trees.Eval.readResolve(): Object
5960 ===> phantm.util.UObjRef.readResolve(): Object
4233 ===> phantm.dataflow.Environment.copy: E
4906 ===> phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit
5966 ===> phantm.util.URealRef.productArity: Int
5765 ===> phantm.util.ENotice.productIterator: Iterator[Any]
4386 ===> phantm.phases.ASTIntegrityChecks.copy$default$2: phantm.phases.CheckContext @scala.annotation.unchecked.uncheckedVariance
1581 ===> phantm.ast.Trees.Html.canEqual(x$1: Any): Boolean
1729 ===> phantm.ast.Trees.ObjectProperty.productElement(x$1: Int): Any
5629 ===> phantm.util.ConstantsResolver.canEqual(x$1: Any): Boolean
4438 ===> phantm.phases.CFGGenerator.equals(x$1: Any): Boolean
3471 ===> phantm.cfg.Trees.VariableVar.v: phantm.cfg.Trees.SimpleValue
804 ===> phantm.ast.Trees.StaticClassRef.productPrefix: String
1834 ===> phantm.ast.Trees.Assign.readResolve(): Object
2444 ===> phantm.ast.Trees.Eval.productPrefix: String
1098 ===> phantm.ast.Trees.OAMethod.copy$default$2: List[phantm.ast.Trees.CallArg] @scala.annotation.unchecked.uncheckedVariance
482 ===> phantm.ast.Trees.ArgumentDecl.equals(x$1: Any): Boolean
468 ===> phantm.ast.Trees.ArgumentDecl.byref: Boolean
3247 ===> phantm.cfg.Trees.IsScalar.toString(): String
5997 ===> phantm.util.UTrue.productPrefix: String
266 ===> phantm.annotations.SourceAnnotations.Parser.typedef: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)]
349 ===> phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
5220 ===> phantm.types.ObjectIdDump.equals(x$1: Any): Boolean
3271 ===> phantm.cfg.Trees.AssumeProperty.<init>(): phantm.cfg.Trees.AssumeProperty.type
5656 ===> phantm.util.DumpCollector.productPrefix: String
1877 ===> phantm.ast.Trees.Minus.productPrefix: String
5807 ===> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
2976 ===> phantm.cfg.EdgeCounter.count_$eq(x$1: Int): Unit
5964 ===> phantm.util.URealRef.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1215 ===> phantm.ast.Trees.ClassDecl.toString(): String
4346 ===> phantm.parser.Parser.error(msg: String): Unit
3173 ===> phantm.cfg.Trees.Empty.canEqual(x$1: Any): Boolean
816 ===> phantm.ast.Trees.StaticClassRef.readResolve(): Object
1180 ===> phantm.ast.Trees.Import.productElement(x$1: Int): Any
26 ===> phantm.Settings.dumpAfter: Set[String]
787 ===> phantm.ast.Trees.DynamicClassRef.productPrefix: String
443 ===> phantm.ast.STToAST.unapply(x$0: phantm.ast.STToAST): Option[(phantm.parser.Parser, phantm.parser.ParseNode)]
2559 ===> phantm.ast.Trees.Constant.productIterator: Iterator[Any]
1593 ===> phantm.ast.Trees.Unset.copy$default$1: List[phantm.ast.Trees.Variable] @scala.annotation.unchecked.uncheckedVariance
4185 ===> phantm.cfg.Trees.PREINC.readResolve(): Object
5835 ===> phantm.util.ErrorException.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
2048 ===> phantm.ast.Trees.BooleanAnd.<init>(): phantm.ast.Trees.BooleanAnd.type
3595 ===> phantm.cfg.Trees.PHPFloat.productIterator: Iterator[Any]
2012 ===> phantm.ast.Trees.PreDec.<init>(): phantm.ast.Trees.PreDec.type
1994 ===> phantm.ast.Trees.PostInc.equals(x$1: Any): Boolean
3088 ===> phantm.cfg.Trees.AssignUnary.copy$default$3: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
515 ===> phantm.ast.Trees.PropertyDecl.default: Option[phantm.ast.Trees.Expression]
3343 ===> phantm.cfg.Trees.Identifier.copy(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier
3964 ===> phantm.cfg.Trees.MINUS.productElement(x$1: Int): Any
6031 ===> phantm.util.Unserializer.unser(r: Boolean): phantm.util.UValue
3159 ===> phantm.cfg.Trees.Isset.<init>(): phantm.cfg.Trees.Isset.type
2410 ===> phantm.ast.Trees.Execute.productPrefix: String
1142 ===> phantm.ast.Trees.NamespaceStart.productElement(x$1: Int): Any
5813 ===> phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit
4606 ===> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
3200 ===> phantm.cfg.Trees.IsFloat.canEqual(x$1: Any): Boolean
97 ===> phantm.InlineManual.productPrefix: String
2302 ===> phantm.ast.Trees.InstanceOf.productPrefix: String
5458 ===> phantm.types.TBoolean.hashCode(): Int
3211 ===> phantm.cfg.Trees.IsBool.toString(): String
5945 ===> phantm.util.UObjRef.<init>(i: Int): phantm.util.UObjRef
5700 ===> phantm.util.IncludeResolver.readResolve(): Object
1455 ===> phantm.ast.Trees.Switch.copy(expr: phantm.ast.Trees.Expression,cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]): phantm.ast.Trees.Switch
5479 ===> phantm.types.TFalse.toString(): String
556 ===> phantm.ast.Trees.ConstantDecl.copy(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl
841 ===> phantm.ast.Trees.VarFunctionRef.canEqual(x$1: Any): Boolean
4898 ===> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
514 ===> phantm.ast.Trees.PropertyDecl.flags: List[phantm.ast.Trees.MemberFlag]
2783 ===> phantm.ast.Trees.MCFile.productArity: Int
1765 ===> phantm.ast.Trees.ClassProperty.productPrefix: String
1929 ===> phantm.ast.Trees.Concat.rhs: phantm.ast.Trees.Expression
876 ===> phantm.ast.Trees.StaticFunctionRef.hashCode(): Int
4955 ===> phantm.types.TypeFlowAnalyzer.scope: phantm.symbols.Scope
3256 ===> phantm.cfg.Trees.IsResource.toString(): String
1361 ===> phantm.ast.Trees.Block.canEqual(x$1: Any): Boolean
549 ===> phantm.ast.Trees.ClassConstantDecl.toString(): String
5853 ===> phantm.util.UArray.entries: Map[phantm.util.UValue,phantm.util.UValue]
4722 ===> phantm.phases.CollectSymbols.firstClassPass: Unit
3348 ===> phantm.cfg.Trees.Identifier.productIterator: Iterator[Any]
4112 ===> phantm.cfg.Trees.GEQ.readResolve(): Object
4312 ===> phantm.helpers.Helper.$init$(): Unit
5073 ===> phantm.types.TypeTransferFunction.updateObject(obj: phantm.types.TObjectRef,forceWeak: Boolean): Unit
862 ===> phantm.ast.Trees.DynamicFunctionRef.<init>(): phantm.ast.Trees.DynamicFunctionRef.type
5509 ===> phantm.types.TAny.<init>(): phantm.types.TAny.type
2117 ===> phantm.ast.Trees.BitwiseOr.productArity: Int
5411 ===> phantm.types.TIntLit.productArity: Int
5034 ===> phantm.types.TypeTransferFunction.errorsFct: (String, phantm.util.Positional) => Unit
239 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.toString(): String
5538 ===> phantm.types.TNull.readResolve(): Object
4252 ===> phantm.dataflow.StronglyConnectedComponents.SCC.adjSCC_$eq(x$1: Set[StronglyConnectedComponents.this.SCC]): Unit
3975 ===> phantm.cfg.Trees.MULT.canEqual(x$1: Any): Boolean
4196 ===> phantm.cfg.Trees.PREDEC.toString(): String
4174 ===> phantm.cfg.Trees.BITSIWENOT.canEqual(x$1: Any): Boolean
3189 ===> phantm.cfg.Trees.IsInt.productElement(x$1: Int): Any
4481 ===> phantm.phases.CallGraphGeneration.CallGraph.computeReachableFromMain: scala.collection.immutable.Map[phantm.symbols.FunctionSymbol,Set[phantm.symbols.FunctionSymbol]]
2026 ===> phantm.ast.Trees.PostDec.hashCode(): Int
2860 ===> phantm.ast.Trees.MCMethod.productIterator: Iterator[Any]
153 ===> phantm.Settings.$lessinit$greater$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
4044 ===> phantm.cfg.Trees.BITWISEAND.productArity: Int
3025 ===> phantm.cfg.LabeledDirectedGraphImp.Group.apply(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group
1125 ===> phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any
2508 ===> phantm.ast.Trees.Empty.equals(x$1: Any): Boolean
988 ===> phantm.ast.Trees.InitVariable.copy$default$2: Option[phantm.ast.Trees.Expression] @scala.annotation.unchecked.uncheckedVariance
3413 ===> phantm.cfg.Trees.ClassRefCalledClass.productArity: Int
2917 ===> phantm.cfg.ControlFlowGraph.<init>(): phantm.cfg.ControlFlowGraph
4048 ===> phantm.cfg.Trees.BITWISEAND.hashCode(): Int
2229 ===> phantm.ast.Trees.Equal.productIterator: Iterator[Any]
3746 ===> phantm.cfg.Trees.ArrayNext.productElement(x$1: Int): Any
89 ===> phantm.InlineFull.productArity: Int
3902 ===> phantm.cfg.Trees.MethodCall.copy$default$2: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
6012 ===> phantm.util.Unserializer.chars: List[Char]
3017 ===> phantm.cfg.LabeledDirectedGraphImp.Group.productElement(x$1: Int): Any
5725 ===> phantm.util.JavaListIteratorWrapper.copy[A](iter: java.util.Iterator[A]): phantm.util.JavaListIteratorWrapper[A]
268 ===> phantm.annotations.SourceAnnotations.Parser.filterLines(comment: String,tag: String): List[String]
5710 ===> phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression
4142 ===> phantm.cfg.Trees.NOTEQUALS.productPrefix: String
4889 ===> phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit
2724 ===> phantm.ast.Trees.PHPInteger.toString(): String
3387 ===> phantm.cfg.Trees.ClassRefDynamic.<init>(): phantm.cfg.Trees.ClassRefDynamic.type
2334 ===> phantm.ast.Trees.Ternary.unapply(x$0: phantm.ast.Trees.Ternary): Option[(phantm.ast.Trees.Expression, Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression)]
3093 ===> phantm.cfg.Trees.AssignUnary.canEqual(x$1: Any): Boolean
2307 ===> phantm.ast.Trees.InstanceOf.hashCode(): Int
5849 ===> phantm.util.ErrorException.unapply(x$0: phantm.util.ErrorException): Option[(Int, Int, Int, Int)]
1656 ===> phantm.ast.Trees.SimpleVariable.productArity: Int
1679 ===> phantm.ast.Trees.VariableVariable.equals(x$1: Any): Boolean
5428 ===> phantm.types.TFloat.productIterator: Iterator[Any]
1499 ===> phantm.ast.Trees.Continue.equals(x$1: Any): Boolean
1412 ===> phantm.ast.Trees.DoWhile.<init>(body: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression): phantm.ast.Trees.DoWhile
1648 ===> phantm.ast.Trees.Void.readResolve(): Object
1113 ===> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
4543 ===> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
2052 ===> phantm.ast.Trees.BooleanAnd.readResolve(): Object
2787 ===> phantm.ast.Trees.MCFile.hashCode(): Int
2132 ===> phantm.ast.Trees.BitwiseXor.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseXor
2148 ===> phantm.ast.Trees.ShiftLeft.lhs: phantm.ast.Trees.Expression
5352 ===> phantm.types.IntKey.apply(v: Long): phantm.types.IntKey
1843 ===> phantm.ast.Trees.Clone.canEqual(x$1: Any): Boolean
3744 ===> phantm.cfg.Trees.ArrayNext.productPrefix: String
2051 ===> phantm.ast.Trees.BooleanAnd.unapply(x$0: phantm.ast.Trees.BooleanAnd): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
4071 ===> phantm.cfg.Trees.SHIFTLEFT.productArity: Int
794 ===> phantm.ast.Trees.DynamicClassRef.equals(x$1: Any): Boolean
527 ===> phantm.ast.Trees.PropertyDecl.toString(): String
3376 ===> phantm.cfg.Trees.ClassRefDynamic.<init>(sv: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ClassRefDynamic
1676 ===> phantm.ast.Trees.VariableVariable.canEqual(x$1: Any): Boolean
62 ===> phantm.Settings.productElement(x$1: Int): Any
3503 ===> phantm.cfg.Trees.ArrayEntry.unapply(x$0: phantm.cfg.Trees.ArrayEntry): Option[(phantm.cfg.Trees.SimpleValue, phantm.cfg.Trees.SimpleValue)]
3161 ===> phantm.cfg.Trees.Isset.productArity: Int
2667 ===> phantm.ast.Trees.StaticMethodCall.readResolve(): Object
1767 ===> phantm.ast.Trees.ClassProperty.productElement(x$1: Int): Any
1662 ===> phantm.ast.Trees.SimpleVariable.equals(x$1: Any): Boolean
3206 ===> phantm.cfg.Trees.IsBool.productArity: Int
2375 ===> phantm.ast.Trees.Exit.copy$default$1: Option[phantm.ast.Trees.Expression] @scala.annotation.unchecked.uncheckedVariance
4988 ===> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
1038 ===> phantm.ast.Trees.ObjectAccess.<init>(): phantm.ast.Trees.ObjectAccess
5325 ===> phantm.types.StringKey.productPrefix: String
2201 ===> phantm.ast.Trees.BooleanNot.unapply(x$0: phantm.ast.Trees.BooleanNot): Option[phantm.ast.Trees.Expression]
1129 ===> phantm.ast.Trees.FunctionDecl.toString(): String
5896 ===> phantm.util.UString.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
2670 ===> phantm.ast.Trees.VoidExpr.productPrefix: String
1894 ===> phantm.ast.Trees.Div.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2155 ===> phantm.ast.Trees.ShiftLeft.productArity: Int
739 ===> phantm.ast.Trees.Identifier.unapply(x$0: phantm.ast.Trees.Identifier): Option[String]
3340 ===> phantm.cfg.Trees.Identifier.getSymbol: phantm.symbols.VariableSymbol
518 ===> phantm.ast.Trees.PropertyDecl.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
356 ===> phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch
2596 ===> phantm.ast.Trees.New.productElement(x$1: Int): Any
5004 ===> phantm.types.TypeLattice.leq(env: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
3849 ===> phantm.cfg.Trees.Ternary.productIterator: Iterator[Any]
5520 ===> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
4337 ===> phantm.lattice.Lattice.join(env: Lattice.this.Env,x: Lattice.this.E,y: Lattice.this.E): (Lattice.this.Env, Lattice.this.E)
3120 ===> phantm.cfg.Trees.AssignBinary.apply(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
4232 ===> phantm.dataflow.Environment.union(env: E): E
293 ===> phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl
4684 ===> phantm.phases.SymContext.iface: Option[phantm.symbols.IfaceSymbol]
5728 ===> phantm.util.JavaListIteratorWrapper.productArity: Int
3015 ===> phantm.cfg.LabeledDirectedGraphImp.Group.productPrefix: String
4985 ===> phantm.types.TypeFlowAnalyzer.toString(): String
1147 ===> phantm.ast.Trees.NamespaceStart.equals(x$1: Any): Boolean
2532 ===> phantm.ast.Trees.Include.readResolve(): Object
5539 ===> phantm.types.TTop.<init>(): phantm.types.TTop.type
1569 ===> phantm.ast.Trees.Echo.toString(): String
2927 ===> phantm.cfg.LabeledDirectedGraph.outEdges(v: LabeledDirectedGraph.this.Vertex): Set[LabeledDirectedGraph.this.Edge]
4328 ===> phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
1031 ===> phantm.ast.Trees.CallArg.toString(): String
980 ===> phantm.ast.Trees.CastUnset.hashCode(): Int
2291 ===> phantm.ast.Trees.SmallerEqual.<init>(): phantm.ast.Trees.SmallerEqual.type
5955 ===> phantm.util.UObjRef.equals(x$1: Any): Boolean
2119 ===> phantm.ast.Trees.BitwiseOr.productIterator: Iterator[Any]
5810 ===> phantm.util.Reporter.emitAll: Unit
4803 ===> phantm.symbols.Scope.registerPredefVariables: Unit
1808 ===> phantm.ast.Trees.ExpandArray.equals(x$1: Any): Boolean
4090 ===> phantm.cfg.Trees.LT.productElement(x$1: Int): Any
4749 ===> phantm.phases.TypeAnalyzingPhase.limitFileName(s: String): String
1168 ===> phantm.ast.Trees.Namespaced.toString(): String
4620 ===> phantm.phases.PhasesContext.toString(): String
2182 ===> phantm.ast.Trees.ShiftRight.toString(): String
3969 ===> phantm.cfg.Trees.MULT.<init>(): phantm.cfg.Trees.MULT.type
1601 ===> phantm.ast.Trees.Unset.equals(x$1: Any): Boolean
2108 ===> phantm.ast.Trees.BitwiseAnd.unapply(x$0: phantm.ast.Trees.BitwiseAnd): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
5294 ===> phantm.types.TRealObject.copy$default$1: Map[String,phantm.types.Type] @scala.annotation.unchecked.uncheckedVariance
5178 ===> phantm.types.TFunction.toString(): String
3382 ===> phantm.cfg.Trees.ClassRefDynamic.productElement(x$1: Int): Any
5508 ===> phantm.types.TStringLit.readResolve(): Object
1172 ===> phantm.ast.Trees.Import.src: phantm.ast.Trees.NSIdentifier
1207 ===> phantm.ast.Trees.ClassDecl.copy$default$7: List[phantm.ast.Trees.PropertyDecl] @scala.annotation.unchecked.uncheckedVariance
425 ===> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
3958 ===> phantm.cfg.Trees.PLUS.hashCode(): Int
2517 ===> phantm.ast.Trees.Include.copy(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Include
3505 ===> phantm.cfg.Trees.NextArrayEntry.arr: phantm.cfg.Trees.SimpleValue
1722 ===> phantm.ast.Trees.ObjectProperty.property: phantm.ast.Trees.Identifier
2798 ===> phantm.ast.Trees.MCLine.productArity: Int
5922 ===> phantm.util.UInt.<init>(): phantm.util.UInt.type
3226 ===> phantm.cfg.Trees.IsString.productIterator: Iterator[Any]
1274 ===> phantm.ast.Trees.Catch.productElement(x$1: Int): Any
2449 ===> phantm.ast.Trees.Eval.hashCode(): Int
5229 ===> phantm.types.ObjectId.copy(pos: Int,typ: phantm.types.ObjectIdType): phantm.types.ObjectId
2837 ===> phantm.ast.Trees.MCClass.apply(): phantm.ast.Trees.MCClass
255 ===> phantm.annotations.SourceAnnotations.Parser.Entry.toString(): String
264 ===> phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
622 ===> phantm.ast.Trees.THObject.<init>(): phantm.ast.Trees.THObject.type
5887 ===> phantm.util.UObject.equals(x$1: Any): Boolean
1094 ===> phantm.ast.Trees.OAMethod.args: List[phantm.ast.Trees.CallArg]
3319 ===> phantm.cfg.Trees.Return.hashCode(): Int
4965 ===> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
1876 ===> phantm.ast.Trees.Minus.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2579 ===> phantm.ast.Trees.ClassConstant.canEqual(x$1: Any): Boolean
544 ===> phantm.ast.Trees.ClassConstantDecl.canEqual(x$1: Any): Boolean
4876 ===> phantm.symbols.LookupResult.hashCode(): Int
5594 ===> phantm.util.API.Reader.APIPos.hashCode(): Int
1534 ===> phantm.ast.Trees.Global.<init>(): phantm.ast.Trees.Global.type
499 ===> phantm.ast.Trees.MethodDecl.copy$default$5: Option[phantm.ast.Trees.Statement] @scala.annotation.unchecked.uncheckedVariance
3033 ===> phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String
446 ===> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
2217 ===> phantm.ast.Trees.BitwiseNot.apply(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseNot
805 ===> phantm.ast.Trees.StaticClassRef.productArity: Int
5819 ===> phantm.util.Reporter.rep: Option[phantm.util.Reporter]
4550 ===> phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
647 ===> phantm.ast.Trees.MFProtected.productPrefix: String
4902 ===> phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit
4724 ===> phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit
1673 ===> phantm.ast.Trees.VariableVariable.productArity: Int
2298 ===> phantm.ast.Trees.InstanceOf.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.ClassRef): phantm.ast.Trees.InstanceOf
3908 ===> phantm.cfg.Trees.MethodCall.canEqual(x$1: Any): Boolean
2405 ===> phantm.ast.Trees.Array.readResolve(): Object
3814 ===> phantm.cfg.Trees.Constant.equals(x$1: Any): Boolean
3488 ===> phantm.cfg.Trees.ArrayEntry.index: phantm.cfg.Trees.SimpleValue
1077 ===> phantm.ast.Trees.OAArray.copy(array: phantm.ast.Trees.OAScalar,indexes: List[Option[phantm.ast.Trees.Expression]]): phantm.ast.Trees.OAArray
858 ===> phantm.ast.Trees.DynamicFunctionRef.canEqual(x$1: Any): Boolean
4051 ===> phantm.cfg.Trees.BITWISEOR.toString(): String
2237 ===> phantm.ast.Trees.Equal.unapply(x$0: phantm.ast.Trees.Equal): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
4336 ===> phantm.lattice.Lattice.bottom: Lattice.this.E
5918 ===> phantm.util.UInt.canEqual(x$1: Any): Boolean
4239 ===> phantm.dataflow.StronglyConnectedComponents.Node.index_$eq(x$1: Int): Unit
4111 ===> phantm.cfg.Trees.GEQ.hashCode(): Int
2022 ===> phantm.ast.Trees.PostDec.productArity: Int
414 ===> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
3755 ===> phantm.cfg.Trees.ArrayNext.readResolve(): Object
370 ===> phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
320 ===> phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
607 ===> phantm.ast.Trees.THArray.hashCode(): Int
3876 ===> phantm.cfg.Trees.StaticMethodCall.cl: phantm.cfg.Trees.ClassRef
601 ===> phantm.ast.Trees.THArray.<init>(): phantm.ast.Trees.THArray.type
4440 ===> phantm.phases.CFGGenerator.toString(): String
3252 ===> phantm.cfg.Trees.IsResource.productElement(x$1: Int): Any
958 ===> phantm.ast.Trees.CastBool.productArity: Int
3031 ===> phantm.cfg.LabeledDirectedGraphImp.outEdges(v: LabeledDirectedGraphImp.this.Vertex): Set[phantm.cfg.EdgeImp[LabelType]]
2144 ===> phantm.ast.Trees.BitwiseXor.toString(): String
1005 ===> phantm.ast.Trees.Label.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
1622 ===> phantm.ast.Trees.Foreach.productArity: Int
4842 ===> phantm.symbols.MVPrivate.<init>(): phantm.symbols.MVPrivate.type
1529 ===> phantm.ast.Trees.Global.productIterator: Iterator[Any]
454 ===> phantm.ast.Trees.Program.productElement(x$1: Int): Any
3878 ===> phantm.cfg.Trees.StaticMethodCall.params: List[phantm.cfg.Trees.SimpleValue]
4740 ===> phantm.phases.CollectSymbols.<init>(): phantm.phases.CollectSymbols.type
4136 ===> phantm.cfg.Trees.IDENTICAL.productIterator: Iterator[Any]
3350 ===> phantm.cfg.Trees.Identifier.hashCode(): Int
3670 ===> phantm.cfg.Trees.PHPNull.equals(x$1: Any): Boolean
249 ===> phantm.annotations.SourceAnnotations.Parser.Entry.productPrefix: String
1951 ===> phantm.ast.Trees.Mod.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4013 ===> phantm.cfg.Trees.INSTANCEOF.readResolve(): Object
2175 ===> phantm.ast.Trees.ShiftRight.productElement(x$1: Int): Any
2884 ===> phantm.ast.Trees.MCNamespace.readResolve(): Object
4294 ===> phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean)
2479 ===> phantm.ast.Trees.Closure.readResolve(): Object
3914 ===> phantm.cfg.Trees.MethodCall.unapply(x$0: phantm.cfg.Trees.MethodCall): Option[(phantm.cfg.Trees.SimpleValue, phantm.ast.Trees.Identifier, List[phantm.cfg.Trees.SimpleValue])]
459 ===> phantm.ast.Trees.Program.equals(x$1: Any): Boolean
2236 ===> phantm.ast.Trees.Equal.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal
3843 ===> phantm.cfg.Trees.Ternary.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
167 ===> phantm.annotations.FunctionAnnotation.shouldInline: Boolean
4578 ===> phantm.phases.PhaseSeq.copy(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq
91 ===> phantm.InlineFull.productIterator: Iterator[Any]
4047 ===> phantm.cfg.Trees.BITWISEAND.canEqual(x$1: Any): Boolean
2712 ===> phantm.ast.Trees.PHPFalse.unapply(x$0: phantm.ast.Trees.PHPFalse): Boolean
4769 ===> phantm.phases.TypeFlowAnalysis.toString(): String
2129 ===> phantm.ast.Trees.BitwiseXor.lhs: phantm.ast.Trees.Expression
5159 ===> phantm.types.FunctionType.<init>(): phantm.types.FunctionType
3444 ===> phantm.cfg.Trees.TempID.productArity: Int
3919 ===> phantm.cfg.Trees.New.copy(cl: phantm.cfg.Trees.ClassRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.New
1492 ===> phantm.ast.Trees.Continue.productPrefix: String
220 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.equals(x$1: Any): Boolean
5198 ===> phantm.types.ObjectIdTmp.productArity: Int
3411 ===> phantm.cfg.Trees.ClassRefCalledClass.copy(): phantm.cfg.Trees.ClassRefCalledClass
3344 ===> phantm.cfg.Trees.Identifier.copy$default$1: phantm.symbols.VariableSymbol @scala.annotation.unchecked.uncheckedVariance
1704 ===> phantm.ast.Trees.NextArrayEntry.array: phantm.ast.Trees.Expression
2941 ===> phantm.cfg.VertexImp.productArity: Int
2347 ===> phantm.ast.Trees.Cast.hashCode(): Int
1059 ===> phantm.ast.Trees.OAExpression.copy(exp: phantm.ast.Trees.Expression): phantm.ast.Trees.OAExpression
1623 ===> phantm.ast.Trees.Foreach.productElement(x$1: Int): Any
5419 ===> phantm.types.TIntLit.toString(): String
5930 ===> phantm.util.UFloat.copy$default$1: Float @scala.annotation.unchecked.uncheckedVariance
1998 ===> phantm.ast.Trees.PostInc.unapply(x$0: phantm.ast.Trees.PostInc): Option[phantm.ast.Trees.Variable]
5190 ===> phantm.types.ObjectIdUse.hashCode(): Int
2100 ===> phantm.ast.Trees.BitwiseAnd.productIterator: Iterator[Any]
2668 ===> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr
2869 ===> phantm.ast.Trees.MCMethod.readResolve(): Object
5121 ===> phantm.types.Type.<init>(): phantm.types.Type
4991 ===> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$7: Option[phantm.types.TObjectRef] @scala.annotation.unchecked.uncheckedVariance
2502 ===> phantm.ast.Trees.Empty.productArity: Int
5457 ===> phantm.types.TBoolean.canEqual(x$1: Any): Boolean
4899 ===> phantm.symbols.ClassSymbol.properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
4089 ===> phantm.cfg.Trees.LT.productArity: Int
1262 ===> phantm.ast.Trees.Try.unapply(x$0: phantm.ast.Trees.Try): Option[(phantm.ast.Trees.Statement, List[phantm.ast.Trees.Catch])]
3213 ===> phantm.cfg.Trees.IsArray.<init>(): phantm.cfg.Trees.IsArray.type
4582 ===> phantm.phases.PhaseSeq.productElement(x$1: Int): Any
2293 ===> phantm.ast.Trees.SmallerEqual.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.SmallerEqual
464 ===> phantm.ast.Trees.Program.readResolve(): Object
3407 ===> phantm.cfg.Trees.ClassRefFixed.unapply(x$0: phantm.cfg.Trees.ClassRefFixed): Option[phantm.symbols.ClassSymbol]
5914 ===> phantm.util.UInt.productPrefix: String
1625 ===> phantm.ast.Trees.Foreach.canEqual(x$1: Any): Boolean
5989 ===> phantm.util.UFalse.productArity: Int
3831 ===> phantm.cfg.Trees.ClassConstant.hashCode(): Int
3164 ===> phantm.cfg.Trees.Isset.canEqual(x$1: Any): Boolean
579 ===> phantm.ast.Trees.CFNormal.hashCode(): Int
5134 ===> phantm.types.TAnyClass.productPrefix: String
4964 ===> phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit
5637 ===> phantm.util.ConstantsResolver.readResolve(): Object
3075 ===> phantm.cfg.Trees.Assign.equals(x$1: Any): Boolean
5924 ===> phantm.util.UInt.apply(v: Int): phantm.util.UInt
982 ===> phantm.ast.Trees.CastUnset.readResolve(): Object
5592 ===> phantm.util.API.Reader.APIPos.productIterator: Iterator[Any]
4371 ===> phantm.phases.CheckContext.toString(): String
3415 ===> phantm.cfg.Trees.ClassRefCalledClass.productIterator: Iterator[Any]
1923 ===> phantm.ast.Trees.Mult.<init>(): phantm.ast.Trees.Mult.type
4802 ===> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
4404 ===> phantm.phases.ASTCollector.<init>(functs: Map[String,(String, Int)],classes: Map[String,(String, Int)],ast: phantm.ast.Trees.Program): phantm.phases.ASTCollector
319 ===> phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
401 ===> phantm.ast.STToAST.object_dim_list(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
5768 ===> phantm.util.ENotice.toString(): String
4935 ===> phantm.types.TypeEnvironment.<init>(scope: Option[phantm.symbols.ClassSymbol]): phantm.types.TypeEnvironment
4308 ===> phantm.helpers.CFGGraphs.toString(): String
3680 ===> phantm.cfg.Trees.PHPThis.productElement(x$1: Int): Any
3758 ===> phantm.cfg.Trees.ArrayCurElement.copy(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurElement
5614 ===> phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type
2091 ===> phantm.ast.Trees.BitwiseAnd.lhs: phantm.ast.Trees.Expression
4678 ===> phantm.phases.SymbolsCollectionPhase.<init>(): phantm.phases.SymbolsCollectionPhase.type
1694 ===> phantm.ast.Trees.ArrayEntry.productIterator: Iterator[Any]
4833 ===> phantm.symbols.FunctionSymbol.getArgsVariables: List[phantm.symbols.VariableSymbol]
5598 ===> phantm.util.API.Reader.APIPos.toString(): String
4397 ===> phantm.phases.ASTIntegrityChecks.apply(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
413 ===> phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier
1164 ===> phantm.ast.Trees.Namespaced.hashCode(): Int
1303 ===> phantm.ast.Trees.Goto.<init>(to: phantm.ast.Trees.Label): phantm.ast.Trees.Goto
2832 ===> phantm.ast.Trees.MCClass.hashCode(): Int
3133 ===> phantm.cfg.Trees.Error.<init>(): phantm.cfg.Trees.Error.type
1283 ===> phantm.ast.Trees.Catch.unapply(x$0: phantm.ast.Trees.Catch): Option[(phantm.ast.Trees.ClassRef, phantm.ast.Trees.SimpleVariable, phantm.ast.Trees.Statement)]
5324 ===> phantm.types.StringKey.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
780 ===> phantm.ast.Trees.VarClassRef.apply(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef
5348 ===> phantm.types.IntKey.hashCode(): Int
5441 ===> phantm.types.TFloatLit.productIterator: Iterator[Any]
908 ===> phantm.ast.Trees.StaticMethodRef.productElement(x$1: Int): Any
2604 ===> phantm.ast.Trees.New.apply(cl: phantm.ast.Trees.ClassRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.New
2675 ===> phantm.ast.Trees.VoidExpr.hashCode(): Int
1393 ===> phantm.ast.Trees.While.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement): phantm.ast.Trees.While
2276 ===> phantm.ast.Trees.Smaller.readResolve(): Object
2553 ===> phantm.ast.Trees.Constant.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant
2191 ===> phantm.ast.Trees.BooleanNot.productArity: Int
1916 ===> phantm.ast.Trees.Mult.productArity: Int
1701 ===> phantm.ast.Trees.ArrayEntry.apply(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
2803 ===> phantm.ast.Trees.MCLine.toString(): String
24 ===> phantm.Settings.typeFlowFilter: List[String]
5364 ===> phantm.types.TArray.lookupByType(typ: phantm.types.Type): phantm.types.Type
4407 ===> phantm.phases.ASTCollector.functionsDecls: List[phantm.ast.Trees.FunctionDecl]
3972 ===> phantm.cfg.Trees.MULT.productArity: Int
1226 ===> phantm.ast.Trees.InterfaceDecl.<init>(name: phantm.ast.Trees.NSIdentifier,interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.InterfaceDecl
1796 ===> phantm.ast.Trees.ExpandArray.expr: phantm.ast.Trees.Expression
5477 ===> phantm.types.TFalse.canEqual(x$1: Any): Boolean
112 ===> phantm.Settings.apply$default$1: Int @scala.annotation.unchecked.uncheckedVariance
4511 ===> phantm.phases.MethodGraphPhase.<init>(): phantm.phases.MethodGraphPhase.type
3281 ===> phantm.cfg.Trees.AssumeNotProperty.copy$default$2: List[phantm.cfg.Trees.Variable] @scala.annotation.unchecked.uncheckedVariance
5264 ===> phantm.types.ObjectStore.<init>(): phantm.types.ObjectStore.type
4871 ===> phantm.symbols.LookupResult.productPrefix: String
815 ===> phantm.ast.Trees.StaticClassRef.unapply(x$0: phantm.ast.Trees.StaticClassRef): Option[phantm.ast.Trees.NSIdentifier]
98 ===> phantm.InlineManual.productArity: Int
1073 ===> phantm.ast.Trees.OAExpression.readResolve(): Object
3202 ===> phantm.cfg.Trees.IsFloat.toString(): String
3196 ===> phantm.cfg.Trees.IsFloat.productPrefix: String
5402 ===> phantm.types.TInt.hashCode(): Int
2039 ===> phantm.ast.Trees.BooleanAnd.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5413 ===> phantm.types.TIntLit.productIterator: Iterator[Any]
3085 ===> phantm.cfg.Trees.AssignUnary.copy(variable: phantm.cfg.Trees.Variable,unOp: phantm.cfg.Trees.UnaryOperator,expr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignUnary
5014 ===> phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject)
744 ===> phantm.ast.Trees.NSIdentifier.isFullyQualified: Boolean
1485 ===> phantm.ast.Trees.Break.apply(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Break
28 ===> phantm.Settings.apis: List[String]
3866 ===> phantm.cfg.Trees.FunctionCall.productElement(x$1: Int): Any
4560 ===> phantm.phases.PhaseException.copy(ph: phantm.phases.Phase,error: String): phantm.phases.PhaseException
4068 ===> phantm.cfg.Trees.SHIFTLEFT.<init>(): phantm.cfg.Trees.SHIFTLEFT.type
3641 ===> phantm.cfg.Trees.PHPAny.hashCode(): Int
1547 ===> phantm.ast.Trees.Static.canEqual(x$1: Any): Boolean
5129 ===> phantm.types.ClassType.<init>(): phantm.types.ClassType
4292 ===> phantm.helpers.CFGGraphs.n: Int
491 ===> phantm.ast.Trees.MethodDecl.retref: Boolean
1698 ===> phantm.ast.Trees.ArrayEntry.equals(x$1: Any): Boolean
5181 ===> phantm.types.TFunction.readResolve(): Object
4896 ===> phantm.symbols.ClassSymbol.ifaces_$eq(x$1: List[phantm.symbols.IfaceSymbol]): Unit
2250 ===> phantm.ast.Trees.Identical.hashCode(): Int
1157 ===> phantm.ast.Trees.Namespaced.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
4702 ===> phantm.phases.SymContext.readResolve(): Object
2846 ===> phantm.ast.Trees.MCFunction.canEqual(x$1: Any): Boolean
1477 ===> phantm.ast.Trees.Break.productElement(x$1: Int): Any
2672 ===> phantm.ast.Trees.VoidExpr.productElement(x$1: Int): Any
2509 ===> phantm.ast.Trees.Empty.<init>(): phantm.ast.Trees.Empty.type
2999 ===> phantm.cfg.LabeledDirectedGraphImp.Group.name: String
4677 ===> phantm.phases.SymbolsChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
3934 ===> phantm.cfg.Trees.Clone.obj: phantm.cfg.Trees.SimpleValue
5741 ===> phantm.util.Position.toString(): String
2369 ===> phantm.ast.Trees.Silence.apply(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Silence
3976 ===> phantm.cfg.Trees.MULT.hashCode(): Int
760 ===> phantm.ast.Trees.NSIdentifier.apply(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
3394 ===> phantm.cfg.Trees.ClassRefFixed.toString(): String
2110 ===> phantm.ast.Trees.BitwiseOr.lhs: phantm.ast.Trees.Expression
2103 ===> phantm.ast.Trees.BitwiseAnd.toString(): String
3077 ===> phantm.cfg.Trees.Assign.toString(): String
6014 ===> phantm.util.Unserializer.result: phantm.util.UValue
3311 ===> phantm.cfg.Trees.Return.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Return
1750 ===> phantm.ast.Trees.DynamicObjectProperty.canEqual(x$1: Any): Boolean
3480 ===> phantm.cfg.Trees.VariableVar.hashCode(): Int
4961 ===> phantm.types.TypeFlowAnalyzer.<init>(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer
115 ===> phantm.Settings.apply$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
5660 ===> phantm.util.DumpCollector.canEqual(x$1: Any): Boolean
797 ===> phantm.ast.Trees.DynamicClassRef.apply(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef
2428 ===> phantm.ast.Trees.Print.productArity: Int
5830 ===> phantm.util.ErrorException.nn: Int
2568 ===> phantm.ast.Trees.Constant.readResolve(): Object
3806 ===> phantm.cfg.Trees.Constant.copy(cs: phantm.symbols.ConstantSymbol): phantm.cfg.Trees.Constant
1061 ===> phantm.ast.Trees.OAExpression.productPrefix: String
1509 ===> phantm.ast.Trees.Return.productPrefix: String
2564 ===> phantm.ast.Trees.Constant.<init>(): phantm.ast.Trees.Constant.type
1924 ===> phantm.ast.Trees.Mult.toString(): String
4589 ===> phantm.phases.PhaseSeq.toString(): String
5061 ===> phantm.types.TypeTransferFunction.simpleText(t: phantm.types.Type): String
1175 ===> phantm.ast.Trees.Import.copy(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
1245 ===> phantm.ast.Trees.Try.body: phantm.ast.Trees.Statement
3631 ===> phantm.cfg.Trees.PHPTrue.apply(): phantm.cfg.Trees.PHPTrue
871 ===> phantm.ast.Trees.StaticFunctionRef.productPrefix: String
1447 ===> phantm.ast.Trees.For.<init>(): phantm.ast.Trees.For.type
4077 ===> phantm.cfg.Trees.SHIFTRIGHT.<init>(): phantm.cfg.Trees.SHIFTRIGHT.type
986 ===> phantm.ast.Trees.InitVariable.copy(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
4532 ===> phantm.phases.NSWrapper.appendSoFar(): Unit
2892 ===> phantm.cfg.ASTToCFG.FreshVariable.apply(prefix: String): phantm.cfg.Trees.TempID
4494 ===> phantm.phases.CallGraphGeneration.canEqual(x$1: Any): Boolean
3615 ===> phantm.cfg.Trees.PHPString.<init>(): phantm.cfg.Trees.PHPString.type
3111 ===> phantm.cfg.Trees.AssignBinary.productPrefix: String
553 ===> phantm.ast.Trees.ConstantDecl.v: phantm.ast.Trees.NSIdentifier
3049 ===> phantm.cfg.Trees.Unset.copy(variable: phantm.cfg.Trees.Variable): phantm.cfg.Trees.Unset
4558 ===> phantm.phases.PhaseException.error: String
1375 ===> phantm.ast.Trees.If.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3823 ===> phantm.cfg.Trees.ClassConstant.copy(cl: phantm.cfg.Trees.ClassRef,name: phantm.ast.Trees.Identifier): phantm.cfg.Trees.ClassConstant
2257 ===> phantm.ast.Trees.Identical.readResolve(): Object
1717 ===> phantm.ast.Trees.NextArrayEntry.toString(): String
4155 ===> phantm.cfg.Trees.NOTIDENTICAL.canEqual(x$1: Any): Boolean
5505 ===> phantm.types.TStringLit.toString(): String
661 ===> phantm.ast.Trees.MFPrivate.hashCode(): Int
4518 ===> phantm.phases.MethodGraphGeneration.MethodGraph.symToV: scala.collection.immutable.Map[phantm.symbols.MethodSymbol,phantm.cfg.VertexImp[String]]
528 ===> phantm.ast.Trees.PropertyDecl.equals(x$1: Any): Boolean
3445 ===> phantm.cfg.Trees.TempID.productElement(x$1: Int): Any
3486 ===> phantm.cfg.Trees.VariableVar.readResolve(): Object
2490 ===> phantm.ast.Trees.Isset.toString(): String
3622 ===> phantm.cfg.Trees.PHPTrue.productPrefix: String
993 ===> phantm.ast.Trees.InitVariable.canEqual(x$1: Any): Boolean
2008 ===> phantm.ast.Trees.PreDec.canEqual(x$1: Any): Boolean
4081 ===> phantm.cfg.Trees.SHIFTRIGHT.productElement(x$1: Int): Any
4661 ===> phantm.phases.PureStatementsChecks.productPrefix: String
5368 ===> phantm.types.TArray.inject$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
2188 ===> phantm.ast.Trees.BooleanNot.copy(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
3139 ===> phantm.cfg.Trees.Assume.relOp: phantm.cfg.Trees.RelationalOperator
3775 ===> phantm.cfg.Trees.ArrayCurKey.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
3237 ===> phantm.cfg.Trees.IsObject.hashCode(): Int
1165 ===> phantm.ast.Trees.Namespaced.toString(): String
2781 ===> phantm.ast.Trees.MCFile.copy(): phantm.ast.Trees.MCFile
1911 ===> phantm.ast.Trees.Mult.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mult
170 ===> phantm.annotations.FunctionAnnotation.isPure_$eq(x$1: Boolean): Unit
2071 ===> phantm.ast.Trees.BooleanOr.readResolve(): Object
4367 ===> phantm.phases.CheckContext.productElement(x$1: Int): Any
1936 ===> phantm.ast.Trees.Concat.productElement(x$1: Int): Any
332 ===> phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl]
2435 ===> phantm.ast.Trees.Print.<init>(): phantm.ast.Trees.Print.type
2359 ===> phantm.ast.Trees.Silence.productPrefix: String
5495 ===> phantm.types.TStringLit.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
5430 ===> phantm.types.TFloat.hashCode(): Int
5375 ===> phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray
3225 ===> phantm.cfg.Trees.IsString.productElement(x$1: Int): Any
3089 ===> phantm.cfg.Trees.AssignUnary.productPrefix: String
5408 ===> phantm.types.TIntLit.copy(value: Long): phantm.types.TIntLit
5595 ===> phantm.util.API.Reader.APIPos.toString(): String
6020 ===> phantm.util.Unserializer.recursionLimit: Int
5179 ===> phantm.types.TFunction.apply(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
524 ===> phantm.ast.Trees.PropertyDecl.productIterator: Iterator[Any]
2533 ===> phantm.ast.Trees.Require.path: phantm.ast.Trees.Expression
4552 ===> phantm.phases.Phase.name: String
1308 ===> phantm.ast.Trees.Goto.productElement(x$1: Int): Any
2558 ===> phantm.ast.Trees.Constant.productElement(x$1: Int): Any
394 ===> phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess]
3199 ===> phantm.cfg.Trees.IsFloat.productIterator: Iterator[Any]
289 ===> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
5665 ===> phantm.util.DumpCollector.toString(): String
2475 ===> phantm.ast.Trees.Closure.<init>(): phantm.ast.Trees.Closure.type
3430 ===> phantm.cfg.Trees.ClassRefUnknown.productIterator: Iterator[Any]
133 ===> phantm.Settings.apply$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
4002 ===> phantm.cfg.Trees.MOD.canEqual(x$1: Any): Boolean
3446 ===> phantm.cfg.Trees.TempID.productIterator: Iterator[Any]
2326 ===> phantm.ast.Trees.Ternary.productIterator: Iterator[Any]
4268 ===> phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any]
3020 ===> phantm.cfg.LabeledDirectedGraphImp.Group.hashCode(): Int
2357 ===> phantm.ast.Trees.Silence.copy(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Silence
3609 ===> phantm.cfg.Trees.PHPString.productArity: Int
2060 ===> phantm.ast.Trees.BooleanOr.productArity: Int
1674 ===> phantm.ast.Trees.VariableVariable.productElement(x$1: Int): Any
1413 ===> phantm.ast.Trees.DoWhile.copy(body: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression): phantm.ast.Trees.DoWhile
3129 ===> phantm.cfg.Trees.Error.productIterator: Iterator[Any]
4072 ===> phantm.cfg.Trees.SHIFTLEFT.productElement(x$1: Int): Any
2538 ===> phantm.ast.Trees.Require.copy$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
5839 ===> phantm.util.ErrorException.productPrefix: String
906 ===> phantm.ast.Trees.StaticMethodRef.productPrefix: String
1950 ===> phantm.ast.Trees.Mod.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mod
5000 ===> phantm.types.TypeHelpers.typeHintToType(th: Option[phantm.ast.Trees.TypeHint]): phantm.types.Type
306 ===> phantm.ast.ASTSimpleTraversal.traverse(visit: phantm.ast.Trees.Tree => Boolean): Unit
664 ===> phantm.ast.Trees.MFFinal.<init>(): phantm.ast.Trees.MFFinal.type
2565 ===> phantm.ast.Trees.Constant.toString(): String
516 ===> phantm.ast.Trees.PropertyDecl.<init>(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
1563 ===> phantm.ast.Trees.Echo.productIterator: Iterator[Any]
4109 ===> phantm.cfg.Trees.GEQ.productIterator: Iterator[Any]
4056 ===> phantm.cfg.Trees.BITWISEOR.canEqual(x$1: Any): Boolean
933 ===> phantm.ast.Trees.CastString.productIterator: Iterator[Any]
4648 ===> phantm.phases.PureStatementsPhase.name: String
3375 ===> phantm.cfg.Trees.ClassRefDynamic.sv: phantm.cfg.Trees.SimpleValue
3727 ===> phantm.cfg.Trees.Cast.copy$default$2: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
99 ===> phantm.InlineManual.productElement(x$1: Int): Any
4866 ===> phantm.symbols.LookupResult.isError: Boolean
2264 ===> phantm.ast.Trees.Smaller.productPrefix: String
3870 ===> phantm.cfg.Trees.FunctionCall.equals(x$1: Any): Boolean
1486 ===> phantm.ast.Trees.Break.unapply(x$0: phantm.ast.Trees.Break): Option[phantm.ast.Trees.Expression]
950 ===> phantm.ast.Trees.CastArray.productElement(x$1: Int): Any
4040 ===> phantm.cfg.Trees.BOOLEANXOR.readResolve(): Object
488 ===> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
2115 ===> phantm.ast.Trees.BitwiseOr.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1034 ===> phantm.ast.Trees.CallArg.toString(): String
4139 ===> phantm.cfg.Trees.IDENTICAL.readResolve(): Object
5679 ===> phantm.util.GlobalAnalysisResults.globalCalls: Map[phantm.symbols.FunctionSymbol,Map[String,phantm.types.TypeEnvironment]]
3044 ===> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
2735 ===> phantm.ast.Trees.PHPFloat.productPrefix: String
5337 ===> phantm.types.IntKey.v: Long
3300 ===> phantm.cfg.Trees.Print.productElement(x$1: Int): Any
2433 ===> phantm.ast.Trees.Print.toString(): String
1102 ===> phantm.ast.Trees.OAMethod.productIterator: Iterator[Any]
3860 ===> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
3616 ===> phantm.cfg.Trees.PHPString.toString(): String
5624 ===> phantm.util.ConstantsResolver.copy$default$3: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
4324 ===> phantm.helpers.Main.main(args: Array[String]): Unit
667 ===> phantm.ast.Trees.MFFinal.productElement(x$1: Int): Any
5585 ===> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
769 ===> phantm.ast.Trees.VarClassRef.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
4796 ===> phantm.symbols.ID.next: Int
1881 ===> phantm.ast.Trees.Minus.canEqual(x$1: Any): Boolean
260 ===> phantm.annotations.SourceAnnotations.Parser.Entry.unapply(x$0: phantm.annotations.SourceAnnotations.Parser.Entry): Option[(String, phantm.types.Type)]
1960 ===> phantm.ast.Trees.Mod.equals(x$1: Any): Boolean
395 ===> phantm.ast.STToAST.variable_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
1771 ===> phantm.ast.Trees.ClassProperty.toString(): String
1056 ===> phantm.ast.Trees.OAIdentifier.readResolve(): Object
4322 ===> phantm.helpers.Main.input: Option[String]
3779 ===> phantm.cfg.Trees.ArrayCurKey.productIterator: Iterator[Any]
2096 ===> phantm.ast.Trees.BitwiseAnd.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3698 ===> phantm.cfg.Trees.PHPEmptyArray.equals(x$1: Any): Boolean
3630 ===> phantm.cfg.Trees.PHPTrue.toString(): String
2829 ===> phantm.ast.Trees.MCClass.productElement(x$1: Int): Any
1223 ===> phantm.ast.Trees.InterfaceDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
2813 ===> phantm.ast.Trees.MCDir.productArity: Int
905 ===> phantm.ast.Trees.StaticMethodRef.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
5730 ===> phantm.util.JavaListIteratorWrapper.productIterator: Iterator[Any]
801 ===> phantm.ast.Trees.StaticClassRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticClassRef
2505 ===> phantm.ast.Trees.Empty.canEqual(x$1: Any): Boolean
631 ===> phantm.ast.Trees.MFAbstract.productElement(x$1: Int): Any
4179 ===> phantm.cfg.Trees.PREINC.productPrefix: String
1316 ===> phantm.ast.Trees.Goto.apply(to: phantm.ast.Trees.Label): phantm.ast.Trees.Goto
5174 ===> phantm.types.TFunction.canEqual(x$1: Any): Boolean
547 ===> phantm.ast.Trees.ClassConstantDecl.equals(x$1: Any): Boolean
2037 ===> phantm.ast.Trees.BooleanAnd.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd
6016 ===> phantm.util.Unserializer.regVal(v: phantm.util.UValue): phantm.util.UValue
5549 ===> phantm.types.TBottom.<init>(): phantm.types.TBottom.type
1376 ===> phantm.ast.Trees.If.copy$default$2: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
2805 ===> phantm.ast.Trees.MCLine.<init>(): phantm.ast.Trees.MCLine.type
3929 ===> phantm.cfg.Trees.New.<init>(): phantm.cfg.Trees.New.type
1436 ===> phantm.ast.Trees.For.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5794 ===> phantm.util.Reporter.tickCount: Int
4082 ===> phantm.cfg.Trees.SHIFTRIGHT.productIterator: Iterator[Any]
5305 ===> phantm.types.TRealObject.injectField(index: phantm.cfg.Trees.SimpleValue,typ: phantm.types.Type,weak: Boolean,forceWeak: Boolean): phantm.types.TRealObject
4503 ===> phantm.phases.DumpsCollectionPhase.<init>(): phantm.phases.DumpsCollectionPhase.type
4162 ===> phantm.cfg.Trees.BOOLEANNOT.productArity: Int
5039 ===> phantm.types.TypeTransferFunction.falseTypes: phantm.types.Type
3094 ===> phantm.cfg.Trees.AssignUnary.hashCode(): Int
5703 ===> phantm.util.IncludeResolver.<init>(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext): phantm.util.IncludeResolver
5322 ===> phantm.types.StringKey.vToString: String
1641 ===> phantm.ast.Trees.Void.hashCode(): Int
4052 ===> phantm.cfg.Trees.BITWISEOR.productPrefix: String
262 ===> phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]
1301 ===> phantm.ast.Trees.Throw.readResolve(): Object
237 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.equals(x$1: Any): Boolean
1807 ===> phantm.ast.Trees.ExpandArray.toString(): String
1428 ===> phantm.ast.Trees.DoWhile.readResolve(): Object
745 ===> phantm.ast.Trees.NSIdentifier.value: String
3478 ===> phantm.cfg.Trees.VariableVar.productIterator: Iterator[Any]
3254 ===> phantm.cfg.Trees.IsResource.canEqual(x$1: Any): Boolean
4540 ===> phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
184 ===> phantm.annotations.SourceAnnotations.<init>(): phantm.annotations.SourceAnnotations.type
2462 ===> phantm.ast.Trees.Closure.copy(args: List[phantm.ast.Trees.ArgumentDecl],imports: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Closure
3826 ===> phantm.cfg.Trees.ClassConstant.productPrefix: String
1054 ===> phantm.ast.Trees.OAIdentifier.apply(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.OAIdentifier
4880 ===> phantm.symbols.LookupResult.toString(): String
1572 ===> phantm.ast.Trees.Echo.readResolve(): Object
530 ===> phantm.ast.Trees.PropertyDecl.toString(): String
3593 ===> phantm.cfg.Trees.PHPFloat.productArity: Int
580 ===> phantm.ast.Trees.CFNormal.toString(): String
1017 ===> phantm.ast.Trees.Label.unapply(x$0: phantm.ast.Trees.Label): Option[phantm.ast.Trees.Identifier]
5165 ===> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
5059 ===> phantm.types.TypeTransferFunction.typeErrorF(format: String,pos: phantm.util.Positional,etyp: phantm.types.Type,vtyp: phantm.types.Type): Unit
4546 ===> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
1896 ===> phantm.ast.Trees.Div.productPrefix: String
5459 ===> phantm.types.TBoolean.toString(): String
4008 ===> phantm.cfg.Trees.INSTANCEOF.productArity: Int
1016 ===> phantm.ast.Trees.Label.apply(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.Label
4894 ===> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
3710 ===> phantm.cfg.Trees.SubTypeOf.productPrefix: String
5627 ===> phantm.util.ConstantsResolver.productElement(x$1: Int): Any
5475 ===> phantm.types.TFalse.productElement(x$1: Int): Any
4646 ===> phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit
4864 ===> phantm.symbols.LookupResult.staticClash: Boolean
5878 ===> phantm.util.UObject.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
3526 ===> phantm.cfg.Trees.ObjectProperty.copy$default$2: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
662 ===> phantm.ast.Trees.MFPrivate.toString(): String
4042 ===> phantm.cfg.Trees.BITWISEAND.toString(): String
3623 ===> phantm.cfg.Trees.PHPTrue.productArity: Int
3022 ===> phantm.cfg.LabeledDirectedGraphImp.Group.equals(x$1: Any): Boolean
5291 ===> phantm.types.TRealObject.ct: phantm.types.ClassType
5081 ===> phantm.types.TypeTransferFunction.filterOType(v: phantm.cfg.Trees.Variable,reft: Option[phantm.types.Type]): Unit
975 ===> phantm.ast.Trees.CastUnset.productPrefix: String
5673 ===> phantm.util.Evaluator.dirname(path: String): String
4644 ===> phantm.phases.PhasesRunner.<init>(reporter: phantm.util.Reporter): phantm.phases.PhasesRunner
3828 ===> phantm.cfg.Trees.ClassConstant.productElement(x$1: Int): Any
1019 ===> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
5172 ===> phantm.types.TFunction.productElement(x$1: Int): Any
746 ===> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
2033 ===> phantm.ast.Trees.PostDec.readResolve(): Object
2709 ===> phantm.ast.Trees.PHPFalse.<init>(): phantm.ast.Trees.PHPFalse.type
2602 ===> phantm.ast.Trees.New.<init>(): phantm.ast.Trees.New.type
2811 ===> phantm.ast.Trees.MCDir.copy(): phantm.ast.Trees.MCDir
4124 ===> phantm.cfg.Trees.EQUALS.productPrefix: String
1823 ===> phantm.ast.Trees.Assign.productArity: Int
2947 ===> phantm.cfg.VertexImp.<init>(): phantm.cfg.VertexImp.type
4634 ===> phantm.phases.PhasesContext.apply$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
2656 ===> phantm.ast.Trees.StaticMethodCall.productArity: Int
870 ===> phantm.ast.Trees.StaticFunctionRef.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
1713 ===> phantm.ast.Trees.NextArrayEntry.hashCode(): Int
2130 ===> phantm.ast.Trees.BitwiseXor.rhs: phantm.ast.Trees.Expression
4789 ===> phantm.symbols.Symbol.setOverwriteable: Symbol.this.type
3741 ===> phantm.cfg.Trees.ArrayNext.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayNext
5786 ===> phantm.util.Reporter.Error.productIterator: Iterator[Any]
4306 ===> phantm.helpers.CFGGraphs.equals(x$1: Any): Boolean
2946 ===> phantm.cfg.VertexImp.equals(x$1: Any): Boolean
822 ===> phantm.ast.Trees.CalledClass.productIterator: Iterator[Any]
4642 ===> phantm.phases.PhasesContext.readResolve(): Object
1397 ===> phantm.ast.Trees.While.productPrefix: String
2971 ===> phantm.cfg.EdgeImp.apply[L](v1: phantm.cfg.VertexImp[L],lab: L,v2: phantm.cfg.VertexImp[L]): phantm.cfg.EdgeImp[L]
5525 ===> phantm.types.TResource.canEqual(x$1: Any): Boolean
3912 ===> phantm.cfg.Trees.MethodCall.toString(): String
2158 ===> phantm.ast.Trees.ShiftLeft.canEqual(x$1: Any): Boolean
1330 ===> phantm.ast.Trees.LabelDecl.equals(x$1: Any): Boolean
3984 ===> phantm.cfg.Trees.DIV.canEqual(x$1: Any): Boolean
2678 ===> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr.type
4810 ===> phantm.symbols.GlobalSymbols.functions_$eq(x$1: scala.collection.mutable.HashMap[String,phantm.symbols.FunctionSymbol]): Unit
2337 ===> phantm.ast.Trees.Cast.value: phantm.ast.Trees.Expression
3582 ===> phantm.cfg.Trees.PHPLong.equals(x$1: Any): Boolean
1195 ===> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
5530 ===> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
2888 ===> phantm.cfg.ASTToCFG.FreshName.count: Int
2183 ===> phantm.ast.Trees.ShiftRight.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftRight
4883 ===> phantm.symbols.LookupResult.readResolve(): Object
3172 ===> phantm.cfg.Trees.Empty.productIterator: Iterator[Any]
1756 ===> phantm.ast.Trees.DynamicObjectProperty.apply(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicObjectProperty
1653 ===> phantm.ast.Trees.SimpleVariable.copy(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
2199 ===> phantm.ast.Trees.BooleanNot.toString(): String
59 ===> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
3346 ===> phantm.cfg.Trees.Identifier.productArity: Int
1604 ===> phantm.ast.Trees.Unset.apply(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Unset
3364 ===> phantm.cfg.Trees.FuncRef.productIterator: Iterator[Any]
4358 ===> phantm.phases.ASTChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
3023 ===> phantm.cfg.LabeledDirectedGraphImp.Group.<init>(): LabeledDirectedGraphImp.this.Group.type
543 ===> phantm.ast.Trees.ClassConstantDecl.productIterator: Iterator[Any]
2554 ===> phantm.ast.Trees.Constant.copy(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant
1402 ===> phantm.ast.Trees.While.hashCode(): Int
5262 ===> phantm.types.ObjectStore.hashCode(): Int
2544 ===> phantm.ast.Trees.Require.hashCode(): Int
1063 ===> phantm.ast.Trees.OAExpression.productElement(x$1: Int): Any
4135 ===> phantm.cfg.Trees.IDENTICAL.productElement(x$1: Int): Any
2239 ===> phantm.ast.Trees.Identical.lhs: phantm.ast.Trees.Expression
4425 ===> phantm.phases.CFGGenerator.ctx_$eq(x$1: phantm.phases.PhasesContext): Unit
844 ===> phantm.ast.Trees.VarFunctionRef.equals(x$1: Any): Boolean
3859 ===> phantm.cfg.Trees.FunctionCall.params: List[phantm.cfg.Trees.SimpleValue]
169 ===> phantm.annotations.FunctionAnnotation.isPure: Boolean
4716 ===> phantm.phases.CollectSymbols.ifaceList: List[(phantm.symbols.IfaceSymbol, phantm.ast.Trees.InterfaceDecl)]
1968 ===> phantm.ast.Trees.PreInc.copy(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreInc
2594 ===> phantm.ast.Trees.New.productPrefix: String
517 ===> phantm.ast.Trees.PropertyDecl.copy(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
5996 ===> phantm.util.UTrue.<init>(): phantm.util.UTrue.type
595 ===> phantm.ast.Trees.CFFinal.productIterator: Iterator[Any]
763 ===> phantm.ast.Trees.NSName.<init>(): phantm.ast.Trees.NSName.type
5977 ===> phantm.util.URealRef.readResolve(): Object
5053 ===> phantm.types.TypeTransferFunction.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[(phantm.types.ArrayKey, phantm.types.Type),(phantm.types.ArrayKey, phantm.types.Type) with phantm.types.IntKey] with Serializable
5409 ===> phantm.types.TIntLit.copy$default$1: Long @scala.annotation.unchecked.uncheckedVariance
5197 ===> phantm.types.ObjectIdTmp.productPrefix: String
5160 ===> phantm.types.FunctionType.ret: phantm.types.Type
4065 ===> phantm.cfg.Trees.BITWISEXOR.canEqual(x$1: Any): Boolean
1595 ===> phantm.ast.Trees.Unset.productArity: Int
5856 ===> phantm.util.UArray.copy(entries: Map[phantm.util.UValue,phantm.util.UValue]): phantm.util.UArray
338 ===> phantm.ast.STToAST.class_entry_type(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassFlag
1577 ===> phantm.ast.Trees.Html.productPrefix: String
4822 ===> phantm.symbols.GlobalSymbols.getClasses: List[phantm.symbols.ClassSymbol]
3750 ===> phantm.cfg.Trees.ArrayNext.equals(x$1: Any): Boolean
3530 ===> phantm.cfg.Trees.ObjectProperty.productIterator: Iterator[Any]
1539 ===> phantm.ast.Trees.Static.vars: List[phantm.ast.Trees.InitVariable]
5232 ===> phantm.types.ObjectId.productPrefix: String
4501 ===> phantm.phases.CallGraphGeneration.unapply(x$0: phantm.phases.CallGraphGeneration): Option[(phantm.ast.Trees.Tree, phantm.phases.CGContext, phantm.phases.PhasesContext)]
1183 ===> phantm.ast.Trees.Import.hashCode(): Int
2005 ===> phantm.ast.Trees.PreDec.productArity: Int
1817 ===> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
2994 ===> phantm.cfg.LabeledDirectedGraphImp.groups_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
947 ===> phantm.ast.Trees.CastArray.<init>(): phantm.ast.Trees.CastArray.type
3305 ===> phantm.cfg.Trees.Print.<init>(): phantm.cfg.Trees.Print.type
3844 ===> phantm.cfg.Trees.Ternary.copy$default$2: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
230 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productPrefix: String
5320 ===> phantm.types.StringKey.<init>(v: String): phantm.types.StringKey
4302 ===> phantm.helpers.CFGGraphs.productIterator: Iterator[Any]
1159 ===> phantm.ast.Trees.Namespaced.productPrefix: String
2819 ===> phantm.ast.Trees.MCDir.equals(x$1: Any): Boolean
857 ===> phantm.ast.Trees.DynamicFunctionRef.productIterator: Iterator[Any]
2089 ===> phantm.ast.Trees.BooleanXor.unapply(x$0: phantm.ast.Trees.BooleanXor): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
187 ===> phantm.annotations.SourceAnnotations.Parser.typedefs_$eq(x$1: scala.collection.immutable.Map[String,phantm.types.Type]): Unit
4165 ===> phantm.cfg.Trees.BOOLEANNOT.canEqual(x$1: Any): Boolean
2261 ===> phantm.ast.Trees.Smaller.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Smaller
3109 ===> phantm.cfg.Trees.AssignBinary.copy$default$3: phantm.cfg.Trees.BinaryOperator @scala.annotation.unchecked.uncheckedVariance
3055 ===> phantm.cfg.Trees.Unset.canEqual(x$1: Any): Boolean
5567 ===> phantm.types.TUninitialized.toString(): String
1446 ===> phantm.ast.Trees.For.equals(x$1: Any): Boolean
1832 ===> phantm.ast.Trees.Assign.apply(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
3427 ===> phantm.cfg.Trees.ClassRefUnknown.productPrefix: String
4442 ===> phantm.phases.CFGGenerator.unapply(x$0: phantm.phases.CFGGenerator): Option[(phantm.phases.PhasesContext, phantm.ast.Trees.Tree)]
4963 ===> phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type
3861 ===> phantm.cfg.Trees.FunctionCall.copy(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
1457 ===> phantm.ast.Trees.Switch.copy$default$2: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] @scala.annotation.unchecked.uncheckedVariance
3058 ===> phantm.cfg.Trees.Unset.<init>(): phantm.cfg.Trees.Unset.type
4998 ===> phantm.types.TypeHelpers.exprToType(oe: Option[phantm.ast.Trees.Expression]): phantm.types.Type
2699 ===> phantm.ast.Trees.PHPFalse.<init>(): phantm.ast.Trees.PHPFalse
4391 ===> phantm.phases.ASTIntegrityChecks.canEqual(x$1: Any): Boolean
2171 ===> phantm.ast.Trees.ShiftRight.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2769 ===> phantm.ast.Trees.PHPNull.productElement(x$1: Int): Any
4527 ===> phantm.phases.NamespaceResolverPhase.name: String
3911 ===> phantm.cfg.Trees.MethodCall.<init>(): phantm.cfg.Trees.MethodCall.type
5403 ===> phantm.types.TInt.toString(): String
5860 ===> phantm.util.UArray.productElement(x$1: Int): Any
3424 ===> phantm.cfg.Trees.ClassRefUnknown.<init>(): phantm.cfg.Trees.ClassRefUnknown
1697 ===> phantm.ast.Trees.ArrayEntry.toString(): String
819 ===> phantm.ast.Trees.CalledClass.productPrefix: String
1592 ===> phantm.ast.Trees.Unset.copy(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Unset
215 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productElement(x$1: Int): Any
521 ===> phantm.ast.Trees.PropertyDecl.productPrefix: String
2372 ===> phantm.ast.Trees.Exit.value: Option[phantm.ast.Trees.Expression]
3983 ===> phantm.cfg.Trees.DIV.productIterator: Iterator[Any]
936 ===> phantm.ast.Trees.CastString.toString(): String
2916 ===> phantm.cfg.ASTToCFG.fewerSkips: Unit
916 ===> phantm.ast.Trees.StaticMethodRef.apply(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef
4263 ===> phantm.helpers.ASTGraph.generateDotGraph(root: phantm.ast.Trees.Program,printStream: java.io.PrintStream): Unit
25 ===> phantm.Settings.includePaths: List[String]
5648 ===> phantm.util.DumpCollector.classes: Map[String,(String, Int)]
4605 ===> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
1854 ===> phantm.ast.Trees.Plus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus
656 ===> phantm.ast.Trees.MFPrivate.productPrefix: String
2795 ===> phantm.ast.Trees.MCLine.<init>(): phantm.ast.Trees.MCLine
1344 ===> phantm.ast.Trees.Alternatives.canEqual(x$1: Any): Boolean
2380 ===> phantm.ast.Trees.Exit.canEqual(x$1: Any): Boolean
2959 ===> phantm.cfg.EdgeImp.copy$default$1[L]: phantm.cfg.VertexImp[L] @scala.annotation.unchecked.uncheckedVariance
4669 ===> phantm.phases.PureStatementsChecks.<init>(): phantm.phases.PureStatementsChecks.type
2116 ===> phantm.ast.Trees.BitwiseOr.productPrefix: String
619 ===> phantm.ast.Trees.THObject.hashCode(): Int
3694 ===> phantm.cfg.Trees.PHPEmptyArray.productElement(x$1: Int): Any
3761 ===> phantm.cfg.Trees.ArrayCurElement.productArity: Int
998 ===> phantm.ast.Trees.InitVariable.toString(): String
2688 ===> phantm.ast.Trees.PHPTrue.productElement(x$1: Int): Any
5731 ===> phantm.util.JavaListIteratorWrapper.canEqual(x$1: Any): Boolean
761 ===> phantm.ast.Trees.NSIdentifier.unapply(x$0: phantm.ast.Trees.NSIdentifier): Option[(phantm.ast.Trees.NSRoot, List[String])]
957 ===> phantm.ast.Trees.CastBool.productPrefix: String
2666 ===> phantm.ast.Trees.StaticMethodCall.unapply(x$0: phantm.ast.Trees.StaticMethodCall): Option[(phantm.ast.Trees.ClassRef, phantm.ast.Trees.MethodRef, List[phantm.ast.Trees.CallArg])]
6010 ===> phantm.util.Unserializer.objectsStore: Map[phantm.types.ObjectId,phantm.types.TRealObject]
5023 ===> phantm.types.TypeLattice.productIterator: Iterator[Any]
1739 ===> phantm.ast.Trees.ObjectProperty.readResolve(): Object
9 ===> phantm.Main.files_$eq(x$1: List[String]): Unit
602 ===> phantm.ast.Trees.THArray.productPrefix: String
1664 ===> phantm.ast.Trees.SimpleVariable.toString(): String
3409 ===> phantm.cfg.Trees.ClassRefCalledClass.<init>(): phantm.cfg.Trees.ClassRefCalledClass
2290 ===> phantm.ast.Trees.SmallerEqual.equals(x$1: Any): Boolean
5688 ===> phantm.util.GlobalAnalysisResults.inlineStack_$eq(x$1: Set[phantm.symbols.FunctionSymbol]): Unit
2207 ===> phantm.ast.Trees.BitwiseNot.productPrefix: String
4121 ===> phantm.cfg.Trees.GT.readResolve(): Object
2169 ===> phantm.ast.Trees.ShiftRight.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftRight
1304 ===> phantm.ast.Trees.Goto.copy(to: phantm.ast.Trees.Label): phantm.ast.Trees.Goto
2141 ===> phantm.ast.Trees.BitwiseXor.toString(): String
2733 ===> phantm.ast.Trees.PHPFloat.copy(value: Float): phantm.ast.Trees.PHPFloat
5302 ===> phantm.types.TRealObject.lookupMethod(index: String,from: Option[phantm.symbols.ClassSymbol]): Option[phantm.symbols.MethodSymbol]
3040 ===> phantm.cfg.Trees.Tree.toString(): String
5401 ===> phantm.types.TInt.canEqual(x$1: Any): Boolean
351 ===> phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
2211 ===> phantm.ast.Trees.BitwiseNot.canEqual(x$1: Any): Boolean
3592 ===> phantm.cfg.Trees.PHPFloat.productPrefix: String
1831 ===> phantm.ast.Trees.Assign.toString(): String
2824 ===> phantm.ast.Trees.MCDir.readResolve(): Object
2049 ===> phantm.ast.Trees.BooleanAnd.toString(): String
4266 ===> phantm.helpers.ASTGraph.getLabel(node: phantm.ast.Trees.Tree): String
889 ===> phantm.ast.Trees.DynamicMethodRef.productPrefix: String
2924 ===> phantm.cfg.LabeledDirectedGraph.newVertex: LabeledDirectedGraph.this.Vertex
5092 ===> phantm.types.TypeTransferFunction.productArity: Int
2687 ===> phantm.ast.Trees.PHPTrue.productArity: Int
1395 ===> phantm.ast.Trees.While.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5516 ===> phantm.types.TAny.hashCode(): Int
4400 ===> phantm.phases.ASTPruningPhase.<init>(): phantm.phases.ASTPruningPhase.type
4480 ===> phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit
4369 ===> phantm.phases.CheckContext.canEqual(x$1: Any): Boolean
257 ===> phantm.annotations.SourceAnnotations.Parser.Entry.<init>(): phantm.annotations.SourceAnnotations.Parser.Entry.type
3457 ===> phantm.cfg.Trees.ClassProperty.copy(symbol: phantm.symbols.PropertySymbol): phantm.cfg.Trees.ClassProperty
1879 ===> phantm.ast.Trees.Minus.productElement(x$1: Int): Any
2233 ===> phantm.ast.Trees.Equal.equals(x$1: Any): Boolean
5040 ===> phantm.types.TypeTransferFunction.allTypes: scala.collection.immutable.Set[phantm.types.Type]
287 ===> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
3688 ===> phantm.cfg.Trees.PHPThis.unapply(x$0: phantm.cfg.Trees.PHPThis): Boolean
1201 ===> phantm.ast.Trees.ClassDecl.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
5959 ===> phantm.util.UObjRef.unapply(x$0: phantm.util.UObjRef): Option[Int]
5623 ===> phantm.util.ConstantsResolver.copy$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
52 ===> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
307 ===> phantm.ast.ASTSimpleTraversal.visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext): (phantm.ast.DummyContext, Boolean)
2114 ===> phantm.ast.Trees.BitwiseOr.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3967 ===> phantm.cfg.Trees.MINUS.hashCode(): Int
609 ===> phantm.ast.Trees.THArray.readResolve(): Object
2215 ===> phantm.ast.Trees.BitwiseNot.<init>(): phantm.ast.Trees.BitwiseNot.type
5587 ===> phantm.util.API.Reader.APIPos.copy(elem: scala.xml.Node): Reader.this.APIPos
4258 ===> phantm.dataflow.StronglyConnectedComponents.topSort(sccs: Set[StronglyConnectedComponents.this.SCC]): Map[StronglyConnectedComponents.this.Vertex,Int]
507 ===> phantm.ast.Trees.MethodDecl.equals(x$1: Any): Boolean
3884 ===> phantm.cfg.Trees.StaticMethodCall.productPrefix: String
842 ===> phantm.ast.Trees.VarFunctionRef.hashCode(): Int
5603 ===> phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type
2044 ===> phantm.ast.Trees.BooleanAnd.canEqual(x$1: Any): Boolean
4651 ===> phantm.phases.PureStatementsChecks.node: phantm.ast.Trees.Tree
808 ===> phantm.ast.Trees.StaticClassRef.canEqual(x$1: Any): Boolean
185 ===> phantm.annotations.SourceAnnotations.Parser.<init>(): phantm.annotations.SourceAnnotations.Parser.type
1383 ===> phantm.ast.Trees.If.hashCode(): Int
5621 ===> phantm.util.ConstantsResolver.copy(ast: phantm.ast.Trees.Program,issueErrors: Boolean,ctx: phantm.phases.PhasesContext): phantm.util.ConstantsResolver
4744 ===> phantm.phases.CollectSymbols.readResolve(): Object
1260 ===> phantm.ast.Trees.Try.toString(): String
3931 ===> phantm.cfg.Trees.New.apply(cl: phantm.cfg.Trees.ClassRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.New
2422 ===> phantm.ast.Trees.Execute.readResolve(): Object
991 ===> phantm.ast.Trees.InitVariable.productElement(x$1: Int): Any
1984 ===> phantm.ast.Trees.PostInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostInc
5246 ===> phantm.types.ObjectStore.<init>(store: Map[phantm.types.ObjectId,phantm.types.TRealObject]): phantm.types.ObjectStore
160 ===> phantm.annotations.TypeAnnotation.annotateFromT(from: phantm.annotations.TypeAnnotation): TypeAnnotation.this.type
1628 ===> phantm.ast.Trees.Foreach.equals(x$1: Any): Boolean
2945 ===> phantm.cfg.VertexImp.hashCode(): Int
3979 ===> phantm.cfg.Trees.DIV.toString(): String
2459 ===> phantm.ast.Trees.Closure.retref: Boolean
3865 ===> phantm.cfg.Trees.FunctionCall.productArity: Int
757 ===> phantm.ast.Trees.NSIdentifier.equals(x$1: Any): Boolean
768 ===> phantm.ast.Trees.VarClassRef.copy(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef
1942 ===> phantm.ast.Trees.Concat.<init>(): phantm.ast.Trees.Concat.type
4718 ===> phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean)
5393 ===> phantm.types.TNumeric.toString(): String
5880 ===> phantm.util.UObject.productPrefix: String
1792 ===> phantm.ast.Trees.ListVar.apply(vars: List[Option[phantm.ast.Trees.Variable]]): phantm.ast.Trees.ListVar
1857 ===> phantm.ast.Trees.Plus.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3449 ===> phantm.cfg.Trees.TempID.equals(x$1: Any): Boolean
1544 ===> phantm.ast.Trees.Static.productArity: Int
2748 ===> phantm.ast.Trees.PHPString.value: String
922 ===> phantm.ast.Trees.CastInt.productArity: Int
1773 ===> phantm.ast.Trees.ClassProperty.<init>(): phantm.ast.Trees.ClassProperty.type
5286 ===> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
3377 ===> phantm.cfg.Trees.ClassRefDynamic.toString(): String
3351 ===> phantm.cfg.Trees.Identifier.equals(x$1: Any): Boolean
2782 ===> phantm.ast.Trees.MCFile.productPrefix: String
5161 ===> phantm.types.TFunctionAny.<init>(): phantm.types.TFunctionAny.type
2339 ===> phantm.ast.Trees.Cast.copy(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
5055 ===> phantm.types.TypeTransferFunction.$anonfun.isDefinedAt(x$1: (phantm.types.ArrayKey, phantm.types.Type)): Boolean
4485 ===> phantm.phases.CallGraphGeneration.execute: Unit
484 ===> phantm.ast.Trees.ArgumentDecl.toString(): String
3261 ===> phantm.cfg.Trees.AssumeProperty.copy(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeProperty
4897 ===> phantm.symbols.ClassSymbol.<init>(name: String,parent: Option[phantm.symbols.ClassSymbol],ifaces: List[phantm.symbols.IfaceSymbol]): phantm.symbols.ClassSymbol
5066 ===> phantm.types.TypeTransferFunction.checkVariable(v: phantm.cfg.Trees.Variable): phantm.types.Type
5097 ===> phantm.types.TypeTransferFunction.toString(): String
5199 ===> phantm.types.ObjectIdTmp.productElement(x$1: Int): Any
1062 ===> phantm.ast.Trees.OAExpression.productArity: Int
4980 ===> phantm.types.TypeFlowAnalyzer.canEqual(x$1: Any): Boolean
5 ===> phantm.Main.displayUsage_$eq(x$1: Boolean): Unit
3450 ===> phantm.cfg.Trees.TempID.<init>(): phantm.cfg.Trees.TempID.type
1055 ===> phantm.ast.Trees.OAIdentifier.unapply(x$0: phantm.ast.Trees.OAIdentifier): Option[phantm.ast.Trees.Identifier]
5649 ===> phantm.util.DumpCollector.classes_$eq(x$1: Map[String,(String, Int)]): Unit
1487 ===> phantm.ast.Trees.Break.readResolve(): Object
471 ===> phantm.ast.Trees.ArgumentDecl.copy$default$1: phantm.ast.Trees.SimpleVariable @scala.annotation.unchecked.uncheckedVariance
738 ===> phantm.ast.Trees.Identifier.apply(value: String): phantm.ast.Trees.Identifier
1803 ===> phantm.ast.Trees.ExpandArray.productElement(x$1: Int): Any
4472 ===> phantm.phases.CallGraphGeneration.CallGraph.mainCallPositions: scala.collection.immutable.Map[phantm.symbols.FunctionSymbol,Set[phantm.util.Positional]]
1715 ===> phantm.ast.Trees.NextArrayEntry.equals(x$1: Any): Boolean
4370 ===> phantm.phases.CheckContext.hashCode(): Int
5937 ===> phantm.util.UFloat.toString(): String
5714 ===> phantm.util.IncludeResolver.productPrefix: String
5506 ===> phantm.types.TStringLit.apply(value: String): phantm.types.TStringLit
2637 ===> phantm.ast.Trees.MethodCall.productIterator: Iterator[Any]
2956 ===> phantm.cfg.EdgeImp.name: String
2086 ===> phantm.ast.Trees.BooleanXor.<init>(): phantm.ast.Trees.BooleanXor.type
3620 ===> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
5706 ===> phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean
1333 ===> phantm.ast.Trees.LabelDecl.apply(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.LabelDecl
3981 ===> phantm.cfg.Trees.DIV.productArity: Int
5971 ===> phantm.util.URealRef.toString(): String
3341 ===> phantm.cfg.Trees.Identifier.setSymbol(s: phantm.symbols.Symbol): Identifier.this.type
3184 ===> phantm.cfg.Trees.IsNull.toString(): String
177 ===> phantm.annotations.AnnotationsStore.functions: scala.collection.immutable.Map[String,(List[phantm.types.TFunction], List[phantm.types.Type])]
2895 ===> phantm.cfg.ASTToCFG.Emit.pc_$eq(x$1: Vertex): Unit
5759 ===> phantm.util.Positional.previousPos: String
4115 ===> phantm.cfg.Trees.GT.productPrefix: String
1469 ===> phantm.ast.Trees.Switch.unapply(x$0: phantm.ast.Trees.Switch): Option[(phantm.ast.Trees.Expression, List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)])]
2889 ===> phantm.cfg.ASTToCFG.FreshName.count_$eq(x$1: Int): Unit
1481 ===> phantm.ast.Trees.Break.toString(): String
4874 ===> phantm.symbols.LookupResult.productIterator: Iterator[Any]
2507 ===> phantm.ast.Trees.Empty.toString(): String
1078 ===> phantm.ast.Trees.OAArray.copy$default$1: phantm.ast.Trees.OAScalar @scala.annotation.unchecked.uncheckedVariance
990 ===> phantm.ast.Trees.InitVariable.productArity: Int
3290 ===> phantm.cfg.Trees.AssumeNotProperty.toString(): String
1018 ===> phantm.ast.Trees.Label.readResolve(): Object
600 ===> phantm.ast.Trees.TypeHint.<init>(): phantm.ast.Trees.TypeHint
1858 ===> phantm.ast.Trees.Plus.productPrefix: String
2311 ===> phantm.ast.Trees.InstanceOf.toString(): String
3238 ===> phantm.cfg.Trees.IsObject.toString(): String
4865 ===> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
3203 ===> phantm.cfg.Trees.IsFloat.readResolve(): Object
2934 ===> phantm.cfg.VertexImp.in_$eq(x$1: Set[phantm.cfg.EdgeImp[L]]): Unit
3034 ===> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
2184 ===> phantm.ast.Trees.ShiftRight.unapply(x$0: phantm.ast.Trees.ShiftRight): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
4218 ===> phantm.cfg.Trees.SILENCE.productIterator: Iterator[Any]
2015 ===> phantm.ast.Trees.PreDec.unapply(x$0: phantm.ast.Trees.PreDec): Option[phantm.ast.Trees.Variable]
221 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.<init>(): phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.type
5630 ===> phantm.util.ConstantsResolver.hashCode(): Int
1382 ===> phantm.ast.Trees.If.canEqual(x$1: Any): Boolean
789 ===> phantm.ast.Trees.DynamicClassRef.productElement(x$1: Int): Any
3856 ===> phantm.cfg.Trees.Ternary.unapply(x$0: phantm.cfg.Trees.Ternary): Option[(phantm.cfg.Trees.SimpleValue, phantm.cfg.Trees.SimpleValue, phantm.cfg.Trees.SimpleValue)]
3780 ===> phantm.cfg.Trees.ArrayCurKey.canEqual(x$1: Any): Boolean
672 ===> phantm.ast.Trees.MFFinal.readResolve(): Object
4120 ===> phantm.cfg.Trees.GT.hashCode(): Int
248 ===> phantm.annotations.SourceAnnotations.Parser.Entry.copy$default$2: phantm.types.Type @scala.annotation.unchecked.uncheckedVariance
5640 ===> phantm.util.DumpCollector.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.DumpCollector
4895 ===> phantm.symbols.ClassSymbol.ifaces: List[phantm.symbols.IfaceSymbol]
1229 ===> phantm.ast.Trees.InterfaceDecl.copy$default$2: List[phantm.ast.Trees.StaticClassRef] @scala.annotation.unchecked.uncheckedVariance
4732 ===> phantm.phases.CollectSymbols.productPrefix: String
23 ===> phantm.Settings.onlyLint: Boolean
5518 ===> phantm.types.TAny.readResolve(): Object
1127 ===> phantm.ast.Trees.FunctionDecl.canEqual(x$1: Any): Boolean
3280 ===> phantm.cfg.Trees.AssumeNotProperty.copy$default$1: phantm.cfg.Trees.Property @scala.annotation.unchecked.uncheckedVariance
3743 ===> phantm.cfg.Trees.ArrayNext.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
191 ===> phantm.annotations.SourceAnnotations.Parser.ArrayEntryType.<init>(): phantm.annotations.SourceAnnotations.Parser.ArrayEntryType
2886 ===> phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph
3279 ===> phantm.cfg.Trees.AssumeNotProperty.copy(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeNotProperty
267 ===> phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)]
2601 ===> phantm.ast.Trees.New.equals(x$1: Any): Boolean
559 ===> phantm.ast.Trees.ConstantDecl.productPrefix: String
2793 ===> phantm.ast.Trees.MCFile.unapply(x$0: phantm.ast.Trees.MCFile): Boolean
6015 ===> phantm.util.Unserializer.result_$eq(x$1: phantm.util.UValue): Unit
1 ===> phantm.Main.<init>(): phantm.Main.type
5752 ===> phantm.util.Positional.file_$eq(x$1: Option[String]): Unit
3076 ===> phantm.cfg.Trees.Assign.<init>(): phantm.cfg.Trees.Assign.type
2029 ===> phantm.ast.Trees.PostDec.<init>(): phantm.ast.Trees.PostDec.type
4479 ===> phantm.phases.CallGraphGeneration.CallGraph.addCallLocation(sym: phantm.symbols.FunctionSymbol,pos: phantm.util.Positional): Unit
2780 ===> phantm.ast.Trees.MCFile.<init>(): phantm.ast.Trees.MCFile
1999 ===> phantm.ast.Trees.PostInc.readResolve(): Object
5052 ===> phantm.types.TypeTransferFunction.$anonfun.isDefinedAt(x$1: (phantm.types.ArrayKey, phantm.types.Type)): Boolean
5845 ===> phantm.util.ErrorException.equals(x$1: Any): Boolean
4053 ===> phantm.cfg.Trees.BITWISEOR.productArity: Int
2092 ===> phantm.ast.Trees.BitwiseAnd.rhs: phantm.ast.Trees.Expression
2206 ===> phantm.ast.Trees.BitwiseNot.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5310 ===> phantm.types.TRealObject.setAnyField(typ: phantm.types.Type): phantm.types.TRealObject
317 ===> phantm.ast.STToAST.getAST: phantm.ast.Trees.Program
399 ===> phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty
836 ===> phantm.ast.Trees.VarFunctionRef.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
4811 ===> phantm.symbols.GlobalSymbols.constants: scala.collection.mutable.HashMap[String,phantm.symbols.ConstantSymbol]
4363 ===> phantm.phases.CheckContext.copy$default$1: Boolean @scala.annotation.unchecked.uncheckedVariance
629 ===> phantm.ast.Trees.MFAbstract.productPrefix: String
5615 ===> phantm.util.ConstantsResolver.ast: phantm.ast.Trees.Program
2928 ===> phantm.cfg.LabeledDirectedGraph.betweenEdges(from: LabeledDirectedGraph.this.Vertex,to: LabeledDirectedGraph.this.Vertex): Set[LabeledDirectedGraph.this.Edge]
4570 ===> phantm.phases.PhaseException.<init>(): phantm.phases.PhaseException.type
1278 ===> phantm.ast.Trees.Catch.toString(): String
2823 ===> phantm.ast.Trees.MCDir.unapply(x$0: phantm.ast.Trees.MCDir): Boolean
1312 ===> phantm.ast.Trees.Goto.toString(): String
2205 ===> phantm.ast.Trees.BitwiseNot.copy(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseNot
5445 ===> phantm.types.TFloatLit.equals(x$1: Any): Boolean
3060 ===> phantm.cfg.Trees.Unset.apply(variable: phantm.cfg.Trees.Variable): phantm.cfg.Trees.Unset
5978 ===> phantm.util.UNull.<init>(): phantm.util.UNull.type
166 ===> phantm.annotations.FunctionAnnotation.$init$(): Unit
675 ===> phantm.ast.Trees.MFStatic.productArity: Int
2343 ===> phantm.ast.Trees.Cast.productArity: Int
3697 ===> phantm.cfg.Trees.PHPEmptyArray.hashCode(): Int
1118 ===> phantm.ast.Trees.FunctionDecl.copy(name: phantm.ast.Trees.NSIdentifier,args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.FunctionDecl
5382 ===> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
5094 ===> phantm.types.TypeTransferFunction.productIterator: Iterator[Any]
4542 ===> phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
3337 ===> phantm.cfg.Trees.SimpleVariable.<init>(): phantm.cfg.Trees.SimpleVariable
3175 ===> phantm.cfg.Trees.Empty.toString(): String
5208 ===> phantm.types.ObjectIdTmp.readResolve(): Object
4476 ===> phantm.phases.CallGraphGeneration.CallGraph.vToOsym: scala.collection.immutable.Map[phantm.phases.CallGraphGeneration.CallGraph.Vertex,Option[phantm.symbols.FunctionSymbol]]
225 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.readResolve(): Object
2574 ===> phantm.ast.Trees.ClassConstant.copy$default$2: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
4455 ===> phantm.phases.CGContext.productElement(x$1: Int): Any
3838 ===> phantm.cfg.Trees.Ternary.cond: phantm.cfg.Trees.SimpleValue
1128 ===> phantm.ast.Trees.FunctionDecl.hashCode(): Int
2915 ===> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
1374 ===> phantm.ast.Trees.If.copy(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If
476 ===> phantm.ast.Trees.ArgumentDecl.productArity: Int
2684 ===> phantm.ast.Trees.PHPTrue.<init>(): phantm.ast.Trees.PHPTrue
2831 ===> phantm.ast.Trees.MCClass.canEqual(x$1: Any): Boolean
2484 ===> phantm.ast.Trees.Isset.productPrefix: String
5114 ===> phantm.types.defaultTypeWF.<init>(): phantm.types.defaultTypeWF.type
2254 ===> phantm.ast.Trees.Identical.toString(): String
5284 ===> phantm.types.TObjectTmp.<init>(obj: phantm.types.TRealObject): phantm.types.TObjectTmp
3368 ===> phantm.cfg.Trees.FuncRef.equals(x$1: Any): Boolean
430 ===> phantm.ast.STToAST.copy$default$1: phantm.parser.Parser @scala.annotation.unchecked.uncheckedVariance
313 ===> phantm.ast.ASTTraversal.traverse0: Unit
2789 ===> phantm.ast.Trees.MCFile.equals(x$1: Any): Boolean
754 ===> phantm.ast.Trees.NSIdentifier.canEqual(x$1: Any): Boolean
1327 ===> phantm.ast.Trees.LabelDecl.canEqual(x$1: Any): Boolean
137 ===> phantm.Settings.$lessinit$greater$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
1758 ===> phantm.ast.Trees.DynamicObjectProperty.readResolve(): Object
5608 ===> phantm.util.API.Writer.emitXML: Unit
417 ===> phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
1408 ===> phantm.ast.Trees.While.unapply(x$0: phantm.ast.Trees.While): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)]
4144 ===> phantm.cfg.Trees.NOTEQUALS.productElement(x$1: Int): Any
3608 ===> phantm.cfg.Trees.PHPString.productPrefix: String
358 ===> phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
4752 ===> phantm.phases.TypeFlowAnalysis.node: phantm.ast.Trees.Tree
1649 ===> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
3297 ===> phantm.cfg.Trees.Print.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
683 ===> phantm.ast.Trees.NSRoot.value: String
2069 ===> phantm.ast.Trees.BooleanOr.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanOr
2392 ===> phantm.ast.Trees.Array.copy$default$1: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] @scala.annotation.unchecked.uncheckedVariance
1112 ===> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
4348 ===> phantm.phases.APIExportingPhase.name: String
393 ===> phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
1342 ===> phantm.ast.Trees.Alternatives.productElement(x$1: Int): Any
1675 ===> phantm.ast.Trees.VariableVariable.productIterator: Iterator[Any]
5748 ===> phantm.util.Positional.line_end_$eq(x$1: Int): Unit
5800 ===> phantm.util.Reporter.files_$eq(x$1: scala.collection.immutable.Map[String,List[String]]): Unit
3687 ===> phantm.cfg.Trees.PHPThis.apply(): phantm.cfg.Trees.PHPThis
1801 ===> phantm.ast.Trees.ExpandArray.productPrefix: String
2310 ===> phantm.ast.Trees.InstanceOf.<init>(): phantm.ast.Trees.InstanceOf.type
3763 ===> phantm.cfg.Trees.ArrayCurElement.productIterator: Iterator[Any]
996 ===> phantm.ast.Trees.InitVariable.equals(x$1: Any): Boolean
2393 ===> phantm.ast.Trees.Array.productPrefix: String
406 ===> phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
3811 ===> phantm.cfg.Trees.Constant.productIterator: Iterator[Any]
4220 ===> phantm.cfg.Trees.SILENCE.hashCode(): Int
1891 ===> phantm.ast.Trees.Div.rhs: phantm.ast.Trees.Expression
1920 ===> phantm.ast.Trees.Mult.hashCode(): Int
3573 ===> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
846 ===> phantm.ast.Trees.VarFunctionRef.toString(): String
2784 ===> phantm.ast.Trees.MCFile.productElement(x$1: Int): Any
4488 ===> phantm.phases.CallGraphGeneration.copy$default$2: phantm.phases.CGContext @scala.annotation.unchecked.uncheckedVariance
5231 ===> phantm.types.ObjectId.copy$default$2: phantm.types.ObjectIdType @scala.annotation.unchecked.uncheckedVariance
3632 ===> phantm.cfg.Trees.PHPTrue.unapply(x$0: phantm.cfg.Trees.PHPTrue): Boolean
3270 ===> phantm.cfg.Trees.AssumeProperty.equals(x$1: Any): Boolean
3974 ===> phantm.cfg.Trees.MULT.productIterator: Iterator[Any]
590 ===> phantm.ast.Trees.CFAbstract.readResolve(): Object
4808 ===> phantm.symbols.GlobalSymbols.ifaces_$eq(x$1: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceSymbol]): Unit
1322 ===> phantm.ast.Trees.LabelDecl.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
2418 ===> phantm.ast.Trees.Execute.<init>(): phantm.ast.Trees.Execute.type
5936 ===> phantm.util.UFloat.hashCode(): Int
2581 ===> phantm.ast.Trees.ClassConstant.toString(): String
4867 ===> phantm.symbols.LookupResult.copy[T](ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
1074 ===> phantm.ast.Trees.OAArray.array: phantm.ast.Trees.OAScalar
5534 ===> phantm.types.TNull.productIterator: Iterator[Any]
4422 ===> phantm.phases.CFGGenerator.node: phantm.ast.Trees.Tree
310 ===> phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any]
2529 ===> phantm.ast.Trees.Include.toString(): String
353 ===> phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
3499 ===> phantm.cfg.Trees.ArrayEntry.equals(x$1: Any): Boolean
2901 ===> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
226 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.t: phantm.types.Type
5611 ===> phantm.util.API.Writer.simpleTypVal(name: String,value: String): String
575 ===> phantm.ast.Trees.CFNormal.productArity: Int
5306 ===> phantm.types.TRealObject.injectField(index: String,typ: phantm.types.Type): phantm.types.TRealObject
3508 ===> phantm.cfg.Trees.NextArrayEntry.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
3575 ===> phantm.cfg.Trees.PHPLong.copy$default$1: Long @scala.annotation.unchecked.uncheckedVariance
1209 ===> phantm.ast.Trees.ClassDecl.productPrefix: String
952 ===> phantm.ast.Trees.CastArray.canEqual(x$1: Any): Boolean
659 ===> phantm.ast.Trees.MFPrivate.productIterator: Iterator[Any]
3507 ===> phantm.cfg.Trees.NextArrayEntry.copy(arr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.NextArrayEntry
2028 ===> phantm.ast.Trees.PostDec.equals(x$1: Any): Boolean
143 ===> phantm.Settings.$lessinit$greater$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
4659 ===> phantm.phases.PureStatementsChecks.copy$default$1: phantm.ast.Trees.Tree @scala.annotation.unchecked.uncheckedVariance
1589 ===> phantm.ast.Trees.Html.readResolve(): Object
648 ===> phantm.ast.Trees.MFProtected.productArity: Int
4200 ===> phantm.cfg.Trees.PREDEC.productIterator: Iterator[Any]
3815 ===> phantm.cfg.Trees.Constant.<init>(): phantm.cfg.Trees.Constant.type
224 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.unapply(x$0: phantm.annotations.SourceAnnotations.Parser.AnyStringEntry): Option[phantm.types.Type]
4788 ===> phantm.symbols.Symbol.name: String
1450 ===> phantm.ast.Trees.For.unapply(x$0: phantm.ast.Trees.For): Option[(phantm.ast.Trees.Statement, phantm.ast.Trees.Expression, phantm.ast.Trees.Statement, phantm.ast.Trees.Statement)]
244 ===> phantm.annotations.SourceAnnotations.Parser.Entry.t: phantm.types.Type
441 ===> phantm.ast.STToAST.toString(): String
4039 ===> phantm.cfg.Trees.BOOLEANXOR.hashCode(): Int
142 ===> phantm.Settings.$lessinit$greater$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
5784 ===> phantm.util.Reporter.Error.productArity: Int
1614 ===> phantm.ast.Trees.Foreach.copy(what: phantm.ast.Trees.Expression,as: phantm.ast.Trees.Variable,asbyref: Boolean,key: Option[phantm.ast.Trees.Variable],keybyref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Foreach
2627 ===> phantm.ast.Trees.MethodCall.name: phantm.ast.Trees.MethodRef
3950 ===> phantm.cfg.Trees.BinaryOperator.<init>(): phantm.cfg.Trees.BinaryOperator
109 ===> phantm.Settings.set(stgs: phantm.Settings): Unit
188 ===> phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray
1835 ===> phantm.ast.Trees.Clone.obj: phantm.ast.Trees.Expression
4213 ===> phantm.cfg.Trees.SILENCE.<init>(): phantm.cfg.Trees.SILENCE.type
1328 ===> phantm.ast.Trees.LabelDecl.hashCode(): Int
5528 ===> phantm.types.TResource.readResolve(): Object
883 ===> phantm.ast.Trees.StaticFunctionRef.readResolve(): Object
357 ===> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
4148 ===> phantm.cfg.Trees.NOTEQUALS.readResolve(): Object
3707 ===> phantm.cfg.Trees.SubTypeOf.copy(lhs: phantm.cfg.Trees.SimpleValue,cl: phantm.cfg.Trees.ClassRef): phantm.cfg.Trees.SubTypeOf
534 ===> phantm.ast.Trees.ClassConstantDecl.v: phantm.ast.Trees.Identifier
2272 ===> phantm.ast.Trees.Smaller.<init>(): phantm.ast.Trees.Smaller.type
5599 ===> phantm.util.API.Reader.APIPos.apply(elem: scala.xml.Node): Reader.this.APIPos
3732 ===> phantm.cfg.Trees.Cast.canEqual(x$1: Any): Boolean
3648 ===> phantm.cfg.Trees.PHPFalse.<init>(): phantm.cfg.Trees.PHPFalse
992 ===> phantm.ast.Trees.InitVariable.productIterator: Iterator[Any]
835 ===> phantm.ast.Trees.VarFunctionRef.copy(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarFunctionRef
2801 ===> phantm.ast.Trees.MCLine.canEqual(x$1: Any): Boolean
3661 ===> phantm.cfg.Trees.PHPFalse.readResolve(): Object
2304 ===> phantm.ast.Trees.InstanceOf.productElement(x$1: Int): Any
2995 ===> phantm.cfg.LabeledDirectedGraphImp.groupStack: List[LabeledDirectedGraphImp.this.Group]
5553 ===> phantm.types.TBottom.productElement(x$1: Int): Any
5771 ===> phantm.util.Reporter.Error.message: String
1194 ===> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
1525 ===> phantm.ast.Trees.Global.copy$default$1: List[phantm.ast.Trees.Variable] @scala.annotation.unchecked.uncheckedVariance
3463 ===> phantm.cfg.Trees.ClassProperty.canEqual(x$1: Any): Boolean
1177 ===> phantm.ast.Trees.Import.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
4168 ===> phantm.cfg.Trees.BITSIWENOT.<init>(): phantm.cfg.Trees.BITSIWENOT.type
1557 ===> phantm.ast.Trees.Echo.<init>(exprs: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Echo
4915 ===> phantm.symbols.ClassSymbol.getStaticProperties: List[phantm.symbols.PropertySymbol]
4421 ===> phantm.phases.CFGGenerator.initCtx: phantm.phases.PhasesContext
799 ===> phantm.ast.Trees.DynamicClassRef.readResolve(): Object
4419 ===> phantm.phases.CFGGenerationPhase.description: String
5201 ===> phantm.types.ObjectIdTmp.canEqual(x$1: Any): Boolean
923 ===> phantm.ast.Trees.CastInt.productElement(x$1: Int): Any
2286 ===> phantm.ast.Trees.SmallerEqual.productIterator: Iterator[Any]
5139 ===> phantm.types.TAnyClass.hashCode(): Int
1967 ===> phantm.ast.Trees.PreInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreInc
2920 ===> phantm.cfg.ControlFlowGraph.toString(): String
5224 ===> phantm.types.ObjectIdDump.unapply(x$0: phantm.types.ObjectIdDump): Option[Int]
5881 ===> phantm.util.UObject.productArity: Int
3157 ===> phantm.cfg.Trees.Assume.readResolve(): Object
3901 ===> phantm.cfg.Trees.MethodCall.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
3288 ===> phantm.cfg.Trees.AssumeNotProperty.equals(x$1: Any): Boolean
2865 ===> phantm.ast.Trees.MCMethod.<init>(): phantm.ast.Trees.MCMethod.type
1685 ===> phantm.ast.Trees.ArrayEntry.array: phantm.ast.Trees.Expression
2194 ===> phantm.ast.Trees.BooleanNot.canEqual(x$1: Any): Boolean
1636 ===> phantm.ast.Trees.Void.productPrefix: String
3180 ===> phantm.cfg.Trees.IsNull.productElement(x$1: Int): Any
2893 ===> phantm.cfg.ASTToCFG.Emit.<init>(): Emit.type
2619 ===> phantm.ast.Trees.FunctionCall.toString(): String
3045 ===> phantm.cfg.Trees.Statement.uniqueID: Int
4405 ===> phantm.phases.ASTCollector.afterDump: Boolean
3456 ===> phantm.cfg.Trees.ClassProperty.<init>(symbol: phantm.symbols.PropertySymbol): phantm.cfg.Trees.ClassProperty
4030 ===> phantm.cfg.Trees.BOOLEANOR.hashCode(): Int
3214 ===> phantm.cfg.Trees.IsArray.productPrefix: String
3786 ===> phantm.cfg.Trees.ArrayCurKey.unapply(x$0: phantm.cfg.Trees.ArrayCurKey): Option[phantm.cfg.Trees.SimpleValue]
5377 ===> phantm.types.TArray.hashCode(): Int
3336 ===> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
3079 ===> phantm.cfg.Trees.Assign.unapply(x$0: phantm.cfg.Trees.Assign): Option[(phantm.cfg.Trees.Variable, phantm.cfg.Trees.SimpleValue)]
3149 ===> phantm.cfg.Trees.Assume.productIterator: Iterator[Any]
3083 ===> phantm.cfg.Trees.AssignUnary.expr: phantm.cfg.Trees.SimpleValue
1000 ===> phantm.ast.Trees.InitVariable.unapply(x$0: phantm.ast.Trees.InitVariable): Option[(phantm.ast.Trees.Variable, Option[phantm.ast.Trees.Expression])]
391 ===> phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
5992 ===> phantm.util.UFalse.canEqual(x$1: Any): Boolean
5737 ===> phantm.util.JavaListIteratorWrapper.apply[A](iter: java.util.Iterator[A]): phantm.util.JavaListIteratorWrapper[A]
179 ===> phantm.annotations.AnnotationsStore.clearFunctionAnnotations(fs: phantm.symbols.FunctionSymbol): (List[phantm.types.TFunction], List[phantm.types.Type])
3262 ===> phantm.cfg.Trees.AssumeProperty.copy$default$1: phantm.cfg.Trees.Property @scala.annotation.unchecked.uncheckedVariance
5758 ===> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
2540 ===> phantm.ast.Trees.Require.productArity: Int
5616 ===> phantm.util.ConstantsResolver.issueErrors: Boolean
3452 ===> phantm.cfg.Trees.TempID.apply(value: String): phantm.cfg.Trees.TempID
95 ===> phantm.InlineFull.readResolve(): Object
2185 ===> phantm.ast.Trees.ShiftRight.readResolve(): Object
5702 ===> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
574 ===> phantm.ast.Trees.CFNormal.productPrefix: String
6030 ===> phantm.util.Unserializer.consumeString(size: Int): String
1970 ===> phantm.ast.Trees.PreInc.productPrefix: String
1521 ===> phantm.ast.Trees.Return.readResolve(): Object
2294 ===> phantm.ast.Trees.SmallerEqual.unapply(x$0: phantm.ast.Trees.SmallerEqual): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
5213 ===> phantm.types.ObjectIdDump.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
1571 ===> phantm.ast.Trees.Echo.unapply(x$0: phantm.ast.Trees.Echo): Option[List[phantm.ast.Trees.Expression]]
3455 ===> phantm.cfg.Trees.ClassProperty.symbol: phantm.symbols.PropertySymbol
6005 ===> phantm.util.Unserializer.<init>(content: String,ctx: phantm.phases.PhasesContext): phantm.util.Unserializer
1202 ===> phantm.ast.Trees.ClassDecl.copy$default$2: phantm.ast.Trees.ClassFlag @scala.annotation.unchecked.uncheckedVariance
566 ===> phantm.ast.Trees.ConstantDecl.equals(x$1: Any): Boolean
3524 ===> phantm.cfg.Trees.ObjectProperty.copy(obj: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ObjectProperty
1230 ===> phantm.ast.Trees.InterfaceDecl.copy$default$3: List[phantm.ast.Trees.MethodDecl] @scala.annotation.unchecked.uncheckedVariance
4 ===> phantm.Main.displayUsage: Boolean
5238 ===> phantm.types.ObjectId.toString(): String
3677 ===> phantm.cfg.Trees.PHPThis.copy(): phantm.cfg.Trees.PHPThis
3165 ===> phantm.cfg.Trees.Isset.hashCode(): Int
5740 ===> phantm.util.Position.<init>(): phantm.util.Position
5326 ===> phantm.types.StringKey.productArity: Int
3521 ===> phantm.cfg.Trees.ObjectProperty.obj: phantm.cfg.Trees.SimpleValue
1130 ===> phantm.ast.Trees.FunctionDecl.equals(x$1: Any): Boolean
1785 ===> phantm.ast.Trees.ListVar.productIterator: Iterator[Any]
1026 ===> phantm.ast.Trees.CallArg.productArity: Int
498 ===> phantm.ast.Trees.MethodDecl.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
1002 ===> phantm.ast.Trees.Label.name: phantm.ast.Trees.Identifier
1520 ===> phantm.ast.Trees.Return.unapply(x$0: phantm.ast.Trees.Return): Option[phantm.ast.Trees.Expression]
1206 ===> phantm.ast.Trees.ClassDecl.copy$default$6: List[phantm.ast.Trees.PropertyDecl] @scala.annotation.unchecked.uncheckedVariance
78 ===> phantm.InlineLeaves.<init>(): phantm.InlineLeaves.type
1605 ===> phantm.ast.Trees.Unset.unapply(x$0: phantm.ast.Trees.Unset): Option[List[phantm.ast.Trees.Variable]]
3255 ===> phantm.cfg.Trees.IsResource.hashCode(): Int
3898 ===> phantm.cfg.Trees.MethodCall.params: List[phantm.cfg.Trees.SimpleValue]
3709 ===> phantm.cfg.Trees.SubTypeOf.copy$default$2: phantm.cfg.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
423 ===> phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
5547 ===> phantm.types.TTop.toString(): String
4780 ===> phantm.symbols.Symbolic.hasSymbol: Boolean
1115 ===> phantm.ast.Trees.FunctionDecl.retref: Boolean
5970 ===> phantm.util.URealRef.hashCode(): Int
5529 ===> phantm.types.TNull.<init>(): phantm.types.TNull.type
176 ===> phantm.annotations.AnnotationsStore.<init>(): phantm.annotations.AnnotationsStore.type
2918 ===> phantm.cfg.ControlFlowGraph.entry: ControlFlowGraph.this.Vertex
3927 ===> phantm.cfg.Trees.New.hashCode(): Int
252 ===> phantm.annotations.SourceAnnotations.Parser.Entry.productIterator: Iterator[Any]
612 ===> phantm.ast.Trees.THObject.copy(cl: phantm.ast.Trees.ClassRef): phantm.ast.Trees.THObject
2537 ===> phantm.ast.Trees.Require.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1617 ===> phantm.ast.Trees.Foreach.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
2097 ===> phantm.ast.Trees.BitwiseAnd.productPrefix: String
5126 ===> phantm.types.Type.toText(e: phantm.types.TypeEnvironment): String
598 ===> phantm.ast.Trees.CFFinal.toString(): String
4217 ===> phantm.cfg.Trees.SILENCE.productElement(x$1: Int): Any
5188 ===> phantm.types.ObjectIdUse.productIterator: Iterator[Any]
5222 ===> phantm.types.ObjectIdDump.toString(): String
3263 ===> phantm.cfg.Trees.AssumeProperty.copy$default$2: List[phantm.cfg.Trees.Variable] @scala.annotation.unchecked.uncheckedVariance
2065 ===> phantm.ast.Trees.BooleanOr.toString(): String
4275 ===> phantm.helpers.CheckContext.productArity: Int
5404 ===> phantm.types.TInt.readResolve(): Object
117 ===> phantm.Settings.apply$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
5396 ===> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
162 ===> phantm.annotations.FunctionTypeAnnotation.ftyps: scala.collection.immutable.Set[phantm.types.FunctionType]
3425 ===> phantm.cfg.Trees.ClassRefUnknown.toString(): String
5035 ===> phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction
4891 ===> phantm.symbols.IfaceSymbol.registerConstant(cs: phantm.symbols.IfaceConstantSymbol): Unit
4373 ===> phantm.phases.CheckContext.<init>(): phantm.phases.CheckContext.type
758 ===> phantm.ast.Trees.NSIdentifier.<init>(): phantm.ast.Trees.NSIdentifier.type
2140 ===> phantm.ast.Trees.BitwiseXor.hashCode(): Int
2383 ===> phantm.ast.Trees.Exit.equals(x$1: Any): Boolean
1691 ===> phantm.ast.Trees.ArrayEntry.productPrefix: String
5078 ===> phantm.types.TypeTransferFunction.checkAgainstFType(ftyp: phantm.types.FunctionType): phantm.types.Type
934 ===> phantm.ast.Trees.CastString.canEqual(x$1: Any): Boolean
5394 ===> phantm.types.TNumeric.readResolve(): Object
2585 ===> phantm.ast.Trees.ClassConstant.apply(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant
2625 ===> phantm.ast.Trees.FunctionCall.readResolve(): Object
1590 ===> phantm.ast.Trees.Unset.vars: List[phantm.ast.Trees.Variable]
5607 ===> phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction
4262 ===> phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
2955 ===> phantm.cfg.EdgeImp.<init>(v1: phantm.cfg.VertexImp[L],lab: L,v2: phantm.cfg.VertexImp[L]): phantm.cfg.EdgeImp[L]
3874 ===> phantm.cfg.Trees.FunctionCall.unapply(x$0: phantm.cfg.Trees.FunctionCall): Option[(phantm.cfg.Trees.FuncRef, List[phantm.cfg.Trees.SimpleValue])]
1248 ===> phantm.ast.Trees.Try.copy(body: phantm.ast.Trees.Statement,catches: List[phantm.ast.Trees.Catch]): phantm.ast.Trees.Try
5295 ===> phantm.types.TRealObject.copy$default$2: phantm.types.Type @scala.annotation.unchecked.uncheckedVariance
4512 ===> phantm.phases.MethodGraphPhase.name: String
1423 ===> phantm.ast.Trees.DoWhile.equals(x$1: Any): Boolean
1186 ===> phantm.ast.Trees.Import.<init>(): phantm.ast.Trees.Import.type
1836 ===> phantm.ast.Trees.Clone.<init>(obj: phantm.ast.Trees.Expression): phantm.ast.Trees.Clone
272 ===> phantm.annotations.SourceAnnotations.Parser.strToVarType(str: String): Option[(String, phantm.types.Type)]
4103 ===> phantm.cfg.Trees.LEQ.readResolve(): Object
741 ===> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
4618 ===> phantm.phases.PhasesContext.canEqual(x$1: Any): Boolean
3500 ===> phantm.cfg.Trees.ArrayEntry.<init>(): phantm.cfg.Trees.ArrayEntry.type
3949 ===> phantm.cfg.Trees.Clone.readResolve(): Object
243 ===> phantm.annotations.SourceAnnotations.Parser.Entry.s: String
2926 ===> phantm.cfg.LabeledDirectedGraph.inEdges(v: LabeledDirectedGraph.this.Vertex): Set[LabeledDirectedGraph.this.Edge]
634 ===> phantm.ast.Trees.MFAbstract.hashCode(): Int
4160 ===> phantm.cfg.Trees.BOOLEANNOT.toString(): String
1992 ===> phantm.ast.Trees.PostInc.hashCode(): Int
136 ===> phantm.Settings.$lessinit$greater$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
5090 ===> phantm.types.TypeTransferFunction.copy$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
5171 ===> phantm.types.TFunction.productArity: Int
124 ===> phantm.Settings.apply$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
5779 ===> phantm.util.Reporter.Error.copy(message: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Reporter.this.Error
4256 ===> phantm.dataflow.StronglyConnectedComponents.pop: StronglyConnectedComponents.this.Node
626 ===> phantm.ast.Trees.THObject.readResolve(): Object
646 ===> phantm.ast.Trees.MFProtected.<init>(): phantm.ast.Trees.MFProtected.type
2416 ===> phantm.ast.Trees.Execute.toString(): String
3101 ===> phantm.cfg.Trees.AssignBinary.variable: phantm.cfg.Trees.Variable
1462 ===> phantm.ast.Trees.Switch.canEqual(x$1: Any): Boolean
2597 ===> phantm.ast.Trees.New.productIterator: Iterator[Any]
1418 ===> phantm.ast.Trees.DoWhile.productElement(x$1: Int): Any
1311 ===> phantm.ast.Trees.Goto.hashCode(): Int
4604 ===> phantm.phases.PhasesContext.<init>(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
807 ===> phantm.ast.Trees.StaticClassRef.productIterator: Iterator[Any]
4956 ===> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
1396 ===> phantm.ast.Trees.While.copy$default$2: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
4687 ===> phantm.phases.SymContext.copy$default$1: phantm.symbols.Scope @scala.annotation.unchecked.uncheckedVariance
4021 ===> phantm.cfg.Trees.BOOLEANAND.hashCode(): Int
1086 ===> phantm.ast.Trees.OAArray.toString(): String
4640 ===> phantm.phases.PhasesContext.apply$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
5315 ===> phantm.types.ArrayKey.fromString(str: String): phantm.types.ArrayKey
4457 ===> phantm.phases.CGContext.canEqual(x$1: Any): Boolean
1507 ===> phantm.ast.Trees.Return.copy(expr: phantm.ast.Trees.Expression): phantm.ast.Trees.Return
3473 ===> phantm.cfg.Trees.VariableVar.copy(v: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableVar
4927 ===> phantm.types.BaseTypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
2642 ===> phantm.ast.Trees.MethodCall.<init>(): phantm.ast.Trees.MethodCall.type
2806 ===> phantm.ast.Trees.MCLine.toString(): String
3498 ===> phantm.cfg.Trees.ArrayEntry.hashCode(): Int
379 ===> phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
832 ===> phantm.ast.Trees.FunctionRef.<init>(): phantm.ast.Trees.FunctionRef
333 ===> phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl]
5796 ===> phantm.util.Reporter.beginTicks: Unit
4766 ===> phantm.phases.TypeFlowAnalysis.productIterator: Iterator[Any]
1387 ===> phantm.ast.Trees.If.toString(): String
1873 ===> phantm.ast.Trees.Minus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
3718 ===> phantm.cfg.Trees.SubTypeOf.toString(): String
1996 ===> phantm.ast.Trees.PostInc.toString(): String
1214 ===> phantm.ast.Trees.ClassDecl.hashCode(): Int
3538 ===> phantm.cfg.Trees.ObjectProperty.readResolve(): Object
5349 ===> phantm.types.IntKey.equals(x$1: Any): Boolean
1646 ===> phantm.ast.Trees.Void.apply(): phantm.ast.Trees.Void
5517 ===> phantm.types.TAny.toString(): String
886 ===> phantm.ast.Trees.DynamicMethodRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef
2942 ===> phantm.cfg.VertexImp.productElement(x$1: Int): Any
4905 ===> phantm.symbols.ClassSymbol.lookupConstant(name: String): Option[phantm.symbols.ClassConstantSymbol]
4548 ===> phantm.phases.ParsingPhase.name: String
477 ===> phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any
3465 ===> phantm.cfg.Trees.ClassProperty.equals(x$1: Any): Boolean
5247 ===> phantm.types.ObjectStore.<init>(): phantm.types.ObjectStore
2064 ===> phantm.ast.Trees.BooleanOr.hashCode(): Int
3639 ===> phantm.cfg.Trees.PHPAny.productIterator: Iterator[Any]
1899 ===> phantm.ast.Trees.Div.productIterator: Iterator[Any]
2431 ===> phantm.ast.Trees.Print.canEqual(x$1: Any): Boolean
4170 ===> phantm.cfg.Trees.BITSIWENOT.productPrefix: String
493 ===> phantm.ast.Trees.MethodDecl.<init>(name: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.MethodDecl
4958 ===> phantm.types.TypeFlowAnalyzer.collectGlobals: Boolean
1224 ===> phantm.ast.Trees.InterfaceDecl.methods: List[phantm.ast.Trees.MethodDecl]
75 ===> phantm.InlineNone.hashCode(): Int
2438 ===> phantm.ast.Trees.Print.unapply(x$0: phantm.ast.Trees.Print): Option[phantm.ast.Trees.Expression]
2754 ===> phantm.ast.Trees.PHPString.productElement(x$1: Int): Any
4952 ===> phantm.types.TypeEnvironment.toString(): String
3760 ===> phantm.cfg.Trees.ArrayCurElement.productPrefix: String
995 ===> phantm.ast.Trees.InitVariable.toString(): String
643 ===> phantm.ast.Trees.MFPublic.hashCode(): Int
5791 ===> phantm.util.Reporter.Error.apply(message: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Reporter.this.Error
4238 ===> phantm.dataflow.StronglyConnectedComponents.Node.index: Int
2006 ===> phantm.ast.Trees.PreDec.productElement(x$1: Int): Any
5498 ===> phantm.types.TStringLit.productElement(x$1: Int): Any
1307 ===> phantm.ast.Trees.Goto.productArity: Int
2950 ===> phantm.cfg.VertexImp.unapply[L](x$0: phantm.cfg.VertexImp[L]): Option[String]
2469 ===> phantm.ast.Trees.Closure.productElement(x$1: Int): Any
5652 ===> phantm.util.DumpCollector.heap: phantm.util.Unserializer
4446 ===> phantm.phases.CallGraphPhase.description: String
3533 ===> phantm.cfg.Trees.ObjectProperty.equals(x$1: Any): Boolean
2610 ===> phantm.ast.Trees.FunctionCall.copy(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
1827 ===> phantm.ast.Trees.Assign.hashCode(): Int
5548 ===> phantm.types.TTop.readResolve(): Object
504 ===> phantm.ast.Trees.MethodDecl.canEqual(x$1: Any): Boolean
1143 ===> phantm.ast.Trees.NamespaceStart.productIterator: Iterator[Any]
5958 ===> phantm.util.UObjRef.apply(i: Int): phantm.util.UObjRef
5237 ===> phantm.types.ObjectId.hashCode(): Int
4059 ===> phantm.cfg.Trees.BITWISEXOR.<init>(): phantm.cfg.Trees.BITWISEXOR.type
3667 ===> phantm.cfg.Trees.PHPNull.productIterator: Iterator[Any]
829 ===> phantm.ast.Trees.CalledClass.apply(): phantm.ast.Trees.CalledClass
1381 ===> phantm.ast.Trees.If.productIterator: Iterator[Any]
593 ===> phantm.ast.Trees.CFFinal.productArity: Int
4426 ===> phantm.phases.CFGGenerator.display(content: String): Unit
1574 ===> phantm.ast.Trees.Html.<init>(content: String): phantm.ast.Trees.Html
4126 ===> phantm.cfg.Trees.EQUALS.productElement(x$1: Int): Any
5692 ===> phantm.util.IncludeResolver.begin: Unit
5622 ===> phantm.util.ConstantsResolver.copy$default$1: phantm.ast.Trees.Program @scala.annotation.unchecked.uncheckedVariance
5537 ===> phantm.types.TNull.toString(): String
1668 ===> phantm.ast.Trees.VariableVariable.name: phantm.ast.Trees.Expression
4623 ===> phantm.phases.PhasesContext.toString(): String
5522 ===> phantm.types.TResource.productArity: Int
3624 ===> phantm.cfg.Trees.PHPTrue.productElement(x$1: Int): Any
213 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productPrefix: String
3009 ===> phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit
3920 ===> phantm.cfg.Trees.New.copy$default$1: phantm.cfg.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
285 ===> phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
3170 ===> phantm.cfg.Trees.Empty.productArity: Int
1060 ===> phantm.ast.Trees.OAExpression.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
364 ===> phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String]
2820 ===> phantm.ast.Trees.MCDir.<init>(): phantm.ast.Trees.MCDir.type
657 ===> phantm.ast.Trees.MFPrivate.productArity: Int
206 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.apply(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyEntry
1670 ===> phantm.ast.Trees.VariableVariable.copy(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
460 ===> phantm.ast.Trees.Program.<init>(): phantm.ast.Trees.Program.type
1250 ===> phantm.ast.Trees.Try.copy$default$2: List[phantm.ast.Trees.Catch] @scala.annotation.unchecked.uncheckedVariance
5577 ===> phantm.types.TUnion.depth(env: phantm.types.TypeEnvironment): Int
4973 ===> phantm.types.TypeFlowAnalyzer.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
3749 ===> phantm.cfg.Trees.ArrayNext.hashCode(): Int
1580 ===> phantm.ast.Trees.Html.productIterator: Iterator[Any]
1280 ===> phantm.ast.Trees.Catch.<init>(): phantm.ast.Trees.Catch.type
3851 ===> phantm.cfg.Trees.Ternary.hashCode(): Int
2461 ===> phantm.ast.Trees.Closure.<init>(args: List[phantm.ast.Trees.ArgumentDecl],imports: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Closure
1466 ===> phantm.ast.Trees.Switch.<init>(): phantm.ast.Trees.Switch.type
3357 ===> phantm.cfg.Trees.FuncRef.id: phantm.ast.Trees.NSIdentifier
1290 ===> phantm.ast.Trees.Throw.productArity: Int
1265 ===> phantm.ast.Trees.Catch.v: phantm.ast.Trees.SimpleVariable
104 ===> phantm.InlineManual.readResolve(): Object
4514 ===> phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
2977 ===> phantm.cfg.EdgeCounter.getNew: String
4278 ===> phantm.helpers.CheckContext.canEqual(x$1: Any): Boolean
1126 ===> phantm.ast.Trees.FunctionDecl.productIterator: Iterator[Any]
4264 ===> phantm.helpers.ASTGraph.emit(str: String): Unit
4169 ===> phantm.cfg.Trees.BITSIWENOT.toString(): String
5473 ===> phantm.types.TFalse.productPrefix: String
3403 ===> phantm.cfg.Trees.ClassRefFixed.equals(x$1: Any): Boolean
4265 ===> phantm.helpers.ASTGraph.getId: Int
4269 ===> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
3940 ===> phantm.cfg.Trees.Clone.productElement(x$1: Int): Any
4468 ===> phantm.phases.CallGraphGeneration.pctx: phantm.phases.PhasesContext
4727 ===> phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility
2680 ===> phantm.ast.Trees.VoidExpr.apply(): phantm.ast.Trees.VoidExpr
3566 ===> phantm.cfg.Trees.NoVar.<init>(): phantm.cfg.Trees.NoVar.type
2572 ===> phantm.ast.Trees.ClassConstant.copy(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant
696 ===> phantm.ast.Trees.NSGlobal.productPrefix: String
5207 ===> phantm.types.ObjectIdTmp.unapply(x$0: phantm.types.ObjectIdTmp): Option[Int]
1134 ===> phantm.ast.Trees.FunctionDecl.unapply(x$0: phantm.ast.Trees.FunctionDecl): Option[(phantm.ast.Trees.NSIdentifier, List[phantm.ast.Trees.ArgumentDecl], Boolean, phantm.ast.Trees.Statement)]
5293 ===> phantm.types.TRealObject.copy(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject
5240 ===> phantm.types.ObjectId.<init>(): phantm.types.ObjectId.type
3416 ===> phantm.cfg.Trees.ClassRefCalledClass.canEqual(x$1: Any): Boolean
637 ===> phantm.ast.Trees.MFPublic.<init>(): phantm.ast.Trees.MFPublic.type
3788 ===> phantm.cfg.Trees.ArrayCurIsValid.ar: phantm.cfg.Trees.SimpleValue
1067 ===> phantm.ast.Trees.OAExpression.toString(): String
4607 ===> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
2907 ===> phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue]
3012 ===> phantm.cfg.LabeledDirectedGraphImp.Group.copy(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group
4523 ===> phantm.phases.MethodGraphGeneration.MethodGraph.addEdge(from: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex,to: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): Unit
1568 ===> phantm.ast.Trees.Echo.<init>(): phantm.ast.Trees.Echo.type
5476 ===> phantm.types.TFalse.productIterator: Iterator[Any]
1949 ===> phantm.ast.Trees.Mod.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mod
3989 ===> phantm.cfg.Trees.CONCAT.productPrefix: String
1576 ===> phantm.ast.Trees.Html.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
1188 ===> phantm.ast.Trees.Import.apply(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
5292 ===> phantm.types.TRealObject.<init>(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject
2501 ===> phantm.ast.Trees.Empty.productPrefix: String
4034 ===> phantm.cfg.Trees.BOOLEANXOR.productPrefix: String
1927 ===> phantm.ast.Trees.Mult.readResolve(): Object
1360 ===> phantm.ast.Trees.Block.productIterator: Iterator[Any]
331 ===> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
4712 ===> phantm.phases.CollectSymbols.interfacesToPass: List[phantm.ast.Trees.InterfaceDecl]
6025 ===> phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue]
49 ===> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
5854 ===> phantm.util.UArray.entries_$eq(x$1: Map[phantm.util.UValue,phantm.util.UValue]): Unit
4631 ===> phantm.phases.PhasesContext.$lessinit$greater$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
4198 ===> phantm.cfg.Trees.PREDEC.productArity: Int
2341 ===> phantm.ast.Trees.Cast.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2763 ===> phantm.ast.Trees.PHPString.unapply(x$0: phantm.ast.Trees.PHPString): Option[String]
3829 ===> phantm.cfg.Trees.ClassConstant.productIterator: Iterator[Any]
1761 ===> phantm.ast.Trees.ClassProperty.<init>(cl: phantm.ast.Trees.ClassRef,property: phantm.ast.Trees.Variable): phantm.ast.Trees.ClassProperty
5433 ===> phantm.types.TFloatLit.value: Float
767 ===> phantm.ast.Trees.VarClassRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef
2826 ===> phantm.ast.Trees.MCClass.copy(): phantm.ast.Trees.MCClass
2203 ===> phantm.ast.Trees.BitwiseNot.rhs: phantm.ast.Trees.Expression
3559 ===> phantm.cfg.Trees.NoVar.productPrefix: String
2745 ===> phantm.ast.Trees.PHPFloat.apply(value: Float): phantm.ast.Trees.PHPFloat
3253 ===> phantm.cfg.Trees.IsResource.productIterator: Iterator[Any]
5474 ===> phantm.types.TFalse.productArity: Int
4616 ===> phantm.phases.PhasesContext.productElement(x$1: Int): Any
834 ===> phantm.ast.Trees.VarFunctionRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarFunctionRef
812 ===> phantm.ast.Trees.StaticClassRef.<init>(): phantm.ast.Trees.StaticClassRef.type
4146 ===> phantm.cfg.Trees.NOTEQUALS.canEqual(x$1: Any): Boolean
47 ===> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
1862 ===> phantm.ast.Trees.Plus.canEqual(x$1: Any): Boolean
638 ===> phantm.ast.Trees.MFPublic.productPrefix: String
4357 ===> phantm.phases.ASTChecksPhase.description: String
1033 ===> phantm.ast.Trees.CallArg.<init>(): phantm.ast.Trees.CallArg.type
4522 ===> phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex
3496 ===> phantm.cfg.Trees.ArrayEntry.productIterator: Iterator[Any]
4461 ===> phantm.phases.CGContext.<init>(): phantm.phases.CGContext.type
2187 ===> phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
5944 ===> phantm.util.UObjRef.i: Int
1866 ===> phantm.ast.Trees.Plus.<init>(): phantm.ast.Trees.Plus.type
2225 ===> phantm.ast.Trees.Equal.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2685 ===> phantm.ast.Trees.PHPTrue.copy(): phantm.ast.Trees.PHPTrue
4199 ===> phantm.cfg.Trees.PREDEC.productElement(x$1: Int): Any
2202 ===> phantm.ast.Trees.BooleanNot.readResolve(): Object
5891 ===> phantm.util.UObject.unapply(x$0: phantm.util.UObject): Option[(Int, String, Map[phantm.util.UValue,phantm.util.UValue])]
3135 ===> phantm.cfg.Trees.Error.apply(): phantm.cfg.Trees.Error
3885 ===> phantm.cfg.Trees.StaticMethodCall.productArity: Int
5696 ===> phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit
407 ===> phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
725 ===> phantm.ast.Trees.Identifier.<init>(value: String): phantm.ast.Trees.Identifier
3646 ===> phantm.cfg.Trees.PHPAny.unapply(x$0: phantm.cfg.Trees.PHPAny): Boolean
342 ===> phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
5957 ===> phantm.util.UObjRef.toString(): String
833 ===> phantm.ast.Trees.VarFunctionRef.v: phantm.ast.Trees.Variable
5275 ===> phantm.types.TPreciseObject.depth(e: phantm.types.TypeEnvironment): Int
4257 ===> phantm.dataflow.StronglyConnectedComponents.tarjan(v: StronglyConnectedComponents.this.Vertex): Unit
4750 ===> phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit
4018 ===> phantm.cfg.Trees.BOOLEANAND.productElement(x$1: Int): Any
5250 ===> phantm.types.ObjectStore.unset(id: phantm.types.ObjectId): phantm.types.ObjectStore
4775 ===> phantm.phases.TypeFlowAnalysis.readResolve(): Object
4628 ===> phantm.phases.PhasesContext.$lessinit$greater$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
2166 ===> phantm.ast.Trees.ShiftLeft.readResolve(): Object
481 ===> phantm.ast.Trees.ArgumentDecl.toString(): String
2944 ===> phantm.cfg.VertexImp.canEqual(x$1: Any): Boolean
5260 ===> phantm.types.ObjectStore.productIterator: Iterator[Any]
3169 ===> phantm.cfg.Trees.Empty.productPrefix: String
2139 ===> phantm.ast.Trees.BitwiseXor.canEqual(x$1: Any): Boolean
2443 ===> phantm.ast.Trees.Eval.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5255 ===> phantm.types.ObjectStore.copy(store: Map[phantm.types.ObjectId,phantm.types.TRealObject]): phantm.types.ObjectStore
58 ===> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
3454 ===> phantm.cfg.Trees.TempID.readResolve(): Object
107 ===> phantm.Settings.stgs_$eq(x$1: Option[phantm.Settings]): Unit
4413 ===> phantm.phases.ASTPruner.afterDump: Boolean
236 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.toString(): String
4007 ===> phantm.cfg.Trees.INSTANCEOF.productPrefix: String
3185 ===> phantm.cfg.Trees.IsNull.readResolve(): Object
1806 ===> phantm.ast.Trees.ExpandArray.hashCode(): Int
1136 ===> phantm.ast.Trees.NamespaceStart.name: phantm.ast.Trees.NSIdentifier
4028 ===> phantm.cfg.Trees.BOOLEANOR.productIterator: Iterator[Any]
1051 ===> phantm.ast.Trees.OAIdentifier.equals(x$1: Any): Boolean
1966 ===> phantm.ast.Trees.PreInc.rhs: phantm.ast.Trees.Variable
435 ===> phantm.ast.STToAST.productIterator: Iterator[Any]
5817 ===> phantm.util.Reporter.emitSummary: Unit
1566 ===> phantm.ast.Trees.Echo.toString(): String
3715 ===> phantm.cfg.Trees.SubTypeOf.hashCode(): Int
4384 ===> phantm.phases.ASTIntegrityChecks.copy(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
1204 ===> phantm.ast.Trees.ClassDecl.copy$default$4: List[phantm.ast.Trees.StaticClassRef] @scala.annotation.unchecked.uncheckedVariance
5663 ===> phantm.util.DumpCollector.equals(x$1: Any): Boolean
3491 ===> phantm.cfg.Trees.ArrayEntry.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
3660 ===> phantm.cfg.Trees.PHPFalse.unapply(x$0: phantm.cfg.Trees.PHPFalse): Boolean
2127 ===> phantm.ast.Trees.BitwiseOr.unapply(x$0: phantm.ast.Trees.BitwiseOr): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
2348 ===> phantm.ast.Trees.Cast.toString(): String
4777 ===> phantm.symbols.Symbolic.opt_sym: Option[phantm.symbols.Symbol]
5897 ===> phantm.util.UString.productPrefix: String
463 ===> phantm.ast.Trees.Program.unapply(x$0: phantm.ast.Trees.Program): Option[List[phantm.ast.Trees.Statement]]
2962 ===> phantm.cfg.EdgeImp.productPrefix: String
1048 ===> phantm.ast.Trees.OAIdentifier.canEqual(x$1: Any): Boolean
1545 ===> phantm.ast.Trees.Static.productElement(x$1: Int): Any
4033 ===> phantm.cfg.Trees.BOOLEANXOR.toString(): String
3889 ===> phantm.cfg.Trees.StaticMethodCall.hashCode(): Int
4536 ===> phantm.phases.NSResolver.importRules_$eq(x$1: scala.collection.immutable.Map[String,List[String]]): Unit
5486 ===> phantm.types.TString.productIterator: Iterator[Any]
5167 ===> phantm.types.TFunction.copy(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
455 ===> phantm.ast.Trees.Program.productIterator: Iterator[Any]
1335 ===> phantm.ast.Trees.LabelDecl.readResolve(): Object
1273 ===> phantm.ast.Trees.Catch.productArity: Int
5304 ===> phantm.types.TRealObject.injectField(index: phantm.cfg.Trees.SimpleValue,typ: phantm.types.Type): phantm.types.TRealObject
5025 ===> phantm.types.TypeLattice.hashCode(): Int
3438 ===> phantm.cfg.Trees.ClassRefUnknown.readResolve(): Object
3104 ===> phantm.cfg.Trees.AssignBinary.rhs: phantm.cfg.Trees.SimpleValue
3230 ===> phantm.cfg.Trees.IsString.readResolve(): Object
4657 ===> phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean
1541 ===> phantm.ast.Trees.Static.copy(vars: List[phantm.ast.Trees.InitVariable]): phantm.ast.Trees.Static
762 ===> phantm.ast.Trees.NSIdentifier.readResolve(): Object
2122 ===> phantm.ast.Trees.BitwiseOr.toString(): String
4432 ===> phantm.phases.CFGGenerator.productArity: Int
1812 ===> phantm.ast.Trees.ExpandArray.unapply(x$0: phantm.ast.Trees.ExpandArray): Option[(List[Option[phantm.ast.Trees.Variable]], phantm.ast.Trees.Expression)]
3442 ===> phantm.cfg.Trees.TempID.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
69 ===> phantm.InlineNone.<init>(): phantm.InlineNone.type
2124 ===> phantm.ast.Trees.BitwiseOr.<init>(): phantm.ast.Trees.BitwiseOr.type
4843 ===> phantm.symbols.MVPrivate.toString(): String
3485 ===> phantm.cfg.Trees.VariableVar.unapply(x$0: phantm.cfg.Trees.VariableVar): Option[phantm.cfg.Trees.SimpleValue]
4171 ===> phantm.cfg.Trees.BITSIWENOT.productArity: Int
3635 ===> phantm.cfg.Trees.PHPAny.copy(): phantm.cfg.Trees.PHPAny
3402 ===> phantm.cfg.Trees.ClassRefFixed.hashCode(): Int
2611 ===> phantm.ast.Trees.FunctionCall.copy$default$1: phantm.ast.Trees.FunctionRef @scala.annotation.unchecked.uncheckedVariance
466 ===> phantm.ast.Trees.ArgumentDecl.hint: Option[phantm.ast.Trees.TypeHint]
585 ===> phantm.ast.Trees.CFAbstract.productElement(x$1: Int): Any
2056 ===> phantm.ast.Trees.BooleanOr.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanOr
96 ===> phantm.InlineManual.<init>(): phantm.InlineManual.type
1540 ===> phantm.ast.Trees.Static.<init>(vars: List[phantm.ast.Trees.InitVariable]): phantm.ast.Trees.Static
2939 ===> phantm.cfg.VertexImp.copy$default$1[L]: String @scala.annotation.unchecked.uncheckedVariance
1678 ===> phantm.ast.Trees.VariableVariable.toString(): String
5176 ===> phantm.types.TFunction.equals(x$1: Any): Boolean
3268 ===> phantm.cfg.Trees.AssumeProperty.canEqual(x$1: Any): Boolean
2335 ===> phantm.ast.Trees.Ternary.readResolve(): Object
5169 ===> phantm.types.TFunction.copy$default$2: phantm.types.Type @scala.annotation.unchecked.uncheckedVariance
5500 ===> phantm.types.TStringLit.canEqual(x$1: Any): Boolean
3490 ===> phantm.cfg.Trees.ArrayEntry.copy(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
798 ===> phantm.ast.Trees.DynamicClassRef.unapply(x$0: phantm.ast.Trees.DynamicClassRef): Option[phantm.ast.Trees.Expression]
3653 ===> phantm.cfg.Trees.PHPFalse.productIterator: Iterator[Any]
4710 ===> phantm.phases.CollectSymbols.classesToPass: List[phantm.ast.Trees.ClassDecl]
1883 ===> phantm.ast.Trees.Minus.toString(): String
2463 ===> phantm.ast.Trees.Closure.copy$default$1: List[phantm.ast.Trees.ArgumentDecl] @scala.annotation.unchecked.uncheckedVariance
126 ===> phantm.Settings.apply$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
4590 ===> phantm.phases.PhaseSeq.apply(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq
1052 ===> phantm.ast.Trees.OAIdentifier.<init>(): phantm.ast.Trees.OAIdentifier.type
5738 ===> phantm.util.JavaListIteratorWrapper.unapply[A](x$0: phantm.util.JavaListIteratorWrapper[A]): Option[java.util.Iterator[A]]
5467 ===> phantm.types.TTrue.canEqual(x$1: Any): Boolean
698 ===> phantm.ast.Trees.NSGlobal.productElement(x$1: Int): Any
5279 ===> phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
5013 ===> phantm.types.TypeLattice.joinTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
145 ===> phantm.Settings.$lessinit$greater$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
2629 ===> phantm.ast.Trees.MethodCall.<init>(obj: phantm.ast.Trees.Expression,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.MethodCall
5843 ===> phantm.util.ErrorException.canEqual(x$1: Any): Boolean
2198 ===> phantm.ast.Trees.BooleanNot.<init>(): phantm.ast.Trees.BooleanNot.type
1234 ===> phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any
4818 ===> phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit
4911 ===> phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean
5701 ===> phantm.util.IncludeResolver.ast: phantm.ast.Trees.Program
2839 ===> phantm.ast.Trees.MCClass.readResolve(): Object
5378 ===> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
4940 ===> phantm.types.TypeEnvironment.$anonfun.isDefinedAt(x$1: (phantm.cfg.Trees.SimpleVariable, phantm.types.Type)): Boolean
2109 ===> phantm.ast.Trees.BitwiseAnd.readResolve(): Object
2556 ===> phantm.ast.Trees.Constant.productPrefix: String
5875 ===> phantm.util.UObject.<init>(i: Int,classname: String,entries: Map[phantm.util.UValue,phantm.util.UValue]): phantm.util.UObject
5550 ===> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
1515 ===> phantm.ast.Trees.Return.toString(): String
4641 ===> phantm.phases.PhasesContext.apply$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
2616 ===> phantm.ast.Trees.FunctionCall.productIterator: Iterator[Any]
4427 ===> phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean
3554 ===> phantm.cfg.Trees.VariableClassProperty.apply(cl: phantm.cfg.Trees.ClassRef,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableClassProperty
5026 ===> phantm.types.TypeLattice.toString(): String
1386 ===> phantm.ast.Trees.If.<init>(): phantm.ast.Trees.If.type
5554 ===> phantm.types.TBottom.productIterator: Iterator[Any]
3565 ===> phantm.cfg.Trees.NoVar.equals(x$1: Any): Boolean
791 ===> phantm.ast.Trees.DynamicClassRef.canEqual(x$1: Any): Boolean
2314 ===> phantm.ast.Trees.InstanceOf.readResolve(): Object
3640 ===> phantm.cfg.Trees.PHPAny.canEqual(x$1: Any): Boolean
3417 ===> phantm.cfg.Trees.ClassRefCalledClass.hashCode(): Int
3795 ===> phantm.cfg.Trees.ArrayCurIsValid.productIterator: Iterator[Any]
2954 ===> phantm.cfg.EdgeImp.v2: phantm.cfg.VertexImp[L]
5422 ===> phantm.types.TIntLit.readResolve(): Object
3995 ===> phantm.cfg.Trees.CONCAT.readResolve(): Object
2126 ===> phantm.ast.Trees.BitwiseOr.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseOr
2736 ===> phantm.ast.Trees.PHPFloat.productArity: Int
34 ===> phantm.Settings.compactErrors: Boolean
5670 ===> phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String
5028 ===> phantm.types.TypeTransferFunction.silent: Boolean
4663 ===> phantm.phases.PureStatementsChecks.productElement(x$1: Int): Any
3955 ===> phantm.cfg.Trees.PLUS.productElement(x$1: Int): Any
4366 ===> phantm.phases.CheckContext.productArity: Int
5226 ===> phantm.types.ObjectId.pos: Int
4321 ===> phantm.helpers.Main.helper_$eq(x$1: phantm.helpers.Helper): Unit
1822 ===> phantm.ast.Trees.Assign.productPrefix: String
201 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.hashCode(): Int
5170 ===> phantm.types.TFunction.productPrefix: String
1154 ===> phantm.ast.Trees.Namespaced.body: List[phantm.ast.Trees.Statement]
2495 ===> phantm.ast.Trees.Isset.unapply(x$0: phantm.ast.Trees.Isset): Option[List[phantm.ast.Trees.Variable]]
227 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyIntEntry
5499 ===> phantm.types.TStringLit.productIterator: Iterator[Any]
4429 ===> phantm.phases.CFGGenerator.copy$default$1: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
5478 ===> phantm.types.TFalse.hashCode(): Int
1749 ===> phantm.ast.Trees.DynamicObjectProperty.productIterator: Iterator[Any]
2911 ===> phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef
1716 ===> phantm.ast.Trees.NextArrayEntry.<init>(): phantm.ast.Trees.NextArrayEntry.type
2439 ===> phantm.ast.Trees.Print.readResolve(): Object
4106 ===> phantm.cfg.Trees.GEQ.productPrefix: String
2342 ===> phantm.ast.Trees.Cast.productPrefix: String
3734 ===> phantm.cfg.Trees.Cast.equals(x$1: Any): Boolean
5514 ===> phantm.types.TAny.productIterator: Iterator[Any]
5602 ===> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
1935 ===> phantm.ast.Trees.Concat.productArity: Int
4095 ===> phantm.cfg.Trees.LEQ.<init>(): phantm.cfg.Trees.LEQ.type
4434 ===> phantm.phases.CFGGenerator.productIterator: Iterator[Any]
4454 ===> phantm.phases.CGContext.productArity: Int
1912 ===> phantm.ast.Trees.Mult.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mult
2168 ===> phantm.ast.Trees.ShiftRight.rhs: phantm.ast.Trees.Expression
2522 ===> phantm.ast.Trees.Include.productElement(x$1: Int): Any
3941 ===> phantm.cfg.Trees.Clone.productIterator: Iterator[Any]
3948 ===> phantm.cfg.Trees.Clone.unapply(x$0: phantm.cfg.Trees.Clone): Option[phantm.cfg.Trees.SimpleValue]
5931 ===> phantm.util.UFloat.productPrefix: String
3183 ===> phantm.cfg.Trees.IsNull.hashCode(): Int
1700 ===> phantm.ast.Trees.ArrayEntry.toString(): String
5990 ===> phantm.util.UFalse.productElement(x$1: Int): Any
1200 ===> phantm.ast.Trees.ClassDecl.copy(name: phantm.ast.Trees.NSIdentifier,flags: phantm.ast.Trees.ClassFlag,parent: Option[phantm.ast.Trees.StaticClassRef],interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],static_props: List[phantm.ast.Trees.PropertyDecl],props: List[phantm.ast.Trees.PropertyDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.ClassDecl
4904 ===> phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit
5690 ===> phantm.util.IncludeResolver.deepNess: Int
3518 ===> phantm.cfg.Trees.NextArrayEntry.apply(arr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.NextArrayEntry
3333 ===> phantm.cfg.Trees.Skip.readResolve(): Object
1368 ===> phantm.ast.Trees.Block.unapply(x$0: phantm.ast.Trees.Block): Option[List[phantm.ast.Trees.Statement]]
2873 ===> phantm.ast.Trees.MCNamespace.productArity: Int
2361 ===> phantm.ast.Trees.Silence.productElement(x$1: Int): Any
2521 ===> phantm.ast.Trees.Include.productArity: Int
3939 ===> phantm.cfg.Trees.Clone.productArity: Int
5739 ===> phantm.util.JavaListIteratorWrapper.readResolve(): Object
3896 ===> phantm.cfg.Trees.MethodCall.receiver: phantm.cfg.Trees.SimpleValue
2404 ===> phantm.ast.Trees.Array.unapply(x$0: phantm.ast.Trees.Array): Option[List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]]
336 ===> phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
3735 ===> phantm.cfg.Trees.Cast.<init>(): phantm.cfg.Trees.Cast.type
2370 ===> phantm.ast.Trees.Silence.unapply(x$0: phantm.ast.Trees.Silence): Option[phantm.ast.Trees.Expression]
3024 ===> phantm.cfg.LabeledDirectedGraphImp.Group.toString(): String
1865 ===> phantm.ast.Trees.Plus.equals(x$1: Any): Boolean
5116 ===> phantm.types.RecProtection.<init>(): phantm.types.RecProtection.type
1654 ===> phantm.ast.Trees.SimpleVariable.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
1744 ===> phantm.ast.Trees.DynamicObjectProperty.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5770 ===> phantm.util.Reporter.<init>(mainFiles: List[String]): phantm.util.Reporter
2643 ===> phantm.ast.Trees.MethodCall.toString(): String
5101 ===> phantm.types.TypeTransferFunction.apply(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction
4443 ===> phantm.phases.CFGGenerator.readResolve(): Object
2958 ===> phantm.cfg.EdgeImp.copy[L](v1: phantm.cfg.VertexImp[L],lab: L,v2: phantm.cfg.VertexImp[L]): phantm.cfg.EdgeImp[L]
1615 ===> phantm.ast.Trees.Foreach.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4763 ===> phantm.phases.TypeFlowAnalysis.productPrefix: String
3759 ===> phantm.cfg.Trees.ArrayCurElement.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
135 ===> phantm.Settings.$lessinit$greater$default$2: String @scala.annotation.unchecked.uncheckedVariance
3037 ===> phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit
5999 ===> phantm.util.UTrue.productElement(x$1: Int): Any
3283 ===> phantm.cfg.Trees.AssumeNotProperty.productArity: Int
5969 ===> phantm.util.URealRef.canEqual(x$1: Any): Boolean
4305 ===> phantm.helpers.CFGGraphs.toString(): String
316 ===> phantm.ast.STToAST.<init>(parser: phantm.parser.Parser,st: phantm.parser.ParseNode): phantm.ast.STToAST
265 ===> phantm.annotations.SourceAnnotations.Parser.variable: phantm.annotations.SourceAnnotations.Parser.Parser[String]
3669 ===> phantm.cfg.Trees.PHPNull.hashCode(): Int
3266 ===> phantm.cfg.Trees.AssumeProperty.productElement(x$1: Int): Any
2278 ===> phantm.ast.Trees.SmallerEqual.rhs: phantm.ast.Trees.Expression
5747 ===> phantm.util.Positional.line_end: Int
3571 ===> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
5708 ===> phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression
1500 ===> phantm.ast.Trees.Continue.<init>(): phantm.ast.Trees.Continue.type
2331 ===> phantm.ast.Trees.Ternary.<init>(): phantm.ast.Trees.Ternary.type
1287 ===> phantm.ast.Trees.Throw.copy(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Throw
4571 ===> phantm.phases.PhaseException.toString(): String
3529 ===> phantm.cfg.Trees.ObjectProperty.productElement(x$1: Int): Any
5415 ===> phantm.types.TIntLit.hashCode(): Int
4255 ===> phantm.dataflow.StronglyConnectedComponents.push(n: StronglyConnectedComponents.this.Node): Unit
1095 ===> phantm.ast.Trees.OAMethod.<init>(name: phantm.ast.Trees.ObjectAccess,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.OAMethod
4824 ===> phantm.symbols.GlobalSymbols.getConstants: List[phantm.symbols.ConstantSymbol]
5488 ===> phantm.types.TString.hashCode(): Int
1850 ===> phantm.ast.Trees.Clone.unapply(x$0: phantm.ast.Trees.Clone): Option[phantm.ast.Trees.Expression]
3913 ===> phantm.cfg.Trees.MethodCall.apply(receiver: phantm.cfg.Trees.SimpleValue,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.MethodCall
3585 ===> phantm.cfg.Trees.PHPLong.apply(value: Long): phantm.cfg.Trees.PHPLong
742 ===> phantm.ast.Trees.NSIdentifier.parts: List[String]
2390 ===> phantm.ast.Trees.Array.<init>(values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]): phantm.ast.Trees.Array
2777 ===> phantm.ast.Trees.PHPNull.apply(): phantm.ast.Trees.PHPNull
5638 ===> phantm.util.DumpCollector.path: String
1482 ===> phantm.ast.Trees.Break.equals(x$1: Any): Boolean
2045 ===> phantm.ast.Trees.BooleanAnd.hashCode(): Int
1543 ===> phantm.ast.Trees.Static.productPrefix: String
1503 ===> phantm.ast.Trees.Continue.unapply(x$0: phantm.ast.Trees.Continue): Option[phantm.ast.Trees.Expression]
5372 ===> phantm.types.TArray.injectAny(typ: phantm.types.Type): phantm.types.TArray
1958 ===> phantm.ast.Trees.Mod.hashCode(): Int
4291 ===> phantm.helpers.CFGGraphs.result_$eq(x$1: String): Unit
802 ===> phantm.ast.Trees.StaticClassRef.copy(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticClassRef
5726 ===> phantm.util.JavaListIteratorWrapper.copy$default$1[A]: java.util.Iterator[A] @scala.annotation.unchecked.uncheckedVariance
445 ===> phantm.ast.Trees.<init>(): phantm.ast.Trees.type
2774 ===> phantm.ast.Trees.PHPNull.equals(x$1: Any): Boolean
1106 ===> phantm.ast.Trees.OAMethod.equals(x$1: Any): Boolean
2403 ===> phantm.ast.Trees.Array.apply(values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]): phantm.ast.Trees.Array
1023 ===> phantm.ast.Trees.CallArg.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3807 ===> phantm.cfg.Trees.Constant.copy$default$1: phantm.symbols.ConstantSymbol @scala.annotation.unchecked.uncheckedVariance
3244 ===> phantm.cfg.Trees.IsScalar.productIterator: Iterator[Any]
5641 ===> phantm.util.DumpCollector.content: List[String]
4696 ===> phantm.phases.SymContext.toString(): String
100 ===> phantm.InlineManual.productIterator: Iterator[Any]
4210 ===> phantm.cfg.Trees.POSTDEC.canEqual(x$1: Any): Boolean
4690 ===> phantm.phases.SymContext.productPrefix: String
217 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.canEqual(x$1: Any): Boolean
1346 ===> phantm.ast.Trees.Alternatives.toString(): String
3541 ===> phantm.cfg.Trees.VariableClassProperty.<init>(cl: phantm.cfg.Trees.ClassRef,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableClassProperty
1918 ===> phantm.ast.Trees.Mult.productIterator: Iterator[Any]
3654 ===> phantm.cfg.Trees.PHPFalse.canEqual(x$1: Any): Boolean
4356 ===> phantm.phases.ASTChecksPhase.name: String
5912 ===> phantm.util.UInt.copy(v: Int): phantm.util.UInt
5842 ===> phantm.util.ErrorException.productIterator: Iterator[Any]
4237 ===> phantm.dataflow.StronglyConnectedComponents.Node.v_$eq(x$1: StronglyConnectedComponents.this.Vertex): Unit
3124 ===> phantm.cfg.Trees.Error.toString(): String
4006 ===> phantm.cfg.Trees.INSTANCEOF.toString(): String
4873 ===> phantm.symbols.LookupResult.productElement(x$1: Int): Any
4519 ===> phantm.phases.MethodGraphGeneration.MethodGraph.symToV_$eq(x$1: scala.collection.immutable.Map[phantm.symbols.MethodSymbol,phantm.cfg.VertexImp[String]]): Unit
1238 ===> phantm.ast.Trees.InterfaceDecl.toString(): String
2744 ===> phantm.ast.Trees.PHPFloat.toString(): String
2300 ===> phantm.ast.Trees.InstanceOf.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
938 ===> phantm.ast.Trees.CastDouble.<init>(): phantm.ast.Trees.CastDouble.type
5483 ===> phantm.types.TString.productPrefix: String
4838 ===> phantm.symbols.MemberVisibility.stricterThan(o: phantm.symbols.MemberVisibility): Boolean
3007 ===> phantm.cfg.LabeledDirectedGraphImp.Group.newSubGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group
5928 ===> phantm.util.UFloat.<init>(str: Float): phantm.util.UFloat
2730 ===> phantm.ast.Trees.PHPInteger.readResolve(): Object
4751 ===> phantm.phases.TypeFlowAnalysis.initCtx: phantm.phases.PhasesContext
1769 ===> phantm.ast.Trees.ClassProperty.canEqual(x$1: Any): Boolean
2470 ===> phantm.ast.Trees.Closure.productIterator: Iterator[Any]
1754 ===> phantm.ast.Trees.DynamicObjectProperty.<init>(): phantm.ast.Trees.DynamicObjectProperty.type
4774 ===> phantm.phases.TypeFlowAnalysis.unapply(x$0: phantm.phases.TypeFlowAnalysis): Option[(phantm.phases.PhasesContext, phantm.ast.Trees.Tree)]
2153 ===> phantm.ast.Trees.ShiftLeft.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5513 ===> phantm.types.TAny.productElement(x$1: Int): Any
4831 ===> phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal
569 ===> phantm.ast.Trees.ConstantDecl.apply(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl
6018 ===> phantm.util.Unserializer.uValueToField(v: phantm.util.UValue): String
3717 ===> phantm.cfg.Trees.SubTypeOf.<init>(): phantm.cfg.Trees.SubTypeOf.type
3474 ===> phantm.cfg.Trees.VariableVar.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
183 ===> phantm.annotations.AnnotationsStore.collectFunction(fs: phantm.symbols.FunctionSymbol,ft: phantm.types.TFunction): Unit
5850 ===> phantm.util.ErrorException.readResolve(): Object
2437 ===> phantm.ast.Trees.Print.apply(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Print
509 ===> phantm.ast.Trees.MethodDecl.toString(): String
1471 ===> phantm.ast.Trees.Break.level: phantm.ast.Trees.Expression
1405 ===> phantm.ast.Trees.While.<init>(): phantm.ast.Trees.While.type
694 ===> phantm.ast.Trees.NSGlobal.<init>(): phantm.ast.Trees.NSGlobal.type
2593 ===> phantm.ast.Trees.New.copy$default$2: List[phantm.ast.Trees.CallArg] @scala.annotation.unchecked.uncheckedVariance
1242 ===> phantm.ast.Trees.InterfaceDecl.apply(name: phantm.ast.Trees.NSIdentifier,interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.InterfaceDecl
959 ===> phantm.ast.Trees.CastBool.productElement(x$1: Int): Any
985 ===> phantm.ast.Trees.InitVariable.<init>(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
945 ===> phantm.ast.Trees.CastDouble.toString(): String
1522 ===> phantm.ast.Trees.Global.vars: List[phantm.ast.Trees.Variable]
752 ===> phantm.ast.Trees.NSIdentifier.productElement(x$1: Int): Any
2561 ===> phantm.ast.Trees.Constant.hashCode(): Int
1065 ===> phantm.ast.Trees.OAExpression.canEqual(x$1: Any): Boolean
297 ===> phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef
865 ===> phantm.ast.Trees.DynamicFunctionRef.unapply(x$0: phantm.ast.Trees.DynamicFunctionRef): Option[phantm.ast.Trees.Expression]
4415 ===> phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
4149 ===> phantm.cfg.Trees.NOTIDENTICAL.<init>(): phantm.cfg.Trees.NOTIDENTICAL.type
1339 ===> phantm.ast.Trees.Alternatives.copy$default$1: List[phantm.ast.Trees.Expression] @scala.annotation.unchecked.uncheckedVariance
3156 ===> phantm.cfg.Trees.Assume.unapply(x$0: phantm.cfg.Trees.Assume): Option[(phantm.cfg.Trees.SimpleValue, phantm.cfg.Trees.RelationalOperator, phantm.cfg.Trees.SimpleValue)]
222 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.toString(): String
3292 ===> phantm.cfg.Trees.AssumeNotProperty.unapply(x$0: phantm.cfg.Trees.AssumeNotProperty): Option[(phantm.cfg.Trees.Property, List[phantm.cfg.Trees.Variable])]
2810 ===> phantm.ast.Trees.MCDir.<init>(): phantm.ast.Trees.MCDir
1267 ===> phantm.ast.Trees.Catch.<init>(cl: phantm.ast.Trees.ClassRef,v: phantm.ast.Trees.SimpleVariable,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Catch
806 ===> phantm.ast.Trees.StaticClassRef.productElement(x$1: Int): Any
5252 ===> phantm.types.ObjectStore.initIfNotExist(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.ObjectStore
5873 ===> phantm.util.UObject.entries: Map[phantm.util.UValue,phantm.util.UValue]
4791 ===> phantm.symbols.Symbol.setUserland: Symbol.this.type
3042 ===> phantm.cfg.Trees.nextID_$eq(x$1: Int): Unit
5234 ===> phantm.types.ObjectId.productElement(x$1: Int): Any
4192 ===> phantm.cfg.Trees.POSTINC.canEqual(x$1: Any): Boolean
4205 ===> phantm.cfg.Trees.POSTDEC.toString(): String
277 ===> phantm.annotations.SourceAnnotations.Parser.getConstType: String => Option[phantm.types.Type]
32 ===> phantm.Settings.exportMGPath: Option[String]
130 ===> phantm.Settings.apply$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
1302 ===> phantm.ast.Trees.Goto.to: phantm.ast.Trees.Label
2283 ===> phantm.ast.Trees.SmallerEqual.productPrefix: String
2990 ===> phantm.cfg.LabeledDirectedGraphImp.betweenEdges(from: LabeledDirectedGraphImp.this.Vertex,to: LabeledDirectedGraphImp.this.Vertex): scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
4234 ===> phantm.dataflow.Environment.checkMonotonicity(vertex: Environment.this.Vertex,newEnv: E,ctx: phantm.phases.PhasesContext,inEdges: Iterable[(S, E)]): Unit
149 ===> phantm.Settings.$lessinit$greater$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
2275 ===> phantm.ast.Trees.Smaller.unapply(x$0: phantm.ast.Trees.Smaller): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
4087 ===> phantm.cfg.Trees.LT.toString(): String
2320 ===> phantm.ast.Trees.Ternary.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5456 ===> phantm.types.TBoolean.productIterator: Iterator[Any]
1380 ===> phantm.ast.Trees.If.productElement(x$1: Int): Any
5544 ===> phantm.types.TTop.productIterator: Iterator[Any]
4989 ===> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
2021 ===> phantm.ast.Trees.PostDec.productPrefix: String
298 ===> phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint
1166 ===> phantm.ast.Trees.Namespaced.equals(x$1: Any): Boolean
2255 ===> phantm.ast.Trees.Identical.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Identical
1793 ===> phantm.ast.Trees.ListVar.unapply(x$0: phantm.ast.Trees.ListVar): Option[List[Option[phantm.ast.Trees.Variable]]]
2178 ===> phantm.ast.Trees.ShiftRight.hashCode(): Int
4070 ===> phantm.cfg.Trees.SHIFTLEFT.productPrefix: String
4387 ===> phantm.phases.ASTIntegrityChecks.productPrefix: String
3258 ===> phantm.cfg.Trees.AssumeProperty.prop: phantm.cfg.Trees.Property
5389 ===> phantm.types.TNumeric.productElement(x$1: Int): Any
4723 ===> phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit
2204 ===> phantm.ast.Trees.BitwiseNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseNot
2900 ===> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
1917 ===> phantm.ast.Trees.Mult.productElement(x$1: Int): Any
1517 ===> phantm.ast.Trees.Return.<init>(): phantm.ast.Trees.Return.type
3716 ===> phantm.cfg.Trees.SubTypeOf.equals(x$1: Any): Boolean
620 ===> phantm.ast.Trees.THObject.toString(): String
2807 ===> phantm.ast.Trees.MCLine.apply(): phantm.ast.Trees.MCLine
2943 ===> phantm.cfg.VertexImp.productIterator: Iterator[Any]
3312 ===> phantm.cfg.Trees.Return.copy(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Return
4594 ===> phantm.phases.PhaseSeq.readResolve(): Object
3212 ===> phantm.cfg.Trees.IsBool.readResolve(): Object
1938 ===> phantm.ast.Trees.Concat.canEqual(x$1: Any): Boolean
1669 ===> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
1987 ===> phantm.ast.Trees.PostInc.productPrefix: String
2466 ===> phantm.ast.Trees.Closure.copy$default$4: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
4602 ===> phantm.phases.PhasesContext.cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph]
470 ===> phantm.ast.Trees.ArgumentDecl.copy(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
651 ===> phantm.ast.Trees.MFProtected.canEqual(x$1: Any): Boolean
4968 ===> phantm.types.TypeFlowAnalyzer.copy(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer
2474 ===> phantm.ast.Trees.Closure.equals(x$1: Any): Boolean
1952 ===> phantm.ast.Trees.Mod.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1069 ===> phantm.ast.Trees.OAExpression.<init>(): phantm.ast.Trees.OAExpression.type
1708 ===> phantm.ast.Trees.NextArrayEntry.productPrefix: String
5353 ===> phantm.types.IntKey.unapply(x$0: phantm.types.IntKey): Option[Long]
5168 ===> phantm.types.TFunction.copy$default$1: List[(phantm.types.Type, Boolean, Boolean)] @scala.annotation.unchecked.uncheckedVariance
5790 ===> phantm.util.Reporter.Error.toString(): String
2095 ===> phantm.ast.Trees.BitwiseAnd.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2057 ===> phantm.ast.Trees.BooleanOr.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2794 ===> phantm.ast.Trees.MCFile.readResolve(): Object
5961 ===> phantm.util.URealRef.i: Int
385 ===> phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
3938 ===> phantm.cfg.Trees.Clone.productPrefix: String
3419 ===> phantm.cfg.Trees.ClassRefCalledClass.<init>(): phantm.cfg.Trees.ClassRefCalledClass.type
1555 ===> phantm.ast.Trees.Static.readResolve(): Object
2072 ===> phantm.ast.Trees.BooleanXor.lhs: phantm.ast.Trees.Expression
2875 ===> phantm.ast.Trees.MCNamespace.productIterator: Iterator[Any]
3606 ===> phantm.cfg.Trees.PHPString.copy(value: String): phantm.cfg.Trees.PHPString
4625 ===> phantm.phases.PhasesContext.unapply(x$0: phantm.phases.PhasesContext): Option[(List[String], Set[String], Option[phantm.ast.Trees.Program], List[phantm.util.DumpCollector], Option[phantm.symbols.Symbol], phantm.util.GlobalAnalysisResults, Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph], phantm.symbols.GlobalSymbols)]
4761 ===> phantm.phases.TypeFlowAnalysis.copy$default$1: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
2908 ===> phantm.cfg.ASTToCFG.notyet(ex: phantm.ast.Trees.Expression): Nothing
5381 ===> phantm.types.TAnyArray.toString(): String
129 ===> phantm.Settings.apply$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
608 ===> phantm.ast.Trees.THArray.toString(): String
937 ===> phantm.ast.Trees.CastString.readResolve(): Object
354 ===> phantm.ast.STToAST.additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch]
2951 ===> phantm.cfg.VertexImp.readResolve(): Object
4754 ===> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
4647 ===> phantm.phases.PureStatementsPhase.<init>(): phantm.phases.PureStatementsPhase.type
1035 ===> phantm.ast.Trees.CallArg.apply(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
3691 ===> phantm.cfg.Trees.PHPEmptyArray.copy(): phantm.cfg.Trees.PHPEmptyArray
4995 ===> phantm.types.TypeFlowAnalyzer.apply$default$7: Option[phantm.types.TObjectRef] @scala.annotation.unchecked.uncheckedVariance
1456 ===> phantm.ast.Trees.Switch.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
1028 ===> phantm.ast.Trees.CallArg.productIterator: Iterator[Any]
5153 ===> phantm.types.TClass.equals(x$1: Any): Boolean
2446 ===> phantm.ast.Trees.Eval.productElement(x$1: Int): Any
663 ===> phantm.ast.Trees.MFPrivate.readResolve(): Object
1348 ===> phantm.ast.Trees.Alternatives.<init>(): phantm.ast.Trees.Alternatives.type
1655 ===> phantm.ast.Trees.SimpleVariable.productPrefix: String
90 ===> phantm.InlineFull.productElement(x$1: Int): Any
940 ===> phantm.ast.Trees.CastDouble.productArity: Int
2076 ===> phantm.ast.Trees.BooleanXor.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2714 ===> phantm.ast.Trees.PHPInteger.value: Long
3768 ===> phantm.cfg.Trees.ArrayCurElement.toString(): String
4339 ===> phantm.lattice.PartialOrder.leq(envx: PartialOrder.this.Env,envy: PartialOrder.this.Env,x: PartialOrder.this.E,y: PartialOrder.this.E): Boolean
3522 ===> phantm.cfg.Trees.ObjectProperty.index: phantm.cfg.Trees.SimpleValue
2855 ===> phantm.ast.Trees.MCMethod.<init>(): phantm.ast.Trees.MCMethod
2710 ===> phantm.ast.Trees.PHPFalse.toString(): String
1367 ===> phantm.ast.Trees.Block.apply(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
216 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productIterator: Iterator[Any]
3738 ===> phantm.cfg.Trees.Cast.unapply(x$0: phantm.cfg.Trees.Cast): Option[(phantm.ast.Trees.CastType, phantm.cfg.Trees.SimpleValue)]
3696 ===> phantm.cfg.Trees.PHPEmptyArray.canEqual(x$1: Any): Boolean
1174 ===> phantm.ast.Trees.Import.<init>(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
4062 ===> phantm.cfg.Trees.BITWISEXOR.productArity: Int
3119 ===> phantm.cfg.Trees.AssignBinary.toString(): String
1359 ===> phantm.ast.Trees.Block.productElement(x$1: Int): Any
2851 ===> phantm.ast.Trees.MCFunction.toString(): String
1868 ===> phantm.ast.Trees.Plus.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus
4172 ===> phantm.cfg.Trees.BITSIWENOT.productElement(x$1: Int): Any
1162 ===> phantm.ast.Trees.Namespaced.productIterator: Iterator[Any]
2023 ===> phantm.ast.Trees.PostDec.productElement(x$1: Int): Any
2113 ===> phantm.ast.Trees.BitwiseOr.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseOr
2623 ===> phantm.ast.Trees.FunctionCall.apply(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
5767 ===> phantm.util.ENotice.hashCode(): Int
5338 ===> phantm.types.IntKey.<init>(v: Long): phantm.types.IntKey
4067 ===> phantm.cfg.Trees.BITWISEXOR.readResolve(): Object
2764 ===> phantm.ast.Trees.PHPString.readResolve(): Object
5003 ===> phantm.types.TypeLattice.leq(x: phantm.types.Type,y: phantm.types.Type): Boolean
4994 ===> phantm.types.TypeFlowAnalyzer.apply$default$6: phantm.types.TypeEnvironment @scala.annotation.unchecked.uncheckedVariance
2573 ===> phantm.ast.Trees.ClassConstant.copy$default$1: phantm.ast.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
1864 ===> phantm.ast.Trees.Plus.toString(): String
896 ===> phantm.ast.Trees.DynamicMethodRef.equals(x$1: Any): Boolean
3681 ===> phantm.cfg.Trees.PHPThis.productIterator: Iterator[Any]
4507 ===> phantm.phases.IncludesConstantsResolutionPhase.<init>(): phantm.phases.IncludesConstantsResolutionPhase.type
4444 ===> phantm.phases.CallGraphPhase.<init>(): phantm.phases.CallGraphPhase.type
3003 ===> phantm.cfg.LabeledDirectedGraphImp.Group.vertOut: Option[LabeledDirectedGraphImp.this.Vertex]
3563 ===> phantm.cfg.Trees.NoVar.canEqual(x$1: Any): Boolean
2613 ===> phantm.ast.Trees.FunctionCall.productPrefix: String
5941 ===> phantm.util.UFloat.apply(str: Float): phantm.util.UFloat
3458 ===> phantm.cfg.Trees.ClassProperty.copy$default$1: phantm.symbols.PropertySymbol @scala.annotation.unchecked.uncheckedVariance
774 ===> phantm.ast.Trees.VarClassRef.canEqual(x$1: Any): Boolean
5733 ===> phantm.util.JavaListIteratorWrapper.toString(): String
3519 ===> phantm.cfg.Trees.NextArrayEntry.unapply(x$0: phantm.cfg.Trees.NextArrayEntry): Option[phantm.cfg.Trees.SimpleValue]
3019 ===> phantm.cfg.LabeledDirectedGraphImp.Group.canEqual(x$1: Any): Boolean
2399 ===> phantm.ast.Trees.Array.toString(): String
5872 ===> phantm.util.UObject.classname: String
4630 ===> phantm.phases.PhasesContext.$lessinit$greater$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
2737 ===> phantm.ast.Trees.PHPFloat.productElement(x$1: Int): Any
4287 ===> phantm.helpers.CFGGraphs.node: phantm.ast.Trees.Tree
3434 ===> phantm.cfg.Trees.ClassRefUnknown.<init>(): phantm.cfg.Trees.ClassRefUnknown.type
5905 ===> phantm.util.UString.<init>(): phantm.util.UString.type
218 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.hashCode(): Int
5111 ===> phantm.types.TypeTransferFunction.readResolve(): Object
3029 ===> phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
2213 ===> phantm.ast.Trees.BitwiseNot.toString(): String
2705 ===> phantm.ast.Trees.PHPFalse.canEqual(x$1: Any): Boolean
5248 ===> phantm.types.ObjectStore.lookup(id: phantm.types.TObjectRef): phantm.types.TRealObject
973 ===> phantm.ast.Trees.CastObject.readResolve(): Object
1461 ===> phantm.ast.Trees.Switch.productIterator: Iterator[Any]
489 ===> phantm.ast.Trees.MethodDecl.flags: List[phantm.ast.Trees.MemberFlag]
4804 ===> phantm.symbols.GlobalSymbols.<init>(): phantm.symbols.GlobalSymbols
1371 ===> phantm.ast.Trees.If.then: phantm.ast.Trees.Statement
4901 ===> phantm.symbols.ClassSymbol.constants: scala.collection.mutable.HashMap[String,phantm.symbols.ClassConstantSymbol]
4439 ===> phantm.phases.CFGGenerator.<init>(): phantm.phases.CFGGenerator.type
3301 ===> phantm.cfg.Trees.Print.productIterator: Iterator[Any]
121 ===> phantm.Settings.apply$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
2489 ===> phantm.ast.Trees.Isset.hashCode(): Int
3146 ===> phantm.cfg.Trees.Assume.productPrefix: String
3459 ===> phantm.cfg.Trees.ClassProperty.productPrefix: String
1882 ===> phantm.ast.Trees.Minus.hashCode(): Int
5760 ===> phantm.util.ErrorTag.<init>(): phantm.util.ErrorTag
4504 ===> phantm.phases.DumpsCollectionPhase.name: String
1084 ===> phantm.ast.Trees.OAArray.canEqual(x$1: Any): Boolean
532 ===> phantm.ast.Trees.PropertyDecl.unapply(x$0: phantm.ast.Trees.PropertyDecl): Option[(phantm.ast.Trees.Identifier, List[phantm.ast.Trees.MemberFlag], Option[phantm.ast.Trees.Expression])]
4436 ===> phantm.phases.CFGGenerator.hashCode(): Int
3982 ===> phantm.cfg.Trees.DIV.productElement(x$1: Int): Any
2111 ===> phantm.ast.Trees.BitwiseOr.rhs: phantm.ast.Trees.Expression
5555 ===> phantm.types.TBottom.canEqual(x$1: Any): Boolean
2525 ===> phantm.ast.Trees.Include.hashCode(): Int
5130 ===> phantm.types.ClassType.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
2019 ===> phantm.ast.Trees.PostDec.copy(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostDec
2731 ===> phantm.ast.Trees.PHPFloat.value: Float
5986 ===> phantm.util.UNull.readResolve(): Object
5042 ===> phantm.types.TypeTransferFunction.possiblyUninit(t: phantm.types.Type): Boolean
2850 ===> phantm.ast.Trees.MCFunction.<init>(): phantm.ast.Trees.MCFunction.type
2980 ===> phantm.cfg.LabeledDirectedGraphImp.vertices_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]): Unit
5559 ===> phantm.types.TUninitialized.<init>(): phantm.types.TUninitialized.type
5496 ===> phantm.types.TStringLit.productPrefix: String
3390 ===> phantm.cfg.Trees.ClassRefDynamic.unapply(x$0: phantm.cfg.Trees.ClassRefDynamic): Option[phantm.cfg.Trees.SimpleValue]
4856 ===> phantm.symbols.ClassConstantSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ClassConstantSymbol
1108 ===> phantm.ast.Trees.OAMethod.toString(): String
5271 ===> phantm.types.TAnyObject.toString(): String
2377 ===> phantm.ast.Trees.Exit.productArity: Int
472 ===> phantm.ast.Trees.ArgumentDecl.copy$default$2: Option[phantm.ast.Trees.TypeHint] @scala.annotation.unchecked.uncheckedVariance
4303 ===> phantm.helpers.CFGGraphs.canEqual(x$1: Any): Boolean
3753 ===> phantm.cfg.Trees.ArrayNext.apply(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayNext
942 ===> phantm.ast.Trees.CastDouble.productIterator: Iterator[Any]
5994 ===> phantm.util.UFalse.toString(): String
5596 ===> phantm.util.API.Reader.APIPos.equals(x$1: Any): Boolean
751 ===> phantm.ast.Trees.NSIdentifier.productArity: Int
6009 ===> phantm.util.Unserializer.uidToOId_$eq(x$1: Map[Int,phantm.types.ObjectId]): Unit
3393 ===> phantm.cfg.Trees.ClassRefFixed.<init>(cs: phantm.symbols.ClassSymbol): phantm.cfg.Trees.ClassRefFixed
5723 ===> phantm.util.JavaListIteratorWrapper.<init>(iter: java.util.Iterator[A]): phantm.util.JavaListIteratorWrapper[A]
2472 ===> phantm.ast.Trees.Closure.hashCode(): Int
1448 ===> phantm.ast.Trees.For.toString(): String
2 ===> phantm.Main.settings: phantm.Settings
4299 ===> phantm.helpers.CFGGraphs.productPrefix: String
4133 ===> phantm.cfg.Trees.IDENTICAL.productPrefix: String
4739 ===> phantm.phases.CollectSymbols.equals(x$1: Any): Boolean
1470 ===> phantm.ast.Trees.Switch.readResolve(): Object
4212 ===> phantm.cfg.Trees.POSTDEC.readResolve(): Object
5245 ===> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
5724 ===> phantm.util.JavaListIteratorWrapper.foreach(f: A => Unit): Unit
827 ===> phantm.ast.Trees.CalledClass.<init>(): phantm.ast.Trees.CalledClass.type
6017 ===> phantm.util.Unserializer.getVal(i: Int): phantm.util.UValue
3730 ===> phantm.cfg.Trees.Cast.productElement(x$1: Int): Any
5145 ===> phantm.types.TClass.copy(cs: phantm.symbols.ClassSymbol): phantm.types.TClass
1294 ===> phantm.ast.Trees.Throw.hashCode(): Int
5820 ===> phantm.util.Reporter.rep_$eq(x$1: Option[phantm.util.Reporter]): Unit
5929 ===> phantm.util.UFloat.copy(str: Float): phantm.util.UFloat
956 ===> phantm.ast.Trees.CastBool.<init>(): phantm.ast.Trees.CastBool.type
1672 ===> phantm.ast.Trees.VariableVariable.productPrefix: String
4496 ===> phantm.phases.CallGraphGeneration.toString(): String
5647 ===> phantm.util.DumpCollector.functions_$eq(x$1: Map[String,(String, Int)]): Unit
1779 ===> phantm.ast.Trees.ListVar.<init>(vars: List[Option[phantm.ast.Trees.Variable]]): phantm.ast.Trees.ListVar
5557 ===> phantm.types.TBottom.toString(): String
283 ===> phantm.ast.ASTTransform.<init>(p: phantm.ast.Trees.Program): phantm.ast.ASTTransform
3612 ===> phantm.cfg.Trees.PHPString.canEqual(x$1: Any): Boolean
3818 ===> phantm.cfg.Trees.Constant.unapply(x$0: phantm.cfg.Trees.Constant): Option[phantm.symbols.ConstantSymbol]
2251 ===> phantm.ast.Trees.Identical.toString(): String
202 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.toString(): String
2192 ===> phantm.ast.Trees.BooleanNot.productElement(x$1: Int): Any
2268 ===> phantm.ast.Trees.Smaller.canEqual(x$1: Any): Boolean
193 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyEntry
1406 ===> phantm.ast.Trees.While.toString(): String
4839 ===> phantm.symbols.MVPublic.<init>(): phantm.symbols.MVPublic.type
3534 ===> phantm.cfg.Trees.ObjectProperty.<init>(): phantm.cfg.Trees.ObjectProperty.type
3597 ===> phantm.cfg.Trees.PHPFloat.hashCode(): Int
5766 ===> phantm.util.ENotice.canEqual(x$1: Any): Boolean
5149 ===> phantm.types.TClass.productElement(x$1: Int): Any
205 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.toString(): String
2397 ===> phantm.ast.Trees.Array.canEqual(x$1: Any): Boolean
343 ===> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
3598 ===> phantm.cfg.Trees.PHPFloat.equals(x$1: Any): Boolean
4379 ===> phantm.phases.ASTIntegrityChecks.context: phantm.phases.CheckContext
5626 ===> phantm.util.ConstantsResolver.productArity: Int
3506 ===> phantm.cfg.Trees.NextArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.NextArrayEntry
5917 ===> phantm.util.UInt.productIterator: Iterator[Any]
74 ===> phantm.InlineNone.canEqual(x$1: Any): Boolean
2512 ===> phantm.ast.Trees.Empty.unapply(x$0: phantm.ast.Trees.Empty): Option[phantm.ast.Trees.Variable]
8 ===> phantm.Main.files: List[String]
1594 ===> phantm.ast.Trees.Unset.productPrefix: String
1645 ===> phantm.ast.Trees.Void.toString(): String
3328 ===> phantm.cfg.Trees.Skip.productArity: Int
5946 ===> phantm.util.UObjRef.copy(i: Int): phantm.util.UObjRef
3470 ===> phantm.cfg.Trees.ClassProperty.readResolve(): Object
1379 ===> phantm.ast.Trees.If.productArity: Int
2259 ===> phantm.ast.Trees.Smaller.rhs: phantm.ast.Trees.Expression
1711 ===> phantm.ast.Trees.NextArrayEntry.productIterator: Iterator[Any]
5982 ===> phantm.util.UNull.productIterator: Iterator[Any]
4003 ===> phantm.cfg.Trees.MOD.hashCode(): Int
276 ===> phantm.annotations.SourceAnnotations.Parser.getVarType: String => Option[phantm.types.Type]
3132 ===> phantm.cfg.Trees.Error.equals(x$1: Any): Boolean
837 ===> phantm.ast.Trees.VarFunctionRef.productPrefix: String
682 ===> phantm.ast.Trees.NSRoot.<init>(): phantm.ast.Trees.NSRoot
5727 ===> phantm.util.JavaListIteratorWrapper.productPrefix: String
1351 ===> phantm.ast.Trees.Alternatives.unapply(x$0: phantm.ast.Trees.Alternatives): Option[List[phantm.ast.Trees.Expression]]
2009 ===> phantm.ast.Trees.PreDec.hashCode(): Int
5376 ===> phantm.types.TArray.equals(t: Any): Boolean
715 ===> phantm.ast.Trees.NSResolved.value: String
5384 ===> phantm.types.TNumericLit.<init>(): phantm.types.TNumericLit
4917 ===> phantm.symbols.ConstantSymbol.value: Option[phantm.ast.Trees.Scalar]
4982 ===> phantm.types.TypeFlowAnalyzer.toString(): String
1219 ===> phantm.ast.Trees.ClassDecl.apply(name: phantm.ast.Trees.NSIdentifier,flags: phantm.ast.Trees.ClassFlag,parent: Option[phantm.ast.Trees.StaticClassRef],interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],static_props: List[phantm.ast.Trees.PropertyDecl],props: List[phantm.ast.Trees.PropertyDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.ClassDecl
1727 ===> phantm.ast.Trees.ObjectProperty.productPrefix: String
1109 ===> phantm.ast.Trees.OAMethod.apply(name: phantm.ast.Trees.ObjectAccess,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.OAMethod
1255 ===> phantm.ast.Trees.Try.canEqual(x$1: Any): Boolean
2252 ===> phantm.ast.Trees.Identical.equals(x$1: Any): Boolean
2982 ===> phantm.cfg.LabeledDirectedGraphImp.edges_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]): Unit
5699 ===> phantm.util.IncludeResolver.unapply(x$0: phantm.util.IncludeResolver): Option[(phantm.ast.Trees.Program, phantm.phases.PhasesContext)]
4829 ===> phantm.symbols.FunctionSymbol.argList_$eq(x$1: List[(String, phantm.symbols.ArgumentSymbol)]): Unit
5118 ===> phantm.types.RecProtection.objectToStringDepth_$eq(x$1: Int): Unit
4830 ===> phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit
5682 ===> phantm.util.GlobalAnalysisResults.endGlobals_$eq(x$1: Option[phantm.types.TypeEnvironment]): Unit
3105 ===> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
2612 ===> phantm.ast.Trees.FunctionCall.copy$default$2: List[phantm.ast.Trees.CallArg] @scala.annotation.unchecked.uncheckedVariance
3198 ===> phantm.cfg.Trees.IsFloat.productElement(x$1: Int): Any
4945 ===> phantm.types.TypeEnvironment.initObjectIfNotExist(id: phantm.types.ObjectId,cl: Option[phantm.symbols.ClassSymbol]): phantm.types.TypeEnvironment
5369 ===> phantm.types.TArray.setAny(typ: phantm.types.Type): phantm.types.TArray
3590 ===> phantm.cfg.Trees.PHPFloat.copy(value: Float): phantm.cfg.Trees.PHPFloat
1760 ===> phantm.ast.Trees.ClassProperty.property: phantm.ast.Trees.Variable
5857 ===> phantm.util.UArray.copy$default$1: Map[phantm.util.UValue,phantm.util.UValue] @scala.annotation.unchecked.uncheckedVariance
4859 ===> phantm.symbols.IfaceMethodSymbol.<init>(is: phantm.symbols.IfaceSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.IfaceMethodSymbol
3039 ===> phantm.cfg.Trees.Tree.<init>(): phantm.cfg.Trees.Tree
5816 ===> phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String]
5345 ===> phantm.types.IntKey.productElement(x$1: Int): Any
660 ===> phantm.ast.Trees.MFPrivate.canEqual(x$1: Any): Boolean
4800 ===> phantm.symbols.Scope.getVariables: List[phantm.symbols.VariableSymbol]
3246 ===> phantm.cfg.Trees.IsScalar.hashCode(): Int
3834 ===> phantm.cfg.Trees.ClassConstant.toString(): String
2389 ===> phantm.ast.Trees.Array.values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
3467 ===> phantm.cfg.Trees.ClassProperty.toString(): String
450 ===> phantm.ast.Trees.Program.copy(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program
4300 ===> phantm.helpers.CFGGraphs.productArity: Int
4890 ===> phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol]
295 ===> phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg
22 ===> phantm.Settings.displayProgress: Boolean
839 ===> phantm.ast.Trees.VarFunctionRef.productElement(x$1: Int): Any
1264 ===> phantm.ast.Trees.Catch.cl: phantm.ast.Trees.ClassRef
2367 ===> phantm.ast.Trees.Silence.<init>(): phantm.ast.Trees.Silence.type
2692 ===> phantm.ast.Trees.PHPTrue.toString(): String
18 ===> phantm.Settings.testsActive: Boolean
4069 ===> phantm.cfg.Trees.SHIFTLEFT.toString(): String
3267 ===> phantm.cfg.Trees.AssumeProperty.productIterator: Iterator[Any]
724 ===> phantm.ast.Trees.Identifier.value: String
1962 ===> phantm.ast.Trees.Mod.toString(): String
2212 ===> phantm.ast.Trees.BitwiseNot.hashCode(): Int
588 ===> phantm.ast.Trees.CFAbstract.hashCode(): Int
3723 ===> phantm.cfg.Trees.Cast.e: phantm.cfg.Trees.SimpleValue
4937 ===> phantm.types.TypeEnvironment.getGlobalsType: phantm.types.Type
3108 ===> phantm.cfg.Trees.AssignBinary.copy$default$2: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
1087 ===> phantm.ast.Trees.OAArray.equals(x$1: Any): Boolean
3543 ===> phantm.cfg.Trees.VariableClassProperty.copy$default$1: phantm.cfg.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
1131 ===> phantm.ast.Trees.FunctionDecl.<init>(): phantm.ast.Trees.FunctionDecl.type
3136 ===> phantm.cfg.Trees.Error.unapply(x$0: phantm.cfg.Trees.Error): Boolean
4755 ===> phantm.phases.TypeFlowAnalysis.ctx_$eq(x$1: phantm.phases.PhasesContext): Unit
2986 ===> phantm.cfg.LabeledDirectedGraphImp.counter_$eq(x$1: Int): Unit
4633 ===> phantm.phases.PhasesContext.$lessinit$greater$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
366 ===> phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
4378 ===> phantm.phases.ASTIntegrityChecks.node: phantm.ast.Trees.Tree
1171 ===> phantm.ast.Trees.Namespaced.readResolve(): Object
825 ===> phantm.ast.Trees.CalledClass.toString(): String
5763 ===> phantm.util.ENotice.productArity: Int
1210 ===> phantm.ast.Trees.ClassDecl.productArity: Int
2747 ===> phantm.ast.Trees.PHPFloat.readResolve(): Object
5086 ===> phantm.types.TypeTransferFunction.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
1567 ===> phantm.ast.Trees.Echo.equals(x$1: Any): Boolean
4691 ===> phantm.phases.SymContext.productArity: Int
3363 ===> phantm.cfg.Trees.FuncRef.productElement(x$1: Int): Any
101 ===> phantm.InlineManual.canEqual(x$1: Any): Boolean
4244 ===> phantm.dataflow.StronglyConnectedComponents.Node.caller: Option[StronglyConnectedComponents.this.Node]
2974 ===> phantm.cfg.EdgeCounter.<init>(): phantm.cfg.EdgeCounter.type
2608 ===> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
4619 ===> phantm.phases.PhasesContext.hashCode(): Int
3112 ===> phantm.cfg.Trees.AssignBinary.productArity: Int
1216 ===> phantm.ast.Trees.ClassDecl.equals(x$1: Any): Boolean
5680 ===> phantm.util.GlobalAnalysisResults.globalCalls_$eq(x$1: Map[phantm.symbols.FunctionSymbol,Map[String,phantm.types.TypeEnvironment]]): Unit
341 ===> phantm.ast.STToAST.implements_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
442 ===> phantm.ast.STToAST.apply(parser: phantm.parser.Parser,st: phantm.parser.ParseNode): phantm.ast.STToAST
5147 ===> phantm.types.TClass.productPrefix: String
4086 ===> phantm.cfg.Trees.LT.<init>(): phantm.cfg.Trees.LT.type
5560 ===> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
3794 ===> phantm.cfg.Trees.ArrayCurIsValid.productElement(x$1: Int): Any
3721 ===> phantm.cfg.Trees.SubTypeOf.readResolve(): Object
2067 ===> phantm.ast.Trees.BooleanOr.<init>(): phantm.ast.Trees.BooleanOr.type
887 ===> phantm.ast.Trees.DynamicMethodRef.copy(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef
5436 ===> phantm.types.TFloatLit.copy(value: Float): phantm.types.TFloatLit
4230 ===> phantm.dataflow.AnalysisAlgorithm.getResult: Map[AnalysisAlgorithm.this.Vertex,E]
3477 ===> phantm.cfg.Trees.VariableVar.productElement(x$1: Int): Any
1064 ===> phantm.ast.Trees.OAExpression.productIterator: Iterator[Any]
5274 ===> phantm.types.TPreciseObject.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
4587 ===> phantm.phases.PhaseSeq.equals(x$1: Any): Boolean
4060 ===> phantm.cfg.Trees.BITWISEXOR.toString(): String
5818 ===> phantm.util.Reporter.<init>(): phantm.util.Reporter.type
3888 ===> phantm.cfg.Trees.StaticMethodCall.canEqual(x$1: Any): Boolean
5910 ===> phantm.util.UInt.v: Int
4533 ===> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
615 ===> phantm.ast.Trees.THObject.productArity: Int
1314 ===> phantm.ast.Trees.Goto.<init>(): phantm.ast.Trees.Goto.type
5862 ===> phantm.util.UArray.canEqual(x$1: Any): Boolean
2352 ===> phantm.ast.Trees.Cast.apply(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
2821 ===> phantm.ast.Trees.MCDir.toString(): String
1549 ===> phantm.ast.Trees.Static.toString(): String
369 ===> phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
4881 ===> phantm.symbols.LookupResult.apply[T](ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
4545 ===> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
3513 ===> phantm.cfg.Trees.NextArrayEntry.canEqual(x$1: Any): Boolean
1251 ===> phantm.ast.Trees.Try.productPrefix: String
671 ===> phantm.ast.Trees.MFFinal.toString(): String
5965 ===> phantm.util.URealRef.productPrefix: String
968 ===> phantm.ast.Trees.CastObject.productElement(x$1: Int): Any
3602 ===> phantm.cfg.Trees.PHPFloat.unapply(x$0: phantm.cfg.Trees.PHPFloat): Option[Float]
3469 ===> phantm.cfg.Trees.ClassProperty.unapply(x$0: phantm.cfg.Trees.ClassProperty): Option[phantm.symbols.PropertySymbol]
140 ===> phantm.Settings.$lessinit$greater$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
4912 ===> phantm.symbols.ClassSymbol.getMethods: List[phantm.symbols.MethodSymbol]
5855 ===> phantm.util.UArray.<init>(entries: Map[phantm.util.UValue,phantm.util.UValue]): phantm.util.UArray
371 ===> phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
1768 ===> phantm.ast.Trees.ClassProperty.productIterator: Iterator[Any]
4689 ===> phantm.phases.SymContext.copy$default$3: Option[phantm.symbols.IfaceSymbol] @scala.annotation.unchecked.uncheckedVariance
1184 ===> phantm.ast.Trees.Import.toString(): String
632 ===> phantm.ast.Trees.MFAbstract.productIterator: Iterator[Any]
323 ===> phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
3882 ===> phantm.cfg.Trees.StaticMethodCall.copy$default$2: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
388 ===> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
4156 ===> phantm.cfg.Trees.NOTIDENTICAL.hashCode(): Int
2968 ===> phantm.cfg.EdgeImp.equals(x$1: Any): Boolean
1121 ===> phantm.ast.Trees.FunctionDecl.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
5243 ===> phantm.types.ObjectId.unapply(x$0: phantm.types.ObjectId): Option[(Int, phantm.types.ObjectIdType)]
4204 ===> phantm.cfg.Trees.POSTDEC.<init>(): phantm.cfg.Trees.POSTDEC.type
4012 ===> phantm.cfg.Trees.INSTANCEOF.hashCode(): Int
3583 ===> phantm.cfg.Trees.PHPLong.<init>(): phantm.cfg.Trees.PHPLong.type
2858 ===> phantm.ast.Trees.MCMethod.productArity: Int
5890 ===> phantm.util.UObject.apply(i: Int,classname: String,entries: Map[phantm.util.UValue,phantm.util.UValue]): phantm.util.UObject
840 ===> phantm.ast.Trees.VarFunctionRef.productIterator: Iterator[Any]
5141 ===> phantm.types.TClass.cs: phantm.symbols.ClassSymbol
778 ===> phantm.ast.Trees.VarClassRef.<init>(): phantm.ast.Trees.VarClassRef.type
86 ===> phantm.InlineLeaves.readResolve(): Object
1887 ===> phantm.ast.Trees.Minus.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
4043 ===> phantm.cfg.Trees.BITWISEAND.productPrefix: String
1914 ===> phantm.ast.Trees.Mult.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
329 ===> phantm.ast.STToAST.is_reference(n: phantm.parser.ParseNode): Boolean
5799 ===> phantm.util.Reporter.files: scala.collection.immutable.Map[String,List[String]]
5187 ===> phantm.types.ObjectIdUse.productElement(x$1: Int): Any
4962 ===> phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment
77 ===> phantm.InlineNone.readResolve(): Object
436 ===> phantm.ast.STToAST.canEqual(x$1: Any): Boolean
2759 ===> phantm.ast.Trees.PHPString.equals(x$1: Any): Boolean
4729 ===> phantm.phases.CollectSymbols.copy(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols
3825 ===> phantm.cfg.Trees.ClassConstant.copy$default$2: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
1736 ===> phantm.ast.Trees.ObjectProperty.toString(): String
2034 ===> phantm.ast.Trees.BooleanAnd.lhs: phantm.ast.Trees.Expression
5388 ===> phantm.types.TNumeric.productArity: Int
440 ===> phantm.ast.STToAST.<init>(): phantm.ast.STToAST.type
1432 ===> phantm.ast.Trees.For.then: phantm.ast.Trees.Statement
501 ===> phantm.ast.Trees.MethodDecl.productArity: Int
5397 ===> phantm.types.TInt.productPrefix: String
5227 ===> phantm.types.ObjectId.typ: phantm.types.ObjectIdType
4249 ===> phantm.dataflow.StronglyConnectedComponents.Node.toString(): String
5468 ===> phantm.types.TTrue.hashCode(): Int
3980 ===> phantm.cfg.Trees.DIV.productPrefix: String
1939 ===> phantm.ast.Trees.Concat.hashCode(): Int
1830 ===> phantm.ast.Trees.Assign.<init>(): phantm.ast.Trees.Assign.type
5636 ===> phantm.util.ConstantsResolver.unapply(x$0: phantm.util.ConstantsResolver): Option[(phantm.ast.Trees.Program, Boolean, phantm.phases.PhasesContext)]
4562 ===> phantm.phases.PhaseException.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
1627 ===> phantm.ast.Trees.Foreach.toString(): String
1687 ===> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
3937 ===> phantm.cfg.Trees.Clone.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
979 ===> phantm.ast.Trees.CastUnset.canEqual(x$1: Any): Boolean
618 ===> phantm.ast.Trees.THObject.canEqual(x$1: Any): Boolean
397 ===> phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
3123 ===> phantm.cfg.Trees.Error.<init>(): phantm.cfg.Trees.Error
1030 ===> phantm.ast.Trees.CallArg.hashCode(): Int
4513 ===> phantm.phases.MethodGraphPhase.description: String
4325 ===> phantm.helpers.Main.handle_options(opts: List[String]): Unit
5605 ===> phantm.util.API.Reader.load: AnyVal
1659 ===> phantm.ast.Trees.SimpleVariable.canEqual(x$1: Any): Boolean
3489 ===> phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
2280 ===> phantm.ast.Trees.SmallerEqual.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.SmallerEqual
4392 ===> phantm.phases.ASTIntegrityChecks.hashCode(): Int
1190 ===> phantm.ast.Trees.Import.readResolve(): Object
5256 ===> phantm.types.ObjectStore.copy$default$1: Map[phantm.types.ObjectId,phantm.types.TRealObject] @scala.annotation.unchecked.uncheckedVariance
5135 ===> phantm.types.TAnyClass.productArity: Int
5774 ===> phantm.util.Reporter.Error.tags_$eq(x$1: Set[phantm.util.ErrorTag]): Unit
969 ===> phantm.ast.Trees.CastObject.productIterator: Iterator[Any]
928 ===> phantm.ast.Trees.CastInt.readResolve(): Object
1720 ===> phantm.ast.Trees.NextArrayEntry.readResolve(): Object
4188 ===> phantm.cfg.Trees.POSTINC.productPrefix: String
1189 ===> phantm.ast.Trees.Import.unapply(x$0: phantm.ast.Trees.Import): Option[(phantm.ast.Trees.NSIdentifier, String)]
2923 ===> phantm.cfg.LabeledDirectedGraph.E: Set[LabeledDirectedGraph.this.Edge]
2622 ===> phantm.ast.Trees.FunctionCall.toString(): String
3487 ===> phantm.cfg.Trees.ArrayEntry.arr: phantm.cfg.Trees.SimpleValue
1240 ===> phantm.ast.Trees.InterfaceDecl.<init>(): phantm.ast.Trees.InterfaceDecl.type
3963 ===> phantm.cfg.Trees.MINUS.productArity: Int
2481 ===> phantm.ast.Trees.Isset.<init>(vs: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Isset
1253 ===> phantm.ast.Trees.Try.productElement(x$1: Int): Any
5657 ===> phantm.util.DumpCollector.productArity: Int
3249 ===> phantm.cfg.Trees.IsResource.<init>(): phantm.cfg.Trees.IsResource.type
2284 ===> phantm.ast.Trees.SmallerEqual.productArity: Int
4493 ===> phantm.phases.CallGraphGeneration.productIterator: Iterator[Any]
586 ===> phantm.ast.Trees.CFAbstract.productIterator: Iterator[Any]
5182 ===> phantm.types.ObjectIdType.<init>(): phantm.types.ObjectIdType
3492 ===> phantm.cfg.Trees.ArrayEntry.copy$default$2: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
5051 ===> phantm.types.TypeTransferFunction.$anonfun.applyOrElse[A1 <: (phantm.types.ArrayKey, phantm.types.Type), B1 >: (phantm.types.ArrayKey, phantm.types.Type) with phantm.types.IntKey](x$1: A1,default: A1 => B1): B1
900 ===> phantm.ast.Trees.DynamicMethodRef.unapply(x$0: phantm.ast.Trees.DynamicMethodRef): Option[phantm.ast.Trees.Expression]
4821 ===> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
3115 ===> phantm.cfg.Trees.AssignBinary.canEqual(x$1: Any): Boolean
361 ===> phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
2231 ===> phantm.ast.Trees.Equal.hashCode(): Int
3790 ===> phantm.cfg.Trees.ArrayCurIsValid.copy(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurIsValid
4813 ===> phantm.symbols.GlobalSymbols.lookupIface(n: String): Option[phantm.symbols.IfaceSymbol]
1437 ===> phantm.ast.Trees.For.copy$default$3: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
228 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.copy(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyIntEntry
1409 ===> phantm.ast.Trees.While.readResolve(): Object
4215 ===> phantm.cfg.Trees.SILENCE.productPrefix: String
1263 ===> phantm.ast.Trees.Try.readResolve(): Object
5683 ===> phantm.util.GlobalAnalysisResults.reachableFromMain: Map[phantm.symbols.FunctionSymbol,Set[phantm.symbols.FunctionSymbol]]
4855 ===> phantm.symbols.ClassConstantSymbol.cs: phantm.symbols.ClassSymbol
3514 ===> phantm.cfg.Trees.NextArrayEntry.hashCode(): Int
4681 ===> phantm.phases.SymbolsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
2386 ===> phantm.ast.Trees.Exit.apply(value: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.Exit
5211 ===> phantm.types.ObjectIdDump.toString(): String
1963 ===> phantm.ast.Trees.Mod.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mod
5426 ===> phantm.types.TFloat.productArity: Int
1612 ===> phantm.ast.Trees.Foreach.body: phantm.ast.Trees.Statement
473 ===> phantm.ast.Trees.ArgumentDecl.copy$default$3: Option[phantm.ast.Trees.Expression] @scala.annotation.unchecked.uncheckedVariance
5569 ===> phantm.types.TUnion.<init>(): phantm.types.TUnion.type
881 ===> phantm.ast.Trees.StaticFunctionRef.apply(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
27 ===> phantm.Settings.printAfter: Set[String]
1237 ===> phantm.ast.Trees.InterfaceDecl.hashCode(): Int
1631 ===> phantm.ast.Trees.Foreach.apply(what: phantm.ast.Trees.Expression,as: phantm.ast.Trees.Variable,asbyref: Boolean,key: Option[phantm.ast.Trees.Variable],keybyref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Foreach
1116 ===> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
2270 ===> phantm.ast.Trees.Smaller.toString(): String
2402 ===> phantm.ast.Trees.Array.toString(): String
4431 ===> phantm.phases.CFGGenerator.productPrefix: String
70 ===> phantm.InlineNone.productPrefix: String
1922 ===> phantm.ast.Trees.Mult.equals(x$1: Any): Boolean
457 ===> phantm.ast.Trees.Program.hashCode(): Int
1363 ===> phantm.ast.Trees.Block.toString(): String
5717 ===> phantm.util.IncludeResolver.productIterator: Iterator[Any]
2161 ===> phantm.ast.Trees.ShiftLeft.equals(x$1: Any): Boolean
2460 ===> phantm.ast.Trees.Closure.body: phantm.ast.Trees.Statement
3404 ===> phantm.cfg.Trees.ClassRefFixed.<init>(): phantm.cfg.Trees.ClassRefFixed.type
1122 ===> phantm.ast.Trees.FunctionDecl.copy$default$4: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
2879 ===> phantm.ast.Trees.MCNamespace.equals(x$1: Any): Boolean
102 ===> phantm.InlineManual.hashCode(): Int
4747 ===> phantm.phases.TypeAnalyzingPhase.description: String
2866 ===> phantm.ast.Trees.MCMethod.toString(): String
5666 ===> phantm.util.DumpCollector.apply(path: String,ctx: phantm.phases.PhasesContext): phantm.util.DumpCollector
5571 ===> phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
2664 ===> phantm.ast.Trees.StaticMethodCall.toString(): String
1880 ===> phantm.ast.Trees.Minus.productIterator: Iterator[Any]
4355 ===> phantm.phases.ASTChecksPhase.<init>(): phantm.phases.ASTChecksPhase.type
1433 ===> phantm.ast.Trees.For.<init>(init: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression,step: phantm.ast.Trees.Statement,then: phantm.ast.Trees.Statement): phantm.ast.Trees.For
311 ===> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
5067 ===> phantm.types.TypeTransferFunction.typeFromUnOP(op: phantm.cfg.Trees.UnaryOperator,v1: phantm.cfg.Trees.SimpleValue): phantm.types.Type
891 ===> phantm.ast.Trees.DynamicMethodRef.productElement(x$1: Int): Any
3651 ===> phantm.cfg.Trees.PHPFalse.productArity: Int
4615 ===> phantm.phases.PhasesContext.productArity: Int
1989 ===> phantm.ast.Trees.PostInc.productElement(x$1: Int): Any
4797 ===> phantm.symbols.Scope.$init$(): Unit
3510 ===> phantm.cfg.Trees.NextArrayEntry.productArity: Int
2447 ===> phantm.ast.Trees.Eval.productIterator: Iterator[Any]
2681 ===> phantm.ast.Trees.VoidExpr.unapply(x$0: phantm.ast.Trees.VoidExpr): Boolean
5137 ===> phantm.types.TAnyClass.productIterator: Iterator[Any]
4224 ===> phantm.dataflow.AnalysisAlgorithm.facts: Map[AnalysisAlgorithm.this.Vertex,E]
161 ===> phantm.annotations.FunctionTypeAnnotation.$init$(): Unit
4118 ===> phantm.cfg.Trees.GT.productIterator: Iterator[Any]
2101 ===> phantm.ast.Trees.BitwiseAnd.canEqual(x$1: Any): Boolean
4837 ===> phantm.symbols.MemberVisibility.<init>(): phantm.symbols.MemberVisibility
3308 ===> phantm.cfg.Trees.Print.unapply(x$0: phantm.cfg.Trees.Print): Option[phantm.cfg.Trees.SimpleValue]
2371 ===> phantm.ast.Trees.Silence.readResolve(): Object
5985 ===> phantm.util.UNull.toString(): String
387 ===> phantm.ast.STToAST.method_or_not(n: phantm.parser.ParseNode): Option[List[phantm.ast.Trees.CallArg]]
4289 ===> phantm.helpers.CFGGraphs.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.helpers.CFGGraphs
5833 ===> phantm.util.ErrorException.<init>(en: Int,nn: Int,etn: Int,ntn: Int): phantm.util.ErrorException
1217 ===> phantm.ast.Trees.ClassDecl.<init>(): phantm.ast.Trees.ClassDecl.type
1309 ===> phantm.ast.Trees.Goto.productIterator: Iterator[Any]
1906 ===> phantm.ast.Trees.Div.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Div
3065 ===> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
5947 ===> phantm.util.UObjRef.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
3381 ===> phantm.cfg.Trees.ClassRefDynamic.productArity: Int
3659 ===> phantm.cfg.Trees.PHPFalse.apply(): phantm.cfg.Trees.PHPFalse
1258 ===> phantm.ast.Trees.Try.equals(x$1: Any): Boolean
2970 ===> phantm.cfg.EdgeImp.toString(): String
5963 ===> phantm.util.URealRef.copy(i: Int): phantm.util.URealRef
3692 ===> phantm.cfg.Trees.PHPEmptyArray.productPrefix: String
1849 ===> phantm.ast.Trees.Clone.apply(obj: phantm.ast.Trees.Expression): phantm.ast.Trees.Clone
2176 ===> phantm.ast.Trees.ShiftRight.productIterator: Iterator[Any]
4151 ===> phantm.cfg.Trees.NOTIDENTICAL.productPrefix: String
6 ===> phantm.Main.displayVersion: Boolean
3359 ===> phantm.cfg.Trees.FuncRef.copy(id: phantm.ast.Trees.NSIdentifier): phantm.cfg.Trees.FuncRef
2575 ===> phantm.ast.Trees.ClassConstant.productPrefix: String
3947 ===> phantm.cfg.Trees.Clone.apply(obj: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Clone
12 ===> phantm.Main.version: Unit
582 ===> phantm.ast.Trees.CFAbstract.<init>(): phantm.ast.Trees.CFAbstract.type
4720 ===> phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit
1317 ===> phantm.ast.Trees.Goto.unapply(x$0: phantm.ast.Trees.Goto): Option[phantm.ast.Trees.Label]
3636 ===> phantm.cfg.Trees.PHPAny.productPrefix: String
2265 ===> phantm.ast.Trees.Smaller.productArity: Int
3782 ===> phantm.cfg.Trees.ArrayCurKey.equals(x$1: Any): Boolean
1364 ===> phantm.ast.Trees.Block.equals(x$1: Any): Boolean
1286 ===> phantm.ast.Trees.Throw.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Throw
1869 ===> phantm.ast.Trees.Plus.unapply(x$0: phantm.ast.Trees.Plus): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
5655 ===> phantm.util.DumpCollector.copy$default$2: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
2305 ===> phantm.ast.Trees.InstanceOf.productIterator: Iterator[Any]
278 ===> phantm.annotations.SourceAnnotations.Parser.isAnnotated(comment: String): Boolean
1696 ===> phantm.ast.Trees.ArrayEntry.hashCode(): Int
4567 ===> phantm.phases.PhaseException.canEqual(x$1: Any): Boolean
3657 ===> phantm.cfg.Trees.PHPFalse.<init>(): phantm.cfg.Trees.PHPFalse.type
1959 ===> phantm.ast.Trees.Mod.toString(): String
4705 ===> phantm.phases.CollectSymbols.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols
1608 ===> phantm.ast.Trees.Foreach.as: phantm.ast.Trees.Variable
4104 ===> phantm.cfg.Trees.GEQ.<init>(): phantm.cfg.Trees.GEQ.type
2442 ===> phantm.ast.Trees.Eval.copy(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Eval
2682 ===> phantm.ast.Trees.VoidExpr.readResolve(): Object
125 ===> phantm.Settings.apply$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
2230 ===> phantm.ast.Trees.Equal.canEqual(x$1: Any): Boolean
334 ===> phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
2247 ===> phantm.ast.Trees.Identical.productElement(x$1: Int): Any
5143 ===> phantm.types.TClass.toString(): String
4153 ===> phantm.cfg.Trees.NOTIDENTICAL.productElement(x$1: Int): Any
5674 ===> phantm.util.GlobalAnalysisResults.<init>(): phantm.util.GlobalAnalysisResults
3827 ===> phantm.cfg.Trees.ClassConstant.productArity: Int
4411 ===> phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean
1921 ===> phantm.ast.Trees.Mult.toString(): String
3001 ===> phantm.cfg.LabeledDirectedGraphImp.Group.<init>(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group
5991 ===> phantm.util.UFalse.productIterator: Iterator[Any]
1225 ===> phantm.ast.Trees.InterfaceDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
190 ===> phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray]
2571 ===> phantm.ast.Trees.ClassConstant.<init>(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant
3171 ===> phantm.cfg.Trees.Empty.productElement(x$1: Int): Any
2263 ===> phantm.ast.Trees.Smaller.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2598 ===> phantm.ast.Trees.New.canEqual(x$1: Any): Boolean
2583 ===> phantm.ast.Trees.ClassConstant.<init>(): phantm.ast.Trees.ClassConstant.type
1093 ===> phantm.ast.Trees.OAMethod.name: phantm.ast.Trees.ObjectAccess
3338 ===> phantm.cfg.Trees.Identifier.symbol: phantm.symbols.VariableSymbol
474 ===> phantm.ast.Trees.ArgumentDecl.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
5894 ===> phantm.util.UString.<init>(str: String): phantm.util.UString
373 ===> phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)]
3821 ===> phantm.cfg.Trees.ClassConstant.name: phantm.ast.Trees.Identifier
3551 ===> phantm.cfg.Trees.VariableClassProperty.equals(x$1: Any): Boolean
718 ===> phantm.ast.Trees.NSResolved.productElement(x$1: Int): Any
1561 ===> phantm.ast.Trees.Echo.productArity: Int
5718 ===> phantm.util.IncludeResolver.canEqual(x$1: Any): Boolean
635 ===> phantm.ast.Trees.MFAbstract.toString(): String
2588 ===> phantm.ast.Trees.New.cl: phantm.ast.Trees.ClassRef
587 ===> phantm.ast.Trees.CFAbstract.canEqual(x$1: Any): Boolean
3873 ===> phantm.cfg.Trees.FunctionCall.apply(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
2011 ===> phantm.ast.Trees.PreDec.equals(x$1: Any): Boolean
4569 ===> phantm.phases.PhaseException.equals(x$1: Any): Boolean
680 ===> phantm.ast.Trees.MFStatic.toString(): String
2524 ===> phantm.ast.Trees.Include.canEqual(x$1: Any): Boolean
3668 ===> phantm.cfg.Trees.PHPNull.canEqual(x$1: Any): Boolean
4145 ===> phantm.cfg.Trees.NOTEQUALS.productIterator: Iterator[Any]
3962 ===> phantm.cfg.Trees.MINUS.productPrefix: String
4235 ===> phantm.dataflow.StronglyConnectedComponents.<init>(cfg: phantm.cfg.LabeledDirectedGraphImp[S]): phantm.dataflow.StronglyConnectedComponents[S]
5185 ===> phantm.types.ObjectIdUse.productPrefix: String
4508 ===> phantm.phases.IncludesConstantsResolutionPhase.name: String
1757 ===> phantm.ast.Trees.DynamicObjectProperty.unapply(x$0: phantm.ast.Trees.DynamicObjectProperty): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
2904 ===> phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef
5356 ===> phantm.types.TArray.globalInt: phantm.types.Type
4920 ===> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
5866 ===> phantm.util.UArray.<init>(): phantm.util.UArray.type
172 ===> phantm.annotations.CommentAnnotation.comment: Option[String]
5087 ===> phantm.types.TypeTransferFunction.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
288 ===> phantm.ast.ASTTransform.trScalar(s: phantm.ast.Trees.Scalar): phantm.ast.Trees.Scalar
5020 ===> phantm.types.TypeLattice.productPrefix: String
171 ===> phantm.annotations.CommentAnnotation.$init$(): Unit
4626 ===> phantm.phases.PhasesContext.$lessinit$greater$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
4466 ===> phantm.phases.CallGraphGeneration.node: phantm.ast.Trees.Tree
5057 ===> phantm.types.TypeTransferFunction.lookupConstructor(cs: phantm.symbols.ClassSymbol): Option[phantm.symbols.MethodSymbol]
685 ===> phantm.ast.Trees.NSNone.value: String
1421 ===> phantm.ast.Trees.DoWhile.hashCode(): Int
2338 ===> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
3054 ===> phantm.cfg.Trees.Unset.productIterator: Iterator[Any]
5643 ===> phantm.util.DumpCollector.lineNr_$eq(x$1: Int): Unit
229 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.copy$default$1: phantm.types.Type @scala.annotation.unchecked.uncheckedVariance
1092 ===> phantm.ast.Trees.OAArray.readResolve(): Object
1945 ===> phantm.ast.Trees.Concat.unapply(x$0: phantm.ast.Trees.Concat): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
3745 ===> phantm.cfg.Trees.ArrayNext.productArity: Int
1404 ===> phantm.ast.Trees.While.equals(x$1: Any): Boolean
4293 ===> phantm.helpers.CFGGraphs.n_$eq(x$1: Int): Unit
3679 ===> phantm.cfg.Trees.PHPThis.productArity: Int
2046 ===> phantm.ast.Trees.BooleanAnd.toString(): String
770 ===> phantm.ast.Trees.VarClassRef.productPrefix: String
2432 ===> phantm.ast.Trees.Print.hashCode(): Int
4870 ===> phantm.symbols.LookupResult.copy$default$3[T]: Boolean @scala.annotation.unchecked.uncheckedVariance
4186 ===> phantm.cfg.Trees.POSTINC.<init>(): phantm.cfg.Trees.POSTINC.type
1833 ===> phantm.ast.Trees.Assign.unapply(x$0: phantm.ast.Trees.Assign): Option[(phantm.ast.Trees.Variable, phantm.ast.Trees.Expression, Boolean)]
314 ===> phantm.ast.STToAST.parser: phantm.parser.Parser
4377 ===> phantm.phases.CheckContext.readResolve(): Object
5186 ===> phantm.types.ObjectIdUse.productArity: Int
5775 ===> phantm.util.Reporter.Error.<init>(message: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Reporter.this.Error
1844 ===> phantm.ast.Trees.Clone.hashCode(): Int
352 ===> phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
3125 ===> phantm.cfg.Trees.Error.copy(): phantm.cfg.Trees.Error
2804 ===> phantm.ast.Trees.MCLine.equals(x$1: Any): Boolean
2809 ===> phantm.ast.Trees.MCLine.readResolve(): Object
5956 ===> phantm.util.UObjRef.<init>(): phantm.util.UObjRef.type
2244 ===> phantm.ast.Trees.Identical.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4679 ===> phantm.phases.SymbolsCollectionPhase.name: String
1888 ===> phantm.ast.Trees.Minus.unapply(x$0: phantm.ast.Trees.Minus): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
3781 ===> phantm.cfg.Trees.ArrayCurKey.hashCode(): Int
2621 ===> phantm.ast.Trees.FunctionCall.<init>(): phantm.ast.Trees.FunctionCall.type
1114 ===> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
5011 ===> phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
2603 ===> phantm.ast.Trees.New.toString(): String
2457 ===> phantm.ast.Trees.Closure.args: List[phantm.ast.Trees.ArgumentDecl]
1403 ===> phantm.ast.Trees.While.toString(): String
4601 ===> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
1928 ===> phantm.ast.Trees.Concat.lhs: phantm.ast.Trees.Expression
4041 ===> phantm.cfg.Trees.BITWISEAND.<init>(): phantm.cfg.Trees.BITWISEAND.type
280 ===> phantm.annotations.SourceAnnotations.Parser.isPure(comment: String): Boolean
2493 ===> phantm.ast.Trees.Isset.toString(): String
3241 ===> phantm.cfg.Trees.IsScalar.productPrefix: String
1702 ===> phantm.ast.Trees.ArrayEntry.unapply(x$0: phantm.ast.Trees.ArrayEntry): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
372 ===> phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
165 ===> phantm.annotations.FunctionTypeAnnotation.annotateFromFT(from: phantm.annotations.FunctionTypeAnnotation): FunctionTypeAnnotation.this.type
3428 ===> phantm.cfg.Trees.ClassRefUnknown.productArity: Int
4158 ===> phantm.cfg.Trees.UnaryOperator.<init>(): phantm.cfg.Trees.UnaryOperator
5950 ===> phantm.util.UObjRef.productElement(x$1: Int): Any
5776 ===> phantm.util.Reporter.Error.equals(o: Any): Boolean
2379 ===> phantm.ast.Trees.Exit.productIterator: Iterator[Any]
642 ===> phantm.ast.Trees.MFPublic.canEqual(x$1: Any): Boolean
76 ===> phantm.InlineNone.toString(): String
1856 ===> phantm.ast.Trees.Plus.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3147 ===> phantm.cfg.Trees.Assume.productArity: Int
3546 ===> phantm.cfg.Trees.VariableClassProperty.productArity: Int
478 ===> phantm.ast.Trees.ArgumentDecl.productIterator: Iterator[Any]
1629 ===> phantm.ast.Trees.Foreach.<init>(): phantm.ast.Trees.Foreach.type
2256 ===> phantm.ast.Trees.Identical.unapply(x$0: phantm.ast.Trees.Identical): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
3321 ===> phantm.cfg.Trees.Return.<init>(): phantm.cfg.Trees.Return.type
4452 ===> phantm.phases.CGContext.copy$default$1: Option[phantm.symbols.FunctionSymbol] @scala.annotation.unchecked.uncheckedVariance
2301 ===> phantm.ast.Trees.InstanceOf.copy$default$2: phantm.ast.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
219 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.toString(): String
451 ===> phantm.ast.Trees.Program.copy$default$1: List[phantm.ast.Trees.Statement] @scala.annotation.unchecked.uncheckedVariance
4966 ===> phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment]
1158 ===> phantm.ast.Trees.Namespaced.copy$default$2: List[phantm.ast.Trees.Statement] @scala.annotation.unchecked.uncheckedVariance
971 ===> phantm.ast.Trees.CastObject.hashCode(): Int
4123 ===> phantm.cfg.Trees.EQUALS.toString(): String
2948 ===> phantm.cfg.VertexImp.toString(): String
4992 ===> phantm.types.TypeFlowAnalyzer.apply$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
3423 ===> phantm.cfg.Trees.ClassRefCalledClass.readResolve(): Object
444 ===> phantm.ast.STToAST.readResolve(): Object
709 ===> phantm.ast.Trees.NSCurrent.productIterator: Iterator[Any]
1318 ===> phantm.ast.Trees.Goto.readResolve(): Object
1570 ===> phantm.ast.Trees.Echo.apply(exprs: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Echo
1373 ===> phantm.ast.Trees.If.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If
2105 ===> phantm.ast.Trees.BitwiseAnd.<init>(): phantm.ast.Trees.BitwiseAnd.type
3855 ===> phantm.cfg.Trees.Ternary.apply(cond: phantm.cfg.Trees.SimpleValue,then: phantm.cfg.Trees.SimpleValue,elze: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Ternary
670 ===> phantm.ast.Trees.MFFinal.hashCode(): Int
3628 ===> phantm.cfg.Trees.PHPTrue.equals(x$1: Any): Boolean
1192 ===> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
3391 ===> phantm.cfg.Trees.ClassRefDynamic.readResolve(): Object
1624 ===> phantm.ast.Trees.Foreach.productIterator: Iterator[Any]
3278 ===> phantm.cfg.Trees.AssumeNotProperty.<init>(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeNotProperty
4694 ===> phantm.phases.SymContext.canEqual(x$1: Any): Boolean
1235 ===> phantm.ast.Trees.InterfaceDecl.productIterator: Iterator[Any]
2189 ===> phantm.ast.Trees.BooleanNot.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3531 ===> phantm.cfg.Trees.ObjectProperty.canEqual(x$1: Any): Boolean
2671 ===> phantm.ast.Trees.VoidExpr.productArity: Int
5903 ===> phantm.util.UString.toString(): String
4242 ===> phantm.dataflow.StronglyConnectedComponents.Node.lowlink: Int
669 ===> phantm.ast.Trees.MFFinal.canEqual(x$1: Any): Boolean
4939 ===> phantm.types.TypeEnvironment.$anonfun.applyOrElse[A1 <: (phantm.cfg.Trees.SimpleVariable, phantm.types.Type), B1 >: (phantm.types.ArrayKey, phantm.types.Type)](x$1: A1,default: A1 => B1): B1
4484 ===> phantm.phases.CallGraphGeneration.scopeFromSym(s: phantm.symbols.Symbol): Option[phantm.symbols.FunctionSymbol]
3013 ===> phantm.cfg.LabeledDirectedGraphImp.Group.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
5002 ===> phantm.types.TypeLattice.<init>(): phantm.types.TypeLattice.type
114 ===> phantm.Settings.apply$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
5745 ===> phantm.util.Positional.col: Int
606 ===> phantm.ast.Trees.THArray.canEqual(x$1: Any): Boolean
1599 ===> phantm.ast.Trees.Unset.hashCode(): Int
564 ===> phantm.ast.Trees.ConstantDecl.hashCode(): Int
5669 ===> phantm.util.Evaluator.<init>(): phantm.util.Evaluator.type
3872 ===> phantm.cfg.Trees.FunctionCall.toString(): String
2891 ===> phantm.cfg.ASTToCFG.FreshVariable.<init>(): FreshVariable.type
2123 ===> phantm.ast.Trees.BitwiseOr.equals(x$1: Any): Boolean
5447 ===> phantm.types.TFloatLit.toString(): String
3808 ===> phantm.cfg.Trees.Constant.productPrefix: String
1721 ===> phantm.ast.Trees.ObjectProperty.obj: phantm.ast.Trees.Expression
5462 ===> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
2812 ===> phantm.ast.Trees.MCDir.productPrefix: String
4719 ===> phantm.phases.CollectSymbols.firstIfacePass: Unit
4417 ===> phantm.phases.CFGGenerationPhase.<init>(): phantm.phases.CFGGenerationPhase.type
3162 ===> phantm.cfg.Trees.Isset.productElement(x$1: Int): Any
5425 ===> phantm.types.TFloat.productPrefix: String
890 ===> phantm.ast.Trees.DynamicMethodRef.productArity: Int
2423 ===> phantm.ast.Trees.Print.value: phantm.ast.Trees.Expression
519 ===> phantm.ast.Trees.PropertyDecl.copy$default$2: List[phantm.ast.Trees.MemberFlag] @scala.annotation.unchecked.uncheckedVariance
2578 ===> phantm.ast.Trees.ClassConstant.productIterator: Iterator[Any]
3773 ===> phantm.cfg.Trees.ArrayCurKey.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurKey
3154 ===> phantm.cfg.Trees.Assume.toString(): String
4981 ===> phantm.types.TypeFlowAnalyzer.hashCode(): Int
4652 ===> phantm.phases.PureStatementsChecks.ctx: phantm.phases.PhasesContext
3617 ===> phantm.cfg.Trees.PHPString.apply(value: String): phantm.cfg.Trees.PHPString
254 ===> phantm.annotations.SourceAnnotations.Parser.Entry.hashCode(): Int
2018 ===> phantm.ast.Trees.PostDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostDec
5125 ===> phantm.types.Type.leq(t: phantm.types.Type): Boolean
5564 ===> phantm.types.TUninitialized.productIterator: Iterator[Any]
2799 ===> phantm.ast.Trees.MCLine.productElement(x$1: Int): Any
1232 ===> phantm.ast.Trees.InterfaceDecl.productPrefix: String
3683 ===> phantm.cfg.Trees.PHPThis.hashCode(): Int
1415 ===> phantm.ast.Trees.DoWhile.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
710 ===> phantm.ast.Trees.NSCurrent.canEqual(x$1: Any): Boolean
5678 ===> phantm.util.GlobalAnalysisResults.inlineHeaps_$eq(x$1: Map[phantm.symbols.FunctionSymbol,phantm.types.ObjectStore]): Unit
4686 ===> phantm.phases.SymContext.copy(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
4437 ===> phantm.phases.CFGGenerator.toString(): String
5230 ===> phantm.types.ObjectId.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
4107 ===> phantm.cfg.Trees.GEQ.productArity: Int
4613 ===> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
2308 ===> phantm.ast.Trees.InstanceOf.toString(): String
2516 ===> phantm.ast.Trees.Include.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Include
2771 ===> phantm.ast.Trees.PHPNull.canEqual(x$1: Any): Boolean
4529 ===> phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
5848 ===> phantm.util.ErrorException.apply(en: Int,nn: Int,etn: Int,ntn: Int): phantm.util.ErrorException
3222 ===> phantm.cfg.Trees.IsString.<init>(): phantm.cfg.Trees.IsString.type
1787 ===> phantm.ast.Trees.ListVar.hashCode(): Int
3439 ===> phantm.cfg.Trees.TempID.value: String
1321 ===> phantm.ast.Trees.LabelDecl.copy(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.LabelDecl
5754 ===> phantm.util.Positional.getPos: String
1944 ===> phantm.ast.Trees.Concat.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
2560 ===> phantm.ast.Trees.Constant.canEqual(x$1: Any): Boolean
2391 ===> phantm.ast.Trees.Array.copy(values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]): phantm.ast.Trees.Array
4045 ===> phantm.cfg.Trees.BITWISEAND.productElement(x$1: Int): Any
540 ===> phantm.ast.Trees.ClassConstantDecl.productPrefix: String
3422 ===> phantm.cfg.Trees.ClassRefCalledClass.unapply(x$0: phantm.cfg.Trees.ClassRefCalledClass): Boolean
4453 ===> phantm.phases.CGContext.productPrefix: String
962 ===> phantm.ast.Trees.CastBool.hashCode(): Int
1003 ===> phantm.ast.Trees.Label.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.Label
3610 ===> phantm.cfg.Trees.PHPString.productElement(x$1: Int): Any
645 ===> phantm.ast.Trees.MFPublic.readResolve(): Object
1859 ===> phantm.ast.Trees.Plus.productArity: Int
4420 ===> phantm.phases.CFGGenerationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
4854 ===> phantm.symbols.PropertySymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.PropertySymbol
3517 ===> phantm.cfg.Trees.NextArrayEntry.toString(): String
3158 ===> phantm.cfg.Trees.Property.<init>(): phantm.cfg.Trees.Property
5926 ===> phantm.util.UInt.readResolve(): Object
3757 ===> phantm.cfg.Trees.ArrayCurElement.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurElement
4535 ===> phantm.phases.NSResolver.importRules: scala.collection.immutable.Map[String,List[String]]
3388 ===> phantm.cfg.Trees.ClassRefDynamic.toString(): String
3345 ===> phantm.cfg.Trees.Identifier.productPrefix: String
3062 ===> phantm.cfg.Trees.Unset.readResolve(): Object
5788 ===> phantm.util.Reporter.Error.toString(): String
5166 ===> phantm.types.TFunction.toString(): String
1388 ===> phantm.ast.Trees.If.apply(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If
3966 ===> phantm.cfg.Trees.MINUS.canEqual(x$1: Any): Boolean
5008 ===> phantm.types.TypeLattice.bottom: phantm.types.TBottom.type
1105 ===> phantm.ast.Trees.OAMethod.toString(): String
795 ===> phantm.ast.Trees.DynamicClassRef.<init>(): phantm.ast.Trees.DynamicClassRef.type
5300 ===> phantm.types.TRealObject.lookupField(index: phantm.cfg.Trees.SimpleValue): phantm.types.Type
3118 ===> phantm.cfg.Trees.AssignBinary.<init>(): phantm.cfg.Trees.AssignBinary.type
4311 ===> phantm.helpers.CFGGraphs.readResolve(): Object
113 ===> phantm.Settings.apply$default$2: String @scala.annotation.unchecked.uncheckedVariance
5465 ===> phantm.types.TTrue.productElement(x$1: Int): Any
4066 ===> phantm.cfg.Trees.BITWISEXOR.hashCode(): Int
1718 ===> phantm.ast.Trees.NextArrayEntry.apply(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry
1955 ===> phantm.ast.Trees.Mod.productElement(x$1: Int): Any
3720 ===> phantm.cfg.Trees.SubTypeOf.unapply(x$0: phantm.cfg.Trees.SubTypeOf): Option[(phantm.cfg.Trees.SimpleValue, phantm.cfg.Trees.ClassRef)]
1527 ===> phantm.ast.Trees.Global.productArity: Int
434 ===> phantm.ast.STToAST.productElement(x$1: Int): Any
2589 ===> phantm.ast.Trees.New.args: List[phantm.ast.Trees.CallArg]
914 ===> phantm.ast.Trees.StaticMethodRef.<init>(): phantm.ast.Trees.StaticMethodRef.type
3182 ===> phantm.cfg.Trees.IsNull.canEqual(x$1: Any): Boolean
2059 ===> phantm.ast.Trees.BooleanOr.productPrefix: String
2978 ===> phantm.cfg.LabeledDirectedGraphImp.<init>(): phantm.cfg.LabeledDirectedGraphImp[LabelType]
1885 ===> phantm.ast.Trees.Minus.<init>(): phantm.ast.Trees.Minus.type
1015 ===> phantm.ast.Trees.Label.toString(): String
173 ===> phantm.annotations.CommentAnnotation.comment_$eq(x$1: Option[String]): Unit
4297 ===> phantm.helpers.CFGGraphs.copy$default$1: phantm.ast.Trees.Tree @scala.annotation.unchecked.uncheckedVariance
2768 ===> phantm.ast.Trees.PHPNull.productArity: Int
2070 ===> phantm.ast.Trees.BooleanOr.unapply(x$0: phantm.ast.Trees.BooleanOr): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
3701 ===> phantm.cfg.Trees.PHPEmptyArray.apply(): phantm.cfg.Trees.PHPEmptyArray
64 ===> phantm.Settings.canEqual(x$1: Any): Boolean
621 ===> phantm.ast.Trees.THObject.equals(x$1: Any): Boolean
732 ===> phantm.ast.Trees.Identifier.canEqual(x$1: Any): Boolean
3064 ===> phantm.cfg.Trees.Assign.value: phantm.cfg.Trees.SimpleValue
5254 ===> phantm.types.ObjectStore.toString(): String
19 ===> phantm.Settings.summaryOnly: Boolean
1416 ===> phantm.ast.Trees.DoWhile.productPrefix: String
2316 ===> phantm.ast.Trees.Ternary.then: Option[phantm.ast.Trees.Expression]
1514 ===> phantm.ast.Trees.Return.hashCode(): Int
4785 ===> phantm.symbols.Symbol.overwriteable_$eq(x$1: Boolean): Unit
5418 ===> phantm.types.TIntLit.<init>(): phantm.types.TIntLit.type
1181 ===> phantm.ast.Trees.Import.productIterator: Iterator[Any]
2467 ===> phantm.ast.Trees.Closure.productPrefix: String
462 ===> phantm.ast.Trees.Program.apply(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program
67 ===> phantm.Settings.equals(x$1: Any): Boolean
157 ===> phantm.annotations.TypeAnnotation.$init$(): Unit
555 ===> phantm.ast.Trees.ConstantDecl.<init>(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl
4435 ===> phantm.phases.CFGGenerator.canEqual(x$1: Any): Boolean
4814 ===> phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit
2238 ===> phantm.ast.Trees.Equal.readResolve(): Object
1957 ===> phantm.ast.Trees.Mod.canEqual(x$1: Any): Boolean
2483 ===> phantm.ast.Trees.Isset.copy$default$1: List[phantm.ast.Trees.Variable] @scala.annotation.unchecked.uncheckedVariance
2775 ===> phantm.ast.Trees.PHPNull.<init>(): phantm.ast.Trees.PHPNull.type
3392 ===> phantm.cfg.Trees.ClassRefFixed.cs: phantm.symbols.ClassSymbol
1057 ===> phantm.ast.Trees.OAExpression.exp: phantm.ast.Trees.Expression
814 ===> phantm.ast.Trees.StaticClassRef.apply(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticClassRef
684 ===> phantm.ast.Trees.NSNone.<init>(): phantm.ast.Trees.NSNone.type
584 ===> phantm.ast.Trees.CFAbstract.productArity: Int
4360 ===> phantm.phases.CheckContext.inCond: Boolean
1638 ===> phantm.ast.Trees.Void.productElement(x$1: Int): Any
5469 ===> phantm.types.TTrue.toString(): String
2717 ===> phantm.ast.Trees.PHPInteger.copy$default$1: Long @scala.annotation.unchecked.uncheckedVariance
432 ===> phantm.ast.STToAST.productPrefix: String
860 ===> phantm.ast.Trees.DynamicFunctionRef.toString(): String
4029 ===> phantm.cfg.Trees.BOOLEANOR.canEqual(x$1: Any): Boolean
1324 ===> phantm.ast.Trees.LabelDecl.productArity: Int
1298 ===> phantm.ast.Trees.Throw.toString(): String
1146 ===> phantm.ast.Trees.NamespaceStart.toString(): String
269 ===> phantm.annotations.SourceAnnotations.Parser.filterLines(lines: List[String],tag: String): List[String]
3287 ===> phantm.cfg.Trees.AssumeNotProperty.hashCode(): Int
5485 ===> phantm.types.TString.productElement(x$1: Int): Any
2607 ===> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
4209 ===> phantm.cfg.Trees.POSTDEC.productIterator: Iterator[Any]
3084 ===> phantm.cfg.Trees.AssignUnary.<init>(variable: phantm.cfg.Trees.Variable,unOp: phantm.cfg.Trees.UnaryOperator,expr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignUnary
456 ===> phantm.ast.Trees.Program.canEqual(x$1: Any): Boolean
2749 ===> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
5071 ===> phantm.types.TypeTransferFunction.assign(v: phantm.cfg.Trees.Variable,ext: phantm.types.Type): phantm.types.Type
4078 ===> phantm.cfg.Trees.SHIFTRIGHT.toString(): String
3588 ===> phantm.cfg.Trees.PHPFloat.value: Float
5297 ===> phantm.types.TRealObject.copy$default$4: phantm.types.ClassType @scala.annotation.unchecked.uncheckedVariance
5898 ===> phantm.util.UString.productArity: Int
4807 ===> phantm.symbols.GlobalSymbols.ifaces: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceSymbol]
4058 ===> phantm.cfg.Trees.BITWISEOR.readResolve(): Object
1417 ===> phantm.ast.Trees.DoWhile.productArity: Int
4333 ===> phantm.helpers.Tokenizer.<init>(): phantm.helpers.Tokenizer
721 ===> phantm.ast.Trees.NSResolved.hashCode(): Int
2441 ===> phantm.ast.Trees.Eval.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Eval
3324 ===> phantm.cfg.Trees.Return.unapply(x$0: phantm.cfg.Trees.Return): Option[phantm.cfg.Trees.SimpleValue]
1089 ===> phantm.ast.Trees.OAArray.toString(): String
5972 ===> phantm.util.URealRef.equals(x$1: Any): Boolean
5113 ===> phantm.types.TypeWideningFunction.apply(t: phantm.types.Type): phantm.types.Type
2632 ===> phantm.ast.Trees.MethodCall.copy$default$2: phantm.ast.Trees.MethodRef @scala.annotation.unchecked.uncheckedVariance
1644 ===> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void.type
3924 ===> phantm.cfg.Trees.New.productElement(x$1: Int): Any
630 ===> phantm.ast.Trees.MFAbstract.productArity: Int
5815 ===> phantm.util.Reporter.emit(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit
150 ===> phantm.Settings.$lessinit$greater$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
416 ===> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
591 ===> phantm.ast.Trees.CFFinal.<init>(): phantm.ast.Trees.CFFinal.type
5432 ===> phantm.types.TFloat.readResolve(): Object
2719 ===> phantm.ast.Trees.PHPInteger.productArity: Int
2694 ===> phantm.ast.Trees.PHPTrue.<init>(): phantm.ast.Trees.PHPTrue.type
2587 ===> phantm.ast.Trees.ClassConstant.readResolve(): Object
4609 ===> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
4019 ===> phantm.cfg.Trees.BOOLEANAND.productIterator: Iterator[Any]
389 ===> phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
3572 ===> phantm.cfg.Trees.PHPLong.value: Long
483 ===> phantm.ast.Trees.ArgumentDecl.<init>(): phantm.ast.Trees.ArgumentDecl.type
851 ===> phantm.ast.Trees.DynamicFunctionRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicFunctionRef
4259 ===> phantm.dataflow.TransferFunction.<init>(): phantm.dataflow.TransferFunction[E,S]
4449 ===> phantm.phases.CGContext.scope: Option[phantm.symbols.FunctionSymbol]
1006 ===> phantm.ast.Trees.Label.productPrefix: String
4869 ===> phantm.symbols.LookupResult.copy$default$2[T]: Option[phantm.symbols.MemberVisibility] @scala.annotation.unchecked.uncheckedVariance
1742 ===> phantm.ast.Trees.DynamicObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicObjectProperty
5038 ===> phantm.types.TypeTransferFunction.trueTypes: phantm.types.Type
2106 ===> phantm.ast.Trees.BitwiseAnd.toString(): String
5658 ===> phantm.util.DumpCollector.productElement(x$1: Int): Any
4380 ===> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
3699 ===> phantm.cfg.Trees.PHPEmptyArray.<init>(): phantm.cfg.Trees.PHPEmptyArray.type
5346 ===> phantm.types.IntKey.productIterator: Iterator[Any]
5523 ===> phantm.types.TResource.productElement(x$1: Int): Any
178 ===> phantm.annotations.AnnotationsStore.functions_$eq(x$1: scala.collection.immutable.Map[String,(List[phantm.types.TFunction], List[phantm.types.Type])]): Unit
1546 ===> phantm.ast.Trees.Static.productIterator: Iterator[Any]
4310 ===> phantm.helpers.CFGGraphs.unapply(x$0: phantm.helpers.CFGGraphs): Option[(phantm.ast.Trees.Tree, phantm.phases.PhasesContext)]
275 ===> phantm.annotations.SourceAnnotations.Parser.getReturnType: String => Option[phantm.types.Type]
5980 ===> phantm.util.UNull.productArity: Int
4344 ===> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
4922 ===> phantm.symbols.ArgumentSymbol.byref: Boolean
1424 ===> phantm.ast.Trees.DoWhile.<init>(): phantm.ast.Trees.DoWhile.type
5753 ===> phantm.util.Positional.$less(p: phantm.util.Positional): Boolean
151 ===> phantm.Settings.$lessinit$greater$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
1743 ===> phantm.ast.Trees.DynamicObjectProperty.copy(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicObjectProperty
4423 ===> phantm.phases.CFGGenerator.<init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.CFGGenerator
4361 ===> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
5840 ===> phantm.util.ErrorException.productArity: Int
1847 ===> phantm.ast.Trees.Clone.<init>(): phantm.ast.Trees.Clone.type
5777 ===> phantm.util.Reporter.Error.hashCode(): Int
4334 ===> phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
536 ===> phantm.ast.Trees.ClassConstantDecl.<init>(v: phantm.ast.Trees.Identifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ClassConstantDecl
116 ===> phantm.Settings.apply$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
1137 ===> phantm.ast.Trees.NamespaceStart.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NamespaceStart
537 ===> phantm.ast.Trees.ClassConstantDecl.copy(v: phantm.ast.Trees.Identifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ClassConstantDecl
308 ===> phantm.ast.ASTSimpleTraversal.execute: Unit
1895 ===> phantm.ast.Trees.Div.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
749 ===> phantm.ast.Trees.NSIdentifier.copy$default$2: List[String] @scala.annotation.unchecked.uncheckedVariance
3447 ===> phantm.cfg.Trees.TempID.canEqual(x$1: Any): Boolean
2991 ===> phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
729 ===> phantm.ast.Trees.Identifier.productArity: Int
4492 ===> phantm.phases.CallGraphGeneration.productElement(x$1: Int): Any
3671 ===> phantm.cfg.Trees.PHPNull.<init>(): phantm.cfg.Trees.PHPNull.type
2519 ===> phantm.ast.Trees.Include.copy$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
2706 ===> phantm.ast.Trees.PHPFalse.hashCode(): Int
3068 ===> phantm.cfg.Trees.Assign.copy$default$2: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
4637 ===> phantm.phases.PhasesContext.apply$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
1524 ===> phantm.ast.Trees.Global.copy(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Global
2322 ===> phantm.ast.Trees.Ternary.copy$default$3: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3016 ===> phantm.cfg.LabeledDirectedGraphImp.Group.productArity: Int
4201 ===> phantm.cfg.Trees.PREDEC.canEqual(x$1: Any): Boolean
4173 ===> phantm.cfg.Trees.BITSIWENOT.productIterator: Iterator[Any]
5814 ===> phantm.util.Reporter.emitQuickFix(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit
4054 ===> phantm.cfg.Trees.BITWISEOR.productElement(x$1: Int): Any
2631 ===> phantm.ast.Trees.MethodCall.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4253 ===> phantm.dataflow.StronglyConnectedComponents.SCC.<init>(vs: Set[StronglyConnectedComponents.this.Vertex],adjSCC: Set[StronglyConnectedComponents.this.SCC]): StronglyConnectedComponents.this.SCC
5318 ===> phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean
4566 ===> phantm.phases.PhaseException.productIterator: Iterator[Any]
605 ===> phantm.ast.Trees.THArray.productIterator: Iterator[Any]
5217 ===> phantm.types.ObjectIdDump.productIterator: Iterator[Any]
699 ===> phantm.ast.Trees.NSGlobal.productIterator: Iterator[Any]
1384 ===> phantm.ast.Trees.If.toString(): String
1842 ===> phantm.ast.Trees.Clone.productIterator: Iterator[Any]
1414 ===> phantm.ast.Trees.DoWhile.copy$default$1: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
583 ===> phantm.ast.Trees.CFAbstract.productPrefix: String
1007 ===> phantm.ast.Trees.Label.productArity: Int
3218 ===> phantm.cfg.Trees.IsArray.canEqual(x$1: Any): Boolean
1365 ===> phantm.ast.Trees.Block.<init>(): phantm.ast.Trees.Block.type
2412 ===> phantm.ast.Trees.Execute.productElement(x$1: Int): Any
4412 ===> phantm.phases.ASTPruner.<init>(ast: phantm.ast.Trees.Program): phantm.phases.ASTPruner
4100 ===> phantm.cfg.Trees.LEQ.productIterator: Iterator[Any]
4132 ===> phantm.cfg.Trees.IDENTICAL.toString(): String
2919 ===> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
3179 ===> phantm.cfg.Trees.IsNull.productArity: Int
154 ===> phantm.Settings.$lessinit$greater$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
1597 ===> phantm.ast.Trees.Unset.productIterator: Iterator[Any]
1988 ===> phantm.ast.Trees.PostInc.productArity: Int
3272 ===> phantm.cfg.Trees.AssumeProperty.toString(): String
1983 ===> phantm.ast.Trees.PostInc.rhs: phantm.ast.Trees.Variable
3370 ===> phantm.cfg.Trees.FuncRef.toString(): String
5852 ===> phantm.util.UValue.<init>(): phantm.util.UValue
734 ===> phantm.ast.Trees.Identifier.toString(): String
5268 ===> phantm.types.ObjectStore.readResolve(): Object
375 ===> phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement]
4978 ===> phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any
4483 ===> phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean)
1268 ===> phantm.ast.Trees.Catch.copy(cl: phantm.ast.Trees.ClassRef,v: phantm.ast.Trees.SimpleVariable,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Catch
2996 ===> phantm.cfg.LabeledDirectedGraphImp.groupStack_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
108 ===> phantm.Settings.get: phantm.Settings
5664 ===> phantm.util.DumpCollector.<init>(): phantm.util.DumpCollector.type
2068 ===> phantm.ast.Trees.BooleanOr.toString(): String
3114 ===> phantm.cfg.Trees.AssignBinary.productIterator: Iterator[Any]
5613 ===> phantm.util.API.Writer.emit(str: String): Unit
247 ===> phantm.annotations.SourceAnnotations.Parser.Entry.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3063 ===> phantm.cfg.Trees.Assign.variable: phantm.cfg.Trees.Variable
5084 ===> phantm.types.TypeTransferFunction.copy$default$1: Boolean @scala.annotation.unchecked.uncheckedVariance
3349 ===> phantm.cfg.Trees.Identifier.canEqual(x$1: Any): Boolean
4194 ===> phantm.cfg.Trees.POSTINC.readResolve(): Object
4088 ===> phantm.cfg.Trees.LT.productPrefix: String
1043 ===> phantm.ast.Trees.OAIdentifier.copy$default$1: phantm.ast.Trees.Identifier @scala.annotation.unchecked.uncheckedVariance
1430 ===> phantm.ast.Trees.For.cond: phantm.ast.Trees.Expression
4949 ===> phantm.types.TypeEnvironment.unionStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
4809 ===> phantm.symbols.GlobalSymbols.functions: scala.collection.mutable.HashMap[String,phantm.symbols.FunctionSymbol]
3429 ===> phantm.cfg.Trees.ClassRefUnknown.productElement(x$1: Int): Any
820 ===> phantm.ast.Trees.CalledClass.productArity: Int
3354 ===> phantm.cfg.Trees.Identifier.apply(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier
4320 ===> phantm.helpers.Main.helper: phantm.helpers.Helper
3867 ===> phantm.cfg.Trees.FunctionCall.productIterator: Iterator[Any]
4073 ===> phantm.cfg.Trees.SHIFTLEFT.productIterator: Iterator[Any]
1326 ===> phantm.ast.Trees.LabelDecl.productIterator: Iterator[Any]
5744 ===> phantm.util.Positional.line_$eq(x$1: Int): Unit
4031 ===> phantm.cfg.Trees.BOOLEANOR.readResolve(): Object
3061 ===> phantm.cfg.Trees.Unset.unapply(x$0: phantm.cfg.Trees.Unset): Option[phantm.cfg.Trees.Variable]
4102 ===> phantm.cfg.Trees.LEQ.hashCode(): Int
292 ===> phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl
4676 ===> phantm.phases.SymbolsChecksPhase.description: String
4666 ===> phantm.phases.PureStatementsChecks.hashCode(): Int
2424 ===> phantm.ast.Trees.Print.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Print
3227 ===> phantm.cfg.Trees.IsString.canEqual(x$1: Any): Boolean
2727 ===> phantm.ast.Trees.PHPInteger.toString(): String
3353 ===> phantm.cfg.Trees.Identifier.toString(): String
3584 ===> phantm.cfg.Trees.PHPLong.toString(): String
949 ===> phantm.ast.Trees.CastArray.productArity: Int
1954 ===> phantm.ast.Trees.Mod.productArity: Int
2081 ===> phantm.ast.Trees.BooleanXor.productIterator: Iterator[Any]
5177 ===> phantm.types.TFunction.<init>(): phantm.types.TFunction.type
2400 ===> phantm.ast.Trees.Array.equals(x$1: Any): Boolean
826 ===> phantm.ast.Trees.CalledClass.equals(x$1: Any): Boolean
210 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyStringEntry
1974 ===> phantm.ast.Trees.PreInc.canEqual(x$1: Any): Boolean
2269 ===> phantm.ast.Trees.Smaller.hashCode(): Int
3857 ===> phantm.cfg.Trees.Ternary.readResolve(): Object
1354 ===> phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
2273 ===> phantm.ast.Trees.Smaller.toString(): String
2874 ===> phantm.ast.Trees.MCNamespace.productElement(x$1: Int): Any
943 ===> phantm.ast.Trees.CastDouble.canEqual(x$1: Any): Boolean
41 ===> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
106 ===> phantm.Settings.stgs: Option[phantm.Settings]
1150 ===> phantm.ast.Trees.NamespaceStart.apply(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NamespaceStart
5593 ===> phantm.util.API.Reader.APIPos.canEqual(x$1: Any): Boolean
2848 ===> phantm.ast.Trees.MCFunction.toString(): String
4207 ===> phantm.cfg.Trees.POSTDEC.productArity: Int
3545 ===> phantm.cfg.Trees.VariableClassProperty.productPrefix: String
4741 ===> phantm.phases.CollectSymbols.toString(): String
3151 ===> phantm.cfg.Trees.Assume.hashCode(): Int
3036 ===> phantm.cfg.LabeledDirectedGraphImp.makeBoxed(id: String,name: String): StringBuffer
750 ===> phantm.ast.Trees.NSIdentifier.productPrefix: String
4726 ===> phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean)
4359 ===> phantm.phases.CheckContext.topLevel: Boolean
1838 ===> phantm.ast.Trees.Clone.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
4304 ===> phantm.helpers.CFGGraphs.hashCode(): Int
3820 ===> phantm.cfg.Trees.ClassConstant.cl: phantm.cfg.Trees.ClassRef
350 ===> phantm.ast.STToAST.static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
1391 ===> phantm.ast.Trees.While.cond: phantm.ast.Trees.Expression
4329 ===> phantm.helpers.STGraph.generateDotGraph(root: phantm.parser.ParseNode,printStream: java.io.PrintStream): Unit
148 ===> phantm.Settings.$lessinit$greater$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
2324 ===> phantm.ast.Trees.Ternary.productArity: Int
2476 ===> phantm.ast.Trees.Closure.toString(): String
4245 ===> phantm.dataflow.StronglyConnectedComponents.Node.caller_$eq(x$1: Option[StronglyConnectedComponents.this.Node]): Unit
1795 ===> phantm.ast.Trees.ExpandArray.vars: List[Option[phantm.ast.Trees.Variable]]
2912 ===> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
5150 ===> phantm.types.TClass.productIterator: Iterator[Any]
4330 ===> phantm.helpers.STGraph.emit(str: String): Unit
420 ===> phantm.ast.STToAST.array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
2903 ===> phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit
1239 ===> phantm.ast.Trees.InterfaceDecl.equals(x$1: Any): Boolean
2074 ===> phantm.ast.Trees.BooleanXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanXor
2725 ===> phantm.ast.Trees.PHPInteger.equals(x$1: Any): Boolean
2368 ===> phantm.ast.Trees.Silence.toString(): String
5223 ===> phantm.types.ObjectIdDump.apply(offset: Int): phantm.types.ObjectIdDump
5654 ===> phantm.util.DumpCollector.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
4335 ===> phantm.lattice.Lattice.top: Lattice.this.E
2913 ===> phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit
3327 ===> phantm.cfg.Trees.Skip.productPrefix: String
196 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productPrefix: String
2016 ===> phantm.ast.Trees.PreDec.readResolve(): Object
1804 ===> phantm.ast.Trees.ExpandArray.productIterator: Iterator[Any]
5417 ===> phantm.types.TIntLit.equals(x$1: Any): Boolean
4547 ===> phantm.phases.ParsingPhase.<init>(): phantm.phases.ParsingPhase.type
5308 ===> phantm.types.TRealObject.setMultiton: phantm.types.TRealObject
4064 ===> phantm.cfg.Trees.BITWISEXOR.productIterator: Iterator[Any]
639 ===> phantm.ast.Trees.MFPublic.productArity: Int
1513 ===> phantm.ast.Trees.Return.canEqual(x$1: Any): Boolean
1167 ===> phantm.ast.Trees.Namespaced.<init>(): phantm.ast.Trees.Namespaced.type
2035 ===> phantm.ast.Trees.BooleanAnd.rhs: phantm.ast.Trees.Expression
2660 ===> phantm.ast.Trees.StaticMethodCall.hashCode(): Int
3385 ===> phantm.cfg.Trees.ClassRefDynamic.hashCode(): Int
3178 ===> phantm.cfg.Trees.IsNull.productPrefix: String
1931 ===> phantm.ast.Trees.Concat.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
5253 ===> phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject
1618 ===> phantm.ast.Trees.Foreach.copy$default$4: Option[phantm.ast.Trees.Variable] @scala.annotation.unchecked.uncheckedVariance
3331 ===> phantm.cfg.Trees.Skip.canEqual(x$1: Any): Boolean
999 ===> phantm.ast.Trees.InitVariable.apply(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
2248 ===> phantm.ast.Trees.Identical.productIterator: Iterator[Any]
5263 ===> phantm.types.ObjectStore.equals(x$1: Any): Boolean
1748 ===> phantm.ast.Trees.DynamicObjectProperty.productElement(x$1: Int): Any
72 ===> phantm.InlineNone.productElement(x$1: Int): Any
3910 ===> phantm.cfg.Trees.MethodCall.equals(x$1: Any): Boolean
4999 ===> phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type
972 ===> phantm.ast.Trees.CastObject.toString(): String
4271 ===> phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
3787 ===> phantm.cfg.Trees.ArrayCurKey.readResolve(): Object
461 ===> phantm.ast.Trees.Program.toString(): String
1829 ===> phantm.ast.Trees.Assign.equals(x$1: Any): Boolean
3460 ===> phantm.cfg.Trees.ClassProperty.productArity: Int
3916 ===> phantm.cfg.Trees.New.cl: phantm.cfg.Trees.ClassRef
241 ===> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.unapply(x$0: phantm.annotations.SourceAnnotations.Parser.AnyIntEntry): Option[phantm.types.Type]
1460 ===> phantm.ast.Trees.Switch.productElement(x$1: Int): Any
2448 ===> phantm.ast.Trees.Eval.canEqual(x$1: Any): Boolean
4795 ===> phantm.symbols.ID.c_$eq(x$1: Int): Unit
3783 ===> phantm.cfg.Trees.ArrayCurKey.<init>(): phantm.cfg.Trees.ArrayCurKey.type
1677 ===> phantm.ast.Trees.VariableVariable.hashCode(): Int
1153 ===> phantm.ast.Trees.Namespaced.name: phantm.ast.Trees.NSIdentifier
1775 ===> phantm.ast.Trees.ClassProperty.apply(cl: phantm.ast.Trees.ClassRef,property: phantm.ast.Trees.Variable): phantm.ast.Trees.ClassProperty
5542 ===> phantm.types.TTop.productArity: Int
1784 ===> phantm.ast.Trees.ListVar.productElement(x$1: Int): Any
3259 ===> phantm.cfg.Trees.AssumeProperty.vs: List[phantm.cfg.Trees.Variable]
5751 ===> phantm.util.Positional.file: Option[String]
4190 ===> phantm.cfg.Trees.POSTINC.productElement(x$1: Int): Any
1554 ===> phantm.ast.Trees.Static.unapply(x$0: phantm.ast.Trees.Static): Option[List[phantm.ast.Trees.InitVariable]]
2172 ===> phantm.ast.Trees.ShiftRight.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5899 ===> phantm.util.UString.productElement(x$1: Int): Any
4844 ===> phantm.symbols.MVPrivate.stricterThan(o: phantm.symbols.MemberVisibility): Boolean
383 ===> phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
1909 ===> phantm.ast.Trees.Mult.lhs: phantm.ast.Trees.Expression
4757 ===> phantm.phases.TypeFlowAnalysis.display(content: String): Unit
1353 ===> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
4450 ===> phantm.phases.CGContext.<init>(scope: Option[phantm.symbols.FunctionSymbol]): phantm.phases.CGContext
1347 ===> phantm.ast.Trees.Alternatives.equals(x$1: Any): Boolean
665 ===> phantm.ast.Trees.MFFinal.productPrefix: String
5582 ===> phantm.util.API.Reader.<init>(is: java.io.InputStream,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader
1110 ===> phantm.ast.Trees.OAMethod.unapply(x$0: phantm.ast.Trees.OAMethod): Option[(phantm.ast.Trees.ObjectAccess, List[phantm.ast.Trees.CallArg])]
5258 ===> phantm.types.ObjectStore.productArity: Int
3777 ===> phantm.cfg.Trees.ArrayCurKey.productArity: Int
2755 ===> phantm.ast.Trees.PHPString.productIterator: Iterator[Any]
1385 ===> phantm.ast.Trees.If.equals(x$1: Any): Boolean
3074 ===> phantm.cfg.Trees.Assign.hashCode(): Int
40 ===> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
2321 ===> phantm.ast.Trees.Ternary.copy$default$2: Option[phantm.ast.Trees.Expression] @scala.annotation.unchecked.uncheckedVariance
2513 ===> phantm.ast.Trees.Empty.readResolve(): Object
1738 ===> phantm.ast.Trees.ObjectProperty.unapply(x$0: phantm.ast.Trees.ObjectProperty): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Identifier)]
907 ===> phantm.ast.Trees.StaticMethodRef.productArity: Int
3737 ===> phantm.cfg.Trees.Cast.apply(to: phantm.ast.Trees.CastType,e: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Cast
2580 ===> phantm.ast.Trees.ClassConstant.hashCode(): Int
1556 ===> phantm.ast.Trees.Echo.exprs: List[phantm.ast.Trees.Expression]
4787 ===> phantm.symbols.Symbol.userland_$eq(x$1: Boolean): Unit
1548 ===> phantm.ast.Trees.Static.hashCode(): Int
4445 ===> phantm.phases.CallGraphPhase.name: String
3689 ===> phantm.cfg.Trees.PHPThis.readResolve(): Object
1933 ===> phantm.ast.Trees.Concat.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
3845 ===> phantm.cfg.Trees.Ternary.copy$default$3: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
2170 ===> phantm.ast.Trees.ShiftRight.copy(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftRight
4806 ===> phantm.symbols.GlobalSymbols.classes_$eq(x$1: scala.collection.mutable.HashMap[String,phantm.symbols.ClassSymbol]): Unit
610 ===> phantm.ast.Trees.THObject.cl: phantm.ast.Trees.ClassRef
611 ===> phantm.ast.Trees.THObject.<init>(cl: phantm.ast.Trees.ClassRef): phantm.ast.Trees.THObject
2863 ===> phantm.ast.Trees.MCMethod.toString(): String
3201 ===> phantm.cfg.Trees.IsFloat.hashCode(): Int
5921 ===> phantm.util.UInt.equals(x$1: Any): Boolean
1319 ===> phantm.ast.Trees.LabelDecl.name: phantm.ast.Trees.Identifier
1898 ===> phantm.ast.Trees.Div.productElement(x$1: Int): Any
2082 ===> phantm.ast.Trees.BooleanXor.canEqual(x$1: Any): Boolean
1362 ===> phantm.ast.Trees.Block.hashCode(): Int
2840 ===> phantm.ast.Trees.MCFunction.<init>(): phantm.ast.Trees.MCFunction
1039 ===> phantm.ast.Trees.OAScalar.<init>(): phantm.ast.Trees.OAScalar
5515 ===> phantm.types.TAny.canEqual(x$1: Any): Boolean
4470 ===> phantm.phases.CallGraphGeneration.CallGraph.<init>(): CallGraphGeneration.this.CallGraph.type
1937 ===> phantm.ast.Trees.Concat.productIterator: Iterator[Any]
1947 ===> phantm.ast.Trees.Mod.lhs: phantm.ast.Trees.Expression
5341 ===> phantm.types.IntKey.copy(v: Long): phantm.types.IntKey
775 ===> phantm.ast.Trees.VarClassRef.hashCode(): Int
1915 ===> phantm.ast.Trees.Mult.productPrefix: String
2600 ===> phantm.ast.Trees.New.toString(): String
5442 ===> phantm.types.TFloatLit.canEqual(x$1: Any): Boolean
3443 ===> phantm.cfg.Trees.TempID.productPrefix: String
2989 ===> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
3724 ===> phantm.cfg.Trees.Cast.<init>(to: phantm.ast.Trees.CastType,e: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Cast
5481 ===> phantm.types.TString.<init>(): phantm.types.TString.type
1449 ===> phantm.ast.Trees.For.apply(init: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression,step: phantm.ast.Trees.Statement,then: phantm.ast.Trees.Statement): phantm.ast.Trees.For
6023 ===> phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type
3231 ===> phantm.cfg.Trees.IsObject.<init>(): phantm.cfg.Trees.IsObject.type
701 ===> phantm.ast.Trees.NSGlobal.hashCode(): Int
5319 ===> phantm.types.StringKey.v: String
782 ===> phantm.ast.Trees.VarClassRef.readResolve(): Object
3087 ===> phantm.cfg.Trees.AssignUnary.copy$default$2: phantm.cfg.Trees.UnaryOperator @scala.annotation.unchecked.uncheckedVariance
910 ===> phantm.ast.Trees.StaticMethodRef.canEqual(x$1: Any): Boolean
838 ===> phantm.ast.Trees.VarFunctionRef.productArity: Int
284 ===> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
3276 ===> phantm.cfg.Trees.AssumeNotProperty.prop: phantm.cfg.Trees.Property
961 ===> phantm.ast.Trees.CastBool.canEqual(x$1: Any): Boolean
3420 ===> phantm.cfg.Trees.ClassRefCalledClass.toString(): String
7 ===> phantm.Main.displayVersion_$eq(x$1: Boolean): Unit
2814 ===> phantm.ast.Trees.MCDir.productElement(x$1: Int): Any
4482 ===> phantm.phases.CallGraphGeneration.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration
3143 ===> phantm.cfg.Trees.Assume.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
1249 ===> phantm.ast.Trees.Try.copy$default$1: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
3540 ===> phantm.cfg.Trees.VariableClassProperty.index: phantm.cfg.Trees.SimpleValue
717 ===> phantm.ast.Trees.NSResolved.productArity: Int
4846 ===> phantm.symbols.MVProtected.toString(): String
809 ===> phantm.ast.Trees.StaticClassRef.hashCode(): Int
3014 ===> phantm.cfg.LabeledDirectedGraphImp.Group.copy$default$2: LabeledDirectedGraphImp.this.Vertex @scala.annotation.unchecked.uncheckedVariance
5533 ===> phantm.types.TNull.productElement(x$1: Int): Any
5152 ===> phantm.types.TClass.hashCode(): Int
2545 ===> phantm.ast.Trees.Require.toString(): String
5033 ===> phantm.types.TypeTransferFunction.noticesFct: (String, phantm.util.Positional) => Unit
5285 ===> phantm.types.TObjectTmp.toString(): String
4946 ===> phantm.types.TypeEnvironment.copy: phantm.types.TypeEnvironment
596 ===> phantm.ast.Trees.CFFinal.canEqual(x$1: Any): Boolean
3304 ===> phantm.cfg.Trees.Print.equals(x$1: Any): Boolean
522 ===> phantm.ast.Trees.PropertyDecl.productArity: Int
2847 ===> phantm.ast.Trees.MCFunction.hashCode(): Int
2344 ===> phantm.ast.Trees.Cast.productElement(x$1: Int): Any
2040 ===> phantm.ast.Trees.BooleanAnd.productPrefix: String
4130 ===> phantm.cfg.Trees.EQUALS.readResolve(): Object
960 ===> phantm.ast.Trees.CastBool.productIterator: Iterator[Any]
931 ===> phantm.ast.Trees.CastString.productArity: Int
5380 ===> phantm.types.TAnyArray.<init>(): phantm.types.TAnyArray.type
3918 ===> phantm.cfg.Trees.New.<init>(cl: phantm.cfg.Trees.ClassRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.New
4416 ===> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
3116 ===> phantm.cfg.Trees.AssignBinary.hashCode(): Int
2150 ===> phantm.ast.Trees.ShiftLeft.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftLeft
5987 ===> phantm.util.UFalse.<init>(): phantm.util.UFalse.type
3909 ===> phantm.cfg.Trees.MethodCall.hashCode(): Int
3401 ===> phantm.cfg.Trees.ClassRefFixed.canEqual(x$1: Any): Boolean
4530 ===> phantm.phases.NSWrapper.<init>(ast: phantm.ast.Trees.Program): phantm.phases.NSWrapper
186 ===> phantm.annotations.SourceAnnotations.Parser.typedefs: scala.collection.immutable.Map[String,phantm.types.Type]
748 ===> phantm.ast.Trees.NSIdentifier.copy$default$1: phantm.ast.Trees.NSRoot @scala.annotation.unchecked.uncheckedVariance
5712 ===> phantm.util.IncludeResolver.copy$default$1: phantm.ast.Trees.Program @scala.annotation.unchecked.uncheckedVariance
4770 ===> phantm.phases.TypeFlowAnalysis.equals(x$1: Any): Boolean
4475 ===> phantm.phases.CallGraphGeneration.CallGraph.osymToV_$eq(x$1: scala.collection.immutable.Map[Option[phantm.symbols.FunctionSymbol],phantm.phases.CallGraphGeneration.CallGraph.Vertex]): Unit
3299 ===> phantm.cfg.Trees.Print.productArity: Int
1997 ===> phantm.ast.Trees.PostInc.apply(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostInc
3804 ===> phantm.cfg.Trees.Constant.cs: phantm.symbols.ConstantSymbol
2822 ===> phantm.ast.Trees.MCDir.apply(): phantm.ast.Trees.MCDir
3314 ===> phantm.cfg.Trees.Return.productPrefix: String
1141 ===> phantm.ast.Trees.NamespaceStart.productArity: Int
3372 ===> phantm.cfg.Trees.FuncRef.unapply(x$0: phantm.cfg.Trees.FuncRef): Option[phantm.ast.Trees.NSIdentifier]
5795 ===> phantm.util.Reporter.tickCount_$eq(x$1: Int): Unit
2536 ===> phantm.ast.Trees.Require.copy(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Require
4516 ===> phantm.phases.MethodGraphGeneration.MethodGraph.<init>(): MethodGraphGeneration.this.MethodGraph.type
3265 ===> phantm.cfg.Trees.AssumeProperty.productArity: Int
2364 ===> phantm.ast.Trees.Silence.hashCode(): Int
4110 ===> phantm.cfg.Trees.GEQ.canEqual(x$1: Any): Boolean
2084 ===> phantm.ast.Trees.BooleanXor.toString(): String
3234 ===> phantm.cfg.Trees.IsObject.productElement(x$1: Int): Any
2387 ===> phantm.ast.Trees.Exit.unapply(x$0: phantm.ast.Trees.Exit): Option[Option[phantm.ast.Trees.Expression]]
1476 ===> phantm.ast.Trees.Break.productArity: Int
1133 ===> phantm.ast.Trees.FunctionDecl.apply(name: phantm.ast.Trees.NSIdentifier,args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.FunctionDecl
5487 ===> phantm.types.TString.canEqual(x$1: Any): Boolean
5015 ===> phantm.types.TypeLattice.meetTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
3621 ===> phantm.cfg.Trees.PHPTrue.copy(): phantm.cfg.Trees.PHPTrue
1902 ===> phantm.ast.Trees.Div.toString(): String
5212 ===> phantm.types.ObjectIdDump.copy(offset: Int): phantm.types.ObjectIdDump
4410 ===> phantm.phases.ASTCollector.classesDecls_$eq(x$1: List[phantm.ast.Trees.ClassDecl]): Unit
3695 ===> phantm.cfg.Trees.PHPEmptyArray.productIterator: Iterator[Any]
920 ===> phantm.ast.Trees.CastInt.<init>(): phantm.ast.Trees.CastInt.type
785 ===> phantm.ast.Trees.DynamicClassRef.copy(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef
2654 ===> phantm.ast.Trees.StaticMethodCall.copy$default$3: List[phantm.ast.Trees.CallArg] @scala.annotation.unchecked.uncheckedVariance
2728 ===> phantm.ast.Trees.PHPInteger.apply(value: Long): phantm.ast.Trees.PHPInteger
2750 ===> phantm.ast.Trees.PHPString.copy(value: String): phantm.ast.Trees.PHPString
4273 ===> phantm.helpers.CheckContext.copy(): phantm.helpers.CheckContext
2975 ===> phantm.cfg.EdgeCounter.count: Int
5009 ===> phantm.types.TypeLattice.join(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
3762 ===> phantm.cfg.Trees.ArrayCurElement.productElement(x$1: Int): Any
5108 ===> phantm.types.TypeTransferFunction.$lessinit$greater$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
3144 ===> phantm.cfg.Trees.Assume.copy$default$2: phantm.cfg.Trees.RelationalOperator @scala.annotation.unchecked.uncheckedVariance
39 ===> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
4627 ===> phantm.phases.PhasesContext.$lessinit$greater$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
2245 ===> phantm.ast.Trees.Identical.productPrefix: String
5885 ===> phantm.util.UObject.hashCode(): Int
4497 ===> phantm.phases.CallGraphGeneration.equals(x$1: Any): Boolean
623 ===> phantm.ast.Trees.THObject.toString(): String
3672 ===> phantm.cfg.Trees.PHPNull.toString(): String
2330 ===> phantm.ast.Trees.Ternary.equals(x$1: Any): Boolean
1582 ===> phantm.ast.Trees.Html.hashCode(): Int
847 ===> phantm.ast.Trees.VarFunctionRef.apply(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarFunctionRef
5886 ===> phantm.util.UObject.toString(): String
3719 ===> phantm.cfg.Trees.SubTypeOf.apply(lhs: phantm.cfg.Trees.SimpleValue,cl: phantm.cfg.Trees.ClassRef): phantm.cfg.Trees.SubTypeOf
94 ===> phantm.InlineFull.toString(): String
469 ===> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
2080 ===> phantm.ast.Trees.BooleanXor.productElement(x$1: Int): Any
3384 ===> phantm.cfg.Trees.ClassRefDynamic.canEqual(x$1: Any): Boolean
5609 ===> phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String
5261 ===> phantm.types.ObjectStore.canEqual(x$1: Any): Boolean
817 ===> phantm.ast.Trees.CalledClass.<init>(): phantm.ast.Trees.CalledClass
2349 ===> phantm.ast.Trees.Cast.equals(x$1: Any): Boolean
4768 ===> phantm.phases.TypeFlowAnalysis.hashCode(): Int
2997 ===> phantm.cfg.LabeledDirectedGraphImp.groupN: Int
2691 ===> phantm.ast.Trees.PHPTrue.hashCode(): Int
429 ===> phantm.ast.STToAST.copy(parser: phantm.parser.Parser,st: phantm.parser.ParseNode): phantm.ast.STToAST
3369 ===> phantm.cfg.Trees.FuncRef.<init>(): phantm.cfg.Trees.FuncRef.type
2940 ===> phantm.cfg.VertexImp.productPrefix: String
704 ===> phantm.ast.Trees.NSCurrent.<init>(): phantm.ast.Trees.NSCurrent.type
4706 ===> phantm.phases.CollectSymbols.classCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.ClassDecl]
4122 ===> phantm.cfg.Trees.EQUALS.<init>(): phantm.cfg.Trees.EQUALS.type
2700 ===> phantm.ast.Trees.PHPFalse.copy(): phantm.ast.Trees.PHPFalse
2966 ===> phantm.cfg.EdgeImp.canEqual(x$1: Any): Boolean
5414 ===> phantm.types.TIntLit.canEqual(x$1: Any): Boolean
5321 ===> phantm.types.StringKey.toString(): String
3887 ===> phantm.cfg.Trees.StaticMethodCall.productIterator: Iterator[Any]
5836 ===> phantm.util.ErrorException.copy$default$2: Int @scala.annotation.unchecked.uncheckedVariance
1910 ===> phantm.ast.Trees.Mult.rhs: phantm.ast.Trees.Expression
3564 ===> phantm.cfg.Trees.NoVar.hashCode(): Int
4246 ===> phantm.dataflow.StronglyConnectedComponents.Node.vSeq: IndexedSeq[StronglyConnectedComponents.this.Vertex]
1369 ===> phantm.ast.Trees.Block.readResolve(): Object
2659 ===> phantm.ast.Trees.StaticMethodCall.canEqual(x$1: Any): Boolean
2208 ===> phantm.ast.Trees.BitwiseNot.productArity: Int
4611 ===> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
3099 ===> phantm.cfg.Trees.AssignUnary.unapply(x$0: phantm.cfg.Trees.AssignUnary): Option[(phantm.cfg.Trees.Variable, phantm.cfg.Trees.UnaryOperator, phantm.cfg.Trees.SimpleValue)]
3441 ===> phantm.cfg.Trees.TempID.copy(value: String): phantm.cfg.Trees.TempID
3557 ===> phantm.cfg.Trees.NoVar.<init>(): phantm.cfg.Trees.NoVar
4695 ===> phantm.phases.SymContext.hashCode(): Int
1343 ===> phantm.ast.Trees.Alternatives.productIterator: Iterator[Any]
3512 ===> phantm.cfg.Trees.NextArrayEntry.productIterator: Iterator[Any]
3619 ===> phantm.cfg.Trees.PHPString.readResolve(): Object
3053 ===> phantm.cfg.Trees.Unset.productElement(x$1: Int): Any
5386 ===> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
4343 ===> phantm.parser.Parser.clearPreviousComment(pos: phantm.util.Positional): Option[String]
5822 ===> phantm.util.Reporter.set(newrep: phantm.util.Reporter): Unit
3532 ===> phantm.cfg.Trees.ObjectProperty.hashCode(): Int
1270 ===> phantm.ast.Trees.Catch.copy$default$2: phantm.ast.Trees.SimpleVariable @scala.annotation.unchecked.uncheckedVariance
1788 ===> phantm.ast.Trees.ListVar.toString(): String
2563 ===> phantm.ast.Trees.Constant.equals(x$1: Any): Boolean
781 ===> phantm.ast.Trees.VarClassRef.unapply(x$0: phantm.ast.Trees.VarClassRef): Option[phantm.ast.Trees.Variable]
2220 ===> phantm.ast.Trees.Equal.lhs: phantm.ast.Trees.Expression
5732 ===> phantm.util.JavaListIteratorWrapper.hashCode(): Int
5032 ===> phantm.types.TypeTransferFunction.inlined: Boolean
4286 ===> phantm.helpers.CheckContext.readResolve(): Object
1024 ===> phantm.ast.Trees.CallArg.copy$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
557 ===> phantm.ast.Trees.ConstantDecl.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
2087 ===> phantm.ast.Trees.BooleanXor.toString(): String
1187 ===> phantm.ast.Trees.Import.toString(): String
5007 ===> phantm.types.TypeLattice.top: phantm.types.TTop.type
830 ===> phantm.ast.Trees.CalledClass.unapply(x$0: phantm.ast.Trees.CalledClass): Boolean
2696 ===> phantm.ast.Trees.PHPTrue.apply(): phantm.ast.Trees.PHPTrue
5439 ===> phantm.types.TFloatLit.productArity: Int
4993 ===> phantm.types.TypeFlowAnalyzer.apply$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
4910 ===> phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol]
4554 ===> phantm.phases.Phase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
1851 ===> phantm.ast.Trees.Clone.readResolve(): Object
5228 ===> phantm.types.ObjectId.<init>(pos: Int,typ: phantm.types.ObjectIdType): phantm.types.ObjectId
5041 ===> phantm.types.TypeTransferFunction.allTypesBut(t: phantm.types.Type*): phantm.types.Type
4382 ===> phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean)
2842 ===> phantm.ast.Trees.MCFunction.productPrefix: String
2186 ===> phantm.ast.Trees.BooleanNot.rhs: phantm.ast.Trees.Expression
1602 ===> phantm.ast.Trees.Unset.<init>(): phantm.ast.Trees.Unset.type
2492 ===> phantm.ast.Trees.Isset.<init>(): phantm.ast.Trees.Isset.type
5675 ===> phantm.util.GlobalAnalysisResults.inlineCache: Map[phantm.symbols.FunctionSymbol,Map[List[phantm.types.Type],(phantm.types.Type, phantm.types.ObjectStore)]]
4699 ===> phantm.phases.SymContext.toString(): String
5124 ===> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
1484 ===> phantm.ast.Trees.Break.toString(): String
3220 ===> phantm.cfg.Trees.IsArray.toString(): String
1710 ===> phantm.ast.Trees.NextArrayEntry.productElement(x$1: Int): Any
3712 ===> phantm.cfg.Trees.SubTypeOf.productElement(x$1: Int): Any
2770 ===> phantm.ast.Trees.PHPNull.productIterator: Iterator[Any]
850 ===> phantm.ast.Trees.DynamicFunctionRef.ex: phantm.ast.Trees.Expression
2665 ===> phantm.ast.Trees.StaticMethodCall.apply(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
3502 ===> phantm.cfg.Trees.ArrayEntry.apply(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
5173 ===> phantm.types.TFunction.productIterator: Iterator[Any]
3986 ===> phantm.cfg.Trees.DIV.readResolve(): Object
198 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productElement(x$1: Int): Any
4612 ===> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
1097 ===> phantm.ast.Trees.OAMethod.copy$default$1: phantm.ast.Trees.ObjectAccess @scala.annotation.unchecked.uncheckedVariance
4414 ===> phantm.phases.ASTPruner.afterDump_$eq(x$1: Boolean): Unit
4352 ===> phantm.phases.APIImportationPhase.name: String
271 ===> phantm.annotations.SourceAnnotations.Parser.strToType(str: String): Option[phantm.types.Type]
294 ===> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
5082 ===> phantm.types.TypeTransferFunction.getReprTypes(sv: phantm.cfg.Trees.StaticValue,bval: Boolean,strict: Boolean): Option[phantm.types.Type]
3378 ===> phantm.cfg.Trees.ClassRefDynamic.copy(sv: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ClassRefDynamic
5405 ===> phantm.types.TIntLit.value: Long
1799 ===> phantm.ast.Trees.ExpandArray.copy$default$1: List[Option[phantm.ast.Trees.Variable]] @scala.annotation.unchecked.uncheckedVariance
4462 ===> phantm.phases.CGContext.toString(): String
223 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.apply(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyStringEntry
5780 ===> phantm.util.Reporter.Error.copy$default$1: String @scala.annotation.unchecked.uncheckedVariance
3960 ===> phantm.cfg.Trees.MINUS.<init>(): phantm.cfg.Trees.MINUS.type
1693 ===> phantm.ast.Trees.ArrayEntry.productElement(x$1: Int): Any
3269 ===> phantm.cfg.Trees.AssumeProperty.hashCode(): Int
404 ===> phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression]
2163 ===> phantm.ast.Trees.ShiftLeft.toString(): String
4281 ===> phantm.helpers.CheckContext.equals(x$1: Any): Boolean
2816 ===> phantm.ast.Trees.MCDir.canEqual(x$1: Any): Boolean
572 ===> phantm.ast.Trees.ClassFlag.<init>(): phantm.ast.Trees.ClassFlag
2381 ===> phantm.ast.Trees.Exit.hashCode(): Int
83 ===> phantm.InlineLeaves.canEqual(x$1: Any): Boolean
5889 ===> phantm.util.UObject.toString(): String
695 ===> phantm.ast.Trees.NSGlobal.value: String
4713 ===> phantm.phases.CollectSymbols.interfacesToPass_$eq(x$1: List[phantm.ast.Trees.InterfaceDecl]): Unit
2880 ===> phantm.ast.Trees.MCNamespace.<init>(): phantm.ast.Trees.MCNamespace.type
5864 ===> phantm.util.UArray.toString(): String
3325 ===> phantm.cfg.Trees.Return.readResolve(): Object
5102 ===> phantm.types.TypeTransferFunction.unapply(x$0: phantm.types.TypeTransferFunction): Option[(Boolean, phantm.phases.PhasesContext, Boolean, Boolean, Boolean, (String, phantm.util.Positional) => Unit, (String, phantm.util.Positional) => Unit)]
209 ===> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.t: phantm.types.Type
3277 ===> phantm.cfg.Trees.AssumeNotProperty.vs: List[phantm.cfg.Trees.Variable]
5650 ===> phantm.util.DumpCollector.restore(str: String): String
4314 ===> phantm.helpers.Helper.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
4129 ===> phantm.cfg.Trees.EQUALS.hashCode(): Int
5943 ===> phantm.util.UFloat.readResolve(): Object
5802 ===> phantm.util.Reporter.errors_$eq(x$1: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]): Unit
1040 ===> phantm.ast.Trees.OAIdentifier.id: phantm.ast.Trees.Identifier
5269 ===> phantm.types.ObjectType.<init>(): phantm.types.ObjectType
5541 ===> phantm.types.TTop.productPrefix: String
2722 ===> phantm.ast.Trees.PHPInteger.canEqual(x$1: Any): Boolean
5575 ===> phantm.types.TUnion.<init>(types: Set[phantm.types.Type]): phantm.types.TUnion
4521 ===> phantm.phases.MethodGraphGeneration.MethodGraph.vToSym_$eq(x$1: scala.collection.immutable.Map[phantm.cfg.VertexImp[String],phantm.symbols.MethodSymbol]): Unit
4433 ===> phantm.phases.CFGGenerator.productElement(x$1: Int): Any
2960 ===> phantm.cfg.EdgeImp.copy$default$2[L]: L @scala.annotation.unchecked.uncheckedVariance
915 ===> phantm.ast.Trees.StaticMethodRef.toString(): String
654 ===> phantm.ast.Trees.MFProtected.readResolve(): Object
3591 ===> phantm.cfg.Trees.PHPFloat.copy$default$1: Float @scala.annotation.unchecked.uncheckedVariance
5574 ===> phantm.types.TUnion.types: Set[phantm.types.Type]
5391 ===> phantm.types.TNumeric.canEqual(x$1: Any): Boolean
5077 ===> phantm.types.TypeTransferFunction.getInlinedRetType(params: List[phantm.types.Type]): phantm.types.Type
2539 ===> phantm.ast.Trees.Require.productPrefix: String
4502 ===> phantm.phases.CallGraphGeneration.readResolve(): Object
4055 ===> phantm.cfg.Trees.BITWISEOR.productIterator: Iterator[Any]
875 ===> phantm.ast.Trees.StaticFunctionRef.canEqual(x$1: Any): Boolean
674 ===> phantm.ast.Trees.MFStatic.productPrefix: String
4860 ===> phantm.symbols.IfaceConstantSymbol.is: phantm.symbols.IfaceSymbol
5117 ===> phantm.types.RecProtection.objectToStringDepth: Int
4782 ===> phantm.symbols.Symbol.<init>(): phantm.symbols.Symbol
5128 ===> phantm.types.ConcreteType.<init>(): phantm.types.ConcreteType
5191 ===> phantm.types.ObjectIdUse.readResolve(): Object
1620 ===> phantm.ast.Trees.Foreach.copy$default$6: phantm.ast.Trees.Statement @scala.annotation.unchecked.uncheckedVariance
1972 ===> phantm.ast.Trees.PreInc.productElement(x$1: Int): Any
1082 ===> phantm.ast.Trees.OAArray.productElement(x$1: Int): Any
1802 ===> phantm.ast.Trees.ExpandArray.productArity: Int
4182 ===> phantm.cfg.Trees.PREINC.productIterator: Iterator[Any]
4383 ===> phantm.phases.ASTIntegrityChecks.execute: Unit
5916 ===> phantm.util.UInt.productElement(x$1: Int): Any
4986 ===> phantm.types.TypeFlowAnalyzer.apply(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer
4929 ===> phantm.types.BaseTypeEnvironment.copy: phantm.types.TypeEnvironment
1036 ===> phantm.ast.Trees.CallArg.unapply(x$0: phantm.ast.Trees.CallArg): Option[(phantm.ast.Trees.Expression, Boolean)]
3332 ===> phantm.cfg.Trees.Skip.hashCode(): Int
4884 ===> phantm.symbols.IfaceSymbol.name: String
4580 ===> phantm.phases.PhaseSeq.productPrefix: String
3426 ===> phantm.cfg.Trees.ClassRefUnknown.copy(): phantm.cfg.Trees.ClassRefUnknown
480 ===> phantm.ast.Trees.ArgumentDecl.hashCode(): Int
5283 ===> phantm.types.TObjectTmp.obj: phantm.types.TRealObject
1160 ===> phantm.ast.Trees.Namespaced.productArity: Int
3922 ===> phantm.cfg.Trees.New.productPrefix: String
3232 ===> phantm.cfg.Trees.IsObject.productPrefix: String
1725 ===> phantm.ast.Trees.ObjectProperty.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
546 ===> phantm.ast.Trees.ClassConstantDecl.toString(): String
2319 ===> phantm.ast.Trees.Ternary.copy(cond: phantm.ast.Trees.Expression,then: Option[phantm.ast.Trees.Expression],elze: phantm.ast.Trees.Expression): phantm.ast.Trees.Ternary
722 ===> phantm.ast.Trees.NSResolved.toString(): String
3208 ===> phantm.cfg.Trees.IsBool.productIterator: Iterator[Any]
573 ===> phantm.ast.Trees.CFNormal.<init>(): phantm.ast.Trees.CFNormal.type
1288 ===> phantm.ast.Trees.Throw.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5471 ===> phantm.types.TFalse.<init>(): phantm.types.TFalse.type
5107 ===> phantm.types.TypeTransferFunction.$lessinit$greater$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
3706 ===> phantm.cfg.Trees.SubTypeOf.<init>(lhs: phantm.cfg.Trees.SimpleValue,cl: phantm.cfg.Trees.ClassRef): phantm.cfg.Trees.SubTypeOf
3579 ===> phantm.cfg.Trees.PHPLong.productIterator: Iterator[Any]
1692 ===> phantm.ast.Trees.ArrayEntry.productArity: Int
3048 ===> phantm.cfg.Trees.Unset.<init>(variable: phantm.cfg.Trees.Variable): phantm.cfg.Trees.Unset
4272 ===> phantm.helpers.CheckContext.<init>(): phantm.helpers.CheckContext
3875 ===> phantm.cfg.Trees.FunctionCall.readResolve(): Object
3988 ===> phantm.cfg.Trees.CONCAT.toString(): String
3550 ===> phantm.cfg.Trees.VariableClassProperty.hashCode(): Int
5847 ===> phantm.util.ErrorException.toString(): String
4318 ===> phantm.helpers.Main.output: Option[String]
702 ===> phantm.ast.Trees.NSGlobal.toString(): String
1196 ===> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
5347 ===> phantm.types.IntKey.canEqual(x$1: Any): Boolean
5195 ===> phantm.types.ObjectIdTmp.copy(offset: Int): phantm.types.ObjectIdTmp
4579 ===> phantm.phases.PhaseSeq.copy$default$1: Seq[phantm.phases.Phase] @scala.annotation.unchecked.uncheckedVariance
421 ===> phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
2066 ===> phantm.ast.Trees.BooleanOr.equals(x$1: Any): Boolean
4131 ===> phantm.cfg.Trees.IDENTICAL.<init>(): phantm.cfg.Trees.IDENTICAL.type
1634 ===> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
4364 ===> phantm.phases.CheckContext.copy$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
2197 ===> phantm.ast.Trees.BooleanNot.equals(x$1: Any): Boolean
5876 ===> phantm.util.UObject.copy(i: Int,classname: String,entries: Map[phantm.util.UValue,phantm.util.UValue]): phantm.util.UObject
328 ===> phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
465 ===> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
5289 ===> phantm.types.TRealObject.globalType: phantm.types.Type
1140 ===> phantm.ast.Trees.NamespaceStart.productPrefix: String
743 ===> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
5686 ===> phantm.util.GlobalAnalysisResults.summary_$eq(x$1: Map[phantm.symbols.FunctionSymbol,Int]): Unit
2890 ===> phantm.cfg.ASTToCFG.FreshName.apply(prefix: String): String
4345 ===> phantm.parser.Parser.parse: Option[phantm.parser.ParseNode]
4987 ===> phantm.types.TypeFlowAnalyzer.unapply(x$0: phantm.types.TypeFlowAnalyzer): Option[(phantm.cfg.ControlFlowGraph, phantm.symbols.Scope, phantm.phases.PhasesContext, Boolean, Boolean, phantm.types.TypeEnvironment, Option[phantm.types.TObjectRef])]
4996 ===> phantm.types.TypeFlowAnalyzer.readResolve(): Object
2592 ===> phantm.ast.Trees.New.copy$default$1: phantm.ast.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
5407 ===> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
3812 ===> phantm.cfg.Trees.Constant.canEqual(x$1: Any): Boolean
987 ===> phantm.ast.Trees.InitVariable.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
2395 ===> phantm.ast.Trees.Array.productElement(x$1: Int): Any
35 ===> phantm.Settings.anyInput: Boolean
4229 ===> phantm.dataflow.AnalysisAlgorithm.dumpFacts: Unit
1315 ===> phantm.ast.Trees.Goto.toString(): String
2961 ===> phantm.cfg.EdgeImp.copy$default$3[L]: phantm.cfg.VertexImp[L] @scala.annotation.unchecked.uncheckedVariance
6004 ===> phantm.util.UTrue.readResolve(): Object
5421 ===> phantm.types.TIntLit.unapply(x$0: phantm.types.TIntLit): Option[Long]
2964 ===> phantm.cfg.EdgeImp.productElement(x$1: Int): Any
2998 ===> phantm.cfg.LabeledDirectedGraphImp.groupN_$eq(x$1: Int): Unit
144 ===> phantm.Settings.$lessinit$greater$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
5756 ===> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
4219 ===> phantm.cfg.Trees.SILENCE.canEqual(x$1: Any): Boolean
2618 ===> phantm.ast.Trees.FunctionCall.hashCode(): Int
5507 ===> phantm.types.TStringLit.unapply(x$0: phantm.types.TStringLit): Option[String]
4022 ===> phantm.cfg.Trees.BOOLEANAND.readResolve(): Object
864 ===> phantm.ast.Trees.DynamicFunctionRef.apply(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicFunctionRef
545 ===> phantm.ast.Trees.ClassConstantDecl.hashCode(): Int
3733 ===> phantm.cfg.Trees.Cast.hashCode(): Int
1740 ===> phantm.ast.Trees.DynamicObjectProperty.obj: phantm.ast.Trees.Expression
3769 ===> phantm.cfg.Trees.ArrayCurElement.apply(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurElement
5281 ===> phantm.types.TObjectRef.equals(v: Any): Boolean
2552 ===> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
2027 ===> phantm.ast.Trees.PostDec.toString(): String
2491 ===> phantm.ast.Trees.Isset.equals(x$1: Any): Boolean
1169 ===> phantm.ast.Trees.Namespaced.apply(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
2366 ===> phantm.ast.Trees.Silence.equals(x$1: Any): Boolean
1004 ===> phantm.ast.Trees.Label.copy(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.Label
3018 ===> phantm.cfg.LabeledDirectedGraphImp.Group.productIterator: Iterator[Any]
5597 ===> phantm.util.API.Reader.APIPos.<init>(): Reader.this.APIPos.type
4490 ===> phantm.phases.CallGraphGeneration.productPrefix: String
4974 ===> phantm.types.TypeFlowAnalyzer.copy$default$6: phantm.types.TypeEnvironment @scala.annotation.unchecked.uncheckedVariance
304 ===> phantm.ast.ASTSimpleTraversal.<init>(root: phantm.ast.Trees.Tree): phantm.ast.ASTSimpleTraversal
5719 ===> phantm.util.IncludeResolver.hashCode(): Int
4849 ===> phantm.symbols.MethodSymbol.visibility: phantm.symbols.MemberVisibility
1163 ===> phantm.ast.Trees.Namespaced.canEqual(x$1: Any): Boolean
3752 ===> phantm.cfg.Trees.ArrayNext.toString(): String
2535 ===> phantm.ast.Trees.Require.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Require
1212 ===> phantm.ast.Trees.ClassDecl.productIterator: Iterator[Any]
1798 ===> phantm.ast.Trees.ExpandArray.copy(vars: List[Option[phantm.ast.Trees.Variable]],expr: phantm.ast.Trees.Expression): phantm.ast.Trees.ExpandArray
1389 ===> phantm.ast.Trees.If.unapply(x$0: phantm.ast.Trees.If): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement, Option[phantm.ast.Trees.Statement])]
756 ===> phantm.ast.Trees.NSIdentifier.toString(): String
2648 ===> phantm.ast.Trees.StaticMethodCall.name: phantm.ast.Trees.MethodRef
3284 ===> phantm.cfg.Trees.AssumeNotProperty.productElement(x$1: Int): Any
2445 ===> phantm.ast.Trees.Eval.productArity: Int
5892 ===> phantm.util.UObject.readResolve(): Object
5463 ===> phantm.types.TTrue.productPrefix: String
3663 ===> phantm.cfg.Trees.PHPNull.copy(): phantm.cfg.Trees.PHPNull
3117 ===> phantm.cfg.Trees.AssignBinary.equals(x$1: Any): Boolean
5521 ===> phantm.types.TResource.productPrefix: String
5453 ===> phantm.types.TBoolean.productPrefix: String
5184 ===> phantm.types.ObjectIdUse.toString(): String
119 ===> phantm.Settings.apply$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
2315 ===> phantm.ast.Trees.Ternary.cond: phantm.ast.Trees.Expression
4660 ===> phantm.phases.PureStatementsChecks.copy$default$2: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
1632 ===> phantm.ast.Trees.Foreach.unapply(x$0: phantm.ast.Trees.Foreach): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Variable, Boolean, Option[phantm.ast.Trees.Variable], Boolean, phantm.ast.Trees.Statement)]
2282 ===> phantm.ast.Trees.SmallerEqual.copy$default$2: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
5736 ===> phantm.util.JavaListIteratorWrapper.toString(): String
4947 ===> phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
3313 ===> phantm.cfg.Trees.Return.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
1637 ===> phantm.ast.Trees.Void.productArity: Int
2376 ===> phantm.ast.Trees.Exit.productPrefix: String
5424 ===> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
592 ===> phantm.ast.Trees.CFFinal.productPrefix: String
5480 ===> phantm.types.TFalse.readResolve(): Object
4576 ===> phantm.phases.PhaseSeq.<init>(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq
2317 ===> phantm.ast.Trees.Ternary.elze: phantm.ast.Trees.Expression
4893 ===> phantm.symbols.ClassSymbol.name: String
2993 ===> phantm.cfg.LabeledDirectedGraphImp.groups: List[LabeledDirectedGraphImp.this.Group]
5296 ===> phantm.types.TRealObject.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
2758 ===> phantm.ast.Trees.PHPString.toString(): String
5573 ===> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
5455 ===> phantm.types.TBoolean.productElement(x$1: Int): Any
3596 ===> phantm.cfg.Trees.PHPFloat.canEqual(x$1: Any): Boolean
2673 ===> phantm.ast.Trees.VoidExpr.productIterator: Iterator[Any]
1712 ===> phantm.ast.Trees.NextArrayEntry.canEqual(x$1: Any): Boolean
4714 ===> phantm.phases.CollectSymbols.classList: List[(phantm.symbols.ClassSymbol, phantm.ast.Trees.ClassDecl)]
2152 ===> phantm.ast.Trees.ShiftLeft.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
2921 ===> phantm.cfg.LabeledDirectedGraph.entry: LabeledDirectedGraph.this.Vertex
3516 ===> phantm.cfg.Trees.NextArrayEntry.<init>(): phantm.cfg.Trees.NextArrayEntry.type
4914 ===> phantm.symbols.ClassSymbol.getProperties: List[phantm.symbols.PropertySymbol]
3842 ===> phantm.cfg.Trees.Ternary.copy(cond: phantm.cfg.Trees.SimpleValue,then: phantm.cfg.Trees.SimpleValue,elze: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Ternary
2969 ===> phantm.cfg.EdgeImp.<init>(): phantm.cfg.EdgeImp.type
3435 ===> phantm.cfg.Trees.ClassRefUnknown.toString(): String
1120 ===> phantm.ast.Trees.FunctionDecl.copy$default$2: List[phantm.ast.Trees.ArgumentDecl] @scala.annotation.unchecked.uncheckedVariance
2313 ===> phantm.ast.Trees.InstanceOf.unapply(x$0: phantm.ast.Trees.InstanceOf): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.ClassRef)]
2626 ===> phantm.ast.Trees.MethodCall.obj: phantm.ast.Trees.Expression
5932 ===> phantm.util.UFloat.productArity: Int
4298 ===> phantm.helpers.CFGGraphs.copy$default$2: phantm.phases.PhasesContext @scala.annotation.unchecked.uncheckedVariance
4767 ===> phantm.phases.TypeFlowAnalysis.canEqual(x$1: Any): Boolean
3380 ===> phantm.cfg.Trees.ClassRefDynamic.productPrefix: String
4083 ===> phantm.cfg.Trees.SHIFTRIGHT.canEqual(x$1: Any): Boolean
3421 ===> phantm.cfg.Trees.ClassRefCalledClass.apply(): phantm.cfg.Trees.ClassRefCalledClass
2374 ===> phantm.ast.Trees.Exit.copy(value: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.Exit
2761 ===> phantm.ast.Trees.PHPString.toString(): String
1695 ===> phantm.ast.Trees.ArrayEntry.canEqual(x$1: Any): Boolean
4458 ===> phantm.phases.CGContext.hashCode(): Int
164 ===> phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type
4260 ===> phantm.dataflow.TransferFunction.apply(node: S,x: E): E
1926 ===> phantm.ast.Trees.Mult.unapply(x$0: phantm.ast.Trees.Mult): Option[(phantm.ast.Trees.Expression, phantm.ast.Trees.Expression)]
5953 ===> phantm.util.UObjRef.hashCode(): Int
3954 ===> phantm.cfg.Trees.PLUS.productArity: Int
3092 ===> phantm.cfg.Trees.AssignUnary.productIterator: Iterator[Any]
541 ===> phantm.ast.Trees.ClassConstantDecl.productArity: Int
4248 ===> phantm.dataflow.StronglyConnectedComponents.Node.<init>(v: StronglyConnectedComponents.this.Vertex,index: Int,vindex: Int,lowlink: Int,caller: Option[StronglyConnectedComponents.this.Node],vSeq: IndexedSeq[StronglyConnectedComponents.this.Vertex]): StronglyConnectedComponents.this.Node
568 ===> phantm.ast.Trees.ConstantDecl.toString(): String
1730 ===> phantm.ast.Trees.ObjectProperty.productIterator: Iterator[Any]
2861 ===> phantm.ast.Trees.MCMethod.canEqual(x$1: Any): Boolean
4399 ===> phantm.phases.ASTIntegrityChecks.readResolve(): Object
3192 ===> phantm.cfg.Trees.IsInt.hashCode(): Int
5865 ===> phantm.util.UArray.equals(x$1: Any): Boolean
5438 ===> phantm.types.TFloatLit.productPrefix: String
792 ===> phantm.ast.Trees.DynamicClassRef.hashCode(): Int
5988 ===> phantm.util.UFalse.productPrefix: String
5536 ===> phantm.types.TNull.hashCode(): Int
4403 ===> phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
693 ===> phantm.ast.Trees.NSNone.readResolve(): Object
3626 ===> phantm.cfg.Trees.PHPTrue.canEqual(x$1: Any): Boolean
3497 ===> phantm.cfg.Trees.ArrayEntry.canEqual(x$1: Any): Boolean
1978 ===> phantm.ast.Trees.PreInc.<init>(): phantm.ast.Trees.PreInc.type
5919 ===> phantm.util.UInt.hashCode(): Int
5827 ===> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
4166 ===> phantm.cfg.Trees.BOOLEANNOT.hashCode(): Int
1467 ===> phantm.ast.Trees.Switch.toString(): String
3177 ===> phantm.cfg.Trees.IsNull.<init>(): phantm.cfg.Trees.IsNull.type
3992 ===> phantm.cfg.Trees.CONCAT.productIterator: Iterator[Any]
967 ===> phantm.ast.Trees.CastObject.productArity: Int
1535 ===> phantm.ast.Trees.Global.toString(): String
813 ===> phantm.ast.Trees.StaticClassRef.toString(): String
5303 ===> phantm.types.TRealObject.lookupMethod(index: phantm.cfg.Trees.SimpleValue,from: Option[phantm.symbols.ClassSymbol]): Option[phantm.symbols.MethodSymbol]
5080 ===> phantm.types.TypeTransferFunction.filterType(v: phantm.cfg.Trees.Variable,reft: phantm.types.Type): Unit
1392 ===> phantm.ast.Trees.While.then: phantm.ast.Trees.Statement
3682 ===> phantm.cfg.Trees.PHPThis.canEqual(x$1: Any): Boolean
1289 ===> phantm.ast.Trees.Throw.productPrefix: String
5831 ===> phantm.util.ErrorException.etn: Int
427 ===> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
1991 ===> phantm.ast.Trees.PostInc.canEqual(x$1: Any): Boolean
1269 ===> phantm.ast.Trees.Catch.copy$default$1: phantm.ast.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
1639 ===> phantm.ast.Trees.Void.productIterator: Iterator[Any]
5016 ===> phantm.types.TypeLattice.meet(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
1904 ===> phantm.ast.Trees.Div.<init>(): phantm.ast.Trees.Div.type
2679 ===> phantm.ast.Trees.VoidExpr.toString(): String
1512 ===> phantm.ast.Trees.Return.productIterator: Iterator[Any]
3195 ===> phantm.cfg.Trees.IsFloat.<init>(): phantm.cfg.Trees.IsFloat.type
1941 ===> phantm.ast.Trees.Concat.equals(x$1: Any): Boolean
2262 ===> phantm.ast.Trees.Smaller.copy$default$1: phantm.ast.Trees.Expression @scala.annotation.unchecked.uncheckedVariance
728 ===> phantm.ast.Trees.Identifier.productPrefix: String
4665 ===> phantm.phases.PureStatementsChecks.canEqual(x$1: Any): Boolean
4317 ===> phantm.helpers.Main.<init>(): phantm.helpers.Main.type
776 ===> phantm.ast.Trees.VarClassRef.toString(): String
1440 ===> phantm.ast.Trees.For.productArity: Int
1010 ===> phantm.ast.Trees.Label.canEqual(x$1: Any): Boolean
1588 ===> phantm.ast.Trees.Html.unapply(x$0: phantm.ast.Trees.Html): Option[String]
4092 ===> phantm.cfg.Trees.LT.canEqual(x$1: Any): Boolean
904 ===> phantm.ast.Trees.StaticMethodRef.copy(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef
2017 ===> phantm.ast.Trees.PostDec.rhs: phantm.ast.Trees.Variable
60 ===> phantm.Settings.productPrefix: String
3501 ===> phantm.cfg.Trees.ArrayEntry.toString(): String
5390 ===> phantm.types.TNumeric.productIterator: Iterator[Any]
3250 ===> phantm.cfg.Trees.IsResource.productPrefix: String
1088 ===> phantm.ast.Trees.OAArray.<init>(): phantm.ast.Trees.OAArray.type
5694 ===> phantm.util.IncludeResolver.inclsInstr: scala.collection.immutable.Map[(String, Int),Set[String]]
800 ===> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
4879 ===> phantm.symbols.LookupResult.<init>(): phantm.symbols.LookupResult.type
4733 ===> phantm.phases.CollectSymbols.productArity: Int
315 ===> phantm.ast.STToAST.st: phantm.parser.ParseNode
1903 ===> phantm.ast.Trees.Div.equals(x$1: Any): Boolean
4878 ===> phantm.symbols.LookupResult.equals(x$1: Any): Boolean
4834 ===> phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
895 ===> phantm.ast.Trees.DynamicMethodRef.toString(): String
3056 ===> phantm.cfg.Trees.Unset.hashCode(): Int
4181 ===> phantm.cfg.Trees.PREINC.productElement(x$1: Int): Any
3527 ===> phantm.cfg.Trees.ObjectProperty.productPrefix: String
1076 ===> phantm.ast.Trees.OAArray.<init>(array: phantm.ast.Trees.OAScalar,indexes: List[Option[phantm.ast.Trees.Expression]]): phantm.ast.Trees.OAArray
2633 ===> phantm.ast.Trees.MethodCall.copy$default$3: List[phantm.ast.Trees.CallArg] @scala.annotation.unchecked.uncheckedVariance
5454 ===> phantm.types.TBoolean.productArity: Int
2542 ===> phantm.ast.Trees.Require.productIterator: Iterator[Any]
1429 ===> phantm.ast.Trees.For.init: phantm.ast.Trees.Statement
4697 ===> phantm.phases.SymContext.equals(x$1: Any): Boolean
5829 ===> phantm.util.ErrorException.en: Int
5351 ===> phantm.types.IntKey.toString(): String
1610 ===> phantm.ast.Trees.Foreach.key: Option[phantm.ast.Trees.Variable]
5749 ===> phantm.util.Positional.col_end: Int
1971 ===> phantm.ast.Trees.PreInc.productArity: Int
4225 ===> phantm.dataflow.AnalysisAlgorithm.facts_$eq(x$1: Map[AnalysisAlgorithm.this.Vertex,E]): Unit
1852 ===> phantm.ast.Trees.Plus.lhs: phantm.ast.Trees.Expression
5440 ===> phantm.types.TFloatLit.productElement(x$1: Int): Any
5383 ===> phantm.types.TAnyArray.equals(t: Any): Boolean
4049 ===> phantm.cfg.Trees.BITWISEAND.readResolve(): Object
2547 ===> phantm.ast.Trees.Require.<init>(): phantm.ast.Trees.Require.type
510 ===> phantm.ast.Trees.MethodDecl.apply(name: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.MethodDecl
3412 ===> phantm.cfg.Trees.ClassRefCalledClass.productPrefix: String
1550 ===> phantm.ast.Trees.Static.equals(x$1: Any): Boolean
1111 ===> phantm.ast.Trees.OAMethod.readResolve(): Object
5863 ===> phantm.util.UArray.hashCode(): Int
927 ===> phantm.ast.Trees.CastInt.toString(): String
2099 ===> phantm.ast.Trees.BitwiseAnd.productElement(x$1: Int): Any
4023 ===> phantm.cfg.Trees.BOOLEANOR.<init>(): phantm.cfg.Trees.BOOLEANOR.type
3725 ===> phantm.cfg.Trees.Cast.copy(to: phantm.ast.Trees.CastType,e: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Cast
3408 ===> phantm.cfg.Trees.ClassRefFixed.readResolve(): Object
3217 ===> phantm.cfg.Trees.IsArray.productIterator: Iterator[Any]
2881 ===> phantm.ast.Trees.MCNamespace.toString(): String
84 ===> phantm.InlineLeaves.hashCode(): Int
5811 ===> phantm.util.Reporter.clear: Unit
5155 ===> phantm.types.TClass.toString(): String
4216 ===> phantm.cfg.Trees.SILENCE.productArity: Int
4000 ===> phantm.cfg.Trees.MOD.productElement(x$1: Int): Any
335 ===> phantm.ast.STToAST.method_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
4251 ===> phantm.dataflow.StronglyConnectedComponents.SCC.adjSCC: Set[StronglyConnectedComponents.this.SCC]
2595 ===> phantm.ast.Trees.New.productArity: Int
2707 ===> phantm.ast.Trees.PHPFalse.toString(): String
1818 ===> phantm.ast.Trees.Assign.copy(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
4707 ===> phantm.phases.CollectSymbols.classCycleDetectionSet_$eq(x$1: scala.collection.mutable.HashSet[phantm.ast.Trees.ClassDecl]): Unit
5895 ===> phantm.util.UString.copy(str: String): phantm.util.UString
5844 ===> phantm.util.ErrorException.hashCode(): Int
2180 ===> phantm.ast.Trees.ShiftRight.equals(x$1: Any): Boolean
577 ===> phantm.ast.Trees.CFNormal.productIterator: Iterator[Any]
5221 ===> phantm.types.ObjectIdDump.<init>(): phantm.types.ObjectIdDump.type
5144 ===> phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
773 ===> phantm.ast.Trees.VarClassRef.productIterator: Iterator[Any]
4267 ===> phantm.helpers.ASTGraph.escape(s: String): String
132 ===> phantm.Settings.apply$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
390 ===> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
3560 ===> phantm.cfg.Trees.NoVar.productArity: Int
1179 ===> phantm.ast.Trees.Import.productArity: Int
2373 ===> phantm.ast.Trees.Exit.<init>(value: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.Exit
2914 ===> phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit
3334 ===> phantm.cfg.Trees.Expression.<init>(): phantm.cfg.Trees.Expression
3126 ===> phantm.cfg.Trees.Error.productPrefix: String
3576 ===> phantm.cfg.Trees.PHPLong.productPrefix: String
195 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.copy$default$1: phantm.types.Type @scala.annotation.unchecked.uncheckedVariance
4553 ===> phantm.phases.Phase.description: String
3789 ===> phantm.cfg.Trees.ArrayCurIsValid.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurIsValid
29 ===> phantm.Settings.dumps: List[String]
1152 ===> phantm.ast.Trees.NamespaceStart.readResolve(): Object
5785 ===> phantm.util.Reporter.Error.productElement(x$1: Int): Any
2500 ===> phantm.ast.Trees.Empty.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
4284 ===> phantm.helpers.CheckContext.apply(): phantm.helpers.CheckContext
5316 ===> phantm.types.ArrayKey.<init>(): phantm.types.ArrayKey
5620 ===> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
1780 ===> phantm.ast.Trees.ListVar.copy(vars: List[Option[phantm.ast.Trees.Variable]]): phantm.ast.Trees.ListVar
2494 ===> phantm.ast.Trees.Isset.apply(vs: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Isset
5906 ===> phantm.util.UString.toString(): String
4776 ===> phantm.symbols.Symbolic.$init$(): Unit
2894 ===> phantm.cfg.ASTToCFG.Emit.pc: Vertex
885 ===> phantm.ast.Trees.DynamicMethodRef.ex: phantm.ast.Trees.Expression
2746 ===> phantm.ast.Trees.PHPFloat.unapply(x$0: phantm.ast.Trees.PHPFloat): Option[Float]
5604 ===> phantm.util.API.Reader.optArg(node: scala.xml.Node,name: String): Boolean
1252 ===> phantm.ast.Trees.Try.productArity: Int
5434 ===> phantm.types.TFloatLit.<init>(value: Float): phantm.types.TFloatLit
810 ===> phantm.ast.Trees.StaticClassRef.toString(): String
127 ===> phantm.Settings.apply$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
2088 ===> phantm.ast.Trees.BooleanXor.apply(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanXor
5163 ===> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
5662 ===> phantm.util.DumpCollector.toString(): String
4673 ===> phantm.phases.PureStatementsChecks.readResolve(): Object
2136 ===> phantm.ast.Trees.BitwiseXor.productArity: Int
4351 ===> phantm.phases.APIImportationPhase.<init>(): phantm.phases.APIImportationPhase.type
2173 ===> phantm.ast.Trees.ShiftRight.productPrefix: String
53 ===> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
2909 ===> phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement
44 ===> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
3148 ===> phantm.cfg.Trees.Assume.productElement(x$1: Int): Any
1731 ===> phantm.ast.Trees.ObjectProperty.canEqual(x$1: Any): Boolean
4970 ===> phantm.types.TypeFlowAnalyzer.copy$default$2: phantm.symbols.Scope @scala.annotation.unchecked.uncheckedVariance
3809 ===> phantm.cfg.Trees.Constant.productArity: Int
941 ===> phantm.ast.Trees.CastDouble.productElement(x$1: Int): Any
4164 ===> phantm.cfg.Trees.BOOLEANNOT.productIterator: Iterator[Any]
2121 ===> phantm.ast.Trees.BitwiseOr.hashCode(): Int
3824 ===> phantm.cfg.Trees.ClassConstant.copy$default$1: phantm.cfg.Trees.ClassRef @scala.annotation.unchecked.uncheckedVariance
2790 ===> phantm.ast.Trees.MCFile.<init>(): phantm.ast.Trees.MCFile.type
4629 ===> phantm.phases.PhasesContext.$lessinit$greater$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
4591 ===> phantm.phases.PhaseSeq.unapply(x$0: phantm.phases.PhaseSeq): Option[Seq[phantm.phases.Phase]]
4125 ===> phantm.cfg.Trees.EQUALS.productArity: Int
2983 ===> phantm.cfg.LabeledDirectedGraphImp.V: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
5277 ===> phantm.types.TObjectRef.<init>(id: phantm.types.ObjectId): phantm.types.TObjectRef
5625 ===> phantm.util.ConstantsResolver.productPrefix: String
4847 ===> phantm.symbols.MVProtected.stricterThan(o: phantm.symbols.MemberVisibility): Boolean
3991 ===> phantm.cfg.Trees.CONCAT.productElement(x$1: Int): Any
3574 ===> phantm.cfg.Trees.PHPLong.copy(value: Long): phantm.cfg.Trees.PHPLong
1846 ===> phantm.ast.Trees.Clone.equals(x$1: Any): Boolean
200 ===> phantm.annotations.SourceAnnotations.Parser.AnyEntry.canEqual(x$1: Any): Boolean
2753 ===> phantm.ast.Trees.PHPString.productArity: Int
4798 ===> phantm.symbols.Scope.variables: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]
182 ===> phantm.annotations.AnnotationsStore.collectFunctionRet(fs: phantm.symbols.FunctionSymbol,t: phantm.types.Type): Unit
3041 ===> phantm.cfg.Trees.nextID: Int
4395 ===> phantm.phases.ASTIntegrityChecks.<init>(): phantm.phases.ASTIntegrityChecks.type
2663 ===> phantm.ast.Trees.StaticMethodCall.<init>(): phantm.ast.Trees.StaticMethodCall.type
3525 ===> phantm.cfg.Trees.ObjectProperty.copy$default$1: phantm.cfg.Trees.SimpleValue @scala.annotation.unchecked.uncheckedVariance
4709 ===> phantm.phases.CollectSymbols.ifaceCycleDetectionSet_$eq(x$1: scala.collection.mutable.HashSet[phantm.ast.Trees.InterfaceDecl]): Unit
4161 ===> phantm.cfg.Trees.BOOLEANNOT.productPrefix: String
505 ===> phantm.ast.Trees.MethodDecl.hashCode(): Int
1840 ===> phantm.ast.Trees.Clone.productArity: Int
1119 ===> phantm.ast.Trees.FunctionDecl.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
1291 ===> phantm.ast.Trees.Throw.productElement(x$1: Int): Any
4700 ===> phantm.phases.SymContext.apply(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
4394 ===> phantm.phases.ASTIntegrityChecks.equals(x$1: Any): Boolean
1709 ===> phantm.ast.Trees.NextArrayEntry.productArity: Int
1587 ===> phantm.ast.Trees.Html.apply(content: String): phantm.ast.Trees.Html
1993 ===> phantm.ast.Trees.PostInc.toString(): String
1519 ===> phantm.ast.Trees.Return.apply(expr: phantm.ast.Trees.Expression): phantm.ast.Trees.Return
5358 ===> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
666 ===> phantm.ast.Trees.MFFinal.productArity: Int
831 ===> phantm.ast.Trees.CalledClass.readResolve(): Object
4147 ===> phantm.cfg.Trees.NOTEQUALS.hashCode(): Int
4969 ===> phantm.types.TypeFlowAnalyzer.copy$default$1: phantm.cfg.ControlFlowGraph @scala.annotation.unchecked.uncheckedVariance
2867 ===> phantm.ast.Trees.MCMethod.apply(): phantm.ast.Trees.MCMethod
5069 ===> phantm.types.TypeTransferFunction.getCheckType(sv: phantm.cfg.Trees.SimpleValue,ct: phantm.types.Type,hasTmp: Boolean): (Option[phantm.cfg.Trees.SimpleVariable], phantm.types.Type, Boolean)
4486 ===> phantm.phases.CallGraphGeneration.copy(node: phantm.ast.Trees.Tree,context: phantm.phases.CGContext,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration
1680 ===> phantm.ast.Trees.VariableVariable.<init>(): phantm.ast.Trees.VariableVariable.type
5939 ===> phantm.util.UFloat.<init>(): phantm.util.UFloat.type
963 ===> phantm.ast.Trees.CastBool.toString(): String
3204 ===> phantm.cfg.Trees.IsBool.<init>(): phantm.cfg.Trees.IsBool.type
1161 ===> phantm.ast.Trees.Namespaced.productElement(x$1: Int): Any
1586 ===> phantm.ast.Trees.Html.toString(): String
2003 ===> phantm.ast.Trees.PreDec.copy$default$1: phantm.ast.Trees.Variable @scala.annotation.unchecked.uncheckedVariance
5416 ===> phantm.types.TIntLit.toString(): String
2669 ===> phantm.ast.Trees.VoidExpr.copy(): phantm.ast.Trees.VoidExpr
5136 ===> phantm.types.TAnyClass.productElement(x$1: Int): Any
3326 ===> phantm.cfg.Trees.Skip.<init>(): phantm.cfg.Trees.Skip.type
5362 ===> phantm.types.TArray.<init>(globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
1724 ===> phantm.ast.Trees.ObjectProperty.copy(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty
2511 ===> phantm.ast.Trees.Empty.apply(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Empty
10 ===> phantm.Main.main(args: Array[String]): Unit
418 ===> phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
5329 ===> phantm.types.StringKey.canEqual(x$1: Any): Boolean
2715 ===> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
120 ===> phantm.Settings.apply$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
1596 ===> phantm.ast.Trees.Unset.productElement(x$1: Int): Any
324 ===> phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
3886 ===> phantm.cfg.Trees.StaticMethodCall.productElement(x$1: Int): Any
1276 ===> phantm.ast.Trees.Catch.canEqual(x$1: Any): Boolean
859 ===> phantm.ast.Trees.DynamicFunctionRef.hashCode(): Int
2232 ===> phantm.ast.Trees.Equal.toString(): String
5764 ===> phantm.util.ENotice.productElement(x$1: Int): Any
3440 ===> phantm.cfg.Trees.TempID.<init>(value: String): phantm.cfg.Trees.TempID
1841 ===> phantm.ast.Trees.Clone.productElement(x$1: Int): Any
5273 ===> phantm.types.TPreciseObject.<init>(): phantm.types.TPreciseObject
4823 ===> phantm.symbols.GlobalSymbols.getFunctions: List[phantm.symbols.FunctionSymbol]
3729 ===> phantm.cfg.Trees.Cast.productArity: Int
3239 ===> phantm.cfg.Trees.IsObject.readResolve(): Object
3097 ===> phantm.cfg.Trees.AssignUnary.toString(): String
2098 ===> phantm.ast.Trees.BitwiseAnd.productArity: Int
2740 ===> phantm.ast.Trees.PHPFloat.hashCode(): Int
415 ===> phantm.ast.STToAST.varIdentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
5106 ===> phantm.types.TypeTransferFunction.apply$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
6024 ===> phantm.util.Unserializer.importToEnv(envInit: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
5824 ===> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
3880 ===> phantm.cfg.Trees.StaticMethodCall.copy(cl: phantm.cfg.Trees.ClassRef,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.StaticMethodCall
5828 ===> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
