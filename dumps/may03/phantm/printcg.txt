phantm.ast.Trees.InterfaceDecl.<init>(name: phantm.ast.Trees.NSIdentifier,interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.InterfaceDecl ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.cfg.Trees.Empty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.is_reference(n: phantm.parser.ParseNode): Boolean
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.method_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> scala.Tuple4.<init>(_1: T1,_2: T2,_3: T3,_4: T4): (T1, T2, T3, T4)
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.method_body(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> scala.Tuple4.<init>(_1: T1,_2: T2,_3: T3,_4: T4): (T1, T2, T3, T4)
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> scala.Tuple4.<init>(_1: T1,_2: T2,_3: T3,_4: T4): (T1, T2, T3, T4)
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.Trees.MethodDecl.<init>(name: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.MethodDecl
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl]
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> scala.Tuple4.<init>(_1: T1,_2: T2,_3: T3,_4: T4): (T1, T2, T3, T4)
phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.parser.Parser.clearPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.Trees.InstanceOf.productElement(x$1: Int): Any ==> phantm.ast.Trees.InstanceOf.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.InstanceOf.productElement(x$1: Int): Any ==> phantm.ast.Trees.InstanceOf.rhs: phantm.ast.Trees.ClassRef
phantm.ast.Trees.InstanceOf.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Include.productElement(x$1: Int): Any ==> phantm.ast.Trees.Include.path: phantm.ast.Trees.Expression
phantm.ast.Trees.Include.productElement(x$1: Int): Any ==> phantm.ast.Trees.Include.once: Boolean
phantm.ast.Trees.Include.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext ==> java.lang.Object.<init>(): Object
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> phantm.annotations.SourceAnnotations.Parser.variable: phantm.annotations.SourceAnnotations.Parser.Parser[String]
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> phantm.annotations.SourceAnnotations.Parser.variable: phantm.annotations.SourceAnnotations.Parser.Parser[String]
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.annotations.SourceAnnotations.Parser.filterLines(comment: String,tag: String): List[String] ==> phantm.annotations.SourceAnnotations.Parser.filterLines(lines: List[String],tag: String): List[String]
phantm.ast.Trees.THArray.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.exportMGPath: Option[String]
phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.summaryOnly: Boolean
phantm.ast.Trees.FunctionDecl.<init>(name: phantm.ast.Trees.NSIdentifier,args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.FunctionDecl ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess]
phantm.types.ObjectIdTmp.productElement(x$1: Int): Any ==> phantm.types.ObjectIdTmp.offset: Int
phantm.types.ObjectIdTmp.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.ast.STToAST.static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.cfg.Trees.BITSIWENOT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.thisObj: Option[phantm.types.TObjectRef]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.getGlobalsType: phantm.types.Type
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TObjectRef.<init>(id: phantm.types.ObjectId): phantm.types.TObjectRef
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.ObjectId.<init>(pos: Int,typ: phantm.types.ObjectIdType): phantm.types.ObjectId
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.thisObj: Option[phantm.types.TObjectRef]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.cfg.Trees.ClassProperty.<init>(symbol: phantm.symbols.PropertySymbol): phantm.cfg.Trees.ClassProperty
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TArray.<init>(global: phantm.types.Type): phantm.types.TArray
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.symbols.GlobalSymbols.getClasses: List[phantm.symbols.ClassSymbol]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.initIfNotExist(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.ObjectStore
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TArray.<init>(global: phantm.types.Type): phantm.types.TArray
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.util.GlobalAnalysisResults.endGlobals: Option[phantm.types.TypeEnvironment]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.util.GlobalAnalysisResults.reachableFromMain: Map[phantm.symbols.FunctionSymbol,Set[phantm.symbols.FunctionSymbol]]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.Some.<init>(x: A): Some[A]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.cfg.Trees.Identifier.<init>(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.symbols.MethodSymbol.cs: phantm.symbols.ClassSymbol
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.scope: phantm.symbols.Scope
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.getGlobalsType: phantm.types.Type
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.symbols.ClassSymbol.getStaticProperties: List[phantm.symbols.PropertySymbol]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.util.GlobalAnalysisResults.endGlobals: Option[phantm.types.TypeEnvironment]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.getGlobalsType: phantm.types.Type
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.scope: phantm.symbols.Scope
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.util.GlobalAnalysisResults.globalCalls: Map[phantm.symbols.FunctionSymbol,Map[String,phantm.types.TypeEnvironment]]
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.BaseTypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeFlowAnalyzer.baseEnvInit: phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment ==> phantm.types.ObjectId.<init>(pos: Int,typ: phantm.types.ObjectIdType): phantm.types.ObjectId
phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.ast.Trees.Global.productElement(x$1: Int): Any ==> phantm.ast.Trees.Global.vars: List[phantm.ast.Trees.Variable]
phantm.ast.Trees.Global.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.ObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.ast.Trees.New.productElement(x$1: Int): Any ==> phantm.ast.Trees.New.cl: phantm.ast.Trees.ClassRef
phantm.ast.Trees.New.productElement(x$1: Int): Any ==> phantm.ast.Trees.New.args: List[phantm.ast.Trees.CallArg]
phantm.ast.Trees.New.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.LabelDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.LabelDecl.name: phantm.ast.Trees.Identifier
phantm.ast.Trees.LabelDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.SourceAnnotations.Parser.Entry.productElement(x$1: Int): Any ==> phantm.annotations.SourceAnnotations.Parser.Entry.s: String
phantm.annotations.SourceAnnotations.Parser.Entry.productElement(x$1: Int): Any ==> phantm.annotations.SourceAnnotations.Parser.Entry.t: phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.Entry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.LabeledDirectedGraphImp.Group.<init>(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.CallArg.productElement(x$1: Int): Any ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.ast.Trees.CallArg.productElement(x$1: Int): Any ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.ast.Trees.CallArg.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.FuncRef.<init>(id: phantm.ast.Trees.NSIdentifier): phantm.cfg.Trees.FuncRef ==> java.lang.Object.<init>(): Object
phantm.types.StringKey.productElement(x$1: Int): Any ==> phantm.types.StringKey.v: String
phantm.types.StringKey.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Position.<init>(): phantm.util.Position ==> java.lang.Object.<init>(): Object
phantm.util.Reporter.emitQuickFix(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitQuickFix(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line: Int
phantm.util.Reporter.emitQuickFix(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line: Int
phantm.util.Reporter.emitQuickFix(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.file: Option[String]
phantm.util.Reporter.emitQuickFix(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.ast.Trees.Plus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.StaticMethodCall.<init>(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.typeFlowFilter: List[String]
phantm.cfg.LabeledDirectedGraphImp.Group.newSubGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group ==> phantm.cfg.LabeledDirectedGraphImp.Group.subgroups: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.Group.newSubGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group ==> phantm.cfg.LabeledDirectedGraphImp.Group.subgroups_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
phantm.cfg.LabeledDirectedGraphImp.Group.newSubGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group ==> phantm.cfg.LabeledDirectedGraphImp.Group.<init>(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group
phantm.cfg.LabeledDirectedGraphImp.Group.newSubGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group ==> phantm.cfg.LabeledDirectedGraphImp.Group.subgroups: List[LabeledDirectedGraphImp.this.Group]
phantm.ast.Trees.DynamicObjectProperty.productElement(x$1: Int): Any ==> phantm.ast.Trees.DynamicObjectProperty.obj: phantm.ast.Trees.Expression
phantm.ast.Trees.DynamicObjectProperty.productElement(x$1: Int): Any ==> phantm.ast.Trees.DynamicObjectProperty.property: phantm.ast.Trees.Expression
phantm.ast.Trees.DynamicObjectProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.extends_from(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.StaticClassRef]
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.interface_extends_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.<init>(name: phantm.ast.Trees.NSIdentifier,interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.InterfaceDecl
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.class_entry_type(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassFlag
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.<init>(name: phantm.ast.Trees.NSIdentifier,flags: phantm.ast.Trees.ClassFlag,parent: Option[phantm.ast.Trees.StaticClassRef],interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],static_props: List[phantm.ast.Trees.PropertyDecl],props: List[phantm.ast.Trees.PropertyDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.ClassDecl
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.implements_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.helpers.Lint.<init>(): phantm.helpers.Lint ==> java.lang.Object.<init>(): Object
phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TIntLit.value: Long
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.importRules_$eq(x$1: scala.collection.immutable.Map[String,List[String]]): Unit
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.nsContext_$eq(x$1: phantm.ast.Trees.NSIdentifier): Unit
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.importRules: scala.collection.immutable.Map[String,List[String]]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.<init>(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.<init>(name: phantm.ast.Trees.NSIdentifier,flags: phantm.ast.Trees.ClassFlag,parent: Option[phantm.ast.Trees.StaticClassRef],interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],static_props: List[phantm.ast.Trees.PropertyDecl],props: List[phantm.ast.Trees.PropertyDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.ClassDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.to: String
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.src: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.value: phantm.ast.Trees.Expression
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.body: List[phantm.ast.Trees.Statement]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.<init>(name: phantm.ast.Trees.NSIdentifier,args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.FunctionDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.nsContext_$eq(x$1: phantm.ast.Trees.NSIdentifier): Unit
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.<init>(name: phantm.ast.Trees.NSIdentifier,interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.InterfaceDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.v: phantm.ast.Trees.NSIdentifier
phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Expression.<init>(): phantm.cfg.Trees.Expression
phantm.ast.Trees.Concat.productElement(x$1: Int): Any ==> phantm.ast.Trees.Concat.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Concat.productElement(x$1: Int): Any ==> phantm.ast.Trees.Concat.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Concat.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.UArray.productElement(x$1: Int): Any ==> phantm.util.UArray.entries: Map[phantm.util.UValue,phantm.util.UValue]
phantm.util.UArray.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.StaticFunctionRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.VarFunctionRef.v: phantm.ast.Trees.Variable
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.DynamicFunctionRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicFunctionRef
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.DynamicFunctionRef.ex: phantm.ast.Trees.Expression
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.VarFunctionRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarFunctionRef
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.types.TypeEnvironment.getGlobalsType: phantm.types.Type ==> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
phantm.types.TypeEnvironment.getGlobalsType: phantm.types.Type ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.types.TypeEnvironment.getGlobalsType: phantm.types.Type ==> phantm.types.TypeEnvironment.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[(phantm.cfg.Trees.SimpleVariable, phantm.types.Type),(phantm.types.ArrayKey, phantm.types.Type)] with Serializable
phantm.ast.Trees.ClassRef.<init>(): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.types.ObjectIdType.<init>(): phantm.types.ObjectIdType ==> java.lang.Object.<init>(): Object
phantm.dataflow.StronglyConnectedComponents.<init>(cfg: phantm.cfg.LabeledDirectedGraphImp[S]): phantm.dataflow.StronglyConnectedComponents[S] ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.ClassProperty.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassProperty.cl: phantm.ast.Trees.ClassRef
phantm.ast.Trees.ClassProperty.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassProperty.property: phantm.ast.Trees.Variable
phantm.ast.Trees.ClassProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.Trees.CastBool.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.OAExpression.productElement(x$1: Int): Any ==> phantm.ast.Trees.OAExpression.exp: phantm.ast.Trees.Expression
phantm.ast.Trees.OAExpression.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.ObjectProperty.<init>(obj: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ObjectProperty
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol]
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.Settings.verbosity: Int
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.VariableVar.<init>(v: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableVar
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.NextArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.NextArrayEntry
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.DynamicObjectProperty.property: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.VariableClassProperty.<init>(cl: phantm.cfg.Trees.ClassRef,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableClassProperty
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.ClassProperty.cl: phantm.ast.Trees.ClassRef
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.VariableVariable.name: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.ArrayEntry.index: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.ObjectProperty.<init>(obj: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ObjectProperty
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.ObjectProperty.obj: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.ArrayEntry.array: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.DynamicObjectProperty.obj: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.ObjectProperty.property: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.NextArrayEntry.array: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.NoVar.<init>(): phantm.cfg.Trees.NoVar
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.ClassProperty.<init>(symbol: phantm.symbols.PropertySymbol): phantm.cfg.Trees.ClassProperty
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.ast.Trees.ClassProperty.property: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.Settings.get: phantm.Settings
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CFGGenerator.productElement(x$1: Int): Any ==> phantm.phases.CFGGenerator.initCtx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.productElement(x$1: Int): Any ==> phantm.phases.CFGGenerator.node: phantm.ast.Trees.Tree
phantm.phases.CFGGenerator.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.includedFiles_$eq(x$1: Set[String]): Unit
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.includedFiles_$eq(x$1: Set[String]): Unit
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.SymbolsChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.CFGGenerationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.ASTChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.PureStatementsPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.phases.SymbolsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.DynamicClassRef.ex: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.CalledClass.<init>(): phantm.ast.Trees.CalledClass
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.DynamicClassRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.VarClassRef.v: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.VarClassRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type ==> phantm.symbols.Symbol.userland_$eq(x$1: Boolean): Unit
phantm.types.TRealObject.toString(): String ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.types.TRealObject.toString(): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TRealObject.toString(): String ==> phantm.types.TClass.cs: phantm.symbols.ClassSymbol
phantm.types.TRealObject.toString(): String ==> phantm.symbols.ClassSymbol.name: String
phantm.types.TRealObject.toString(): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TRealObject.toString(): String ==> phantm.types.RecProtection.objectToStringDepth: Int
phantm.types.TRealObject.toString(): String ==> phantm.types.RecProtection.objectToStringDepth: Int
phantm.types.TRealObject.toString(): String ==> phantm.types.RecProtection.objectToStringDepth: Int
phantm.types.TRealObject.toString(): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TRealObject.toString(): String ==> phantm.types.RecProtection.objectToStringDepth_$eq(x$1: Int): Unit
phantm.types.TRealObject.toString(): String ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TRealObject.toString(): String ==> phantm.types.RecProtection.objectToStringDepth_$eq(x$1: Int): Unit
phantm.types.TRealObject.toString(): String ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.ast.Trees.InstanceOf.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.ClassRef): phantm.ast.Trees.InstanceOf ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean) ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit ==> phantm.cfg.ASTToCFG.Emit.pc: Vertex
phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.types.ObjectIdDump.<init>(offset: Int): phantm.types.ObjectIdDump ==> phantm.types.ObjectIdType.<init>(): phantm.types.ObjectIdType
phantm.cfg.Trees.MethodCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.MethodCall.receiver: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.MethodCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.MethodCall.id: phantm.ast.Trees.Identifier
phantm.cfg.Trees.MethodCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.MethodCall.params: List[phantm.cfg.Trees.SimpleValue]
phantm.cfg.Trees.MethodCall.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.VariableVariable.productElement(x$1: Int): Any ==> phantm.ast.Trees.VariableVariable.name: phantm.ast.Trees.Expression
phantm.ast.Trees.VariableVariable.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.method_body(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.method_body(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.method_body(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.method_body(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.method_body(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.Trees.Return.<init>(expr: phantm.ast.Trees.Expression): phantm.ast.Trees.Return ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> phantm.ast.Trees.THObject.cl: phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint ==> phantm.ast.Trees.THObject.<init>(cl: phantm.ast.Trees.ClassRef): phantm.ast.Trees.THObject
phantm.cfg.Trees.IDENTICAL.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.PreDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreDec ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.util.API.Reader.load: AnyVal ==> scala.Tuple4.<init>(_1: T1,_2: T2,_3: T3,_4: T4): (T1, T2, T3, T4)
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.PropertySymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.PropertySymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ClassConstantSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ClassConstantSymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ClassSymbol.<init>(name: String,parent: Option[phantm.symbols.ClassSymbol],ifaces: List[phantm.symbols.IfaceSymbol]): phantm.symbols.ClassSymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.optArg(node: scala.xml.Node,name: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.optArg(node: scala.xml.Node,name: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.util.API.Reader.load: AnyVal ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ArgumentSymbol.<init>(name: String,byref: Boolean,optional: Boolean): phantm.symbols.ArgumentSymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.PropertySymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.PropertySymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ArgumentSymbol.<init>(name: String,byref: Boolean,optional: Boolean): phantm.symbols.ArgumentSymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.optArg(node: scala.xml.Node,name: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.FunctionSymbol.<init>(name: String): phantm.symbols.FunctionSymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.optArg(node: scala.xml.Node,name: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Reporter.error(msg: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.API.Reader.load: AnyVal ==> java.lang.Throwable.getMessage(): String
phantm.util.API.Reader.load: AnyVal ==> scala.MatchError.getMessage(): String
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.optArg(node: scala.xml.Node,name: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.FunctionAnnotation.isPure_$eq(x$1: Boolean): Unit
phantm.util.API.Reader.load: AnyVal ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.API.Reader.load: AnyVal ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Reader.load: AnyVal ==> scala.Some.<init>(x: A): Some[A]
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.optArg(node: scala.xml.Node,name: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.util.Reporter.error(msg: String): Boolean
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> scala.Tuple4.<init>(_1: T1,_2: T2,_3: T3,_4: T4): (T1, T2, T3, T4)
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.MethodSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.MethodSymbol
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.symbols.GlobalSymbols.lookupFunction(n: String): Option[phantm.symbols.FunctionSymbol]
phantm.util.API.Reader.load: AnyVal ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.annotations.FunctionAnnotation.isPure_$eq(x$1: Boolean): Unit
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.util.API.Reader.load: AnyVal ==> phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos
phantm.ast.Trees.Minus.productElement(x$1: Int): Any ==> phantm.ast.Trees.Minus.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Minus.productElement(x$1: Int): Any ==> phantm.ast.Trees.Minus.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Minus.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.MVProtected.stricterThan(o: phantm.symbols.MemberVisibility): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Require.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Require
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Include.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Include
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Include.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Include
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Isset.<init>(vs: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Isset
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Require.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Require
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Eval.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Eval
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Empty.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Empty
phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.util.Unserializer.uValueToField(v: phantm.util.UValue): String ==> phantm.util.UnserializeException.<init>(msg: String): phantm.util.UnserializeException
phantm.util.Unserializer.uValueToField(v: phantm.util.UValue): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToField(v: phantm.util.UValue): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToField(v: phantm.util.UValue): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToField(v: phantm.util.UValue): String ==> phantm.util.UString.str: String
phantm.cfg.EdgeImp.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.EdgeImp.productElement(x$1: Int): Any ==> phantm.cfg.EdgeImp.v1: phantm.cfg.VertexImp[L]
phantm.cfg.EdgeImp.productElement(x$1: Int): Any ==> phantm.cfg.EdgeImp.lab: L
phantm.cfg.EdgeImp.productElement(x$1: Int): Any ==> phantm.cfg.EdgeImp.v2: phantm.cfg.VertexImp[L]
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.out_$eq(x$1: Set[phantm.cfg.EdgeImp[L]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.EdgeImp.<init>(v1: phantm.cfg.VertexImp[L],lab: L,v2: phantm.cfg.VertexImp[L]): phantm.cfg.EdgeImp[L]
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.in_$eq(x$1: Set[phantm.cfg.EdgeImp[L]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.in: Set[phantm.cfg.EdgeImp[L]]
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.edges_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.out: Set[phantm.cfg.EdgeImp[L]]
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.edges: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]): Unit
phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int ==> phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int
phantm.cfg.Trees.EQUALS.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.ArrayCurKey.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurKey ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ArrayCurIsValid.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurIsValid ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Print.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Print
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.For.then: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Continue.level: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.FreshVariable.apply(prefix: String): phantm.cfg.Trees.TempID
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.ArrayCurIsValid.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurIsValid
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.ArrayNext.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayNext
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Assign.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.PHPInteger.value: Long
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.InitVariable.init: Option[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Foreach.keybyref: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Foreach.key: Option[phantm.ast.Trees.Variable]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.Settings.get: phantm.Settings
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.InitVariable.v: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.For.init: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.For.cond: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.InitVariable.v: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.PHPInteger.value: Long
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.InitVariable.init: Option[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Label.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Throw.ex: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.PHPNull.<init>(): phantm.cfg.Trees.PHPNull
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.symbols.Scope.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Equal.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Assign.byref: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.DoWhile.body: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Switch.expr: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Print.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Print
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Goto.to: phantm.ast.Trees.Label
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Assign.vari: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.ArrayCurKey.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurKey
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Html.content: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Unset.vars: List[phantm.ast.Trees.Variable]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Return.expr: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.LabelDecl.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Unset.<init>(variable: phantm.cfg.Trees.Variable): phantm.cfg.Trees.Unset
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.For.step: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Foreach.as: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Foreach.what: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Break.level: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Try.body: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.ArrayCurIsValid.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurIsValid
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Foreach.asbyref: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.While.then: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.While.cond: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Break.level: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.DoWhile.cond: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Identifier.<init>(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.If.then: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Try.catches: List[phantm.ast.Trees.Catch]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Foreach.body: phantm.ast.Trees.Statement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Return.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Return
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Static.vars: List[phantm.ast.Trees.InitVariable]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.If.elze: Option[phantm.ast.Trees.Statement]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Continue.level: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.ArrayCurElement.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurElement
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.If.cond: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Global.vars: List[phantm.ast.Trees.Variable]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Echo.exprs: List[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.ast.Trees.Switch.cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.Settings.verbosity: Int
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.Trees.AssumeProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssumeProperty.prop: phantm.cfg.Trees.Property
phantm.cfg.Trees.AssumeProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssumeProperty.vs: List[phantm.cfg.Trees.Variable]
phantm.cfg.Trees.AssumeProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.Trees.OAExpression.<init>(exp: phantm.ast.Trees.Expression): phantm.ast.Trees.OAExpression
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.object_dim_list(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.cfg.Trees.BITWISEAND.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Reporter.emitAll: Unit ==> phantm.util.Reporter.errors: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]
phantm.util.Reporter.emitAll: Unit ==> phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean
phantm.util.Reporter.emitAll: Unit ==> phantm.util.Reporter.Error.message: String
phantm.util.Reporter.emitAll: Unit ==> phantm.util.Reporter.emit(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit
phantm.util.Reporter.emitAll: Unit ==> phantm.util.Reporter.Error.tags: Set[phantm.util.ErrorTag]
phantm.util.Reporter.emitAll: Unit ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.Trees.InitVariable.<init>(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.Trees.InitVariable.<init>(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.Trees.InitVariable.<init>(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.Trees.InitVariable.<init>(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.Trees.Import.<init>(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TRealObject.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectTmp.obj: phantm.types.TRealObject
phantm.cfg.VertexImp.<init>(name: String): phantm.cfg.VertexImp[L] ==> java.lang.Object.<init>(): Object
phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility ==> phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility
phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.TypeHint.<init>(): phantm.ast.Trees.TypeHint ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit ==> phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit
phantm.types.TypeFlowAnalyzer.injectSuperGlobal(name: String): Unit ==> phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type
phantm.ast.Trees.While.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement): phantm.ast.Trees.While ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction ==> phantm.types.FunctionType.<init>(): phantm.types.FunctionType
phantm.ast.STToAST.member_modifier(n: phantm.parser.ParseNode): phantm.ast.Trees.MemberFlag ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.member_modifier(n: phantm.parser.ParseNode): phantm.ast.Trees.MemberFlag ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.member_modifier(n: phantm.parser.ParseNode): phantm.ast.Trees.MemberFlag ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.member_modifier(n: phantm.parser.ParseNode): phantm.ast.Trees.MemberFlag ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.cfg.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.StaticMethodCall.cl: phantm.cfg.Trees.ClassRef
phantm.cfg.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.StaticMethodCall.params: List[phantm.cfg.Trees.SimpleValue]
phantm.cfg.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.StaticMethodCall.id: phantm.ast.Trees.Identifier
phantm.ast.Trees.Array.productElement(x$1: Int): Any ==> phantm.ast.Trees.Array.values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.ast.Trees.Array.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol] ==> phantm.symbols.MethodSymbol.visibility: phantm.symbols.MemberVisibility
phantm.ast.Trees.Exit.productElement(x$1: Int): Any ==> phantm.ast.Trees.Exit.value: Option[phantm.ast.Trees.Expression]
phantm.ast.Trees.Exit.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeTransferFunction.apply$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.types.TypeTransferFunction.apply$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.Trees.PHPFloat.<init>(value: Float): phantm.cfg.Trees.PHPFloat ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray ==> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.newSubGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.<init>(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): LabeledDirectedGraphImp.this.Group
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groups_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groups: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.openGroup(name: String,vertIn: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack: List[LabeledDirectedGraphImp.this.Group]
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.Trees.Catch.<init>(cl: phantm.ast.Trees.ClassRef,v: phantm.ast.Trees.SimpleVariable,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Catch
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.types.TInt.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.API.Reader.APIPos.productElement(x$1: Int): Any ==> phantm.util.API.Reader.APIPos.elem: scala.xml.Node
phantm.util.API.Reader.APIPos.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MCClass.<init>(): phantm.ast.Trees.MCClass ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.cfg.Trees.ClassRef.<init>(): phantm.cfg.Trees.ClassRef ==> java.lang.Object.<init>(): Object
phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Parser.<init>(filename: String): phantm.parser.Parser
phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.io.PrintStream.close(): Unit
phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.STGraph.generateDotGraph(root: phantm.parser.ParseNode,printStream: java.io.PrintStream): Unit
phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Parser.parse: Option[phantm.parser.ParseNode]
phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.lang.Exception.<init>(x$1: String): Exception
phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.LabeledDirectedGraphImp.V: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]] ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.FunctionSymbol.args: scala.collection.mutable.HashMap[String,phantm.symbols.ArgumentSymbol]
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.FunctionSymbol.args: scala.collection.mutable.HashMap[String,phantm.symbols.ArgumentSymbol]
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.util.Positional.previousPos: String
phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal ==> phantm.symbols.FunctionSymbol.argList_$eq(x$1: List[(String, phantm.symbols.ArgumentSymbol)]): Unit
phantm.ast.STToAST.productElement(x$1: Int): Any ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.productElement(x$1: Int): Any ==> phantm.ast.STToAST.st: phantm.parser.ParseNode
phantm.ast.STToAST.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.MethodSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.MethodSymbol ==> phantm.symbols.FunctionSymbol.<init>(name: String): phantm.symbols.FunctionSymbol
phantm.cfg.Trees.DIV.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.SimpleVariable.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.SimpleVariable.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productElement(x$1: Int): Any ==> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.t: phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeEnvironment.$anonfun.<init>(): scala.runtime.AbstractPartialFunction[(phantm.cfg.Trees.SimpleVariable, phantm.types.Type),(phantm.types.ArrayKey, phantm.types.Type)] with Serializable ==> scala.runtime.AbstractPartialFunction.<init>(): scala.runtime.AbstractPartialFunction[T1,R]
phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch]
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.additional_catch(n: phantm.parser.ParseNode): phantm.ast.Trees.Catch
phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.Trees.Silence.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Silence ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.annotations.SourceAnnotations.Parser.getVarType: String => Option[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type]
phantm.phases.TypeFlowAnalysis.<init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.TypeFlowAnalysis ==> phantm.ast.ASTSimpleTraversal.<init>(root: phantm.ast.Trees.Tree): phantm.ast.ASTSimpleTraversal
phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String] ==> phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit ==> java.io.FileOutputStream.<init>(x$1: String): java.io.FileOutputStream
phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit ==> java.io.PrintStream.<init>(x$1: java.io.OutputStream): java.io.PrintStream
phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.ast.Trees.BooleanNot.productElement(x$1: Int): Any ==> phantm.ast.Trees.BooleanNot.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BooleanNot.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Empty.v: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftRight.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftRight
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Smaller.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Div.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Div
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Exit.<init>(value: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.Exit
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseXor.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Require.path: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PreDec.rhs: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Include.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Include
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Minus.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftLeft.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PostDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostDec
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.SmallerEqual.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.SmallerEqual
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ExpandArray.vars: List[Option[phantm.ast.Trees.Variable]]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Div.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PostInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostInc
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mod.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mod
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Closure.retref: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.name: phantm.ast.Trees.MethodRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.InstanceOf.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.ClassRef): phantm.ast.Trees.InstanceOf
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftRight.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Include.once: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Closure.<init>(args: List[phantm.ast.Trees.ArgumentDecl],imports: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Closure
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Ternary.then: Option[phantm.ast.Trees.Expression]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Print.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Print
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseAnd.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.New.args: List[phantm.ast.Trees.CallArg]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trScalar(s: phantm.ast.Trees.Scalar): phantm.ast.Trees.Scalar
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.SmallerEqual.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PostDec.rhs: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PreInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreInc
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Execute.<init>(value: String): phantm.ast.Trees.Execute
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Plus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PostInc.rhs: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ExpandArray.expr: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Alternatives.blocks: List[phantm.ast.Trees.Expression]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseAnd
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.New.<init>(cl: phantm.ast.Trees.ClassRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.New
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Closure.imports: List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ClassConstant.const: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanOr.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.vari: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ClassConstant.cl: phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Print.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Array.values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseOr
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mult.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Require.once: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ClassConstant.<init>(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Equal.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Closure.body: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Identical.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Identical
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MethodCall.<init>(obj: phantm.ast.Trees.Expression,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.MethodCall
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseAnd.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanOr.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.typ: phantm.ast.Trees.CastType
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.<init>(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.InstanceOf.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mod.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanXor.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Smaller.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Div.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.New.cl: phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Execute.value: String
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ExpandArray.<init>(vars: List[Option[phantm.ast.Trees.Variable]],expr: phantm.ast.Trees.Expression): phantm.ast.Trees.ExpandArray
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Empty.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Empty
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftLeft.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Smaller.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Smaller
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Ternary.elze: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Isset.vs: List[phantm.ast.Trees.Variable]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseNot
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.cl: phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Ternary.cond: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mult.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mult
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Include.path: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftLeft.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftLeft
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftRight.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseOr.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Identical.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanAnd.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanOr
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Alternatives.<init>(blocks: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Alternatives
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Constant.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Eval.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanXor
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Eval.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Eval
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.SmallerEqual.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PreInc.rhs: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseXor
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Exit.value: Option[phantm.ast.Trees.Expression]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanXor.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MethodCall.name: phantm.ast.Trees.MethodRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseXor.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Require.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Require
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mult.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Ternary.<init>(cond: phantm.ast.Trees.Expression,then: Option[phantm.ast.Trees.Expression],elze: phantm.ast.Trees.Expression): phantm.ast.Trees.Ternary
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.InstanceOf.rhs: phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Silence.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Isset.<init>(vs: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Isset
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Minus.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Equal.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanAnd.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MethodCall.obj: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanNot.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Clone.<init>(obj: phantm.ast.Trees.Expression): phantm.ast.Trees.Clone
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseOr.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Minus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Identical.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.byref: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Array.<init>(values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]): phantm.ast.Trees.Array
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mod.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Plus.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Closure.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Equal.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseNot.rhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Clone.obj: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Plus.lhs: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PreDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreDec
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Silence.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Silence
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leq(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leq(env: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack_$eq(x$1: List[LabeledDirectedGraphImp.this.Group]): Unit
phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.groupStack: List[LabeledDirectedGraphImp.this.Group]
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.NextArrayEntry.<init>(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression]
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.util.Reporter.Error.<init>(message: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Reporter.this.Error ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.AssumeProperty.<init>(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeProperty ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.ast.Trees.OAArray.<init>(array: phantm.ast.Trees.OAScalar,indexes: List[Option[phantm.ast.Trees.Expression]]): phantm.ast.Trees.OAArray ==> phantm.ast.Trees.ObjectAccess.<init>(): phantm.ast.Trees.ObjectAccess
phantm.util.Reporter.notice(msg: String): Boolean ==> phantm.util.Reporter.notice(msg: String): Boolean
phantm.util.Reporter.notice(msg: String): Boolean ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.ast.Trees.Identical.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Identical ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.Identifier.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Identifier.symbol: phantm.symbols.VariableSymbol
phantm.cfg.Trees.Identifier.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.DumpCollector.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.DumpCollector ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.New.productElement(x$1: Int): Any ==> phantm.cfg.Trees.New.cl: phantm.cfg.Trees.ClassRef
phantm.cfg.Trees.New.productElement(x$1: Int): Any ==> phantm.cfg.Trees.New.params: List[phantm.cfg.Trees.SimpleValue]
phantm.cfg.Trees.New.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TNull.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.GlobalSymbols.<init>(): phantm.symbols.GlobalSymbols ==> java.lang.Object.<init>(): Object
phantm.phases.PhasesContext.$lessinit$greater$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance ==> phantm.util.GlobalAnalysisResults.<init>(): phantm.util.GlobalAnalysisResults
phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef ==> phantm.cfg.Trees.FuncRef.<init>(id: phantm.ast.Trees.NSIdentifier): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef ==> phantm.symbols.GlobalSymbols.lookupFunction(n: String): Option[phantm.symbols.FunctionSymbol]
phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.ast.Trees.Namespaced.<init>(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.Trees.DynamicObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicObjectProperty ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.types.ObjectId.productElement(x$1: Int): Any ==> phantm.types.ObjectId.pos: Int
phantm.types.ObjectId.productElement(x$1: Int): Any ==> phantm.types.ObjectId.typ: phantm.types.ObjectIdType
phantm.types.ObjectId.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.productElement(x$1: Int): Any ==> phantm.util.IncludeResolver.ast: phantm.ast.Trees.Program
phantm.util.IncludeResolver.productElement(x$1: Int): Any ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.Trees.PHPNull.<init>(): phantm.cfg.Trees.PHPNull
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ASTToCFG.fewerSkips: Unit
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.Trees.Return.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Return
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ControlFlowGraph.<init>(): phantm.cfg.ControlFlowGraph
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.LabeledDirectedGraphImp.inEdges(v: LabeledDirectedGraphImp.this.Vertex): Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ControlFlowGraph.entry: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.Trees.StaticClassRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.Phase.followedBy(phase: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.strToType(str: String): Option[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.filterLines(comment: String,tag: String): List[String]
phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type] ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Positional.setPos(line: Int,col: Int,file: String): Positional.this.type ==> phantm.util.Positional.line_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(line: Int,col: Int,file: String): Positional.this.type ==> phantm.util.Positional.col_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(line: Int,col: Int,file: String): Positional.this.type ==> phantm.util.Positional.file_$eq(x$1: Option[String]): Unit
phantm.util.Positional.setPos(line: Int,col: Int,file: String): Positional.this.type ==> scala.Some.<init>(x: A): Some[A]
phantm.types.TBottom.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.non_empty_additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch]
phantm.ast.STToAST.additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.cfg.Trees.PLUS.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.cfg.LabeledDirectedGraphImp.<init>(): phantm.cfg.LabeledDirectedGraphImp[LabelType] ==> java.lang.Object.<init>(): Object
phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore ==> phantm.types.ObjectStore.<init>(store: Map[phantm.types.ObjectId,phantm.types.TRealObject]): phantm.types.ObjectStore
phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.col_end_$eq(x$1: Int): Unit
phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.line_end_$eq(x$1: Int): Unit
phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.line_end: Int
phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.col_end: Int
phantm.ast.Trees.Identifier.productElement(x$1: Int): Any ==> phantm.ast.Trees.Identifier.value: String
phantm.ast.Trees.Identifier.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> phantm.types.ArrayKey.fromString(str: String): phantm.types.ArrayKey
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> phantm.util.UInt.v: Int
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> phantm.util.UString.str: String
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> phantm.types.IntKey.<init>(v: Long): phantm.types.IntKey
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey ==> phantm.util.UnserializeException.<init>(msg: String): phantm.util.UnserializeException
phantm.ast.Trees.Ternary.<init>(cond: phantm.ast.Trees.Expression,then: Option[phantm.ast.Trees.Expression],elze: phantm.ast.Trees.Expression): phantm.ast.Trees.Ternary ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.Namespaced.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance ==> phantm.ast.Trees.Namespaced.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.Trees.ArrayCurElement.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ArrayCurElement.ar: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ArrayCurElement.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeLattice.joinTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.join(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeLattice.Env, phantm.types.Type)
phantm.types.TypeLattice.joinTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeLattice.joinTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.phases.CallGraphGeneration.CallGraph.osymToV_$eq(x$1: scala.collection.immutable.Map[Option[phantm.symbols.FunctionSymbol],phantm.phases.CallGraphGeneration.CallGraph.Vertex]): Unit
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.phases.CallGraphGeneration.CallGraph.osymToV: scala.collection.immutable.Map[Option[phantm.symbols.FunctionSymbol],phantm.phases.CallGraphGeneration.CallGraph.Vertex]
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.symbols.FunctionSymbol.name: String
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.symbols.MethodSymbol.name: String
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.phases.CallGraphGeneration.CallGraph.vToOsym: scala.collection.immutable.Map[phantm.phases.CallGraphGeneration.CallGraph.Vertex,Option[phantm.symbols.FunctionSymbol]]
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.phases.CallGraphGeneration.CallGraph.osymToV: scala.collection.immutable.Map[Option[phantm.symbols.FunctionSymbol],phantm.phases.CallGraphGeneration.CallGraph.Vertex]
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex ==> phantm.phases.CallGraphGeneration.CallGraph.vToOsym_$eq(x$1: scala.collection.immutable.Map[phantm.phases.CallGraphGeneration.CallGraph.Vertex,Option[phantm.symbols.FunctionSymbol]]): Unit
phantm.types.TUninitialized.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.PHPString.productElement(x$1: Int): Any ==> phantm.ast.Trees.PHPString.value: String
phantm.ast.Trees.PHPString.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.PHPFalse.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.Trees.Execute.<init>(value: String): phantm.ast.Trees.Execute ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.ConstantDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ConstantDecl.v: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.ConstantDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ConstantDecl.value: phantm.ast.Trees.Expression
phantm.ast.Trees.ConstantDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.ClassProperty.<init>(cl: phantm.ast.Trees.ClassRef,property: phantm.ast.Trees.Variable): phantm.ast.Trees.ClassProperty ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.ast.Trees.If.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.phases.CollectSymbols.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols ==> phantm.ast.ASTTraversal.<init>(root: phantm.ast.Trees.Tree,initCtx: UserDataType): phantm.ast.ASTTraversal[UserDataType]
phantm.phases.CollectSymbols.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols ==> phantm.phases.SymContext.<init>(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
phantm.phases.CollectSymbols.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Reporter.endTicks: Unit ==> phantm.util.Reporter.tickCount: Int
phantm.util.Reporter.endTicks: Unit ==> phantm.util.Reporter.tickCount_$eq(x$1: Int): Unit
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.ObjectIdDump.<init>(offset: Int): phantm.types.ObjectIdDump
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TRealObject.<init>(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.recursionLimit_$eq(x$1: Int): Unit
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uidToOId: Map[Int,phantm.types.ObjectId]
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.recursionLimit: Int
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.ObjectId.<init>(pos: Int,typ: phantm.types.ObjectIdType): phantm.types.ObjectId
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TClass.<init>(cs: phantm.symbols.ClassSymbol): phantm.types.TClass
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.recursionLimit: Int
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.objectsStore: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TFloatLit.<init>(value: Float): phantm.types.TFloatLit
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uValueToField(v: phantm.util.UValue): String
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UObjRef.i: Int
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UnserializeException.<init>(msg: String): phantm.util.UnserializeException
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.objectsStore_$eq(x$1: Map[phantm.types.ObjectId,phantm.types.TRealObject]): Unit
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TObjectRef.<init>(id: phantm.types.ObjectId): phantm.types.TObjectRef
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TObjectRef.<init>(id: phantm.types.ObjectId): phantm.types.TObjectRef
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UFloat.str: Float
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uidToOId_$eq(x$1: Map[Int,phantm.types.ObjectId]): Unit
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uidToOId: Map[Int,phantm.types.ObjectId]
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.URealRef.i: Int
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UInt.v: Int
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UObject.entries: Map[phantm.util.UValue,phantm.util.UValue]
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TObjectRef.<init>(id: phantm.types.ObjectId): phantm.types.TObjectRef
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UObject.classname: String
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uidToOId: Map[Int,phantm.types.ObjectId]
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UArray.entries: Map[phantm.util.UValue,phantm.util.UValue]
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.getVal(i: Int): phantm.util.UValue
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UString.str: String
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TIntLit.<init>(value: Long): phantm.types.TIntLit
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.recursionLimit: Int
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.Unserializer.recursionLimit_$eq(x$1: Int): Unit
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.util.UObject.i: Int
phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type ==> phantm.types.TStringLit.<init>(value: String): phantm.types.TStringLit
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.Trees.Eval.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Eval ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> phantm.types.TStringLit.value: String
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> phantm.types.TFloatLit.value: Float
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> phantm.types.TIntLit.value: Long
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.Trees.Ternary.productElement(x$1: Int): Any ==> phantm.ast.Trees.Ternary.then: Option[phantm.ast.Trees.Expression]
phantm.ast.Trees.Ternary.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Ternary.productElement(x$1: Int): Any ==> phantm.ast.Trees.Ternary.cond: phantm.ast.Trees.Expression
phantm.ast.Trees.Ternary.productElement(x$1: Int): Any ==> phantm.ast.Trees.Ternary.elze: phantm.ast.Trees.Expression
phantm.phases.CollectSymbols.productElement(x$1: Int): Any ==> phantm.phases.CollectSymbols.node: phantm.ast.Trees.Tree
phantm.phases.CollectSymbols.productElement(x$1: Int): Any ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MCFunction.<init>(): phantm.ast.Trees.MCFunction
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MCDir.<init>(): phantm.ast.Trees.MCDir
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPFloat.<init>(value: Float): phantm.ast.Trees.PHPFloat
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MCClass.<init>(): phantm.ast.Trees.MCClass
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MCFile.<init>(): phantm.ast.Trees.MCFile
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPFloat.<init>(value: Float): phantm.ast.Trees.PHPFloat
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MCMethod.<init>(): phantm.ast.Trees.MCMethod
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MCLine.<init>(): phantm.ast.Trees.MCLine
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MCNamespace.<init>(): phantm.ast.Trees.MCNamespace
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.cfg.Trees.Error.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.importRules: scala.collection.immutable.Map[String,List[String]]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.importRules: scala.collection.immutable.Map[String,List[String]]
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.For.<init>(init: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression,step: phantm.ast.Trees.Statement,then: phantm.ast.Trees.Statement): phantm.ast.Trees.For ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.symbols.GlobalSymbols.lookupConstant(n: String): Option[phantm.symbols.ConstantSymbol] ==> phantm.symbols.GlobalSymbols.constants: scala.collection.mutable.HashMap[String,phantm.symbols.ConstantSymbol]
phantm.ast.Trees.Import.productElement(x$1: Int): Any ==> phantm.ast.Trees.Import.src: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.Import.productElement(x$1: Int): Any ==> phantm.ast.Trees.Import.to: String
phantm.ast.Trees.Import.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.ConcreteType.<init>(): phantm.types.ConcreteType ==> phantm.types.Type.<init>(): phantm.types.Type
phantm.cfg.Trees.Cast.<init>(to: phantm.ast.Trees.CastType,e: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Cast ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.ast.Trees.Minus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.InlineFull.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.NamespaceStart.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NamespaceStart ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String]
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.file: Option[String]
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line_end: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.get: phantm.Settings
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line_end: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.file: Option[String]
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.get: phantm.Settings
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.format: String
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.format: String
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col_end: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.get: phantm.Settings
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.line: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Positional.col_end: Int
phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.format: String
phantm.ast.Trees.Namespaced.productElement(x$1: Int): Any ==> phantm.ast.Trees.Namespaced.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.Namespaced.productElement(x$1: Int): Any ==> phantm.ast.Trees.Namespaced.body: List[phantm.ast.Trees.Statement]
phantm.ast.Trees.Namespaced.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.helpers.CheckContext.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.static_properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TClass.productElement(x$1: Int): Any ==> phantm.types.TClass.cs: phantm.symbols.ClassSymbol
phantm.types.TClass.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.SHIFTRIGHT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.SILENCE.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.CastDouble.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhaseSeq.productElement(x$1: Int): Any ==> phantm.phases.PhaseSeq.list: Seq[phantm.phases.Phase]
phantm.phases.PhaseSeq.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.ClassRefFixed.<init>(cs: phantm.symbols.ClassSymbol): phantm.cfg.Trees.ClassRefFixed ==> phantm.cfg.Trees.ClassRef.<init>(): phantm.cfg.Trees.ClassRef
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.ast.Trees.PHPFalse.<init>(): phantm.ast.Trees.PHPFalse
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.ast.Trees.PHPNull.<init>(): phantm.ast.Trees.PHPNull
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.ast.Trees.PHPFloat.<init>(value: Float): phantm.ast.Trees.PHPFloat
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.util.UnserializeException.<init>(msg: String): phantm.util.UnserializeException
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.util.UFloat.str: Float
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.util.UString.str: String
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.util.UInt.v: Int
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> phantm.ast.Trees.PHPTrue.<init>(): phantm.ast.Trees.PHPTrue
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.join(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeLattice.Env, phantm.types.Type) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.join(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeLattice.Env, phantm.types.Type) ==> phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TFloatLit.<init>(value: Float): phantm.types.TFloatLit ==> phantm.types.TNumericLit.<init>(): phantm.types.TNumericLit
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.Settings.includePaths: List[String]
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.notfound(p: String): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.pathExists(p: String): Option[String]
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.Settings.get: phantm.Settings
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.getAST(path: String): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.pathExists(p: String): Option[String]
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.notfound(p: String): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean
phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> phantm.util.UnserializeException.<init>(msg: String): phantm.util.UnserializeException
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> phantm.util.UArray.entries: Map[phantm.util.UValue,phantm.util.UValue]
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> phantm.util.Unserializer.uValueToKey(v: phantm.util.UValue): phantm.types.ArrayKey
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> phantm.types.StringKey.v: String
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue] ==> phantm.util.Unserializer.result: phantm.util.UValue
phantm.ast.Trees.BitwiseAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseAnd ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodRef.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAExpression.exp: phantm.ast.Trees.Expression
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NextArrayEntry.<init>(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAExpression.exp: phantm.ast.Trees.Expression
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.DynamicFunctionRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicFunctionRef
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAMethod.name: phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.DynamicObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicObjectProperty
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAArray.indexes: List[Option[phantm.ast.Trees.Expression]]
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAArray.array: phantm.ast.Trees.OAScalar
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MethodCall.<init>(obj: phantm.ast.Trees.Expression,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.MethodCall
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAIdentifier.id: phantm.ast.Trees.Identifier
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NextArrayEntry.<init>(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAArray.indexes: List[Option[phantm.ast.Trees.Expression]]
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAIdentifier.id: phantm.ast.Trees.Identifier
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAMethod.args: List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.DynamicMethodRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAArray.array: phantm.ast.Trees.OAScalar
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.MethodCall.<init>(obj: phantm.ast.Trees.Expression,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.MethodCall
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.ast.Trees.OAIdentifier.id: phantm.ast.Trees.Identifier
phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPosBetween(from: phantm.util.Positional,to: phantm.util.Positional): Positional.this.type
phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit ==> phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit ==> phantm.symbols.Scope.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit ==> phantm.cfg.Trees.Identifier.<init>(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier
phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit ==> phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.injectPredef(name: String,typ: phantm.types.Type): Unit ==> phantm.types.TypeFlowAnalyzer.scope: phantm.symbols.Scope
phantm.ast.Trees.PostInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostInc ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.ClassProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ClassProperty.symbol: phantm.symbols.PropertySymbol
phantm.cfg.Trees.ClassProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.CastArray.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.cfg.Trees.AssumeNotProperty.<init>(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeNotProperty ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.util.UFalse.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.VariableVar.productElement(x$1: Int): Any ==> phantm.cfg.Trees.VariableVar.v: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.VariableVar.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Constant.productElement(x$1: Int): Any ==> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.Constant.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier ==> phantm.cfg.Trees.Identifier.<init>(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier
phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.idFromId(id: phantm.ast.Trees.Identifier): phantm.cfg.Trees.Identifier ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Reporter.errors: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Positional.file: Option[String]
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Positional.file: Option[String]
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Positional.file: Option[String]
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Reporter.errors_$eq(x$1: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]): Unit
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Reporter.errors: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean ==> phantm.util.Reporter.errors: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]
phantm.cfg.Trees.BOOLEANOR.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean ==> phantm.Settings.resolveIncludes: Boolean
phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.util.IncludeResolver.shouldInclude(p: String,pos: phantm.util.Positional): Boolean ==> phantm.Settings.get: phantm.Settings
phantm.phases.PhasesContext.apply$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance ==> phantm.symbols.GlobalSymbols.<init>(): phantm.symbols.GlobalSymbols
phantm.ast.Trees.Try.productElement(x$1: Int): Any ==> phantm.ast.Trees.Try.body: phantm.ast.Trees.Statement
phantm.ast.Trees.Try.productElement(x$1: Int): Any ==> phantm.ast.Trees.Try.catches: List[phantm.ast.Trees.Catch]
phantm.ast.Trees.Try.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.OAArray.productElement(x$1: Int): Any ==> phantm.ast.Trees.OAArray.array: phantm.ast.Trees.OAScalar
phantm.ast.Trees.OAArray.productElement(x$1: Int): Any ==> phantm.ast.Trees.OAArray.indexes: List[Option[phantm.ast.Trees.Expression]]
phantm.ast.Trees.OAArray.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.ShiftRight.productElement(x$1: Int): Any ==> phantm.ast.Trees.ShiftRight.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.ShiftRight.productElement(x$1: Int): Any ==> phantm.ast.Trees.ShiftRight.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.ShiftRight.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CallGraphGeneration.execute: Unit ==> phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit
phantm.phases.CallGraphGeneration.execute: Unit ==> phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean)
phantm.types.TypeLattice.meet(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meet(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeEnvironment, phantm.types.Type)
phantm.ast.Trees.ObjectAccess.<init>(): phantm.ast.Trees.ObjectAccess ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> scala.util.parsing.combinator.Parsers.rep[T](p: => Parsers.this.Parser[T]): Parsers.this.Parser[List[T]]
phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> phantm.types.TUnion.apply(ts: Iterable[phantm.types.Type]): phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> scala.util.parsing.combinator.Parsers.rep[T](p: => Parsers.this.Parser[T]): Parsers.this.Parser[List[T]]
phantm.types.ObjectId.<init>(pos: Int,typ: phantm.types.ObjectIdType): phantm.types.ObjectId ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.BooleanXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanXor ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type ==> phantm.ast.Trees.THObject.cl: phantm.ast.Trees.ClassRef
phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TIntLit.<init>(value: Long): phantm.types.TIntLit ==> phantm.types.TNumericLit.<init>(): phantm.types.TNumericLit
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ClassProperty.cl: phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.DynamicObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicObjectProperty
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ObjectProperty.property: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.NextArrayEntry.array: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.NextArrayEntry.<init>(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ObjectProperty.<init>(obj: phantm.ast.Trees.Expression,property: phantm.ast.Trees.Identifier): phantm.ast.Trees.ObjectProperty
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.VariableVariable.name: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.SimpleVariable.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trClassRef(cr: phantm.ast.Trees.ClassRef): phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ClassProperty.<init>(cl: phantm.ast.Trees.ClassRef,property: phantm.ast.Trees.Variable): phantm.ast.Trees.ClassProperty
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.DynamicObjectProperty.property: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ListVar.vars: List[Option[phantm.ast.Trees.Variable]]
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ArrayEntry.index: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ListVar.<init>(vars: List[Option[phantm.ast.Trees.Variable]]): phantm.ast.Trees.ListVar
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ClassProperty.property: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.DynamicObjectProperty.obj: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ObjectProperty.obj: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> phantm.ast.Trees.ArrayEntry.array: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.firstClassPass: Unit
phantm.phases.CollectSymbols.execute: Unit ==> phantm.symbols.Scope.registerPredefVariables: Unit
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean)
phantm.phases.CollectSymbols.execute: Unit ==> phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.classList: List[(phantm.symbols.ClassSymbol, phantm.ast.Trees.ClassDecl)]
phantm.phases.CollectSymbols.execute: Unit ==> phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.firstIfacePass: Unit
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean)
phantm.phases.CollectSymbols.execute: Unit ==> phantm.phases.CollectSymbols.ifaceList: List[(phantm.symbols.IfaceSymbol, phantm.ast.Trees.InterfaceDecl)]
phantm.ast.Trees.DynamicMethodRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.DynamicMethodRef.ex: phantm.ast.Trees.Expression
phantm.ast.Trees.DynamicMethodRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PureStatementsChecks.checkPures(stmts: List[phantm.ast.Trees.Statement]): Unit ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Evaluator.dirname(path: String): String
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.Concat.lhs: phantm.ast.Trees.Expression
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.Concat.rhs: phantm.ast.Trees.Expression
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.ClassConstant.const: phantm.ast.Trees.Identifier
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.ClassConstant.cl: phantm.ast.Trees.ClassRef
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.symbols.ConstantSymbol.value: Option[phantm.ast.Trees.Scalar]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> phantm.symbols.ClassConstantSymbol.value: Option[phantm.ast.Trees.Scalar]
phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar] ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint]
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.Trees.MCFile.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.dataflow.AnalysisAlgorithm.<init>(transferFun: phantm.dataflow.TransferFunction[E,S],bottomEnv: E,baseEnv: E,cfg: phantm.cfg.LabeledDirectedGraphImp[S]): phantm.dataflow.AnalysisAlgorithm[E,S] ==> java.lang.Object.<init>(): Object
phantm.phases.PhasesContext.copy$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.is_reference(n: phantm.parser.ParseNode): Boolean
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.Trees.FunctionDecl.<init>(name: phantm.ast.Trees.NSIdentifier,args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.FunctionDecl
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.Trees.MFProtected.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.InterfaceDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.ArgumentSymbol.<init>(name: String,byref: Boolean,optional: Boolean): phantm.symbols.ArgumentSymbol
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.hint: Option[phantm.ast.Trees.TypeHint]
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.byref: Boolean
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.<init>(is: phantm.symbols.IfaceSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.IfaceMethodSymbol
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.types.TypeHelpers.typeHintToType(th: Option[phantm.ast.Trees.TypeHint]): phantm.types.Type
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.MethodDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.phases.CollectSymbols.secondIfacePass(id: phantm.ast.Trees.InterfaceDecl,is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit
phantm.ast.Trees.BitwiseOr.productElement(x$1: Int): Any ==> phantm.ast.Trees.BitwiseOr.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BitwiseOr.productElement(x$1: Int): Any ==> phantm.ast.Trees.BitwiseOr.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BitwiseOr.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CallGraphGeneration.CallGraph.addCallLocation(sym: phantm.symbols.FunctionSymbol,pos: phantm.util.Positional): Unit ==> phantm.phases.CallGraphGeneration.CallGraph.mainCallPositions: scala.collection.immutable.Map[phantm.symbols.FunctionSymbol,Set[phantm.util.Positional]]
phantm.phases.CallGraphGeneration.CallGraph.addCallLocation(sym: phantm.symbols.FunctionSymbol,pos: phantm.util.Positional): Unit ==> phantm.phases.CallGraphGeneration.CallGraph.mainCallPositions_$eq(x$1: scala.collection.immutable.Map[phantm.symbols.FunctionSymbol,Set[phantm.util.Positional]]): Unit
phantm.phases.CallGraphGeneration.CallGraph.addCallLocation(sym: phantm.symbols.FunctionSymbol,pos: phantm.util.Positional): Unit ==> phantm.phases.CallGraphGeneration.CallGraph.mainCallPositions: scala.collection.immutable.Map[phantm.symbols.FunctionSymbol,Set[phantm.util.Positional]]
phantm.ast.Trees.ClassConstantDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassConstantDecl.v: phantm.ast.Trees.Identifier
phantm.ast.Trees.ClassConstantDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassConstantDecl.value: phantm.ast.Trees.Expression
phantm.ast.Trees.ClassConstantDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.importAPI: Boolean
phantm.ast.Trees.VarFunctionRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarFunctionRef ==> phantm.ast.Trees.FunctionRef.<init>(): phantm.ast.Trees.FunctionRef
phantm.types.TBoolean.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Continue.productElement(x$1: Int): Any ==> phantm.ast.Trees.Continue.level: phantm.ast.Trees.Expression
phantm.ast.Trees.Continue.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.TypeFlowAnalysis.getCFG(sym: Option[phantm.symbols.FunctionSymbol]): phantm.cfg.ControlFlowGraph ==> phantm.phases.PhasesContext.cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph]
phantm.phases.TypeFlowAnalysis.getCFG(sym: Option[phantm.symbols.FunctionSymbol]): phantm.cfg.ControlFlowGraph ==> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
phantm.ast.Trees.MFPublic.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Program.productElement(x$1: Int): Any ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.ast.Trees.Program.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.VariableVar.<init>(v: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableVar ==> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
phantm.cfg.LabeledDirectedGraphImp.inEdges(v: LabeledDirectedGraphImp.this.Vertex): Set[phantm.cfg.EdgeImp[LabelType]] ==> phantm.cfg.VertexImp.in: Set[phantm.cfg.EdgeImp[L]]
phantm.cfg.Trees.PHPAny.<init>(): phantm.cfg.Trees.PHPAny ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.util.API.Writer.emit(str: String): Unit ==> java.io.PrintStream.println(x$1: String): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.util.Positional.setPos(line: Int,col: Int,file: String): Positional.this.type
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Lexer.<init>(in: java.io.Reader): phantm.parser.Lexer
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> scala.Some.<init>(x: A): Some[A]
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.util.JavaListIteratorWrapper.<init>(iter: java.util.Iterator[A]): phantm.util.JavaListIteratorWrapper[A]
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.error(msg: String): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.comments_$eq(x$1: List[(phantm.util.Positional, String)]): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.CUPParser.<init>(s: java_cup.runtime.Scanner): phantm.parser.CUPParser
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Lexer.setFileName(fileName: String): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.error(msg: String): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.error(msg: String): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.comments_$eq(x$1: List[(phantm.util.Positional, String)]): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> java.io.FileReader.<init>(x$1: String): java.io.FileReader
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.annotations.SourceAnnotations.Parser.importTypeDefs(comment: String): Unit
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> java_cup.runtime.lr_parser.parse(): java_cup.runtime.Symbol
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> scala.Any.asInstanceOf[T0]: T0
phantm.parser.Parser.parse: Option[phantm.parser.ParseNode] ==> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
phantm.cfg.ASTToCFG.FreshName.apply(prefix: String): String ==> phantm.cfg.ASTToCFG.FreshName.count: Int
phantm.cfg.ASTToCFG.FreshName.apply(prefix: String): String ==> phantm.cfg.ASTToCFG.FreshName.count_$eq(x$1: Int): Unit
phantm.cfg.ASTToCFG.FreshName.apply(prefix: String): String ==> phantm.cfg.ASTToCFG.FreshName.count: Int
phantm.ast.Trees.PostDec.productElement(x$1: Int): Any ==> phantm.ast.Trees.PostDec.rhs: phantm.ast.Trees.Variable
phantm.ast.Trees.PostDec.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.GlobalSymbols.lookupIface(n: String): Option[phantm.symbols.IfaceSymbol] ==> phantm.symbols.GlobalSymbols.ifaces: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceSymbol]
phantm.ast.Trees.Isset.<init>(vs: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Isset ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.Trees.BitwiseNot.productElement(x$1: Int): Any ==> phantm.ast.Trees.BitwiseNot.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BitwiseNot.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.Trees.OAMethod.<init>(name: phantm.ast.Trees.ObjectAccess,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.OAMethod
phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.method_or_not(n: phantm.parser.ParseNode): Option[List[phantm.ast.Trees.CallArg]]
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.cfg.Trees.AssumeProperty.<init>(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeProperty
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.cfg.Trees.AssumeNotProperty.<init>(prop: phantm.cfg.Trees.Property,vs: List[phantm.cfg.Trees.Variable]): phantm.cfg.Trees.AssumeNotProperty
phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression]
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]])
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]])
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]]) ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.helpers.CFGGraph.<init>(): phantm.helpers.CFGGraph ==> java.lang.Object.<init>(): Object
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.StringKey.vToString: String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.IntKey.vToString: String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.TStringLit.value: String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.escapeVal(s: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTypVal(name: String,value: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.TFloatLit.value: Float
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTypVal(name: String,value: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTypVal(name: String,value: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.TIntLit.value: Long
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.escapeVal(s: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> phantm.util.API.Writer.simpleTyp(name: String): String
phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.STToAST.method_or_not(n: phantm.parser.ParseNode): Option[List[phantm.ast.Trees.CallArg]] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.method_or_not(n: phantm.parser.ParseNode): Option[List[phantm.ast.Trees.CallArg]] ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.method_or_not(n: phantm.parser.ParseNode): Option[List[phantm.ast.Trees.CallArg]] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.method_or_not(n: phantm.parser.ParseNode): Option[List[phantm.ast.Trees.CallArg]] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.method_or_not(n: phantm.parser.ParseNode): Option[List[phantm.ast.Trees.CallArg]] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.annotations.SourceAnnotations.Parser.shouldInline(comment: String): Boolean ==> phantm.annotations.SourceAnnotations.Parser.contains(comment: String,tag: String): Boolean
phantm.types.TPreciseObject.<init>(): phantm.types.TPreciseObject ==> phantm.types.ObjectType.<init>(): phantm.types.ObjectType
phantm.ast.Trees.CalledClass.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyStringEntry ==> phantm.annotations.SourceAnnotations.Parser.ArrayEntryType.<init>(): phantm.annotations.SourceAnnotations.Parser.ArrayEntryType
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> phantm.types.StringKey.v: String
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> phantm.types.IntKey.v: Long
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> phantm.types.StringKey.v: String
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> phantm.types.StringKey.v: String
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> phantm.types.IntKey.v: Long
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean ==> phantm.types.IntKey.v: Long
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceMethodSymbol]
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.parents: List[phantm.symbols.IfaceSymbol]
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol]
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.is: phantm.symbols.IfaceSymbol
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.name: String
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceMethodSymbol]
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol]
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.IfaceSymbol.registerMethod(ms: phantm.symbols.IfaceMethodSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.cfg.Trees.PREINC.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.<init>(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.getCFG(sym: Option[phantm.symbols.FunctionSymbol]): phantm.cfg.ControlFlowGraph
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.annotations.FunctionAnnotation.shouldInline: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$7: Option[phantm.types.TObjectRef] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$7: Option[phantm.types.TObjectRef] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.display(content: String): Unit
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.annotations.FunctionAnnotation.shouldInline: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$6: phantm.types.TypeEnvironment @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$7: Option[phantm.types.TObjectRef] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.<init>(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.<init>(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.display(content: String): Unit
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.display(content: String): Unit
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.getCFG(sym: Option[phantm.symbols.FunctionSymbol]): phantm.cfg.ControlFlowGraph
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.util.Reporter.clear: Unit
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$6: phantm.types.TypeEnvironment @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.getCFG(sym: Option[phantm.symbols.FunctionSymbol]): phantm.cfg.ControlFlowGraph
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.util.GlobalAnalysisResults.endGlobals_$eq(x$1: Option[phantm.types.TypeEnvironment]): Unit
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$6: phantm.types.TypeEnvironment @scala.annotation.unchecked.uncheckedVariance
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.object_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.dynamic_class_name_variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess]
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.VarClassRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.DynamicClassRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type ==> phantm.annotations.CommentAnnotation.comment_$eq(x$1: Option[String]): Unit
phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.ast.Trees.Closure.<init>(args: List[phantm.ast.Trees.ArgumentDecl],imports: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Closure ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.BITWISEOR.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Reporter.set(newrep: phantm.util.Reporter): Unit ==> phantm.util.Reporter.rep_$eq(x$1: Option[phantm.util.Reporter]): Unit
phantm.util.Reporter.set(newrep: phantm.util.Reporter): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.Trees.ObjectProperty.productElement(x$1: Int): Any ==> phantm.ast.Trees.ObjectProperty.obj: phantm.ast.Trees.Expression
phantm.ast.Trees.ObjectProperty.productElement(x$1: Int): Any ==> phantm.ast.Trees.ObjectProperty.property: phantm.ast.Trees.Identifier
phantm.ast.Trees.ObjectProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.NextArrayEntry.<init>(array: phantm.ast.Trees.Expression): phantm.ast.Trees.NextArrayEntry ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.interface_extends_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.interface_extends_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.interface_extends_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
phantm.ast.STToAST.interface_extends_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.method_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
phantm.ast.STToAST.method_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.method_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.method_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.types.IntKey.<init>(v: Long): phantm.types.IntKey ==> phantm.types.ArrayKey.<init>(): phantm.types.ArrayKey
phantm.ast.Trees.OAIdentifier.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.OAIdentifier ==> phantm.ast.Trees.OAScalar.<init>(): phantm.ast.Trees.OAScalar
phantm.phases.CallGraphGeneration.scopeFromSym(s: phantm.symbols.Symbol): Option[phantm.symbols.FunctionSymbol] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.scopeFromSym(s: phantm.symbols.Symbol): Option[phantm.symbols.FunctionSymbol] ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.scopeFromSym(s: phantm.symbols.Symbol): Option[phantm.symbols.FunctionSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.Trees.Continue.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Continue ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.cfg.Trees.NoVar.<init>(): phantm.cfg.Trees.NoVar ==> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
phantm.ast.STToAST.foreach_optional_arg(n: phantm.parser.ParseNode): Option[(phantm.ast.Trees.Variable, Boolean)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.foreach_optional_arg(n: phantm.parser.ParseNode): Option[(phantm.ast.Trees.Variable, Boolean)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.foreach_optional_arg(n: phantm.parser.ParseNode): Option[(phantm.ast.Trees.Variable, Boolean)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.foreach_optional_arg(n: phantm.parser.ParseNode): Option[(phantm.ast.Trees.Variable, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.foreach_optional_arg(n: phantm.parser.ParseNode): Option[(phantm.ast.Trees.Variable, Boolean)] ==> phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean)
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.util.Positional.file: Option[String]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.util.Positional.line: Int
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.ASTCollector.afterDump_$eq(x$1: Boolean): Unit
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.ASTCollector.functionsDecls_$eq(x$1: List[phantm.ast.Trees.FunctionDecl]): Unit
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.ASTCollector.afterDump: Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.ASTCollector.functionsDecls: List[phantm.ast.Trees.FunctionDecl]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.ASTCollector.classesDecls: List[phantm.ast.Trees.ClassDecl]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.util.Positional.file: Option[String]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.util.Positional.line: Int
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.ASTCollector.classesDecls_$eq(x$1: List[phantm.ast.Trees.ClassDecl]): Unit
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.ASTCollector.afterDump: Boolean
phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.Trees.PHPNull.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.ControlFlowGraph.<init>(): phantm.cfg.ControlFlowGraph ==> phantm.cfg.LabeledDirectedGraphImp.<init>(): phantm.cfg.LabeledDirectedGraphImp[LabelType]
phantm.cfg.Trees.Skip.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.FunctionSymbol.<init>(name: String): phantm.symbols.FunctionSymbol ==> phantm.symbols.Symbol.<init>(): phantm.symbols.Symbol
phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.annotations.SourceAnnotations.Parser.isPure(comment: String): Boolean ==> phantm.annotations.SourceAnnotations.Parser.contains(comment: String,tag: String): Boolean
phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.ast.Trees.StaticClassRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticClassRef
phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.astFromScalar(scalar: phantm.ast.Trees.Scalar): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Alternatives.<init>(blocks: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Alternatives
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Some.<init>(x: A): Some[A]
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> java.io.File.<init>(x$1: String): java.io.File
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.end: Unit
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.deepNess: Int
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> java.io.File.getAbsolutePath(): String
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Positional.file: Option[String]
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Some.<init>(x: A): Some[A]
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.inclsInstr: scala.collection.immutable.Map[(String, Int),Set[String]]
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Positional.file: Option[String]
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.Settings.get: phantm.Settings
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Positional.line: Int
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.deepNess: Int
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.Settings.get: phantm.Settings
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.Settings.verbosity: Int
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.ctx: phantm.phases.PhasesContext
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.Settings.verbosity: Int
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.begin: Unit
phantm.ast.Trees.Label.productElement(x$1: Int): Any ==> phantm.ast.Trees.Label.name: phantm.ast.Trees.Identifier
phantm.ast.Trees.Label.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.get: phantm.Settings ==> java.lang.RuntimeException.<init>(x$1: String): RuntimeException
phantm.Settings.get: phantm.Settings ==> phantm.Settings.stgs: Option[phantm.Settings]
phantm.cfg.Trees.PHPNull.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type) ==> phantm.annotations.SourceAnnotations.Parser.getReturnType: String => Option[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type) ==> phantm.annotations.SourceAnnotations.Parser.strToVarType(str: String): Option[(String, phantm.types.Type)]
phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type) ==> phantm.annotations.SourceAnnotations.Parser.filterLines(comment: String,tag: String): List[String]
phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeHelpers.exprToType(oe: Option[phantm.ast.Trees.Expression]): phantm.types.Type ==> phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type
phantm.types.TypeHelpers.exprToType(oe: Option[phantm.ast.Trees.Expression]): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.ast.Trees.Mod.productElement(x$1: Int): Any ==> phantm.ast.Trees.Mod.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Mod.productElement(x$1: Int): Any ==> phantm.ast.Trees.Mod.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Mod.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.InitVariable.<init>(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier ==> phantm.ast.STToAST.ns_name(n: phantm.parser.ParseNode): List[String]
phantm.helpers.ASTGraph.generateDotGraph(root: phantm.ast.Trees.Program,printStream: java.io.PrintStream): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.generateDotGraph(root: phantm.ast.Trees.Program,printStream: java.io.PrintStream): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.generateDotGraph(root: phantm.ast.Trees.Program,printStream: java.io.PrintStream): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ClassConstant.<init>(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ClassConstant.<init>(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VarClassRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.ASTTransform.<init>(p: phantm.ast.Trees.Program): phantm.ast.ASTTransform ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.Trees.OAMethod.productElement(x$1: Int): Any ==> phantm.ast.Trees.OAMethod.name: phantm.ast.Trees.ObjectAccess
phantm.ast.Trees.OAMethod.productElement(x$1: Int): Any ==> phantm.ast.Trees.OAMethod.args: List[phantm.ast.Trees.CallArg]
phantm.ast.Trees.OAMethod.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.Constant.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Constant.cs: phantm.symbols.ConstantSymbol
phantm.cfg.Trees.Constant.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Smaller.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Smaller ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.ArrayCurElement.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayCurElement ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Print.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Print ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.annotations.SourceAnnotations.Parser.AnyEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyEntry ==> phantm.annotations.SourceAnnotations.Parser.ArrayEntryType.<init>(): phantm.annotations.SourceAnnotations.Parser.ArrayEntryType
phantm.ast.Trees.CFFinal.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction ==> phantm.dataflow.TransferFunction.<init>(): phantm.dataflow.TransferFunction[E,S]
phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.types.TStringLit.<init>(value: String): phantm.types.TStringLit ==> phantm.types.ConcreteType.<init>(): phantm.types.ConcreteType
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int
phantm.ast.STToAST.base_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CFGGenerationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.CFGGenerationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CFGGenerator.<init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.CFGGenerator
phantm.phases.CFGGenerationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTSimpleTraversal.execute: Unit
phantm.cfg.Trees.BOOLEANAND.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Reporter.beginTicks: Unit ==> phantm.util.Reporter.tickCount_$eq(x$1: Int): Unit
phantm.helpers.STGraph.emit(str: String): Unit ==> java.io.PrintStream.print(x$1: String): Unit
phantm.types.TypeTransferFunction.apply$default$6: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.types.TypeTransferFunction.apply$default$6: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.ast.Trees.DynamicClassRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef ==> phantm.ast.Trees.ClassRef.<init>(): phantm.ast.Trees.ClassRef
phantm.ast.Trees.PostInc.productElement(x$1: Int): Any ==> phantm.ast.Trees.PostInc.rhs: phantm.ast.Trees.Variable
phantm.ast.Trees.PostInc.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.StaticMethodCall.<init>(cl: phantm.cfg.Trees.ClassRef,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.StaticMethodCall ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> phantm.types.TClass.cs: phantm.symbols.ClassSymbol
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> phantm.types.TClass.cs: phantm.symbols.ClassSymbol
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.MethodGraphGeneration.MethodGraph.addEdge(from: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex,to: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): Unit ==> phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex
phantm.phases.MethodGraphGeneration.MethodGraph.addEdge(from: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex,to: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): Unit ==> phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex
phantm.phases.MethodGraphGeneration.MethodGraph.addEdge(from: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex,to: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.Trees.Clone.<init>(obj: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Clone ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.ast.Trees.Catch.productElement(x$1: Int): Any ==> phantm.ast.Trees.Catch.v: phantm.ast.Trees.SimpleVariable
phantm.ast.Trees.Catch.productElement(x$1: Int): Any ==> phantm.ast.Trees.Catch.cl: phantm.ast.Trees.ClassRef
phantm.ast.Trees.Catch.productElement(x$1: Int): Any ==> phantm.ast.Trees.Catch.body: phantm.ast.Trees.Statement
phantm.ast.Trees.Catch.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.phases.CollectSymbols.classesToPass_$eq(x$1: List[phantm.ast.Trees.ClassDecl]): Unit
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.firstClassPass: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.phases.CollectSymbols.firstClassPass: Unit
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.util.Positional.getPos: String
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.phases.CollectSymbols.classesToPass: List[phantm.ast.Trees.ClassDecl]
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstClassPass: Unit ==> phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Cast.typ: phantm.ast.Trees.CastType
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Array.values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.NoVar.<init>(): phantm.cfg.Trees.NoVar
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Assign.vari: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Assign.byref: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.PostDec.rhs: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.PostInc.rhs: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statementBetween(from: Vertex,stat: phantm.cfg.Trees.Statement,to: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statementBetween(from: Vertex,stat: phantm.cfg.Trees.Statement,to: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.ClassConstant.const: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.getPC: Vertex
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.inEdges(v: LabeledDirectedGraphImp.this.Vertex): Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.inEdges(v: LabeledDirectedGraphImp.this.Vertex): Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPFalse.<init>(): phantm.cfg.Trees.PHPFalse
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.ClassConstant.<init>(cl: phantm.cfg.Trees.ClassRef,name: phantm.ast.Trees.Identifier): phantm.cfg.Trees.ClassConstant
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Alternatives.blocks: List[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Assign.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPEmptyArray.<init>(): phantm.cfg.Trees.PHPEmptyArray
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.ExpandArray.vars: List[Option[phantm.ast.Trees.Variable]]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Cast.<init>(to: phantm.ast.Trees.CastType,e: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Cast
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.ExpandArray.expr: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Constant.<init>(cs: phantm.symbols.ConstantSymbol): phantm.cfg.Trees.Constant
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPFalse.<init>(): phantm.cfg.Trees.PHPFalse
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPFalse.<init>(): phantm.cfg.Trees.PHPFalse
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.PreDec.rhs: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.getPos: String
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.FreshVariable.apply(prefix: String): phantm.cfg.Trees.TempID
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.PreInc.rhs: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Cast.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.Isset.vs: List[phantm.ast.Trees.Variable]
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.ast.Trees.ClassConstant.cl: phantm.ast.Trees.ClassRef
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeLattice.join(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.join(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeLattice.Env, phantm.types.Type)
phantm.annotations.SourceAnnotations.Parser.Entry.<init>(s: String,t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.Entry ==> phantm.annotations.SourceAnnotations.Parser.ArrayEntryType.<init>(): phantm.annotations.SourceAnnotations.Parser.ArrayEntryType
phantm.ast.Trees.If.productElement(x$1: Int): Any ==> phantm.ast.Trees.If.cond: phantm.ast.Trees.Expression
phantm.ast.Trees.If.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.If.productElement(x$1: Int): Any ==> phantm.ast.Trees.If.elze: Option[phantm.ast.Trees.Statement]
phantm.ast.Trees.If.productElement(x$1: Int): Any ==> phantm.ast.Trees.If.then: phantm.ast.Trees.Statement
phantm.ast.Trees.Alternatives.productElement(x$1: Int): Any ==> phantm.ast.Trees.Alternatives.blocks: List[phantm.ast.Trees.Expression]
phantm.ast.Trees.Alternatives.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.displayIncludes: Boolean
phantm.ast.STToAST.getAST: phantm.ast.Trees.Program ==> phantm.ast.STToAST.S(n: phantm.parser.ParseNode): phantm.ast.Trees.Program
phantm.ast.STToAST.getAST: phantm.ast.Trees.Program ==> phantm.ast.STToAST.st: phantm.parser.ParseNode
phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks ==> phantm.ast.ASTTraversal.<init>(root: phantm.ast.Trees.Tree,initCtx: UserDataType): phantm.ast.ASTTraversal[UserDataType]
phantm.ast.Trees.CastInt.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.LabeledDirectedGraphImp.makeBoxed(id: String,name: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.makeBoxed(id: String,name: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.makeBoxed(id: String,name: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.makeBoxed(id: String,name: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.escape(s: String): String
phantm.cfg.LabeledDirectedGraphImp.makeBoxed(id: String,name: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.util.IncludeResolver.end: Unit ==> phantm.util.IncludeResolver.deepNess_$eq(x$1: Int): Unit
phantm.util.IncludeResolver.end: Unit ==> phantm.util.IncludeResolver.deepNess: Int
phantm.helpers.CFGGraphs.productElement(x$1: Int): Any ==> phantm.helpers.CFGGraphs.node: phantm.ast.Trees.Tree
phantm.helpers.CFGGraphs.productElement(x$1: Int): Any ==> phantm.helpers.CFGGraphs.pctx: phantm.phases.PhasesContext
phantm.helpers.CFGGraphs.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.PHPFalse.<init>(): phantm.cfg.Trees.PHPFalse ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.symbol: Option[phantm.symbols.Symbol]
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.files: List[String]
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph]
phantm.phases.PhasesContext.productElement(x$1: Int): Any ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.ast.Trees.PHPFalse.<init>(): phantm.ast.Trees.PHPFalse ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.Trees.Isset.productElement(x$1: Int): Any ==> phantm.ast.Trees.Isset.vs: List[phantm.ast.Trees.Variable]
phantm.ast.Trees.Isset.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Catch.<init>(cl: phantm.ast.Trees.ClassRef,v: phantm.ast.Trees.SimpleVariable,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Catch ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.types.TTrue.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.begin: Unit ==> phantm.util.IncludeResolver.deepNess_$eq(x$1: Int): Unit
phantm.util.IncludeResolver.begin: Unit ==> phantm.util.IncludeResolver.deepNess: Int
phantm.ast.Trees.ClassConstantDecl.<init>(v: phantm.ast.Trees.Identifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ClassConstantDecl ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.types.TUnion.apply(ts: Iterable[phantm.types.Type]): phantm.types.Type ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.apply(ts: Iterable[phantm.types.Type]): phantm.types.Type ==> phantm.types.TUnion.<init>(types: Set[phantm.types.Type]): phantm.types.TUnion
phantm.types.TypeLattice.meetTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.meetTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meet(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeEnvironment, phantm.types.Type)
phantm.types.TypeLattice.meetTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n: Int
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.pctx: phantm.phases.PhasesContext
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n_$eq(x$1: Int): Unit
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n: Int
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.pctx: phantm.phases.PhasesContext
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n: Int
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n: Int
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.pctx: phantm.phases.PhasesContext
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n: Int
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.pctx: phantm.phases.PhasesContext
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n: Int
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n_$eq(x$1: Int): Unit
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> phantm.helpers.CFGGraphs.n_$eq(x$1: Int): Unit
phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Positional.$less(p: phantm.util.Positional): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Positional.$less(p: phantm.util.Positional): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Positional.$less(p: phantm.util.Positional): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Positional.$less(p: phantm.util.Positional): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Positional.$less(p: phantm.util.Positional): Boolean ==> phantm.util.Positional.col: Int
phantm.util.Positional.$less(p: phantm.util.Positional): Boolean ==> phantm.util.Positional.col: Int
phantm.ast.Trees.Break.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Break ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.types.TAny.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Require.once: Boolean
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Include.path: phantm.ast.Trees.Expression
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Include.once: Boolean
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Require.path: phantm.ast.Trees.Expression
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.includeFile(inc: phantm.ast.Trees.Expression,path: phantm.ast.Trees.Expression,once: Boolean,require: Boolean): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.symbols.IfaceMethodSymbol.<init>(is: phantm.symbols.IfaceSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.IfaceMethodSymbol ==> phantm.symbols.FunctionSymbol.<init>(name: String): phantm.symbols.FunctionSymbol
phantm.ast.Trees.DynamicMethodRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef ==> phantm.ast.Trees.MethodRef.<init>(): phantm.ast.Trees.MethodRef
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.annotations.SourceAnnotations.Parser.getReturnType: String => Option[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type]
phantm.cfg.Trees.Return.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Return.rhs: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Return.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.NSWrapper.appendSoFar(): Unit ==> phantm.ast.Trees.Namespaced.<init>(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
phantm.phases.NSWrapper.appendSoFar(): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.NSWrapper.appendSoFar(): Unit ==> phantm.ast.Trees.NamespaceStart.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.Trees.MOD.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.PHPFalse.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.AssignUnary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssignUnary.expr: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.AssignUnary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssignUnary.unOp: phantm.cfg.Trees.UnaryOperator
phantm.cfg.Trees.AssignUnary.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.AssignUnary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssignUnary.variable: phantm.cfg.Trees.Variable
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.n: Int
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.n: Int
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.vertOut: Option[LabeledDirectedGraphImp.this.Vertex]
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.subgroups: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.followGraph(vinit: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.VertexImp.name: String
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.escape(s: String): String
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.vertIn: LabeledDirectedGraphImp.this.Vertex
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.vertIn: LabeledDirectedGraphImp.this.Vertex
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.n: Int
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.name: String
phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.n: Int
phantm.ast.ASTSimpleTraversal.execute: Unit ==> phantm.ast.ASTSimpleTraversal.traverse(visit: phantm.ast.Trees.Tree => Boolean): Unit
phantm.ast.ASTSimpleTraversal.execute: Unit ==> phantm.phases.ASTCollector.visit(t: phantm.ast.Trees.Tree): Boolean
phantm.ast.ASTSimpleTraversal.execute: Unit ==> phantm.phases.TypeFlowAnalysis.visit(node: phantm.ast.Trees.Tree): Boolean
phantm.ast.ASTSimpleTraversal.execute: Unit ==> phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean
phantm.ast.ASTSimpleTraversal.execute: Unit ==> phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean
phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.variable_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.compound_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.Trees.MCDir.<init>(): phantm.ast.Trees.MCDir ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.ast.Trees.THObject.<init>(cl: phantm.ast.Trees.ClassRef): phantm.ast.Trees.THObject
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.optional_class_type(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.TypeHint] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier ==> phantm.ast.Trees.Identifier.<init>(value: String): phantm.ast.Trees.Identifier
phantm.cfg.VertexImp.productElement(x$1: Int): Any ==> phantm.cfg.VertexImp.name: String
phantm.cfg.VertexImp.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Print.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Print ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.phases.PhaseException.productElement(x$1: Int): Any ==> phantm.phases.PhaseException.ph: phantm.phases.Phase
phantm.phases.PhaseException.productElement(x$1: Int): Any ==> phantm.phases.PhaseException.error: String
phantm.phases.PhaseException.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.ClassRefUnknown.<init>(): phantm.cfg.Trees.ClassRefUnknown ==> phantm.cfg.Trees.ClassRef.<init>(): phantm.cfg.Trees.ClassRef
phantm.ast.Trees.Assign.productElement(x$1: Int): Any ==> phantm.ast.Trees.Assign.byref: Boolean
phantm.ast.Trees.Assign.productElement(x$1: Int): Any ==> phantm.ast.Trees.Assign.value: phantm.ast.Trees.Expression
phantm.ast.Trees.Assign.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Assign.productElement(x$1: Int): Any ==> phantm.ast.Trees.Assign.vari: phantm.ast.Trees.Variable
phantm.ast.Trees.MFStatic.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Reporter.Error.productElement(x$1: Int): Any ==> phantm.util.Reporter.Error.message: String
phantm.util.Reporter.Error.productElement(x$1: Int): Any ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.Error.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Reporter.Error.productElement(x$1: Int): Any ==> phantm.util.Reporter.Error.tags: Set[phantm.util.ErrorTag]
phantm.phases.SymContext.productElement(x$1: Int): Any ==> phantm.phases.SymContext.cl: Option[phantm.symbols.ClassSymbol]
phantm.phases.SymContext.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.SymContext.productElement(x$1: Int): Any ==> phantm.phases.SymContext.iface: Option[phantm.symbols.IfaceSymbol]
phantm.phases.SymContext.productElement(x$1: Int): Any ==> phantm.phases.SymContext.varScope: phantm.symbols.Scope
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.common_scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Minus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Array.<init>(values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]): phantm.ast.Trees.Array
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.Trees.BitwiseXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseXor ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.STToAST.ctor_arguments(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.ctor_arguments(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.ctor_arguments(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.ctor_arguments(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.Trees.Echo.<init>(exprs: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Echo ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer ==> java.lang.StringBuffer.append(x$1: String): StringBuffer
phantm.symbols.ArgumentSymbol.name: String ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.ArgumentSymbol.name: String ==> phantm.symbols.PropertySymbol.name: String
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> phantm.types.TypeFlowAnalyzer.thisObj: Option[phantm.types.TObjectRef]
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> phantm.types.TypeFlowAnalyzer.scope: phantm.symbols.Scope
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> phantm.types.TypeFlowAnalyzer.cfg: phantm.cfg.ControlFlowGraph
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> phantm.types.TypeFlowAnalyzer.baseEnvInit: phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> phantm.types.TypeFlowAnalyzer.collectGlobals: Boolean
phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any ==> phantm.types.TypeFlowAnalyzer.inlined: Boolean
phantm.ast.Trees.Empty.productElement(x$1: Int): Any ==> phantm.ast.Trees.Empty.v: phantm.ast.Trees.Variable
phantm.ast.Trees.Empty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.ObjectStore.<init>(store: Map[phantm.types.ObjectId,phantm.types.TRealObject]): phantm.types.ObjectStore ==> java.lang.Object.<init>(): Object
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx_$eq(x$1: phantm.phases.PhasesContext): Unit
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.display(content: String): Unit
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx_$eq(x$1: phantm.phases.PhasesContext): Unit
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.display(content: String): Unit
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.display(content: String): Unit
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx_$eq(x$1: phantm.phases.PhasesContext): Unit
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.cfg.ASTToCFG.convertAST(statements: List[phantm.ast.Trees.Statement],scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext): phantm.cfg.ControlFlowGraph
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.CFGGenerator.ctx: phantm.phases.PhasesContext
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CFGGenerator.visit(node: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.Empty.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Empty ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.STToAST.varIdentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.varIdentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier ==> phantm.ast.Trees.Identifier.<init>(value: String): phantm.ast.Trees.Identifier
phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssignBinary.variable: phantm.cfg.Trees.Variable
phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssignBinary.binOp: phantm.cfg.Trees.BinaryOperator
phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssignBinary.rhs: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssignBinary.lhs: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.NamespaceStart.productElement(x$1: Int): Any ==> phantm.ast.Trees.NamespaceStart.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.NamespaceStart.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree): phantm.phases.ASTIntegrityChecks ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree): phantm.phases.ASTIntegrityChecks ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.Trees.ClassProperty.<init>(cl: phantm.ast.Trees.ClassRef,property: phantm.ast.Trees.Variable): phantm.ast.Trees.ClassProperty
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.Trees.VarClassRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_member(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassProperty ==> phantm.ast.Trees.ClassProperty.<init>(cl: phantm.ast.Trees.ClassRef,property: phantm.ast.Trees.Variable): phantm.ast.Trees.ClassProperty
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Plus.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Clone.obj: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BitwiseXor.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Mult.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Ternary.then: Option[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.MethodCall.name: phantm.ast.Trees.MethodRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Empty.v: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.MethodCall.<init>(receiver: phantm.cfg.Trees.SimpleValue,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.MethodCall
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Minus.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.ShiftRight.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignUnary.<init>(variable: phantm.cfg.Trees.Variable,unOp: phantm.cfg.Trees.UnaryOperator,expr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignUnary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.PHPAny.<init>(): phantm.cfg.Trees.PHPAny
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Ternary.<init>(cond: phantm.cfg.Trees.SimpleValue,then: phantm.cfg.Trees.SimpleValue,elze: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Ternary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Plus.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.New.args: List[phantm.ast.Trees.CallArg]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Mult.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Concat.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignUnary.<init>(variable: phantm.cfg.Trees.Variable,unOp: phantm.cfg.Trees.UnaryOperator,expr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignUnary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Print.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.ShiftLeft.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.New.cl: phantm.ast.Trees.ClassRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.StaticMethodCall.<init>(cl: phantm.cfg.Trees.ClassRef,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.StaticMethodCall
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BitwiseAnd.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BitwiseOr.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Ternary.elze: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Mod.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Silence.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.StaticMethodRef.id: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Ternary.cond: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BitwiseOr.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Concat.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Ternary.then: Option[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.PHPEmptyArray.<init>(): phantm.cfg.Trees.PHPEmptyArray
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Div.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BooleanNot.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.MethodCall.name: phantm.ast.Trees.MethodRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.ShiftRight.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.internalFunction(name: String): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.InstanceOf.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Mod.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Ternary.elze: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.MethodCall.obj: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.StaticMethodCall.name: phantm.ast.Trees.MethodRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Div.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Clone.<init>(obj: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Clone
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.InstanceOf.rhs: phantm.ast.Trees.ClassRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Eval.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.StaticMethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.StaticMethodCall.cl: phantm.ast.Trees.ClassRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.New.<init>(cl: phantm.cfg.Trees.ClassRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.New
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Ternary.<init>(cond: phantm.cfg.Trees.SimpleValue,then: phantm.cfg.Trees.SimpleValue,elze: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Ternary
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Ternary.cond: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Minus.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BitwiseNot.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BitwiseAnd.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.FuncRef.<init>(id: phantm.ast.Trees.NSIdentifier): phantm.cfg.Trees.FuncRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.MethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BooleanXor.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BitwiseXor.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Execute.value: String
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.ShiftLeft.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.BooleanXor.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.SubTypeOf.<init>(lhs: phantm.cfg.Trees.SimpleValue,cl: phantm.cfg.Trees.ClassRef): phantm.cfg.Trees.SubTypeOf
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.StaticMethodRef.id: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.MethodCall.obj: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.Array.values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.PHPAny.<init>(): phantm.cfg.Trees.PHPAny
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement] ==> phantm.ast.Trees.MethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.cfg.Trees.Print.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Print.rhs: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Print.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.OAIdentifier.productElement(x$1: Int): Any ==> phantm.ast.Trees.OAIdentifier.id: phantm.ast.Trees.Identifier
phantm.ast.Trees.OAIdentifier.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyIntEntry
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.Entry.<init>(s: String,t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.Entry
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.Entry.<init>(s: String,t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.Entry
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyStringEntry
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StdTokenParsers.numericLit: StdTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.AnyEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyEntry
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StdTokenParsers.stringLit: StdTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.DynamicFunctionRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicFunctionRef
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.DynamicFunctionRef.ex: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.VarFunctionRef.v: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.VarFunctionRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarFunctionRef
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.StaticFunctionRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trFuncRef(fr: phantm.ast.Trees.FunctionRef): phantm.ast.Trees.FunctionRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.Trees.IsObject.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhaseSeq.copy(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.<init>(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq
phantm.ast.Trees.Label.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.Label ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.Trees.PropertyDecl.<init>(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.varIdentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.Trees.PropertyDecl.<init>(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.varIdentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.varIdentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.Trees.PropertyDecl.<init>(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.Trees.PropertyDecl.<init>(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.varIdentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_variable_declaration(n: phantm.parser.ParseNode,vm: List[phantm.ast.Trees.MemberFlag]): List[phantm.ast.Trees.PropertyDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.cfg.Trees.POSTDEC.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol ==> phantm.symbols.Symbol.<init>(): phantm.symbols.Symbol
phantm.ast.Trees.DoWhile.productElement(x$1: Int): Any ==> phantm.ast.Trees.DoWhile.body: phantm.ast.Trees.Statement
phantm.ast.Trees.DoWhile.productElement(x$1: Int): Any ==> phantm.ast.Trees.DoWhile.cond: phantm.ast.Trees.Expression
phantm.ast.Trees.DoWhile.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.GlobalSymbols.functions: scala.collection.mutable.HashMap[String,phantm.symbols.FunctionSymbol]
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.GlobalSymbols.functions: scala.collection.mutable.HashMap[String,phantm.symbols.FunctionSymbol]
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.Symbol.overwriteable: Boolean
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.ClassConstantSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ClassConstantSymbol ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.ast.Trees.Require.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Require ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.types.TypeLattice.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.SimpleVariable.copy(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable ==> phantm.ast.Trees.SimpleVariable.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
phantm.types.TNumericLit.<init>(): phantm.types.TNumericLit ==> phantm.types.ConcreteType.<init>(): phantm.types.ConcreteType
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.afterDump: Boolean
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.afterDump_$eq(x$1: Boolean): Unit
phantm.types.ObjectIdUse.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.New.<init>(cl: phantm.ast.Trees.ClassRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.New ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.OAMethod.<init>(name: phantm.ast.Trees.ObjectAccess,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.OAMethod ==> phantm.ast.Trees.ObjectAccess.<init>(): phantm.ast.Trees.ObjectAccess
phantm.types.ClassType.<init>(): phantm.types.ClassType ==> java.lang.Object.<init>(): Object
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> phantm.types.TypeTransferFunction.noticesFct: (String, phantm.util.Positional) => Unit
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> phantm.types.TypeTransferFunction.inlined: Boolean
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> phantm.types.TypeTransferFunction.collectGlobals: Boolean
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> phantm.types.TypeTransferFunction.ctx: phantm.phases.PhasesContext
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> phantm.types.TypeTransferFunction.collectAnnotations: Boolean
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> phantm.types.TypeTransferFunction.errorsFct: (String, phantm.util.Positional) => Unit
phantm.types.TypeTransferFunction.productElement(x$1: Int): Any ==> phantm.types.TypeTransferFunction.silent: Boolean
phantm.types.TNumeric.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.PropertySymbol.visibility: phantm.symbols.MemberVisibility
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.DumpCollector.files: List[String]
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.dumps: List[String]
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.files: List[String]
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.DumpCollector.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.DumpCollector
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.dumps: List[String]
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.files: List[String]
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol] ==> phantm.symbols.GlobalSymbols.classes: scala.collection.mutable.HashMap[String,phantm.symbols.ClassSymbol]
phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType] ==> phantm.cfg.LabeledDirectedGraphImp.counter: Int
phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType] ==> phantm.cfg.LabeledDirectedGraphImp.counter: Int
phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType] ==> phantm.cfg.LabeledDirectedGraphImp.counter_$eq(x$1: Int): Unit
phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType] ==> phantm.cfg.VertexImp.<init>(name: String): phantm.cfg.VertexImp[L]
phantm.ast.Trees.CastString.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.Trees.Program.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.Trees.ExpandArray.<init>(vars: List[Option[phantm.ast.Trees.Variable]],expr: phantm.ast.Trees.Expression): phantm.ast.Trees.ExpandArray ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.types.TypeLattice.meet(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeEnvironment, phantm.types.Type) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.meet(envInit: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): (phantm.types.TypeEnvironment, phantm.types.Type) ==> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.phases.ASTPruner.<init>(ast: phantm.ast.Trees.Program): phantm.phases.ASTPruner ==> phantm.ast.ASTTransform.<init>(p: phantm.ast.Trees.Program): phantm.ast.ASTTransform
phantm.ast.Trees.Mod.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mod ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.MCMethod.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MCFunction.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.Settings.verbosity: Int
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Some.<init>(x: A): Some[A]
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.value: String
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.Settings.verbosity: Int
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.Settings.get: phantm.Settings
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.Settings.get: phantm.Settings
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.symbols.GlobalSymbols.lookupConstant(n: String): Option[phantm.symbols.ConstantSymbol]
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.Namespaced.<init>(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.Namespaced.<init>(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.NamespaceStart.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NamespaceStart
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.notyet(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.Unset.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Unset ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.cfg.Trees.PHPEmptyArray.<init>(): phantm.cfg.Trees.PHPEmptyArray ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.ast.STToAST.exit_expr(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.exit_expr(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.exit_expr(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.exit_expr(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.exit_expr(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.Trees.Identifier.<init>(value: String): phantm.ast.Trees.Identifier ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.cfg.Trees.Ternary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Ternary.then: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Ternary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Ternary.cond: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Ternary.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Ternary.elze: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Ternary.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TFloat.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.StaticMethodCall.name: phantm.ast.Trees.MethodRef
phantm.ast.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.StaticMethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.ast.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.StaticMethodCall.cl: phantm.ast.Trees.ClassRef
phantm.ast.Trees.StaticMethodCall.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodDecl.retref: Boolean
phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.Trees.MethodDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.Trees.MethodDecl.retref: Boolean
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.ast.Trees.MethodDecl.<init>(name: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.MethodDecl
phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TRealObject.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]]
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable]
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]] ==> phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable]
phantm.types.IntKey.vToString: String ==> phantm.types.IntKey.v: Long
phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.ArrayEntry.productElement(x$1: Int): Any ==> phantm.ast.Trees.ArrayEntry.array: phantm.ast.Trees.Expression
phantm.ast.Trees.ArrayEntry.productElement(x$1: Int): Any ==> phantm.ast.Trees.ArrayEntry.index: phantm.ast.Trees.Expression
phantm.ast.Trees.ArrayEntry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.onlyLint: Boolean
phantm.ast.Trees.Print.productElement(x$1: Int): Any ==> phantm.ast.Trees.Print.value: phantm.ast.Trees.Expression
phantm.ast.Trees.Print.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Exit.<init>(value: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.Exit ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.ArrayCurKey.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ArrayCurKey.ar: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ArrayCurKey.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CallGraphGeneration.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CGContext,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration ==> phantm.ast.ASTTraversal.<init>(root: phantm.ast.Trees.Tree,initCtx: UserDataType): phantm.ast.ASTTraversal[UserDataType]
phantm.InlineNone.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhasesContext.apply$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance ==> phantm.util.GlobalAnalysisResults.<init>(): phantm.util.GlobalAnalysisResults
phantm.cfg.LabeledDirectedGraphImp.Group.followGraph(vinit: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.Group.followGraph(vinit: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.out: Set[phantm.cfg.EdgeImp[L]]
phantm.cfg.LabeledDirectedGraphImp.Group.followGraph(vinit: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.name: String
phantm.cfg.LabeledDirectedGraphImp.Group.followGraph(vinit: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.Group.followGraph(vinit: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.emit(s: String): StringBuffer
phantm.ast.Trees.BooleanAnd.productElement(x$1: Int): Any ==> phantm.ast.Trees.BooleanAnd.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BooleanAnd.productElement(x$1: Int): Any ==> phantm.ast.Trees.BooleanAnd.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BooleanAnd.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.TempID.<init>(value: String): phantm.cfg.Trees.TempID ==> phantm.cfg.Trees.SimpleVariable.<init>(): phantm.cfg.Trees.SimpleVariable
phantm.ast.Trees.Silence.productElement(x$1: Int): Any ==> phantm.ast.Trees.Silence.value: phantm.ast.Trees.Expression
phantm.ast.Trees.Silence.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.FunctionType.<init>(): phantm.types.FunctionType ==> java.lang.Object.<init>(): Object
phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type ==> phantm.annotations.FunctionTypeAnnotation.ftyps_$eq(x$1: scala.collection.immutable.Set[phantm.types.FunctionType]): Unit
phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type ==> phantm.annotations.FunctionTypeAnnotation.ftyps: scala.collection.immutable.Set[phantm.types.FunctionType]
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> phantm.cfg.ControlFlowGraph.entry: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> phantm.cfg.LabeledDirectedGraphImp.V: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.ASTToCFG.fewerSkips: Unit ==> phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.Trees.ClassProperty.<init>(symbol: phantm.symbols.PropertySymbol): phantm.cfg.Trees.ClassProperty ==> phantm.cfg.Trees.SimpleVariable.<init>(): phantm.cfg.Trees.SimpleVariable
phantm.ast.Trees.MCFile.<init>(): phantm.ast.Trees.MCFile ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)]
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)]
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.util.API.Writer.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Writer ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.OAScalar.<init>(): phantm.ast.Trees.OAScalar ==> phantm.ast.Trees.ObjectAccess.<init>(): phantm.ast.Trees.ObjectAccess
phantm.ast.ASTSimpleTraversal.<init>(root: phantm.ast.Trees.Tree): phantm.ast.ASTSimpleTraversal ==> phantm.ast.ASTTraversal.<init>(root: phantm.ast.Trees.Tree,initCtx: UserDataType): phantm.ast.ASTTraversal[UserDataType]
phantm.ast.ASTSimpleTraversal.<init>(root: phantm.ast.Trees.Tree): phantm.ast.ASTSimpleTraversal ==> phantm.ast.DummyContext.<init>(): phantm.ast.DummyContext
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.types.TFloatLit.<init>(value: Float): phantm.types.TFloatLit
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.ast.Trees.Minus.rhs: phantm.ast.Trees.Expression
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.ast.Trees.PHPString.value: String
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.ast.Trees.Minus.lhs: phantm.ast.Trees.Expression
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.ast.Trees.PHPFloat.value: Float
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.types.TIntLit.<init>(value: Long): phantm.types.TIntLit
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.types.TStringLit.<init>(value: String): phantm.types.TStringLit
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> phantm.ast.Trees.PHPInteger.value: Long
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Reporter.emit(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Reporter.emitNormal(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit
phantm.util.Reporter.emit(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Reporter.emitQuickFix(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit
phantm.util.Reporter.emit(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.get: phantm.Settings
phantm.util.Reporter.emit(tags: Set[phantm.util.ErrorTag],msg: String,pos: phantm.util.Positional): Unit ==> phantm.Settings.format: String
phantm.annotations.SourceAnnotations.Parser.strToType(str: String): Option[phantm.types.Type] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.lexical: scala.util.parsing.combinator.lexical.StdLexical
phantm.annotations.SourceAnnotations.Parser.strToType(str: String): Option[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.strToType(str: String): Option[phantm.types.Type] ==> scala.Some.<init>(x: A): Some[A]
phantm.annotations.SourceAnnotations.Parser.strToType(str: String): Option[phantm.types.Type] ==> scala.util.parsing.combinator.lexical.Scanners.Scanner.<init>(in: String): Scanners.this.Scanner
phantm.symbols.MVPrivate.stricterThan(o: phantm.symbols.MemberVisibility): Boolean ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.cfg.Trees.ClassRefUnknown.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.getId: Int
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.escape(s: String): String
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Tuple3._1: T1
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Tuple2._1: T1
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any]
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Tuple2._2: T2
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.getLabel(node: phantm.ast.Trees.Tree): String
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Tuple3._2: T2
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Some.x: A
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Tuple3._3: T3
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.helpers.ASTGraph.dotPrint(o: Any,pid: Int): Unit ==> phantm.helpers.ASTGraph.emit(str: String): Unit
phantm.util.Unserializer.toScalarMap: scala.collection.immutable.Map[String,phantm.ast.Trees.Scalar] ==> phantm.util.Unserializer.uValueToScalar(v: phantm.util.UValue): phantm.ast.Trees.Scalar
phantm.util.Unserializer.toScalarMap: scala.collection.immutable.Map[String,phantm.ast.Trees.Scalar] ==> phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue]
phantm.cfg.Trees.New.<init>(cl: phantm.cfg.Trees.ClassRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.New ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.ast.Trees.MCMethod.<init>(): phantm.ast.Trees.MCMethod ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.annotations.SourceAnnotations.Parser.importTypeDefs(comment: String): Unit ==> phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit
phantm.annotations.SourceAnnotations.Parser.importTypeDefs(comment: String): Unit ==> phantm.annotations.SourceAnnotations.Parser.filterLines(comment: String,tag: String): List[String]
phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode ==> java.lang.RuntimeException.<init>(x$1: String): RuntimeException
phantm.util.ConstantsResolver.productElement(x$1: Int): Any ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.ConstantsResolver.productElement(x$1: Int): Any ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.productElement(x$1: Int): Any ==> phantm.util.ConstantsResolver.ast: phantm.ast.Trees.Program
phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.ast.STToAST.object_dim_list(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.object_dim_list(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.accumulate(n: phantm.parser.ParseNode,acc: List[Option[phantm.ast.Trees.Expression]]): (phantm.ast.Trees.OAScalar, List[Option[phantm.ast.Trees.Expression]])
phantm.ast.STToAST.object_dim_list(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.object_dim_list(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.Trees.OAArray.<init>(array: phantm.ast.Trees.OAScalar,indexes: List[Option[phantm.ast.Trees.Expression]]): phantm.ast.Trees.OAArray
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.usage: Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.version: Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesRunner.<init>(reporter: phantm.util.Reporter): phantm.phases.PhasesRunner
phantm.Main.main(args: Array[String]): Unit ==> phantm.Settings.set(stgs: phantm.Settings): Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.util.Reporter.<init>(mainFiles: List[String]): phantm.util.Reporter
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.$lessinit$greater$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.files: List[String]
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.files: List[String]
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.$lessinit$greater$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.displayUsage: Boolean
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.<init>(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.Main.main(args: Array[String]): Unit ==> phantm.util.Reporter.set(newrep: phantm.util.Reporter): Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.usage: Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.displayVersion: Boolean
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.files: List[String]
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.$lessinit$greater$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.$lessinit$greater$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.$lessinit$greater$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.$lessinit$greater$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.$lessinit$greater$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.usage: Unit
phantm.Main.main(args: Array[String]): Unit ==> phantm.Main.displayUsage: Boolean
phantm.cfg.ASTToCFG.Emit.statementBetween(from: Vertex,stat: phantm.cfg.Trees.Statement,to: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.ast.Trees.MethodDecl.<init>(name: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.MethodDecl ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.Trees.ShiftLeft.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftLeft ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.types.TIntLit.productElement(x$1: Int): Any ==> phantm.types.TIntLit.value: Long
phantm.types.TIntLit.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.pc_$eq(x$1: Vertex): Unit
phantm.cfg.Trees.IsResource.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.exportAPIPath: Option[String]
phantm.phases.PhasesContext.<init>(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext ==> java.lang.Object.<init>(): Object
phantm.phases.PhasesContext.<init>(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext ==> phantm.util.GlobalAnalysisResults.<init>(): phantm.util.GlobalAnalysisResults
phantm.phases.PhasesContext.<init>(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext ==> phantm.symbols.GlobalSymbols.<init>(): phantm.symbols.GlobalSymbols
phantm.types.TResource.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.ast.Trees.DynamicMethodRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.ast.Trees.StaticMethodRef.id: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.ast.Trees.StaticMethodRef.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.ast.Trees.DynamicMethodRef.ex: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trMethodRef(mr: phantm.ast.Trees.MethodRef): phantm.ast.Trees.MethodRef ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.cfg.Trees.PHPNull.<init>(): phantm.cfg.Trees.PHPNull ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.ast.Trees.Try.<init>(body: phantm.ast.Trees.Statement,catches: List[phantm.ast.Trees.Catch]): phantm.ast.Trees.Try ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.types.ArrayKey.fromString(str: String): phantm.types.ArrayKey ==> phantm.types.IntKey.<init>(v: Long): phantm.types.IntKey
phantm.types.ArrayKey.fromString(str: String): phantm.types.ArrayKey ==> phantm.types.StringKey.<init>(v: String): phantm.types.StringKey
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> phantm.types.TFunction.ret: phantm.types.Type
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> phantm.types.TFunction.ret: phantm.types.Type
phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.ConstantSymbol.name: String
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.name: String
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.GlobalSymbols.constants: scala.collection.mutable.HashMap[String,phantm.symbols.ConstantSymbol]
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.GlobalSymbols.constants: scala.collection.mutable.HashMap[String,phantm.symbols.ConstantSymbol]
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.ConstantSymbol.name: String
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.name: String
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.ConstantSymbol.name: String
phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.name: String
phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings ==> phantm.Settings.<init>(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean
phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.Error.<init>(message: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Reporter.this.Error
phantm.helpers.ASTGraph.getLabel(node: phantm.ast.Trees.Tree): String ==> java.lang.Object.getClass(): Class[_]
phantm.ast.Trees.THObject.<init>(cl: phantm.ast.Trees.ClassRef): phantm.ast.Trees.THObject ==> phantm.ast.Trees.TypeHint.<init>(): phantm.ast.Trees.TypeHint
phantm.ast.Trees.BitwiseOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseOr ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.util.API.Reader.APIPos.<init>(elem: scala.xml.Node): Reader.this.APIPos ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.PHPAny.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.While.then: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Echo.<init>(exprs: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Echo
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.LabelDecl.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.LabelDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.<init>(name: phantm.ast.Trees.NSIdentifier,interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.InterfaceDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Switch.<init>(expr: phantm.ast.Trees.Expression,cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]): phantm.ast.Trees.Switch
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.DoWhile.<init>(body: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression): phantm.ast.Trees.DoWhile
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.v: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.asbyref: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.<init>(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.For.step: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.as: phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Catch.cl: phantm.ast.Trees.ClassRef
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Return.expr: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.If.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.key: Option[phantm.ast.Trees.Variable]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Break.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Break
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.body: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Break.level: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.If.elze: Option[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Html.<init>(content: String): phantm.ast.Trees.Html
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.For.init: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Catch.<init>(cl: phantm.ast.Trees.ClassRef,v: phantm.ast.Trees.SimpleVariable,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Catch
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.LabelDecl.name: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.For.cond: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Global.vars: List[phantm.ast.Trees.Variable]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Goto.<init>(to: phantm.ast.Trees.Label): phantm.ast.Trees.Goto
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.src: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Html.content: String
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.body: List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Catch.body: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Try.catches: List[phantm.ast.Trees.Catch]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.DoWhile.cond: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Throw.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Throw
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Unset.vars: List[phantm.ast.Trees.Variable]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.If.cond: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Try.<init>(body: phantm.ast.Trees.Statement,catches: List[phantm.ast.Trees.Catch]): phantm.ast.Trees.Try
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Goto.to: phantm.ast.Trees.Label
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.<init>(what: phantm.ast.Trees.Expression,as: phantm.ast.Trees.Variable,asbyref: Boolean,key: Option[phantm.ast.Trees.Variable],keybyref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Foreach
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Continue.level: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.FunctionDecl.<init>(name: phantm.ast.Trees.NSIdentifier,args: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.FunctionDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.While.cond: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Throw.ex: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Static.<init>(vars: List[phantm.ast.Trees.InitVariable]): phantm.ast.Trees.Static
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Static.vars: List[phantm.ast.Trees.InitVariable]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Global.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Global
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.DoWhile.body: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Unset.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Unset
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Return.<init>(expr: phantm.ast.Trees.Expression): phantm.ast.Trees.Return
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Continue.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Continue
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.<init>(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Try.body: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.what: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trMethod(md: phantm.ast.Trees.MethodDecl): phantm.ast.Trees.MethodDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NamespaceStart.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NamespaceStart
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Switch.expr: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Switch.cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.keybyref: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.to: String
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Catch.v: phantm.ast.Trees.SimpleVariable
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.If.then: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.For.then: phantm.ast.Trees.Statement
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.<init>(name: phantm.ast.Trees.NSIdentifier,flags: phantm.ast.Trees.ClassFlag,parent: Option[phantm.ast.Trees.StaticClassRef],interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],static_props: List[phantm.ast.Trees.PropertyDecl],props: List[phantm.ast.Trees.PropertyDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.ClassDecl
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Echo.exprs: List[phantm.ast.Trees.Expression]
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.For.<init>(init: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression,step: phantm.ast.Trees.Statement,then: phantm.ast.Trees.Statement): phantm.ast.Trees.For
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NamespaceStart.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.<init>(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.While.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement): phantm.ast.Trees.While
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Lint.<init>(): phantm.helpers.Lint
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.handle_options(opts: List[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.handle_options(opts: List[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.handle_options(opts: List[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.handle_options(opts: List[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Tokenizer.<init>(): phantm.helpers.Tokenizer
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.handle_options(opts: List[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.CFGGraph.<init>(): phantm.helpers.CFGGraph
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> java.lang.Exception.<init>(): Exception
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.STGraph.<init>(): phantm.helpers.STGraph
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.handle_options(opts: List[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.helper_$eq(x$1: phantm.helpers.Helper): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.helper_$eq(x$1: phantm.helpers.Helper): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.input_$eq(x$1: Option[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.ASTGraph.<init>(): phantm.helpers.ASTGraph
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.output_$eq(x$1: Option[String]): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.helper_$eq(x$1: phantm.helpers.Helper): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.helper_$eq(x$1: phantm.helpers.Helper): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> phantm.helpers.Main.helper_$eq(x$1: phantm.helpers.Helper): Unit
phantm.helpers.Main.handle_options(opts: List[String]): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.Trees.Clone.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Clone.obj: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Clone.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.MethodGraphGeneration.execute: Unit
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.MethodGraphGeneration.<init>(ctx: phantm.phases.PhasesContext): phantm.phases.MethodGraphGeneration
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.exportMGPath: Option[String]
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.annotations.FunctionAnnotation.shouldInline_$eq(x$1: Boolean): Unit
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.exportMGPath: Option[String]
phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.util.UObjRef.productElement(x$1: Int): Any ==> phantm.util.UObjRef.i: Int
phantm.util.UObjRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Array.<init>(values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]): phantm.ast.Trees.Array ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.ShiftRight.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftRight ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.productElement(x$1: Int): Any ==> phantm.phases.PureStatementsChecks.node: phantm.ast.Trees.Tree
phantm.phases.PureStatementsChecks.productElement(x$1: Int): Any ==> phantm.phases.PureStatementsChecks.ctx: phantm.phases.PhasesContext
phantm.phases.PureStatementsChecks.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.IsScalar.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TRealObject.lookupField(index: String): phantm.types.Type ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TRealObject.lookupField(index: String): phantm.types.Type ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.types.Type.<init>(): phantm.types.Type ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.Trees.CallArg.<init>(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.Trees.CallArg.<init>(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.Trees.CallArg.<init>(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.Trees.CallArg.<init>(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.cfg.Trees.ClassRefDynamic.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ClassRefDynamic.sv: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ClassRefDynamic.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Div.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Div ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.phases.CGContext.<init>(scope: Option[phantm.symbols.FunctionSymbol]): phantm.phases.CGContext ==> java.lang.Object.<init>(): Object
phantm.symbols.Symbol.setUserland: Symbol.this.type ==> phantm.symbols.Symbol.setUserland(value: Boolean): Symbol.this.type
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeFlowAnalyzer.$lessinit$greater$default$6: phantm.types.TypeEnvironment @scala.annotation.unchecked.uncheckedVariance ==> phantm.types.TypeEnvironment.<init>(): phantm.types.TypeEnvironment
phantm.ast.Trees.Div.productElement(x$1: Int): Any ==> phantm.ast.Trees.Div.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Div.productElement(x$1: Int): Any ==> phantm.ast.Trees.Div.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Div.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.Phase.followedBy(phase: phantm.phases.Phase): phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq
phantm.phases.Phase.followedBy(phase: phantm.phases.Phase): phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.<init>(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq
phantm.cfg.Trees.Assign.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Assign.variable: phantm.cfg.Trees.Variable
phantm.cfg.Trees.Assign.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Assign.value: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Assign.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.dim_offset(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.GlobalAnalysisResults.reachableFromMain_$eq(x$1: Map[phantm.symbols.FunctionSymbol,Set[phantm.symbols.FunctionSymbol]]): Unit
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CallGraphPhase.flag(osym: Option[phantm.symbols.FunctionSymbol],inline: Boolean): Unit
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.dataflow.StronglyConnectedComponents.<init>(cfg: phantm.cfg.LabeledDirectedGraphImp[S]): phantm.dataflow.StronglyConnectedComponents[S]
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CallGraphPhase.flag(osym: Option[phantm.symbols.FunctionSymbol],inline: Boolean): Unit
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CallGraphPhase.flag(osym: Option[phantm.symbols.FunctionSymbol],inline: Boolean): Unit
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CallGraphPhase.flag(osym: Option[phantm.symbols.FunctionSymbol],inline: Boolean): Unit
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.exportCGPath: Option[String]
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CallGraphGeneration.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CallGraphGeneration.execute: Unit
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.exportCGPath: Option[String]
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.Main.version: Unit ==> java.lang.Object.getClass(): Class[_]
phantm.ast.Trees.FunctionRef.<init>(): phantm.ast.Trees.FunctionRef ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.Trees.PostDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostDec ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.StaticClassRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticClassRef ==> phantm.ast.Trees.ClassRef.<init>(): phantm.ast.Trees.ClassRef
phantm.ast.Trees.MCFunction.<init>(): phantm.ast.Trees.MCFunction ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.Trees.Smaller.productElement(x$1: Int): Any ==> phantm.ast.Trees.Smaller.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Smaller.productElement(x$1: Int): Any ==> phantm.ast.Trees.Smaller.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Smaller.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type ==> phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type
phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type ==> phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.ast.Trees.PHPNull.<init>(): phantm.ast.Trees.PHPNull ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.Trees.THObject.productElement(x$1: Int): Any ==> phantm.ast.Trees.THObject.cl: phantm.ast.Trees.ClassRef
phantm.ast.Trees.THObject.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Reporter.clear: Unit ==> phantm.util.Reporter.errors_$eq(x$1: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]): Unit
phantm.util.Reporter.clear: Unit ==> phantm.util.Reporter.errors: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]
phantm.ast.Trees.PropertyDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.PropertyDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.PropertyDecl.default: Option[phantm.ast.Trees.Expression]
phantm.ast.Trees.PropertyDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.PropertyDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.ast.Trees.PropertyDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.PropertyDecl.v: phantm.ast.Trees.Identifier
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]]
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.Trees.ListVar.<init>(vars: List[Option[phantm.ast.Trees.Variable]]): phantm.ast.Trees.ListVar
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.assignment_list_element(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.phases.MethodGraphGeneration.<init>(ctx: phantm.phases.PhasesContext): phantm.phases.MethodGraphGeneration ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.FuncRef.productElement(x$1: Int): Any ==> phantm.cfg.Trees.FuncRef.id: phantm.ast.Trees.NSIdentifier
phantm.cfg.Trees.FuncRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.UInt.productElement(x$1: Int): Any ==> phantm.util.UInt.v: Int
phantm.util.UInt.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.interfacesToPass_$eq(x$1: List[phantm.ast.Trees.InterfaceDecl]): Unit
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.classesToPass_$eq(x$1: List[phantm.ast.Trees.ClassDecl]): Unit
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.classesToPass: List[phantm.ast.Trees.ClassDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.interfacesToPass: List[phantm.ast.Trees.InterfaceDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.visitClasses(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.ast.Trees.CFAbstract.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.UFloat.productElement(x$1: Int): Any ==> phantm.util.UFloat.str: Float
phantm.util.UFloat.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.Return.<init>(rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Return ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.ast.Trees.MethodRef.<init>(): phantm.ast.Trees.MethodRef ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.cfg.Trees.BOOLEANNOT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.For.productElement(x$1: Int): Any ==> phantm.ast.Trees.For.init: phantm.ast.Trees.Statement
phantm.ast.Trees.For.productElement(x$1: Int): Any ==> phantm.ast.Trees.For.cond: phantm.ast.Trees.Expression
phantm.ast.Trees.For.productElement(x$1: Int): Any ==> phantm.ast.Trees.For.step: phantm.ast.Trees.Statement
phantm.ast.Trees.For.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.For.productElement(x$1: Int): Any ==> phantm.ast.Trees.For.then: phantm.ast.Trees.Statement
phantm.types.ObjectStore.productElement(x$1: Int): Any ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.ObjectStore.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.ObjectStore.lookup(id: phantm.types.ObjectId): phantm.types.TRealObject ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.ObjectStore.lookup(id: phantm.types.ObjectId): phantm.types.TRealObject ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry ==> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
phantm.ast.Trees.Echo.productElement(x$1: Int): Any ==> phantm.ast.Trees.Echo.exprs: List[phantm.ast.Trees.Expression]
phantm.ast.Trees.Echo.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.MethodSymbol.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerPredefVariables: Unit
phantm.symbols.MethodSymbol.registerPredefVariables: Unit ==> phantm.symbols.MethodSymbol.registerPredefVariables: Unit
phantm.symbols.MethodSymbol.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.MethodSymbol.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray ==> phantm.types.ConcreteType.<init>(): phantm.types.ConcreteType
phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.includePaths: List[String]
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPEmptyArray.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCLine.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.IncludeResolver.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NoVar.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CGContext.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFunction.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.LabelDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPString.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurKey.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mult.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANXOR.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.If.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FuncRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionCall.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarClassRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFloat.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableVar.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.INSTANCEOF.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CollectSymbols.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Plus.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.LabeledDirectedGraphImp.Group.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsBool.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseSeq.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TClass.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObjRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Exit.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectStore.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Cast.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TResource.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Require.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assume.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREDEC.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignBinary.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreInc.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product2.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Some.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Equal.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ConstantDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mod.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.URealRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPTrue.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CFGGenerator.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UArray.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Print.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticFunctionRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.CONCAT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NextArrayEntry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Break.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFloat.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFFinal.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product3.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.For.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CheckContext.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product7.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Assign.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreDec.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPAny.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarFunctionRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Ternary.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTEQUALS.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefUnknown.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObject.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MethodCall.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Alternatives.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Skip.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DoWhile.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPInteger.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FunctionCall.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Html.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.EdgeImp.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VariableVariable.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MOD.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.IntKey.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayEntry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticClassRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VoidExpr.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefFixed.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsInt.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Constant.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITSIWENOT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Constant.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAIdentifier.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IDENTICAL.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Silence.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ObjectProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFunction.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanOr.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeLattice.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MINUS.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastUnset.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftRight.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsString.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassConstant.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPNull.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefCalledClass.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPLong.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.New.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAExpression.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFAbstract.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Import.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFalse.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayNext.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Isset.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PureStatementsChecks.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsNull.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFStatic.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseException.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Throw.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Div.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UTrue.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ENotice.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNull.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.API.Reader.APIPos.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Isset.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TString.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREINC.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSIdentifier.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineNone.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.While.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAny.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSCurrent.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CFGGraphs.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefDynamic.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Include.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SimpleVariable.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignUnary.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Empty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFProtected.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Empty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodCall.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseAnd.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Try.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.StaticMethodCall.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsFloat.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Unset.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Continue.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodCall.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UNull.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SILENCE.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTLEFT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CheckContext.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsObject.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloatLit.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Switch.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhasesContext.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Program.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THArray.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseNot.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineManual.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Void.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicMethodRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TInt.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstantDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCClass.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.New.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InstanceOf.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastBool.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MULT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFFinal.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTRIGHT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurElement.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NamespaceStart.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CalledClass.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectId.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product6.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCDir.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPNull.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Error.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.TempID.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicFunctionRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineFull.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeNotProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANOR.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBoolean.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.JavaListIteratorWrapper.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPTrue.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTIDENTICAL.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEOR.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPrivate.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEAND.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFloat.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identifier.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Smaller.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UString.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Closure.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Static.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Unset.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TIntLit.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Return.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product4.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product22.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Identifier.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product8.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ConstantsResolver.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Catch.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanXor.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.EQUALS.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFAbstract.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastArray.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Minus.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANNOT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeTransferFunction.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.Reporter.Error.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Return.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.symbols.LookupResult.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product5.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TUninitialized.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Clone.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAnyClass.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ListVar.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSGlobal.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Global.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastString.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTINC.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseOr.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Concat.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ObjectProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Label.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Block.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArrayEntry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastDouble.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicObjectProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ExpandArray.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Print.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeFlowAnalyzer.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Clone.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SubTypeOf.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assign.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastObject.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.DIV.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UInt.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTrue.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFNormal.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastInt.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsResource.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.VertexImp.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTop.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PLUS.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCMethod.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PropertyDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSNone.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseXor.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAArray.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicClassRef.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFalse.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANAND.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstant.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostDec.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftLeft.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.ASTIntegrityChecks.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanNot.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Foreach.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InitVariable.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineLeaves.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THObject.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanAnd.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.Entry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.SymContext.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Ternary.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNumeric.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsScalar.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Goto.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Cast.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NextArrayEntry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEXOR.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LEQ.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GT.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ErrorException.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.StringKey.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFile.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CallArg.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SmallerEqual.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableClassProperty.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TStringLit.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Namespaced.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InterfaceDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Array.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdDump.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurIsValid.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTDEC.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBottom.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSResolved.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.TypeFlowAnalysis.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CallGraphGeneration.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloat.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArgumentDecl.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCNamespace.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsArray.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdUse.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.Settings.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPString.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identical.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAMethod.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPublic.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GEQ.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFalse.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.STToAST.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdTmp.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFalse.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Eval.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.DumpCollector.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Execute.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Echo.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostInc.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPThis.productArity: Int
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Empty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InstanceOf.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Include.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THArray.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdTmp.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITSIWENOT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Global.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.New.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.LabelDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.Entry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CallArg.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.StringKey.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicObjectProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Concat.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UArray.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastBool.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAExpression.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CFGGenerator.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MethodCall.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VariableVariable.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IDENTICAL.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Minus.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.EdgeImp.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.EQUALS.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEAND.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.StaticMethodCall.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Array.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Exit.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TInt.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.API.Reader.APIPos.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.STToAST.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.DIV.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanNot.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Identifier.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.New.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNull.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectId.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.IncludeResolver.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBottom.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PLUS.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identifier.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurElement.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TUninitialized.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPString.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFalse.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ConstantDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Ternary.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CollectSymbols.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Error.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Import.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineFull.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Namespaced.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CheckContext.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TClass.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTRIGHT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SILENCE.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastDouble.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseSeq.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastArray.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFalse.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableVar.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Constant.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANOR.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Try.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAArray.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftRight.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicMethodRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFile.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFProtected.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseOr.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstantDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBoolean.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Continue.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPublic.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Program.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostDec.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseNot.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CalledClass.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREINC.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product22.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product3.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEOR.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ObjectProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPNull.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Skip.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Label.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPNull.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mod.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAMethod.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Constant.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFFinal.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANAND.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostInc.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Catch.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.If.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Alternatives.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastInt.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CFGGraphs.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhasesContext.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Isset.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTrue.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAny.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Return.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MOD.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFalse.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignUnary.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.VertexImp.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseException.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Assign.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFStatic.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.Reporter.Error.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.SymContext.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Empty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NamespaceStart.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Print.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAIdentifier.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsObject.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTDEC.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DoWhile.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeLattice.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdUse.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeTransferFunction.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNumeric.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product7.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastString.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCMethod.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFunction.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Ternary.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloat.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodCall.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArrayEntry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Print.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurKey.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineNone.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanAnd.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Silence.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefUnknown.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ConstantsResolver.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TIntLit.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsResource.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product6.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TResource.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPAny.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Clone.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObjRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PureStatementsChecks.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsScalar.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefDynamic.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Div.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product2.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assign.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Smaller.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THObject.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PropertyDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FuncRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UInt.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFAbstract.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFloat.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANNOT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.For.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectStore.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Echo.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCNamespace.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NextArrayEntry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.URealRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSResolved.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ENotice.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseXor.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ExpandArray.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InitVariable.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurIsValid.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Equal.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarFunctionRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Clone.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VoidExpr.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticFunctionRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ListVar.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Foreach.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefFixed.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionCall.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastObject.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Throw.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsFloat.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloatLit.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsInt.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANXOR.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayNext.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Eval.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Unset.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftLeft.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSCurrent.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPTrue.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObject.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.TypeFlowAnalysis.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefCalledClass.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Static.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsNull.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineManual.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAnyClass.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSNone.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPrivate.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Switch.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Unset.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstant.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPEmptyArray.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPLong.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFunction.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.ASTIntegrityChecks.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFAbstract.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTop.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identical.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SubTypeOf.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TString.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UTrue.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NoVar.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPThis.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Block.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreInc.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.CONCAT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticClassRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TStringLit.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FunctionCall.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SimpleVariable.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.While.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayEntry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Execute.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CallGraphGeneration.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFFinal.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.symbols.LookupResult.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Return.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Some.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastUnset.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Html.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdDump.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Plus.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Require.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product4.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSIdentifier.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.LabeledDirectedGraphImp.Group.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineLeaves.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFloat.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCLine.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassConstant.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicClassRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREDEC.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UString.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product5.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SmallerEqual.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LEQ.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeNotProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Goto.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreDec.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCDir.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseAnd.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GEQ.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Cast.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CGContext.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTIDENTICAL.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.INSTANCEOF.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product8.productElement(n: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.JavaListIteratorWrapper.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NextArrayEntry.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanXor.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Void.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.DumpCollector.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFNormal.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UNull.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.IntKey.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicFunctionRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPInteger.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTLEFT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mult.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableClassProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MINUS.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFloat.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MULT.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.TempID.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ObjectProperty.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFalse.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEXOR.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Cast.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodCall.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCClass.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPTrue.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Closure.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Isset.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanOr.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsString.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.Settings.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsArray.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ErrorException.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assume.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Break.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSGlobal.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarClassRef.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTEQUALS.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CheckContext.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTINC.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPString.productElement(x$1: Int): Any
phantm.helpers.ASTGraph.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsBool.productElement(x$1: Int): Any
phantm.util.API.Reader.<init>(is: java.io.InputStream,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.MCNamespace.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T]
phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.lookupAnyProperty(name: String,from: Option[phantm.symbols.ClassSymbol],in: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.lookupStaticProperty(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.static_properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.testsActive: Boolean
phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.ArrayEntry.<init>(array: phantm.ast.Trees.Expression,index: phantm.ast.Trees.Expression): phantm.ast.Trees.ArrayEntry ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.phases.ASTChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.MethodSymbol.cs: phantm.symbols.ClassSymbol
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.verbosity: Int
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.summaryOnly: Boolean
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.displayProgress: Boolean
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.typeFlowFilter: List[String]
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.TypeFlowAnalysis.ctx: phantm.phases.PhasesContext
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.beginTicks: Unit
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.verbosity: Int
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTSimpleTraversal.execute: Unit
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.FunctionSymbol.name: String
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.IfaceMethodSymbol.name: String
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.MethodSymbol.name: String
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.TypeFlowAnalysis.<init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.TypeFlowAnalysis
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.clear: Unit
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.MethodSymbol.name: String
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.displayProgress: Boolean
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.endTicks: Unit
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.GlobalAnalysisResults.summary: Map[phantm.symbols.FunctionSymbol,Int]
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement ==> phantm.cfg.Trees.Tree.<init>(): phantm.cfg.Trees.Tree
phantm.ast.Trees.DoWhile.<init>(body: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression): phantm.ast.Trees.DoWhile ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.Trees.NextArrayEntry.productElement(x$1: Int): Any ==> phantm.ast.Trees.NextArrayEntry.array: phantm.ast.Trees.Expression
phantm.ast.Trees.NextArrayEntry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.util.URealRef.productElement(x$1: Int): Any ==> phantm.util.URealRef.i: Int
phantm.util.URealRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph]
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)] ==> phantm.ast.STToAST.case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.cfg.Trees.ArrayNext.<init>(ar: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayNext ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.ast.Trees.SmallerEqual.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.SmallerEqual ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.phases.MethodGraphGeneration.MethodGraph.vToSym: scala.collection.immutable.Map[phantm.cfg.VertexImp[String],phantm.symbols.MethodSymbol]
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.phases.MethodGraphGeneration.MethodGraph.vToSym_$eq(x$1: scala.collection.immutable.Map[phantm.cfg.VertexImp[String],phantm.symbols.MethodSymbol]): Unit
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.phases.MethodGraphGeneration.MethodGraph.symToV: scala.collection.immutable.Map[phantm.symbols.MethodSymbol,phantm.cfg.VertexImp[String]]
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.symbols.MethodSymbol.cs: phantm.symbols.ClassSymbol
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(v: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.phases.MethodGraphGeneration.MethodGraph.symToV_$eq(x$1: scala.collection.immutable.Map[phantm.symbols.MethodSymbol,phantm.cfg.VertexImp[String]]): Unit
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.symbols.MethodSymbol.name: String
phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex ==> phantm.phases.MethodGraphGeneration.MethodGraph.symToV: scala.collection.immutable.Map[phantm.symbols.MethodSymbol,phantm.cfg.VertexImp[String]]
phantm.symbols.LookupResult.<init>(ms: Option[T],visibError: Option[phantm.symbols.MemberVisibility],staticClash: Boolean): phantm.symbols.LookupResult[T] ==> java.lang.Object.<init>(): Object
phantm.helpers.CheckContext.<init>(): phantm.helpers.CheckContext ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.ConstantDecl.<init>(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.ConstantDecl.<init>(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.Trees.DynamicFunctionRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicFunctionRef ==> phantm.ast.Trees.FunctionRef.<init>(): phantm.ast.Trees.FunctionRef
phantm.annotations.SourceAnnotations.Parser.AnyEntry.productElement(x$1: Int): Any ==> phantm.annotations.SourceAnnotations.Parser.AnyEntry.t: phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.AnyEntry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.NSResolved.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Mult.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mult ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.OAExpression.<init>(exp: phantm.ast.Trees.Expression): phantm.ast.Trees.OAExpression ==> phantm.ast.Trees.OAScalar.<init>(): phantm.ast.Trees.OAScalar
phantm.ast.Trees.Alternatives.<init>(blocks: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Alternatives ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.ASTPruner.<init>(ast: phantm.ast.Trees.Program): phantm.phases.ASTPruner
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTSimpleTraversal.execute: Unit
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.ASTCollector.functionsDecls: List[phantm.ast.Trees.FunctionDecl]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.ASTCollector.<init>(functs: Map[String,(String, Int)],classes: Map[String,(String, Int)],ast: phantm.ast.Trees.Program): phantm.phases.ASTCollector
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.Program.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.DumpCollector.classes: Map[String,(String, Int)]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.ASTCollector.classesDecls: List[phantm.ast.Trees.ClassDecl]
phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.DumpCollector.functions: Map[String,(String, Int)]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.global_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.If.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Static.<init>(vars: List[phantm.ast.Trees.InitVariable]): phantm.ast.Trees.Static
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Break.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Break
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.PHPTrue.<init>(): phantm.ast.Trees.PHPTrue
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.<init>(what: phantm.ast.Trees.Expression,as: phantm.ast.Trees.Variable,asbyref: Boolean,key: Option[phantm.ast.Trees.Variable],keybyref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Foreach
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Continue.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Continue
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Label.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.Label
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Continue.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Continue
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.foreach_variable(n: phantm.parser.ParseNode): (phantm.ast.Trees.Variable, Boolean)
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Return.<init>(expr: phantm.ast.Trees.Expression): phantm.ast.Trees.Return
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Global.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Global
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.LabelDecl.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.LabelDecl
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.DoWhile.<init>(body: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression): phantm.ast.Trees.DoWhile
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Identifier.<init>(value: String): phantm.ast.Trees.Identifier
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.BooleanAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Html.<init>(content: String): phantm.ast.Trees.Html
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Unset.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Unset
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.additional_catches(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Catch]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Try.<init>(body: phantm.ast.Trees.Statement,catches: List[phantm.ast.Trees.Catch]): phantm.ast.Trees.Try
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Break.<init>(level: phantm.ast.Trees.Expression): phantm.ast.Trees.Break
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.elseif_list(n: phantm.parser.ParseNode): List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Switch.<init>(expr: phantm.ast.Trees.Expression,cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]): phantm.ast.Trees.Switch
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.variable_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.For.<init>(init: phantm.ast.Trees.Statement,cond: phantm.ast.Trees.Expression,step: phantm.ast.Trees.Statement,then: phantm.ast.Trees.Statement): phantm.ast.Trees.For
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Echo.<init>(exprs: List[phantm.ast.Trees.Expression]): phantm.ast.Trees.Echo
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.foreach_optional_arg(n: phantm.parser.ParseNode): Option[(phantm.ast.Trees.Variable, Boolean)]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Return.<init>(expr: phantm.ast.Trees.Expression): phantm.ast.Trees.Return
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.switch_case_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.static_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.InitVariable]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.If.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.While.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement): phantm.ast.Trees.While
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Catch.<init>(cl: phantm.ast.Trees.ClassRef,v: phantm.ast.Trees.SimpleVariable,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Catch
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Foreach.<init>(what: phantm.ast.Trees.Expression,as: phantm.ast.Trees.Variable,asbyref: Boolean,key: Option[phantm.ast.Trees.Variable],keybyref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Foreach
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.echo_expr_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Throw.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Throw
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.for_expr(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Expression]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.PHPNull.<init>(): phantm.ast.Trees.PHPNull
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Goto.<init>(to: phantm.ast.Trees.Label): phantm.ast.Trees.Goto
phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.parser.Parser.clearPreviousComment(pos: phantm.util.Positional): Option[String] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmt(s: phantm.ast.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.stmts(sts: List[phantm.ast.Trees.Statement],cont: Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.PropertySymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.PropertySymbol ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type ==> phantm.symbols.Symbolic.opt_sym_$eq(x$1: Option[phantm.symbols.Symbol]): Unit
phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type ==> scala.Some.<init>(x: A): Some[A]
phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.dumpAfter: Set[String]
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> java.io.FileReader.<init>(x$1: String): java.io.FileReader
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> phantm.util.Reporter.files: scala.collection.immutable.Map[String,List[String]]
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> phantm.util.Reporter.files: scala.collection.immutable.Map[String,List[String]]
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> java.io.BufferedReader.readLine(): String
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> java.io.BufferedReader.readLine(): String
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> phantm.util.Reporter.files: scala.collection.immutable.Map[String,List[String]]
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> phantm.util.Reporter.files_$eq(x$1: scala.collection.immutable.Map[String,List[String]]): Unit
phantm.util.Reporter.getFileLine(file: String,line: Int): Option[String] ==> java.io.BufferedReader.<init>(x$1: java.io.Reader): java.io.BufferedReader
phantm.cfg.Trees.LT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.ENotice.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.Tree.<init>(): phantm.cfg.Trees.Tree ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.variable_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess] ==> phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess]
phantm.ast.Trees.BitwiseXor.productElement(x$1: Int): Any ==> phantm.ast.Trees.BitwiseXor.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BitwiseXor.productElement(x$1: Int): Any ==> phantm.ast.Trees.BitwiseXor.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BitwiseXor.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Namespaced.copy(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced ==> phantm.ast.Trees.Namespaced.<init>(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
phantm.cfg.Trees.ClassRefDynamic.<init>(sv: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ClassRefDynamic ==> phantm.cfg.Trees.ClassRef.<init>(): phantm.cfg.Trees.ClassRef
phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productElement(x$1: Int): Any ==> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.t: phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TypeLattice.leq(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TypeLattice.join(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TypeLattice.leq(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.Settings.get: phantm.Settings
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.types.TypeLattice.meet(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type ==> phantm.Settings.verbosity: Int
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.ConstantsResolver.<init>(ast: phantm.ast.Trees.Program,issueErrors: Boolean,ctx: phantm.phases.PhasesContext): phantm.util.ConstantsResolver
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.DumpCollector.constants: phantm.util.Unserializer
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.IncludeResolver.<init>(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext): phantm.util.IncludeResolver
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.GlobalSymbols.lookupConstant(n: String): Option[phantm.symbols.ConstantSymbol]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.DumpCollector.files: List[String]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.includedFiles: Set[String]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.includedFiles_$eq(x$1: Set[String]): Unit
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.ConstantsResolver.<init>(ast: phantm.ast.Trees.Program,issueErrors: Boolean,ctx: phantm.phases.PhasesContext): phantm.util.ConstantsResolver
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.displayIncludes: Boolean
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Unserializer.toScalarMap: scala.collection.immutable.Map[String,phantm.ast.Trees.Scalar]
phantm.ast.Trees.ExpandArray.productElement(x$1: Int): Any ==> phantm.ast.Trees.ExpandArray.vars: List[Option[phantm.ast.Trees.Variable]]
phantm.ast.Trees.ExpandArray.productElement(x$1: Int): Any ==> phantm.ast.Trees.ExpandArray.expr: phantm.ast.Trees.Expression
phantm.ast.Trees.ExpandArray.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.Trees.CalledClass.<init>(): phantm.ast.Trees.CalledClass
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit ==> phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex
phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.betweenEdges(from: LabeledDirectedGraphImp.this.Vertex,to: LabeledDirectedGraphImp.this.Vertex): scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit ==> phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.ast.Trees.ListVar.vars: List[Option[phantm.ast.Trees.Variable]]
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.ASTToCFG.Emit.statement(stat: phantm.cfg.Trees.Statement): Unit
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.assignListItem(vars: List[Option[phantm.ast.Trees.Variable]],from: phantm.cfg.Trees.SimpleValue): Unit ==> phantm.cfg.Trees.ArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ArrayEntry
phantm.ast.Trees.InitVariable.productElement(x$1: Int): Any ==> phantm.ast.Trees.InitVariable.v: phantm.ast.Trees.Variable
phantm.ast.Trees.InitVariable.productElement(x$1: Int): Any ==> phantm.ast.Trees.InitVariable.init: Option[phantm.ast.Trees.Expression]
phantm.ast.Trees.InitVariable.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.ArrayCurIsValid.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ArrayCurIsValid.ar: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ArrayCurIsValid.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.util.Reporter.get: phantm.util.Reporter ==> java.lang.RuntimeException.<init>(x$1: String): RuntimeException
phantm.util.Reporter.get: phantm.util.Reporter ==> phantm.util.Reporter.rep: Option[phantm.util.Reporter]
phantm.phases.PureStatementsPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTSimpleTraversal.execute: Unit
phantm.phases.PureStatementsPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PureStatementsChecks.<init>(node: phantm.ast.Trees.Tree,ctx: phantm.phases.PhasesContext): phantm.phases.PureStatementsChecks
phantm.phases.PureStatementsPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.ast.Trees.Equal.productElement(x$1: Int): Any ==> phantm.ast.Trees.Equal.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Equal.productElement(x$1: Int): Any ==> phantm.ast.Trees.Equal.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Equal.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Lexer.setFileName(fileName: String): Unit
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Lexer.next_token(): java_cup.runtime.Symbol
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.io.PrintStream.println(x$1: String): Unit
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.io.FileReader.<init>(x$1: String): java.io.FileReader
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Lexer.<init>(in: java.io.Reader): phantm.parser.Lexer
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Lexer.next_token(): java_cup.runtime.Symbol
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.io.PrintStream.println(x$1: String): Unit
phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.Trees.VarFunctionRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.VarFunctionRef.v: phantm.ast.Trees.Variable
phantm.ast.Trees.VarFunctionRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Clone.productElement(x$1: Int): Any ==> phantm.ast.Trees.Clone.obj: phantm.ast.Trees.Expression
phantm.ast.Trees.Clone.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.VoidExpr.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Include.<init>(path: phantm.ast.Trees.Expression,once: Boolean): phantm.ast.Trees.Include ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String] ==> phantm.util.Positional.$less(p: phantm.util.Positional): Boolean
phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String] ==> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String] ==> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String] ==> phantm.parser.Parser.comments_$eq(x$1: List[(phantm.util.Positional, String)]): Unit
phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String] ==> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String] ==> phantm.parser.Parser.comments: List[(phantm.util.Positional, String)]
phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.Trees.StaticFunctionRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.StaticFunctionRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.join(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.STToAST.<init>(parser: phantm.parser.Parser,st: phantm.parser.ParseNode): phantm.ast.STToAST
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.files: List[String]
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.parser.Parser.parse: Option[phantm.parser.ParseNode]
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.Program.combine(p2: phantm.ast.Trees.Program): phantm.ast.Trees.Program
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.parser.Parser.<init>(filename: String): phantm.parser.Parser
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.STToAST.getAST: phantm.ast.Trees.Program
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhaseException.<init>(ph: phantm.phases.Phase,error: String): phantm.phases.PhaseException
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.ast.Trees.ListVar.productElement(x$1: Int): Any ==> phantm.ast.Trees.ListVar.vars: List[Option[phantm.ast.Trees.Variable]]
phantm.ast.Trees.ListVar.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TStringLit.value: String
phantm.ast.Trees.Html.<init>(content: String): phantm.ast.Trees.Html ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.Trees.Foreach.productElement(x$1: Int): Any ==> phantm.ast.Trees.Foreach.what: phantm.ast.Trees.Expression
phantm.ast.Trees.Foreach.productElement(x$1: Int): Any ==> phantm.ast.Trees.Foreach.keybyref: Boolean
phantm.ast.Trees.Foreach.productElement(x$1: Int): Any ==> phantm.ast.Trees.Foreach.as: phantm.ast.Trees.Variable
phantm.ast.Trees.Foreach.productElement(x$1: Int): Any ==> phantm.ast.Trees.Foreach.asbyref: Boolean
phantm.ast.Trees.Foreach.productElement(x$1: Int): Any ==> phantm.ast.Trees.Foreach.key: Option[phantm.ast.Trees.Variable]
phantm.ast.Trees.Foreach.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Foreach.productElement(x$1: Int): Any ==> phantm.ast.Trees.Foreach.body: phantm.ast.Trees.Statement
phantm.ast.Trees.ClassDecl.<init>(name: phantm.ast.Trees.NSIdentifier,flags: phantm.ast.Trees.ClassFlag,parent: Option[phantm.ast.Trees.StaticClassRef],interfaces: List[phantm.ast.Trees.StaticClassRef],methods: List[phantm.ast.Trees.MethodDecl],static_props: List[phantm.ast.Trees.PropertyDecl],props: List[phantm.ast.Trees.PropertyDecl],consts: List[phantm.ast.Trees.ClassConstantDecl]): phantm.ast.Trees.ClassDecl ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.cfg.Trees.Identifier.<init>(symbol: phantm.symbols.VariableSymbol): phantm.cfg.Trees.Identifier ==> phantm.cfg.Trees.SimpleVariable.<init>(): phantm.cfg.Trees.SimpleVariable
phantm.cfg.Trees.ClassRefFixed.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ClassRefFixed.cs: phantm.symbols.ClassSymbol
phantm.cfg.Trees.ClassRefFixed.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ClassConstant.<init>(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant
phantm.ast.STToAST.static_class_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.ASTSimpleTraversal.traverse(visit: phantm.ast.Trees.Tree => Boolean): Unit ==> phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit
phantm.ast.ASTSimpleTraversal.traverse(visit: phantm.ast.Trees.Tree => Boolean): Unit ==> phantm.ast.ASTSimpleTraversal.visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext): (phantm.ast.DummyContext, Boolean)
phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.nsidentifier(n: phantm.parser.ParseNode): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.types.ObjectStore.initIfNotExist(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.ObjectStore ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.ObjectStore.initIfNotExist(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.ObjectStore ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.ObjectStore.initIfNotExist(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.ObjectStore ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.ObjectStore.initIfNotExist(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.ObjectStore ==> phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject
phantm.ast.Trees.FunctionCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.ast.Trees.FunctionCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.ast.Trees.FunctionCall.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.annotations.SourceAnnotations.Parser.isAnnotated(comment: String): Boolean
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.util.Positional.line_end: Int
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.phases.TypeAnalyzingPhase.limitFileName(s: String): String
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.util.Positional.file: Option[String]
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.util.Positional.line: Int
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.util.Positional.line: Int
phantm.phases.TypeAnalyzingPhase.displaySummary(fs: phantm.symbols.FunctionSymbol,noticesCount: Int,name: String): Unit ==> phantm.annotations.FunctionAnnotation.shouldInline: Boolean
phantm.phases.PhaseException.<init>(ph: phantm.phases.Phase,error: String): phantm.phases.PhaseException ==> java.lang.Exception.<init>(): Exception
phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject ==> phantm.types.TClass.<init>(cs: phantm.symbols.ClassSymbol): phantm.types.TClass
phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject ==> phantm.symbols.ClassSymbol.properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject ==> phantm.types.TRealObject.<init>(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject
phantm.types.ObjectStore.newObject(id: phantm.types.ObjectId,ocs: Option[phantm.symbols.ClassSymbol]): phantm.types.TRealObject ==> phantm.types.TRealObject.<init>(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject
phantm.ast.Trees.CastObject.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Throw.productElement(x$1: Int): Any ==> phantm.ast.Trees.Throw.ex: phantm.ast.Trees.Expression
phantm.ast.Trees.Throw.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.<init>(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings ==> java.lang.Object.<init>(): Object
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.static_properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.ClassSymbol.static_properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.Trees.CallArg.copy(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg ==> phantm.ast.Trees.CallArg.<init>(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.Unset.<init>(variable: phantm.cfg.Trees.Variable): phantm.cfg.Trees.Unset ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.cfg.Trees.IsFloat.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.non_empty_function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.types.TFloatLit.productElement(x$1: Int): Any ==> phantm.types.TFloatLit.value: Float
phantm.types.TFloatLit.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.StaticMethodRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.StaticMethodRef.id: phantm.ast.Trees.Identifier
phantm.ast.Trees.StaticMethodRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.parser.Parser.<init>(filename: String): phantm.parser.Parser ==> java.lang.Object.<init>(): Object
phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol] ==> phantm.symbols.IfaceSymbol.parents: List[phantm.symbols.IfaceSymbol]
phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol] ==> phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol]
phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol] ==> phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol]
phantm.symbols.IfaceSymbol.lookupMethod(name: String): Option[phantm.symbols.IfaceMethodSymbol] ==> phantm.symbols.IfaceSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceMethodSymbol]
phantm.cfg.Trees.IsInt.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.displayFixPoint: Boolean
phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg ==> phantm.ast.Trees.CallArg.copy(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg
phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trCallArg(ca: phantm.ast.Trees.CallArg): phantm.ast.Trees.CallArg ==> phantm.ast.Trees.CallArg.copy$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.Trees.BOOLEANXOR.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.setupEnvironment: phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.inlined: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.notice(msg: String,pos: phantm.util.Positional): Unit
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.Settings.get: phantm.Settings
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.scope: phantm.symbols.Scope
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.util.GlobalAnalysisResults.summary: Map[phantm.symbols.FunctionSymbol,Int]
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.inlined: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.Settings.get: phantm.Settings
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.util.GlobalAnalysisResults.summary_$eq(x$1: Map[phantm.symbols.FunctionSymbol,Int]): Unit
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> scala.Some.<init>(x: A): Some[A]
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.Settings.displayFixPoint: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.notice(msg: String,pos: phantm.util.Positional): Unit
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$6: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.util.GlobalAnalysisResults.summary: Map[phantm.symbols.FunctionSymbol,Int]
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.collectGlobals: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.Settings.exportAPIPath: Option[String]
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.inlined: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.cfg: phantm.cfg.ControlFlowGraph
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.Settings.get: phantm.Settings
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.collectGlobals: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$7: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.dataflow.AnalysisAlgorithm.<init>(transferFun: phantm.dataflow.TransferFunction[E,S],bottomEnv: E,baseEnv: E,cfg: phantm.cfg.LabeledDirectedGraphImp[S]): phantm.dataflow.AnalysisAlgorithm[E,S]
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.Settings.summaryOnly: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.results: phantm.util.GlobalAnalysisResults
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$6: (String, phantm.util.Positional) => Unit @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.apply$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeTransferFunction.<init>(silent: Boolean,ctx: phantm.phases.PhasesContext,collectAnnotations: Boolean,collectGlobals: Boolean,inlined: Boolean,noticesFct: (String, phantm.util.Positional) => Unit,errorsFct: (String, phantm.util.Positional) => Unit): phantm.types.TypeTransferFunction
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.notice(msg: String,pos: phantm.util.Positional): Unit
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.scope: phantm.symbols.Scope
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeFlowAnalyzer.analyze: Map[TypeFlowAnalyzer.this.Vertex,phantm.types.TypeEnvironment] ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeEnvironment.<init>(): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.<init>(): phantm.types.ObjectStore
phantm.types.TypeEnvironment.<init>(): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.<init>(map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type],scope: Option[phantm.symbols.ClassSymbol],store: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.simple_indirect_reference(n: phantm.parser.ParseNode): Int
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.cfg.Trees.ArrayNext.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ArrayNext.ar: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ArrayNext.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.symbols.GlobalSymbols.lookupIface(n: String): Option[phantm.symbols.IfaceSymbol]
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.phases.CollectSymbols.interfacesToPass: List[phantm.ast.Trees.InterfaceDecl]
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.symbols.IfaceSymbol.name: String
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.phases.CollectSymbols.firstIfacePass: Unit
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.util.Positional.getPos: String
phantm.phases.CollectSymbols.firstIfacePass: Unit ==> phantm.phases.CollectSymbols.interfacesToPass_$eq(x$1: List[phantm.ast.Trees.InterfaceDecl]): Unit
phantm.ast.Trees.Eval.productElement(x$1: Int): Any ==> phantm.ast.Trees.Eval.value: phantm.ast.Trees.Expression
phantm.ast.Trees.Eval.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.Unset.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Unset.variable: phantm.cfg.Trees.Variable
phantm.cfg.Trees.Unset.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.else_single(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject ==> phantm.types.ObjectStore.lookup(id: phantm.types.ObjectId): phantm.types.TRealObject
phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.symbols.Symbol.<init>(): phantm.symbols.Symbol ==> java.lang.Object.<init>(): Object
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TArray.merge(a2: phantm.types.TArray): phantm.types.TArray
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type] ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.ShiftLeft.productElement(x$1: Int): Any ==> phantm.ast.Trees.ShiftLeft.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.ShiftLeft.productElement(x$1: Int): Any ==> phantm.ast.Trees.ShiftLeft.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.ShiftLeft.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type ==> phantm.util.Positional.col_end_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type ==> phantm.util.Positional.file_$eq(x$1: Option[String]): Unit
phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type ==> phantm.util.Positional.col_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type ==> phantm.util.Positional.line_end_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type ==> phantm.util.Positional.line_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type ==> scala.Some.<init>(x: A): Some[A]
phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type ==> phantm.util.Positional.file_$eq(x$1: Option[String]): Unit
phantm.util.Reporter.error(msg: String): Boolean ==> phantm.util.Reporter.error(msg: String): Boolean
phantm.util.Reporter.error(msg: String): Boolean ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.ast.Trees.NSCurrent.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.<init>(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.<init>(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.<init>(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Import.<init>(src: phantm.ast.Trees.NSIdentifier,to: String): phantm.ast.Trees.Import
phantm.ast.ASTTraversal.traverse0: Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTraversal.traverse0: Unit ==> phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any]
phantm.ast.ASTTraversal.traverse0: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTraversal.traverse0: Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTraversal.traverse0: Unit ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.ASTTraversal.traverse0: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTraversal.traverse0: Unit ==> phantm.ast.ASTTraversal.traverse0: Unit
phantm.ast.ASTTraversal.traverse0: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTraversal.traverse0: Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.Trees.PHPTrue.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.function_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.FunctionDecl
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.class_declaration_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.inner_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.notyet(n: phantm.parser.ParseNode): Nothing
phantm.util.UObject.productElement(x$1: Int): Any ==> phantm.util.UObject.i: Int
phantm.util.UObject.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.UObject.productElement(x$1: Int): Any ==> phantm.util.UObject.entries: Map[phantm.util.UValue,phantm.util.UValue]
phantm.util.UObject.productElement(x$1: Int): Any ==> phantm.util.UObject.classname: String
phantm.util.Unserializer.toTypeMap: scala.collection.immutable.Map[String,phantm.types.Type] ==> phantm.util.Unserializer.uValueToType(v: phantm.util.UValue): phantm.types.Type
phantm.util.Unserializer.toTypeMap: scala.collection.immutable.Map[String,phantm.types.Type] ==> phantm.util.Unserializer.toMap: scala.collection.immutable.Map[String,phantm.util.UValue]
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.visibility: phantm.symbols.MemberVisibility
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.cs: phantm.symbols.ClassSymbol
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.visibility: phantm.symbols.MemberVisibility
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MVProtected.stricterThan(o: phantm.symbols.MemberVisibility): Boolean
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MVPublic.stricterThan(o: phantm.symbols.MemberVisibility): Boolean
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MVPrivate.stricterThan(o: phantm.symbols.MemberVisibility): Boolean
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol]
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.name: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.visibility: phantm.symbols.MemberVisibility
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.symbols.MethodSymbol.visibility: phantm.symbols.MemberVisibility
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef ==> phantm.ast.STToAST.dynamic_class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.notyet(n: phantm.parser.ParseNode): Nothing ==> java.lang.RuntimeException.<init>(x$1: String): RuntimeException
phantm.ast.STToAST.notyet(n: phantm.parser.ParseNode): Nothing ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.body: List[phantm.ast.Trees.Statement]
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.copy(name: phantm.ast.Trees.NSIdentifier,body: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Namespaced
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Namespaced.copy$default$1: phantm.ast.Trees.NSIdentifier @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.ASTPruner.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.phases.NSWrapper.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectTmp.<init>(obj: phantm.types.TRealObject): phantm.types.TObjectTmp
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject)
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.joinTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.ast.Trees.ConstantDecl.<init>(v: phantm.ast.Trees.NSIdentifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ConstantDecl ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.phases.TypeFlowAnalysis.productElement(x$1: Int): Any ==> phantm.phases.TypeFlowAnalysis.initCtx: phantm.phases.PhasesContext
phantm.phases.TypeFlowAnalysis.productElement(x$1: Int): Any ==> phantm.phases.TypeFlowAnalysis.node: phantm.ast.Trees.Tree
phantm.phases.TypeFlowAnalysis.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.out: Set[phantm.cfg.EdgeImp[L]]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.EdgeImp.<init>(v1: phantm.cfg.VertexImp[L],lab: L,v2: phantm.cfg.VertexImp[L]): phantm.cfg.EdgeImp[L]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.edges: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.edges: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.edges: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.in_$eq(x$1: Set[phantm.cfg.EdgeImp[L]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.edges_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.in: Set[phantm.cfg.EdgeImp[L]]
phantm.cfg.LabeledDirectedGraphImp.$minus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.VertexImp.out_$eq(x$1: Set[phantm.cfg.EdgeImp[L]]): Unit
phantm.cfg.Trees.ClassRefCalledClass.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TRealObject.<init>(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.InterfaceDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.InterfaceDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.InterfaceDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.Trees.OAIdentifier.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.OAIdentifier
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.Trees.OAExpression.<init>(exp: phantm.ast.Trees.Expression): phantm.ast.Trees.OAExpression
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.variable_name(n: phantm.parser.ParseNode): phantm.ast.Trees.OAScalar ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.helpers.ASTGraph.<init>(): phantm.helpers.ASTGraph ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.Static.productElement(x$1: Int): Any ==> phantm.ast.Trees.Static.vars: List[phantm.ast.Trees.InitVariable]
phantm.ast.Trees.Static.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_properties(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ObjectAccess]
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.deriveOAList(baseex: phantm.ast.Trees.Expression,oaList: List[phantm.ast.Trees.ObjectAccess]): phantm.ast.Trees.Expression
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.annotations.SourceAnnotations.Parser.variable: phantm.annotations.SourceAnnotations.Parser.Parser[String] ==> scala.util.parsing.combinator.syntactical.StdTokenParsers.ident: StdTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.variable: phantm.annotations.SourceAnnotations.Parser.Parser[String] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.ast.Trees.BooleanAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.ClassRefCalledClass.<init>(): phantm.cfg.Trees.ClassRefCalledClass ==> phantm.cfg.Trees.ClassRef.<init>(): phantm.cfg.Trees.ClassRef
phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.pc: Vertex
phantm.cfg.Trees.IsNull.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_var_offset(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.Trees.CallArg.<init>(value: phantm.ast.Trees.Expression,forceref: Boolean): phantm.ast.Trees.CallArg ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.Trees.StaticMethodRef.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef ==> phantm.ast.Trees.MethodRef.<init>(): phantm.ast.Trees.MethodRef
phantm.util.Positional.getPos: String ==> phantm.util.Positional.file: Option[String]
phantm.util.Positional.getPos: String ==> phantm.util.Positional.line: Int
phantm.util.Positional.getPos: String ==> phantm.util.Positional.col: Int
phantm.InlineManual.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ArgumentDecl.byref: Boolean
phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ArgumentDecl.hint: Option[phantm.ast.Trees.TypeHint]
phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.types.TAnyClass.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.ASTToCFG.FreshVariable.apply(prefix: String): phantm.cfg.Trees.TempID ==> phantm.cfg.Trees.TempID.<init>(value: String): phantm.cfg.Trees.TempID
phantm.cfg.ASTToCFG.FreshVariable.apply(prefix: String): phantm.cfg.Trees.TempID ==> phantm.cfg.ASTToCFG.FreshName.apply(prefix: String): String
phantm.types.TArray.<init>(global: phantm.types.Type): phantm.types.TArray ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.while_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit ==> phantm.util.JavaListIteratorWrapper.<init>(iter: java.util.Iterator[A]): phantm.util.JavaListIteratorWrapper[A]
phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit ==> phantm.helpers.STGraph.emit(str: String): Unit
phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit ==> phantm.helpers.STGraph.getId: Int
phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit ==> phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit
phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit ==> phantm.helpers.STGraph.emit(str: String): Unit
phantm.ast.Trees.NSNone.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.lexical_vars(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.lexical_vars(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.lexical_vars(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.lexical_vars(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.lexical_var_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer ==> java.lang.StringBuffer.append(x$1: String): StringBuffer
phantm.ast.Trees.MFPrivate.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.ast.STToAST.getAST: phantm.ast.Trees.Program
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Parser.parse: Option[phantm.parser.ParseNode]
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.lang.Exception.<init>(x$1: String): Exception
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.util.IncludeResolver.<init>(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext): phantm.util.IncludeResolver
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.ast.STToAST.<init>(parser: phantm.parser.Parser,st: phantm.parser.ParseNode): phantm.ast.STToAST
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.CFGGraphs.execute: Unit
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CollectSymbols.execute: Unit
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CollectSymbols.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Parser.<init>(filename: String): phantm.parser.Parser
phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.CFGGraphs.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.helpers.CFGGraphs
phantm.ast.Trees.Switch.productElement(x$1: Int): Any ==> phantm.ast.Trees.Switch.expr: phantm.ast.Trees.Expression
phantm.ast.Trees.Switch.productElement(x$1: Int): Any ==> phantm.ast.Trees.Switch.cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]
phantm.ast.Trees.Switch.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.Trees.ClassConstantDecl.<init>(v: phantm.ast.Trees.Identifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ClassConstantDecl
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl]
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.Trees.ClassConstantDecl.<init>(v: phantm.ast.Trees.Identifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ClassConstantDecl
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.class_constant_declaration(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ClassConstantDecl] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.lexical_vars(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseAnd
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Smaller.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Smaller
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Array.<init>(values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]): phantm.ast.Trees.Array
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ExpandArray.<init>(vars: List[Option[phantm.ast.Trees.Variable]],expr: phantm.ast.Trees.Expression): phantm.ast.Trees.ExpandArray
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.New.<init>(cl: phantm.ast.Trees.ClassRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.New
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Silence.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Silence
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.base_variable_with_function_calls(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.parser.Parser.getPreviousComment(pos: phantm.util.Positional): Option[String]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.exit_expr(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.Expression]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.InstanceOf.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.ClassRef): phantm.ast.Trees.InstanceOf
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.ctor_arguments(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.scalar(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PreInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreInc
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Plus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mult.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mult
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanOr
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mod.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mod
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Equal.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.SmallerEqual.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.SmallerEqual
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseNot
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mult.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mult
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanAnd
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanOr
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PreDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreDec
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Position.<init>(): phantm.util.Position
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Mod.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Mod
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Div.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Div
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Print.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Print
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Minus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftRight.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftRight
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Identical.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Identical
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Ternary.<init>(cond: phantm.ast.Trees.Expression,then: Option[phantm.ast.Trees.Expression],elze: phantm.ast.Trees.Expression): phantm.ast.Trees.Ternary
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Clone.<init>(obj: phantm.ast.Trees.Expression): phantm.ast.Trees.Clone
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.New.<init>(cl: phantm.ast.Trees.ClassRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.New
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Execute.<init>(value: String): phantm.ast.Trees.Execute
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Plus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Plus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Plus
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.SmallerEqual.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.SmallerEqual
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PostDec.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostDec
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseOr
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Minus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Exit.<init>(value: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.Exit
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Smaller.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Smaller
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftLeft.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftLeft
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanNot
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Minus.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Minus
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftLeft.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftLeft
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseXor
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseAnd.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseAnd
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Ternary.<init>(cond: phantm.ast.Trees.Expression,then: Option[phantm.ast.Trees.Expression],elze: phantm.ast.Trees.Expression): phantm.ast.Trees.Ternary
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.ctor_arguments(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseXor
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BooleanXor.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanXor
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Cast.<init>(typ: phantm.ast.Trees.CastType,value: phantm.ast.Trees.Expression): phantm.ast.Trees.Cast
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PostInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PostInc
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Closure.<init>(args: List[phantm.ast.Trees.ArgumentDecl],imports: List[phantm.ast.Trees.ArgumentDecl],retref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Closure
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Identical.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Identical
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Equal.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.is_reference(n: phantm.parser.ParseNode): Boolean
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.BitwiseOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseOr
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.assignment_list(n: phantm.parser.ParseNode): List[Option[phantm.ast.Trees.Variable]]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.parser: phantm.parser.Parser
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.ShiftRight.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.ShiftRight
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.internal_functions_in_yacc(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_w(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_name_reference(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Div.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Div
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Silence.<init>(value: phantm.ast.Trees.Expression): phantm.ast.Trees.Silence
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.Trees.Unset.productElement(x$1: Int): Any ==> phantm.ast.Trees.Unset.vars: List[phantm.ast.Trees.Variable]
phantm.ast.Trees.Unset.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.singleton: Boolean
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TAnyClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TypeLattice.joinTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TypeLattice.joinTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.<init>(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.lookupField(index: String): phantm.types.Type
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.singleton: Boolean
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.lookupField(index: String): phantm.types.Type
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TAnyClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.phases.PhaseSeq.<init>(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.class_statement(n: phantm.parser.ParseNode,st: (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])
phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> scala.Tuple4.<init>(_1: T1,_2: T2,_3: T3,_4: T4): (T1, T2, T3, T4)
phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl])
phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_statement_list(n: phantm.parser.ParseNode): (List[phantm.ast.Trees.MethodDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.PropertyDecl], List[phantm.ast.Trees.ClassConstantDecl]) ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.Trees.ClassConstant.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassConstant.cl: phantm.ast.Trees.ClassRef
phantm.ast.Trees.ClassConstant.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassConstant.const: phantm.ast.Trees.Identifier
phantm.ast.Trees.ClassConstant.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.PHPEmptyArray.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.NSResolver.<init>(ast: phantm.ast.Trees.Program,constants: Set[phantm.ast.Trees.NSIdentifier],functions: Set[phantm.ast.Trees.NSIdentifier]): phantm.phases.NSResolver
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.ConstantDecl.v: phantm.ast.Trees.NSIdentifier
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.Namespaced.body: List[phantm.ast.Trees.Statement]
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.ConstantDecl.value: phantm.ast.Trees.Expression
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.NSWrapper.<init>(ast: phantm.ast.Trees.Program): phantm.phases.NSWrapper
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.copy$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.ConstantDecl.value: phantm.ast.Trees.Expression
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.ConstantDecl.v: phantm.ast.Trees.NSIdentifier
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.ast.Trees.Namespaced.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.Trees.PHPLong.productElement(x$1: Int): Any ==> phantm.cfg.Trees.PHPLong.value: Long
phantm.cfg.Trees.PHPLong.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.LabeledDirectedGraphImp.betweenEdges(from: LabeledDirectedGraphImp.this.Vertex,to: LabeledDirectedGraphImp.this.Vertex): scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.LabeledDirectedGraphImp.betweenEdges(from: LabeledDirectedGraphImp.this.Vertex,to: LabeledDirectedGraphImp.this.Vertex): scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]] ==> phantm.cfg.LabeledDirectedGraphImp.edges: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.betweenEdges(from: LabeledDirectedGraphImp.this.Vertex,to: LabeledDirectedGraphImp.this.Vertex): scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]] ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol] ==> phantm.symbols.Scope.variables: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]
phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol] ==> phantm.symbols.FunctionSymbol.args: scala.collection.mutable.HashMap[String,phantm.symbols.ArgumentSymbol]
phantm.types.TFunction.productElement(x$1: Int): Any ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.types.TFunction.productElement(x$1: Int): Any ==> phantm.types.TFunction.ret: phantm.types.Type
phantm.types.TFunction.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.<init>(map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type],scope: Option[phantm.symbols.ClassSymbol],store: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.scope: Option[phantm.symbols.ClassSymbol]
phantm.cfg.Trees.Ternary.<init>(cond: phantm.cfg.Trees.SimpleValue,then: phantm.cfg.Trees.SimpleValue,elze: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Ternary ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.phases.ASTIntegrityChecks.productElement(x$1: Int): Any ==> phantm.phases.ASTIntegrityChecks.node: phantm.ast.Trees.Tree
phantm.phases.ASTIntegrityChecks.productElement(x$1: Int): Any ==> phantm.phases.ASTIntegrityChecks.context: phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MFAbstract.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.Scope.variables: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.VariableSymbol.name: String
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.VariableSymbol.name: String
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.Scope.variables: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]
phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.<init>(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodRef.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.<init>(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodRef.<init>(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.StaticMethodRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticFunctionRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VarFunctionRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarFunctionRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.DynamicMethodRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.identifier(n: phantm.parser.ParseNode): phantm.ast.Trees.Identifier
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.DynamicClassRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.reference_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticFunctionRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.<init>(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.FunctionCall.<init>(name: phantm.ast.Trees.FunctionRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.FunctionCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.variable_without_objects(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticMethodCall.<init>(cl: phantm.ast.Trees.ClassRef,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.StaticMethodCall
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.StaticFunctionRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.DynamicMethodRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicMethodRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.function_call_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.CallArg]
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassRef
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.function_call(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.DynamicClassRef.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.DynamicClassRef
phantm.ast.STToAST.<init>(parser: phantm.parser.Parser,st: phantm.parser.ParseNode): phantm.ast.STToAST ==> java.lang.Object.<init>(): Object
phantm.util.IncludeResolver.notfound(p: String): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.IncludeResolver.notfound(p: String): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.IncludeResolver.notfound(p: String): phantm.ast.Trees.Expression ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.IncludeResolver.notfound(p: String): phantm.ast.Trees.Expression ==> phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.SimpleVariable.copy(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.ArgumentDecl.byref: Boolean
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.ArgumentDecl.hint: Option[phantm.ast.Trees.TypeHint]
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.ASTTransform.trHint(th: phantm.ast.Trees.TypeHint): phantm.ast.Trees.TypeHint
phantm.ast.ASTTransform.trArgDecl(ad: phantm.ast.Trees.ArgumentDecl): phantm.ast.Trees.ArgumentDecl ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.Trees.SubTypeOf.<init>(lhs: phantm.cfg.Trees.SimpleValue,cl: phantm.cfg.Trees.ClassRef): phantm.cfg.Trees.SubTypeOf ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.symbols.GlobalSymbols.lookupFunction(n: String): Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.CallGraph.addNode(osym: phantm.phases.CallGraphGeneration.CallGraph.AVertex): phantm.phases.CallGraphGeneration.CallGraph.Vertex
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.StaticMethodRef.id: phantm.ast.Trees.Identifier
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.StaticMethodCall.cl: phantm.ast.Trees.ClassRef
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CGContext.scope: Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CGContext.scope: Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.CallGraph.addCallLocation(sym: phantm.symbols.FunctionSymbol,pos: phantm.util.Positional): Unit
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CGContext.<init>(scope: Option[phantm.symbols.FunctionSymbol]): phantm.phases.CGContext
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CGContext.<init>(scope: Option[phantm.symbols.FunctionSymbol]): phantm.phases.CGContext
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CGContext.scope: Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.symbols.Symbol.userland: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.CallGraph.addEdge(from: phantm.phases.CallGraphGeneration.CallGraph.AVertex,to: phantm.phases.CallGraphGeneration.CallGraph.AVertex): Unit
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.StaticMethodCall.name: phantm.ast.Trees.MethodRef
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.scopeFromSym(s: phantm.symbols.Symbol): Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.CallGraph.addCallLocation(sym: phantm.symbols.FunctionSymbol,pos: phantm.util.Positional): Unit
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.scopeFromSym(s: phantm.symbols.Symbol): Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.pctx: phantm.phases.PhasesContext
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.StaticMethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CallGraphGeneration.pctx: phantm.phases.PhasesContext
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CGContext.scope: Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.phases.CGContext.scope: Option[phantm.symbols.FunctionSymbol]
phantm.phases.CallGraphGeneration.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CGContext): (phantm.phases.CGContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.types.TTop.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeFlowAnalyzer.<init>(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer ==> phantm.types.TypeEnvironment.<init>(): phantm.types.TypeEnvironment
phantm.types.TypeFlowAnalyzer.<init>(cfg: phantm.cfg.ControlFlowGraph,scope: phantm.symbols.Scope,ctx: phantm.phases.PhasesContext,inlined: Boolean,collectGlobals: Boolean,baseEnvInit: phantm.types.TypeEnvironment,thisObj: Option[phantm.types.TObjectRef]): phantm.types.TypeFlowAnalyzer ==> java.lang.Object.<init>(): Object
phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.ast.Trees.Identical.productElement(x$1: Int): Any ==> phantm.ast.Trees.Identical.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Identical.productElement(x$1: Int): Any ==> phantm.ast.Trees.Identical.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Identical.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.non_empty_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.ast.STToAST.array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.cfg.Trees.SubTypeOf.productElement(x$1: Int): Any ==> phantm.cfg.Trees.SubTypeOf.lhs: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.SubTypeOf.productElement(x$1: Int): Any ==> phantm.cfg.Trees.SubTypeOf.cl: phantm.cfg.Trees.ClassRef
phantm.cfg.Trees.SubTypeOf.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TString.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.UTrue.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TFloatLit.value: Float
phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.<init>(t: phantm.types.Type): phantm.annotations.SourceAnnotations.Parser.AnyIntEntry ==> phantm.annotations.SourceAnnotations.Parser.ArrayEntryType.<init>(): phantm.annotations.SourceAnnotations.Parser.ArrayEntryType
phantm.types.TUnion.<init>(types: Set[phantm.types.Type]): phantm.types.TUnion ==> phantm.types.Type.<init>(): phantm.types.Type
phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.foreach_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.cfg.Trees.NoVar.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.PHPThis.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.<init>(map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type],scope: Option[phantm.symbols.ClassSymbol],store: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.scope: Option[phantm.symbols.ClassSymbol]
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
phantm.types.TypeEnvironment.union(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.col_end_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.line_end_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.col_end: Int
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.line_end: Int
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.col: Int
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.col_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.file_$eq(x$1: Option[String]): Unit
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.line: Int
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.line_$eq(x$1: Int): Unit
phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type ==> phantm.util.Positional.file: Option[String]
phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean ==> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean ==> phantm.symbols.ClassSymbol.subclassOf(target: phantm.symbols.ClassSymbol): Boolean
phantm.ast.Trees.Block.productElement(x$1: Int): Any ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.ast.Trees.Block.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.PreInc.productElement(x$1: Int): Any ==> phantm.ast.Trees.PreInc.rhs: phantm.ast.Trees.Variable
phantm.ast.Trees.PreInc.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.<init>(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext): phantm.util.IncludeResolver ==> phantm.ast.ASTTransform.<init>(p: phantm.ast.Trees.Program): phantm.ast.ASTTransform
phantm.cfg.Trees.CONCAT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.Symbolic.hasSymbol: Boolean ==> phantm.symbols.Symbolic.opt_sym: Option[phantm.symbols.Symbol]
phantm.ast.Trees.StaticClassRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.StaticClassRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhasesContext.$lessinit$greater$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance ==> phantm.symbols.GlobalSymbols.<init>(): phantm.symbols.GlobalSymbols
phantm.phases.NSWrapper.<init>(ast: phantm.ast.Trees.Program): phantm.phases.NSWrapper ==> phantm.ast.ASTTransform.<init>(p: phantm.ast.Trees.Program): phantm.ast.ASTTransform
phantm.ast.Trees.Static.<init>(vars: List[phantm.ast.Trees.InitVariable]): phantm.ast.Trees.Static ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.types.TStringLit.productElement(x$1: Int): Any ==> phantm.types.TStringLit.value: String
phantm.types.TStringLit.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.PhasesContext.copy$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.Trees.VariableVariable.<init>(name: phantm.ast.Trees.Expression): phantm.ast.Trees.VariableVariable
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.variable(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.global_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable ==> phantm.ast.STToAST.expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.PHPTrue.<init>(): phantm.ast.Trees.PHPTrue ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.helpers.CFGGraphs.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.helpers.CFGGraphs ==> phantm.ast.ASTTraversal.<init>(root: phantm.ast.Trees.Tree,initCtx: UserDataType): phantm.ast.ASTTraversal[UserDataType]
phantm.helpers.CFGGraphs.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.helpers.CFGGraphs ==> phantm.helpers.CheckContext.<init>(): phantm.helpers.CheckContext
phantm.cfg.Trees.FunctionCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.FunctionCall.fun: phantm.cfg.Trees.FuncRef
phantm.cfg.Trees.FunctionCall.productElement(x$1: Int): Any ==> phantm.cfg.Trees.FunctionCall.params: List[phantm.cfg.Trees.SimpleValue]
phantm.cfg.Trees.FunctionCall.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.NSResolver.<init>(ast: phantm.ast.Trees.Program,constants: Set[phantm.ast.Trees.NSIdentifier],functions: Set[phantm.ast.Trees.NSIdentifier]): phantm.phases.NSResolver ==> phantm.ast.ASTTransform.<init>(p: phantm.ast.Trees.Program): phantm.ast.ASTTransform
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.asInstanceOf[T0]: T0
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> phantm.annotations.SourceAnnotations.Parser.Entry.s: String
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.t: phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.asInstanceOf[T0]: T0
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> phantm.annotations.SourceAnnotations.Parser.AnyEntry.t: phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.asInstanceOf[T0]: T0
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> scala.Any.asInstanceOf[T0]: T0
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.t: phantm.types.Type
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> phantm.types.ArrayKey.fromString(str: String): phantm.types.ArrayKey
phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray ==> phantm.annotations.SourceAnnotations.Parser.Entry.t: phantm.types.Type
phantm.types.TObjectTmp.<init>(obj: phantm.types.TRealObject): phantm.types.TObjectTmp ==> phantm.types.TPreciseObject.<init>(): phantm.types.TPreciseObject
phantm.phases.PhasesContext.copy(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.<init>(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.ast.Trees.SimpleVariable.productElement(x$1: Int): Any ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.ast.Trees.SimpleVariable.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.While.productElement(x$1: Int): Any ==> phantm.ast.Trees.While.cond: phantm.ast.Trees.Expression
phantm.ast.Trees.While.productElement(x$1: Int): Any ==> phantm.ast.Trees.While.then: phantm.ast.Trees.Statement
phantm.ast.Trees.While.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.ArrayEntry.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ArrayEntry.arr: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ArrayEntry.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ArrayEntry.index: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ArrayEntry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.FunctionTypeAnnotation.annotateFromFT(from: phantm.annotations.FunctionTypeAnnotation): FunctionTypeAnnotation.this.type ==> phantm.annotations.FunctionTypeAnnotation.ftyps_$eq(x$1: scala.collection.immutable.Set[phantm.types.FunctionType]): Unit
phantm.annotations.FunctionTypeAnnotation.annotateFromFT(from: phantm.annotations.FunctionTypeAnnotation): FunctionTypeAnnotation.this.type ==> phantm.annotations.FunctionTypeAnnotation.ftyps: scala.collection.immutable.Set[phantm.types.FunctionType]
phantm.ast.Trees.Execute.productElement(x$1: Int): Any ==> phantm.ast.Trees.Execute.value: String
phantm.ast.Trees.Execute.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.format: String
phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.API.Writer.emitXML: Unit
phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.API.Writer.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Writer
phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.exportAPIPath: Option[String]
phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.exportAPIPath: Option[String]
phantm.phases.CallGraphGeneration.productElement(x$1: Int): Any ==> phantm.phases.CallGraphGeneration.context: phantm.phases.CGContext
phantm.phases.CallGraphGeneration.productElement(x$1: Int): Any ==> phantm.phases.CallGraphGeneration.pctx: phantm.phases.PhasesContext
phantm.phases.CallGraphGeneration.productElement(x$1: Int): Any ==> phantm.phases.CallGraphGeneration.node: phantm.ast.Trees.Tree
phantm.phases.CallGraphGeneration.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MFFinal.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.LookupResult.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.LookupResult.productElement(x$1: Int): Any ==> phantm.symbols.LookupResult.staticClash: Boolean
phantm.symbols.LookupResult.productElement(x$1: Int): Any ==> phantm.symbols.LookupResult.visibError: Option[phantm.symbols.MemberVisibility]
phantm.symbols.LookupResult.productElement(x$1: Int): Any ==> phantm.symbols.LookupResult.ms: Option[T]
phantm.types.TypeLattice.leq(envx: phantm.types.TypeLattice.Env,envy: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.ast.STToAST.S(n: phantm.parser.ParseNode): phantm.ast.Trees.Program ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.S(n: phantm.parser.ParseNode): phantm.ast.Trees.Program ==> phantm.ast.Trees.Program.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program
phantm.ast.STToAST.S(n: phantm.parser.ParseNode): phantm.ast.Trees.Program ==> phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.S(n: phantm.parser.ParseNode): phantm.ast.Trees.Program ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.ast.ASTTransform.trVariable(v: phantm.ast.Trees.Variable): phantm.ast.Trees.Variable
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.ast.Trees.InitVariable.<init>(v: phantm.ast.Trees.Variable,init: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.InitVariable
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.ast.Trees.InitVariable.init: Option[phantm.ast.Trees.Expression]
phantm.ast.ASTTransform.trInitVariable(iv: phantm.ast.Trees.InitVariable): phantm.ast.Trees.InitVariable ==> phantm.ast.Trees.InitVariable.v: phantm.ast.Trees.Variable
phantm.ast.Trees.Return.productElement(x$1: Int): Any ==> phantm.ast.Trees.Return.expr: phantm.ast.Trees.Expression
phantm.ast.Trees.Return.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.AssignUnary.<init>(variable: phantm.cfg.Trees.Variable,unOp: phantm.cfg.Trees.UnaryOperator,expr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignUnary ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.symbols.Symbol.userland: Boolean
phantm.phases.MethodGraphGeneration.execute: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.MethodGraphGeneration.execute: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.phases.MethodGraphGeneration.MethodGraph.addEdge(from: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex,to: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): Unit
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.symbols.GlobalSymbols.classes: scala.collection.mutable.HashMap[String,phantm.symbols.ClassSymbol]
phantm.phases.MethodGraphGeneration.execute: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.phases.MethodGraphGeneration.MethodGraph.addNode(sym: phantm.phases.MethodGraphGeneration.MethodGraph.AVertex): phantm.phases.MethodGraphGeneration.MethodGraph.Vertex
phantm.phases.MethodGraphGeneration.execute: Unit ==> phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol]
phantm.phases.MethodGraphGeneration.execute: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable ==> phantm.ast.Trees.SimpleVariable.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable
phantm.ast.STToAST.t_variable(n: phantm.parser.ParseNode): phantm.ast.Trees.SimpleVariable ==> phantm.ast.Trees.Identifier.<init>(value: String): phantm.ast.Trees.Identifier
phantm.helpers.STGraph.<init>(): phantm.helpers.STGraph ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.is_reference(n: phantm.parser.ParseNode): Boolean ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.is_reference(n: phantm.parser.ParseNode): Boolean ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.Trees.ListVar.<init>(vars: List[Option[phantm.ast.Trees.Variable]]): phantm.ast.Trees.ListVar ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.ast.Trees.CastUnset.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Html.productElement(x$1: Int): Any ==> phantm.ast.Trees.Html.content: String
phantm.ast.Trees.Html.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement] ==> phantm.ast.Trees.If.<init>(cond: phantm.ast.Trees.Expression,then: phantm.ast.Trees.Statement,elze: Option[phantm.ast.Trees.Statement]): phantm.ast.Trees.If
phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement]
phantm.ast.STToAST.elseif_else(elseifs: List[(phantm.ast.Trees.Expression, phantm.ast.Trees.Statement)],elze: Option[phantm.ast.Trees.Statement]): Option[phantm.ast.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.Trees.ObjectProperty.<init>(obj: phantm.cfg.Trees.SimpleValue,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ObjectProperty ==> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
phantm.types.ObjectIdDump.productElement(x$1: Int): Any ==> phantm.types.ObjectIdDump.offset: Int
phantm.types.ObjectIdDump.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MCLine.<init>(): phantm.ast.Trees.MCLine ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing ==> java.lang.RuntimeException.<init>(x$1: String): RuntimeException
phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Mult.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.ctx: phantm.phases.PhasesContext
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Div.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Execute.value: String
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.PreInc.rhs: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Identical.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.VariableVariable.name: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Minus.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Empty.v: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Minus.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Require.once: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BooleanOr.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.DynamicObjectProperty.property: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ArrayEntry.index: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BitwiseNot.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Mod.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ClassProperty.property: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Include.path: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Identical.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Mod.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.InstanceOf.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.SmallerEqual.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BooleanOr.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Isset.vs: List[phantm.ast.Trees.Variable]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ShiftLeft.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Require.path: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ClassConstant.cl: phantm.ast.Trees.ClassRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.New.args: List[phantm.ast.Trees.CallArg]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.DynamicObjectProperty.obj: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ClassProperty.cl: phantm.ast.Trees.ClassRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Print.value: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BooleanNot.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ShiftRight.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.MethodCall.obj: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Mult.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Cast.value: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ExpandArray.expr: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Equal.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Exit.value: Option[phantm.ast.Trees.Expression]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BitwiseXor.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ClassConstant.const: phantm.ast.Trees.Identifier
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Ternary.elze: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Plus.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.MethodCall.name: phantm.ast.Trees.MethodRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Ternary.then: Option[phantm.ast.Trees.Expression]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ShiftRight.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.StaticMethodCall.name: phantm.ast.Trees.MethodRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.InstanceOf.rhs: phantm.ast.Trees.ClassRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Closure.imports: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BitwiseOr.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BooleanAnd.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.StaticMethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Ternary.cond: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Closure.body: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.PostInc.rhs: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Div.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Assign.value: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.New.cl: phantm.ast.Trees.ClassRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Array.values: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.PostDec.rhs: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BitwiseOr.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.PreDec.rhs: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ArrayEntry.array: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Concat.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BitwiseAnd.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ExpandArray.vars: List[Option[phantm.ast.Trees.Variable]]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BitwiseAnd.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Silence.value: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ObjectProperty.obj: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Plus.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BooleanXor.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.SmallerEqual.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Clone.obj: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Smaller.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Cast.typ: phantm.ast.Trees.CastType
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ShiftLeft.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BitwiseXor.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BooleanXor.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Equal.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.annotations.FunctionAnnotation.isPure: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Assign.byref: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Eval.value: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.BooleanAnd.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Concat.lhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Closure.retref: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Smaller.rhs: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.MethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.NextArrayEntry.array: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.StaticMethodCall.cl: phantm.ast.Trees.ClassRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.symbols.GlobalSymbols.lookupFunction(n: String): Option[phantm.symbols.FunctionSymbol]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Closure.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.ObjectProperty.property: phantm.ast.Trees.Identifier
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Assign.vari: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.ast.Trees.Include.once: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean
phantm.phases.PureStatementsChecks.isPure(stmt: phantm.ast.Trees.Statement): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.types.TRealObject.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TRealObject.toString(): String
phantm.cfg.ASTToCFG.Emit.getPC: Vertex ==> phantm.cfg.ASTToCFG.Emit.pc: Vertex
phantm.cfg.Trees.SimpleVariable.<init>(): phantm.cfg.Trees.SimpleVariable ==> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
phantm.util.GlobalAnalysisResults.<init>(): phantm.util.GlobalAnalysisResults ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.Plus.productElement(x$1: Int): Any ==> phantm.ast.Trees.Plus.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Plus.productElement(x$1: Int): Any ==> phantm.ast.Trees.Plus.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Plus.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.Constant.<init>(cs: phantm.symbols.ConstantSymbol): phantm.cfg.Trees.Constant ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Empty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InstanceOf.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Include.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THArray.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdTmp.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITSIWENOT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Global.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.New.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.LabelDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.Entry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CallArg.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.StringKey.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicObjectProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Concat.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UArray.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastBool.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAExpression.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CFGGenerator.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MethodCall.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VariableVariable.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IDENTICAL.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Minus.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.EdgeImp.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.EQUALS.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEAND.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.StaticMethodCall.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Array.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Exit.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TInt.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.API.Reader.APIPos.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.STToAST.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.DIV.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanNot.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Identifier.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.New.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNull.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectId.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.IncludeResolver.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBottom.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PLUS.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identifier.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurElement.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TUninitialized.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPString.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFalse.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ConstantDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Ternary.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CollectSymbols.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Error.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Import.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineFull.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Namespaced.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CheckContext.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TClass.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTRIGHT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SILENCE.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastDouble.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseSeq.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastArray.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFalse.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableVar.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Constant.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANOR.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Try.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAArray.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftRight.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicMethodRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFile.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFProtected.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseOr.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstantDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBoolean.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Continue.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPublic.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Program.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostDec.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseNot.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CalledClass.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREINC.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product22.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product3.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEOR.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ObjectProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPNull.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Skip.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Label.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPNull.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mod.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAMethod.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Constant.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFFinal.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANAND.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostInc.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Catch.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.If.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Alternatives.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastInt.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CFGGraphs.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhasesContext.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Isset.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTrue.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAny.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Return.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MOD.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFalse.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignUnary.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.VertexImp.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseException.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Assign.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFStatic.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.Reporter.Error.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.SymContext.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeFlowAnalyzer.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Empty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignBinary.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NamespaceStart.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Print.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAIdentifier.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsObject.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTDEC.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DoWhile.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeLattice.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdUse.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeTransferFunction.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNumeric.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product7.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastString.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCMethod.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFunction.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Ternary.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloat.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodCall.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArrayEntry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Print.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurKey.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineNone.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanAnd.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Silence.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefUnknown.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ConstantsResolver.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TIntLit.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsResource.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product6.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TResource.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPAny.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Clone.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObjRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PureStatementsChecks.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsScalar.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefDynamic.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Div.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product2.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assign.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Smaller.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THObject.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PropertyDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FuncRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UInt.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFAbstract.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFloat.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANNOT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.For.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectStore.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Echo.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCNamespace.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NextArrayEntry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.URealRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSResolved.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ENotice.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseXor.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ExpandArray.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InitVariable.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurIsValid.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Equal.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarFunctionRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Clone.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VoidExpr.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticFunctionRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ListVar.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Foreach.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefFixed.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionCall.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastObject.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Throw.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsFloat.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloatLit.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsInt.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANXOR.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayNext.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Eval.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Unset.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftLeft.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSCurrent.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPTrue.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObject.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.TypeFlowAnalysis.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefCalledClass.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InterfaceDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Static.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsNull.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineManual.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArgumentDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAnyClass.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSNone.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPrivate.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Switch.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Unset.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstant.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPEmptyArray.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPLong.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFunction.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.ASTIntegrityChecks.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFAbstract.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTop.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identical.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SubTypeOf.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TString.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UTrue.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NoVar.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPThis.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Block.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreInc.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.CONCAT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticClassRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TStringLit.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FunctionCall.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SimpleVariable.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.While.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayEntry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Execute.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CallGraphGeneration.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFFinal.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.symbols.LookupResult.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Return.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Some.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastUnset.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Html.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdDump.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Plus.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Require.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product4.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSIdentifier.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.LabeledDirectedGraphImp.Group.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineLeaves.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFloat.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCLine.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassConstant.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicClassRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREDEC.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UString.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product5.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SmallerEqual.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LEQ.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeNotProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Goto.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreDec.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCDir.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseAnd.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GEQ.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Cast.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CGContext.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTIDENTICAL.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.INSTANCEOF.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product8.productElement(n: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.JavaListIteratorWrapper.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NextArrayEntry.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanXor.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Void.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.DumpCollector.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFNormal.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UNull.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.IntKey.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicFunctionRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPInteger.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTLEFT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mult.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableClassProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MINUS.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFloat.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MULT.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.TempID.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ObjectProperty.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFalse.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEXOR.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Cast.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodCall.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCClass.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPTrue.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Closure.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Isset.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanOr.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsString.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.Settings.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsArray.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ErrorException.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assume.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Break.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSGlobal.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarClassRef.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTEQUALS.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CheckContext.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTINC.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPString.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsBool.productElement(x$1: Int): Any
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPEmptyArray.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCLine.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.IncludeResolver.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NoVar.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CGContext.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFunction.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.LabelDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPString.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurKey.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mult.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANXOR.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.If.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FuncRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionCall.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarClassRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFloat.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableVar.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.INSTANCEOF.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CollectSymbols.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Plus.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.LabeledDirectedGraphImp.Group.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsBool.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseSeq.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TClass.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObjRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Exit.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectStore.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Cast.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TResource.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Require.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assume.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREDEC.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignBinary.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreInc.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product2.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Some.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Equal.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ConstantDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Mod.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.URealRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPTrue.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CFGGenerator.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UArray.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Print.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticFunctionRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.CONCAT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NextArrayEntry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Break.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFloat.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFFinal.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product3.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.For.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CheckContext.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product7.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Assign.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PreDec.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPAny.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyEntry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VarFunctionRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Ternary.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTEQUALS.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefUnknown.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UObject.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MethodCall.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Alternatives.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Skip.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DoWhile.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPInteger.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.FunctionCall.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Html.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.EdgeImp.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VariableVariable.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MOD.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.IntKey.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayEntry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticClassRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.VoidExpr.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefFixed.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsInt.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Constant.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITSIWENOT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Constant.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAIdentifier.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IDENTICAL.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Silence.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ObjectProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFunction.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanOr.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeLattice.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MINUS.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastUnset.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftRight.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsString.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassConstant.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPNull.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefCalledClass.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPLong.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.New.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAExpression.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFAbstract.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Import.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPFalse.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayNext.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Isset.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PureStatementsChecks.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsNull.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFStatic.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhaseException.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Throw.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Div.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UTrue.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ENotice.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNull.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.API.Reader.APIPos.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Isset.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TString.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PREINC.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSIdentifier.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineNone.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.While.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAny.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSCurrent.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CFGGraphs.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ClassRefDynamic.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Include.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SimpleVariable.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssignUnary.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Empty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFProtected.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Empty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.FunctionDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodCall.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseAnd.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Try.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.StaticMethodCall.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsFloat.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Unset.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Continue.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.StaticMethodCall.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UNull.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SILENCE.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTLEFT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.helpers.CheckContext.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsObject.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloatLit.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Switch.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.PhasesContext.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Program.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THArray.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseNot.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineManual.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Void.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicMethodRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TInt.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstantDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCClass.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.New.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InstanceOf.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastBool.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.MULT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFFinal.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SHIFTRIGHT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurElement.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NamespaceStart.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CalledClass.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectId.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product6.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCDir.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPNull.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Error.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.TempID.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicFunctionRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineFull.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeNotProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANOR.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBoolean.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.JavaListIteratorWrapper.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPTrue.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NOTIDENTICAL.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEOR.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPrivate.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEAND.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFloat.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identifier.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Smaller.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UString.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Closure.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Static.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Unset.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TIntLit.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Return.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product4.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product22.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Identifier.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product8.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ConstantsResolver.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Catch.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanXor.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.EQUALS.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFAbstract.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastArray.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Minus.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANNOT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeTransferFunction.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.Reporter.Error.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Return.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.symbols.LookupResult.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> scala.Product5.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TUninitialized.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Clone.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TAnyClass.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ListVar.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSGlobal.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.AssumeProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Global.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastString.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTINC.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseOr.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Concat.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ObjectProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Label.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Block.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArrayEntry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastDouble.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicObjectProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ExpandArray.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Print.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TypeFlowAnalyzer.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Clone.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.SubTypeOf.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Assign.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastObject.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.DIV.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UInt.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTrue.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CFNormal.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CastInt.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsResource.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.VertexImp.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TTop.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PLUS.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCMethod.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PropertyDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSNone.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BitwiseXor.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAArray.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.DynamicClassRef.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyStringEntry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPFalse.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BOOLEANAND.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassConstant.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostDec.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ClassDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ShiftLeft.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.ASTIntegrityChecks.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanNot.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Foreach.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MethodDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InitVariable.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.InlineLeaves.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.THObject.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.BooleanAnd.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.Entry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.SymContext.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Ternary.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TNumeric.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsScalar.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Goto.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.Cast.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.NextArrayEntry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.BITWISEXOR.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.LEQ.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GT.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.ErrorException.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.StringKey.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCFile.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.CallArg.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.SmallerEqual.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.VariableClassProperty.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TStringLit.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Namespaced.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.annotations.SourceAnnotations.Parser.AnyIntEntry.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.InterfaceDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Array.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdDump.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.ArrayCurIsValid.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.POSTDEC.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TBottom.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.NSResolved.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.TypeFlowAnalysis.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.phases.CallGraphGeneration.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFloat.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.ArgumentDecl.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MCNamespace.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.IsArray.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdUse.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.Settings.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PHPString.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Identical.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.OAMethod.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.MFPublic.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.GEQ.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.UFalse.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.STToAST.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.ObjectIdTmp.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.types.TFalse.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Eval.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.util.DumpCollector.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Execute.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.Echo.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.ast.Trees.PostInc.productArity: Int
phantm.ast.ASTTraversal.elements(p: Product): scala.collection.immutable.IndexedSeq[Any] ==> phantm.cfg.Trees.PHPThis.productArity: Int
phantm.annotations.SourceAnnotations.Parser.getConstType: String => Option[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.getAnyType(tag: String)(comment: String): Option[phantm.types.Type]
phantm.types.TClass.<init>(cs: phantm.symbols.ClassSymbol): phantm.types.TClass ==> phantm.types.ClassType.<init>(): phantm.types.ClassType
phantm.ast.Trees.Assign.<init>(vari: phantm.ast.Trees.Variable,value: phantm.ast.Trees.Expression,byref: Boolean): phantm.ast.Trees.Assign ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.symbols.GlobalSymbols.lookupFunction(n: String): Option[phantm.symbols.FunctionSymbol] ==> phantm.symbols.GlobalSymbols.functions: scala.collection.mutable.HashMap[String,phantm.symbols.FunctionSymbol]
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.ArrayKey.$less(o: phantm.types.ArrayKey): Boolean
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String ==> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.leq(env: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject)
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.leq(env: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.leq(env: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectTmp.<init>(obj: phantm.types.TRealObject): phantm.types.TObjectTmp
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TypeLattice.leq(env: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.meetTypes(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.LabeledDirectedGraphImp.Group.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.LabeledDirectedGraphImp.Group.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.vertOut_$eq(x$1: Option[LabeledDirectedGraphImp.this.Vertex]): Unit
phantm.cfg.LabeledDirectedGraphImp.Group.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.Group.vertOut: Option[LabeledDirectedGraphImp.this.Vertex]
phantm.cfg.LabeledDirectedGraphImp.Group.closeGroup(vertOut: LabeledDirectedGraphImp.this.Vertex): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit ==> phantm.annotations.SourceAnnotations.Parser.typedefs: scala.collection.immutable.Map[String,phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit ==> scala.util.parsing.combinator.lexical.Scanners.Scanner.<init>(in: String): Scanners.this.Scanner
phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit ==> phantm.annotations.SourceAnnotations.Parser.typedefs_$eq(x$1: scala.collection.immutable.Map[String,phantm.types.Type]): Unit
phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit ==> phantm.annotations.SourceAnnotations.Parser.typedef: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)]
phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.lexical: scala.util.parsing.combinator.lexical.StdLexical
phantm.annotations.SourceAnnotations.Parser.importTypeDef(line: String): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.Trees.Require.productElement(x$1: Int): Any ==> phantm.ast.Trees.Require.path: phantm.ast.Trees.Expression
phantm.ast.Trees.Require.productElement(x$1: Int): Any ==> phantm.ast.Trees.Require.once: Boolean
phantm.ast.Trees.Require.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type ==> phantm.annotations.CommentAnnotation.comment_$eq(x$1: Option[String]): Unit
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable]
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.isset_variables(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Variable] ==> phantm.ast.STToAST.variable_u(n: phantm.parser.ParseNode): phantm.ast.Trees.Variable
phantm.helpers.CFGGraphs.execute: Unit ==> phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit
phantm.helpers.CFGGraphs.execute: Unit ==> phantm.helpers.CFGGraphs.visit(node: phantm.ast.Trees.Tree,ctx: phantm.helpers.CheckContext): (phantm.helpers.CheckContext, Boolean)
phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.apis: List[String]
phantm.helpers.Tokenizer.<init>(): phantm.helpers.Tokenizer ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.types.ArrayKey.fromString(str: String): phantm.types.ArrayKey
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.types.TArray.<init>(entries: Map[phantm.types.ArrayKey,phantm.types.Type],globalInt: phantm.types.Type,globalString: phantm.types.Type): phantm.types.TArray
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.types.TFloatLit.<init>(value: Float): phantm.types.TFloatLit
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.util.API.Reader.elemsToType(elems: scala.xml.NodeSeq): phantm.types.Type
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.types.TStringLit.<init>(value: String): phantm.types.TStringLit
phantm.util.API.Reader.elemToType(elem: scala.xml.Node): phantm.types.Type ==> phantm.types.TIntLit.<init>(value: Long): phantm.types.TIntLit
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> phantm.types.TIntLit.value: Long
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> phantm.types.TStringLit.value: String
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type ==> phantm.types.TFloatLit.value: Float
phantm.ast.Trees.NSIdentifier.productElement(x$1: Int): Any ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.ast.Trees.NSIdentifier.productElement(x$1: Int): Any ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.Trees.NSIdentifier.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.VarClassRef.<init>(v: phantm.ast.Trees.Variable): phantm.ast.Trees.VarClassRef ==> phantm.ast.Trees.ClassRef.<init>(): phantm.ast.Trees.ClassRef
phantm.ast.Trees.Throw.<init>(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Throw ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.types.ObjectStore.<init>(): phantm.types.ObjectStore ==> phantm.types.ObjectStore.<init>(store: Map[phantm.types.ObjectId,phantm.types.TRealObject]): phantm.types.ObjectStore
phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.top_statement(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.top_statement_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.importAPI: Boolean
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.io.File.exists(): Boolean
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.API.Reader.load: AnyVal
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.apis: List[String]
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.API.Reader.<init>(is: java.io.InputStream,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.io.FileInputStream.<init>(x$1: String): java.io.FileInputStream
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.API.Reader.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.API.Reader.load: AnyVal
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.io.File.<init>(x$1: String): java.io.File
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.error(msg: String): Boolean
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.Settings.get: phantm.Settings
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> java.lang.Object.getClass(): Class[_]
phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.symbols.ClassSymbol.getStaticProperties: List[phantm.symbols.PropertySymbol] ==> phantm.symbols.ClassSymbol.static_properties: scala.collection.mutable.HashMap[String,phantm.symbols.PropertySymbol]
phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject ==> phantm.types.TObjectTmp.obj: phantm.types.TRealObject
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.setStore(st: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.<init>(): phantm.types.ObjectStore
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeLattice.joinObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject)
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.store: Map[phantm.types.ObjectId,phantm.types.TRealObject]
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TypeEnvironment.unionStoreFrom(e: phantm.types.TypeEnvironment): phantm.types.TypeEnvironment ==> phantm.types.ObjectStore.set(id: phantm.types.ObjectId,robj: phantm.types.TRealObject): phantm.types.ObjectStore
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TIntLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectTmp.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TString.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyArray.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TTrue.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TBottom.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TNull.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TFalse.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TNumeric.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TObjectRef.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TFloat.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TAnyObject.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TStringLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TInt.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TTop.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TResource.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TFloatLit.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TBoolean.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TArray.toText(env: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TAny.toText(e: phantm.types.TypeEnvironment): String
phantm.types.TUnion.toText(e: phantm.types.TypeEnvironment): String ==> phantm.types.TUninitialized.toText(e: phantm.types.TypeEnvironment): String
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.Parsers.repsep[T](p: => Parsers.this.Parser[T],q: => Parsers.this.Parser[Any]): Parsers.this.Parser[List[T]]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> phantm.annotations.SourceAnnotations.Parser.arrayentry: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.Parsers.repsep[T](p: => Parsers.this.Parser[T],q: => Parsers.this.Parser[Any]): Parsers.this.Parser[List[T]]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.Parsers.repsep[T](p: => Parsers.this.Parser[T],q: => Parsers.this.Parser[Any]): Parsers.this.Parser[List[T]]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> scala.util.parsing.combinator.Parsers.repsep[T](p: => Parsers.this.Parser[T],q: => Parsers.this.Parser[Any]): Parsers.this.Parser[List[T]]
phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray] ==> phantm.annotations.SourceAnnotations.Parser.arrentriesToArray(aes: List[phantm.annotations.SourceAnnotations.Parser.ArrayEntryType]): phantm.types.TArray
phantm.ast.DummyContext.<init>(): phantm.ast.DummyContext ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.CallArg.copy$default$2: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.cfg.LabeledDirectedGraphImp.Group.productElement(x$1: Int): Any ==> phantm.cfg.LabeledDirectedGraphImp.Group.name: String
phantm.cfg.LabeledDirectedGraphImp.Group.productElement(x$1: Int): Any ==> phantm.cfg.LabeledDirectedGraphImp.Group.vertIn: LabeledDirectedGraphImp.this.Vertex
phantm.cfg.LabeledDirectedGraphImp.Group.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.InlineLeaves.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.SymbolsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CollectSymbols.execute: Unit
phantm.phases.SymbolsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.CollectSymbols.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CollectSymbols
phantm.phases.SymbolsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.symbols.GlobalSymbols.getClasses: List[phantm.symbols.ClassSymbol] ==> phantm.symbols.GlobalSymbols.classes: scala.collection.mutable.HashMap[String,phantm.symbols.ClassSymbol]
phantm.ast.Trees.PHPFloat.productElement(x$1: Int): Any ==> phantm.ast.Trees.PHPFloat.value: Float
phantm.ast.Trees.PHPFloat.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeLattice.leq(env: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leq(envx: phantm.types.TypeLattice.Env,envy: phantm.types.TypeLattice.Env,x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.ast.Trees.MCLine.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.Trees.ClassRefUnknown.<init>(): phantm.cfg.Trees.ClassRefUnknown
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.Trees.ClassRefCalledClass.<init>(): phantm.cfg.Trees.ClassRefCalledClass
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.symbols.Symbolic.hasSymbol: Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.Trees.ClassRefFixed.<init>(cs: phantm.symbols.ClassSymbol): phantm.cfg.Trees.ClassRefFixed
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.Trees.ClassRefDynamic.<init>(sv: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ClassRefDynamic
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.Trees.ClassRefDynamic.<init>(sv: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.ClassRefDynamic
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.Trees.ClassRefUnknown.<init>(): phantm.cfg.Trees.ClassRefUnknown
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.ast.Trees.DynamicClassRef.ex: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.ast.Trees.VarClassRef.v: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.FunctionCall.<init>(fun: phantm.cfg.Trees.FuncRef,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.FunctionCall ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ClassConstant.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ClassConstant.cl: phantm.cfg.Trees.ClassRef
phantm.cfg.Trees.ClassConstant.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ClassConstant.name: phantm.ast.Trees.Identifier
phantm.cfg.Trees.ClassConstant.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.NSIdentifier.value: String ==> phantm.ast.Trees.NSResolved.value: String
phantm.ast.Trees.NSIdentifier.value: String ==> phantm.ast.Trees.NSCurrent.value: String
phantm.ast.Trees.NSIdentifier.value: String ==> phantm.ast.Trees.NSNone.value: String
phantm.ast.Trees.NSIdentifier.value: String ==> phantm.ast.Trees.NSGlobal.value: String
phantm.ast.Trees.NSIdentifier.value: String ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.ast.Trees.NSIdentifier.value: String ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.StaticMethodCall.name: phantm.ast.Trees.MethodRef
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.If.elze: Option[phantm.ast.Trees.Statement]
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.DynamicObjectProperty.property: phantm.ast.Trees.Expression
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.MethodCall.name: phantm.ast.Trees.MethodRef
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.StaticMethodCall.cl: phantm.ast.Trees.ClassRef
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.MethodCall.obj: phantm.ast.Trees.Expression
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.topLevel: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.MethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.inCond: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.If.then: phantm.ast.Trees.Statement
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.For.then: phantm.ast.Trees.Statement
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.For.init: phantm.ast.Trees.Statement
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.VariableVariable.name: phantm.ast.Trees.Expression
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.Assign.vari: phantm.ast.Trees.Variable
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.Assign.byref: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.get: phantm.Settings
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.DynamicObjectProperty.obj: phantm.ast.Trees.Expression
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.Settings.verbosity: Int
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.StaticMethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.For.step: phantm.ast.Trees.Statement
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CheckContext): phantm.phases.ASTIntegrityChecks
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.topLevel: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.If.cond: phantm.ast.Trees.Expression
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.For.cond: phantm.ast.Trees.Expression
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.ASTIntegrityChecks.execute: Unit
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.phases.CheckContext.<init>(topLevel: Boolean,inCond: Boolean): phantm.phases.CheckContext
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> phantm.ast.Trees.Assign.value: phantm.ast.Trees.Expression
phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.Trees.DynamicClassRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.DynamicClassRef.ex: phantm.ast.Trees.Expression
phantm.ast.Trees.DynamicClassRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.UnserializeException.<init>(msg: String): phantm.util.UnserializeException ==> java.lang.Exception.<init>(x$1: String): Exception
phantm.cfg.Trees.PREDEC.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.UString.productElement(x$1: Int): Any ==> phantm.util.UString.str: String
phantm.util.UString.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.ArgumentDecl.<init>(v: phantm.ast.Trees.SimpleVariable,hint: Option[phantm.ast.Trees.TypeHint],default: Option[phantm.ast.Trees.Expression],byref: Boolean): phantm.ast.Trees.ArgumentDecl ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.Trees.ClassConstant.<init>(cl: phantm.ast.Trees.ClassRef,const: phantm.ast.Trees.Identifier): phantm.ast.Trees.ClassConstant ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.Symbolic.getSymbol: phantm.symbols.Symbol ==> phantm.symbols.Symbolic.opt_sym: Option[phantm.symbols.Symbol]
phantm.ast.Trees.SmallerEqual.productElement(x$1: Int): Any ==> phantm.ast.Trees.SmallerEqual.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.SmallerEqual.productElement(x$1: Int): Any ==> phantm.ast.Trees.SmallerEqual.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.SmallerEqual.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> phantm.util.IncludeResolver.inclsInstr_$eq(x$1: scala.collection.immutable.Map[(String, Int),Set[String]]): Unit
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> phantm.util.IncludeResolver.consumeInt: Int
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> phantm.util.IncludeResolver.inclsInstr: scala.collection.immutable.Map[(String, Int),Set[String]]
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> phantm.util.IncludeResolver.consumeInt: Int
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> phantm.util.IncludeResolver.inclsInstr: scala.collection.immutable.Map[(String, Int),Set[String]]
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> java.io.File.<init>(x$1: String): java.io.File
phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit ==> phantm.util.IncludeResolver.consumeInt: Int
phantm.cfg.Trees.LEQ.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.AssumeNotProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssumeNotProperty.prop: phantm.cfg.Trees.Property
phantm.cfg.Trees.AssumeNotProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.AssumeNotProperty.vs: List[phantm.cfg.Trees.Variable]
phantm.cfg.Trees.AssumeNotProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit ==> java.io.FileWriter.<init>(x$1: String): java.io.FileWriter
phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit ==> java.io.BufferedWriter.<init>(x$1: java.io.Writer): java.io.BufferedWriter
phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit ==> phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String
phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit ==> java.io.Writer.write(x$1: String): Unit
phantm.cfg.LabeledDirectedGraphImp.writeDottyToFile(fname: String,title: String): Unit ==> java.io.BufferedWriter.close(): Unit
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.NSWrapper.appendSoFar(): Unit
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement] ==> phantm.phases.NSWrapper.appendSoFar(): Unit
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Positional.line: Int
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Positional.col: Int
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Reporter.Error.pos: phantm.util.Positional
phantm.util.Reporter.Error.before(e2: Reporter.this.Error): Boolean ==> phantm.util.Positional.col: Int
phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.$plus$eq(from: LabeledDirectedGraphImp.this.Vertex,lab: LabelType,to: LabeledDirectedGraphImp.this.Vertex): Unit
phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.pc: Vertex
phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement ==> phantm.cfg.ASTToCFG.exprStoreGet(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.Statement]
phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.importRules: scala.collection.immutable.Map[String,List[String]]
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.importRules: scala.collection.immutable.Map[String,List[String]]
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveClass(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.types.ArrayKey.<init>(): phantm.types.ArrayKey ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.Goto.productElement(x$1: Int): Any ==> phantm.ast.Trees.Goto.to: phantm.ast.Trees.Label
phantm.ast.Trees.Goto.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.PreDec.productElement(x$1: Int): Any ==> phantm.ast.Trees.PreDec.rhs: phantm.ast.Trees.Variable
phantm.ast.Trees.PreDec.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MCDir.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.BitwiseAnd.productElement(x$1: Int): Any ==> phantm.ast.Trees.BitwiseAnd.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BitwiseAnd.productElement(x$1: Int): Any ==> phantm.ast.Trees.BitwiseAnd.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BitwiseAnd.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block ==> phantm.ast.Trees.Block.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Block
phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block ==> phantm.ast.STToAST.inner_statement_list2(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.cfg.Trees.GEQ.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Reporter.tick: Unit ==> phantm.util.Reporter.tickCount_$eq(x$1: Int): Unit
phantm.util.Reporter.tick: Unit ==> phantm.util.Reporter.tickCount: Int
phantm.util.Reporter.tick: Unit ==> phantm.util.Reporter.tickCount: Int
phantm.util.Reporter.tick: Unit ==> phantm.util.Reporter.tickCount_$eq(x$1: Int): Unit
phantm.ast.Trees.Cast.productElement(x$1: Int): Any ==> phantm.ast.Trees.Cast.typ: phantm.ast.Trees.CastType
phantm.ast.Trees.Cast.productElement(x$1: Int): Any ==> phantm.ast.Trees.Cast.value: phantm.ast.Trees.Expression
phantm.ast.Trees.Cast.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.member_modifier(n: phantm.parser.ParseNode): phantm.ast.Trees.MemberFlag
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag]
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.non_empty_member_modifiers(n: phantm.parser.ParseNode): List[phantm.ast.Trees.MemberFlag] ==> phantm.ast.STToAST.member_modifier(n: phantm.parser.ParseNode): phantm.ast.Trees.MemberFlag
phantm.util.ConstantsResolver.<init>(ast: phantm.ast.Trees.Program,issueErrors: Boolean,ctx: phantm.phases.PhasesContext): phantm.util.ConstantsResolver ==> phantm.ast.ASTTransform.<init>(p: phantm.ast.Trees.Program): phantm.ast.ASTTransform
phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit ==> phantm.ast.ASTTraversal.traverse0: Unit
phantm.ast.Trees.Constant.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.phases.CGContext.productElement(x$1: Int): Any ==> phantm.phases.CGContext.scope: Option[phantm.symbols.FunctionSymbol]
phantm.phases.CGContext.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.SourceAnnotations.Parser.ArrayEntryType.<init>(): phantm.annotations.SourceAnnotations.Parser.ArrayEntryType ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.NOTIDENTICAL.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.IncludeResolver.pathExists(p: String): Option[String] ==> java.io.File.<init>(x$1: String): java.io.File
phantm.util.IncludeResolver.pathExists(p: String): Option[String] ==> java.io.File.exists(): Boolean
phantm.util.IncludeResolver.pathExists(p: String): Option[String] ==> scala.Some.<init>(x: A): Some[A]
phantm.util.IncludeResolver.pathExists(p: String): Option[String] ==> java.io.File.getAbsolutePath(): String
phantm.cfg.Trees.INSTANCEOF.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeFlowAnalyzer.notice(msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.types.TypeFlowAnalyzer.notice(msg: String,pos: phantm.util.Positional): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.ast.Trees.PropertyDecl.<init>(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.ast.Trees.PropertyDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.ast.Trees.PropertyDecl.<init>(v: phantm.ast.Trees.Identifier,flags: List[phantm.ast.Trees.MemberFlag],default: Option[phantm.ast.Trees.Expression]): phantm.ast.Trees.PropertyDecl
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.ast.Trees.PropertyDecl.default: Option[phantm.ast.Trees.Expression]
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.ast.Trees.PropertyDecl.v: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trProperty(pd: phantm.ast.Trees.PropertyDecl): phantm.ast.Trees.PropertyDecl ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.resolveIncludes: Boolean
phantm.cfg.Trees.NextArrayEntry.<init>(arr: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.NextArrayEntry ==> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
phantm.dataflow.TransferFunction.<init>(): phantm.dataflow.TransferFunction[E,S] ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.GT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.io.File.<init>(x$1: String): java.io.File
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.io.File.getAbsolutePath(): String
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.io.File.getAbsolutePath(): String
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> phantm.util.Evaluator.dirname(path: String): String
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> phantm.ast.Trees.PHPFloat.value: Float
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> phantm.ast.Trees.PHPString.value: String
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> phantm.util.Positional.file: Option[String]
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> phantm.ast.Trees.PHPInteger.value: Long
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> phantm.util.Positional.file: Option[String]
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> phantm.util.Positional.line: Int
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.io.File.<init>(x$1: String): java.io.File
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.Evaluator.scalarToString(ex: phantm.ast.Trees.Scalar): String ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.types.TObjectRef.<init>(id: phantm.types.ObjectId): phantm.types.TObjectRef ==> phantm.types.TPreciseObject.<init>(): phantm.types.TPreciseObject
phantm.ast.Trees.MCNamespace.<init>(): phantm.ast.Trees.MCNamespace ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.util.Positional.previousPos: String ==> phantm.util.Positional.file: Option[String]
phantm.util.Positional.previousPos: String ==> phantm.util.Positional.getPos: String
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> phantm.types.TUnion.addToSet(typs: Set[phantm.types.Type],typ: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.JavaListIteratorWrapper.productElement(x$1: Int): Any ==> phantm.util.JavaListIteratorWrapper.iter: java.util.Iterator[A]
phantm.util.JavaListIteratorWrapper.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.NextArrayEntry.productElement(x$1: Int): Any ==> phantm.cfg.Trees.NextArrayEntry.arr: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.NextArrayEntry.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.CallGraphGeneration.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration ==> phantm.phases.CallGraphGeneration.<init>(node: phantm.ast.Trees.Tree,context: phantm.phases.CGContext,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration
phantm.phases.CallGraphGeneration.<init>(node: phantm.ast.Trees.Tree,pctx: phantm.phases.PhasesContext): phantm.phases.CallGraphGeneration ==> phantm.phases.CGContext.<init>(scope: Option[phantm.symbols.FunctionSymbol]): phantm.phases.CGContext
phantm.util.JavaListIteratorWrapper.<init>(iter: java.util.Iterator[A]): phantm.util.JavaListIteratorWrapper[A] ==> java.lang.Object.<init>(): Object
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.VertexImp.name: String
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.groups: List[LabeledDirectedGraphImp.this.Group]
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> java.lang.StringBuffer.<init>(): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.edges: scala.collection.immutable.Set[phantm.cfg.EdgeImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.makeBoxed(id: String,name: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.Group.toDotString(res: StringBuffer): Unit
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> java.lang.StringBuffer.toString(): String
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.arrow(x: String,y: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.LabeledDirectedGraphImp.emit(s: String): StringBuffer
phantm.cfg.LabeledDirectedGraphImp.toDotString(title: String): String ==> phantm.cfg.VertexImp.name: String
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.Settings.verbosity: Int
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Void.<init>(): phantm.ast.Trees.Void
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.ASTTransform.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.Settings.get: phantm.Settings
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.Settings.verbosity: Int
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.v: phantm.ast.Trees.NSIdentifier
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.asInstanceOf[T0]: T0
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.ConstantDecl.value: phantm.ast.Trees.Expression
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.Settings.get: phantm.Settings
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.ctx: phantm.phases.PhasesContext
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Some.<init>(x: A): Some[A]
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.ConstantsResolver.issueErrors: Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.symbols.GlobalSymbols.lookupConstant(n: String): Option[phantm.symbols.ConstantSymbol]
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Evaluator.staticEval(ex: phantm.ast.Trees.Expression,ctx: phantm.phases.PhasesContext,issueErrors: Boolean): Option[phantm.ast.Trees.Scalar]
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String]
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.util.ConstantsResolver.trStmt(st: phantm.ast.Trees.Statement): phantm.ast.Trees.Statement ==> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
phantm.ast.Trees.BooleanXor.productElement(x$1: Int): Any ==> phantm.ast.Trees.BooleanXor.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BooleanXor.productElement(x$1: Int): Any ==> phantm.ast.Trees.BooleanXor.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BooleanXor.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.ClassSymbol.<init>(name: String,parent: Option[phantm.symbols.ClassSymbol],ifaces: List[phantm.symbols.IfaceSymbol]): phantm.symbols.ClassSymbol ==> phantm.symbols.Symbol.<init>(): phantm.symbols.Symbol
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.Scope.variables: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.Scope.variables: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.VariableSymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.VariableSymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.FunctionSymbol.args: scala.collection.mutable.HashMap[String,phantm.symbols.ArgumentSymbol]
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.ArgumentSymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.PropertySymbol.name: String
phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit ==> phantm.symbols.VariableSymbol.name: String
phantm.ast.Trees.Void.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Program.combine(p2: phantm.ast.Trees.Program): phantm.ast.Trees.Program ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.ast.Trees.Program.combine(p2: phantm.ast.Trees.Program): phantm.ast.Trees.Program ==> phantm.ast.Trees.Program.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program
phantm.ast.Trees.Program.combine(p2: phantm.ast.Trees.Program): phantm.ast.Trees.Program ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.PureStatementsChecks.<init>(node: phantm.ast.Trees.Tree,ctx: phantm.phases.PhasesContext): phantm.phases.PureStatementsChecks ==> phantm.ast.ASTSimpleTraversal.<init>(root: phantm.ast.Trees.Tree): phantm.ast.ASTSimpleTraversal
phantm.ast.Trees.BooleanOr.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BooleanOr ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.phases.CFGGenerator.display(content: String): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.CFGGenerator.display(content: String): Unit ==> phantm.Settings.displayProgress: Boolean
phantm.phases.CFGGenerator.display(content: String): Unit ==> phantm.Settings.verbosity: Int
phantm.phases.CFGGenerator.display(content: String): Unit ==> phantm.Settings.get: phantm.Settings
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.IfaceSymbol.name: String
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.GlobalSymbols.ifaces: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceSymbol]
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.IfaceSymbol.name: String
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.IfaceSymbol.name: String
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.symbols.GlobalSymbols.ifaces: scala.collection.mutable.HashMap[String,phantm.symbols.IfaceSymbol]
phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.ASTToCFG.resolveClassRef(cr: phantm.ast.Trees.ClassRef): phantm.cfg.Trees.ClassRef
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.ast.Trees.ClassConstant.const: phantm.ast.Trees.Identifier
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPFalse.<init>(): phantm.cfg.Trees.PHPFalse
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.ast.Trees.PHPFloat.value: Float
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPFloat.<init>(value: Float): phantm.cfg.Trees.PHPFloat
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.ClassConstant.<init>(cl: phantm.cfg.Trees.ClassRef,name: phantm.ast.Trees.Identifier): phantm.cfg.Trees.ClassConstant
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.ast.Trees.ClassConstant.cl: phantm.ast.Trees.ClassRef
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPNull.<init>(): phantm.cfg.Trees.PHPNull
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPNull.<init>(): phantm.cfg.Trees.PHPNull
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.ast.Trees.PHPInteger.value: Long
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.PHPString.<init>(value: String): phantm.cfg.Trees.PHPString
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.Trees.Constant.<init>(cs: phantm.symbols.ConstantSymbol): phantm.cfg.Trees.Constant
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.cfg.ASTToCFG.varFromVar(v: phantm.ast.Trees.Variable): phantm.cfg.Trees.Variable
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.ast.Trees.PHPString.value: String
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Some.<init>(x: A): Some[A]
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.alreadySimple(ex: phantm.ast.Trees.Expression): Option[phantm.cfg.Trees.SimpleValue] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeHelpers.typeHintToType(th: Option[phantm.ast.Trees.TypeHint]): phantm.types.Type ==> phantm.types.TypeHelpers.typeHintToType(th: phantm.ast.Trees.TypeHint): phantm.types.Type
phantm.types.TypeHelpers.typeHintToType(th: Option[phantm.ast.Trees.TypeHint]): phantm.types.Type ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.Trees.Expression.<init>(): phantm.cfg.Trees.Expression ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Foreach.key: Option[phantm.ast.Trees.Variable]
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Foreach.asbyref: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Block.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.For.init: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.For.step: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPures(stmts: List[phantm.ast.Trees.Statement]): Unit
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.DoWhile.cond: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.If.elze: Option[phantm.ast.Trees.Statement]
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.For.then: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.If.then: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Foreach.as: phantm.ast.Trees.Variable
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Foreach.what: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.If.cond: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Foreach.keybyref: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.While.then: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Try.body: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Try.catches: List[phantm.ast.Trees.Catch]
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.While.cond: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.For.cond: phantm.ast.Trees.Expression
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.DoWhile.body: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.Foreach.body: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPures(stmts: List[phantm.ast.Trees.Statement]): Unit
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.phases.PureStatementsChecks.visit(tr: phantm.ast.Trees.Tree): Boolean ==> phantm.phases.PureStatementsChecks.checkPure(stmt: phantm.ast.Trees.Statement): AnyVal
phantm.ast.STToAST.implements_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.implements_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.interface_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef]
phantm.ast.STToAST.implements_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.implements_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.symbols.Symbol.setOverwriteable(value: Boolean): Symbol.this.type ==> phantm.symbols.Symbol.overwriteable_$eq(x$1: Boolean): Unit
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.name: String
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.symbols.ClassSymbol.constants: scala.collection.mutable.HashMap[String,phantm.symbols.ClassConstantSymbol]
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.name: String
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.symbols.ClassSymbol.constants: scala.collection.mutable.HashMap[String,phantm.symbols.ClassConstantSymbol]
phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.name: String
phantm.util.DumpCollector.productElement(x$1: Int): Any ==> phantm.util.DumpCollector.path: String
phantm.util.DumpCollector.productElement(x$1: Int): Any ==> phantm.util.DumpCollector.ctx: phantm.phases.PhasesContext
phantm.util.DumpCollector.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.ast.Trees.ClassConstantDecl.v: phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.ast.ASTTransform.trIdentifier(id: phantm.ast.Trees.Identifier): phantm.ast.Trees.Identifier
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.ast.Trees.ClassConstantDecl.<init>(v: phantm.ast.Trees.Identifier,value: phantm.ast.Trees.Expression): phantm.ast.Trees.ClassConstantDecl
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.ast.Trees.ClassConstantDecl.value: phantm.ast.Trees.Expression
phantm.ast.ASTTransform.trClassConst(cl: phantm.ast.Trees.ClassConstantDecl): phantm.ast.Trees.ClassConstantDecl ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassConstantDecl.v: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.MethodSymbol.registerPredefVariables: Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type)
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TypeHelpers.typeHintToType(th: Option[phantm.ast.Trees.TypeHint]): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.SourceAnnotations.Parser.getConstType: String => Option[phantm.types.Type]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TypeHelpers.exprToType(oe: Option[phantm.ast.Trees.Expression]): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.<init>(name: String,byref: Boolean,optional: Boolean): phantm.symbols.ArgumentSymbol
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ClassConstantSymbol
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassSymbol.registerStaticProperty(ps: phantm.symbols.PropertySymbol): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.PropertyDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.hint: Option[phantm.ast.Trees.TypeHint]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.PropertyDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.SourceAnnotations.Parser.isPure(comment: String): Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.MethodSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.MethodSymbol
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.PropertyDecl.v: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassSymbol.registerMethod(ms: phantm.symbols.MethodSymbol): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassConstantSymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ClassConstantSymbol
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassConstantDecl.value: phantm.ast.Trees.Expression
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.MethodDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TFunction.ret: phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.FunctionAnnotation.isPure_$eq(x$1: Boolean): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.byref: Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.SourceAnnotations.Parser.shouldInline(comment: String): Boolean
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.defaultTypeWF.apply(t: phantm.types.Type): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.SourceAnnotations.Parser.getVarType: String => Option[phantm.types.Type]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassSymbol.registerConstant(cs: phantm.symbols.ClassConstantSymbol): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.PropertySymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.PropertySymbol
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassConstantDecl.value: phantm.ast.Trees.Expression
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.PropertyDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.SourceAnnotations.Parser.getVarType: String => Option[phantm.types.Type]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TypeHelpers.exprToType(e: phantm.ast.Trees.Expression): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.PropertyDecl.v: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassConstantDecl.v: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TypeHelpers.exprToType(oe: Option[phantm.ast.Trees.Expression]): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.FunctionAnnotation.shouldInline_$eq(x$1: Boolean): Unit
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.PropertySymbol.<init>(cs: phantm.symbols.ClassSymbol,name: String,visibility: phantm.symbols.MemberVisibility): phantm.symbols.PropertySymbol
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.CommentAnnotation.attachComment(com: Option[String]): CommentAnnotation.this.type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.phases.CollectSymbols.getVisibility(flags: List[phantm.ast.Trees.MemberFlag]): phantm.symbols.MemberVisibility
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.types.TypeHelpers.exprToType(oe: Option[phantm.ast.Trees.Expression]): phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.PropertyDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.CollectSymbols.secondClassPass(cd: phantm.ast.Trees.ClassDecl,cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassSymbol.registerProperty(ps: phantm.symbols.PropertySymbol): Unit
phantm.cfg.Trees.ClassConstant.<init>(cl: phantm.cfg.Trees.ClassRef,name: phantm.ast.Trees.Identifier): phantm.cfg.Trees.ClassConstant ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.symbols.Scope.registerPredefVariables: Unit ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.types.StringKey.<init>(v: String): phantm.types.StringKey ==> phantm.types.ArrayKey.<init>(): phantm.types.ArrayKey
phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String] ==> phantm.util.JavaListIteratorWrapper.<init>(iter: java.util.Iterator[A]): phantm.util.JavaListIteratorWrapper[A]
phantm.ast.Trees.CFNormal.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Clone.<init>(obj: phantm.ast.Trees.Expression): phantm.ast.Trees.Clone ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.phases.TypeFlowAnalysis.display(content: String): Unit ==> phantm.util.Reporter.get: phantm.util.Reporter
phantm.phases.TypeFlowAnalysis.display(content: String): Unit ==> phantm.Settings.verbosity: Int
phantm.phases.TypeFlowAnalysis.display(content: String): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeFlowAnalysis.display(content: String): Unit ==> phantm.Settings.displayProgress: Boolean
phantm.phases.TypeFlowAnalysis.display(content: String): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeFlowAnalysis.display(content: String): Unit ==> phantm.util.Reporter.tick: Unit
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.lookupField(index: String): phantm.types.Type
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.<init>(fields: Map[String,phantm.types.Type],globalType: phantm.types.Type,singleton: Boolean,ct: phantm.types.ClassType): phantm.types.TRealObject
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TAnyClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.singleton: Boolean
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.singleton: Boolean
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TAnyClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.lookupField(index: String): phantm.types.Type
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TypeLattice.meetTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TypeLattice.meetTypes(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type
phantm.types.TypeLattice.meetObjects(envInit: phantm.types.TypeEnvironment,a1: phantm.types.TRealObject,a2: phantm.types.TRealObject): (phantm.types.TypeEnvironment, phantm.types.TRealObject) ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CFGGenerationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTPruningPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.MethodGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIImportationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.DumpsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ParsingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.NamespaceResolverPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.IncludesConstantsResolutionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.TypeAnalyzingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CallGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIExportingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PureStatementsPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhaseException.ph: phantm.phases.Phase
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CFGGenerationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.DumpsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.MethodGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CallGraphPhase.run(initCtx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTChecksPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.TypeAnalyzingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTPruningPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.IncludesConstantsResolutionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PureStatementsPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ParsingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.NamespaceResolverPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIExportingPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIImportationPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsCollectionPhase.run(ctx: phantm.phases.PhasesContext): phantm.phases.PhasesContext
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CFGGenerationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTPruningPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.MethodGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIImportationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.DumpsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ParsingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.NamespaceResolverPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.IncludesConstantsResolutionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.TypeAnalyzingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CallGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIExportingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PureStatementsPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhaseException.error: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> java.io.PrintStream.<init>(x$1: String): java.io.PrintStream
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhasesRunner.reporter: phantm.util.Reporter
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.ASTGraph.<init>(): phantm.helpers.ASTGraph
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhasesRunner.getPhasesToRun: phantm.phases.PhaseSeq
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.displayProgress: Boolean
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.util.Reporter.emitAll: Unit
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhasesRunner.reporter: phantm.util.Reporter
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhasesRunner.reporter: phantm.util.Reporter
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.dumpAfter: Set[String]
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CFGGenerationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTPruningPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.MethodGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIImportationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.DumpsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ParsingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.NamespaceResolverPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.IncludesConstantsResolutionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.TypeAnalyzingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CallGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIExportingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PureStatementsPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CFGGenerationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTPruningPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.MethodGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIImportationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.DumpsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ParsingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.NamespaceResolverPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.IncludesConstantsResolutionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.TypeAnalyzingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CallGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIExportingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PureStatementsPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.summaryOnly: Boolean
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhasesContext.oast: Option[phantm.ast.Trees.Program]
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.util.Reporter.error(msg: String): Boolean
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CFGGenerationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTPruningPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.MethodGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIImportationPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ASTChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.DumpsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.ParsingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.NamespaceResolverPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsChecksPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.IncludesConstantsResolutionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.TypeAnalyzingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.CallGraphPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.APIExportingPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.SymbolsCollectionPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PureStatementsPhase.name: String
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.ASTGraph.generateDotGraph(root: phantm.ast.Trees.Program,printStream: java.io.PrintStream): Unit
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.printAfter: Set[String]
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhaseSeq.list: Seq[phantm.phases.Phase]
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.util.Reporter.emitSummary: Unit
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.phases.PhasesRunner.reporter: phantm.util.Reporter
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.util.Reporter.clear: Unit
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> phantm.Settings.get: phantm.Settings
phantm.phases.PhasesRunner.run(initCtx: phantm.phases.PhasesContext): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program ==> phantm.ast.Trees.Program.<init>(stmts: List[phantm.ast.Trees.Statement]): phantm.ast.Trees.Program
phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program ==> phantm.ast.ASTTransform.trStmts(stmts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program ==> phantm.phases.NSWrapper.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program ==> phantm.phases.ASTPruner.trStmts(sts: List[phantm.ast.Trees.Statement]): List[phantm.ast.Trees.Statement]
phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program ==> phantm.ast.Trees.Program.stmts: List[phantm.ast.Trees.Statement]
phantm.ast.Trees.PHPFloat.<init>(value: Float): phantm.ast.Trees.PHPFloat ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.STToAST.class_entry_type(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassFlag ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.class_entry_type(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassFlag ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.class_entry_type(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassFlag ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.class_entry_type(n: phantm.parser.ParseNode): phantm.ast.Trees.ClassFlag ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.types.StringKey.vToString: String ==> phantm.types.StringKey.v: String
phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.typedefs: scala.collection.immutable.Map[String,phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> scala.util.parsing.combinator.syntactical.StdTokenParsers.ident: StdTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> scala.util.parsing.combinator.syntactical.StdTokenParsers.ident: StdTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> phantm.util.Reporter.notice(msg: String): Boolean
phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.array: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.TArray]
phantm.annotations.SourceAnnotations.Parser.typ: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type] ==> phantm.annotations.SourceAnnotations.Parser.identToType(name: String): phantm.types.Type
phantm.phases.ASTCollector.<init>(functs: Map[String,(String, Int)],classes: Map[String,(String, Int)],ast: phantm.ast.Trees.Program): phantm.phases.ASTCollector ==> phantm.ast.ASTSimpleTraversal.<init>(root: phantm.ast.Trees.Tree): phantm.ast.ASTSimpleTraversal
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.symbols.ClassSymbol.<init>(name: String,parent: Option[phantm.symbols.ClassSymbol],ifaces: List[phantm.symbols.IfaceSymbol]): phantm.symbols.ClassSymbol
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.classCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.ClassDecl]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.classCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.ClassDecl]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.classCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.ClassDecl]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.classList_$eq(x$1: List[(phantm.symbols.ClassSymbol, phantm.ast.Trees.ClassDecl)]): Unit
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.symbols.GlobalSymbols.lookupIface(n: String): Option[phantm.symbols.IfaceSymbol]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.classList: List[(phantm.symbols.ClassSymbol, phantm.ast.Trees.ClassDecl)]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.util.Reporter.error(msg: String): Boolean
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.classesToPass: List[phantm.ast.Trees.ClassDecl]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.phases.CollectSymbols.classCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.ClassDecl]
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstClassPass0(cd: phantm.ast.Trees.ClassDecl): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.copy(list: Seq[phantm.phases.Phase]): phantm.phases.PhaseSeq
phantm.phases.PhaseSeq.followedBy(p: phantm.phases.Phase): phantm.phases.PhaseSeq ==> phantm.phases.PhaseSeq.list: Seq[phantm.phases.Phase]
phantm.types.TypeEnvironment.<init>(map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type],scope: Option[phantm.symbols.ClassSymbol],store: phantm.types.ObjectStore): phantm.types.TypeEnvironment ==> phantm.dataflow.Environment.<init>(): phantm.dataflow.Environment[E,S]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.GlobalSymbols.functions: scala.collection.mutable.HashMap[String,phantm.symbols.FunctionSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.varScope: phantm.symbols.Scope
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.MethodDecl.retref: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.SourceAnnotations.Parser.isPure(comment: String): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.FunctionSymbol.<init>(name: String): phantm.symbols.FunctionSymbol
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.varScope: phantm.symbols.Scope
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.<init>(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.cl: Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TypeHelpers.typeHintToType(th: Option[phantm.ast.Trees.TypeHint]): phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ClassSymbol.lookupMethod(name: String,from: Option[phantm.symbols.ClassSymbol]): phantm.symbols.LookupResult[phantm.symbols.MethodSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.byref: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.Settings.get: phantm.Settings
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.FunctionSymbol.registerVariable(vs: phantm.symbols.VariableSymbol): Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Scope.registerVariable(cs: phantm.symbols.VariableSymbol): Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.hint: Option[phantm.ast.Trees.TypeHint]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.FunctionTypeAnnotation.registerFType(ftyp: phantm.types.FunctionType): FunctionTypeAnnotation.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.GlobalSymbols.functions: scala.collection.mutable.HashMap[String,phantm.symbols.FunctionSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.FunctionAnnotation.isPure_$eq(x$1: Boolean): Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.FunctionSymbol.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Scope.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.MethodDecl.body: Option[phantm.ast.Trees.Statement]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.v: phantm.ast.Trees.SimpleVariable
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.checkTypeHint(annoType: phantm.types.Type,hintType: phantm.types.Type,pos: phantm.util.Positional): phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.InterfaceDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.retref: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.<init>(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TypeHelpers.exprToType(oe: Option[phantm.ast.Trees.Expression]): phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.GlobalSymbols.registerFunction(fs: phantm.symbols.FunctionSymbol): Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.<init>(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.byref: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.cl: Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.MethodDecl.name: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.varScope: phantm.symbols.Scope
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TFunction.ret: phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.iface: Option[phantm.symbols.IfaceSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.SimpleVariable.name: phantm.ast.Trees.Identifier
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.<init>(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ArgumentSymbol.<init>(name: String,byref: Boolean,optional: Boolean): phantm.symbols.ArgumentSymbol
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.MethodDecl.flags: List[phantm.ast.Trees.MemberFlag]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.GlobalSymbols.lookupClass(n: String): Option[phantm.symbols.ClassSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.Type.union(t: phantm.types.Type): phantm.types.Type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.FunctionAnnotation.shouldInline_$eq(x$1: Boolean): Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.FunctionSymbol.registerArgument(as: phantm.symbols.ArgumentSymbol): AnyVal
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.GlobalSymbols.lookupIface(n: String): Option[phantm.symbols.IfaceSymbol]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.SymContext.varScope: phantm.symbols.Scope
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Symbolic.setSymbol(sym: phantm.symbols.Symbol): Symbolic.this.type
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.util.Positional.getPos: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.FunctionDecl.body: phantm.ast.Trees.Statement
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ArgumentDecl.default: Option[phantm.ast.Trees.Expression]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.Identifier.value: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.ClassSymbol.name: String
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.types.TFunction.<init>(args: List[(phantm.types.Type, Boolean, Boolean)],ret: phantm.types.Type): phantm.types.TFunction
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.CommentAnnotation.comment: Option[String]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.SourceAnnotations.Parser.getFunctionTypes(comment: String): (Map[String,phantm.types.Type], phantm.types.Type)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Some.<init>(x: A): Some[A]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> java.lang.Object.$bang$eq(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.ast.Trees.MethodDecl.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.annotations.SourceAnnotations.Parser.shouldInline(comment: String): Boolean
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.Scope.registerPredefVariables: Unit
phantm.phases.CollectSymbols.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.SymContext): (phantm.phases.SymContext, Boolean) ==> phantm.symbols.MethodSymbol.registerPredefVariables: Unit
phantm.util.UNull.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.annotations.SourceAnnotations.Parser.isAnnotated(comment: String): Boolean ==> phantm.annotations.SourceAnnotations.Parser.filterLines(comment: String,tag: String): List[String]
phantm.annotations.SourceAnnotations.Parser.isAnnotated(comment: String): Boolean ==> phantm.annotations.SourceAnnotations.Parser.getReturnType: String => Option[phantm.types.Type]
phantm.types.IntKey.productElement(x$1: Int): Any ==> phantm.types.IntKey.v: Long
phantm.types.IntKey.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong ==> phantm.cfg.Trees.StaticValue.<init>(): phantm.cfg.Trees.StaticValue
phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.Trees.NSName.unapply(ns: phantm.ast.Trees.NSIdentifier): Option[String] ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.dumps: List[String]
phantm.ast.Trees.DynamicFunctionRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.DynamicFunctionRef.ex: phantm.ast.Trees.Expression
phantm.ast.Trees.DynamicFunctionRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.PreInc.<init>(rhs: phantm.ast.Trees.Variable): phantm.ast.Trees.PreInc ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.PHPInteger.productElement(x$1: Int): Any ==> phantm.ast.Trees.PHPInteger.value: Long
phantm.ast.Trees.PHPInteger.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.SHIFTLEFT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Mult.productElement(x$1: Int): Any ==> phantm.ast.Trees.Mult.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Mult.productElement(x$1: Int): Any ==> phantm.ast.Trees.Mult.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.Mult.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol ==> phantm.symbols.Symbol.<init>(): phantm.symbols.Symbol
phantm.util.Unserializer.getVal(i: Int): phantm.util.UValue ==> phantm.util.Unserializer.valueStore: List[phantm.util.UValue]
phantm.cfg.Trees.VariableClassProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.VariableClassProperty.cl: phantm.cfg.Trees.ClassRef
phantm.cfg.Trees.VariableClassProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.VariableClassProperty.index: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.VariableClassProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Goto.<init>(to: phantm.ast.Trees.Label): phantm.ast.Trees.Goto ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.cfg.Trees.MINUS.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.AssignBinary.<init>(variable: phantm.cfg.Trees.Variable,lhs: phantm.cfg.Trees.SimpleValue,binOp: phantm.cfg.Trees.BinaryOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.AssignBinary ==> phantm.cfg.Trees.Statement.<init>(): phantm.cfg.Trees.Statement
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.consts: List[phantm.ast.Trees.ClassConstantDecl]
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.static_props: List[phantm.ast.Trees.PropertyDecl]
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.parent: Option[phantm.ast.Trees.StaticClassRef]
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.props: List[phantm.ast.Trees.PropertyDecl]
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.flags: phantm.ast.Trees.ClassFlag
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.name: phantm.ast.Trees.NSIdentifier
phantm.ast.Trees.ClassDecl.productElement(x$1: Int): Any ==> phantm.ast.Trees.ClassDecl.methods: List[phantm.ast.Trees.MethodDecl]
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Constant.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Constant.name: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.ConstantsResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.ast.ASTTransform.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.util.IncludeResolver.trExpr(ex: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.asInstanceOf[T0]: T0
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.phases.NSResolver.trExpr(e: phantm.ast.Trees.Expression): phantm.ast.Trees.Expression ==> phantm.phases.NSResolver.resolveConstant(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Lexer.setFileName(fileName: String): Unit
phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Lexer.<init>(in: java.io.Reader): phantm.parser.Lexer
phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.io.PrintStream.println(x$1: String): Unit
phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.CUPParser.<init>(s: java_cup.runtime.Scanner): phantm.parser.CUPParser
phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.io.FileReader.<init>(x$1: String): java.io.FileReader
phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java_cup.runtime.lr_parser.parse(): java_cup.runtime.Symbol
phantm.ast.Trees.Global.<init>(vars: List[phantm.ast.Trees.Variable]): phantm.ast.Trees.Global ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.cfg.Trees.PHPFloat.productElement(x$1: Int): Any ==> phantm.cfg.Trees.PHPFloat.value: Float
phantm.cfg.Trees.PHPFloat.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.IfaceSymbol.<init>(name: String,parents: List[phantm.symbols.IfaceSymbol]): phantm.symbols.IfaceSymbol ==> phantm.symbols.Symbol.<init>(): phantm.symbols.Symbol
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> phantm.annotations.AnnotationsStore.functions: scala.collection.immutable.Map[String,(List[phantm.types.TFunction], List[phantm.types.Type])]
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.typeToXML(typ: phantm.types.Type,widen: phantm.types.Type => phantm.types.Type): String
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> java.io.PrintStream.<init>(x$1: java.io.OutputStream): java.io.PrintStream
phantm.util.API.Writer.emitXML: Unit ==> phantm.types.TFunction.args: List[(phantm.types.Type, Boolean, Boolean)]
phantm.util.API.Writer.emitXML: Unit ==> phantm.symbols.GlobalSymbols.lookupFunction(n: String): Option[phantm.symbols.FunctionSymbol]
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> java.io.FileOutputStream.<init>(x$1: String): java.io.FileOutputStream
phantm.util.API.Writer.emitXML: Unit ==> phantm.symbols.Symbol.userland: Boolean
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.reduceFT(ft1: phantm.types.TFunction,ft2: phantm.types.TFunction): phantm.types.TFunction
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.widenArgs(t: phantm.types.Type): phantm.types.Type
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.util.API.Writer.emitXML: Unit ==> phantm.types.TypeLattice.join(x: phantm.types.Type,y: phantm.types.Type): phantm.types.Type
phantm.util.API.Writer.emitXML: Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.util.API.Writer.emitXML: Unit ==> phantm.util.API.Writer.emit(str: String): Unit
phantm.cfg.Trees.MULT.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.TempID.productElement(x$1: Int): Any ==> phantm.cfg.Trees.TempID.value: String
phantm.cfg.Trees.TempID.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.BitwiseNot.<init>(rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.BitwiseNot ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.Settings.set(stgs: phantm.Settings): Unit ==> phantm.Settings.stgs_$eq(x$1: Option[phantm.Settings]): Unit
phantm.Settings.set(stgs: phantm.Settings): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.displayProgress: Boolean
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.<init>(files: List[String],includedFiles: Set[String],oast: Option[phantm.ast.Trees.Program],dumpedData: List[phantm.util.DumpCollector],symbol: Option[phantm.symbols.Symbol],results: phantm.util.GlobalAnalysisResults,cfgs: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph],globalSymbols: phantm.symbols.GlobalSymbols): phantm.phases.PhasesContext
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Helper.generate(input: String,output: String,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Main.handle_options(opts: List[String]): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Main.input: Option[String]
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> java.lang.Throwable.printStackTrace(): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$3: Option[phantm.ast.Trees.Program] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Main.helper: phantm.helpers.Helper
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$2: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.util.Reporter.set(newrep: phantm.util.Reporter): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Main.output: Option[String]
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.util.Reporter.<init>(mainFiles: List[String]): phantm.util.Reporter
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.<init>(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.helpers.Main.main(args: Array[String]): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$6: phantm.util.GlobalAnalysisResults @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Main.input: Option[String]
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$4: List[phantm.util.DumpCollector] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$7: Map[Option[phantm.symbols.FunctionSymbol],phantm.cfg.ControlFlowGraph] @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> java.io.PrintStream.println(x$1: String): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.STGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Tokenizer.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.CFGGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Lint.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.phases.PhasesContext.apply$default$8: phantm.symbols.GlobalSymbols @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.set(stgs: phantm.Settings): Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> java.lang.Throwable.getMessage(): String
phantm.helpers.Main.main(args: Array[String]): Unit ==> scala.MatchError.getMessage(): String
phantm.helpers.Main.main(args: Array[String]): Unit ==> java.lang.Exception.<init>(): Exception
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Main.usage: Unit
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.helpers.Main.helper: phantm.helpers.Helper
phantm.helpers.Main.main(args: Array[String]): Unit ==> phantm.Settings.$lessinit$greater$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.helpers.Main.main(args: Array[String]): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.cfg.Trees.ObjectProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ObjectProperty.obj: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ObjectProperty.productElement(x$1: Int): Any ==> phantm.cfg.Trees.ObjectProperty.index: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.ObjectProperty.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TFalse.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.API.Reader.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader ==> phantm.util.API.Reader.<init>(is: java.io.InputStream,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader
phantm.util.API.Reader.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader ==> java.io.FileInputStream.<init>(x$1: java.io.File): java.io.FileInputStream
phantm.util.API.Reader.<init>(path: String,ctx: phantm.phases.PhasesContext): phantm.util.API.Reader ==> java.io.File.<init>(x$1: String): java.io.File
phantm.types.ObjectType.<init>(): phantm.types.ObjectType ==> phantm.types.ConcreteType.<init>(): phantm.types.ConcreteType
phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.verbosity: Int
phantm.ast.Trees.SimpleVariable.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.SimpleVariable ==> phantm.ast.Trees.Variable.<init>(): phantm.ast.Trees.Variable
phantm.ast.Trees.Foreach.<init>(what: phantm.ast.Trees.Expression,as: phantm.ast.Trees.Variable,asbyref: Boolean,key: Option[phantm.ast.Trees.Variable],keybyref: Boolean,body: phantm.ast.Trees.Statement): phantm.ast.Trees.Foreach ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.defWithin(parent: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.<init>(root: phantm.ast.Trees.NSRoot,parts: List[String]): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.ast.Trees.NSIdentifier.root: phantm.ast.Trees.NSRoot
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.resolveNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> phantm.phases.NSResolver.nsContext: phantm.ast.Trees.NSIdentifier
phantm.phases.NSResolver.resolveFunction(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.printAfter: Set[String]
phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.scope: Option[phantm.symbols.ClassSymbol]
phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.<init>(map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type],scope: Option[phantm.symbols.ClassSymbol],store: phantm.types.ObjectStore): phantm.types.TypeEnvironment
phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.store: phantm.types.ObjectStore
phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment ==> phantm.types.TypeEnvironment.map: Map[phantm.cfg.Trees.SimpleVariable,phantm.types.Type]
phantm.types.TypeEnvironment.inject(v: phantm.cfg.Trees.SimpleVariable,typ: phantm.types.Type): phantm.types.TypeEnvironment ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.displayUsage_$eq(x$1: Boolean): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> java.io.File.getAbsolutePath(): String
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.files: List[String]
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> java.io.File.getAbsolutePath(): String
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.util.IncludeResolver.importIncludes(files: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.displayVersion_$eq(x$1: Boolean): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.files_$eq(x$1: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.files: List[String]
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> java.io.File.<init>(x$1: String): java.io.File
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> java.io.File.<init>(x$1: String): java.io.File
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.displayUsage_$eq(x$1: Boolean): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.displayUsage_$eq(x$1: Boolean): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$3: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$7: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$6: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$9: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$16: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy(verbosity: Int,format: String,resolveIncludes: Boolean,importAPI: Boolean,testsActive: Boolean,summaryOnly: Boolean,displayFixPoint: Boolean,displayIncludes: Boolean,displayProgress: Boolean,onlyLint: Boolean,typeFlowFilter: List[String],includePaths: List[String],dumpAfter: Set[String],printAfter: Set[String],apis: List[String],dumps: List[String],exportAPIPath: Option[String],exportCGPath: Option[String],exportMGPath: Option[String],inlineMode: phantm.InlineMode,compactErrors: Boolean,anyInput: Boolean): phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$20: phantm.InlineMode @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$19: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$12: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> scala.Some.<init>(x: A): Some[A]
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$8: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$14: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$17: Option[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$1: Int @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.files_$eq(x$1: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$13: Set[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$5: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$10: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$2: String @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings: phantm.Settings
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$15: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.handleArgs(args: List[String]): Unit
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$11: List[String] @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$4: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance
phantm.Main.handleArgs(args: List[String]): Unit ==> phantm.Main.settings_$eq(x$1: phantm.Settings): Unit
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.types.TArray.<init>(global: phantm.types.Type): phantm.types.TArray
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.Settings.anyInput: Boolean
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.Settings.get: phantm.Settings
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.types.TArray.<init>(global: phantm.types.Type): phantm.types.TArray
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.util.DumpCollector.heap: phantm.util.Unserializer
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.phases.PhasesContext.dumpedData: List[phantm.util.DumpCollector]
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.util.Unserializer.toTypeMap: scala.collection.immutable.Map[String,phantm.types.Type]
phantm.types.TypeFlowAnalyzer.getSuperGlobal(name: String): phantm.types.Type ==> phantm.types.TypeFlowAnalyzer.ctx: phantm.phases.PhasesContext
phantm.cfg.Trees.BITWISEXOR.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.phases.ASTIntegrityChecks.execute: Unit ==> phantm.ast.ASTTraversal.traverse(visit: (phantm.ast.Trees.Tree, UserDataType) => (UserDataType, Boolean)): Unit
phantm.phases.ASTIntegrityChecks.execute: Unit ==> phantm.phases.ASTIntegrityChecks.visit(node: phantm.ast.Trees.Tree,ctx: phantm.phases.CheckContext): (phantm.phases.CheckContext, Boolean)
phantm.cfg.Trees.Cast.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Cast.to: phantm.ast.Trees.CastType
phantm.cfg.Trees.Cast.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Cast.e: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Cast.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.args: scala.collection.mutable.HashMap[String,phantm.symbols.ArgumentSymbol]
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.args: scala.collection.mutable.HashMap[String,phantm.symbols.ArgumentSymbol]
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.annotations.FunctionTypeAnnotation.annotateFromFT(from: phantm.annotations.FunctionTypeAnnotation): FunctionTypeAnnotation.this.type
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.annotations.TypeAnnotation.typ: phantm.types.Type
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.ArgumentSymbol.optional_$eq(x$1: Boolean): Unit
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.ArgumentSymbol.optional: Boolean
phantm.symbols.FunctionSymbol.importAPIFrom(fs: phantm.symbols.FunctionSymbol): Unit ==> phantm.symbols.FunctionSymbol.argList: List[(String, phantm.symbols.ArgumentSymbol)]
phantm.ast.Trees.MethodCall.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MethodCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodCall.obj: phantm.ast.Trees.Expression
phantm.ast.Trees.MethodCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodCall.name: phantm.ast.Trees.MethodRef
phantm.ast.Trees.MethodCall.productElement(x$1: Int): Any ==> phantm.ast.Trees.MethodCall.args: List[phantm.ast.Trees.CallArg]
phantm.util.Reporter.emitSummary: Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.util.Reporter.emitSummary: Unit ==> phantm.util.Reporter.errors: scala.collection.immutable.Map[Option[String],scala.collection.immutable.Set[Reporter.this.Error]]
phantm.util.Reporter.emitSummary: Unit ==> phantm.util.Reporter.Error.tags: Set[phantm.util.ErrorTag]
phantm.util.Reporter.emitSummary: Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.ast.Trees.MCClass.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.dataflow.Environment.<init>(): phantm.dataflow.Environment[E,S] ==> java.lang.Object.<init>(): Object
phantm.phases.SymContext.<init>(varScope: phantm.symbols.Scope,cl: Option[phantm.symbols.ClassSymbol],iface: Option[phantm.symbols.IfaceSymbol]): phantm.phases.SymContext ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.VariableClassProperty.<init>(cl: phantm.cfg.Trees.ClassRef,index: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.VariableClassProperty ==> phantm.cfg.Trees.Variable.<init>(): phantm.cfg.Trees.Variable
phantm.cfg.Trees.MethodCall.<init>(receiver: phantm.cfg.Trees.SimpleValue,id: phantm.ast.Trees.Identifier,params: List[phantm.cfg.Trees.SimpleValue]): phantm.cfg.Trees.MethodCall ==> phantm.cfg.Trees.SimpleValue.<init>(): phantm.cfg.Trees.SimpleValue
phantm.ast.ASTTraversal.<init>(root: phantm.ast.Trees.Tree,initCtx: UserDataType): phantm.ast.ASTTraversal[UserDataType] ==> java.lang.Object.<init>(): Object
phantm.symbols.Scope.lookupVariable(n: String): Option[phantm.symbols.VariableSymbol] ==> phantm.symbols.Scope.variables: scala.collection.mutable.HashMap[String,phantm.symbols.VariableSymbol]
phantm.cfg.EdgeImp.<init>(v1: phantm.cfg.VertexImp[L],lab: L,v2: phantm.cfg.VertexImp[L]): phantm.cfg.EdgeImp[L] ==> java.lang.Object.<init>(): Object
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> scala.Tuple3.<init>(_1: T1,_2: T2,_3: T3): (T1, T2, T3)
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.static_expr(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.non_empty_static_array_pair_list(n: phantm.parser.ParseNode): List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Expression, Boolean)] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.getSet(t1: phantm.types.Type,t2: phantm.types.Type): Set[phantm.types.Type]
phantm.types.TUnion.apply(t1: phantm.types.Type,t2: phantm.types.Type): phantm.types.Type ==> phantm.types.TUnion.<init>(types: Set[phantm.types.Type]): phantm.types.TUnion
phantm.phases.CallGraphPhase.flag(osym: Option[phantm.symbols.FunctionSymbol],inline: Boolean): Unit ==> phantm.annotations.FunctionAnnotation.shouldInline_$eq(x$1: Boolean): Unit
phantm.cfg.Trees.PHPTrue.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Closure.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Closure.productElement(x$1: Int): Any ==> phantm.ast.Trees.Closure.retref: Boolean
phantm.ast.Trees.Closure.productElement(x$1: Int): Any ==> phantm.ast.Trees.Closure.args: List[phantm.ast.Trees.ArgumentDecl]
phantm.ast.Trees.Closure.productElement(x$1: Int): Any ==> phantm.ast.Trees.Closure.body: phantm.ast.Trees.Statement
phantm.ast.Trees.Closure.productElement(x$1: Int): Any ==> phantm.ast.Trees.Closure.imports: List[phantm.ast.Trees.ArgumentDecl]
phantm.Settings.copy$default$22: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.anyInput: Boolean
phantm.phases.PhasesContext.copy$default$5: Option[phantm.symbols.Symbol] @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.symbol: Option[phantm.symbols.Symbol]
phantm.cfg.Trees.Isset.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.BooleanOr.productElement(x$1: Int): Any ==> phantm.ast.Trees.BooleanOr.lhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BooleanOr.productElement(x$1: Int): Any ==> phantm.ast.Trees.BooleanOr.rhs: phantm.ast.Trees.Expression
phantm.ast.Trees.BooleanOr.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.IsString.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.LabelDecl.<init>(name: phantm.ast.Trees.Identifier): phantm.ast.Trees.LabelDecl ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.Settings.copy$default$18: Option[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.exportCGPath: Option[String]
phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.inner_statement_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Block
phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.for_statement(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.typeFlowFilter: List[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.inlineMode: phantm.InlineMode
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.displayProgress: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.exportMGPath: Option[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.testsActive: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.displayIncludes: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.apis: List[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.includePaths: List[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.exportAPIPath: Option[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.summaryOnly: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.verbosity: Int
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.format: String
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.importAPI: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.onlyLint: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.resolveIncludes: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.exportCGPath: Option[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.compactErrors: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.dumps: List[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.anyInput: Boolean
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.printAfter: Set[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.dumpAfter: Set[String]
phantm.Settings.productElement(x$1: Int): Any ==> phantm.Settings.displayFixPoint: Boolean
phantm.cfg.Trees.IsArray.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.lookupField(index: String): phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.globalString: phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.lookup(index: phantm.types.ArrayKey): phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.entries: Map[phantm.types.ArrayKey,phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.fields: Map[String,phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.lookupField(index: String): phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TObjectRef.id: phantm.types.ObjectId
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TAnyClass.isSubtypeOf(cl2: phantm.types.ClassType): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.globalType: phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TUnion.types: Set[phantm.types.Type]
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TRealObject.ct: phantm.types.ClassType
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TArray.globalInt: phantm.types.Type
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TObjectTmp.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> phantm.types.TObjectRef.realObject(e: phantm.types.TypeEnvironment): phantm.types.TRealObject
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.asInstanceOf[T0]: T0
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.types.TypeLattice.leqT(x: phantm.types.Type,y: phantm.types.Type): Boolean ==> java.lang.Object.$eq$eq(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Equal.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Exit.value: Option[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Identical.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Smaller.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.SmallerEqual.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Empty.v: phantm.ast.Trees.Variable
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.CallArg.forceref: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.CallArg.value: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.FreshVariable.apply(prefix: String): phantm.cfg.Trees.TempID
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.BooleanAnd.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.BooleanOr.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.setPC(v: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Identical.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.BooleanOr.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.BooleanAnd.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.assumeProp(p: phantm.cfg.Trees.Property,vs: List[phantm.ast.Trees.Variable]): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Exit.value: Option[phantm.ast.Trees.Expression]
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Isset.vs: List[phantm.ast.Trees.Variable]
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.SmallerEqual.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Equal.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.PHPTrue.<init>(): phantm.cfg.Trees.PHPTrue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assign.<init>(variable: phantm.cfg.Trees.Variable,value: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assign
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.PHPLong.<init>(value: Long): phantm.cfg.Trees.PHPLong
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.FunctionCall.args: List[phantm.ast.Trees.CallArg]
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.newVertex: phantm.cfg.VertexImp[LabelType]
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.BooleanNot.rhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.goto(cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.Trees.Assume.<init>(lhs: phantm.cfg.Trees.SimpleValue,relOp: phantm.cfg.Trees.RelationalOperator,rhs: phantm.cfg.Trees.SimpleValue): phantm.cfg.Trees.Assume
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.PHPInteger.value: Long
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.expr(ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.SimpleValue
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.Smaller.lhs: phantm.ast.Trees.Expression
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.FunctionCall.name: phantm.ast.Trees.FunctionRef
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.ast.Trees.StaticFunctionRef.name: phantm.ast.Trees.NSIdentifier
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.exprStore(v: phantm.cfg.Trees.Variable,ex: phantm.ast.Trees.Expression): phantm.cfg.Trees.Statement
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ControlFlowGraph.exit: ControlFlowGraph.this.Vertex
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.Emit.statementCont(stat: phantm.cfg.Trees.Statement,cont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> phantm.cfg.ASTToCFG.FreshVariable.apply(prefix: String): phantm.cfg.Trees.TempID
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.asInstanceOf[T0]: T0
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.cfg.ASTToCFG.condExpr(ex: phantm.ast.Trees.Expression,falseCont: Vertex,trueCont: Vertex): Unit ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPTrue.<init>(): phantm.ast.Trees.PHPTrue
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Constant.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.namespace_name(n: phantm.parser.ParseNode,root: phantm.ast.Trees.NSRoot): phantm.ast.Trees.NSIdentifier
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Constant.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.Constant
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPFalse.<init>(): phantm.ast.Trees.PHPFalse
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPNull.<init>(): phantm.ast.Trees.PHPNull
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.static_constant(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.NSIdentifier.parts: List[String]
phantm.util.ErrorException.productElement(x$1: Int): Any ==> phantm.util.ErrorException.ntn: Int
phantm.util.ErrorException.productElement(x$1: Int): Any ==> phantm.util.ErrorException.etn: Int
phantm.util.ErrorException.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.util.ErrorException.productElement(x$1: Int): Any ==> phantm.util.ErrorException.en: Int
phantm.util.ErrorException.productElement(x$1: Int): Any ==> phantm.util.ErrorException.nn: Int
phantm.ast.STToAST.extends_from(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.extends_from(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.extends_from(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.fully_qualified_class_name(n: phantm.parser.ParseNode): phantm.ast.Trees.StaticClassRef
phantm.ast.STToAST.extends_from(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.StaticClassRef] ==> scala.Some.<init>(x: A): Some[A]
phantm.ast.STToAST.extends_from(n: phantm.parser.ParseNode): Option[phantm.ast.Trees.StaticClassRef] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.Trees.Switch.<init>(expr: phantm.ast.Trees.Expression,cases: List[(Option[phantm.ast.Trees.Expression], phantm.ast.Trees.Statement)]): phantm.ast.Trees.Switch ==> phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement
phantm.phases.PhasesContext.copy$default$1: List[String] @scala.annotation.unchecked.uncheckedVariance ==> phantm.phases.PhasesContext.files: List[String]
phantm.cfg.Trees.Assume.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Assume.relOp: phantm.cfg.Trees.RelationalOperator
phantm.cfg.Trees.Assume.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Assume.rhs: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Assume.productElement(x$1: Int): Any ==> phantm.cfg.Trees.Assume.lhs: phantm.cfg.Trees.SimpleValue
phantm.cfg.Trees.Assume.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.Break.productElement(x$1: Int): Any ==> phantm.ast.Trees.Break.level: phantm.ast.Trees.Expression
phantm.ast.Trees.Break.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.NSGlobal.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.Settings.copy$default$21: Boolean @scala.annotation.unchecked.uncheckedVariance ==> phantm.Settings.compactErrors: Boolean
phantm.ast.Trees.StaticFunctionRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticFunctionRef ==> phantm.ast.Trees.FunctionRef.<init>(): phantm.ast.Trees.FunctionRef
phantm.phases.PhasesRunner.<init>(reporter: phantm.util.Reporter): phantm.phases.PhasesRunner ==> java.lang.Object.<init>(): Object
phantm.ast.Trees.PHPInteger.<init>(value: Long): phantm.ast.Trees.PHPInteger ==> phantm.ast.Trees.Scalar.<init>(): phantm.ast.Trees.Scalar
phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.ast.Trees.StaticClassRef.<init>(name: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.StaticClassRef
phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.annotations.CommentAnnotation.annotateFromC(from: phantm.annotations.CommentAnnotation): CommentAnnotation.this.type
phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.ASTTransform.trStaticClassRef(scr: phantm.ast.Trees.StaticClassRef): phantm.ast.Trees.StaticClassRef ==> phantm.ast.ASTTransform.trNSId(nsid: phantm.ast.Trees.NSIdentifier): phantm.ast.Trees.NSIdentifier
phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol] ==> phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol]
phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol] ==> phantm.symbols.MethodSymbol.name: String
phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol] ==> phantm.symbols.ClassSymbol.methods: scala.collection.mutable.HashMap[String,phantm.symbols.MethodSymbol]
phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol] ==> phantm.symbols.ClassSymbol.parent: Option[phantm.symbols.ClassSymbol]
phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.MethodGraphGeneration.lookupParentMethod(cs: Option[phantm.symbols.ClassSymbol],ms: phantm.symbols.MethodSymbol): Option[phantm.symbols.MethodSymbol] ==> scala.Some.<init>(x: A): Some[A]
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.io.PrintStream.close(): Unit
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> java.lang.Exception.<init>(x$1: String): Exception
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.ast.STToAST.<init>(parser: phantm.parser.Parser,st: phantm.parser.ParseNode): phantm.ast.STToAST
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.helpers.ASTGraph.generateDotGraph(root: phantm.ast.Trees.Program,printStream: java.io.PrintStream): Unit
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Parser.parse: Option[phantm.parser.ParseNode]
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.ast.STToAST.getAST: phantm.ast.Trees.Program
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.parser.Parser.<init>(filename: String): phantm.parser.Parser
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.util.IncludeResolver.<init>(ast: phantm.ast.Trees.Program,ctx: phantm.phases.PhasesContext): phantm.util.IncludeResolver
phantm.helpers.ASTGraph.generate(input: String,printStream: java.io.PrintStream,ctx: phantm.phases.PhasesContext): Unit ==> phantm.ast.ASTTransform.transform: phantm.ast.Trees.Program
phantm.symbols.ArgumentSymbol.<init>(name: String,byref: Boolean,optional: Boolean): phantm.symbols.ArgumentSymbol ==> phantm.symbols.VariableSymbol.<init>(name: String): phantm.symbols.VariableSymbol
phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.Error.<init>(message: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Reporter.this.Error
phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean ==> phantm.util.Reporter.addError(e: Reporter.this.Error): Boolean
phantm.ast.Trees.VarClassRef.productElement(x$1: Int): Any ==> phantm.ast.Trees.VarClassRef.v: phantm.ast.Trees.Variable
phantm.ast.Trees.VarClassRef.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.cfg.Trees.NOTEQUALS.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.ASTSimpleTraversal.visit0(t: phantm.ast.Trees.Tree,ctx: phantm.ast.DummyContext): (phantm.ast.DummyContext, Boolean) ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.STToAST.variable_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.variable_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.object_property_method(op: phantm.parser.ParseNode,mon: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess
phantm.ast.STToAST.variable_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.variable_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.variable_property(n: phantm.parser.ParseNode): phantm.ast.Trees.ObjectAccess ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.Trees.Statement.<init>(): phantm.ast.Trees.Statement ==> phantm.ast.Trees.Tree.<init>(): phantm.ast.Trees.Tree
phantm.ast.Trees.Equal.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Equal ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.Trees.VoidExpr.<init>(): phantm.ast.Trees.VoidExpr ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Positional.previousPos: String
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.GlobalSymbols.classes: scala.collection.mutable.HashMap[String,phantm.symbols.ClassSymbol]
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.ClassSymbol.name: String
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.GlobalSymbols.registerClass(cs: phantm.symbols.ClassSymbol): Unit ==> phantm.symbols.GlobalSymbols.classes: scala.collection.mutable.HashMap[String,phantm.symbols.ClassSymbol]
phantm.annotations.SourceAnnotations.Parser.typedef: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.keyword(chars: String): StandardTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.typedef: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.util.parsing.combinator.syntactical.StdTokenParsers.ident: StdTokenParsers.this.Parser[String]
phantm.annotations.SourceAnnotations.Parser.typedef: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.annotations.SourceAnnotations.Parser.typedef: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> phantm.annotations.SourceAnnotations.Parser.utyp: phantm.annotations.SourceAnnotations.Parser.Parser[phantm.types.Type]
phantm.annotations.SourceAnnotations.Parser.typedef: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.ifaceList_$eq(x$1: List[(phantm.symbols.IfaceSymbol, phantm.ast.Trees.InterfaceDecl)]): Unit
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.StaticClassRef.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.symbols.Symbol.setUserland: Symbol.this.type
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.ifaceCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.InterfaceDecl]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.ifaceList: List[(phantm.symbols.IfaceSymbol, phantm.ast.Trees.InterfaceDecl)]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.interfacesToPass: List[phantm.ast.Trees.InterfaceDecl]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.util.Reporter.error(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.symbols.GlobalSymbols.lookupIface(n: String): Option[phantm.symbols.IfaceSymbol]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.ifaceCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.InterfaceDecl]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.ifaceCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.InterfaceDecl]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.ifaceCycleDetectionSet: scala.collection.mutable.HashSet[phantm.ast.Trees.InterfaceDecl]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.symbols.GlobalSymbols.lookupIface(n: String): Option[phantm.symbols.IfaceSymbol]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.symbols.IfaceSymbol.<init>(name: String,parents: List[phantm.symbols.IfaceSymbol]): phantm.symbols.IfaceSymbol
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.PhasesContext.globalSymbols: phantm.symbols.GlobalSymbols
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.InterfaceDecl.interfaces: List[phantm.ast.Trees.StaticClassRef]
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.util.Reporter.error$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.phases.CollectSymbols.pctx: phantm.phases.PhasesContext
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.InterfaceDecl.name: phantm.ast.Trees.NSIdentifier
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CollectSymbols.firstIfacePass0(id: phantm.ast.Trees.InterfaceDecl): Unit ==> phantm.symbols.GlobalSymbols.registerIface(is: phantm.symbols.IfaceSymbol): Unit
phantm.phases.CheckContext.productElement(x$1: Int): Any ==> phantm.phases.CheckContext.topLevel: Boolean
phantm.phases.CheckContext.productElement(x$1: Int): Any ==> phantm.phases.CheckContext.inCond: Boolean
phantm.phases.CheckContext.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.helpers.ASTGraph.emit(str: String): Unit ==> java.io.PrintStream.print(x$1: String): Unit
phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean ==> phantm.Settings.get: phantm.Settings
phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean ==> phantm.Settings.typeFlowFilter: List[String]
phantm.phases.TypeFlowAnalysis.filter(name: String): Boolean ==> phantm.Settings.typeFlowFilter: List[String]
phantm.annotations.SourceAnnotations.Parser.strToVarType(str: String): Option[(String, phantm.types.Type)] ==> scala.Some.<init>(x: A): Some[A]
phantm.annotations.SourceAnnotations.Parser.strToVarType(str: String): Option[(String, phantm.types.Type)] ==> scala.util.parsing.combinator.lexical.Scanners.Scanner.<init>(in: String): Scanners.this.Scanner
phantm.annotations.SourceAnnotations.Parser.strToVarType(str: String): Option[(String, phantm.types.Type)] ==> phantm.annotations.SourceAnnotations.Parser.typVar: phantm.annotations.SourceAnnotations.Parser.Parser[(String, phantm.types.Type)]
phantm.annotations.SourceAnnotations.Parser.strToVarType(str: String): Option[(String, phantm.types.Type)] ==> scala.util.parsing.combinator.syntactical.StandardTokenParsers.lexical: scala.util.parsing.combinator.lexical.StdLexical
phantm.cfg.Trees.POSTINC.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.helpers.STGraph.generateDotGraph(root: phantm.parser.ParseNode,printStream: java.io.PrintStream): Unit ==> phantm.helpers.STGraph.emit(str: String): Unit
phantm.helpers.STGraph.generateDotGraph(root: phantm.parser.ParseNode,printStream: java.io.PrintStream): Unit ==> phantm.helpers.STGraph.dotPrint(node: phantm.parser.ParseNode,id: Int): Unit
phantm.helpers.STGraph.generateDotGraph(root: phantm.parser.ParseNode,printStream: java.io.PrintStream): Unit ==> phantm.helpers.STGraph.getId: Int
phantm.helpers.STGraph.generateDotGraph(root: phantm.parser.ParseNode,printStream: java.io.PrintStream): Unit ==> phantm.helpers.STGraph.emit(str: String): Unit
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.symbols.ConstantSymbol.<init>(name: String,value: Option[phantm.ast.Trees.Scalar]): phantm.symbols.ConstantSymbol
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.symbols.GlobalSymbols.registerConstant(cs: phantm.symbols.ConstantSymbol): Unit
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.annotations.TypeAnnotation.typ_$eq(x$1: phantm.types.Type): Unit
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.Settings.verbosity: Int
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> scala.MatchError.<init>(obj: Any): MatchError
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.Settings.get: phantm.Settings
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.util.Reporter.notice$default$3: Set[phantm.util.ErrorTag] @scala.annotation.unchecked.uncheckedVariance
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> scala.Some.<init>(x: A): Some[A]
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.util.Reporter.notice(msg: String,pos: phantm.util.Positional,tags: Set[phantm.util.ErrorTag]): Boolean
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.symbols.GlobalSymbols.lookupConstant(n: String): Option[phantm.symbols.ConstantSymbol]
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.types.TStringLit.<init>(value: String): phantm.types.TStringLit
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.symbols.GlobalSymbols.lookupOrRegisterConstant(id: phantm.ast.Trees.NSIdentifier): phantm.symbols.ConstantSymbol ==> phantm.ast.Trees.NSIdentifier.value: String
phantm.phases.CFGGenerator.<init>(initCtx: phantm.phases.PhasesContext,node: phantm.ast.Trees.Tree): phantm.phases.CFGGenerator ==> phantm.ast.ASTSimpleTraversal.<init>(root: phantm.ast.Trees.Tree): phantm.ast.ASTSimpleTraversal
phantm.util.Reporter.<init>(mainFiles: List[String]): phantm.util.Reporter ==> java.lang.Object.<init>(): Object
phantm.cfg.Trees.PHPString.productElement(x$1: Int): Any ==> phantm.cfg.Trees.PHPString.value: String
phantm.cfg.Trees.PHPString.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.Trees.MethodCall.<init>(obj: phantm.ast.Trees.Expression,name: phantm.ast.Trees.MethodRef,args: List[phantm.ast.Trees.CallArg]): phantm.ast.Trees.MethodCall ==> phantm.ast.Trees.Expression.<init>(): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.parser.ParseNode): Positional.this.type
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.util.Positional.setPos(p: phantm.util.Positional): Positional.this.type
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.Concat.<init>(lhs: phantm.ast.Trees.Expression,rhs: phantm.ast.Trees.Expression): phantm.ast.Trees.Concat
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.encaps_var(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.Trees.PHPString.<init>(value: String): phantm.ast.Trees.PHPString
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.encaps_list(n: phantm.parser.ParseNode): phantm.ast.Trees.Expression ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Tuple3._1: T1
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Tuple2._2: T2
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.asInstanceOf[T0]: T0
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Some.x: A
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Tuple2.<init>(_1: T1,_2: T2): (T1, T2)
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Tuple2._1: T1
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> java.lang.Object.ne(x$1: AnyRef): Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Tuple3._2: T2
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Tuple3._3: T3
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> scala.Any.isInstanceOf[T0]: Boolean
phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)] ==> phantm.ast.ASTTraversal.addRec(el: Any,ctx: UserDataType): List[(phantm.ast.Trees.Tree, UserDataType)]
phantm.ast.Trees.CalledClass.<init>(): phantm.ast.Trees.CalledClass ==> phantm.ast.Trees.ClassRef.<init>(): phantm.ast.Trees.ClassRef
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(v: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices_$eq(x$1: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]): Unit
phantm.cfg.LabeledDirectedGraphImp.$plus$eq(v: LabeledDirectedGraphImp.this.Vertex): Unit ==> phantm.cfg.LabeledDirectedGraphImp.vertices: scala.collection.immutable.Set[phantm.cfg.VertexImp[LabelType]]
phantm.cfg.Trees.IsBool.productElement(x$1: Int): Any ==> java.lang.IndexOutOfBoundsException.<init>(x$1: String): IndexOutOfBoundsException
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement]
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode,num: Int): phantm.parser.ParseNode
phantm.ast.STToAST.use_declarations(n: phantm.parser.ParseNode): List[phantm.ast.Trees.Statement] ==> phantm.ast.STToAST.use_declaration(n: phantm.parser.ParseNode): phantm.ast.Trees.Statement
phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.childrenNames(node: phantm.parser.ParseNode): List[String]
phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.unspecified(n: phantm.parser.ParseNode): Nothing
phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.child(node: phantm.parser.ParseNode): phantm.parser.ParseNode
phantm.ast.STToAST.parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl] ==> phantm.ast.STToAST.non_empty_parameter_list(n: phantm.parser.ParseNode): List[phantm.ast.Trees.ArgumentDecl]
