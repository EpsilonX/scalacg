karim-air:scalabench karim$ java -cp callgraph-plugin.jar probe.CallGraphDiff -ff -switch local/dist/tca-this-super/kiama/callgraph.gxl.gzip local/dist/tca-super/kiama/callgraph.gxl.gzip 
java.lang.RuntimeException: Caught exception in parsing: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 1 of 1-byte UTF-8 sequence.
java.lang.RuntimeException: Caught exception in parsing: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 1 of 1-byte UTF-8 sequence.
Iteration: 1000 Flow: 0.28927549511316875
Iteration: 2000 Flow: 0.15827902861651216
Iteration: 3000 Flow: 0.08902995030507968
Iteration: 4000 Flow: 0.05833591635746084
Iteration: 5000 Flow: 0.02334104938271605
Iteration: 6000 Flow: 0.013356988898456108
Iteration: 7000 Flow: 0.00688247291955117
Iteration: 8000 Flow: 0.004337953357934535
Iteration: 9000 Flow: 0.001953125
===========================================================================
Missing entry points in local/dist/tca-this-super/kiama/callgraph.gxl.gzip:
===========================================================================
0.142578125 org.kiama.example.iswim.secd.SECDBase.MkUserException: productArity()
0.142822265625 org.kiama.example.iswim.secd.ConversionOps.ToInt: productArity()
0.1664707984453366 org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int)
0.1675452122036376 org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int)
0.18113980701319038 org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
0.18420691992402696 org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
0.18430468376364187 org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int)
0.18443714999203903 org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
0.18453106371649494 org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int)
0.1851003864995819 org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int)
0.18514508546678934 org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
0.1851799224891248 org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int)
0.18523184970438406 org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int)
0.18528245980074254 org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
0.1852989605466722 org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
0.18656677672908226 org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
0.1899527827689335 org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int)
0.19444444444444448 org.kiama.example.oberon0.L0.c.CAddExp: productIterator()
0.19665520630467626 org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
0.1998456790123457 org.kiama.example.oberon0.L3.c.CVoidType: productIterator()
0.2329395236884077 org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int)
0.24660255971704578 org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int)
0.24992 org.kiama.example.iswim.secd.ConversionOps.ToInt: toString()
0.3330078125 org.kiama.example.iswim.secd.SECDBase.MkUserException: productPrefix()
0.4993141289437586 org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: isDefinedAt(x1: Any)
0.7371129054249512 org.kiama.example.oberon0.L3.c.CAddrType: canEqual(x$1: Any)
0.7452357183449735 org.kiama.example.oberon0.L0.c.CLtExp: canEqual(x$1: Any)
0.7728650799152631 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
0.775606176090051 org.kiama.example.oberon0.L0.c.CMulExp: canEqual(x$1: Any)
0.7791180394804528 org.kiama.example.iswim.secd.ConversionOps.ToBoolean: canEqual(x$1: Any)
0.7867724676354595 org.kiama.example.iswim.secd.ConversionOps.ToInt: canEqual(x$1: Any)
0.7873026857011862 org.kiama.example.oberon0.L0.c.CGeExp: canEqual(x$1: Any)
0.790222417622061 org.kiama.example.oberon0.L0.c.CModExp: canEqual(x$1: Any)
0.7971840183866804 org.kiama.example.oberon0.L0.c.CNotExp: canEqual(x$1: Any)
0.7986834490740741 org.kiama.example.iswim.secd.SECDBase.MkUserException: canEqual(x$1: Any)
0.800315522035617 org.kiama.example.oberon0.L3.c.CAddrExp: canEqual(x$1: Any)
0.8083998456675053 org.kiama.example.oberon0.L0.c.CSubExp: canEqual(x$1: Any)
0.8086956665657985 org.kiama.example.oberon0.L0.c.CAddExp: canEqual(x$1: Any)
0.8098881869529974 org.kiama.example.oberon0.L0.c.CDivExp: canEqual(x$1: Any)
0.8108751143591497 org.kiama.example.oberon0.L0.c.CNeExp: canEqual(x$1: Any)
0.8108998202694048 org.kiama.example.oberon0.L0.c.COrExp: canEqual(x$1: Any)
0.8111740465175207 org.kiama.example.oberon0.L0.c.CGtExp: canEqual(x$1: Any)
0.8112669657075433 org.kiama.example.oberon0.L0.c.CEqExp: canEqual(x$1: Any)
0.8204529025940506 org.kiama.example.oberon0.L0.c.CLeExp: canEqual(x$1: Any)
0.9210123679715149 org.kiama.example.oberon0.L4.c.CRecordType: canEqual(x$1: Any)
0.9734429827442876 org.kiama.example.oberon0.L0.c.CAndExp: canEqual(x$1: Any)
0.9863281249999999 org.kiama.example.oberon0.L3.c.CVoidType: canEqual(x$1: Any)
0.998046875 org.kiama.example.oberon0.L0.c.CAndExp: hashCode()
0.9988986987555357 org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply()
0.9990234375 org.kiama.example.oberon0.L0.c.COrExp: hashCode()
1.0107421875 org.kiama.example.oberon0.L3.c.CVoidType: equals(x$1: Any)
1.0721391718688589 org.kiama.example.oberon0.L0.c.CAndExp: equals(x$1: Any)
1.1983868634259258 org.kiama.example.iswim.secd.SECDBase.MkUserException: equals(x$1: Any)
1.2115155339077504 org.kiama.example.iswim.secd.ConversionOps.ToInt: equals(x$1: Any)
1.218484760802469 org.kiama.example.iswim.secd.ConversionOps.ToBoolean: equals(x$1: Any)
1.2409140592283299 org.kiama.example.oberon0.L4.c.CRecordType: equals(x$1: Any)
1.2532877023420481 org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef)
1.265603074648089 org.kiama.example.oberon0.L3.c.CAddrExp: equals(x$1: Any)
1.279306056786194 org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any)
1.3178276031376166 org.kiama.example.oberon0.L0.c.CGtExp: equals(x$1: Any)
1.3183362230612177 org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any)
1.3187631870834626 org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any)
1.3190246472521483 org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any)
1.320282705044426 org.kiama.example.oberon0.L0.c.CAddExp: equals(x$1: Any)
1.3220058537885824 org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any)
1.3279954191449377 org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any)
1.3301194602423343 org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any)
1.3482718193882848 org.kiama.example.oberon0.L0.c.CDivExp: equals(x$1: Any)
1.3485960828478503 org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any)
1.3583949061072196 org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any)
1.3596173387944412 org.kiama.example.oberon0.L0.c.CModExp: equals(x$1: Any)
1.532633390567737 org.kiama.example.oberon0.L3.c.CAddrType: equals(x$1: Any)
1.9958043161996102 org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
1.9961151075922317 org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)
1.996762589660193 org.kiama.example.iswim.secd.StringOps.$anonfun: apply(c: Char)
2.490349658778688 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration)
2.9917263896462942 org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
3.132445812213498 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression)
3.343729473862803 org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field)
3.5534326148724156 org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block)
3.740001279272888 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement)
4.632939299315816 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo)
8.238754351150279 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(i: Int)
20.086792491688467 org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)
===========================================================================
Missing call edges in local/dist/tca-this-super/kiama/callgraph.gxl.gzip:
===========================================================================
0.0 org.kiama.example.lambda2.Reduce.$anonfun: apply() ===> org.kiama.example.lambda2.Par: beta()
0.142578125 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.iswim.secd.SECDBase.MkUserException: productArity()
0.142822265625 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.c.CRecordType: productArity()
0.1664707984453366 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int)
0.1675452122036376 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int)
0.18113980701319038 org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x2: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun: apply()
0.18420691992402696 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
0.18430468376364187 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CModExp: productElement(x$1: Int)
0.18443714999203903 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
0.18453106371649494 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.c.CDivExp: productElement(x$1: Int)
0.1851003864995819 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int)
0.18514508546678934 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
0.1851799224891248 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int)
0.18523184970438406 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CGtExp: productElement(x$1: Int)
0.18528245980074254 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
0.1852989605466722 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
0.18656677672908226 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
0.1899527827689335 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CAndExp: productElement(x$1: Int)
0.19444444444444448 org.kiama.output.PrettyPrinterBase: any(a: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: productIterator()
0.19665520630467626 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
0.1998456790123457 org.kiama.rewriting.NominalRewriter: fresh(a: org.kiama.rewriting.NominalAST.Name,t: Any) ===> org.kiama.example.iswim.secd.ConversionOps.ToInt: productIterator()
0.2329395236884077 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int)
0.24660255971704578 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int)
0.24725423366159066 org.kiama.util.Emitter: emitln(any: Any) ===> scala.collection.mutable.StringBuilder: toString()
0.24992 org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L0.c.CLeExp: toString()
0.25 org.kiama.rewriting.Rewriter.$anon: oneRewritable(r: org.kiama.rewriting.Rewritable) ===> scala.collection.mutable.StringBuilder: apply(index: Int)
0.3330078125 org.kiama.rewriting.NominalRewriter: alphaequiv(a1: Any,a2: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: productPrefix()
0.4993141289437586 org.kiama.rewriting.Rewriter.$anon: apply(t: Any) ===> org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: isDefinedAt(x1: Any)
0.5 org.kiama.example.oberon0.L1.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.L1.Parser: elsif()
0.75 org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.base.c.PrettyPrinter: arraydimensToDoc(t1: org.kiama.example.oberon0.base.c.CArrayType)
0.7559533138824587 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNotExp: exp()
0.7569888335432771 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L3.c.CAddrExp: exp()
0.7571347641737755 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLtExp: left()
0.7624127885300143 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CDivExp: left()
0.7654308195983786 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.COrExp: right()
0.767597584403818 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLeExp: left()
0.7691821842206201 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLtExp: right()
0.7705596357275625 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CModExp: left()
0.7728650799152631 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$4: org.kiama.example.oberon0.L0.source.Expression) ===> org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
0.7760106594251855 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNeExp: right()
0.7761663967081557 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAddExp: left()
0.7762322801391132 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CSubExp: left()
0.7769647864647515 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGtExp: right()
0.7774829248961694 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CEqExp: left()
0.7785670548085882 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGeExp: left()
0.7798094508770725 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGeExp: right()
0.7813476056307371 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CMulExp: right()
0.7839495494536889 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CDivExp: right()
0.7855075188534832 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CModExp: right()
0.790117046585087 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CLeExp: right()
0.7902201790187158 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CEqExp: right()
0.7934990333211742 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CGtExp: left()
0.7935154743137497 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CNeExp: left()
0.7937094773125496 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAddExp: right()
0.7940106696899937 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CSubExp: right()
0.800940345028789 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAndExp: left()
0.8030007325672914 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CMulExp: left()
0.8036618709737996 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.COrExp: left()
0.8187009182611683 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CAndExp: right()
0.8617983217592594 org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type)
0.9375 org.kiama.util.ParserUtilities.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) ===> scala.collection.mutable.StringBuilder: charAt(index: Int)
0.96875 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L3.c.CAddrExp: op()
0.9705239165393535 org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.output.PrettyPrinterBase: lterm(ds: Seq[PrettyPrinterBase.this.Doc],term: PrettyPrinterBase.this.Doc)
0.9921875 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.example.oberon0.L0.c.CBinaryExpression: op()
0.99609375 org.kiama.util.ParserUtilities.$anonfun: apply(in: scala.util.parsing.input.Reader[Char]) ===> scala.collection.mutable.StringBuilder: subSequence(start: Int,end: Int)
0.9988986987555357 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply()
0.9990234375 org.kiama.example.oberon0.L1.Parser.$anonfun.$anonfun: apply() ===> org.kiama.example.oberon0.L1.Parser: whileStatement()
1.133246527777778 org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L4.TypeAnalyser: isCompatible(tipe: TypeAnalyser.this.Type,exptype: TypeAnalyser.this.Type)
1.995338129110678 org.kiama.example.oberon0.L0.Desugarer: transform(m: org.kiama.example.oberon0.base.source.ModuleDecl) ===> org.kiama.example.oberon0.L0.Desugarer: uniquifyNames(m: org.kiama.example.oberon0.base.source.ModuleDecl)
1.9964088141918535 org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(nm: String) ===> org.kiama.example.iswim.driver.SECD: primTable()
2.0055415808695716 org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.StringOps: unescape(s: String)
2.9945512708048754 org.kiama.example.oberon0.L1.source.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L1.source.PrettyPrinter: ifToDoc(s: org.kiama.example.oberon0.L1.source.IfStatement)
3.30748600598975 org.kiama.example.oberon0.L0.TypeAnalyser: check(n: org.kiama.example.oberon0.base.source.SourceASTNode) ===> org.kiama.example.oberon0.L0.TypeAnalyser: exptype()
5.213813953636757 org.kiama.example.oberon0.base.c.PrettyPrinter: toDoc(n: org.kiama.example.oberon0.base.c.CASTNode) ===> org.kiama.example.oberon0.L4.c.PrettyPrinter: basetypeToDoc(t: org.kiama.example.oberon0.base.c.CType)
6.836217394433229 org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(d: org.kiama.example.oberon0.base.source.Declaration)
8.590829482079597 org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement) ===> org.kiama.example.oberon0.L3.CCodeGenerator: translate(s: org.kiama.example.oberon0.base.source.Statement)
29.91511283964181 org.kiama.output.ParenPrettyPrinter: toParenDoc(e: org.kiama.output.PrettyExpression) ===> org.kiama.output.ParenPrettyPrinter: bracket(inner: org.kiama.output.PrettyOperatorExpression,outer: org.kiama.output.PrettyOperatorExpression,side: org.kiama.output.Side)
===========================================================================
Number of reachable methods missing in local/dist/tca-this-super/kiama/callgraph.gxl.gzip: 407
===========================================================================