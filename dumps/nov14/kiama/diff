karim-air:scalabench karim$ java -cp callgraph-plugin.jar probe.CallGraphDiff -ff -switch local/dist/tca-this-super/kiama/callgraph.gxl.gzip local/dist/tca-super/kiama/callgraph.gxl.gzip 
java.lang.RuntimeException: Caught exception in parsing: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 1 of 1-byte UTF-8 sequence.
java.lang.RuntimeException: Caught exception in parsing: com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: Invalid byte 1 of 1-byte UTF-8 sequence.
Iteration: 1000 Flow: 1.0
Iteration: 2000 Flow: 0.7992478280749885
Iteration: 3000 Flow: 0.566358024691358
Iteration: 4000 Flow: 0.3794059087918713
Iteration: 5000 Flow: 0.3212448559670782
Iteration: 6000 Flow: 0.3112797817241576
Iteration: 7000 Flow: 0.28586060613496894
Iteration: 8000 Flow: 0.28805252664045145
Iteration: 9000 Flow: 0.24985096113452204
Iteration: 10000 Flow: 0.18110492568318404
Iteration: 11000 Flow: 0.1507784439413914
Iteration: 12000 Flow: 0.1602706118706707
Iteration: 13000 Flow: 0.12264801150977366
Iteration: 14000 Flow: 0.10266489142144417
Iteration: 15000 Flow: 0.09335007334711239
Iteration: 16000 Flow: 0.08114553111594566
Iteration: 17000 Flow: 0.07356589594557827
Iteration: 18000 Flow: 0.10872959317331538
Iteration: 19000 Flow: 0.08322418641696025
Iteration: 20000 Flow: 0.055406571937748464
Iteration: 21000 Flow: 0.04497671218851317
Iteration: 22000 Flow: 0.04000000000000003
Iteration: 23000 Flow: 0.041050801930607214
Iteration: 24000 Flow: 0.039379305245041275
Iteration: 25000 Flow: 0.030460509082041613
Iteration: 26000 Flow: 0.03008038982181563
Iteration: 27000 Flow: 0.023846584881896078
Iteration: 28000 Flow: 0.02087366386487653
Iteration: 29000 Flow: 0.021772423402824516
Iteration: 30000 Flow: 0.015625
Iteration: 31000 Flow: 0.014169743317028057
Iteration: 32000 Flow: 0.012697855206656642
Iteration: 33000 Flow: 0.013626618127048948
Iteration: 34000 Flow: 0.011121767214273211
Iteration: 35000 Flow: 0.008463855336058326
Iteration: 36000 Flow: 0.010044195858589643
Iteration: 37000 Flow: 0.007112909577100486
Iteration: 38000 Flow: 0.008290621937382116
Iteration: 39000 Flow: 0.0058969324414778305
Iteration: 40000 Flow: 0.004799225949733799
Iteration: 41000 Flow: 0.0046360997162545325
Iteration: 42000 Flow: 0.00390625
Iteration: 43000 Flow: 0.0037275360895554655
Iteration: 44000 Flow: 0.0034089182952673465
Iteration: 45000 Flow: 0.0028894219975037112
Iteration: 46000 Flow: 0.002321567877511176
Iteration: 47000 Flow: 0.0025725322959172826
Iteration: 48000 Flow: 0.001940204514490689
===========================================================================
Missing entry points in local/dist/tca-this-super/kiama/callgraph.gxl.gzip:
===========================================================================
0.0 scala.collection.mutable.ListBuffer: <init>()
0.02085528144595438 org.kiama.attribution.Decorators.Chain: apply(t: T)
0.142822265625 org.kiama.example.oberon0.base.c.CIntExp: productArity()
0.1816040454034453 org.kiama.example.til.TIL2_3.$anonfun: apply()
0.1917295360947909 org.kiama.example.oberon0.L4.SymbolTable.RecordType: productElement(x$1: Int)
0.1965199174354187 org.kiama.example.oberon0.base.source.IdnDef: productElement(x$1: Int)
0.1998456790123457 org.kiama.example.oberon0.L3.c.CVoidType: productIterator()
0.20534511277196651 org.kiama.example.til.AST.Str: productElement(x$1: Int)
0.20854942766156137 org.kiama.example.oberon0.L0.source.NamedType: productElement(x$1: Int)
0.21230507352681008 org.kiama.example.oberon0.L2.Desugarer.$anonfun.$anonfun: apply()
0.2123459898683192 org.kiama.example.oberon0.L0.SymbolTable.BuiltinType: productElement(x$1: Int)
0.21356220408143445 org.kiama.example.oberon0.L0.source.IdnExp: productElement(x$1: Int)
0.21886157040190013 org.kiama.example.oberon0.L4.SymbolTable.Field: productElement(x$1: Int)
0.21983073397007297 org.kiama.example.oberon0.L0.source.IntExp: productElement(x$1: Int)
0.22038908096547496 org.kiama.example.oberon0.L4.source.RecordTypeDef: productElement(x$1: Int)
0.2206944722274236 org.kiama.example.oberon0.base.source.IdnUse: productElement(x$1: Int)
0.22339339384338122 org.kiama.example.oberon0.base.source.Block: productElement(x$1: Int)
0.2266878115298341 org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int)
0.22950544268473286 org.kiama.example.oberon0.L0.source.NegExp: productElement(x$1: Int)
0.23089881875888243 org.kiama.example.oberon0.L0.source.NotExp: productElement(x$1: Int)
0.23701573915850646 org.kiama.attribution.Decorators.Chain: productElement(x$1: Int)
0.23819137965722575 org.kiama.example.oberon0.L4.source.FieldIdn: productElement(x$1: Int)
0.24017338434203742 org.kiama.example.oberon0.L3.c.CAddrType: productElement(x$1: Int)
0.2402113818876893 org.kiama.example.til.AST.Write: productElement(x$1: Int)
0.24043786362943814 org.kiama.example.oberon0.L0.c.CNamedType: productElement(x$1: Int)
0.2442921817505367 org.kiama.example.oberon0.L4.SymbolTable.ArrayType: productElement(x$1: Int)
0.24660255971704578 org.kiama.example.oberon0.L0.c.CNotExp: productElement(x$1: Int)
0.24698545753457593 org.kiama.example.til.AST.Read: productElement(x$1: Int)
0.2472246680320682 org.kiama.example.til.AST.Program: productElement(x$1: Int)
0.24960000000000002 org.kiama.example.oberon0.L4.source.FieldIdn: toString()
0.2497808442014051 org.kiama.example.oberon0.base.c.CInclude: productElement(x$1: Int)
0.25090142569150586 org.kiama.example.oberon0.L0.source.AddExp: productElement(x$1: Int)
0.2511225011445631 org.kiama.example.oberon0.base.c.CReturn: productElement(x$1: Int)
0.2513992762435996 org.kiama.example.oberon0.base.c.CIntExp: productElement(x$1: Int)
0.25296289630169333 org.kiama.example.oberon0.L0.source.MulExp: productElement(x$1: Int)
0.253031688657344 org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int)
0.25358636636992166 org.kiama.example.oberon0.L0.source.DivExp: productElement(x$1: Int)
0.25480794816211294 org.kiama.example.oberon0.L0.source.SubExp: productElement(x$1: Int)
0.2559360303478109 org.kiama.example.oberon0.L0.source.ModExp: productElement(x$1: Int)
0.2568270582776282 org.kiama.example.oberon0.L4.source.IndexExp: productElement(x$1: Int)
0.25816326719156335 org.kiama.example.oberon0.L3.SymbolTable.Procedure: productElement(x$1: Int)
0.25902583730566897 org.kiama.example.oberon0.L0.source.ConstDecl: productElement(x$1: Int)
0.26058126281820804 org.kiama.example.oberon0.L4.source.FieldList: productElement(x$1: Int)
0.26059832272282507 org.kiama.example.oberon0.L0.SymbolTable.Module: productElement(x$1: Int)
0.2612462184873399 org.kiama.example.oberon0.L0.SymbolTable.Variable: productElement(x$1: Int)
0.2620652317365287 org.kiama.example.oberon0.L0.SymbolTable.UserType: productElement(x$1: Int)
0.26216271481538417 org.kiama.example.oberon0.L0.SymbolTable.Constant: productElement(x$1: Int)
0.2629561057401126 org.kiama.example.oberon0.L2.source.Case: productElement(x$1: Int)
0.26623709840825743 org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc: productElement(x$1: Int)
0.2668259124234481 org.kiama.example.oberon0.L0.source.NeExp: productElement(x$1: Int)
0.2682096207283796 org.kiama.example.oberon0.L4.source.FieldExp: productElement(x$1: Int)
0.2682617178956918 org.kiama.example.oberon0.L0.source.GeExp: productElement(x$1: Int)
0.2692018548443652 org.kiama.example.oberon0.L4.source.ArrayTypeDef: productElement(x$1: Int)
0.2693382303202286 org.kiama.example.oberon0.L0.source.OrExp: productElement(x$1: Int)
0.27031556602329904 org.kiama.example.oberon0.L0.source.AndExp: productElement(x$1: Int)
0.27093103689714176 org.kiama.example.oberon0.L0.source.TypeDecl: productElement(x$1: Int)
0.2720451128100251 org.kiama.example.oberon0.L0.source.LtExp: productElement(x$1: Int)
0.2736991535520817 org.kiama.example.oberon0.L2.Desugarer.$anonfun: apply()
0.2742061571736591 org.kiama.example.oberon0.L0.source.EqExp: productElement(x$1: Int)
0.27482225371548147 org.kiama.example.oberon0.L3.source.Call: productElement(x$1: Int)
0.2753872590232237 org.kiama.example.oberon0.L0.source.Assignment: productElement(x$1: Int)
0.2777162476761196 org.kiama.example.oberon0.L0.source.GtExp: productElement(x$1: Int)
0.281864350494271 org.kiama.example.oberon0.L0.source.LeExp: productElement(x$1: Int)
0.29040563593358737 org.kiama.example.oberon0.L3.SymbolTable.Parameter: productElement(x$1: Int)
0.3003108030300205 org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
0.3031280846586987 org.kiama.example.oberon0.L2.source.CaseStatement: productElement(x$1: Int)
0.3053267049275983 org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int)
0.307952314582248 org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int)
0.3086578275667024 org.kiama.example.oberon0.L0.source.VarDecl: productElement(x$1: Int)
0.31058444349603614 org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int)
0.3114244163660128 org.kiama.example.oberon0.L2.source.MinMaxCond: productElement(x$1: Int)
0.31265135006560024 org.kiama.example.oberon0.L0.c.CSubExp: productElement(x$1: Int)
0.31265177263014055 org.kiama.example.til.AST.Div: productElement(x$1: Int)
0.3131103017863785 org.kiama.example.oberon0.base.c.CBlock: productElement(x$1: Int)
0.31826517235740753 org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
0.31847354245896264 org.kiama.example.til.AST.Mul: productElement(x$1: Int)
0.3194339995162147 org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
0.31944096756122614 org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
0.3194618716962605 org.kiama.example.til.AST.IfThen: productElement(x$1: Int)
0.3214743429832583 org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
0.3215892058960225 org.kiama.example.oberon0.L4.SymbolTable.RecordType: toString()
0.3220133066797509 org.kiama.example.oberon0.L3.source.FPSection: productElement(x$1: Int)
0.3250822887646754 org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
0.3251408300107952 org.kiama.example.oberon0.base.c.CVarDecl: productElement(x$1: Int)
0.32521644853486603 org.kiama.example.oberon0.base.source.ModuleDecl: productElement(x$1: Int)
0.32689008207785053 org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: productElement(x$1: Int)
0.32939273031207866 org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int)
0.3330078125 org.kiama.example.iswim.secd.SECDBase.MkUserException: productPrefix()
0.3443204745464819 org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
0.35108050242989663 org.kiama.example.til.AST.Str: toString()
0.3627230520543096 org.kiama.example.oberon0.L2.Lifter.$anonfun: apply()
0.3634699950564269 org.kiama.example.oberon0.L4.SymbolTable.Field: toString()
0.3811473909092715 org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: productElement(x$1: Int)
0.3937295507709098 org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int)
0.40013170441438306 org.kiama.example.oberon0.base.c.CFunctionDecl: productElement(x$1: Int)
0.4196745191071656 org.kiama.example.oberon0.L4.SymbolTable.ArrayType: toString()
0.42092777473625104 org.kiama.example.oberon0.L2.source.ForStatement: productElement(x$1: Int)
0.4239772135915275 org.kiama.example.til.AST.IfElse: productElement(x$1: Int)
0.4487415051368561 org.kiama.example.oberon0.L3.source.ProcDecl: productElement(x$1: Int)
0.4860290545125728 org.kiama.example.oberon0.L1.source.IfStatement: productElement(x$1: Int)
0.4993141289437586 org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply()
0.6002275099436871 org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply()
0.707290196875146 org.kiama.example.oberon0.L2.Desugarer.$anonfun: isDefinedAt(x1: Any)
0.7094097019713602 org.kiama.output.Fixity: <init>()
0.7217190280047179 org.kiama.example.oberon0.L3.c.CStrExp: canEqual(x$1: Any)
0.7276726502370607 org.kiama.example.til.AST.IfElse: canEqual(x$1: Any)
0.7279369750657562 org.kiama.example.oberon0.L4.SymbolTable.Field: canEqual(x$1: Any)
0.7298759694324343 org.kiama.example.oberon0.L0.source.MulExp: canEqual(x$1: Any)
0.7334163910966339 org.kiama.example.oberon0.L0.source.EqExp: canEqual(x$1: Any)
0.7340929112994745 org.kiama.example.til.AST.Program: canEqual(x$1: Any)
0.7344233585182633 org.kiama.example.oberon0.L2.Lifter.$anonfun.$anonfun: isDefinedAt(x1: Any)
0.7368138066971118 org.kiama.example.oberon0.L0.source.GeExp: canEqual(x$1: Any)
0.7371129054249512 org.kiama.example.oberon0.L0.c.CNegExp: canEqual(x$1: Any)
0.7372047393383621 org.kiama.example.oberon0.L0.source.ModExp: canEqual(x$1: Any)
0.7384003705534682 org.kiama.example.oberon0.L0.c.CNamedType: canEqual(x$1: Any)
0.738888622374108 org.kiama.example.til.AST.Write: canEqual(x$1: Any)
0.7389938421376383 org.kiama.example.oberon0.L3.c.CAddrType: canEqual(x$1: Any)
0.7422485978613165 org.kiama.example.oberon0.base.source.Block: canEqual(x$1: Any)
0.7458003926963317 org.kiama.example.oberon0.L2.source.CaseStatement: canEqual(x$1: Any)
0.7458269613224877 org.kiama.example.oberon0.L0.source.AddExp: canEqual(x$1: Any)
0.7493401172748795 org.kiama.example.oberon0.L4.SymbolTable.ArrayType: canEqual(x$1: Any)
0.7497815121121961 org.kiama.example.oberon0.L1.c.CIfElseStatement: canEqual(x$1: Any)
0.7539004035921135 org.kiama.example.picojava.Parser.$anonfun.$anonfun.$anonfun: apply()
0.7548734633194703 org.kiama.example.oberon0.L0.SymbolTable.UserType: canEqual(x$1: Any)
0.7562078252410027 org.kiama.example.oberon0.L4.source.FieldList: canEqual(x$1: Any)
0.757610719824605 org.kiama.example.oberon0.L0.SymbolTable.Variable: canEqual(x$1: Any)
0.7598794024132784 org.kiama.example.oberon0.L0.SymbolTable.BuiltinType: canEqual(x$1: Any)
0.7599977886207923 org.kiama.example.oberon0.L4.source.ArrayTypeDef: canEqual(x$1: Any)
0.7602087781864204 org.kiama.example.oberon0.base.source.IdnUse: canEqual(x$1: Any)
0.7604780736459984 org.kiama.example.oberon0.L2.source.ForStatement: canEqual(x$1: Any)
0.7610782546837088 org.kiama.example.oberon0.L4.source.RecordTypeDef: canEqual(x$1: Any)
0.7613932970153603 org.kiama.example.oberon0.L3.source.FPSection: canEqual(x$1: Any)
0.7686776619368348 org.kiama.example.oberon0.L4.source.FieldIdn: canEqual(x$1: Any)
0.7688171354314507 org.kiama.example.oberon0.L0.source.ConstDecl: canEqual(x$1: Any)
0.7688228881699624 org.kiama.example.oberon0.L0.source.OrExp: canEqual(x$1: Any)
0.7692311108269582 org.kiama.example.til.AST.Str: canEqual(x$1: Any)
0.770004260053461 org.kiama.example.oberon0.L3.SymbolTable.Parameter: canEqual(x$1: Any)
0.7702092784078213 org.kiama.example.oberon0.base.source.IdnDef: canEqual(x$1: Any)
0.7703224823269145 org.kiama.example.oberon0.L0.source.IdnExp: canEqual(x$1: Any)
0.7704294300913144 org.kiama.example.oberon0.L0.source.NamedType: canEqual(x$1: Any)
0.7716171700450379 org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc: canEqual(x$1: Any)
0.771811364050134 org.kiama.example.oberon0.L3.SymbolTable.Procedure: canEqual(x$1: Any)
0.7731379932656371 org.kiama.example.oberon0.L0.source.NegExp: canEqual(x$1: Any)
0.7735502340283452 org.kiama.example.oberon0.L4.source.IndexExp: canEqual(x$1: Any)
0.7766889364374071 org.kiama.example.oberon0.L0.source.NotExp: canEqual(x$1: Any)
0.7772424589957264 org.kiama.example.oberon0.L4.c.CIndexExp: canEqual(x$1: Any)
0.7774928700920152 org.kiama.example.oberon0.L4.SymbolTable.RecordType: canEqual(x$1: Any)
0.7788455139484837 org.kiama.example.oberon0.L0.SymbolTable.Constant: canEqual(x$1: Any)
0.7793293554785099 org.kiama.example.oberon0.L3.c.CCall: canEqual(x$1: Any)
0.7802536019191068 org.kiama.example.oberon0.L0.source.Assignment: canEqual(x$1: Any)
0.7802646906783395 org.kiama.example.oberon0.L0.c.CLeExp: canEqual(x$1: Any)
0.7820771286425762 org.kiama.example.oberon0.L2.source.Case: canEqual(x$1: Any)
0.7826860077215558 org.kiama.example.oberon0.L1.source.IfStatement: canEqual(x$1: Any)
0.7838408618150592 org.kiama.example.oberon0.L2.source.MinMaxCond: canEqual(x$1: Any)
0.7848382541218858 org.kiama.example.oberon0.L0.c.CAssignment: canEqual(x$1: Any)
0.7850283341481318 org.kiama.example.oberon0.L0.source.NeExp: canEqual(x$1: Any)
0.7880968489733533 org.kiama.example.oberon0.L0.c.CAddExp: canEqual(x$1: Any)
0.7893244956740548 org.kiama.example.oberon0.L0.source.TypeDecl: canEqual(x$1: Any)
0.7897788031937654 org.kiama.example.oberon0.L4.source.FieldExp: canEqual(x$1: Any)
0.7915035935625305 org.kiama.example.oberon0.L0.c.COrExp: canEqual(x$1: Any)
0.7925455544127303 org.kiama.example.oberon0.L0.c.CMulExp: canEqual(x$1: Any)
0.7942044045582315 org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: canEqual(x$1: Any)
0.7943994341563786 org.kiama.example.iswim.secd.ConversionOps.ToInt: canEqual(x$1: Any)
0.7947814861766672 org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: canEqual(x$1: Any)
0.7961856689483578 org.kiama.example.oberon0.L0.source.GtExp: canEqual(x$1: Any)
0.7968107708642733 org.kiama.example.oberon0.L3.source.ProcDecl: canEqual(x$1: Any)
0.7986834490740741 org.kiama.example.oberon0.L3.source.VarMode: canEqual(x$1: Any)
0.7992362366229179 org.kiama.example.oberon0.L0.source.LeExp: canEqual(x$1: Any)
0.8039301479353342 org.kiama.example.oberon0.base.c.CFunctionDecl: canEqual(x$1: Any)
0.8048109697410213 org.kiama.example.oberon0.L0.c.CLtExp: canEqual(x$1: Any)
0.8048129270723385 org.kiama.example.oberon0.L0.c.CNeExp: canEqual(x$1: Any)
0.8048187990662905 org.kiama.example.oberon0.L0.c.CInitDecl: canEqual(x$1: Any)
0.8062291658769425 org.kiama.example.oberon0.L0.c.CGeExp: canEqual(x$1: Any)
0.8079279925106542 org.kiama.example.imperative.Generator.$anonfun: apply()
0.8111600976265916 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression)
0.8125182993850318 org.kiama.example.oberon0.L0.c.CEqExp: canEqual(x$1: Any)
0.8129461418128763 org.kiama.example.oberon0.base.c.CVarDecl: canEqual(x$1: Any)
0.8163018422870085 org.kiama.example.oberon0.L4.c.CFieldExp: canEqual(x$1: Any)
0.8196881207712272 org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply()
0.8710326687746462 org.kiama.example.oberon0.L0.source.AndExp: canEqual(x$1: Any)
0.8777812103922121 org.kiama.example.oberon0.L0.source.LtExp: canEqual(x$1: Any)
0.8820230864099254 org.kiama.example.oberon0.L0.SymbolTable.Module: canEqual(x$1: Any)
0.8835218562106641 org.kiama.example.oberon0.base.c.CInclude: canEqual(x$1: Any)
0.8935605416486871 org.kiama.example.oberon0.L1.c.CWhileStatement: canEqual(x$1: Any)
0.8989251125448366 org.kiama.example.til.AST.Mul: canEqual(x$1: Any)
0.90134806190243 org.kiama.example.oberon0.L0.source.IntExp: canEqual(x$1: Any)
0.9075138187441176 org.kiama.example.til.TIL1_1.$anonfun.$anonfun.$anonfun.$anonfun: apply()
0.9092532380559673 org.kiama.example.oberon0.L3.source.Call: canEqual(x$1: Any)
0.9120933823818923 org.kiama.example.oberon0.base.c.CReturn: canEqual(x$1: Any)
0.9130575642410884 org.kiama.example.oberon0.base.c.CIntExp: canEqual(x$1: Any)
0.9131000743388443 org.kiama.attribution.Decorators.Chain: canEqual(x$1: Any)
0.9139267349586372 org.kiama.example.oberon0.L0.source.VarDecl: canEqual(x$1: Any)
0.9168700148506671 org.kiama.example.til.AST.Read: canEqual(x$1: Any)
0.9213168228059284 org.kiama.example.oberon0.base.source.ModuleDecl: canEqual(x$1: Any)
0.9397385258020391 org.kiama.example.oberon0.L0.source.SubExp: canEqual(x$1: Any)
0.9449699287429257 org.kiama.example.oberon0.L0.c.CTypeDef: canEqual(x$1: Any)
0.9673121159852599 org.kiama.example.oberon0.L0.source.DivExp: canEqual(x$1: Any)
0.9990234375 org.kiama.output.PrettyPrinterBase.$anonfun: apply(x$6: PrettyPrinterBase.this.Doc,x$7: PrettyPrinterBase.this.Doc)
1.0014773483878374 org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x2: A1,default: A1 => B1)
1.0531339791529803 org.kiama.example.lambda.Generator.$anonfun: apply()
1.0660020045946326 org.kiama.output.Prefix: <init>()
1.1160778560238374 org.kiama.example.oberon0.L4.SymbolTable.$anonfun: apply(x$1: SymbolTable.this.Field)
1.1431304722720035 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun.$anonfun: apply(x0$1: org.kiama.example.oberon0.L3.source.FPSection,x1$1: Int)
1.1651625369711993 org.kiama.example.oberon0.L4.NameAnalyser.$anonfun: apply(x$1: org.kiama.example.oberon0.L4.source.FieldList)
1.1983868634259258 org.kiama.example.oberon0.L3.source.VarMode: equals(x$1: Any)
1.2034002861368311 org.kiama.example.iswim.secd.ConversionOps.ToInt: equals(x$1: Any)
1.2209264007833485 org.kiama.output.Postfix: <init>()
1.2313524026378608 org.kiama.example.oberon0.base.Parser.$anonfun: apply(x0$1: List[org.kiama.example.oberon0.base.source.Statement])
1.3066391753581332 org.kiama.example.oberon0.base.source.IdnDef: equals(x$1: Any)
1.3078380165998826 org.kiama.example.oberon0.L2.Desugarer.$anonfun.$anonfun: apply(x$1: org.kiama.example.oberon0.L0.source.Expression)
1.3188593764300702 org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply()
1.3192324167379812 org.kiama.example.oberon0.L0.source.IntExp: equals(x$1: Any)
1.3220826976747526 org.kiama.example.oberon0.base.c.CIntExp: equals(x$1: Any)
1.324856337927745 org.kiama.example.oberon0.base.c.CReturn: equals(x$1: Any)
1.327194029674983 org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun: apply(x0$1: Parser.this.~[Parser.this.~[Option[List[org.kiama.example.oberon0.L0.source.ConstDecl]],Option[List[org.kiama.example.oberon0.L0.source.TypeDecl]]],Option[List[org.kiama.example.oberon0.L0.source.VarDecl]]])
1.3334007005218407 org.kiama.example.oberon0.L0.source.Assignment: apply(desig: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression)
1.3490930672963857 org.kiama.example.til.AST.Read: equals(x$1: Any)
1.349207393738162 org.kiama.example.oberon0.L0.source.NegExp: equals(x$1: Any)
1.3619095155608683 org.kiama.example.oberon0.L3.c.CDerefExp: equals(x$1: Any)
1.3749060447225532 org.kiama.example.oberon0.L0.source.NamedType: equals(x$1: Any)
1.380290673337415 org.kiama.example.oberon0.L4.Parser.$anonfun: apply(x$1: List[Option[org.kiama.example.oberon0.L4.source.FieldList]])
1.3838213502853296 org.kiama.example.til.AST.Str: equals(x$1: Any)
1.384777093512323 org.kiama.example.oberon0.L4.source.FieldIdn: equals(x$1: Any)
1.3881336527632653 org.kiama.example.oberon0.L0.source.IdnExp: equals(x$1: Any)
1.401364321084759 org.kiama.example.oberon0.L0.source.NotExp: equals(x$1: Any)
1.408298700745267 org.kiama.attribution.Decorators.Chain: equals(x$1: Any)
1.4109165003221193 org.kiama.example.oberon0.L4.SymbolTable.RecordType: equals(x$1: Any)
1.4297707092073426 org.kiama.example.oberon0.L4.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode)
1.4452040696577406 org.kiama.example.oberon0.L0.source.IdnExp: apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse)
1.456175862336165 org.kiama.util.ParserUtilities.$anonfun: apply(x0$11: Int,x1$1: Char)
1.46148357424215 org.kiama.example.oberon0.base.source.Block: equals(x$1: Any)
1.4639281489128317 org.kiama.example.oberon0.L0.source.NamedType: apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse)
1.4648225731631637 org.kiama.example.oberon0.L0.c.CTypeDef: equals(x$1: Any)
1.4649468460401949 org.kiama.example.oberon0.base.source.IdnDef: apply(ident: String)
1.469595230904568 org.kiama.example.oberon0.base.source.ModuleDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,block: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse)
1.469710826964375 org.kiama.example.oberon0.L0.SymbolTable.BuiltinType: equals(x$1: Any)
1.4730619745009754 org.kiama.example.oberon0.base.source.IdnUse: apply(ident: String)
1.4751253356917613 org.kiama.example.oberon0.L1.source.WhileStatement: apply(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block)
1.4755166880405999 org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun: apply(xo: Option[org.kiama.example.oberon0.L4.source.FieldList])
1.4872378827158357 org.kiama.example.oberon0.base.source.IdnUse: equals(x$1: Any)
1.4875443782706799 org.kiama.example.oberon0.L0.source.SubExp: equals(x$1: Any)
1.4900400999504662 org.kiama.example.oberon0.base.Parser.$anonfun: apply(x0$2: Parser.this.~[List[org.kiama.example.oberon0.base.source.Declaration],org.kiama.example.oberon0.base.source.Block])
1.4911574964359149 org.kiama.example.oberon0.L4.source.RecordTypeDef: equals(x$1: Any)
1.4975398915765699 org.kiama.example.oberon0.base.Parser.$anonfun.$anonfun.$anonfun: apply()
1.5003910712288822 org.kiama.example.oberon0.L0.source.VarDecl: apply(idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef)
1.5025792130422468 org.kiama.example.oberon0.L3.c.CStrExp: equals(x$1: Any)
1.5138450862283186 org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun: apply()
1.5155997501449232 org.kiama.example.oberon0.L4.SymbolTable.Field: equals(x$1: Any)
1.5193445066502969 org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun: apply(xo: Option[List[org.kiama.example.oberon0.base.source.Declaration with Serializable]])
1.529923386644494 org.kiama.example.til.AST.Program: equals(x$1: Any)
1.5318228824662543 org.kiama.example.oberon0.L0.c.CNotExp: equals(x$1: Any)
1.5473829047073728 org.kiama.example.oberon0.L0.source.DivExp: equals(x$1: Any)
1.5739607986255177 org.kiama.output.Infix: equals(x$1: Any)
1.574293065610624 org.kiama.example.til.AST.Write: equals(x$1: Any)
1.5748354300644136 org.kiama.example.oberon0.L2.source.ValCond: equals(x$1: Any)
1.5847600664360866 org.kiama.example.oberon0.L0.source.MulExp: equals(x$1: Any)
1.593836646838576 org.kiama.example.oberon0.L0.source.AddExp: equals(x$1: Any)
1.5940442974240259 org.kiama.example.oberon0.L0.source.IntExp: apply(v: Int)
1.6046877954152345 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun.$anonfun: apply(x0$3: String)
1.607579824006732 org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun: apply()
1.6150224752166467 org.kiama.example.oberon0.L0.source.GeExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
1.626322508834495 org.kiama.example.til.AST.Program: apply(ss: Seq[org.kiama.example.til.AST.Stat])
1.6268924244000131 org.kiama.example.oberon0.L0.source.ModExp: equals(x$1: Any)
1.6329765495066233 org.kiama.example.oberon0.L1.Parser.$anonfun.$anonfun: apply()
1.6345290826566623 org.kiama.example.oberon0.L4.SymbolTable.ArrayType: equals(x$1: Any)
1.6465184839263887 org.kiama.example.oberon0.L0.source.GeExp: equals(x$1: Any)
1.666197536651545 org.kiama.example.oberon0.L0.SymbolTable.UserType: equals(x$1: Any)
1.6668901145077246 org.kiama.example.oberon0.L0.source.LeExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
1.6713863463280065 org.kiama.example.oberon0.L4.source.FieldList: equals(x$1: Any)
1.6737104738896647 org.kiama.example.oberon0.L0.SymbolTable.Variable: equals(x$1: Any)
1.678504680739989 org.kiama.example.oberon0.L4.source.IndexExp: equals(x$1: Any)
1.6835010229563647 org.kiama.example.oberon0.L0.source.ConstDecl: equals(x$1: Any)
1.6881509173330467 org.kiama.example.oberon0.L0.source.OrExp: equals(x$1: Any)
1.7045804647422074 org.kiama.example.oberon0.base.Parser.$anonfun.$anonfun: apply()
1.7050993888356636 org.kiama.example.oberon0.L3.SymbolTable.Procedure: equals(x$1: Any)
1.7122125304112301 org.kiama.example.oberon0.L0.SymbolTable.Constant: equals(x$1: Any)
1.7188272562254059 org.kiama.example.oberon0.L0.source.AndExp: equals(x$1: Any)
1.7265404631479546 org.kiama.example.oberon0.L1.source.IfStatement: apply(cond: org.kiama.example.oberon0.L0.source.Expression,block: org.kiama.example.oberon0.base.source.Block,elsifs: List[org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)
1.7298300722398356 org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc: equals(x$1: Any)
1.729882576863278 org.kiama.example.oberon0.L0.source.NeExp: equals(x$1: Any)
1.7326870630628572 org.kiama.example.oberon0.L4.source.FieldExp: equals(x$1: Any)
1.7357689900390778 org.kiama.example.oberon0.L2.source.Case: equals(x$1: Any)
1.7510678904097552 org.kiama.example.oberon0.L0.source.TypeDecl: equals(x$1: Any)
1.76770847385452 org.kiama.example.oberon0.L4.source.ArrayTypeDef: equals(x$1: Any)
1.7697428008730298 org.kiama.example.oberon0.L0.source.LtExp: equals(x$1: Any)
1.784526454383621 org.kiama.example.oberon0.L0.source.GtExp: equals(x$1: Any)
1.793310639879395 org.kiama.example.oberon0.L0.source.LeExp: equals(x$1: Any)
1.7939428142664042 org.kiama.example.oberon0.L1.c.CWhileStatement: equals(x$1: Any)
1.799006030993861 org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(x0$3: org.kiama.example.oberon0.L0.source.TypeDef)
1.800879038810501 org.kiama.example.oberon0.L0.c.CLeExp: equals(x$1: Any)
1.8107575498993878 org.kiama.example.oberon0.L3.source.FPSection: equals(x$1: Any)
1.8343097108663284 org.kiama.example.oberon0.L0.source.AddExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
1.839090253156812 org.kiama.example.oberon0.L0.source.VarDecl: equals(x$1: Any)
1.8425247772778128 org.kiama.example.oberon0.base.source.ModuleDecl: equals(x$1: Any)
1.843975598480094 org.kiama.example.oberon0.L2.Parser.$anonfun.$anonfun: apply()
1.847087039833482 org.kiama.example.til.TIL1_1.$anonfun.$anonfun.$anonfun: apply()
1.8584876695336936 org.kiama.example.oberon0.L0.SymbolTable.Module: equals(x$1: Any)
1.8592787001246416 org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: equals(x$1: Any)
1.862290197419584 org.kiama.example.oberon0.L3.source.Call: equals(x$1: Any)
1.8644441464190429 org.kiama.example.oberon0.base.c.CArrayType: equals(x$1: Any)
1.8714489254121751 org.kiama.example.oberon0.L0.source.EqExp: equals(x$1: Any)
1.9028904921874408 org.kiama.example.oberon0.L0.c.CEqExp: equals(x$1: Any)
1.9046014234488524 org.kiama.example.oberon0.base.c.CVarDecl: equals(x$1: Any)
1.918252369450147 org.kiama.example.oberon0.L0.source.EqExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
1.9210458399355235 org.kiama.example.oberon0.L4.c.CFieldExp: equals(x$1: Any)
1.9478575103720726 org.kiama.example.oberon0.L0.c.CGeExp: equals(x$1: Any)
1.9498631172141625 org.kiama.example.oberon0.L0.c.CMulExp: equals(x$1: Any)
1.9512358224264565 org.kiama.example.oberon0.L0.c.CLtExp: equals(x$1: Any)
1.9512701861737183 org.kiama.example.oberon0.L0.c.CNeExp: equals(x$1: Any)
1.9513732774155055 org.kiama.example.oberon0.L0.c.CInitDecl: equals(x$1: Any)
1.9722379529068648 org.kiama.example.oberon0.L3.SymbolTable.Parameter: equals(x$1: Any)
1.9884663981370734 org.kiama.example.oberon0.L4.c.CIndexExp: equals(x$1: Any)
1.9945623937946948 org.kiama.example.til.AST.Mul: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp)
1.9947146467684433 org.kiama.example.picojava.AbstractSyntax.WhileStmt: apply(Condition: org.kiama.example.picojava.AbstractSyntax.Exp,Body: org.kiama.example.picojava.AbstractSyntax.Stmt)
1.9949651794395322 org.kiama.example.til.AST.IfElse: apply(e: org.kiama.example.til.AST.Exp,t: Seq[org.kiama.example.til.AST.Stat],f: Seq[org.kiama.example.til.AST.Stat])
1.9951061544152253 org.kiama.example.til.AST.Div: apply(l: org.kiama.example.til.AST.Exp,r: org.kiama.example.til.AST.Exp)
1.995468661495579 org.kiama.example.til.AST.Str: apply(s: String)
1.9958043161996102 org.kiama.example.picojava.AbstractSyntax.BooleanLiteral: apply(Value: String)
1.9962238845796492 org.kiama.example.til.AST.Read: apply(i: org.kiama.example.til.AST.Id)
1.9965035968330085 org.kiama.util.ParserUtilities.$anonfun: apply(x0$9: ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[ParserUtilities.this.~[A,B],C],D],E])
1.9966748684119293 org.kiama.example.oberon0.L3.c.CCall: equals(x$1: Any)
2.0089045974180295 org.kiama.example.oberon0.L2.source.MinMaxCond: equals(x$1: Any)
2.009003346826032 org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: equals(x$1: Any)
2.0160422100697604 org.kiama.example.oberon0.L1.source.WhileStatement: equals(x$1: Any)
2.01786728123092 org.kiama.example.oberon0.L0.source.Assignment: equals(x$1: Any)
2.017887754417155 org.kiama.example.oberon0.L0.c.CSubExp: equals(x$1: Any)
2.017889444675316 org.kiama.example.oberon0.base.c.CProgram: equals(x$1: Any)
2.0204066706239496 org.kiama.example.oberon0.L2.source.ForStatement: apply(idn: org.kiama.example.oberon0.L0.source.IdnExp,lower: org.kiama.example.oberon0.L0.source.Expression,upper: org.kiama.example.oberon0.L0.source.Expression,by: Option[org.kiama.example.oberon0.L0.source.Expression],block: org.kiama.example.oberon0.base.source.Block)
2.020506293309277 org.kiama.example.oberon0.L2.source.CaseStatement: apply(exp: org.kiama.example.oberon0.L0.source.Expression,cases: List[org.kiama.example.oberon0.L2.source.Case],optelse: Option[org.kiama.example.oberon0.base.source.Block])
2.024817426205764 org.kiama.example.oberon0.L2.source.Case: apply(conds: List[org.kiama.example.oberon0.L2.source.Condition],block: org.kiama.example.oberon0.base.source.Block)
2.0280336413459708 org.kiama.example.oberon0.L3.source.Call: apply(idnuse: org.kiama.example.oberon0.base.source.IdnUse,params: List[org.kiama.example.oberon0.L0.source.Expression])
2.043824005967003 org.kiama.example.oberon0.L0.source.AndExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.0638175249025563 org.kiama.example.oberon0.L4.source.FieldIdn: apply(ident: String)
2.0788907350805883 org.kiama.example.oberon0.L4.Parser.$anonfun: apply(x0$1: Parser.this.~[List[String],org.kiama.example.oberon0.L0.source.TypeDef])
2.094299153261908 org.kiama.example.oberon0.L4.source.FieldExp: apply(base: org.kiama.example.oberon0.L0.source.Expression,fieldname: org.kiama.example.oberon0.L4.source.FieldIdn)
2.0997854946090446 org.kiama.example.oberon0.L0.c.COrExp: equals(x$1: Any)
2.104853843353967 org.kiama.example.oberon0.L3.source.FPSection: apply(mode: org.kiama.example.oberon0.L3.source.Mode,idndefs: List[org.kiama.example.oberon0.base.source.IdnDef],tipe: org.kiama.example.oberon0.L0.source.TypeDef)
2.111534058622515 org.kiama.example.oberon0.L4.source.IndexExp: apply(base: org.kiama.example.oberon0.L0.source.Expression,exp: org.kiama.example.oberon0.L0.source.Expression)
2.1143613928007245 org.kiama.example.oberon0.L3.source.ProcDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,params: List[org.kiama.example.oberon0.L3.source.FPSection],body: org.kiama.example.oberon0.base.source.Block,idnuse: org.kiama.example.oberon0.base.source.IdnUse)
2.116792268265793 org.kiama.example.oberon0.L2.source.CaseStatement: equals(x$1: Any)
2.11872552577395 org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(cond: org.kiama.example.oberon0.L2.source.Condition)
2.1191454759602015 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.base.source.Identifier)
2.132186059982889 org.kiama.example.oberon0.L0.source.ConstDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,exp: org.kiama.example.oberon0.L0.source.Expression)
2.154540241526188 org.kiama.example.oberon0.L0.Desugarer.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1)
2.1547329440719896 org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(x0$1: TypeAnalyser.this.Type)
2.1675939209728705 org.kiama.example.oberon0.L0.source.LtExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.171060089689388 org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun: apply()
2.175221827273845 org.kiama.example.oberon0.L0.source.NeExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.1818090275305817 org.kiama.example.oberon0.L0.source.GtExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.191053163173751 org.kiama.example.oberon0.L4.source.RecordTypeDef: apply(fields: List[org.kiama.example.oberon0.L4.source.FieldList])
2.2052739274601616 org.kiama.example.oberon0.L0.source.TypeDecl: apply(idndef: org.kiama.example.oberon0.base.source.IdnDef,tipe: org.kiama.example.oberon0.L0.source.TypeDef)
2.265155959463495 org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(ei: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)
2.2695647691699503 org.kiama.example.oberon0.L0.source.MulExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.2956666666981826 org.kiama.example.til.AST.IfElse: equals(x$1: Any)
2.30667645660138 org.kiama.example.oberon0.L0.source.ModExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.321438273023019 org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x3: A1,default: A1 => B1)
2.333056095289851 org.kiama.example.oberon0.L2.source.ForStatement: equals(x$1: Any)
2.3339126652091635 org.kiama.example.oberon0.L0.source.OrExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.3395708784362883 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun.$anonfun: apply(fps: org.kiama.example.oberon0.L3.source.FPSection)
2.344707756135558 org.kiama.example.oberon0.L4.source.ArrayTypeDef: apply(size: org.kiama.example.oberon0.L0.source.Expression,tipe: org.kiama.example.oberon0.L0.source.TypeDef)
2.3615373736474576 org.kiama.example.oberon0.L0.source.SubExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.3743913850085168 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(fl: org.kiama.example.oberon0.L4.source.FieldList)
2.385387188793353 org.kiama.example.lambda.Generator.$anonfun.$anonfun: apply(sz: Int)
2.386751645022813 org.kiama.example.oberon0.base.c.CFunctionDecl: equals(x$1: Any)
2.4240203877821367 org.kiama.example.oberon0.L1.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block)
2.427366231815817 org.kiama.example.oberon0.L2.source.ValCond: apply(value: org.kiama.example.oberon0.L0.source.Expression)
2.428471805912669 org.kiama.example.oberon0.L0.source.NotExp: apply(exp: org.kiama.example.oberon0.L0.source.Expression)
2.4316570453698763 org.kiama.example.oberon0.L0.source.DivExp: apply(left: org.kiama.example.oberon0.L0.source.Expression,right: org.kiama.example.oberon0.L0.source.Expression)
2.4593049171002086 org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun.$anonfun: apply()
2.4777593965925755 org.kiama.example.oberon0.L2.Desugarer.$anonfun: apply(x0$1: org.kiama.example.oberon0.L2.source.Case)
2.483309857356927 org.kiama.example.oberon0.L1.c.CIfElseStatement: equals(x$1: Any)
2.4955827701495887 org.kiama.example.oberon0.L3.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: Int]x1: A1,default: A1 => B1)
2.5242929854596996 org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block)
2.537023192619149 org.kiama.example.iswim.secd.StringOps.$anonfun: apply(c: Char)
2.575883165798486 org.kiama.example.oberon0.L2.source.MinMaxCond: apply(minvalue: org.kiama.example.oberon0.L0.source.Expression,maxvalue: org.kiama.example.oberon0.L0.source.Expression)
2.57915564001946 org.kiama.example.oberon0.L0.source.NegExp: apply(exp: org.kiama.example.oberon0.L0.source.Expression)
2.6009722687301804 org.kiama.example.oberon0.L3.source.ProcDecl: equals(x$1: Any)
2.6089789423396534 org.kiama.example.oberon0.L0.CCodeGenerator.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.IdnDef)
2.6646066957801398 org.kiama.example.oberon0.L1.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
2.6664421419562463 org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun.$anonfun: apply()
2.773117473208644 org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression)
2.7924071117677403 org.kiama.example.lambda.Generator.$anonfun: apply(i: String)
2.7941003352565255 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(u: org.kiama.example.oberon0.base.source.IdnUse)
2.8032241100412647 org.kiama.example.oberon0.L1.source.IfStatement: equals(x$1: Any)
2.89260463426783 org.kiama.example.oberon0.L4.Parser.$anonfun: apply()
2.9519518670063563 org.kiama.example.imperative.Generator.$anonfun.$anonfun: apply(sz: Int)
2.990788268877003 org.kiama.util.ParserUtilities.$anonfun.$anonfun: apply(s: String)
2.9908129242548345 org.kiama.example.oberon0.L0.source.PrettyPrinter.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration)
2.9986170041605402 org.kiama.attribution.Attributable.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1)
3.023243958170788 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$2: org.kiama.example.oberon0.L0.source.Expression)
3.0732882955280085 org.kiama.example.oberon0.L1.Parser.$anonfun: apply()
3.0805778702473265 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun.$anonfun.$anonfun: apply(x$1: org.kiama.example.oberon0.base.source.IdnDef)
3.1072702156555803 org.kiama.example.imperative.Generator.$anonfun: apply(e: org.kiama.example.imperative.AST.Exp)
3.113008300464033 org.kiama.example.lambda.Generator.$anonfun: apply(l: org.kiama.example.lambda.AST.Exp)
3.12644053252826 org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
3.17677920275561 org.kiama.example.til.TIL1_1.$anonfun: apply()
3.2086034295983374 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.base.source.IdnUse)
3.273662501349896 org.kiama.example.oberon0.L2.Desugarer.$anonfun: apply(n: org.kiama.example.oberon0.L2.source.Condition)
3.330832016493724 org.kiama.example.picojava.Parser.$anonfun.$anonfun: apply()
3.3844410528989877 org.kiama.example.oberon0.L2.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
3.3980426469278067 org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(kase: org.kiama.example.oberon0.L2.source.Case)
3.4125909787069024 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x2: A1,default: A1 => B1)
3.427705964118688 org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(u: org.kiama.example.oberon0.base.source.IdnUse)
3.574876694125999 org.kiama.example.oberon0.L3.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode)
3.7434223294397673 org.kiama.example.oberon0.L2.Lifter.$anonfun.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1)
3.925401172080441 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$4: org.kiama.example.oberon0.L0.source.Expression)
4.152401871012209 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(in: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]])
4.153664915817969 org.kiama.example.oberon0.L2.NameAnalyser.$anonfun: apply(x0$1: org.kiama.example.oberon0.L0.source.Expression)
4.174452932074998 org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement)
4.275925390010448 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(out: org.kiama.example.oberon0.base.source.SourceASTNode => scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]])
4.380624235969078 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(n: org.kiama.example.oberon0.L0.source.Expression)
4.388391030270296 org.kiama.example.oberon0.L3.c.PrettyPrinter.$anonfun: apply(e: org.kiama.output.PrettyExpression)
4.558850647620026 org.kiama.example.imperative.Generator.$anonfun: apply(v: org.kiama.example.imperative.AST.Var)
4.575923937893912 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(s: org.kiama.example.oberon0.base.source.Statement)
4.635257752815207 org.kiama.example.oberon0.L3.TypeAnalyser.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression)
4.826550438063171 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$1: org.kiama.example.oberon0.L0.source.Expression)
4.854343204188155 org.kiama.example.oberon0.L0.TypeAnalyser.$anonfun: apply(x0$2: org.kiama.example.oberon0.L0.source.Expression)
4.8757006812208505 org.kiama.example.oberon0.L0.Parser.$anonfun: apply()
4.923107093442139 org.kiama.example.imperative.Generator.$anonfun: apply(l: org.kiama.example.imperative.AST.Exp)
4.934265219250359 org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun: apply()
4.9684969088399 org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(b: org.kiama.example.oberon0.base.source.Block)
5.0608908518269144 org.kiama.example.picojava.Parser.$anonfun: apply()
5.353351928679967 org.kiama.example.imperative.Generator.$anonfun: apply(len: Int)
5.360386243630669 org.kiama.example.oberon0.base.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode)
5.401185861579321 org.kiama.example.oberon0.L3.Parser.$anonfun: apply()
5.4674118798302604 org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode)
5.477438102590072 org.kiama.example.oberon0.L4.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.Field)
5.584151214475715 org.kiama.example.oberon0.L0.source.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.source.SourceASTNode)
5.637116091260861 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$4: org.kiama.example.oberon0.L0.source.Expression)
5.677995092654051 org.kiama.example.oberon0.L2.Parser.$anonfun: apply()
5.993422559233947 org.kiama.example.oberon0.L2.source.PrettyPrinter.$anonfun: apply(e: org.kiama.example.oberon0.L0.source.Expression)
6.044202668219166 org.kiama.example.til.TIL1_1.$anonfun.$anonfun: apply()
6.139816809017778 org.kiama.example.oberon0.L4.c.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.c.CASTNode)
6.344202730206456 org.kiama.example.oberon0.base.c.PrettyPrinter.$anonfun: apply(n: org.kiama.example.oberon0.base.c.CASTNode)
6.879187203216796 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(x0$1: CCodeGenerator.this.ParamInfo)
7.0079229139448085 org.kiama.example.oberon0.L2.Desugarer.$anonfun: applyOrElse([A1, B1 >: Any]x2: A1,default: A1 => B1)
7.174058987026398 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration)
7.453816800797458 org.kiama.example.oberon0.L4.TypeAnalyser.$anonfun: apply(x0$2: org.kiama.example.oberon0.L0.source.TypeDef)
7.511284635439832 org.kiama.example.oberon0.base.CCodeGenerator.$anonfun: apply(d: org.kiama.example.oberon0.base.source.Declaration)
8.30365821276108 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$3: org.kiama.example.oberon0.L0.source.Expression)
10.551560285907911 org.kiama.example.oberon0.base.Driver.$anonfun: apply(arg: String)
12.836086773440044 org.kiama.example.oberon0.L3.CCodeGenerator.$anonfun: apply(i: Int)
13.243129300853926 org.kiama.example.oberon0.L2.Desugarer.$anonfun: applyOrElse([A1, B1 >: Any]x1: A1,default: A1 => B1)
13.70758138188766 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: applyOrElse([A1 <: org.kiama.example.oberon0.base.source.SourceASTNode, B1 >: scala.collection.immutable.Stack[scala.collection.immutable.Map[String,NameAnalyser.this.Entity]]]x1: A1,default: A1 => B1)
15.58667818204968 org.kiama.example.oberon0.L0.NameAnalyser.$anonfun: apply(x0$1: org.kiama.example.oberon0.base.source.Identifier)
16.801409381971457 org.kiama.example.oberon0.base.Analyser.$anonfun: apply(child: org.kiama.attribution.Attributable)
22.8932739315702 org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply(x$3: org.kiama.example.oberon0.L0.source.Expression, org.kiama.example.oberon0.base.source.Block)
48.121154051318186 org.kiama.example.oberon0.L3.source.PrettyPrinter.$anonfun: apply(e: org.kiama.output.PrettyExpression)
===========================================================================
Missing call edges in local/dist/tca-this-super/kiama/callgraph.gxl.gzip:
===========================================================================
0.0 org.kiama.example.lambda2.Reduce.$anonfun: apply() ===> org.kiama.example.lambda2.Par: beta()
0.02085528144595438 org.kiama.example.lambda2.Par.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x3: A1,default: A1 => B1) ===> org.kiama.attribution.Decorators.Chain: apply(t: T)
0.142822265625 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.base.c.CStrType: productArity()
0.16659725114535615 org.kiama.rewriting.Rewriter.Term: unapply(t: Any) ===> scala.util.parsing.combinator.Parsers.Error: productArity()
0.1816040454034453 org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x7: A1,default: A1 => B1) ===> org.kiama.attribution.Attributable.$anonfun: apply()
0.1917295360947909 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType: productElement(x$1: Int)
0.1965199174354187 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.base.source.IdnDef: productElement(x$1: Int)
0.1998456790123457 org.kiama.rewriting.NominalRewriter: fv(t: Any) ===> org.kiama.example.oberon0.L0.source.OrExp: productIterator()
0.20534511277196651 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.til.AST.Str: productElement(x$1: Int)
0.20854942766156137 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.source.NamedType: productElement(x$1: Int)
0.21230507352681008 org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x1: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun.$anonfun: apply()
0.2123459898683192 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.SymbolTable.BuiltinType: productElement(x$1: Int)
0.21356220408143445 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.source.IdnExp: productElement(x$1: Int)
0.21886157040190013 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.SymbolTable.Field: productElement(x$1: Int)
0.21983073397007297 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.source.IntExp: productElement(x$1: Int)
0.22038908096547496 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.source.RecordTypeDef: productElement(x$1: Int)
0.2206944722274236 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.base.source.IdnUse: productElement(x$1: Int)
0.22339339384338122 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.base.source.Block: productElement(x$1: Int)
0.2266878115298341 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.CTypeDef: productElement(x$1: Int)
0.22950544268473286 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.source.NegExp: productElement(x$1: Int)
0.23089881875888243 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.NotExp: productElement(x$1: Int)
0.23701573915850646 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.attribution.Decorators.Chain: productElement(x$1: Int)
0.23819137965722575 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.source.FieldIdn: productElement(x$1: Int)
0.24017338434203742 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L2.source.ValCond: productElement(x$1: Int)
0.2402113818876893 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.til.AST.Write: productElement(x$1: Int)
0.24043786362943814 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.output.Infix: productElement(x$1: Int)
0.2442921817505367 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType: productElement(x$1: Int)
0.24660255971704578 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L3.c.CAddrExp: productElement(x$1: Int)
0.24698545753457593 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.til.AST.Read: productElement(x$1: Int)
0.2472246680320682 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.til.AST.Program: productElement(x$1: Int)
0.24918038352237395 org.kiama.util.Emitter: emitln(any: Any) ===> scala.collection.mutable.StringBuilder: toString()
0.24960000000000002 org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.oberon0.L2.source.CaseStatement: toString()
0.2497808442014051 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CRecordType: productElement(x$1: Int)
0.25090142569150586 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.AddExp: productElement(x$1: Int)
0.2511225011445631 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CReturn: productElement(x$1: Int)
0.2513992762435996 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.base.c.CIntExp: productElement(x$1: Int)
0.25296289630169333 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.MulExp: productElement(x$1: Int)
0.253031688657344 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.c.CStrExp: productElement(x$1: Int)
0.25358636636992166 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.source.DivExp: productElement(x$1: Int)
0.25480794816211294 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.source.SubExp: productElement(x$1: Int)
0.2559360303478109 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.ModExp: productElement(x$1: Int)
0.2568270582776282 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L4.source.IndexExp: productElement(x$1: Int)
0.25816326719156335 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.SymbolTable.Procedure: productElement(x$1: Int)
0.25902583730566897 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.source.ConstDecl: productElement(x$1: Int)
0.26058126281820804 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.source.FieldList: productElement(x$1: Int)
0.26059832272282507 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.SymbolTable.Module: productElement(x$1: Int)
0.2612462184873399 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.SymbolTable.Variable: productElement(x$1: Int)
0.2620652317365287 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.SymbolTable.UserType: productElement(x$1: Int)
0.26216271481538417 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.SymbolTable.Constant: productElement(x$1: Int)
0.2629561057401126 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L2.source.Case: productElement(x$1: Int)
0.26623709840825743 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.SymbolTable.BuiltinProc: productElement(x$1: Int)
0.2668259124234481 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.source.NeExp: productElement(x$1: Int)
0.2682096207283796 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.source.FieldExp: productElement(x$1: Int)
0.2682617178956918 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.GeExp: productElement(x$1: Int)
0.2692018548443652 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L4.source.ArrayTypeDef: productElement(x$1: Int)
0.2693382303202286 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.source.OrExp: productElement(x$1: Int)
0.27031556602329904 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.source.AndExp: productElement(x$1: Int)
0.27093103689714176 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.TypeDecl: productElement(x$1: Int)
0.2720451128100251 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.LtExp: productElement(x$1: Int)
0.2736991535520817 org.kiama.example.lambda2.AST.$anonfun: applyOrElse([A1, B1 >: org.kiama.rewriting.Rewriter.Strategy]x5: A1,default: A1 => B1) ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun: apply()
0.2742061571736591 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.source.EqExp: productElement(x$1: Int)
0.27482225371548147 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L3.source.Call: productElement(x$1: Int)
0.2753872590232237 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.Assignment: productElement(x$1: Int)
0.2777162476761196 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.source.GtExp: productElement(x$1: Int)
0.281864350494271 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.LeExp: productElement(x$1: Int)
0.29040563593358737 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L3.SymbolTable.Parameter: productElement(x$1: Int)
0.3003108030300205 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.c.COrExp: productElement(x$1: Int)
0.3031280846586987 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L2.source.CaseStatement: productElement(x$1: Int)
0.3053267049275983 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CFieldExp: productElement(x$1: Int)
0.307952314582248 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L4.c.CIndexExp: productElement(x$1: Int)
0.3086578275667024 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L0.source.VarDecl: productElement(x$1: Int)
0.31058444349603614 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L3.c.CCall: productElement(x$1: Int)
0.3114244163660128 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L2.source.MinMaxCond: productElement(x$1: Int)
0.31265135006560024 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CAddExp: productElement(x$1: Int)
0.31265177263014055 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CProgram: productElement(x$1: Int)
0.3131103017863785 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L1.source.WhileStatement: productElement(x$1: Int)
0.31826517235740753 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CGeExp: productElement(x$1: Int)
0.31847354245896264 org.kiama.rewriting.Rewriter.$anon: someProduct(p: Product) ===> org.kiama.example.til.AST.Mul: productElement(x$1: Int)
0.3194339995162147 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CLtExp: productElement(x$1: Int)
0.31944096756122614 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CNeExp: productElement(x$1: Int)
0.3194618716962605 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.til.AST.IfThen: productElement(x$1: Int)
0.3214743429832583 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CMulExp: productElement(x$1: Int)
0.3215892058960225 org.kiama.output.PrettyPrinterBase: value(v: Any) ===> org.kiama.example.oberon0.L4.SymbolTable.RecordType: toString()
0.3220133066797509 org.kiama.rewriting.Rewriter.$anon: oneProduct(p: Product) ===> org.kiama.example.oberon0.L3.source.FPSection: productElement(x$1: Int)
0.3250822887646754 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L0.c.CEqExp: productElement(x$1: Int)
0.3251408300107952 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.base.c.CVarDecl: productElement(x$1: Int)
0.32521644853486603 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.base.source.ModuleDecl: productElement(x$1: Int)
0.32689008207785053 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L3.SymbolTable.ParamInfo: productElement(x$1: Int)
0.32939273031207866 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.L1.c.CWhileStatement: productElement(x$1: Int)
0.3330078125 org.kiama.rewriting.NominalRewriter: alphaequiv(a1: Any,a2: Any) ===> org.kiama.example.oberon0.L0.c.CAddExp: productPrefix()
0.3443204745464819 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L0.c.CLeExp: productElement(x$1: Int)
0.35108050242989663 org.kiama.util.Emitter: emit(any: Any) ===> org.kiama.example.til.AST.Str: toString()
0.3627230520543096 org.kiama.example.lambda2.ParLazy.$anonfun.$anonfun.$anonfun.$anonfun: apply() ===> org.kiama.example.oberon0.L2.Lifter.$anonfun: apply()
0.3634699950564269 org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L4.SymbolTable.Field: toString()
0.3811473909092715 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L0.SymbolTable.IntegerValue: productElement(x$1: Int)
0.3937295507709098 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L1.c.CIfElseStatement: productElement(x$1: Int)
0.40013170441438306 org.kiama.rewriting.Rewriter.$anon: allProduct(p: Product) ===> org.kiama.example.oberon0.base.c.CFunctionDecl: productElement(x$1: Int)
0.4196745191071656 org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.example.oberon0.L4.SymbolTable.ArrayType: toString()
0.42092777473625104 org.kiama.rewriting.Rewriter.Term.$anonfun: apply(i: Int) ===> org.kiama.example.oberon0.L2.source.ForStatement: productElement(x$1: Int)
0.4239772135915275 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.til.AST.IfElse: productElement(x$1: Int)
0.4487415051368561 org.kiama.rewriting.NominalRewriter.HasVar: unapply(t: Product) ===> org.kiama.example.oberon0.L3.source.ProcDecl: productElement(x$1: Int)
0.4860290545125728 org.kiama.rewriting.Rewriter.$anon: congruenceProduct(p: Product,ss: Seq[Rewriter.this.Strategy]) ===> org.kiama.example.oberon0.L1.source.IfStatement: productElement(x$1: Int)
0.4993141289437586 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply()
0.57861506766836 org.kiama.attribution.Decorators.$anonfun: apply(t: T) ===> org.kiama.attribution.Decorators: out()
0.6002275099436871 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply()
0.6135770735183108 org.kiama.attribution.Decorators.$anonfun: apply(t: T) ===> org.kiama.attribution.Decorators: in()
0.707290196875146 org.kiama.rewriting.Rewriter.$anon: apply(t: Any) ===> org.kiama.example.oberon0.L2.Desugarer.$anonfun: isDefinedAt(x1: Any)
0.7199434463055391 org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.util.ParserUtilities: result([T]v: )
0.7344233585182633 org.kiama.rewriting.Rewriter.$anon: apply(t: Any) ===> org.kiama.example.oberon0.L2.Lifter.$anonfun.$anonfun: isDefinedAt(x1: Any)
0.7539004035921135 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.picojava.Parser.$anonfun.$anonfun.$anonfun: apply()
0.7675753237196717 org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.base.Parser: statementSequence()
0.8079279925106542 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.imperative.Generator.$anonfun: apply()
0.8196881207712272 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun.$anonfun: apply()
0.9075138187441176 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.til.TIL1_1.$anonfun.$anonfun.$anonfun.$anonfun: apply()
0.9352054364578289 org.kiama.attribution.Decorators.$anonfun: apply(t: T) ===> org.kiama.attribution.Decorators: error(t: T)
0.9654328063029021 org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.base.Parser: idnuse()
0.9990234375 org.kiama.attribution.Decorators.$anonfun: apply(t: T) ===> org.kiama.attribution.Decorators: outfunc()
1.0531339791529803 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.lambda.Generator.$anonfun: apply()
1.0577806882315899 org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.base.Parser: idndef()
1.2509887040228773 org.kiama.attribution.Decorators.$anonfun: apply(t: T) ===> org.kiama.attribution.Decorators: outdflt(t: T)
1.3188593764300702 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L1.CCodeGenerator.$anonfun: apply()
1.4937867516209882 org.kiama.util.Emitter: emitln(any: Any) ===> org.kiama.util.Environments.Named: toString()
1.4975398915765699 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.base.Parser.$anonfun.$anonfun.$anonfun: apply()
1.5138450862283186 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun: apply()
1.607579824006732 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun.$anonfun: apply()
1.6170010617843935 org.kiama.attribution.Decorators.$anonfun: apply(t: T) ===> org.kiama.attribution.Decorators: indflt(t: T)
1.6329765495066233 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L1.Parser.$anonfun.$anonfun: apply()
1.7045804647422074 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.base.Parser.$anonfun.$anonfun: apply()
1.843975598480094 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L2.Parser.$anonfun.$anonfun: apply()
1.847087039833482 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.til.TIL1_1.$anonfun.$anonfun.$anonfun: apply()
1.9374669827425313 org.kiama.example.til.Main.$anonfun: apply(arg: String) ===> org.kiama.example.til.ParsingMain: process(reader: java.io.Reader)
1.9952735409242142 org.kiama.example.iswim.secd.SECDBase.$anonfun.$anonfun: apply(nm: String) ===> org.kiama.example.iswim.driver.SECD: primTable()
1.9958043161996102 org.kiama.util.RegexCompiler: makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter) ===> org.kiama.example.oberon0.base.Parser: parser()
1.9973924914417542 org.kiama.example.iswim.secd.StringOps.$anonfun: applyOrElse([A1 <: List[org.kiama.example.iswim.secd.SECDBase.Instruction], B1 >: Unit]x1: A1,default: A1 => B1) ===> org.kiama.example.iswim.secd.StringOps: unescape(s: String)
2.0167054517789085 org.kiama.util.RegexCompiler: makeast(reader: java.io.Reader,filename: String,emitter: org.kiama.util.Emitter) ===> org.kiama.example.picojava.Parser: parser()
2.171060089689388 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun: apply()
2.214385486771958 org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.base.Parser: block()
2.45864038898752 org.kiama.util.GeneratingREPLBase: processline(line: String) ===> org.kiama.example.lambda.LambdaGen: generator()
2.4593049171002086 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L4.Parser.$anonfun.$anonfun.$anonfun: apply()
2.503568526661206 org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.base.Parser: statement()
2.5298168671877437 org.kiama.util.GeneratingREPLBase: processline(line: String) ===> org.kiama.example.imperative.ImperativeGen: generator()
2.6664421419562463 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L3.Parser.$anonfun.$anonfun.$anonfun: apply()
2.89260463426783 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L4.Parser.$anonfun: apply()
3.0732882955280085 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L1.Parser.$anonfun: apply()
3.17677920275561 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.til.TIL1_1.$anonfun: apply()
3.330832016493724 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.picojava.Parser.$anonfun.$anonfun: apply()
4.8757006812208505 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L0.Parser.$anonfun: apply()
4.934265219250359 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L0.Parser.$anonfun.$anonfun: apply()
5.0608908518269144 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.picojava.Parser.$anonfun: apply()
5.401185861579321 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L3.Parser.$anonfun: apply()
5.677995092654051 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.oberon0.L2.Parser.$anonfun: apply()
6.044202668219166 org.kiama.rewriting.Rewriter.$anonfun: apply(x$1: Any) ===> org.kiama.example.til.TIL1_1.$anonfun.$anonfun: apply()
6.414458922373736 org.kiama.example.til.Main.$anonfun: apply(arg: String) ===> org.kiama.example.til.TransformingMain: process(reader: java.io.Reader)
6.976278189147192 org.kiama.example.oberon0.base.Parser.$anonfun: apply() ===> org.kiama.example.oberon0.base.Parser: keyword()
10.746604030928992 org.kiama.util.CompilerBase: main(args: Array[String]) ===> org.kiama.example.oberon0.base.Driver: driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter)
22.15731127124271 org.kiama.util.CompilerBase: driver(args: Array[String],console: org.kiama.util.Console,emitter: org.kiama.util.Emitter) ===> org.kiama.example.oberon0.base.Driver: checkargs(args: Array[String],emitter: org.kiama.util.Emitter)
43.33495117293084 org.kiama.util.CompilerBase.$anonfun: apply(arg: String) ===> org.kiama.example.oberon0.base.Driver: process(ast: org.kiama.example.oberon0.base.source.ModuleDecl,console: org.kiama.util.Console,emitter: org.kiama.util.Emitter)
===========================================================================
Number of reachable methods missing in local/dist/tca-this-super/kiama/callgraph.gxl.gzip: 2143
===========================================================================
