[[syntax trees at end of                   uncurry]] // Closures.scala
package tests.tca.wala {
  object Closures extends Object {
    def <init>(): tests.tca.wala.Closures.type = {
      Closures.super.<init>();
      ()
    };
    def main(args: Array[String]): Unit = {
      val foo1: () => tests.tca.wala.Closures.A = {
        @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[tests.tca.wala.Closures.A] with Serializable {
          def <init>(): anonymous class $anonfun = {
            $anonfun.super.<init>();
            ()
          };
          final def apply(): tests.tca.wala.Closures.A = {
            scala.this.Predef.println("foo1");
            new tests.tca.wala.Closures.A()
          }
        };
        (new anonymous class $anonfun(): () => tests.tca.wala.Closures.A)
      };
      val foo2: () => tests.tca.wala.Closures.B = {
        @SerialVersionUID(0) final <synthetic> class $anonfun extends scala.runtime.AbstractFunction0[tests.tca.wala.Closures.B] with Serializable {
          def <init>(): anonymous class $anonfun = {
            $anonfun.super.<init>();
            ()
          };
          final def apply(): tests.tca.wala.Closures.B = {
            scala.this.Predef.println("foo2");
            new tests.tca.wala.Closures.B()
          }
        };
        (new anonymous class $anonfun(): () => tests.tca.wala.Closures.B)
      };
      this.bar1(foo1);
      this.bar2(foo2)
    };
    def bar1(y: () => tests.tca.wala.Closures.A): Unit = {
      y.apply();
      ()
    };
    def bar2(z: () => tests.tca.wala.Closures.B): Unit = {
      z.apply();
      ()
    };
    class A extends Object {
      def <init>(): tests.tca.wala.Closures.A = {
        A.super.<init>();
        ()
      }
    };
    class B extends Object {
      def <init>(): tests.tca.wala.Closures.B = {
        B.super.<init>();
        ()
      }
    }
  }
}